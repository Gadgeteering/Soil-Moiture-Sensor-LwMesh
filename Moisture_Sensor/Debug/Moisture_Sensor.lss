
Moisture_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ccbc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  0000ccbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001060  20000078  0000cd34  00020078  2**2
                  ALLOC
  3 .stack        00001000  200010d8  0000dd94  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   000498b2  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006a40  00000000  00000000  000699de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007206  00000000  00000000  0007041e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001500  00000000  00000000  00077624  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001278  00000000  00000000  00078b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011297  00000000  00000000  00079d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00021ef9  00000000  00000000  0008b033  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008cf31  00000000  00000000  000acf2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004c84  00000000  00000000  00139e60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
       0:	200020d8 	.word	0x200020d8
       4:	0000b239 	.word	0x0000b239
       8:	0000b331 	.word	0x0000b331
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
       c:	0000b331 	.word	0x0000b331
	...

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
      2c:	0000b331 	.word	0x0000b331
	...

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
      38:	0000b331 	.word	0x0000b331
      3c:	0000b331 	.word	0x0000b331
      40:	0000b331 	.word	0x0000b331
      44:	0000b331 	.word	0x0000b331
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
      48:	0000b331 	.word	0x0000b331
      4c:	000001e9 	.word	0x000001e9
      50:	0000a175 	.word	0x0000a175
				while (rtc_count_is_syncing(module)) {
      54:	0000b331 	.word	0x0000b331
      58:	0000b331 	.word	0x0000b331
      5c:	00001b25 	.word	0x00001b25
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
      60:	0000b331 	.word	0x0000b331
      64:	00009f25 	.word	0x00009f25
      68:	00009f3d 	.word	0x00009f3d
      6c:	00009f55 	.word	0x00009f55
      70:	00009f6d 	.word	0x00009f6d
      74:	00009f85 	.word	0x00009f85
      78:	00009f9d 	.word	0x00009f9d
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
      7c:	0000b331 	.word	0x0000b331
      80:	0000b331 	.word	0x0000b331
      84:	0000b331 	.word	0x0000b331
      88:	00009169 	.word	0x00009169
      8c:	0000917d 	.word	0x0000917d
      90:	00009191 	.word	0x00009191
	...
			}
			break;

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
      9c:	0000b331 	.word	0x0000b331
      a0:	0000b331 	.word	0x0000b331
      a4:	00000000 	.word	0x00000000

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
      a8:	0000b331 	.word	0x0000b331
	...

000000b4 <__do_global_dtors_aux>:
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
				while (rtc_count_is_syncing(module)) {
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000078 	.word	0x20000078
      d4:	00000000 	.word	0x00000000
      d8:	0000ccbc 	.word	0x0000ccbc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     100:	00000000 	.word	0x00000000
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     104:	2000007c 	.word	0x2000007c
     108:	0000ccbc 	.word	0x0000ccbc
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     10c:	0000ccbc 	.word	0x0000ccbc
     110:	00000000 	.word	0x00000000

00000114 <_rtc_interrupt_handler>:
     114:	b580      	push	{r7, lr}
     116:	b086      	sub	sp, #24
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
     11c:	4b31      	ldr	r3, [pc, #196]	; (1e4 <_rtc_interrupt_handler+0xd0>)
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
     11e:	687a      	ldr	r2, [r7, #4]
     120:	0092      	lsls	r2, r2, #2
     122:	58d3      	ldr	r3, [r2, r3]
     124:	617b      	str	r3, [r7, #20]
     126:	697b      	ldr	r3, [r7, #20]
     128:	681b      	ldr	r3, [r3, #0]
     12a:	613b      	str	r3, [r7, #16]
     12c:	230e      	movs	r3, #14
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     12e:	18fb      	adds	r3, r7, r3
}
     130:	697a      	ldr	r2, [r7, #20]
     132:	8ad2      	ldrh	r2, [r2, #22]
     134:	801a      	strh	r2, [r3, #0]
     136:	697b      	ldr	r3, [r7, #20]
     138:	8a9b      	ldrh	r3, [r3, #20]
     13a:	b29a      	uxth	r2, r3
     13c:	230e      	movs	r3, #14
     13e:	18fb      	adds	r3, r7, r3
     140:	210e      	movs	r1, #14
     142:	1879      	adds	r1, r7, r1

	Rtc *const rtc_module = module->hw;

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
	callback_mask &= module->registered_callback;
     144:	8809      	ldrh	r1, [r1, #0]
     146:	400a      	ands	r2, r1
     148:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     14a:	693b      	ldr	r3, [r7, #16]
     14c:	7a1b      	ldrb	r3, [r3, #8]
     14e:	b2da      	uxtb	r2, r3
     150:	230c      	movs	r3, #12
     152:	18fb      	adds	r3, r7, r3
     154:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     156:	693b      	ldr	r3, [r7, #16]
     158:	79db      	ldrb	r3, [r3, #7]
     15a:	b2db      	uxtb	r3, r3
     15c:	b29a      	uxth	r2, r3
     15e:	230c      	movs	r3, #12
     160:	18fb      	adds	r3, r7, r3
     162:	210c      	movs	r1, #12
     164:	1879      	adds	r1, r7, r1
     166:	8809      	ldrh	r1, [r1, #0]
     168:	400a      	ands	r2, r1
     16a:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     16c:	230c      	movs	r3, #12
     16e:	18fb      	adds	r3, r7, r3
     170:	881b      	ldrh	r3, [r3, #0]
     172:	2280      	movs	r2, #128	; 0x80
     174:	4013      	ands	r3, r2
     176:	d00c      	beq.n	192 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     178:	230e      	movs	r3, #14
     17a:	18fb      	adds	r3, r7, r3
     17c:	881b      	ldrh	r3, [r3, #0]
     17e:	2204      	movs	r2, #4
     180:	4013      	ands	r3, r2
     182:	d002      	beq.n	18a <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     184:	697b      	ldr	r3, [r7, #20]
     186:	691b      	ldr	r3, [r3, #16]
     188:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     18a:	693b      	ldr	r3, [r7, #16]
     18c:	2280      	movs	r2, #128	; 0x80
     18e:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     190:	e024      	b.n	1dc <_rtc_interrupt_handler+0xc8>
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     192:	230c      	movs	r3, #12
     194:	18fb      	adds	r3, r7, r3
     196:	881b      	ldrh	r3, [r3, #0]
     198:	2201      	movs	r2, #1
     19a:	4013      	ands	r3, r2
     19c:	d00c      	beq.n	1b8 <_rtc_interrupt_handler+0xa4>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     19e:	230e      	movs	r3, #14
     1a0:	18fb      	adds	r3, r7, r3
     1a2:	881b      	ldrh	r3, [r3, #0]
     1a4:	2201      	movs	r2, #1
     1a6:	4013      	ands	r3, r2
     1a8:	d002      	beq.n	1b0 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     1aa:	697b      	ldr	r3, [r7, #20]
     1ac:	689b      	ldr	r3, [r3, #8]
     1ae:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     1b0:	693b      	ldr	r3, [r7, #16]
     1b2:	2201      	movs	r2, #1
     1b4:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     1b6:	e011      	b.n	1dc <_rtc_interrupt_handler+0xc8>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     1b8:	230c      	movs	r3, #12
     1ba:	18fb      	adds	r3, r7, r3
     1bc:	881b      	ldrh	r3, [r3, #0]
     1be:	2202      	movs	r2, #2
     1c0:	4013      	ands	r3, r2
     1c2:	d00b      	beq.n	1dc <_rtc_interrupt_handler+0xc8>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     1c4:	230e      	movs	r3, #14
     1c6:	18fb      	adds	r3, r7, r3
     1c8:	881b      	ldrh	r3, [r3, #0]
     1ca:	2202      	movs	r2, #2
     1cc:	4013      	ands	r3, r2
     1ce:	d002      	beq.n	1d6 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     1d0:	697b      	ldr	r3, [r7, #20]
     1d2:	68db      	ldr	r3, [r3, #12]
     1d4:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     1d6:	693b      	ldr	r3, [r7, #16]
     1d8:	2202      	movs	r2, #2
     1da:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     1dc:	46c0      	nop			; (mov r8, r8)
     1de:	46bd      	mov	sp, r7
     1e0:	b006      	add	sp, #24
     1e2:	bd80      	pop	{r7, pc}
     1e4:	20000e28 	.word	0x20000e28

000001e8 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
     1ec:	2000      	movs	r0, #0
     1ee:	4b02      	ldr	r3, [pc, #8]	; (1f8 <RTC_Handler+0x10>)
     1f0:	4798      	blx	r3
}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46bd      	mov	sp, r7
     1f6:	bd80      	pop	{r7, pc}
     1f8:	00000115 	.word	0x00000115

000001fc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b082      	sub	sp, #8
     200:	af00      	add	r7, sp, #0
     202:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     204:	687b      	ldr	r3, [r7, #4]
     206:	2200      	movs	r2, #0
     208:	701a      	strb	r2, [r3, #0]
}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	46bd      	mov	sp, r7
     20e:	b002      	add	sp, #8
     210:	bd80      	pop	{r7, pc}
     212:	46c0      	nop			; (mov r8, r8)

00000214 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     214:	b580      	push	{r7, lr}
     216:	b082      	sub	sp, #8
     218:	af00      	add	r7, sp, #0
     21a:	0002      	movs	r2, r0
     21c:	6039      	str	r1, [r7, #0]
     21e:	1dfb      	adds	r3, r7, #7
     220:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     222:	1dfb      	adds	r3, r7, #7
     224:	781b      	ldrb	r3, [r3, #0]
     226:	2b01      	cmp	r3, #1
     228:	d00a      	beq.n	240 <system_apb_clock_set_mask+0x2c>
     22a:	2b02      	cmp	r3, #2
     22c:	d00f      	beq.n	24e <system_apb_clock_set_mask+0x3a>
     22e:	2b00      	cmp	r3, #0
     230:	d114      	bne.n	25c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     232:	4b0e      	ldr	r3, [pc, #56]	; (26c <system_apb_clock_set_mask+0x58>)
     234:	4a0d      	ldr	r2, [pc, #52]	; (26c <system_apb_clock_set_mask+0x58>)
     236:	6991      	ldr	r1, [r2, #24]
     238:	683a      	ldr	r2, [r7, #0]
     23a:	430a      	orrs	r2, r1
     23c:	619a      	str	r2, [r3, #24]
			break;
     23e:	e00f      	b.n	260 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     240:	4b0a      	ldr	r3, [pc, #40]	; (26c <system_apb_clock_set_mask+0x58>)
     242:	4a0a      	ldr	r2, [pc, #40]	; (26c <system_apb_clock_set_mask+0x58>)
     244:	69d1      	ldr	r1, [r2, #28]
     246:	683a      	ldr	r2, [r7, #0]
     248:	430a      	orrs	r2, r1
     24a:	61da      	str	r2, [r3, #28]
			break;
     24c:	e008      	b.n	260 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     24e:	4b07      	ldr	r3, [pc, #28]	; (26c <system_apb_clock_set_mask+0x58>)
     250:	4a06      	ldr	r2, [pc, #24]	; (26c <system_apb_clock_set_mask+0x58>)
     252:	6a11      	ldr	r1, [r2, #32]
     254:	683a      	ldr	r2, [r7, #0]
     256:	430a      	orrs	r2, r1
     258:	621a      	str	r2, [r3, #32]
			break;
     25a:	e001      	b.n	260 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     25c:	2317      	movs	r3, #23
     25e:	e000      	b.n	262 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     260:	2300      	movs	r3, #0
}
     262:	0018      	movs	r0, r3
     264:	46bd      	mov	sp, r7
     266:	b002      	add	sp, #8
     268:	bd80      	pop	{r7, pc}
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40000400 	.word	0x40000400

00000270 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     270:	b580      	push	{r7, lr}
     272:	b082      	sub	sp, #8
     274:	af00      	add	r7, sp, #0
     276:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     278:	687b      	ldr	r3, [r7, #4]
     27a:	2280      	movs	r2, #128	; 0x80
     27c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     27e:	687b      	ldr	r3, [r7, #4]
     280:	2200      	movs	r2, #0
     282:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     284:	687b      	ldr	r3, [r7, #4]
     286:	2201      	movs	r2, #1
     288:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	2200      	movs	r2, #0
     28e:	70da      	strb	r2, [r3, #3]
}
     290:	46c0      	nop			; (mov r8, r8)
     292:	46bd      	mov	sp, r7
     294:	b002      	add	sp, #8
     296:	bd80      	pop	{r7, pc}

00000298 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     298:	b580      	push	{r7, lr}
     29a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     29c:	4b05      	ldr	r3, [pc, #20]	; (2b4 <system_is_debugger_present+0x1c>)
     29e:	789b      	ldrb	r3, [r3, #2]
     2a0:	b2db      	uxtb	r3, r3
     2a2:	001a      	movs	r2, r3
     2a4:	2302      	movs	r3, #2
     2a6:	4013      	ands	r3, r2
     2a8:	1e5a      	subs	r2, r3, #1
     2aa:	4193      	sbcs	r3, r2
     2ac:	b2db      	uxtb	r3, r3
}
     2ae:	0018      	movs	r0, r3
     2b0:	46bd      	mov	sp, r7
     2b2:	bd80      	pop	{r7, pc}
     2b4:	41002000 	.word	0x41002000

000002b8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     2b8:	b580      	push	{r7, lr}
     2ba:	b084      	sub	sp, #16
     2bc:	af00      	add	r7, sp, #0
     2be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     2c0:	687b      	ldr	r3, [r7, #4]
     2c2:	681b      	ldr	r3, [r3, #0]
     2c4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     2c6:	68fb      	ldr	r3, [r7, #12]
     2c8:	69db      	ldr	r3, [r3, #28]
     2ca:	1e5a      	subs	r2, r3, #1
     2cc:	4193      	sbcs	r3, r2
     2ce:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     2d0:	0018      	movs	r0, r3
     2d2:	46bd      	mov	sp, r7
     2d4:	b004      	add	sp, #16
     2d6:	bd80      	pop	{r7, pc}

000002d8 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     2d8:	b580      	push	{r7, lr}
     2da:	b082      	sub	sp, #8
     2dc:	af00      	add	r7, sp, #0
     2de:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     2e0:	46c0      	nop			; (mov r8, r8)
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	0018      	movs	r0, r3
     2e6:	4b04      	ldr	r3, [pc, #16]	; (2f8 <_usart_wait_for_sync+0x20>)
     2e8:	4798      	blx	r3
     2ea:	1e03      	subs	r3, r0, #0
     2ec:	d1f9      	bne.n	2e2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	46bd      	mov	sp, r7
     2f2:	b002      	add	sp, #8
     2f4:	bd80      	pop	{r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	000002b9 	.word	0x000002b9

000002fc <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     2fc:	b5b0      	push	{r4, r5, r7, lr}
     2fe:	b08c      	sub	sp, #48	; 0x30
     300:	af02      	add	r7, sp, #8
     302:	6078      	str	r0, [r7, #4]
     304:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     306:	687b      	ldr	r3, [r7, #4]
     308:	681b      	ldr	r3, [r3, #0]
     30a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     30c:	687b      	ldr	r3, [r7, #4]
     30e:	681b      	ldr	r3, [r3, #0]
     310:	0018      	movs	r0, r3
     312:	4ba9      	ldr	r3, [pc, #676]	; (5b8 <_usart_set_config+0x2bc>)
     314:	4798      	blx	r3
     316:	0003      	movs	r3, r0
     318:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     31a:	697b      	ldr	r3, [r7, #20]
     31c:	3314      	adds	r3, #20
     31e:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
     320:	2300      	movs	r3, #0
     322:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
     324:	2300      	movs	r3, #0
     326:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     328:	230a      	movs	r3, #10
     32a:	18fb      	adds	r3, r7, r3
     32c:	2200      	movs	r2, #0
     32e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     330:	231f      	movs	r3, #31
     332:	18fb      	adds	r3, r7, r3
     334:	2200      	movs	r2, #0
     336:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     338:	231e      	movs	r3, #30
     33a:	18fb      	adds	r3, r7, r3
     33c:	2210      	movs	r2, #16
     33e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     340:	683b      	ldr	r3, [r7, #0]
     342:	8a1b      	ldrh	r3, [r3, #16]
     344:	2280      	movs	r2, #128	; 0x80
     346:	01d2      	lsls	r2, r2, #7
     348:	4293      	cmp	r3, r2
     34a:	d01c      	beq.n	386 <_usart_set_config+0x8a>
     34c:	2280      	movs	r2, #128	; 0x80
     34e:	01d2      	lsls	r2, r2, #7
     350:	4293      	cmp	r3, r2
     352:	dc06      	bgt.n	362 <_usart_set_config+0x66>
     354:	2b00      	cmp	r3, #0
     356:	d00d      	beq.n	374 <_usart_set_config+0x78>
     358:	2280      	movs	r2, #128	; 0x80
     35a:	0192      	lsls	r2, r2, #6
     35c:	4293      	cmp	r3, r2
     35e:	d024      	beq.n	3aa <_usart_set_config+0xae>
     360:	e035      	b.n	3ce <_usart_set_config+0xd2>
     362:	22c0      	movs	r2, #192	; 0xc0
     364:	01d2      	lsls	r2, r2, #7
     366:	4293      	cmp	r3, r2
     368:	d028      	beq.n	3bc <_usart_set_config+0xc0>
     36a:	2280      	movs	r2, #128	; 0x80
     36c:	0212      	lsls	r2, r2, #8
     36e:	4293      	cmp	r3, r2
     370:	d012      	beq.n	398 <_usart_set_config+0x9c>
     372:	e02c      	b.n	3ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     374:	231f      	movs	r3, #31
     376:	18fb      	adds	r3, r7, r3
     378:	2200      	movs	r2, #0
     37a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     37c:	231e      	movs	r3, #30
     37e:	18fb      	adds	r3, r7, r3
     380:	2210      	movs	r2, #16
     382:	701a      	strb	r2, [r3, #0]
			break;
     384:	e023      	b.n	3ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     386:	231f      	movs	r3, #31
     388:	18fb      	adds	r3, r7, r3
     38a:	2200      	movs	r2, #0
     38c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     38e:	231e      	movs	r3, #30
     390:	18fb      	adds	r3, r7, r3
     392:	2208      	movs	r2, #8
     394:	701a      	strb	r2, [r3, #0]
			break;
     396:	e01a      	b.n	3ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     398:	231f      	movs	r3, #31
     39a:	18fb      	adds	r3, r7, r3
     39c:	2200      	movs	r2, #0
     39e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     3a0:	231e      	movs	r3, #30
     3a2:	18fb      	adds	r3, r7, r3
     3a4:	2203      	movs	r2, #3
     3a6:	701a      	strb	r2, [r3, #0]
			break;
     3a8:	e011      	b.n	3ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     3aa:	231f      	movs	r3, #31
     3ac:	18fb      	adds	r3, r7, r3
     3ae:	2201      	movs	r2, #1
     3b0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     3b2:	231e      	movs	r3, #30
     3b4:	18fb      	adds	r3, r7, r3
     3b6:	2210      	movs	r2, #16
     3b8:	701a      	strb	r2, [r3, #0]
			break;
     3ba:	e008      	b.n	3ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     3bc:	231f      	movs	r3, #31
     3be:	18fb      	adds	r3, r7, r3
     3c0:	2201      	movs	r2, #1
     3c2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     3c4:	231e      	movs	r3, #30
     3c6:	18fb      	adds	r3, r7, r3
     3c8:	2208      	movs	r2, #8
     3ca:	701a      	strb	r2, [r3, #0]
			break;
     3cc:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     3ce:	683b      	ldr	r3, [r7, #0]
     3d0:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
     3d2:	683b      	ldr	r3, [r7, #0]
     3d4:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     3d6:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     3d8:	683b      	ldr	r3, [r7, #0]
     3da:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
     3dc:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
     3de:	683a      	ldr	r2, [r7, #0]
     3e0:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     3e2:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     3e4:	683a      	ldr	r2, [r7, #0]
     3e6:	7e12      	ldrb	r2, [r2, #24]
     3e8:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
     3ea:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     3ec:	683a      	ldr	r2, [r7, #0]
     3ee:	2126      	movs	r1, #38	; 0x26
     3f0:	5c52      	ldrb	r2, [r2, r1]
     3f2:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     3f4:	4313      	orrs	r3, r2
     3f6:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     3f8:	231d      	movs	r3, #29
     3fa:	18fb      	adds	r3, r7, r3
     3fc:	2200      	movs	r2, #0
     3fe:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
     400:	683b      	ldr	r3, [r7, #0]
     402:	685b      	ldr	r3, [r3, #4]
     404:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b00      	cmp	r3, #0
     40a:	d01e      	beq.n	44a <_usart_set_config+0x14e>
     40c:	2280      	movs	r2, #128	; 0x80
     40e:	0552      	lsls	r2, r2, #21
     410:	4293      	cmp	r3, r2
     412:	d14f      	bne.n	4b4 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     414:	683b      	ldr	r3, [r7, #0]
     416:	2227      	movs	r2, #39	; 0x27
     418:	5c9b      	ldrb	r3, [r3, r2]
     41a:	2201      	movs	r2, #1
     41c:	4053      	eors	r3, r2
     41e:	b2db      	uxtb	r3, r3
     420:	2b00      	cmp	r3, #0
     422:	d046      	beq.n	4b2 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     424:	683b      	ldr	r3, [r7, #0]
     426:	6a1d      	ldr	r5, [r3, #32]
     428:	693b      	ldr	r3, [r7, #16]
     42a:	b2db      	uxtb	r3, r3
     42c:	0018      	movs	r0, r3
     42e:	4b63      	ldr	r3, [pc, #396]	; (5bc <_usart_set_config+0x2c0>)
     430:	4798      	blx	r3
     432:	0001      	movs	r1, r0
     434:	231d      	movs	r3, #29
     436:	18fc      	adds	r4, r7, r3
     438:	230a      	movs	r3, #10
     43a:	18fb      	adds	r3, r7, r3
     43c:	001a      	movs	r2, r3
     43e:	0028      	movs	r0, r5
     440:	4b5f      	ldr	r3, [pc, #380]	; (5c0 <_usart_set_config+0x2c4>)
     442:	4798      	blx	r3
     444:	0003      	movs	r3, r0
     446:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
     448:	e033      	b.n	4b2 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     44a:	683b      	ldr	r3, [r7, #0]
     44c:	2227      	movs	r2, #39	; 0x27
     44e:	5c9b      	ldrb	r3, [r3, r2]
     450:	2b00      	cmp	r3, #0
     452:	d014      	beq.n	47e <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     454:	683b      	ldr	r3, [r7, #0]
     456:	6a18      	ldr	r0, [r3, #32]
     458:	683b      	ldr	r3, [r7, #0]
     45a:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
     45c:	231d      	movs	r3, #29
     45e:	18fc      	adds	r4, r7, r3
     460:	231f      	movs	r3, #31
     462:	18fb      	adds	r3, r7, r3
     464:	781d      	ldrb	r5, [r3, #0]
     466:	230a      	movs	r3, #10
     468:	18fa      	adds	r2, r7, r3
     46a:	231e      	movs	r3, #30
     46c:	18fb      	adds	r3, r7, r3
     46e:	781b      	ldrb	r3, [r3, #0]
     470:	9300      	str	r3, [sp, #0]
     472:	002b      	movs	r3, r5
     474:	4d53      	ldr	r5, [pc, #332]	; (5c4 <_usart_set_config+0x2c8>)
     476:	47a8      	blx	r5
     478:	0003      	movs	r3, r0
     47a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
     47c:	e01a      	b.n	4b4 <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     47e:	683b      	ldr	r3, [r7, #0]
     480:	6a1d      	ldr	r5, [r3, #32]
     482:	693b      	ldr	r3, [r7, #16]
     484:	b2db      	uxtb	r3, r3
     486:	0018      	movs	r0, r3
     488:	4b4c      	ldr	r3, [pc, #304]	; (5bc <_usart_set_config+0x2c0>)
     48a:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     48c:	231d      	movs	r3, #29
     48e:	18fc      	adds	r4, r7, r3
     490:	231f      	movs	r3, #31
     492:	18fb      	adds	r3, r7, r3
     494:	7819      	ldrb	r1, [r3, #0]
     496:	230a      	movs	r3, #10
     498:	18fa      	adds	r2, r7, r3
     49a:	231e      	movs	r3, #30
     49c:	18fb      	adds	r3, r7, r3
     49e:	781b      	ldrb	r3, [r3, #0]
     4a0:	9300      	str	r3, [sp, #0]
     4a2:	000b      	movs	r3, r1
     4a4:	0001      	movs	r1, r0
     4a6:	0028      	movs	r0, r5
     4a8:	4d46      	ldr	r5, [pc, #280]	; (5c4 <_usart_set_config+0x2c8>)
     4aa:	47a8      	blx	r5
     4ac:	0003      	movs	r3, r0
     4ae:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
     4b0:	e000      	b.n	4b4 <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
     4b2:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     4b4:	231d      	movs	r3, #29
     4b6:	18fb      	adds	r3, r7, r3
     4b8:	781b      	ldrb	r3, [r3, #0]
     4ba:	2b00      	cmp	r3, #0
     4bc:	d003      	beq.n	4c6 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
     4be:	231d      	movs	r3, #29
     4c0:	18fb      	adds	r3, r7, r3
     4c2:	781b      	ldrb	r3, [r3, #0]
     4c4:	e073      	b.n	5ae <_usart_set_config+0x2b2>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     4c6:	683b      	ldr	r3, [r7, #0]
     4c8:	7e5b      	ldrb	r3, [r3, #25]
     4ca:	2b00      	cmp	r3, #0
     4cc:	d003      	beq.n	4d6 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     4ce:	683b      	ldr	r3, [r7, #0]
     4d0:	7e9a      	ldrb	r2, [r3, #26]
     4d2:	69bb      	ldr	r3, [r7, #24]
     4d4:	739a      	strb	r2, [r3, #14]
	}
#endif

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     4d6:	230a      	movs	r3, #10
     4d8:	18fb      	adds	r3, r7, r3
     4da:	881a      	ldrh	r2, [r3, #0]
     4dc:	69bb      	ldr	r3, [r7, #24]
     4de:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     4e2:	68fb      	ldr	r3, [r7, #12]
     4e4:	4313      	orrs	r3, r2
     4e6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
     4e8:	683b      	ldr	r3, [r7, #0]
     4ea:	2227      	movs	r2, #39	; 0x27
     4ec:	5c9b      	ldrb	r3, [r3, r2]
     4ee:	2201      	movs	r2, #1
     4f0:	4053      	eors	r3, r2
     4f2:	b2db      	uxtb	r3, r3
     4f4:	2b00      	cmp	r3, #0
     4f6:	d003      	beq.n	500 <_usart_set_config+0x204>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     4fa:	2204      	movs	r2, #4
     4fc:	4313      	orrs	r3, r2
     4fe:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     500:	683b      	ldr	r3, [r7, #0]
     502:	7e5b      	ldrb	r3, [r3, #25]
     504:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     506:	683b      	ldr	r3, [r7, #0]
     508:	7f1b      	ldrb	r3, [r3, #28]
     50a:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     50c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     50e:	683b      	ldr	r3, [r7, #0]
     510:	7f5b      	ldrb	r3, [r3, #29]
     512:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     514:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     516:	683b      	ldr	r3, [r7, #0]
     518:	2124      	movs	r1, #36	; 0x24
     51a:	5c5b      	ldrb	r3, [r3, r1]
     51c:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     51e:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     520:	683b      	ldr	r3, [r7, #0]
     522:	2125      	movs	r1, #37	; 0x25
     524:	5c5b      	ldrb	r3, [r3, r1]
     526:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     528:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     52a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
     52c:	683b      	ldr	r3, [r7, #0]
     52e:	7a9b      	ldrb	r3, [r3, #10]
     530:	001a      	movs	r2, r3
     532:	6a3b      	ldr	r3, [r7, #32]
     534:	4313      	orrs	r3, r2
     536:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
     538:	683b      	ldr	r3, [r7, #0]
     53a:	7adb      	ldrb	r3, [r3, #11]
     53c:	001a      	movs	r2, r3
     53e:	6a3b      	ldr	r3, [r7, #32]
     540:	4313      	orrs	r3, r2
     542:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     544:	683b      	ldr	r3, [r7, #0]
     546:	891b      	ldrh	r3, [r3, #8]
     548:	2bff      	cmp	r3, #255	; 0xff
     54a:	d00b      	beq.n	564 <_usart_set_config+0x268>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     54e:	2280      	movs	r2, #128	; 0x80
     550:	0452      	lsls	r2, r2, #17
     552:	4313      	orrs	r3, r2
     554:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
     556:	683b      	ldr	r3, [r7, #0]
     558:	891b      	ldrh	r3, [r3, #8]
     55a:	001a      	movs	r2, r3
     55c:	6a3b      	ldr	r3, [r7, #32]
     55e:	4313      	orrs	r3, r2
     560:	623b      	str	r3, [r7, #32]
     562:	e008      	b.n	576 <_usart_set_config+0x27a>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     564:	683b      	ldr	r3, [r7, #0]
     566:	7edb      	ldrb	r3, [r3, #27]
     568:	2b00      	cmp	r3, #0
     56a:	d004      	beq.n	576 <_usart_set_config+0x27a>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     56e:	2280      	movs	r2, #128	; 0x80
     570:	04d2      	lsls	r2, r2, #19
     572:	4313      	orrs	r3, r2
     574:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     576:	683b      	ldr	r3, [r7, #0]
     578:	222c      	movs	r2, #44	; 0x2c
     57a:	5c9b      	ldrb	r3, [r3, r2]
     57c:	2b00      	cmp	r3, #0
     57e:	d103      	bne.n	588 <_usart_set_config+0x28c>
     580:	4b11      	ldr	r3, [pc, #68]	; (5c8 <_usart_set_config+0x2cc>)
     582:	4798      	blx	r3
     584:	1e03      	subs	r3, r0, #0
     586:	d003      	beq.n	590 <_usart_set_config+0x294>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     58a:	2280      	movs	r2, #128	; 0x80
     58c:	4313      	orrs	r3, r2
     58e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     590:	687b      	ldr	r3, [r7, #4]
     592:	0018      	movs	r0, r3
     594:	4b0d      	ldr	r3, [pc, #52]	; (5cc <_usart_set_config+0x2d0>)
     596:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     598:	69bb      	ldr	r3, [r7, #24]
     59a:	6a3a      	ldr	r2, [r7, #32]
     59c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     59e:	687b      	ldr	r3, [r7, #4]
     5a0:	0018      	movs	r0, r3
     5a2:	4b0a      	ldr	r3, [pc, #40]	; (5cc <_usart_set_config+0x2d0>)
     5a4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     5a6:	69bb      	ldr	r3, [r7, #24]
     5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     5aa:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
     5ac:	2300      	movs	r3, #0
}
     5ae:	0018      	movs	r0, r3
     5b0:	46bd      	mov	sp, r7
     5b2:	b00a      	add	sp, #40	; 0x28
     5b4:	bdb0      	pop	{r4, r5, r7, pc}
     5b6:	46c0      	nop			; (mov r8, r8)
     5b8:	00002b4d 	.word	0x00002b4d
     5bc:	0000afe9 	.word	0x0000afe9
     5c0:	000026c5 	.word	0x000026c5
     5c4:	00002741 	.word	0x00002741
     5c8:	00000299 	.word	0x00000299
     5cc:	000002d9 	.word	0x000002d9

000005d0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     5d0:	b590      	push	{r4, r7, lr}
     5d2:	b093      	sub	sp, #76	; 0x4c
     5d4:	af00      	add	r7, sp, #0
     5d6:	60f8      	str	r0, [r7, #12]
     5d8:	60b9      	str	r1, [r7, #8]
     5da:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
     5dc:	233b      	movs	r3, #59	; 0x3b
     5de:	18fb      	adds	r3, r7, r3
     5e0:	2200      	movs	r2, #0
     5e2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     5e4:	68fb      	ldr	r3, [r7, #12]
     5e6:	68ba      	ldr	r2, [r7, #8]
     5e8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     5ea:	68fb      	ldr	r3, [r7, #12]
     5ec:	681b      	ldr	r3, [r3, #0]
     5ee:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5f0:	68fb      	ldr	r3, [r7, #12]
     5f2:	681b      	ldr	r3, [r3, #0]
     5f4:	0018      	movs	r0, r3
     5f6:	4b86      	ldr	r3, [pc, #536]	; (810 <usart_init+0x240>)
     5f8:	4798      	blx	r3
     5fa:	0003      	movs	r3, r0
     5fc:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     600:	3302      	adds	r3, #2
     602:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     606:	3314      	adds	r3, #20
     608:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     60c:	681b      	ldr	r3, [r3, #0]
     60e:	2201      	movs	r2, #1
     610:	4013      	ands	r3, r2
     612:	d001      	beq.n	618 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     614:	2305      	movs	r3, #5
     616:	e0f6      	b.n	806 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	2202      	movs	r2, #2
     61e:	4013      	ands	r3, r2
     620:	d001      	beq.n	626 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     622:	231c      	movs	r3, #28
     624:	e0ef      	b.n	806 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     626:	2201      	movs	r2, #1
     628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     62a:	409a      	lsls	r2, r3
     62c:	0013      	movs	r3, r2
     62e:	0019      	movs	r1, r3
     630:	2002      	movs	r0, #2
     632:	4b78      	ldr	r3, [pc, #480]	; (814 <usart_init+0x244>)
     634:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     636:	2324      	movs	r3, #36	; 0x24
     638:	18fb      	adds	r3, r7, r3
     63a:	0018      	movs	r0, r3
     63c:	4b76      	ldr	r3, [pc, #472]	; (818 <usart_init+0x248>)
     63e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     640:	687b      	ldr	r3, [r7, #4]
     642:	222d      	movs	r2, #45	; 0x2d
     644:	5c9a      	ldrb	r2, [r3, r2]
     646:	2324      	movs	r3, #36	; 0x24
     648:	18fb      	adds	r3, r7, r3
     64a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     64e:	b2db      	uxtb	r3, r3
     650:	2224      	movs	r2, #36	; 0x24
     652:	18ba      	adds	r2, r7, r2
     654:	0011      	movs	r1, r2
     656:	0018      	movs	r0, r3
     658:	4b70      	ldr	r3, [pc, #448]	; (81c <usart_init+0x24c>)
     65a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     65e:	b2db      	uxtb	r3, r3
     660:	0018      	movs	r0, r3
     662:	4b6f      	ldr	r3, [pc, #444]	; (820 <usart_init+0x250>)
     664:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     666:	687b      	ldr	r3, [r7, #4]
     668:	222d      	movs	r2, #45	; 0x2d
     66a:	5c9b      	ldrb	r3, [r3, r2]
     66c:	2100      	movs	r1, #0
     66e:	0018      	movs	r0, r3
     670:	4b6c      	ldr	r3, [pc, #432]	; (824 <usart_init+0x254>)
     672:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     674:	687b      	ldr	r3, [r7, #4]
     676:	7ada      	ldrb	r2, [r3, #11]
     678:	68fb      	ldr	r3, [r7, #12]
     67a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	2224      	movs	r2, #36	; 0x24
     680:	5c9a      	ldrb	r2, [r3, r2]
     682:	68fb      	ldr	r3, [r7, #12]
     684:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
     686:	687b      	ldr	r3, [r7, #4]
     688:	2225      	movs	r2, #37	; 0x25
     68a:	5c9a      	ldrb	r2, [r3, r2]
     68c:	68fb      	ldr	r3, [r7, #12]
     68e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     690:	687b      	ldr	r3, [r7, #4]
     692:	7eda      	ldrb	r2, [r3, #27]
     694:	68fb      	ldr	r3, [r7, #12]
     696:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     698:	687b      	ldr	r3, [r7, #4]
     69a:	7f1a      	ldrb	r2, [r3, #28]
     69c:	68fb      	ldr	r3, [r7, #12]
     69e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
     6a0:	233b      	movs	r3, #59	; 0x3b
     6a2:	18fc      	adds	r4, r7, r3
     6a4:	687a      	ldr	r2, [r7, #4]
     6a6:	68fb      	ldr	r3, [r7, #12]
     6a8:	0011      	movs	r1, r2
     6aa:	0018      	movs	r0, r3
     6ac:	4b5e      	ldr	r3, [pc, #376]	; (828 <usart_init+0x258>)
     6ae:	4798      	blx	r3
     6b0:	0003      	movs	r3, r0
     6b2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
     6b4:	233b      	movs	r3, #59	; 0x3b
     6b6:	18fb      	adds	r3, r7, r3
     6b8:	781b      	ldrb	r3, [r3, #0]
     6ba:	2b00      	cmp	r3, #0
     6bc:	d003      	beq.n	6c6 <usart_init+0xf6>
		return status_code;
     6be:	233b      	movs	r3, #59	; 0x3b
     6c0:	18fb      	adds	r3, r7, r3
     6c2:	781b      	ldrb	r3, [r3, #0]
     6c4:	e09f      	b.n	806 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     6c6:	2320      	movs	r3, #32
     6c8:	18fb      	adds	r3, r7, r3
     6ca:	0018      	movs	r0, r3
     6cc:	4b57      	ldr	r3, [pc, #348]	; (82c <usart_init+0x25c>)
     6ce:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6d0:	2320      	movs	r3, #32
     6d2:	18fb      	adds	r3, r7, r3
     6d4:	2200      	movs	r2, #0
     6d6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     6d8:	2320      	movs	r3, #32
     6da:	18fb      	adds	r3, r7, r3
     6dc:	2200      	movs	r2, #0
     6de:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     6e0:	687b      	ldr	r3, [r7, #4]
     6e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     6e4:	2310      	movs	r3, #16
     6e6:	18fb      	adds	r3, r7, r3
     6e8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     6ee:	2310      	movs	r3, #16
     6f0:	18fb      	adds	r3, r7, r3
     6f2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     6f4:	687b      	ldr	r3, [r7, #4]
     6f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     6f8:	2310      	movs	r3, #16
     6fa:	18fb      	adds	r3, r7, r3
     6fc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     702:	2310      	movs	r3, #16
     704:	18fb      	adds	r3, r7, r3
     706:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     708:	2347      	movs	r3, #71	; 0x47
     70a:	18fb      	adds	r3, r7, r3
     70c:	2200      	movs	r2, #0
     70e:	701a      	strb	r2, [r3, #0]
     710:	e02c      	b.n	76c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     712:	2347      	movs	r3, #71	; 0x47
     714:	18fb      	adds	r3, r7, r3
     716:	781a      	ldrb	r2, [r3, #0]
     718:	2310      	movs	r3, #16
     71a:	18fb      	adds	r3, r7, r3
     71c:	0092      	lsls	r2, r2, #2
     71e:	58d3      	ldr	r3, [r2, r3]
     720:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     724:	2b00      	cmp	r3, #0
     726:	d109      	bne.n	73c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     728:	2347      	movs	r3, #71	; 0x47
     72a:	18fb      	adds	r3, r7, r3
     72c:	781a      	ldrb	r2, [r3, #0]
     72e:	68bb      	ldr	r3, [r7, #8]
     730:	0011      	movs	r1, r2
     732:	0018      	movs	r0, r3
     734:	4b3e      	ldr	r3, [pc, #248]	; (830 <usart_init+0x260>)
     736:	4798      	blx	r3
     738:	0003      	movs	r3, r0
     73a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     73c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     73e:	3301      	adds	r3, #1
     740:	d00d      	beq.n	75e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     744:	b2da      	uxtb	r2, r3
     746:	2320      	movs	r3, #32
     748:	18fb      	adds	r3, r7, r3
     74a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     74e:	0c1b      	lsrs	r3, r3, #16
     750:	b2db      	uxtb	r3, r3
     752:	2220      	movs	r2, #32
     754:	18ba      	adds	r2, r7, r2
     756:	0011      	movs	r1, r2
     758:	0018      	movs	r0, r3
     75a:	4b36      	ldr	r3, [pc, #216]	; (834 <usart_init+0x264>)
     75c:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     75e:	2347      	movs	r3, #71	; 0x47
     760:	18fb      	adds	r3, r7, r3
     762:	781a      	ldrb	r2, [r3, #0]
     764:	2347      	movs	r3, #71	; 0x47
     766:	18fb      	adds	r3, r7, r3
     768:	3201      	adds	r2, #1
     76a:	701a      	strb	r2, [r3, #0]
     76c:	2347      	movs	r3, #71	; 0x47
     76e:	18fb      	adds	r3, r7, r3
     770:	781b      	ldrb	r3, [r3, #0]
     772:	2b03      	cmp	r3, #3
     774:	d9cd      	bls.n	712 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     776:	2300      	movs	r3, #0
     778:	63fb      	str	r3, [r7, #60]	; 0x3c
     77a:	e00a      	b.n	792 <usart_init+0x1c2>
		module->callback[i]            = NULL;
     77c:	68fa      	ldr	r2, [r7, #12]
     77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     780:	3302      	adds	r3, #2
     782:	009b      	lsls	r3, r3, #2
     784:	18d3      	adds	r3, r2, r3
     786:	3304      	adds	r3, #4
     788:	2200      	movs	r2, #0
     78a:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     78e:	3301      	adds	r3, #1
     790:	63fb      	str	r3, [r7, #60]	; 0x3c
     792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     794:	2b05      	cmp	r3, #5
     796:	d9f1      	bls.n	77c <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
     798:	68fb      	ldr	r3, [r7, #12]
     79a:	2200      	movs	r2, #0
     79c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     79e:	68fb      	ldr	r3, [r7, #12]
     7a0:	2200      	movs	r2, #0
     7a2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     7a4:	68fb      	ldr	r3, [r7, #12]
     7a6:	2200      	movs	r2, #0
     7a8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     7aa:	68fb      	ldr	r3, [r7, #12]
     7ac:	2200      	movs	r2, #0
     7ae:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     7b0:	68fb      	ldr	r3, [r7, #12]
     7b2:	2230      	movs	r2, #48	; 0x30
     7b4:	2100      	movs	r1, #0
     7b6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
     7b8:	68fb      	ldr	r3, [r7, #12]
     7ba:	2231      	movs	r2, #49	; 0x31
     7bc:	2100      	movs	r1, #0
     7be:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
     7c0:	68fb      	ldr	r3, [r7, #12]
     7c2:	2232      	movs	r2, #50	; 0x32
     7c4:	2100      	movs	r1, #0
     7c6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
     7c8:	68fb      	ldr	r3, [r7, #12]
     7ca:	2233      	movs	r2, #51	; 0x33
     7cc:	2100      	movs	r1, #0
     7ce:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     7d0:	68fb      	ldr	r3, [r7, #12]
     7d2:	681b      	ldr	r3, [r3, #0]
     7d4:	2227      	movs	r2, #39	; 0x27
     7d6:	18bc      	adds	r4, r7, r2
     7d8:	0018      	movs	r0, r3
     7da:	4b0d      	ldr	r3, [pc, #52]	; (810 <usart_init+0x240>)
     7dc:	4798      	blx	r3
     7de:	0003      	movs	r3, r0
     7e0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     7e2:	4a15      	ldr	r2, [pc, #84]	; (838 <usart_init+0x268>)
     7e4:	2327      	movs	r3, #39	; 0x27
     7e6:	18fb      	adds	r3, r7, r3
     7e8:	781b      	ldrb	r3, [r3, #0]
     7ea:	0011      	movs	r1, r2
     7ec:	0018      	movs	r0, r3
     7ee:	4b13      	ldr	r3, [pc, #76]	; (83c <usart_init+0x26c>)
     7f0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     7f2:	2327      	movs	r3, #39	; 0x27
     7f4:	18fb      	adds	r3, r7, r3
     7f6:	781a      	ldrb	r2, [r3, #0]
     7f8:	4b11      	ldr	r3, [pc, #68]	; (840 <usart_init+0x270>)
     7fa:	0092      	lsls	r2, r2, #2
     7fc:	68f9      	ldr	r1, [r7, #12]
     7fe:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
     800:	233b      	movs	r3, #59	; 0x3b
     802:	18fb      	adds	r3, r7, r3
     804:	781b      	ldrb	r3, [r3, #0]
}
     806:	0018      	movs	r0, r3
     808:	46bd      	mov	sp, r7
     80a:	b013      	add	sp, #76	; 0x4c
     80c:	bd90      	pop	{r4, r7, pc}
     80e:	46c0      	nop			; (mov r8, r8)
     810:	00002b4d 	.word	0x00002b4d
     814:	00000215 	.word	0x00000215
     818:	000001fd 	.word	0x000001fd
     81c:	0000aec5 	.word	0x0000aec5
     820:	0000af09 	.word	0x0000af09
     824:	00002901 	.word	0x00002901
     828:	000002fd 	.word	0x000002fd
     82c:	00000271 	.word	0x00000271
     830:	0000298d 	.word	0x0000298d
     834:	0000b1b1 	.word	0x0000b1b1
     838:	00000be9 	.word	0x00000be9
     83c:	00009e6d 	.word	0x00009e6d
     840:	200010b8 	.word	0x200010b8

00000844 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     844:	b580      	push	{r7, lr}
     846:	b084      	sub	sp, #16
     848:	af00      	add	r7, sp, #0
     84a:	6078      	str	r0, [r7, #4]
     84c:	000a      	movs	r2, r1
     84e:	1cbb      	adds	r3, r7, #2
     850:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     852:	687b      	ldr	r3, [r7, #4]
     854:	681b      	ldr	r3, [r3, #0]
     856:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     858:	687b      	ldr	r3, [r7, #4]
     85a:	79db      	ldrb	r3, [r3, #7]
     85c:	2201      	movs	r2, #1
     85e:	4053      	eors	r3, r2
     860:	b2db      	uxtb	r3, r3
     862:	2b00      	cmp	r3, #0
     864:	d001      	beq.n	86a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
     866:	231c      	movs	r3, #28
     868:	e013      	b.n	892 <usart_write_wait+0x4e>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     86a:	687b      	ldr	r3, [r7, #4]
     86c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
     86e:	b29b      	uxth	r3, r3
     870:	2b00      	cmp	r3, #0
     872:	d001      	beq.n	878 <usart_write_wait+0x34>
		return STATUS_BUSY;
     874:	2305      	movs	r3, #5
     876:	e00c      	b.n	892 <usart_write_wait+0x4e>
		return STATUS_BUSY;
	}
#endif

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     878:	68fb      	ldr	r3, [r7, #12]
     87a:	1cba      	adds	r2, r7, #2
     87c:	8812      	ldrh	r2, [r2, #0]
     87e:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     880:	46c0      	nop			; (mov r8, r8)
     882:	68fb      	ldr	r3, [r7, #12]
     884:	7e1b      	ldrb	r3, [r3, #24]
     886:	b2db      	uxtb	r3, r3
     888:	001a      	movs	r2, r3
     88a:	2302      	movs	r3, #2
     88c:	4013      	ands	r3, r2
     88e:	d0f8      	beq.n	882 <usart_write_wait+0x3e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     890:	2300      	movs	r3, #0
}
     892:	0018      	movs	r0, r3
     894:	46bd      	mov	sp, r7
     896:	b004      	add	sp, #16
     898:	bd80      	pop	{r7, pc}
     89a:	46c0      	nop			; (mov r8, r8)

0000089c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     89c:	b580      	push	{r7, lr}
     89e:	b084      	sub	sp, #16
     8a0:	af00      	add	r7, sp, #0
     8a2:	6078      	str	r0, [r7, #4]
     8a4:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	681b      	ldr	r3, [r3, #0]
     8aa:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	799b      	ldrb	r3, [r3, #6]
     8b0:	2201      	movs	r2, #1
     8b2:	4053      	eors	r3, r2
     8b4:	b2db      	uxtb	r3, r3
     8b6:	2b00      	cmp	r3, #0
     8b8:	d001      	beq.n	8be <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
     8ba:	231c      	movs	r3, #28
     8bc:	e05a      	b.n	974 <usart_read_wait+0xd8>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     8be:	687b      	ldr	r3, [r7, #4]
     8c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
     8c2:	b29b      	uxth	r3, r3
     8c4:	2b00      	cmp	r3, #0
     8c6:	d001      	beq.n	8cc <usart_read_wait+0x30>
		return STATUS_BUSY;
     8c8:	2305      	movs	r3, #5
     8ca:	e053      	b.n	974 <usart_read_wait+0xd8>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     8cc:	68fb      	ldr	r3, [r7, #12]
     8ce:	7e1b      	ldrb	r3, [r3, #24]
     8d0:	b2db      	uxtb	r3, r3
     8d2:	001a      	movs	r2, r3
     8d4:	2304      	movs	r3, #4
     8d6:	4013      	ands	r3, r2
     8d8:	d101      	bne.n	8de <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
     8da:	2305      	movs	r3, #5
     8dc:	e04a      	b.n	974 <usart_read_wait+0xd8>
	}

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     8de:	68fb      	ldr	r3, [r7, #12]
     8e0:	8b5b      	ldrh	r3, [r3, #26]
     8e2:	b29b      	uxth	r3, r3
     8e4:	b2da      	uxtb	r2, r3
     8e6:	230b      	movs	r3, #11
     8e8:	18fb      	adds	r3, r7, r3
     8ea:	213f      	movs	r1, #63	; 0x3f
     8ec:	400a      	ands	r2, r1
     8ee:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     8f0:	230b      	movs	r3, #11
     8f2:	18fb      	adds	r3, r7, r3
     8f4:	781b      	ldrb	r3, [r3, #0]
     8f6:	2b00      	cmp	r3, #0
     8f8:	d036      	beq.n	968 <usart_read_wait+0xcc>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     8fa:	230b      	movs	r3, #11
     8fc:	18fb      	adds	r3, r7, r3
     8fe:	781b      	ldrb	r3, [r3, #0]
     900:	2202      	movs	r2, #2
     902:	4013      	ands	r3, r2
     904:	d004      	beq.n	910 <usart_read_wait+0x74>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     906:	68fb      	ldr	r3, [r7, #12]
     908:	2202      	movs	r2, #2
     90a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
     90c:	231a      	movs	r3, #26
     90e:	e031      	b.n	974 <usart_read_wait+0xd8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     910:	230b      	movs	r3, #11
     912:	18fb      	adds	r3, r7, r3
     914:	781b      	ldrb	r3, [r3, #0]
     916:	2204      	movs	r2, #4
     918:	4013      	ands	r3, r2
     91a:	d004      	beq.n	926 <usart_read_wait+0x8a>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     91c:	68fb      	ldr	r3, [r7, #12]
     91e:	2204      	movs	r2, #4
     920:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
     922:	231e      	movs	r3, #30
     924:	e026      	b.n	974 <usart_read_wait+0xd8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     926:	230b      	movs	r3, #11
     928:	18fb      	adds	r3, r7, r3
     92a:	781b      	ldrb	r3, [r3, #0]
     92c:	2201      	movs	r2, #1
     92e:	4013      	ands	r3, r2
     930:	d004      	beq.n	93c <usart_read_wait+0xa0>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     932:	68fb      	ldr	r3, [r7, #12]
     934:	2201      	movs	r2, #1
     936:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
     938:	2313      	movs	r3, #19
     93a:	e01b      	b.n	974 <usart_read_wait+0xd8>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     93c:	230b      	movs	r3, #11
     93e:	18fb      	adds	r3, r7, r3
     940:	781b      	ldrb	r3, [r3, #0]
     942:	2210      	movs	r2, #16
     944:	4013      	ands	r3, r2
     946:	d004      	beq.n	952 <usart_read_wait+0xb6>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     948:	68fb      	ldr	r3, [r7, #12]
     94a:	2210      	movs	r2, #16
     94c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
     94e:	2342      	movs	r3, #66	; 0x42
     950:	e010      	b.n	974 <usart_read_wait+0xd8>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     952:	230b      	movs	r3, #11
     954:	18fb      	adds	r3, r7, r3
     956:	781b      	ldrb	r3, [r3, #0]
     958:	2220      	movs	r2, #32
     95a:	4013      	ands	r3, r2
     95c:	d004      	beq.n	968 <usart_read_wait+0xcc>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     95e:	68fb      	ldr	r3, [r7, #12]
     960:	2220      	movs	r2, #32
     962:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
     964:	2341      	movs	r3, #65	; 0x41
     966:	e005      	b.n	974 <usart_read_wait+0xd8>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     968:	68fb      	ldr	r3, [r7, #12]
     96a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     96c:	b29a      	uxth	r2, r3
     96e:	683b      	ldr	r3, [r7, #0]
     970:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
     972:	2300      	movs	r3, #0
}
     974:	0018      	movs	r0, r3
     976:	46bd      	mov	sp, r7
     978:	b004      	add	sp, #16
     97a:	bd80      	pop	{r7, pc}

0000097c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     97c:	b580      	push	{r7, lr}
     97e:	b08a      	sub	sp, #40	; 0x28
     980:	af00      	add	r7, sp, #0
     982:	60f8      	str	r0, [r7, #12]
     984:	60b9      	str	r1, [r7, #8]
     986:	1dbb      	adds	r3, r7, #6
     988:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     98a:	1dbb      	adds	r3, r7, #6
     98c:	881b      	ldrh	r3, [r3, #0]
     98e:	2b00      	cmp	r3, #0
     990:	d101      	bne.n	996 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     992:	2317      	movs	r3, #23
     994:	e07a      	b.n	a8c <usart_write_buffer_wait+0x110>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     996:	68fb      	ldr	r3, [r7, #12]
     998:	79db      	ldrb	r3, [r3, #7]
     99a:	2201      	movs	r2, #1
     99c:	4053      	eors	r3, r2
     99e:	b2db      	uxtb	r3, r3
     9a0:	2b00      	cmp	r3, #0
     9a2:	d001      	beq.n	9a8 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
     9a4:	231c      	movs	r3, #28
     9a6:	e071      	b.n	a8c <usart_write_buffer_wait+0x110>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     9a8:	68fb      	ldr	r3, [r7, #12]
     9aa:	681b      	ldr	r3, [r3, #0]
     9ac:	617b      	str	r3, [r7, #20]

	uint16_t tx_pos = 0;
     9ae:	2326      	movs	r3, #38	; 0x26
     9b0:	18fb      	adds	r3, r7, r3
     9b2:	2200      	movs	r2, #0
     9b4:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
     9b6:	e048      	b.n	a4a <usart_write_buffer_wait+0xce>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     9b8:	2300      	movs	r3, #0
     9ba:	623b      	str	r3, [r7, #32]
     9bc:	e00f      	b.n	9de <usart_write_buffer_wait+0x62>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     9be:	697b      	ldr	r3, [r7, #20]
     9c0:	7e1b      	ldrb	r3, [r3, #24]
     9c2:	b2db      	uxtb	r3, r3
     9c4:	001a      	movs	r2, r3
     9c6:	2301      	movs	r3, #1
     9c8:	4013      	ands	r3, r2
     9ca:	d10d      	bne.n	9e8 <usart_write_buffer_wait+0x6c>
				break;
			} else if (i == USART_TIMEOUT) {
     9cc:	6a3b      	ldr	r3, [r7, #32]
     9ce:	4a31      	ldr	r2, [pc, #196]	; (a94 <usart_write_buffer_wait+0x118>)
     9d0:	4293      	cmp	r3, r2
     9d2:	d101      	bne.n	9d8 <usart_write_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
     9d4:	2312      	movs	r3, #18
     9d6:	e059      	b.n	a8c <usart_write_buffer_wait+0x110>

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     9d8:	6a3b      	ldr	r3, [r7, #32]
     9da:	3301      	adds	r3, #1
     9dc:	623b      	str	r3, [r7, #32]
     9de:	6a3b      	ldr	r3, [r7, #32]
     9e0:	4a2c      	ldr	r2, [pc, #176]	; (a94 <usart_write_buffer_wait+0x118>)
     9e2:	4293      	cmp	r3, r2
     9e4:	d9eb      	bls.n	9be <usart_write_buffer_wait+0x42>
     9e6:	e000      	b.n	9ea <usart_write_buffer_wait+0x6e>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
     9e8:	46c0      	nop			; (mov r8, r8)
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     9ea:	2326      	movs	r3, #38	; 0x26
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	881b      	ldrh	r3, [r3, #0]
     9f0:	2226      	movs	r2, #38	; 0x26
     9f2:	18ba      	adds	r2, r7, r2
     9f4:	1c59      	adds	r1, r3, #1
     9f6:	8011      	strh	r1, [r2, #0]
     9f8:	001a      	movs	r2, r3
     9fa:	68bb      	ldr	r3, [r7, #8]
     9fc:	189b      	adds	r3, r3, r2
     9fe:	781a      	ldrb	r2, [r3, #0]
     a00:	231e      	movs	r3, #30
     a02:	18fb      	adds	r3, r7, r3
     a04:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a06:	68fb      	ldr	r3, [r7, #12]
     a08:	795b      	ldrb	r3, [r3, #5]
     a0a:	2b01      	cmp	r3, #1
     a0c:	d115      	bne.n	a3a <usart_write_buffer_wait+0xbe>
			data_to_send |= (tx_data[tx_pos++] << 8);
     a0e:	2326      	movs	r3, #38	; 0x26
     a10:	18fb      	adds	r3, r7, r3
     a12:	881b      	ldrh	r3, [r3, #0]
     a14:	2226      	movs	r2, #38	; 0x26
     a16:	18ba      	adds	r2, r7, r2
     a18:	1c59      	adds	r1, r3, #1
     a1a:	8011      	strh	r1, [r2, #0]
     a1c:	001a      	movs	r2, r3
     a1e:	68bb      	ldr	r3, [r7, #8]
     a20:	189b      	adds	r3, r3, r2
     a22:	781b      	ldrb	r3, [r3, #0]
     a24:	021b      	lsls	r3, r3, #8
     a26:	b21a      	sxth	r2, r3
     a28:	231e      	movs	r3, #30
     a2a:	18fb      	adds	r3, r7, r3
     a2c:	2100      	movs	r1, #0
     a2e:	5e5b      	ldrsh	r3, [r3, r1]
     a30:	4313      	orrs	r3, r2
     a32:	b21a      	sxth	r2, r3
     a34:	231e      	movs	r3, #30
     a36:	18fb      	adds	r3, r7, r3
     a38:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
     a3a:	231e      	movs	r3, #30
     a3c:	18fb      	adds	r3, r7, r3
     a3e:	881a      	ldrh	r2, [r3, #0]
     a40:	68fb      	ldr	r3, [r7, #12]
     a42:	0011      	movs	r1, r2
     a44:	0018      	movs	r0, r3
     a46:	4b14      	ldr	r3, [pc, #80]	; (a98 <usart_write_buffer_wait+0x11c>)
     a48:	4798      	blx	r3
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
     a4a:	1dbb      	adds	r3, r7, #6
     a4c:	881b      	ldrh	r3, [r3, #0]
     a4e:	1dba      	adds	r2, r7, #6
     a50:	1e59      	subs	r1, r3, #1
     a52:	8011      	strh	r1, [r2, #0]
     a54:	2b00      	cmp	r3, #0
     a56:	d1af      	bne.n	9b8 <usart_write_buffer_wait+0x3c>
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     a58:	2300      	movs	r3, #0
     a5a:	61bb      	str	r3, [r7, #24]
     a5c:	e00f      	b.n	a7e <usart_write_buffer_wait+0x102>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     a5e:	697b      	ldr	r3, [r7, #20]
     a60:	7e1b      	ldrb	r3, [r3, #24]
     a62:	b2db      	uxtb	r3, r3
     a64:	001a      	movs	r2, r3
     a66:	2302      	movs	r3, #2
     a68:	4013      	ands	r3, r2
     a6a:	d10d      	bne.n	a88 <usart_write_buffer_wait+0x10c>
			break;
		} else if (i == USART_TIMEOUT) {
     a6c:	69bb      	ldr	r3, [r7, #24]
     a6e:	4a09      	ldr	r2, [pc, #36]	; (a94 <usart_write_buffer_wait+0x118>)
     a70:	4293      	cmp	r3, r2
     a72:	d101      	bne.n	a78 <usart_write_buffer_wait+0xfc>
			return STATUS_ERR_TIMEOUT;
     a74:	2312      	movs	r3, #18
     a76:	e009      	b.n	a8c <usart_write_buffer_wait+0x110>
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     a78:	69bb      	ldr	r3, [r7, #24]
     a7a:	3301      	adds	r3, #1
     a7c:	61bb      	str	r3, [r7, #24]
     a7e:	69bb      	ldr	r3, [r7, #24]
     a80:	4a04      	ldr	r2, [pc, #16]	; (a94 <usart_write_buffer_wait+0x118>)
     a82:	4293      	cmp	r3, r2
     a84:	d9eb      	bls.n	a5e <usart_write_buffer_wait+0xe2>
     a86:	e000      	b.n	a8a <usart_write_buffer_wait+0x10e>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
     a88:	46c0      	nop			; (mov r8, r8)
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     a8a:	2300      	movs	r3, #0
}
     a8c:	0018      	movs	r0, r3
     a8e:	46bd      	mov	sp, r7
     a90:	b00a      	add	sp, #40	; 0x28
     a92:	bd80      	pop	{r7, pc}
     a94:	0000ffff 	.word	0x0000ffff
     a98:	00000845 	.word	0x00000845

00000a9c <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     a9c:	b590      	push	{r4, r7, lr}
     a9e:	b089      	sub	sp, #36	; 0x24
     aa0:	af00      	add	r7, sp, #0
     aa2:	60f8      	str	r0, [r7, #12]
     aa4:	60b9      	str	r1, [r7, #8]
     aa6:	1dbb      	adds	r3, r7, #6
     aa8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     aaa:	1dbb      	adds	r3, r7, #6
     aac:	881b      	ldrh	r3, [r3, #0]
     aae:	2b00      	cmp	r3, #0
     ab0:	d101      	bne.n	ab6 <usart_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
     ab2:	2317      	movs	r3, #23
     ab4:	e06d      	b.n	b92 <usart_read_buffer_wait+0xf6>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     ab6:	68fb      	ldr	r3, [r7, #12]
     ab8:	799b      	ldrb	r3, [r3, #6]
     aba:	2201      	movs	r2, #1
     abc:	4053      	eors	r3, r2
     abe:	b2db      	uxtb	r3, r3
     ac0:	2b00      	cmp	r3, #0
     ac2:	d001      	beq.n	ac8 <usart_read_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
     ac4:	231c      	movs	r3, #28
     ac6:	e064      	b.n	b92 <usart_read_buffer_wait+0xf6>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ac8:	68fb      	ldr	r3, [r7, #12]
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	617b      	str	r3, [r7, #20]

	uint16_t rx_pos = 0;
     ace:	231e      	movs	r3, #30
     ad0:	18fb      	adds	r3, r7, r3
     ad2:	2200      	movs	r2, #0
     ad4:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being received */
	while (length--) {
     ad6:	e054      	b.n	b82 <usart_read_buffer_wait+0xe6>
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     ad8:	2300      	movs	r3, #0
     ada:	61bb      	str	r3, [r7, #24]
     adc:	e00f      	b.n	afe <usart_read_buffer_wait+0x62>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     ade:	697b      	ldr	r3, [r7, #20]
     ae0:	7e1b      	ldrb	r3, [r3, #24]
     ae2:	b2db      	uxtb	r3, r3
     ae4:	001a      	movs	r2, r3
     ae6:	2304      	movs	r3, #4
     ae8:	4013      	ands	r3, r2
     aea:	d10d      	bne.n	b08 <usart_read_buffer_wait+0x6c>
				break;
			} else if (i == USART_TIMEOUT) {
     aec:	69bb      	ldr	r3, [r7, #24]
     aee:	4a2b      	ldr	r2, [pc, #172]	; (b9c <usart_read_buffer_wait+0x100>)
     af0:	4293      	cmp	r3, r2
     af2:	d101      	bne.n	af8 <usart_read_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
     af4:	2312      	movs	r3, #18
     af6:	e04c      	b.n	b92 <usart_read_buffer_wait+0xf6>

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     af8:	69bb      	ldr	r3, [r7, #24]
     afa:	3301      	adds	r3, #1
     afc:	61bb      	str	r3, [r7, #24]
     afe:	69bb      	ldr	r3, [r7, #24]
     b00:	4a26      	ldr	r2, [pc, #152]	; (b9c <usart_read_buffer_wait+0x100>)
     b02:	4293      	cmp	r3, r2
     b04:	d9eb      	bls.n	ade <usart_read_buffer_wait+0x42>
     b06:	e000      	b.n	b0a <usart_read_buffer_wait+0x6e>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
     b08:	46c0      	nop			; (mov r8, r8)
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
     b0a:	2310      	movs	r3, #16
     b0c:	18fb      	adds	r3, r7, r3
     b0e:	2200      	movs	r2, #0
     b10:	801a      	strh	r2, [r3, #0]

		retval = usart_read_wait(module, &received_data);
     b12:	2313      	movs	r3, #19
     b14:	18fc      	adds	r4, r7, r3
     b16:	2310      	movs	r3, #16
     b18:	18fa      	adds	r2, r7, r3
     b1a:	68fb      	ldr	r3, [r7, #12]
     b1c:	0011      	movs	r1, r2
     b1e:	0018      	movs	r0, r3
     b20:	4b1f      	ldr	r3, [pc, #124]	; (ba0 <usart_read_buffer_wait+0x104>)
     b22:	4798      	blx	r3
     b24:	0003      	movs	r3, r0
     b26:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
     b28:	2313      	movs	r3, #19
     b2a:	18fb      	adds	r3, r7, r3
     b2c:	781b      	ldrb	r3, [r3, #0]
     b2e:	2b00      	cmp	r3, #0
     b30:	d003      	beq.n	b3a <usart_read_buffer_wait+0x9e>
			/* Overflow, abort */
			return retval;
     b32:	2313      	movs	r3, #19
     b34:	18fb      	adds	r3, r7, r3
     b36:	781b      	ldrb	r3, [r3, #0]
     b38:	e02b      	b.n	b92 <usart_read_buffer_wait+0xf6>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     b3a:	231e      	movs	r3, #30
     b3c:	18fb      	adds	r3, r7, r3
     b3e:	881b      	ldrh	r3, [r3, #0]
     b40:	221e      	movs	r2, #30
     b42:	18ba      	adds	r2, r7, r2
     b44:	1c59      	adds	r1, r3, #1
     b46:	8011      	strh	r1, [r2, #0]
     b48:	001a      	movs	r2, r3
     b4a:	68bb      	ldr	r3, [r7, #8]
     b4c:	189b      	adds	r3, r3, r2
     b4e:	2210      	movs	r2, #16
     b50:	18ba      	adds	r2, r7, r2
     b52:	8812      	ldrh	r2, [r2, #0]
     b54:	b2d2      	uxtb	r2, r2
     b56:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b58:	68fb      	ldr	r3, [r7, #12]
     b5a:	795b      	ldrb	r3, [r3, #5]
     b5c:	2b01      	cmp	r3, #1
     b5e:	d110      	bne.n	b82 <usart_read_buffer_wait+0xe6>
			rx_data[rx_pos++] = (received_data >> 8);
     b60:	231e      	movs	r3, #30
     b62:	18fb      	adds	r3, r7, r3
     b64:	881b      	ldrh	r3, [r3, #0]
     b66:	221e      	movs	r2, #30
     b68:	18ba      	adds	r2, r7, r2
     b6a:	1c59      	adds	r1, r3, #1
     b6c:	8011      	strh	r1, [r2, #0]
     b6e:	001a      	movs	r2, r3
     b70:	68bb      	ldr	r3, [r7, #8]
     b72:	189b      	adds	r3, r3, r2
     b74:	2210      	movs	r2, #16
     b76:	18ba      	adds	r2, r7, r2
     b78:	8812      	ldrh	r2, [r2, #0]
     b7a:	0a12      	lsrs	r2, r2, #8
     b7c:	b292      	uxth	r2, r2
     b7e:	b2d2      	uxtb	r2, r2
     b80:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
     b82:	1dbb      	adds	r3, r7, #6
     b84:	881b      	ldrh	r3, [r3, #0]
     b86:	1dba      	adds	r2, r7, #6
     b88:	1e59      	subs	r1, r3, #1
     b8a:	8011      	strh	r1, [r2, #0]
     b8c:	2b00      	cmp	r3, #0
     b8e:	d1a3      	bne.n	ad8 <usart_read_buffer_wait+0x3c>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
     b90:	2300      	movs	r3, #0
}
     b92:	0018      	movs	r0, r3
     b94:	46bd      	mov	sp, r7
     b96:	b009      	add	sp, #36	; 0x24
     b98:	bd90      	pop	{r4, r7, pc}
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	0000ffff 	.word	0x0000ffff
     ba0:	0000089d 	.word	0x0000089d

00000ba4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     ba4:	b580      	push	{r7, lr}
     ba6:	b084      	sub	sp, #16
     ba8:	af00      	add	r7, sp, #0
     baa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     bac:	687b      	ldr	r3, [r7, #4]
     bae:	681b      	ldr	r3, [r3, #0]
     bb0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     bb2:	68fb      	ldr	r3, [r7, #12]
     bb4:	69db      	ldr	r3, [r3, #28]
     bb6:	1e5a      	subs	r2, r3, #1
     bb8:	4193      	sbcs	r3, r2
     bba:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     bbc:	0018      	movs	r0, r3
     bbe:	46bd      	mov	sp, r7
     bc0:	b004      	add	sp, #16
     bc2:	bd80      	pop	{r7, pc}

00000bc4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     bc4:	b580      	push	{r7, lr}
     bc6:	b082      	sub	sp, #8
     bc8:	af00      	add	r7, sp, #0
     bca:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     bcc:	46c0      	nop			; (mov r8, r8)
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	0018      	movs	r0, r3
     bd2:	4b04      	ldr	r3, [pc, #16]	; (be4 <_usart_wait_for_sync+0x20>)
     bd4:	4798      	blx	r3
     bd6:	1e03      	subs	r3, r0, #0
     bd8:	d1f9      	bne.n	bce <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	46bd      	mov	sp, r7
     bde:	b002      	add	sp, #8
     be0:	bd80      	pop	{r7, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	00000ba5 	.word	0x00000ba5

00000be8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     be8:	b580      	push	{r7, lr}
     bea:	b088      	sub	sp, #32
     bec:	af00      	add	r7, sp, #0
     bee:	0002      	movs	r2, r0
     bf0:	1dfb      	adds	r3, r7, #7
     bf2:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
     bf4:	1dfb      	adds	r3, r7, #7
     bf6:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     bf8:	4ba3      	ldr	r3, [pc, #652]	; (e88 <_usart_interrupt_handler+0x2a0>)
     bfa:	0092      	lsls	r2, r2, #2
     bfc:	58d3      	ldr	r3, [r2, r3]
     bfe:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     c00:	69bb      	ldr	r3, [r7, #24]
     c02:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
     c04:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
     c06:	69bb      	ldr	r3, [r7, #24]
     c08:	0018      	movs	r0, r3
     c0a:	4ba0      	ldr	r3, [pc, #640]	; (e8c <_usart_interrupt_handler+0x2a4>)
     c0c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     c0e:	697b      	ldr	r3, [r7, #20]
     c10:	7e1b      	ldrb	r3, [r3, #24]
     c12:	b2da      	uxtb	r2, r3
     c14:	2312      	movs	r3, #18
     c16:	18fb      	adds	r3, r7, r3
     c18:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
     c1a:	697b      	ldr	r3, [r7, #20]
     c1c:	7d9b      	ldrb	r3, [r3, #22]
     c1e:	b2db      	uxtb	r3, r3
     c20:	b29a      	uxth	r2, r3
     c22:	2312      	movs	r3, #18
     c24:	18fb      	adds	r3, r7, r3
     c26:	2112      	movs	r1, #18
     c28:	1879      	adds	r1, r7, r1
     c2a:	8809      	ldrh	r1, [r1, #0]
     c2c:	400a      	ands	r2, r1
     c2e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
     c30:	69bb      	ldr	r3, [r7, #24]
     c32:	2230      	movs	r2, #48	; 0x30
     c34:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
     c36:	69ba      	ldr	r2, [r7, #24]
     c38:	2131      	movs	r1, #49	; 0x31
     c3a:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     c3c:	4013      	ands	r3, r2
     c3e:	b2da      	uxtb	r2, r3
     c40:	2310      	movs	r3, #16
     c42:	18fb      	adds	r3, r7, r3
     c44:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     c46:	2312      	movs	r3, #18
     c48:	18fb      	adds	r3, r7, r3
     c4a:	881b      	ldrh	r3, [r3, #0]
     c4c:	2201      	movs	r2, #1
     c4e:	4013      	ands	r3, r2
     c50:	d044      	beq.n	cdc <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
     c52:	69bb      	ldr	r3, [r7, #24]
     c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
     c56:	b29b      	uxth	r3, r3
     c58:	2b00      	cmp	r3, #0
     c5a:	d03c      	beq.n	cd6 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c5c:	69bb      	ldr	r3, [r7, #24]
     c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     c60:	781b      	ldrb	r3, [r3, #0]
     c62:	b2da      	uxtb	r2, r3
     c64:	231c      	movs	r3, #28
     c66:	18fb      	adds	r3, r7, r3
     c68:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     c6a:	69bb      	ldr	r3, [r7, #24]
     c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     c6e:	1c5a      	adds	r2, r3, #1
     c70:	69bb      	ldr	r3, [r7, #24]
     c72:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c74:	69bb      	ldr	r3, [r7, #24]
     c76:	795b      	ldrb	r3, [r3, #5]
     c78:	2b01      	cmp	r3, #1
     c7a:	d113      	bne.n	ca4 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     c7c:	69bb      	ldr	r3, [r7, #24]
     c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     c80:	781b      	ldrb	r3, [r3, #0]
     c82:	b2db      	uxtb	r3, r3
     c84:	021b      	lsls	r3, r3, #8
     c86:	b21a      	sxth	r2, r3
     c88:	231c      	movs	r3, #28
     c8a:	18fb      	adds	r3, r7, r3
     c8c:	2100      	movs	r1, #0
     c8e:	5e5b      	ldrsh	r3, [r3, r1]
     c90:	4313      	orrs	r3, r2
     c92:	b21a      	sxth	r2, r3
     c94:	231c      	movs	r3, #28
     c96:	18fb      	adds	r3, r7, r3
     c98:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     c9a:	69bb      	ldr	r3, [r7, #24]
     c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     c9e:	1c5a      	adds	r2, r3, #1
     ca0:	69bb      	ldr	r3, [r7, #24]
     ca2:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     ca4:	231c      	movs	r3, #28
     ca6:	18fb      	adds	r3, r7, r3
     ca8:	881b      	ldrh	r3, [r3, #0]
     caa:	05db      	lsls	r3, r3, #23
     cac:	0ddb      	lsrs	r3, r3, #23
     cae:	b29a      	uxth	r2, r3
     cb0:	697b      	ldr	r3, [r7, #20]
     cb2:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     cb4:	69bb      	ldr	r3, [r7, #24]
     cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
     cb8:	b29b      	uxth	r3, r3
     cba:	3b01      	subs	r3, #1
     cbc:	b29b      	uxth	r3, r3
     cbe:	69ba      	ldr	r2, [r7, #24]
     cc0:	1c19      	adds	r1, r3, #0
     cc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
     cc4:	2b00      	cmp	r3, #0
     cc6:	d109      	bne.n	cdc <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     cc8:	697b      	ldr	r3, [r7, #20]
     cca:	2201      	movs	r2, #1
     ccc:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     cce:	697b      	ldr	r3, [r7, #20]
     cd0:	2202      	movs	r2, #2
     cd2:	759a      	strb	r2, [r3, #22]
     cd4:	e002      	b.n	cdc <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	2201      	movs	r2, #1
     cda:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     cdc:	2312      	movs	r3, #18
     cde:	18fb      	adds	r3, r7, r3
     ce0:	881b      	ldrh	r3, [r3, #0]
     ce2:	2202      	movs	r2, #2
     ce4:	4013      	ands	r3, r2
     ce6:	d011      	beq.n	d0c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     ce8:	697b      	ldr	r3, [r7, #20]
     cea:	2202      	movs	r2, #2
     cec:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
     cee:	69bb      	ldr	r3, [r7, #24]
     cf0:	2233      	movs	r2, #51	; 0x33
     cf2:	2100      	movs	r1, #0
     cf4:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     cf6:	2310      	movs	r3, #16
     cf8:	18fb      	adds	r3, r7, r3
     cfa:	881b      	ldrh	r3, [r3, #0]
     cfc:	2201      	movs	r2, #1
     cfe:	4013      	ands	r3, r2
     d00:	d004      	beq.n	d0c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     d02:	69bb      	ldr	r3, [r7, #24]
     d04:	68db      	ldr	r3, [r3, #12]
     d06:	69ba      	ldr	r2, [r7, #24]
     d08:	0010      	movs	r0, r2
     d0a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     d0c:	2312      	movs	r3, #18
     d0e:	18fb      	adds	r3, r7, r3
     d10:	881b      	ldrh	r3, [r3, #0]
     d12:	2204      	movs	r2, #4
     d14:	4013      	ands	r3, r2
     d16:	d100      	bne.n	d1a <_usart_interrupt_handler+0x132>
     d18:	e0bd      	b.n	e96 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
     d1a:	69bb      	ldr	r3, [r7, #24]
     d1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
     d1e:	b29b      	uxth	r3, r3
     d20:	2b00      	cmp	r3, #0
     d22:	d100      	bne.n	d26 <_usart_interrupt_handler+0x13e>
     d24:	e0b4      	b.n	e90 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d26:	697b      	ldr	r3, [r7, #20]
     d28:	8b5b      	ldrh	r3, [r3, #26]
     d2a:	b29b      	uxth	r3, r3
     d2c:	b2da      	uxtb	r2, r3
     d2e:	231f      	movs	r3, #31
     d30:	18fb      	adds	r3, r7, r3
     d32:	213f      	movs	r1, #63	; 0x3f
     d34:	400a      	ands	r2, r1
     d36:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     d38:	231f      	movs	r3, #31
     d3a:	18fb      	adds	r3, r7, r3
     d3c:	781b      	ldrb	r3, [r3, #0]
     d3e:	2208      	movs	r2, #8
     d40:	4013      	ands	r3, r2
     d42:	d007      	beq.n	d54 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     d44:	231f      	movs	r3, #31
     d46:	18fb      	adds	r3, r7, r3
     d48:	221f      	movs	r2, #31
     d4a:	18ba      	adds	r2, r7, r2
     d4c:	7812      	ldrb	r2, [r2, #0]
     d4e:	2108      	movs	r1, #8
     d50:	438a      	bics	r2, r1
     d52:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     d54:	231f      	movs	r3, #31
     d56:	18fb      	adds	r3, r7, r3
     d58:	781b      	ldrb	r3, [r3, #0]
     d5a:	2b00      	cmp	r3, #0
     d5c:	d050      	beq.n	e00 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     d5e:	231f      	movs	r3, #31
     d60:	18fb      	adds	r3, r7, r3
     d62:	781b      	ldrb	r3, [r3, #0]
     d64:	2202      	movs	r2, #2
     d66:	4013      	ands	r3, r2
     d68:	d007      	beq.n	d7a <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     d6a:	69bb      	ldr	r3, [r7, #24]
     d6c:	2232      	movs	r2, #50	; 0x32
     d6e:	211a      	movs	r1, #26
     d70:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     d72:	697b      	ldr	r3, [r7, #20]
     d74:	2202      	movs	r2, #2
     d76:	835a      	strh	r2, [r3, #26]
     d78:	e036      	b.n	de8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     d7a:	231f      	movs	r3, #31
     d7c:	18fb      	adds	r3, r7, r3
     d7e:	781b      	ldrb	r3, [r3, #0]
     d80:	2204      	movs	r2, #4
     d82:	4013      	ands	r3, r2
     d84:	d007      	beq.n	d96 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     d86:	69bb      	ldr	r3, [r7, #24]
     d88:	2232      	movs	r2, #50	; 0x32
     d8a:	211e      	movs	r1, #30
     d8c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     d8e:	697b      	ldr	r3, [r7, #20]
     d90:	2204      	movs	r2, #4
     d92:	835a      	strh	r2, [r3, #26]
     d94:	e028      	b.n	de8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     d96:	231f      	movs	r3, #31
     d98:	18fb      	adds	r3, r7, r3
     d9a:	781b      	ldrb	r3, [r3, #0]
     d9c:	2201      	movs	r2, #1
     d9e:	4013      	ands	r3, r2
     da0:	d007      	beq.n	db2 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     da2:	69bb      	ldr	r3, [r7, #24]
     da4:	2232      	movs	r2, #50	; 0x32
     da6:	2113      	movs	r1, #19
     da8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     daa:	697b      	ldr	r3, [r7, #20]
     dac:	2201      	movs	r2, #1
     dae:	835a      	strh	r2, [r3, #26]
     db0:	e01a      	b.n	de8 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     db2:	231f      	movs	r3, #31
     db4:	18fb      	adds	r3, r7, r3
     db6:	781b      	ldrb	r3, [r3, #0]
     db8:	2210      	movs	r2, #16
     dba:	4013      	ands	r3, r2
     dbc:	d007      	beq.n	dce <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     dbe:	69bb      	ldr	r3, [r7, #24]
     dc0:	2232      	movs	r2, #50	; 0x32
     dc2:	2142      	movs	r1, #66	; 0x42
     dc4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     dc6:	697b      	ldr	r3, [r7, #20]
     dc8:	2210      	movs	r2, #16
     dca:	835a      	strh	r2, [r3, #26]
     dcc:	e00c      	b.n	de8 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     dce:	231f      	movs	r3, #31
     dd0:	18fb      	adds	r3, r7, r3
     dd2:	781b      	ldrb	r3, [r3, #0]
     dd4:	2220      	movs	r2, #32
     dd6:	4013      	ands	r3, r2
     dd8:	d006      	beq.n	de8 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     dda:	69bb      	ldr	r3, [r7, #24]
     ddc:	2232      	movs	r2, #50	; 0x32
     dde:	2141      	movs	r1, #65	; 0x41
     de0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     de2:	697b      	ldr	r3, [r7, #20]
     de4:	2220      	movs	r2, #32
     de6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
     de8:	2310      	movs	r3, #16
     dea:	18fb      	adds	r3, r7, r3
     dec:	881b      	ldrh	r3, [r3, #0]
     dee:	2204      	movs	r2, #4
     df0:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     df2:	d050      	beq.n	e96 <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     df4:	69bb      	ldr	r3, [r7, #24]
     df6:	695b      	ldr	r3, [r3, #20]
     df8:	69ba      	ldr	r2, [r7, #24]
     dfa:	0010      	movs	r0, r2
     dfc:	4798      	blx	r3
     dfe:	e04a      	b.n	e96 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     e00:	697b      	ldr	r3, [r7, #20]
     e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     e04:	b29a      	uxth	r2, r3
     e06:	230e      	movs	r3, #14
     e08:	18fb      	adds	r3, r7, r3
     e0a:	05d2      	lsls	r2, r2, #23
     e0c:	0dd2      	lsrs	r2, r2, #23
     e0e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     e10:	69bb      	ldr	r3, [r7, #24]
     e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     e14:	220e      	movs	r2, #14
     e16:	18ba      	adds	r2, r7, r2
     e18:	8812      	ldrh	r2, [r2, #0]
     e1a:	b2d2      	uxtb	r2, r2
     e1c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     e1e:	69bb      	ldr	r3, [r7, #24]
     e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     e22:	1c5a      	adds	r2, r3, #1
     e24:	69bb      	ldr	r3, [r7, #24]
     e26:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e28:	69bb      	ldr	r3, [r7, #24]
     e2a:	795b      	ldrb	r3, [r3, #5]
     e2c:	2b01      	cmp	r3, #1
     e2e:	d10d      	bne.n	e4c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     e30:	69bb      	ldr	r3, [r7, #24]
     e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     e34:	220e      	movs	r2, #14
     e36:	18ba      	adds	r2, r7, r2
     e38:	8812      	ldrh	r2, [r2, #0]
     e3a:	0a12      	lsrs	r2, r2, #8
     e3c:	b292      	uxth	r2, r2
     e3e:	b2d2      	uxtb	r2, r2
     e40:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     e42:	69bb      	ldr	r3, [r7, #24]
     e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     e46:	1c5a      	adds	r2, r3, #1
     e48:	69bb      	ldr	r3, [r7, #24]
     e4a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     e4c:	69bb      	ldr	r3, [r7, #24]
     e4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
     e50:	b29b      	uxth	r3, r3
     e52:	3b01      	subs	r3, #1
     e54:	b29b      	uxth	r3, r3
     e56:	69ba      	ldr	r2, [r7, #24]
     e58:	1c19      	adds	r1, r3, #0
     e5a:	8591      	strh	r1, [r2, #44]	; 0x2c
     e5c:	2b00      	cmp	r3, #0
     e5e:	d11a      	bne.n	e96 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     e60:	697b      	ldr	r3, [r7, #20]
     e62:	2204      	movs	r2, #4
     e64:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
     e66:	69bb      	ldr	r3, [r7, #24]
     e68:	2232      	movs	r2, #50	; 0x32
     e6a:	2100      	movs	r1, #0
     e6c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
     e6e:	2310      	movs	r3, #16
     e70:	18fb      	adds	r3, r7, r3
     e72:	881b      	ldrh	r3, [r3, #0]
     e74:	2202      	movs	r2, #2
     e76:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
     e78:	d00d      	beq.n	e96 <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     e7a:	69bb      	ldr	r3, [r7, #24]
     e7c:	691b      	ldr	r3, [r3, #16]
     e7e:	69ba      	ldr	r2, [r7, #24]
     e80:	0010      	movs	r0, r2
     e82:	4798      	blx	r3
     e84:	e007      	b.n	e96 <_usart_interrupt_handler+0x2ae>
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	200010b8 	.word	0x200010b8
     e8c:	00000bc5 	.word	0x00000bc5
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     e90:	697b      	ldr	r3, [r7, #20]
     e92:	2204      	movs	r2, #4
     e94:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     e96:	2312      	movs	r3, #18
     e98:	18fb      	adds	r3, r7, r3
     e9a:	881b      	ldrh	r3, [r3, #0]
     e9c:	2210      	movs	r2, #16
     e9e:	4013      	ands	r3, r2
     ea0:	d010      	beq.n	ec4 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     ea2:	697b      	ldr	r3, [r7, #20]
     ea4:	2210      	movs	r2, #16
     ea6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     ea8:	697b      	ldr	r3, [r7, #20]
     eaa:	2210      	movs	r2, #16
     eac:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     eae:	2310      	movs	r3, #16
     eb0:	18fb      	adds	r3, r7, r3
     eb2:	881b      	ldrh	r3, [r3, #0]
     eb4:	2210      	movs	r2, #16
     eb6:	4013      	ands	r3, r2
     eb8:	d004      	beq.n	ec4 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     eba:	69bb      	ldr	r3, [r7, #24]
     ebc:	69db      	ldr	r3, [r3, #28]
     ebe:	69ba      	ldr	r2, [r7, #24]
     ec0:	0010      	movs	r0, r2
     ec2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     ec4:	2312      	movs	r3, #18
     ec6:	18fb      	adds	r3, r7, r3
     ec8:	881b      	ldrh	r3, [r3, #0]
     eca:	2220      	movs	r2, #32
     ecc:	4013      	ands	r3, r2
     ece:	d010      	beq.n	ef2 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     ed0:	697b      	ldr	r3, [r7, #20]
     ed2:	2220      	movs	r2, #32
     ed4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     ed6:	697b      	ldr	r3, [r7, #20]
     ed8:	2220      	movs	r2, #32
     eda:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     edc:	2310      	movs	r3, #16
     ede:	18fb      	adds	r3, r7, r3
     ee0:	881b      	ldrh	r3, [r3, #0]
     ee2:	2208      	movs	r2, #8
     ee4:	4013      	ands	r3, r2
     ee6:	d004      	beq.n	ef2 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     ee8:	69bb      	ldr	r3, [r7, #24]
     eea:	699b      	ldr	r3, [r3, #24]
     eec:	69ba      	ldr	r2, [r7, #24]
     eee:	0010      	movs	r0, r2
     ef0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     ef2:	2312      	movs	r3, #18
     ef4:	18fb      	adds	r3, r7, r3
     ef6:	881b      	ldrh	r3, [r3, #0]
     ef8:	2208      	movs	r2, #8
     efa:	4013      	ands	r3, r2
     efc:	d010      	beq.n	f20 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     efe:	697b      	ldr	r3, [r7, #20]
     f00:	2208      	movs	r2, #8
     f02:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     f04:	697b      	ldr	r3, [r7, #20]
     f06:	2208      	movs	r2, #8
     f08:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     f0a:	2310      	movs	r3, #16
     f0c:	18fb      	adds	r3, r7, r3
     f0e:	881b      	ldrh	r3, [r3, #0]
     f10:	2220      	movs	r2, #32
     f12:	4013      	ands	r3, r2
     f14:	d004      	beq.n	f20 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     f16:	69bb      	ldr	r3, [r7, #24]
     f18:	6a1b      	ldr	r3, [r3, #32]
     f1a:	69ba      	ldr	r2, [r7, #24]
     f1c:	0010      	movs	r0, r2
     f1e:	4798      	blx	r3
		}
	}
#endif
}
     f20:	46c0      	nop			; (mov r8, r8)
     f22:	46bd      	mov	sp, r7
     f24:	b008      	add	sp, #32
     f26:	bd80      	pop	{r7, pc}

00000f28 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
     f28:	b580      	push	{r7, lr}
     f2a:	b082      	sub	sp, #8
     f2c:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
     f2e:	4ba4      	ldr	r3, [pc, #656]	; (11c0 <STACK_SIZE+0x1c0>)
     f30:	681b      	ldr	r3, [r3, #0]
     f32:	681b      	ldr	r3, [r3, #0]
     f34:	8c1b      	ldrh	r3, [r3, #32]
     f36:	b29b      	uxth	r3, r3
     f38:	2b00      	cmp	r3, #0
     f3a:	d00a      	beq.n	f52 <_usb_host_interrupt_handler+0x2a>
     f3c:	4ba0      	ldr	r3, [pc, #640]	; (11c0 <STACK_SIZE+0x1c0>)
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	681b      	ldr	r3, [r3, #0]
     f42:	8c1b      	ldrh	r3, [r3, #32]
     f44:	b29b      	uxth	r3, r3
     f46:	001a      	movs	r2, r3
     f48:	4b9e      	ldr	r3, [pc, #632]	; (11c4 <STACK_SIZE+0x1c4>)
     f4a:	0010      	movs	r0, r2
     f4c:	4798      	blx	r3
     f4e:	0003      	movs	r3, r0
     f50:	e000      	b.n	f54 <_usb_host_interrupt_handler+0x2c>
     f52:	2320      	movs	r3, #32
     f54:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
     f56:	687b      	ldr	r3, [r7, #4]
     f58:	2b1f      	cmp	r3, #31
     f5a:	d900      	bls.n	f5e <_usb_host_interrupt_handler+0x36>
     f5c:	e204      	b.n	1368 <STACK_SIZE+0x368>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
     f5e:	4b98      	ldr	r3, [pc, #608]	; (11c0 <STACK_SIZE+0x1c0>)
     f60:	681b      	ldr	r3, [r3, #0]
     f62:	681a      	ldr	r2, [r3, #0]
     f64:	687b      	ldr	r3, [r7, #4]
     f66:	3308      	adds	r3, #8
     f68:	015b      	lsls	r3, r3, #5
     f6a:	18d3      	adds	r3, r2, r3
     f6c:	3307      	adds	r3, #7
     f6e:	781b      	ldrb	r3, [r3, #0]
     f70:	b2db      	uxtb	r3, r3
     f72:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
     f74:	683b      	ldr	r3, [r7, #0]
     f76:	2203      	movs	r2, #3
     f78:	4013      	ands	r3, r2
     f7a:	d100      	bne.n	f7e <_usb_host_interrupt_handler+0x56>
     f7c:	e088      	b.n	1090 <STACK_SIZE+0x90>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     f7e:	2201      	movs	r2, #1
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	409a      	lsls	r2, r3
     f84:	0013      	movs	r3, r2
     f86:	43db      	mvns	r3, r3
     f88:	001a      	movs	r2, r3
     f8a:	4b8f      	ldr	r3, [pc, #572]	; (11c8 <STACK_SIZE+0x1c8>)
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	401a      	ands	r2, r3
     f90:	4b8d      	ldr	r3, [pc, #564]	; (11c8 <STACK_SIZE+0x1c8>)
     f92:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     f94:	4b8a      	ldr	r3, [pc, #552]	; (11c0 <STACK_SIZE+0x1c0>)
     f96:	681b      	ldr	r3, [r3, #0]
     f98:	681a      	ldr	r2, [r3, #0]
     f9a:	687b      	ldr	r3, [r7, #4]
     f9c:	3308      	adds	r3, #8
     f9e:	015b      	lsls	r3, r3, #5
     fa0:	18d3      	adds	r3, r2, r3
     fa2:	3307      	adds	r3, #7
     fa4:	2203      	movs	r2, #3
     fa6:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     fa8:	4b85      	ldr	r3, [pc, #532]	; (11c0 <STACK_SIZE+0x1c0>)
     faa:	681a      	ldr	r2, [r3, #0]
     fac:	21ae      	movs	r1, #174	; 0xae
     fae:	687b      	ldr	r3, [r7, #4]
     fb0:	18d3      	adds	r3, r2, r3
     fb2:	185b      	adds	r3, r3, r1
     fb4:	781b      	ldrb	r3, [r3, #0]
     fb6:	001a      	movs	r2, r3
     fb8:	2301      	movs	r3, #1
     fba:	4013      	ands	r3, r2
     fbc:	d068      	beq.n	1090 <STACK_SIZE+0x90>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	b2da      	uxtb	r2, r3
     fc2:	4b82      	ldr	r3, [pc, #520]	; (11cc <STACK_SIZE+0x1cc>)
     fc4:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
     fc6:	4b7e      	ldr	r3, [pc, #504]	; (11c0 <STACK_SIZE+0x1c0>)
     fc8:	681b      	ldr	r3, [r3, #0]
     fca:	681b      	ldr	r3, [r3, #0]
     fcc:	687a      	ldr	r2, [r7, #4]
     fce:	3208      	adds	r2, #8
     fd0:	0152      	lsls	r2, r2, #5
     fd2:	5cd3      	ldrb	r3, [r2, r3]
     fd4:	079b      	lsls	r3, r3, #30
     fd6:	0f9b      	lsrs	r3, r3, #30
     fd8:	b2db      	uxtb	r3, r3
     fda:	2b01      	cmp	r3, #1
     fdc:	d11e      	bne.n	101c <STACK_SIZE+0x1c>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     fde:	4a7c      	ldr	r2, [pc, #496]	; (11d0 <STACK_SIZE+0x1d0>)
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	015b      	lsls	r3, r3, #5
     fe4:	18d3      	adds	r3, r2, r3
     fe6:	685b      	ldr	r3, [r3, #4]
     fe8:	049b      	lsls	r3, r3, #18
     fea:	0c9b      	lsrs	r3, r3, #18
     fec:	b29b      	uxth	r3, r3
     fee:	001a      	movs	r2, r3
     ff0:	4b76      	ldr	r3, [pc, #472]	; (11cc <STACK_SIZE+0x1cc>)
     ff2:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     ff4:	4a76      	ldr	r2, [pc, #472]	; (11d0 <STACK_SIZE+0x1d0>)
     ff6:	687b      	ldr	r3, [r7, #4]
     ff8:	015b      	lsls	r3, r3, #5
     ffa:	18d3      	adds	r3, r2, r3
     ffc:	685b      	ldr	r3, [r3, #4]
     ffe:	011b      	lsls	r3, r3, #4
    1000:	0c9b      	lsrs	r3, r3, #18
    1002:	b29b      	uxth	r3, r3
    1004:	001a      	movs	r2, r3
    1006:	4b71      	ldr	r3, [pc, #452]	; (11cc <STACK_SIZE+0x1cc>)
    1008:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    100a:	4a71      	ldr	r2, [pc, #452]	; (11d0 <STACK_SIZE+0x1d0>)
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	015b      	lsls	r3, r3, #5
    1010:	18d3      	adds	r3, r2, r3
    1012:	685a      	ldr	r2, [r3, #4]
    1014:	0b92      	lsrs	r2, r2, #14
    1016:	0392      	lsls	r2, r2, #14
    1018:	605a      	str	r2, [r3, #4]
    101a:	e02c      	b.n	1076 <STACK_SIZE+0x76>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    101c:	4a6c      	ldr	r2, [pc, #432]	; (11d0 <STACK_SIZE+0x1d0>)
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	015b      	lsls	r3, r3, #5
    1022:	18d3      	adds	r3, r2, r3
    1024:	685b      	ldr	r3, [r3, #4]
    1026:	011b      	lsls	r3, r3, #4
    1028:	0c9b      	lsrs	r3, r3, #18
    102a:	b29b      	uxth	r3, r3
    102c:	001a      	movs	r2, r3
    102e:	4b67      	ldr	r3, [pc, #412]	; (11cc <STACK_SIZE+0x1cc>)
    1030:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    1032:	4a67      	ldr	r2, [pc, #412]	; (11d0 <STACK_SIZE+0x1d0>)
    1034:	687b      	ldr	r3, [r7, #4]
    1036:	015b      	lsls	r3, r3, #5
    1038:	18d3      	adds	r3, r2, r3
    103a:	685b      	ldr	r3, [r3, #4]
    103c:	049b      	lsls	r3, r3, #18
    103e:	0c9b      	lsrs	r3, r3, #18
    1040:	b29b      	uxth	r3, r3
    1042:	001a      	movs	r2, r3
    1044:	4b61      	ldr	r3, [pc, #388]	; (11cc <STACK_SIZE+0x1cc>)
    1046:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    1048:	4a61      	ldr	r2, [pc, #388]	; (11d0 <STACK_SIZE+0x1d0>)
    104a:	687b      	ldr	r3, [r7, #4]
    104c:	015b      	lsls	r3, r3, #5
    104e:	18d3      	adds	r3, r2, r3
    1050:	685a      	ldr	r2, [r3, #4]
    1052:	4960      	ldr	r1, [pc, #384]	; (11d4 <STACK_SIZE+0x1d4>)
    1054:	400a      	ands	r2, r1
    1056:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    1058:	4b5c      	ldr	r3, [pc, #368]	; (11cc <STACK_SIZE+0x1cc>)
    105a:	885b      	ldrh	r3, [r3, #2]
    105c:	2b00      	cmp	r3, #0
    105e:	d10a      	bne.n	1076 <STACK_SIZE+0x76>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    1060:	4a5b      	ldr	r2, [pc, #364]	; (11d0 <STACK_SIZE+0x1d0>)
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	015b      	lsls	r3, r3, #5
    1066:	18d3      	adds	r3, r2, r3
    1068:	685b      	ldr	r3, [r3, #4]
    106a:	049b      	lsls	r3, r3, #18
    106c:	0c9b      	lsrs	r3, r3, #18
    106e:	b29b      	uxth	r3, r3
    1070:	001a      	movs	r2, r3
    1072:	4b56      	ldr	r3, [pc, #344]	; (11cc <STACK_SIZE+0x1cc>)
    1074:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    1076:	4b52      	ldr	r3, [pc, #328]	; (11c0 <STACK_SIZE+0x1c0>)
    1078:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    107a:	687b      	ldr	r3, [r7, #4]
    107c:	3302      	adds	r3, #2
    107e:	011b      	lsls	r3, r3, #4
    1080:	18d3      	adds	r3, r2, r3
    1082:	3304      	adds	r3, #4
    1084:	681a      	ldr	r2, [r3, #0]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    1086:	4b4e      	ldr	r3, [pc, #312]	; (11c0 <STACK_SIZE+0x1c0>)
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	4950      	ldr	r1, [pc, #320]	; (11cc <STACK_SIZE+0x1cc>)
    108c:	0018      	movs	r0, r3
    108e:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    1090:	683b      	ldr	r3, [r7, #0]
    1092:	2204      	movs	r2, #4
    1094:	4013      	ands	r3, r2
    1096:	d100      	bne.n	109a <STACK_SIZE+0x9a>
    1098:	e0af      	b.n	11fa <STACK_SIZE+0x1fa>
			/* For ISO IN, check CRC error */
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    109a:	4b49      	ldr	r3, [pc, #292]	; (11c0 <STACK_SIZE+0x1c0>)
    109c:	681b      	ldr	r3, [r3, #0]
    109e:	681b      	ldr	r3, [r3, #0]
    10a0:	687a      	ldr	r2, [r7, #4]
    10a2:	3208      	adds	r2, #8
    10a4:	0152      	lsls	r2, r2, #5
    10a6:	5cd3      	ldrb	r3, [r2, r3]
    10a8:	069b      	lsls	r3, r3, #26
    10aa:	0f5b      	lsrs	r3, r3, #29
    10ac:	b2db      	uxtb	r3, r3
    10ae:	2b02      	cmp	r3, #2
    10b0:	d151      	bne.n	1156 <STACK_SIZE+0x156>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    10b2:	4b43      	ldr	r3, [pc, #268]	; (11c0 <STACK_SIZE+0x1c0>)
    10b4:	681b      	ldr	r3, [r3, #0]
    10b6:	681b      	ldr	r3, [r3, #0]
    10b8:	687a      	ldr	r2, [r7, #4]
    10ba:	3208      	adds	r2, #8
    10bc:	0152      	lsls	r2, r2, #5
    10be:	5cd3      	ldrb	r3, [r2, r3]
    10c0:	079b      	lsls	r3, r3, #30
    10c2:	0f9b      	lsrs	r3, r3, #30
    10c4:	b2db      	uxtb	r3, r3
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
			/* For ISO IN, check CRC error */
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    10c6:	2b01      	cmp	r3, #1
    10c8:	d145      	bne.n	1156 <STACK_SIZE+0x156>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    10ca:	4a41      	ldr	r2, [pc, #260]	; (11d0 <STACK_SIZE+0x1d0>)
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	015b      	lsls	r3, r3, #5
    10d0:	18d3      	adds	r3, r2, r3
    10d2:	3308      	adds	r3, #8
    10d4:	789b      	ldrb	r3, [r3, #2]
    10d6:	07db      	lsls	r3, r3, #31
    10d8:	0fdb      	lsrs	r3, r3, #31
    10da:	b2db      	uxtb	r3, r3

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
			/* For ISO IN, check CRC error */
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    10dc:	2b00      	cmp	r3, #0
    10de:	d03a      	beq.n	1156 <STACK_SIZE+0x156>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
				/* Clear busy status */
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    10e0:	2201      	movs	r2, #1
    10e2:	687b      	ldr	r3, [r7, #4]
    10e4:	409a      	lsls	r2, r3
    10e6:	0013      	movs	r3, r2
    10e8:	43db      	mvns	r3, r3
    10ea:	001a      	movs	r2, r3
    10ec:	4b36      	ldr	r3, [pc, #216]	; (11c8 <STACK_SIZE+0x1c8>)
    10ee:	681b      	ldr	r3, [r3, #0]
    10f0:	401a      	ands	r2, r3
    10f2:	4b35      	ldr	r3, [pc, #212]	; (11c8 <STACK_SIZE+0x1c8>)
    10f4:	601a      	str	r2, [r3, #0]
				/* clear the flag */
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    10f6:	4a36      	ldr	r2, [pc, #216]	; (11d0 <STACK_SIZE+0x1d0>)
    10f8:	687b      	ldr	r3, [r7, #4]
    10fa:	015b      	lsls	r3, r3, #5
    10fc:	18d3      	adds	r3, r2, r3
    10fe:	330a      	adds	r3, #10
    1100:	2200      	movs	r2, #0
    1102:	701a      	strb	r2, [r3, #0]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1104:	4b2e      	ldr	r3, [pc, #184]	; (11c0 <STACK_SIZE+0x1c0>)
    1106:	681b      	ldr	r3, [r3, #0]
    1108:	681a      	ldr	r2, [r3, #0]
    110a:	687b      	ldr	r3, [r7, #4]
    110c:	3308      	adds	r3, #8
    110e:	015b      	lsls	r3, r3, #5
    1110:	18d3      	adds	r3, r2, r3
    1112:	3307      	adds	r3, #7
    1114:	2204      	movs	r2, #4
    1116:	701a      	strb	r2, [r3, #0]
						USB_HOST_PINTFLAG_TRFAIL;
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1118:	4b29      	ldr	r3, [pc, #164]	; (11c0 <STACK_SIZE+0x1c0>)
    111a:	681a      	ldr	r2, [r3, #0]
    111c:	21ae      	movs	r1, #174	; 0xae
    111e:	687b      	ldr	r3, [r7, #4]
    1120:	18d3      	adds	r3, r2, r3
    1122:	185b      	adds	r3, r3, r1
    1124:	781b      	ldrb	r3, [r3, #0]
    1126:	001a      	movs	r2, r3
    1128:	2302      	movs	r3, #2
    112a:	4013      	ands	r3, r2
    112c:	d065      	beq.n	11fa <STACK_SIZE+0x1fa>
						(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
					pipe_callback_para.pipe_num = pipe_int;
    112e:	687b      	ldr	r3, [r7, #4]
    1130:	b2da      	uxtb	r2, r3
    1132:	4b26      	ldr	r3, [pc, #152]	; (11cc <STACK_SIZE+0x1cc>)
    1134:	701a      	strb	r2, [r3, #0]
					#define USB_STATUS_PIPE_CRC16ER   (1 << 4)
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    1136:	4b25      	ldr	r3, [pc, #148]	; (11cc <STACK_SIZE+0x1cc>)
    1138:	2210      	movs	r2, #16
    113a:	705a      	strb	r2, [r3, #1]
					(_usb_instances->host_pipe_callback[pipe_int]
    113c:	4b20      	ldr	r3, [pc, #128]	; (11c0 <STACK_SIZE+0x1c0>)
    113e:	681a      	ldr	r2, [r3, #0]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    1140:	687b      	ldr	r3, [r7, #4]
    1142:	011b      	lsls	r3, r3, #4
    1144:	18d3      	adds	r3, r2, r3
    1146:	3328      	adds	r3, #40	; 0x28
    1148:	681a      	ldr	r2, [r3, #0]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
						(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
					pipe_callback_para.pipe_num = pipe_int;
					#define USB_STATUS_PIPE_CRC16ER   (1 << 4)
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
					(_usb_instances->host_pipe_callback[pipe_int]
    114a:	4b1d      	ldr	r3, [pc, #116]	; (11c0 <STACK_SIZE+0x1c0>)
    114c:	681b      	ldr	r3, [r3, #0]
    114e:	491f      	ldr	r1, [pc, #124]	; (11cc <STACK_SIZE+0x1cc>)
    1150:	0018      	movs	r0, r3
    1152:	4790      	blx	r2
				host_pipe_job_busy_status &= ~(1 << pipe_int);
				/* clear the flag */
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
						USB_HOST_PINTFLAG_TRFAIL;
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1154:	e051      	b.n	11fa <STACK_SIZE+0x1fa>
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
				}
			}
#if UHD_BULK_INTERVAL_MIN
			/* For Bulk IN, check flow error */
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    1156:	4b1a      	ldr	r3, [pc, #104]	; (11c0 <STACK_SIZE+0x1c0>)
    1158:	681b      	ldr	r3, [r3, #0]
    115a:	681b      	ldr	r3, [r3, #0]
    115c:	687a      	ldr	r2, [r7, #4]
    115e:	3208      	adds	r2, #8
    1160:	0152      	lsls	r2, r2, #5
    1162:	5cd3      	ldrb	r3, [r2, r3]
    1164:	069b      	lsls	r3, r3, #26
    1166:	0f5b      	lsrs	r3, r3, #29
    1168:	b2db      	uxtb	r3, r3
    116a:	2b03      	cmp	r3, #3
    116c:	d134      	bne.n	11d8 <STACK_SIZE+0x1d8>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    116e:	4b14      	ldr	r3, [pc, #80]	; (11c0 <STACK_SIZE+0x1c0>)
    1170:	681b      	ldr	r3, [r3, #0]
    1172:	681b      	ldr	r3, [r3, #0]
    1174:	687a      	ldr	r2, [r7, #4]
    1176:	3208      	adds	r2, #8
    1178:	0152      	lsls	r2, r2, #5
    117a:	5cd3      	ldrb	r3, [r2, r3]
    117c:	079b      	lsls	r3, r3, #30
    117e:	0f9b      	lsrs	r3, r3, #30
    1180:	b2db      	uxtb	r3, r3
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
				}
			}
#if UHD_BULK_INTERVAL_MIN
			/* For Bulk IN, check flow error */
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    1182:	2b01      	cmp	r3, #1
    1184:	d128      	bne.n	11d8 <STACK_SIZE+0x1d8>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
				/* clear the flag */
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    1186:	4a12      	ldr	r2, [pc, #72]	; (11d0 <STACK_SIZE+0x1d0>)
    1188:	687b      	ldr	r3, [r7, #4]
    118a:	015b      	lsls	r3, r3, #5
    118c:	18d3      	adds	r3, r2, r3
    118e:	330a      	adds	r3, #10
    1190:	2200      	movs	r2, #0
    1192:	701a      	strb	r2, [r3, #0]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1194:	4b0a      	ldr	r3, [pc, #40]	; (11c0 <STACK_SIZE+0x1c0>)
    1196:	681b      	ldr	r3, [r3, #0]
    1198:	681a      	ldr	r2, [r3, #0]
    119a:	687b      	ldr	r3, [r7, #4]
    119c:	3308      	adds	r3, #8
    119e:	015b      	lsls	r3, r3, #5
    11a0:	18d3      	adds	r3, r2, r3
    11a2:	3307      	adds	r3, #7
    11a4:	2204      	movs	r2, #4
    11a6:	701a      	strb	r2, [r3, #0]
						USB_HOST_PINTFLAG_TRFAIL;
				/* Freeze until next SOF */
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    11a8:	4b05      	ldr	r3, [pc, #20]	; (11c0 <STACK_SIZE+0x1c0>)
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	681a      	ldr	r2, [r3, #0]
    11ae:	687b      	ldr	r3, [r7, #4]
    11b0:	3308      	adds	r3, #8
    11b2:	015b      	lsls	r3, r3, #5
    11b4:	18d3      	adds	r3, r2, r3
    11b6:	3305      	adds	r3, #5
    11b8:	2210      	movs	r2, #16
    11ba:	701a      	strb	r2, [r3, #0]
    11bc:	e01d      	b.n	11fa <STACK_SIZE+0x1fa>
    11be:	46c0      	nop			; (mov r8, r8)
    11c0:	20000094 	.word	0x20000094
    11c4:	0000b6a9 	.word	0x0000b6a9
    11c8:	200000ac 	.word	0x200000ac
    11cc:	20000098 	.word	0x20000098
    11d0:	20000e2c 	.word	0x20000e2c
    11d4:	f0003fff 	.word	0xf0003fff
			}
#endif
			/* Clear flag anyway */
			else {
				/* clear the flag */
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    11d8:	4a83      	ldr	r2, [pc, #524]	; (13e8 <STACK_SIZE+0x3e8>)
    11da:	687b      	ldr	r3, [r7, #4]
    11dc:	015b      	lsls	r3, r3, #5
    11de:	18d3      	adds	r3, r2, r3
    11e0:	330a      	adds	r3, #10
    11e2:	2200      	movs	r2, #0
    11e4:	701a      	strb	r2, [r3, #0]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    11e6:	4b81      	ldr	r3, [pc, #516]	; (13ec <STACK_SIZE+0x3ec>)
    11e8:	681b      	ldr	r3, [r3, #0]
    11ea:	681a      	ldr	r2, [r3, #0]
    11ec:	687b      	ldr	r3, [r7, #4]
    11ee:	3308      	adds	r3, #8
    11f0:	015b      	lsls	r3, r3, #5
    11f2:	18d3      	adds	r3, r2, r3
    11f4:	3307      	adds	r3, #7
    11f6:	2204      	movs	r2, #4
    11f8:	701a      	strb	r2, [r3, #0]
						USB_HOST_PINTFLAG_TRFAIL;
			}
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    11fa:	683b      	ldr	r3, [r7, #0]
    11fc:	2208      	movs	r2, #8
    11fe:	4013      	ands	r3, r2
    1200:	d03c      	beq.n	127c <STACK_SIZE+0x27c>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1202:	2201      	movs	r2, #1
    1204:	687b      	ldr	r3, [r7, #4]
    1206:	409a      	lsls	r2, r3
    1208:	0013      	movs	r3, r2
    120a:	43db      	mvns	r3, r3
    120c:	001a      	movs	r2, r3
    120e:	4b78      	ldr	r3, [pc, #480]	; (13f0 <STACK_SIZE+0x3f0>)
    1210:	681b      	ldr	r3, [r3, #0]
    1212:	401a      	ands	r2, r3
    1214:	4b76      	ldr	r3, [pc, #472]	; (13f0 <STACK_SIZE+0x3f0>)
    1216:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1218:	4b74      	ldr	r3, [pc, #464]	; (13ec <STACK_SIZE+0x3ec>)
    121a:	681b      	ldr	r3, [r3, #0]
    121c:	681a      	ldr	r2, [r3, #0]
    121e:	687b      	ldr	r3, [r7, #4]
    1220:	3308      	adds	r3, #8
    1222:	015b      	lsls	r3, r3, #5
    1224:	18d3      	adds	r3, r2, r3
    1226:	3307      	adds	r3, #7
    1228:	2208      	movs	r2, #8
    122a:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    122c:	4b6f      	ldr	r3, [pc, #444]	; (13ec <STACK_SIZE+0x3ec>)
    122e:	681a      	ldr	r2, [r3, #0]
    1230:	21ae      	movs	r1, #174	; 0xae
    1232:	687b      	ldr	r3, [r7, #4]
    1234:	18d3      	adds	r3, r2, r3
    1236:	185b      	adds	r3, r3, r1
    1238:	781b      	ldrb	r3, [r3, #0]
    123a:	001a      	movs	r2, r3
    123c:	2302      	movs	r3, #2
    123e:	4013      	ands	r3, r2
    1240:	d01c      	beq.n	127c <STACK_SIZE+0x27c>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    1242:	687b      	ldr	r3, [r7, #4]
    1244:	b2da      	uxtb	r2, r3
    1246:	4b6b      	ldr	r3, [pc, #428]	; (13f4 <STACK_SIZE+0x3f4>)
    1248:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    124a:	4a67      	ldr	r2, [pc, #412]	; (13e8 <STACK_SIZE+0x3e8>)
    124c:	687b      	ldr	r3, [r7, #4]
    124e:	015b      	lsls	r3, r3, #5
    1250:	18d3      	adds	r3, r2, r3
    1252:	330e      	adds	r3, #14
    1254:	881b      	ldrh	r3, [r3, #0]
    1256:	b29b      	uxth	r3, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    1258:	b2db      	uxtb	r3, r3
    125a:	221f      	movs	r2, #31
    125c:	4013      	ands	r3, r2
    125e:	b2da      	uxtb	r2, r3
    1260:	4b64      	ldr	r3, [pc, #400]	; (13f4 <STACK_SIZE+0x3f4>)
    1262:	705a      	strb	r2, [r3, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    1264:	4b61      	ldr	r3, [pc, #388]	; (13ec <STACK_SIZE+0x3ec>)
    1266:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    1268:	687b      	ldr	r3, [r7, #4]
    126a:	011b      	lsls	r3, r3, #4
    126c:	18d3      	adds	r3, r2, r3
    126e:	3328      	adds	r3, #40	; 0x28
    1270:	681a      	ldr	r2, [r3, #0]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    1272:	4b5e      	ldr	r3, [pc, #376]	; (13ec <STACK_SIZE+0x3ec>)
    1274:	681b      	ldr	r3, [r3, #0]
    1276:	495f      	ldr	r1, [pc, #380]	; (13f4 <STACK_SIZE+0x3f4>)
    1278:	0018      	movs	r0, r3
    127a:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    127c:	683b      	ldr	r3, [r7, #0]
    127e:	2210      	movs	r2, #16
    1280:	4013      	ands	r3, r2
    1282:	d03a      	beq.n	12fa <STACK_SIZE+0x2fa>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1284:	2201      	movs	r2, #1
    1286:	687b      	ldr	r3, [r7, #4]
    1288:	409a      	lsls	r2, r3
    128a:	0013      	movs	r3, r2
    128c:	43db      	mvns	r3, r3
    128e:	001a      	movs	r2, r3
    1290:	4b57      	ldr	r3, [pc, #348]	; (13f0 <STACK_SIZE+0x3f0>)
    1292:	681b      	ldr	r3, [r3, #0]
    1294:	401a      	ands	r2, r3
    1296:	4b56      	ldr	r3, [pc, #344]	; (13f0 <STACK_SIZE+0x3f0>)
    1298:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    129a:	4b54      	ldr	r3, [pc, #336]	; (13ec <STACK_SIZE+0x3ec>)
    129c:	681b      	ldr	r3, [r3, #0]
    129e:	681a      	ldr	r2, [r3, #0]
    12a0:	687b      	ldr	r3, [r7, #4]
    12a2:	3308      	adds	r3, #8
    12a4:	015b      	lsls	r3, r3, #5
    12a6:	18d3      	adds	r3, r2, r3
    12a8:	3307      	adds	r3, #7
    12aa:	2210      	movs	r2, #16
    12ac:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    12ae:	4b4f      	ldr	r3, [pc, #316]	; (13ec <STACK_SIZE+0x3ec>)
    12b0:	681a      	ldr	r2, [r3, #0]
    12b2:	21ae      	movs	r1, #174	; 0xae
    12b4:	687b      	ldr	r3, [r7, #4]
    12b6:	18d3      	adds	r3, r2, r3
    12b8:	185b      	adds	r3, r3, r1
    12ba:	781b      	ldrb	r3, [r3, #0]
    12bc:	001a      	movs	r2, r3
    12be:	2304      	movs	r3, #4
    12c0:	4013      	ands	r3, r2
    12c2:	d01a      	beq.n	12fa <STACK_SIZE+0x2fa>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    12c4:	687b      	ldr	r3, [r7, #4]
    12c6:	b2da      	uxtb	r2, r3
    12c8:	4b4a      	ldr	r3, [pc, #296]	; (13f4 <STACK_SIZE+0x3f4>)
    12ca:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    12cc:	4a46      	ldr	r2, [pc, #280]	; (13e8 <STACK_SIZE+0x3e8>)
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	015b      	lsls	r3, r3, #5
    12d2:	18d3      	adds	r3, r2, r3
    12d4:	685b      	ldr	r3, [r3, #4]
    12d6:	011b      	lsls	r3, r3, #4
    12d8:	0c9b      	lsrs	r3, r3, #18
    12da:	b29b      	uxth	r3, r3
    12dc:	001a      	movs	r2, r3
    12de:	4b45      	ldr	r3, [pc, #276]	; (13f4 <STACK_SIZE+0x3f4>)
    12e0:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    12e2:	4b42      	ldr	r3, [pc, #264]	; (13ec <STACK_SIZE+0x3ec>)
    12e4:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    12e6:	687b      	ldr	r3, [r7, #4]
    12e8:	011b      	lsls	r3, r3, #4
    12ea:	18d3      	adds	r3, r2, r3
    12ec:	332c      	adds	r3, #44	; 0x2c
    12ee:	681a      	ldr	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    12f0:	4b3e      	ldr	r3, [pc, #248]	; (13ec <STACK_SIZE+0x3ec>)
    12f2:	681b      	ldr	r3, [r3, #0]
    12f4:	2100      	movs	r1, #0
    12f6:	0018      	movs	r0, r3
    12f8:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    12fa:	683b      	ldr	r3, [r7, #0]
    12fc:	2220      	movs	r2, #32
    12fe:	4013      	ands	r3, r2
    1300:	d100      	bne.n	1304 <STACK_SIZE+0x304>
    1302:	e146      	b.n	1592 <STACK_SIZE+0x592>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1304:	2201      	movs	r2, #1
    1306:	687b      	ldr	r3, [r7, #4]
    1308:	409a      	lsls	r2, r3
    130a:	0013      	movs	r3, r2
    130c:	43db      	mvns	r3, r3
    130e:	001a      	movs	r2, r3
    1310:	4b37      	ldr	r3, [pc, #220]	; (13f0 <STACK_SIZE+0x3f0>)
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	401a      	ands	r2, r3
    1316:	4b36      	ldr	r3, [pc, #216]	; (13f0 <STACK_SIZE+0x3f0>)
    1318:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    131a:	4b34      	ldr	r3, [pc, #208]	; (13ec <STACK_SIZE+0x3ec>)
    131c:	681b      	ldr	r3, [r3, #0]
    131e:	681a      	ldr	r2, [r3, #0]
    1320:	687b      	ldr	r3, [r7, #4]
    1322:	3308      	adds	r3, #8
    1324:	015b      	lsls	r3, r3, #5
    1326:	18d3      	adds	r3, r2, r3
    1328:	3307      	adds	r3, #7
    132a:	2220      	movs	r2, #32
    132c:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    132e:	4b2f      	ldr	r3, [pc, #188]	; (13ec <STACK_SIZE+0x3ec>)
    1330:	681a      	ldr	r2, [r3, #0]
    1332:	21ae      	movs	r1, #174	; 0xae
    1334:	687b      	ldr	r3, [r7, #4]
    1336:	18d3      	adds	r3, r2, r3
    1338:	185b      	adds	r3, r3, r1
    133a:	781b      	ldrb	r3, [r3, #0]
    133c:	001a      	movs	r2, r3
    133e:	2308      	movs	r3, #8
    1340:	4013      	ands	r3, r2
    1342:	d100      	bne.n	1346 <STACK_SIZE+0x346>
    1344:	e125      	b.n	1592 <STACK_SIZE+0x592>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    1346:	687b      	ldr	r3, [r7, #4]
    1348:	b2da      	uxtb	r2, r3
    134a:	4b2a      	ldr	r3, [pc, #168]	; (13f4 <STACK_SIZE+0x3f4>)
    134c:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    134e:	4b27      	ldr	r3, [pc, #156]	; (13ec <STACK_SIZE+0x3ec>)
    1350:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    1352:	687b      	ldr	r3, [r7, #4]
    1354:	011b      	lsls	r3, r3, #4
    1356:	18d3      	adds	r3, r2, r3
    1358:	3330      	adds	r3, #48	; 0x30
    135a:	681a      	ldr	r2, [r3, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    135c:	4b23      	ldr	r3, [pc, #140]	; (13ec <STACK_SIZE+0x3ec>)
    135e:	681b      	ldr	r3, [r3, #0]
    1360:	4924      	ldr	r1, [pc, #144]	; (13f4 <STACK_SIZE+0x3f4>)
    1362:	0018      	movs	r0, r3
    1364:	4790      	blx	r2
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
			}
		}

	}
}
    1366:	e114      	b.n	1592 <STACK_SIZE+0x592>

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    1368:	4b20      	ldr	r3, [pc, #128]	; (13ec <STACK_SIZE+0x3ec>)
    136a:	681b      	ldr	r3, [r3, #0]
    136c:	681b      	ldr	r3, [r3, #0]
    136e:	8b9b      	ldrh	r3, [r3, #28]
    1370:	b29b      	uxth	r3, r3
    1372:	603b      	str	r3, [r7, #0]

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    1374:	683b      	ldr	r3, [r7, #0]
    1376:	2204      	movs	r2, #4
    1378:	4013      	ands	r3, r2
    137a:	d053      	beq.n	1424 <STACK_SIZE+0x424>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    137c:	4b1b      	ldr	r3, [pc, #108]	; (13ec <STACK_SIZE+0x3ec>)
    137e:	681b      	ldr	r3, [r3, #0]
    1380:	681b      	ldr	r3, [r3, #0]
    1382:	2204      	movs	r2, #4
    1384:	839a      	strh	r2, [r3, #28]
#if UHD_BULK_INTERVAL_MIN
			/* Start Bulk IN */
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    1386:	2301      	movs	r3, #1
    1388:	607b      	str	r3, [r7, #4]
    138a:	e039      	b.n	1400 <STACK_SIZE+0x400>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    138c:	2201      	movs	r2, #1
    138e:	687b      	ldr	r3, [r7, #4]
    1390:	409a      	lsls	r2, r3
    1392:	0013      	movs	r3, r2
    1394:	001a      	movs	r2, r3
    1396:	4b16      	ldr	r3, [pc, #88]	; (13f0 <STACK_SIZE+0x3f0>)
    1398:	681b      	ldr	r3, [r3, #0]
    139a:	4013      	ands	r3, r2
    139c:	d022      	beq.n	13e4 <STACK_SIZE+0x3e4>
					continue;
				}
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    139e:	4b13      	ldr	r3, [pc, #76]	; (13ec <STACK_SIZE+0x3ec>)
    13a0:	681b      	ldr	r3, [r3, #0]
    13a2:	681b      	ldr	r3, [r3, #0]
    13a4:	687a      	ldr	r2, [r7, #4]
    13a6:	3208      	adds	r2, #8
    13a8:	0152      	lsls	r2, r2, #5
    13aa:	5cd3      	ldrb	r3, [r2, r3]
    13ac:	069b      	lsls	r3, r3, #26
    13ae:	0f5b      	lsrs	r3, r3, #29
    13b0:	b2db      	uxtb	r3, r3
    13b2:	2b03      	cmp	r3, #3
    13b4:	d120      	bne.n	13f8 <STACK_SIZE+0x3f8>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    13b6:	4b0d      	ldr	r3, [pc, #52]	; (13ec <STACK_SIZE+0x3ec>)
    13b8:	681b      	ldr	r3, [r3, #0]
    13ba:	681b      	ldr	r3, [r3, #0]
    13bc:	687a      	ldr	r2, [r7, #4]
    13be:	3208      	adds	r2, #8
    13c0:	0152      	lsls	r2, r2, #5
    13c2:	5cd3      	ldrb	r3, [r2, r3]
    13c4:	079b      	lsls	r3, r3, #30
    13c6:	0f9b      	lsrs	r3, r3, #30
    13c8:	b2db      	uxtb	r3, r3
			/* Start Bulk IN */
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
					continue;
				}
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    13ca:	2b01      	cmp	r3, #1
    13cc:	d114      	bne.n	13f8 <STACK_SIZE+0x3f8>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
					continue;
				}
				/* Continue */
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    13ce:	4b07      	ldr	r3, [pc, #28]	; (13ec <STACK_SIZE+0x3ec>)
    13d0:	681b      	ldr	r3, [r3, #0]
    13d2:	681a      	ldr	r2, [r3, #0]
    13d4:	687b      	ldr	r3, [r7, #4]
    13d6:	3308      	adds	r3, #8
    13d8:	015b      	lsls	r3, r3, #5
    13da:	18d3      	adds	r3, r2, r3
    13dc:	3304      	adds	r3, #4
    13de:	2210      	movs	r2, #16
    13e0:	701a      	strb	r2, [r3, #0]
    13e2:	e00a      	b.n	13fa <STACK_SIZE+0x3fa>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
#if UHD_BULK_INTERVAL_MIN
			/* Start Bulk IN */
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
					continue;
    13e4:	46c0      	nop			; (mov r8, r8)
    13e6:	e008      	b.n	13fa <STACK_SIZE+0x3fa>
    13e8:	20000e2c 	.word	0x20000e2c
    13ec:	20000094 	.word	0x20000094
    13f0:	200000ac 	.word	0x200000ac
    13f4:	20000098 	.word	0x20000098
				}
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
					continue;
    13f8:	46c0      	nop			; (mov r8, r8)
		if (flags & USB_HOST_INTFLAG_HSOF) {
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
#if UHD_BULK_INTERVAL_MIN
			/* Start Bulk IN */
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    13fa:	687b      	ldr	r3, [r7, #4]
    13fc:	3301      	adds	r3, #1
    13fe:	607b      	str	r3, [r7, #4]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	2b07      	cmp	r3, #7
    1404:	d9c2      	bls.n	138c <STACK_SIZE+0x38c>
				}
				/* Continue */
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
			}
#endif
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    1406:	4b65      	ldr	r3, [pc, #404]	; (159c <STACK_SIZE+0x59c>)
    1408:	681b      	ldr	r3, [r3, #0]
    140a:	22a5      	movs	r2, #165	; 0xa5
    140c:	5c9b      	ldrb	r3, [r3, r2]
    140e:	001a      	movs	r2, r3
    1410:	2301      	movs	r3, #1
    1412:	4013      	ands	r3, r2
    1414:	d006      	beq.n	1424 <STACK_SIZE+0x424>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    1416:	4b61      	ldr	r3, [pc, #388]	; (159c <STACK_SIZE+0x59c>)
    1418:	681b      	ldr	r3, [r3, #0]
    141a:	685a      	ldr	r2, [r3, #4]
    141c:	4b5f      	ldr	r3, [pc, #380]	; (159c <STACK_SIZE+0x59c>)
    141e:	681b      	ldr	r3, [r3, #0]
    1420:	0018      	movs	r0, r3
    1422:	4790      	blx	r2
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    1424:	683b      	ldr	r3, [r7, #0]
    1426:	2208      	movs	r2, #8
    1428:	4013      	ands	r3, r2
    142a:	d016      	beq.n	145a <STACK_SIZE+0x45a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    142c:	4b5c      	ldr	r3, [pc, #368]	; (15a0 <STACK_SIZE+0x5a0>)
    142e:	2200      	movs	r2, #0
    1430:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    1432:	4b5a      	ldr	r3, [pc, #360]	; (159c <STACK_SIZE+0x59c>)
    1434:	681b      	ldr	r3, [r3, #0]
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	2208      	movs	r2, #8
    143a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    143c:	4b57      	ldr	r3, [pc, #348]	; (159c <STACK_SIZE+0x59c>)
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	22a5      	movs	r2, #165	; 0xa5
    1442:	5c9b      	ldrb	r3, [r3, r2]
    1444:	001a      	movs	r2, r3
    1446:	2302      	movs	r3, #2
    1448:	4013      	ands	r3, r2
    144a:	d006      	beq.n	145a <STACK_SIZE+0x45a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    144c:	4b53      	ldr	r3, [pc, #332]	; (159c <STACK_SIZE+0x59c>)
    144e:	681b      	ldr	r3, [r3, #0]
    1450:	689a      	ldr	r2, [r3, #8]
    1452:	4b52      	ldr	r3, [pc, #328]	; (159c <STACK_SIZE+0x59c>)
    1454:	681b      	ldr	r3, [r3, #0]
    1456:	0018      	movs	r0, r3
    1458:	4790      	blx	r2
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    145a:	683b      	ldr	r3, [r7, #0]
    145c:	2240      	movs	r2, #64	; 0x40
    145e:	4013      	ands	r3, r2
    1460:	d013      	beq.n	148a <STACK_SIZE+0x48a>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    1462:	4b4e      	ldr	r3, [pc, #312]	; (159c <STACK_SIZE+0x59c>)
    1464:	681b      	ldr	r3, [r3, #0]
    1466:	681b      	ldr	r3, [r3, #0]
    1468:	2240      	movs	r2, #64	; 0x40
    146a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    146c:	4b4b      	ldr	r3, [pc, #300]	; (159c <STACK_SIZE+0x59c>)
    146e:	681b      	ldr	r3, [r3, #0]
    1470:	22a5      	movs	r2, #165	; 0xa5
    1472:	5c9b      	ldrb	r3, [r3, r2]
    1474:	001a      	movs	r2, r3
    1476:	2310      	movs	r3, #16
    1478:	4013      	ands	r3, r2
    147a:	d006      	beq.n	148a <STACK_SIZE+0x48a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    147c:	4b47      	ldr	r3, [pc, #284]	; (159c <STACK_SIZE+0x59c>)
    147e:	681b      	ldr	r3, [r3, #0]
    1480:	695a      	ldr	r2, [r3, #20]
    1482:	4b46      	ldr	r3, [pc, #280]	; (159c <STACK_SIZE+0x59c>)
    1484:	681b      	ldr	r3, [r3, #0]
    1486:	0018      	movs	r0, r3
    1488:	4790      	blx	r2
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    148a:	683b      	ldr	r3, [r7, #0]
    148c:	2220      	movs	r2, #32
    148e:	4013      	ands	r3, r2
    1490:	d013      	beq.n	14ba <STACK_SIZE+0x4ba>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    1492:	4b42      	ldr	r3, [pc, #264]	; (159c <STACK_SIZE+0x59c>)
    1494:	681b      	ldr	r3, [r3, #0]
    1496:	681b      	ldr	r3, [r3, #0]
    1498:	2220      	movs	r2, #32
    149a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    149c:	4b3f      	ldr	r3, [pc, #252]	; (159c <STACK_SIZE+0x59c>)
    149e:	681b      	ldr	r3, [r3, #0]
    14a0:	22a5      	movs	r2, #165	; 0xa5
    14a2:	5c9b      	ldrb	r3, [r3, r2]
    14a4:	001a      	movs	r2, r3
    14a6:	2308      	movs	r3, #8
    14a8:	4013      	ands	r3, r2
    14aa:	d006      	beq.n	14ba <STACK_SIZE+0x4ba>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    14ac:	4b3b      	ldr	r3, [pc, #236]	; (159c <STACK_SIZE+0x59c>)
    14ae:	681b      	ldr	r3, [r3, #0]
    14b0:	691a      	ldr	r2, [r3, #16]
    14b2:	4b3a      	ldr	r3, [pc, #232]	; (159c <STACK_SIZE+0x59c>)
    14b4:	681b      	ldr	r3, [r3, #0]
    14b6:	0018      	movs	r0, r3
    14b8:	4790      	blx	r2
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    14ba:	683b      	ldr	r3, [r7, #0]
    14bc:	2210      	movs	r2, #16
    14be:	4013      	ands	r3, r2
    14c0:	d013      	beq.n	14ea <STACK_SIZE+0x4ea>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    14c2:	4b36      	ldr	r3, [pc, #216]	; (159c <STACK_SIZE+0x59c>)
    14c4:	681b      	ldr	r3, [r3, #0]
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	2210      	movs	r2, #16
    14ca:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    14cc:	4b33      	ldr	r3, [pc, #204]	; (159c <STACK_SIZE+0x59c>)
    14ce:	681b      	ldr	r3, [r3, #0]
    14d0:	22a5      	movs	r2, #165	; 0xa5
    14d2:	5c9b      	ldrb	r3, [r3, r2]
    14d4:	001a      	movs	r2, r3
    14d6:	2304      	movs	r3, #4
    14d8:	4013      	ands	r3, r2
    14da:	d006      	beq.n	14ea <STACK_SIZE+0x4ea>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    14dc:	4b2f      	ldr	r3, [pc, #188]	; (159c <STACK_SIZE+0x59c>)
    14de:	681b      	ldr	r3, [r3, #0]
    14e0:	68da      	ldr	r2, [r3, #12]
    14e2:	4b2e      	ldr	r3, [pc, #184]	; (159c <STACK_SIZE+0x59c>)
    14e4:	681b      	ldr	r3, [r3, #0]
    14e6:	0018      	movs	r0, r3
    14e8:	4790      	blx	r2
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    14ea:	683b      	ldr	r3, [r7, #0]
    14ec:	2280      	movs	r2, #128	; 0x80
    14ee:	4013      	ands	r3, r2
    14f0:	d016      	beq.n	1520 <STACK_SIZE+0x520>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    14f2:	4b2b      	ldr	r3, [pc, #172]	; (15a0 <STACK_SIZE+0x5a0>)
    14f4:	2200      	movs	r2, #0
    14f6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    14f8:	4b28      	ldr	r3, [pc, #160]	; (159c <STACK_SIZE+0x59c>)
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	681b      	ldr	r3, [r3, #0]
    14fe:	2280      	movs	r2, #128	; 0x80
    1500:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    1502:	4b26      	ldr	r3, [pc, #152]	; (159c <STACK_SIZE+0x59c>)
    1504:	681b      	ldr	r3, [r3, #0]
    1506:	22a5      	movs	r2, #165	; 0xa5
    1508:	5c9b      	ldrb	r3, [r3, r2]
    150a:	001a      	movs	r2, r3
    150c:	2320      	movs	r3, #32
    150e:	4013      	ands	r3, r2
    1510:	d006      	beq.n	1520 <STACK_SIZE+0x520>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    1512:	4b22      	ldr	r3, [pc, #136]	; (159c <STACK_SIZE+0x59c>)
    1514:	681b      	ldr	r3, [r3, #0]
    1516:	699a      	ldr	r2, [r3, #24]
    1518:	4b20      	ldr	r3, [pc, #128]	; (159c <STACK_SIZE+0x59c>)
    151a:	681b      	ldr	r3, [r3, #0]
    151c:	0018      	movs	r0, r3
    151e:	4790      	blx	r2
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    1520:	683a      	ldr	r2, [r7, #0]
    1522:	2380      	movs	r3, #128	; 0x80
    1524:	005b      	lsls	r3, r3, #1
    1526:	4013      	ands	r3, r2
    1528:	d017      	beq.n	155a <STACK_SIZE+0x55a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    152a:	4b1d      	ldr	r3, [pc, #116]	; (15a0 <STACK_SIZE+0x5a0>)
    152c:	2200      	movs	r2, #0
    152e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    1530:	4b1a      	ldr	r3, [pc, #104]	; (159c <STACK_SIZE+0x59c>)
    1532:	681b      	ldr	r3, [r3, #0]
    1534:	681b      	ldr	r3, [r3, #0]
    1536:	2280      	movs	r2, #128	; 0x80
    1538:	0052      	lsls	r2, r2, #1
    153a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    153c:	4b17      	ldr	r3, [pc, #92]	; (159c <STACK_SIZE+0x59c>)
    153e:	681b      	ldr	r3, [r3, #0]
    1540:	22a5      	movs	r2, #165	; 0xa5
    1542:	5c9b      	ldrb	r3, [r3, r2]
    1544:	001a      	movs	r2, r3
    1546:	2340      	movs	r3, #64	; 0x40
    1548:	4013      	ands	r3, r2
    154a:	d006      	beq.n	155a <STACK_SIZE+0x55a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    154c:	4b13      	ldr	r3, [pc, #76]	; (159c <STACK_SIZE+0x59c>)
    154e:	681b      	ldr	r3, [r3, #0]
    1550:	69da      	ldr	r2, [r3, #28]
    1552:	4b12      	ldr	r3, [pc, #72]	; (159c <STACK_SIZE+0x59c>)
    1554:	681b      	ldr	r3, [r3, #0]
    1556:	0018      	movs	r0, r3
    1558:	4790      	blx	r2
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    155a:	683a      	ldr	r2, [r7, #0]
    155c:	2380      	movs	r3, #128	; 0x80
    155e:	009b      	lsls	r3, r3, #2
    1560:	4013      	ands	r3, r2
    1562:	d016      	beq.n	1592 <STACK_SIZE+0x592>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    1564:	4b0e      	ldr	r3, [pc, #56]	; (15a0 <STACK_SIZE+0x5a0>)
    1566:	2200      	movs	r2, #0
    1568:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    156a:	4b0c      	ldr	r3, [pc, #48]	; (159c <STACK_SIZE+0x59c>)
    156c:	681b      	ldr	r3, [r3, #0]
    156e:	681b      	ldr	r3, [r3, #0]
    1570:	2280      	movs	r2, #128	; 0x80
    1572:	0092      	lsls	r2, r2, #2
    1574:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    1576:	4b09      	ldr	r3, [pc, #36]	; (159c <STACK_SIZE+0x59c>)
    1578:	681b      	ldr	r3, [r3, #0]
    157a:	22a5      	movs	r2, #165	; 0xa5
    157c:	5c9b      	ldrb	r3, [r3, r2]
    157e:	b25b      	sxtb	r3, r3
    1580:	2b00      	cmp	r3, #0
    1582:	da06      	bge.n	1592 <STACK_SIZE+0x592>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    1584:	4b05      	ldr	r3, [pc, #20]	; (159c <STACK_SIZE+0x59c>)
    1586:	681b      	ldr	r3, [r3, #0]
    1588:	6a1a      	ldr	r2, [r3, #32]
    158a:	4b04      	ldr	r3, [pc, #16]	; (159c <STACK_SIZE+0x59c>)
    158c:	681b      	ldr	r3, [r3, #0]
    158e:	0018      	movs	r0, r3
    1590:	4790      	blx	r2
			}
		}

	}
}
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	46bd      	mov	sp, r7
    1596:	b002      	add	sp, #8
    1598:	bd80      	pop	{r7, pc}
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	20000094 	.word	0x20000094
    15a0:	200000ac 	.word	0x200000ac

000015a4 <_usb_device_interrupt_handler>:

	return STATUS_OK;
}

static void _usb_device_interrupt_handler(void)
{
    15a4:	b580      	push	{r7, lr}
    15a6:	b084      	sub	sp, #16
    15a8:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    15aa:	4bbd      	ldr	r3, [pc, #756]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    15ac:	681b      	ldr	r3, [r3, #0]
    15ae:	681a      	ldr	r2, [r3, #0]
    15b0:	2308      	movs	r3, #8
    15b2:	18fb      	adds	r3, r7, r3
    15b4:	8c12      	ldrh	r2, [r2, #32]
    15b6:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    15b8:	2308      	movs	r3, #8
    15ba:	18fb      	adds	r3, r7, r3
    15bc:	881b      	ldrh	r3, [r3, #0]
    15be:	2b00      	cmp	r3, #0
    15c0:	d155      	bne.n	166e <_usb_device_interrupt_handler+0xca>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    15c2:	4bb7      	ldr	r3, [pc, #732]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    15c4:	681b      	ldr	r3, [r3, #0]
    15c6:	681a      	ldr	r2, [r3, #0]
    15c8:	1dbb      	adds	r3, r7, #6
    15ca:	8b92      	ldrh	r2, [r2, #28]
    15cc:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    15ce:	4bb4      	ldr	r3, [pc, #720]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    15d0:	681a      	ldr	r2, [r3, #0]
    15d2:	23ab      	movs	r3, #171	; 0xab
    15d4:	005b      	lsls	r3, r3, #1
    15d6:	5ad3      	ldrh	r3, [r2, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    15d8:	1dba      	adds	r2, r7, #6
    15da:	8812      	ldrh	r2, [r2, #0]
    15dc:	4013      	ands	r3, r2
    15de:	b29a      	uxth	r2, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    15e0:	4baf      	ldr	r3, [pc, #700]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    15e2:	6819      	ldr	r1, [r3, #0]
    15e4:	23aa      	movs	r3, #170	; 0xaa
    15e6:	005b      	lsls	r3, r3, #1
    15e8:	5ac9      	ldrh	r1, [r1, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    15ea:	1d3b      	adds	r3, r7, #4
    15ec:	400a      	ands	r2, r1
    15ee:	801a      	strh	r2, [r3, #0]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    15f0:	2300      	movs	r3, #0
    15f2:	60fb      	str	r3, [r7, #12]
    15f4:	e037      	b.n	1666 <_usb_device_interrupt_handler+0xc2>
			if (flags & _usb_device_irq_bits[i]) {
    15f6:	4bab      	ldr	r3, [pc, #684]	; (18a4 <_usb_device_interrupt_handler+0x300>)
    15f8:	68fa      	ldr	r2, [r7, #12]
    15fa:	0052      	lsls	r2, r2, #1
    15fc:	5ad3      	ldrh	r3, [r2, r3]
    15fe:	1dba      	adds	r2, r7, #6
    1600:	8812      	ldrh	r2, [r2, #0]
    1602:	4013      	ands	r3, r2
    1604:	b29b      	uxth	r3, r3
    1606:	2b00      	cmp	r3, #0
    1608:	d007      	beq.n	161a <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    160a:	4ba5      	ldr	r3, [pc, #660]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    160c:	681b      	ldr	r3, [r3, #0]
    160e:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    1610:	4aa4      	ldr	r2, [pc, #656]	; (18a4 <_usb_device_interrupt_handler+0x300>)
    1612:	68f9      	ldr	r1, [r7, #12]
    1614:	0049      	lsls	r1, r1, #1
    1616:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    1618:	839a      	strh	r2, [r3, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    161a:	4ba2      	ldr	r3, [pc, #648]	; (18a4 <_usb_device_interrupt_handler+0x300>)
    161c:	68fa      	ldr	r2, [r7, #12]
    161e:	0052      	lsls	r2, r2, #1
    1620:	5ad3      	ldrh	r3, [r2, r3]
    1622:	1d3a      	adds	r2, r7, #4
    1624:	8812      	ldrh	r2, [r2, #0]
    1626:	4013      	ands	r3, r2
    1628:	b29b      	uxth	r3, r3
    162a:	2b00      	cmp	r3, #0
    162c:	d018      	beq.n	1660 <_usb_device_interrupt_handler+0xbc>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    162e:	68fb      	ldr	r3, [r7, #12]
    1630:	2b06      	cmp	r3, #6
    1632:	d10a      	bne.n	164a <_usb_device_interrupt_handler+0xa6>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    1634:	4b9c      	ldr	r3, [pc, #624]	; (18a8 <_usb_device_interrupt_handler+0x304>)
    1636:	891b      	ldrh	r3, [r3, #8]
    1638:	045b      	lsls	r3, r3, #17
    163a:	0d5b      	lsrs	r3, r3, #21
    163c:	b29b      	uxth	r3, r3
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    163e:	001a      	movs	r2, r3
    1640:	2380      	movs	r3, #128	; 0x80
    1642:	005b      	lsls	r3, r3, #1
    1644:	401a      	ands	r2, r3
    1646:	4b99      	ldr	r3, [pc, #612]	; (18ac <_usb_device_interrupt_handler+0x308>)
    1648:	601a      	str	r2, [r3, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    164a:	4b95      	ldr	r3, [pc, #596]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    164c:	681b      	ldr	r3, [r3, #0]
    164e:	68fa      	ldr	r2, [r7, #12]
    1650:	322e      	adds	r2, #46	; 0x2e
    1652:	0092      	lsls	r2, r2, #2
    1654:	58d2      	ldr	r2, [r2, r3]
    1656:	4b92      	ldr	r3, [pc, #584]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    1658:	681b      	ldr	r3, [r3, #0]
    165a:	4994      	ldr	r1, [pc, #592]	; (18ac <_usb_device_interrupt_handler+0x308>)
    165c:	0018      	movs	r0, r3
    165e:	4790      	blx	r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    1660:	68fb      	ldr	r3, [r7, #12]
    1662:	3301      	adds	r3, #1
    1664:	60fb      	str	r3, [r7, #12]
    1666:	68fb      	ldr	r3, [r7, #12]
    1668:	2b06      	cmp	r3, #6
    166a:	ddc4      	ble.n	15f6 <_usb_device_interrupt_handler+0x52>
    166c:	e250      	b.n	1b10 <_usb_device_interrupt_handler+0x56c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    166e:	230b      	movs	r3, #11
    1670:	18fb      	adds	r3, r7, r3
    1672:	2200      	movs	r2, #0
    1674:	701a      	strb	r2, [r3, #0]
    1676:	e23b      	b.n	1af0 <_usb_device_interrupt_handler+0x54c>

			if (ep_inst & (1 << i)) {
    1678:	2308      	movs	r3, #8
    167a:	18fb      	adds	r3, r7, r3
    167c:	881a      	ldrh	r2, [r3, #0]
    167e:	230b      	movs	r3, #11
    1680:	18fb      	adds	r3, r7, r3
    1682:	781b      	ldrb	r3, [r3, #0]
    1684:	411a      	asrs	r2, r3
    1686:	0013      	movs	r3, r2
    1688:	2201      	movs	r2, #1
    168a:	4013      	ands	r3, r2
    168c:	d100      	bne.n	1690 <_usb_device_interrupt_handler+0xec>
    168e:	e228      	b.n	1ae2 <_usb_device_interrupt_handler+0x53e>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    1690:	4b83      	ldr	r3, [pc, #524]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    1692:	681b      	ldr	r3, [r3, #0]
    1694:	681a      	ldr	r2, [r3, #0]
    1696:	230b      	movs	r3, #11
    1698:	18fb      	adds	r3, r7, r3
    169a:	781b      	ldrb	r3, [r3, #0]
    169c:	3308      	adds	r3, #8
    169e:	015b      	lsls	r3, r3, #5
    16a0:	18d3      	adds	r3, r2, r3
    16a2:	3307      	adds	r3, #7
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	b2da      	uxtb	r2, r3
    16a8:	1dbb      	adds	r3, r7, #6
    16aa:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    16ac:	4b7c      	ldr	r3, [pc, #496]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    16ae:	6819      	ldr	r1, [r3, #0]
    16b0:	230b      	movs	r3, #11
    16b2:	18fb      	adds	r3, r7, r3
    16b4:	781a      	ldrb	r2, [r3, #0]
    16b6:	23b0      	movs	r3, #176	; 0xb0
    16b8:	005b      	lsls	r3, r3, #1
    16ba:	188a      	adds	r2, r1, r2
    16bc:	18d3      	adds	r3, r2, r3
    16be:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    16c0:	b29b      	uxth	r3, r3
    16c2:	1dba      	adds	r2, r7, #6
    16c4:	8812      	ldrh	r2, [r2, #0]
    16c6:	4013      	ands	r3, r2
    16c8:	b29b      	uxth	r3, r3
    16ca:	b21a      	sxth	r2, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];
    16cc:	4b74      	ldr	r3, [pc, #464]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    16ce:	6818      	ldr	r0, [r3, #0]
    16d0:	230b      	movs	r3, #11
    16d2:	18fb      	adds	r3, r7, r3
    16d4:	7819      	ldrb	r1, [r3, #0]
    16d6:	23ac      	movs	r3, #172	; 0xac
    16d8:	005b      	lsls	r3, r3, #1
    16da:	1841      	adds	r1, r0, r1
    16dc:	18cb      	adds	r3, r1, r3
    16de:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    16e0:	b21b      	sxth	r3, r3
    16e2:	4013      	ands	r3, r2
    16e4:	b21a      	sxth	r2, r3
    16e6:	1d3b      	adds	r3, r7, #4
    16e8:	801a      	strh	r2, [r3, #0]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    16ea:	1dbb      	adds	r3, r7, #6
    16ec:	881b      	ldrh	r3, [r3, #0]
    16ee:	2260      	movs	r2, #96	; 0x60
    16f0:	4013      	ands	r3, r2
    16f2:	d05c      	beq.n	17ae <_usb_device_interrupt_handler+0x20a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    16f4:	4b6a      	ldr	r3, [pc, #424]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	681a      	ldr	r2, [r3, #0]
    16fa:	230b      	movs	r3, #11
    16fc:	18fb      	adds	r3, r7, r3
    16fe:	781b      	ldrb	r3, [r3, #0]
    1700:	3308      	adds	r3, #8
    1702:	015b      	lsls	r3, r3, #5
    1704:	18d3      	adds	r3, r2, r3
    1706:	3307      	adds	r3, #7
    1708:	781b      	ldrb	r3, [r3, #0]
    170a:	b2db      	uxtb	r3, r3
    170c:	001a      	movs	r2, r3
    170e:	2340      	movs	r3, #64	; 0x40
    1710:	4013      	ands	r3, r2
    1712:	d015      	beq.n	1740 <_usb_device_interrupt_handler+0x19c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    1714:	4b62      	ldr	r3, [pc, #392]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    1716:	681b      	ldr	r3, [r3, #0]
    1718:	681a      	ldr	r2, [r3, #0]
    171a:	230b      	movs	r3, #11
    171c:	18fb      	adds	r3, r7, r3
    171e:	781b      	ldrb	r3, [r3, #0]
    1720:	3308      	adds	r3, #8
    1722:	015b      	lsls	r3, r3, #5
    1724:	18d3      	adds	r3, r2, r3
    1726:	3307      	adds	r3, #7
    1728:	2240      	movs	r2, #64	; 0x40
    172a:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    172c:	230b      	movs	r3, #11
    172e:	18fb      	adds	r3, r7, r3
    1730:	781b      	ldrb	r3, [r3, #0]
    1732:	2280      	movs	r2, #128	; 0x80
    1734:	4252      	negs	r2, r2
    1736:	4313      	orrs	r3, r2
    1738:	b2da      	uxtb	r2, r3
    173a:	4b5d      	ldr	r3, [pc, #372]	; (18b0 <_usb_device_interrupt_handler+0x30c>)
    173c:	719a      	strb	r2, [r3, #6]
    173e:	e020      	b.n	1782 <_usb_device_interrupt_handler+0x1de>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    1740:	4b57      	ldr	r3, [pc, #348]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    1742:	681b      	ldr	r3, [r3, #0]
    1744:	681a      	ldr	r2, [r3, #0]
    1746:	230b      	movs	r3, #11
    1748:	18fb      	adds	r3, r7, r3
    174a:	781b      	ldrb	r3, [r3, #0]
    174c:	3308      	adds	r3, #8
    174e:	015b      	lsls	r3, r3, #5
    1750:	18d3      	adds	r3, r2, r3
    1752:	3307      	adds	r3, #7
    1754:	781b      	ldrb	r3, [r3, #0]
    1756:	b2db      	uxtb	r3, r3
    1758:	001a      	movs	r2, r3
    175a:	2320      	movs	r3, #32
    175c:	4013      	ands	r3, r2
    175e:	d010      	beq.n	1782 <_usb_device_interrupt_handler+0x1de>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    1760:	4b4f      	ldr	r3, [pc, #316]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    1762:	681b      	ldr	r3, [r3, #0]
    1764:	681a      	ldr	r2, [r3, #0]
    1766:	230b      	movs	r3, #11
    1768:	18fb      	adds	r3, r7, r3
    176a:	781b      	ldrb	r3, [r3, #0]
    176c:	3308      	adds	r3, #8
    176e:	015b      	lsls	r3, r3, #5
    1770:	18d3      	adds	r3, r2, r3
    1772:	3307      	adds	r3, #7
    1774:	2220      	movs	r2, #32
    1776:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    1778:	4b4d      	ldr	r3, [pc, #308]	; (18b0 <_usb_device_interrupt_handler+0x30c>)
    177a:	220b      	movs	r2, #11
    177c:	18ba      	adds	r2, r7, r2
    177e:	7812      	ldrb	r2, [r2, #0]
    1780:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    1782:	1d3b      	adds	r3, r7, #4
    1784:	881b      	ldrh	r3, [r3, #0]
    1786:	2260      	movs	r2, #96	; 0x60
    1788:	4013      	ands	r3, r2
    178a:	d100      	bne.n	178e <_usb_device_interrupt_handler+0x1ea>
    178c:	e1b7      	b.n	1afe <_usb_device_interrupt_handler+0x55a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    178e:	4b44      	ldr	r3, [pc, #272]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    1790:	681a      	ldr	r2, [r3, #0]
    1792:	230b      	movs	r3, #11
    1794:	18fb      	adds	r3, r7, r3
    1796:	781b      	ldrb	r3, [r3, #0]
    1798:	21e0      	movs	r1, #224	; 0xe0
    179a:	011b      	lsls	r3, r3, #4
    179c:	18d3      	adds	r3, r2, r3
    179e:	185b      	adds	r3, r3, r1
    17a0:	681a      	ldr	r2, [r3, #0]
    17a2:	4b3f      	ldr	r3, [pc, #252]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    17a4:	681b      	ldr	r3, [r3, #0]
    17a6:	4942      	ldr	r1, [pc, #264]	; (18b0 <_usb_device_interrupt_handler+0x30c>)
    17a8:	0018      	movs	r0, r3
    17aa:	4790      	blx	r2
					}
					return;
    17ac:	e1a7      	b.n	1afe <_usb_device_interrupt_handler+0x55a>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    17ae:	1dbb      	adds	r3, r7, #6
    17b0:	881b      	ldrh	r3, [r3, #0]
    17b2:	2210      	movs	r2, #16
    17b4:	4013      	ands	r3, r2
    17b6:	d038      	beq.n	182a <_usb_device_interrupt_handler+0x286>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    17b8:	4b39      	ldr	r3, [pc, #228]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    17ba:	681b      	ldr	r3, [r3, #0]
    17bc:	681a      	ldr	r2, [r3, #0]
    17be:	230b      	movs	r3, #11
    17c0:	18fb      	adds	r3, r7, r3
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	3308      	adds	r3, #8
    17c6:	015b      	lsls	r3, r3, #5
    17c8:	18d3      	adds	r3, r2, r3
    17ca:	3307      	adds	r3, #7
    17cc:	2210      	movs	r2, #16
    17ce:	701a      	strb	r2, [r3, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    17d0:	4b33      	ldr	r3, [pc, #204]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    17d2:	6819      	ldr	r1, [r3, #0]
    17d4:	230b      	movs	r3, #11
    17d6:	18fb      	adds	r3, r7, r3
    17d8:	781a      	ldrb	r2, [r3, #0]
    17da:	23b0      	movs	r3, #176	; 0xb0
    17dc:	005b      	lsls	r3, r3, #1
    17de:	188a      	adds	r2, r1, r2
    17e0:	18d3      	adds	r3, r2, r3
    17e2:	781b      	ldrb	r3, [r3, #0]
    17e4:	2210      	movs	r2, #16
    17e6:	4013      	ands	r3, r2
    17e8:	b2db      	uxtb	r3, r3
    17ea:	2b00      	cmp	r3, #0
    17ec:	d100      	bne.n	17f0 <_usb_device_interrupt_handler+0x24c>
    17ee:	e188      	b.n	1b02 <_usb_device_interrupt_handler+0x55e>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    17f0:	230b      	movs	r3, #11
    17f2:	18fb      	adds	r3, r7, r3
    17f4:	781b      	ldrb	r3, [r3, #0]
    17f6:	4a2c      	ldr	r2, [pc, #176]	; (18a8 <_usb_device_interrupt_handler+0x304>)
    17f8:	015b      	lsls	r3, r3, #5
    17fa:	18d3      	adds	r3, r2, r3
    17fc:	685b      	ldr	r3, [r3, #4]
    17fe:	049b      	lsls	r3, r3, #18
    1800:	0c9b      	lsrs	r3, r3, #18
    1802:	b29b      	uxth	r3, r3
    1804:	001a      	movs	r2, r3
    1806:	4b2a      	ldr	r3, [pc, #168]	; (18b0 <_usb_device_interrupt_handler+0x30c>)
    1808:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    180a:	4b25      	ldr	r3, [pc, #148]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    180c:	681a      	ldr	r2, [r3, #0]
    180e:	230b      	movs	r3, #11
    1810:	18fb      	adds	r3, r7, r3
    1812:	781b      	ldrb	r3, [r3, #0]
    1814:	21dc      	movs	r1, #220	; 0xdc
    1816:	011b      	lsls	r3, r3, #4
    1818:	18d3      	adds	r3, r2, r3
    181a:	185b      	adds	r3, r3, r1
    181c:	681a      	ldr	r2, [r3, #0]
    181e:	4b20      	ldr	r3, [pc, #128]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    1820:	681b      	ldr	r3, [r3, #0]
    1822:	4923      	ldr	r1, [pc, #140]	; (18b0 <_usb_device_interrupt_handler+0x30c>)
    1824:	0018      	movs	r0, r3
    1826:	4790      	blx	r2
					}
					return;
    1828:	e16b      	b.n	1b02 <_usb_device_interrupt_handler+0x55e>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    182a:	1dbb      	adds	r3, r7, #6
    182c:	881b      	ldrh	r3, [r3, #0]
    182e:	2203      	movs	r2, #3
    1830:	4013      	ands	r3, r2
    1832:	d100      	bne.n	1836 <_usb_device_interrupt_handler+0x292>
    1834:	e08f      	b.n	1956 <_usb_device_interrupt_handler+0x3b2>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1836:	4b1a      	ldr	r3, [pc, #104]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	681a      	ldr	r2, [r3, #0]
    183c:	230b      	movs	r3, #11
    183e:	18fb      	adds	r3, r7, r3
    1840:	781b      	ldrb	r3, [r3, #0]
    1842:	3308      	adds	r3, #8
    1844:	015b      	lsls	r3, r3, #5
    1846:	18d3      	adds	r3, r2, r3
    1848:	3307      	adds	r3, #7
    184a:	781b      	ldrb	r3, [r3, #0]
    184c:	b2db      	uxtb	r3, r3
    184e:	001a      	movs	r2, r3
    1850:	2302      	movs	r3, #2
    1852:	4013      	ands	r3, r2
    1854:	d02e      	beq.n	18b4 <_usb_device_interrupt_handler+0x310>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    1856:	4b12      	ldr	r3, [pc, #72]	; (18a0 <_usb_device_interrupt_handler+0x2fc>)
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	681a      	ldr	r2, [r3, #0]
    185c:	230b      	movs	r3, #11
    185e:	18fb      	adds	r3, r7, r3
    1860:	781b      	ldrb	r3, [r3, #0]
    1862:	3308      	adds	r3, #8
    1864:	015b      	lsls	r3, r3, #5
    1866:	18d3      	adds	r3, r2, r3
    1868:	3307      	adds	r3, #7
    186a:	2202      	movs	r2, #2
    186c:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    186e:	230b      	movs	r3, #11
    1870:	18fb      	adds	r3, r7, r3
    1872:	781b      	ldrb	r3, [r3, #0]
    1874:	2280      	movs	r2, #128	; 0x80
    1876:	4252      	negs	r2, r2
    1878:	4313      	orrs	r3, r2
    187a:	b2da      	uxtb	r2, r3
    187c:	4b0c      	ldr	r3, [pc, #48]	; (18b0 <_usb_device_interrupt_handler+0x30c>)
    187e:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    1880:	230b      	movs	r3, #11
    1882:	18fb      	adds	r3, r7, r3
    1884:	781b      	ldrb	r3, [r3, #0]
    1886:	4a08      	ldr	r2, [pc, #32]	; (18a8 <_usb_device_interrupt_handler+0x304>)
    1888:	015b      	lsls	r3, r3, #5
    188a:	18d3      	adds	r3, r2, r3
    188c:	3310      	adds	r3, #16
    188e:	685b      	ldr	r3, [r3, #4]
    1890:	049b      	lsls	r3, r3, #18
    1892:	0c9b      	lsrs	r3, r3, #18
    1894:	b29b      	uxth	r3, r3
    1896:	001a      	movs	r2, r3
    1898:	4b05      	ldr	r3, [pc, #20]	; (18b0 <_usb_device_interrupt_handler+0x30c>)
    189a:	805a      	strh	r2, [r3, #2]
    189c:	e045      	b.n	192a <_usb_device_interrupt_handler+0x386>
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	20000094 	.word	0x20000094
    18a4:	0000ca98 	.word	0x0000ca98
    18a8:	20000e2c 	.word	0x20000e2c
    18ac:	200000a0 	.word	0x200000a0
    18b0:	200000a4 	.word	0x200000a4

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    18b4:	4b98      	ldr	r3, [pc, #608]	; (1b18 <_usb_device_interrupt_handler+0x574>)
    18b6:	681b      	ldr	r3, [r3, #0]
    18b8:	681a      	ldr	r2, [r3, #0]
    18ba:	230b      	movs	r3, #11
    18bc:	18fb      	adds	r3, r7, r3
    18be:	781b      	ldrb	r3, [r3, #0]
    18c0:	3308      	adds	r3, #8
    18c2:	015b      	lsls	r3, r3, #5
    18c4:	18d3      	adds	r3, r2, r3
    18c6:	3307      	adds	r3, #7
    18c8:	781b      	ldrb	r3, [r3, #0]
    18ca:	b2db      	uxtb	r3, r3
    18cc:	001a      	movs	r2, r3
    18ce:	2301      	movs	r3, #1
    18d0:	4013      	ands	r3, r2
    18d2:	d02a      	beq.n	192a <_usb_device_interrupt_handler+0x386>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    18d4:	4b90      	ldr	r3, [pc, #576]	; (1b18 <_usb_device_interrupt_handler+0x574>)
    18d6:	681b      	ldr	r3, [r3, #0]
    18d8:	681a      	ldr	r2, [r3, #0]
    18da:	230b      	movs	r3, #11
    18dc:	18fb      	adds	r3, r7, r3
    18de:	781b      	ldrb	r3, [r3, #0]
    18e0:	3308      	adds	r3, #8
    18e2:	015b      	lsls	r3, r3, #5
    18e4:	18d3      	adds	r3, r2, r3
    18e6:	3307      	adds	r3, #7
    18e8:	2201      	movs	r2, #1
    18ea:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    18ec:	4b8b      	ldr	r3, [pc, #556]	; (1b1c <_usb_device_interrupt_handler+0x578>)
    18ee:	220b      	movs	r2, #11
    18f0:	18ba      	adds	r2, r7, r2
    18f2:	7812      	ldrb	r2, [r2, #0]
    18f4:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    18f6:	230b      	movs	r3, #11
    18f8:	18fb      	adds	r3, r7, r3
    18fa:	781b      	ldrb	r3, [r3, #0]
    18fc:	4a88      	ldr	r2, [pc, #544]	; (1b20 <_usb_device_interrupt_handler+0x57c>)
    18fe:	015b      	lsls	r3, r3, #5
    1900:	18d3      	adds	r3, r2, r3
    1902:	685b      	ldr	r3, [r3, #4]
    1904:	049b      	lsls	r3, r3, #18
    1906:	0c9b      	lsrs	r3, r3, #18
    1908:	b29b      	uxth	r3, r3
    190a:	001a      	movs	r2, r3
    190c:	4b83      	ldr	r3, [pc, #524]	; (1b1c <_usb_device_interrupt_handler+0x578>)
    190e:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    1910:	230b      	movs	r3, #11
    1912:	18fb      	adds	r3, r7, r3
    1914:	781b      	ldrb	r3, [r3, #0]
    1916:	4a82      	ldr	r2, [pc, #520]	; (1b20 <_usb_device_interrupt_handler+0x57c>)
    1918:	015b      	lsls	r3, r3, #5
    191a:	18d3      	adds	r3, r2, r3
    191c:	685b      	ldr	r3, [r3, #4]
    191e:	011b      	lsls	r3, r3, #4
    1920:	0c9b      	lsrs	r3, r3, #18
    1922:	b29b      	uxth	r3, r3
    1924:	001a      	movs	r2, r3
    1926:	4b7d      	ldr	r3, [pc, #500]	; (1b1c <_usb_device_interrupt_handler+0x578>)
    1928:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    192a:	1d3b      	adds	r3, r7, #4
    192c:	881b      	ldrh	r3, [r3, #0]
    192e:	2203      	movs	r2, #3
    1930:	4013      	ands	r3, r2
    1932:	d100      	bne.n	1936 <_usb_device_interrupt_handler+0x392>
    1934:	e0e7      	b.n	1b06 <_usb_device_interrupt_handler+0x562>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    1936:	4b78      	ldr	r3, [pc, #480]	; (1b18 <_usb_device_interrupt_handler+0x574>)
    1938:	681a      	ldr	r2, [r3, #0]
    193a:	230b      	movs	r3, #11
    193c:	18fb      	adds	r3, r7, r3
    193e:	781b      	ldrb	r3, [r3, #0]
    1940:	330d      	adds	r3, #13
    1942:	011b      	lsls	r3, r3, #4
    1944:	18d3      	adds	r3, r2, r3
    1946:	3304      	adds	r3, #4
    1948:	681a      	ldr	r2, [r3, #0]
    194a:	4b73      	ldr	r3, [pc, #460]	; (1b18 <_usb_device_interrupt_handler+0x574>)
    194c:	681b      	ldr	r3, [r3, #0]
    194e:	4973      	ldr	r1, [pc, #460]	; (1b1c <_usb_device_interrupt_handler+0x578>)
    1950:	0018      	movs	r0, r3
    1952:	4790      	blx	r2
					}
					return;
    1954:	e0d7      	b.n	1b06 <_usb_device_interrupt_handler+0x562>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    1956:	1dbb      	adds	r3, r7, #6
    1958:	881b      	ldrh	r3, [r3, #0]
    195a:	220c      	movs	r2, #12
    195c:	4013      	ands	r3, r2
    195e:	d100      	bne.n	1962 <_usb_device_interrupt_handler+0x3be>
    1960:	e0bf      	b.n	1ae2 <_usb_device_interrupt_handler+0x53e>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1962:	4b6d      	ldr	r3, [pc, #436]	; (1b18 <_usb_device_interrupt_handler+0x574>)
    1964:	681b      	ldr	r3, [r3, #0]
    1966:	681a      	ldr	r2, [r3, #0]
    1968:	230b      	movs	r3, #11
    196a:	18fb      	adds	r3, r7, r3
    196c:	781b      	ldrb	r3, [r3, #0]
    196e:	3308      	adds	r3, #8
    1970:	015b      	lsls	r3, r3, #5
    1972:	18d3      	adds	r3, r2, r3
    1974:	3307      	adds	r3, #7
    1976:	781b      	ldrb	r3, [r3, #0]
    1978:	b2db      	uxtb	r3, r3
    197a:	001a      	movs	r2, r3
    197c:	2308      	movs	r3, #8
    197e:	4013      	ands	r3, r2
    1980:	d047      	beq.n	1a12 <_usb_device_interrupt_handler+0x46e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    1982:	4b65      	ldr	r3, [pc, #404]	; (1b18 <_usb_device_interrupt_handler+0x574>)
    1984:	681b      	ldr	r3, [r3, #0]
    1986:	681a      	ldr	r2, [r3, #0]
    1988:	230b      	movs	r3, #11
    198a:	18fb      	adds	r3, r7, r3
    198c:	781b      	ldrb	r3, [r3, #0]
    198e:	3308      	adds	r3, #8
    1990:	015b      	lsls	r3, r3, #5
    1992:	18d3      	adds	r3, r2, r3
    1994:	3307      	adds	r3, #7
    1996:	2208      	movs	r2, #8
    1998:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    199a:	230b      	movs	r3, #11
    199c:	18fb      	adds	r3, r7, r3
    199e:	781b      	ldrb	r3, [r3, #0]
    19a0:	4a5f      	ldr	r2, [pc, #380]	; (1b20 <_usb_device_interrupt_handler+0x57c>)
    19a2:	015b      	lsls	r3, r3, #5
    19a4:	18d3      	adds	r3, r2, r3
    19a6:	331a      	adds	r3, #26
    19a8:	781b      	ldrb	r3, [r3, #0]
    19aa:	b2db      	uxtb	r3, r3
    19ac:	001a      	movs	r2, r3
    19ae:	2302      	movs	r3, #2
    19b0:	4013      	ands	r3, r2
    19b2:	d014      	beq.n	19de <_usb_device_interrupt_handler+0x43a>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    19b4:	230b      	movs	r3, #11
    19b6:	18fb      	adds	r3, r7, r3
    19b8:	781b      	ldrb	r3, [r3, #0]
    19ba:	220b      	movs	r2, #11
    19bc:	18ba      	adds	r2, r7, r2
    19be:	7812      	ldrb	r2, [r2, #0]
    19c0:	4957      	ldr	r1, [pc, #348]	; (1b20 <_usb_device_interrupt_handler+0x57c>)
    19c2:	0152      	lsls	r2, r2, #5
    19c4:	188a      	adds	r2, r1, r2
    19c6:	321a      	adds	r2, #26
    19c8:	7812      	ldrb	r2, [r2, #0]
    19ca:	b2d2      	uxtb	r2, r2
    19cc:	2102      	movs	r1, #2
    19ce:	438a      	bics	r2, r1
    19d0:	b2d1      	uxtb	r1, r2
    19d2:	4a53      	ldr	r2, [pc, #332]	; (1b20 <_usb_device_interrupt_handler+0x57c>)
    19d4:	015b      	lsls	r3, r3, #5
    19d6:	18d3      	adds	r3, r2, r3
    19d8:	331a      	adds	r3, #26
    19da:	1c0a      	adds	r2, r1, #0
    19dc:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    19de:	230b      	movs	r3, #11
    19e0:	18fb      	adds	r3, r7, r3
    19e2:	781b      	ldrb	r3, [r3, #0]
    19e4:	2280      	movs	r2, #128	; 0x80
    19e6:	4252      	negs	r2, r2
    19e8:	4313      	orrs	r3, r2
    19ea:	b2da      	uxtb	r2, r3
    19ec:	4b4b      	ldr	r3, [pc, #300]	; (1b1c <_usb_device_interrupt_handler+0x578>)
    19ee:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    19f0:	4b49      	ldr	r3, [pc, #292]	; (1b18 <_usb_device_interrupt_handler+0x574>)
    19f2:	681b      	ldr	r3, [r3, #0]
    19f4:	681a      	ldr	r2, [r3, #0]
    19f6:	230b      	movs	r3, #11
    19f8:	18fb      	adds	r3, r7, r3
    19fa:	781b      	ldrb	r3, [r3, #0]
    19fc:	3308      	adds	r3, #8
    19fe:	015b      	lsls	r3, r3, #5
    1a00:	18d3      	adds	r3, r2, r3
    1a02:	3307      	adds	r3, #7
    1a04:	781b      	ldrb	r3, [r3, #0]
    1a06:	b2db      	uxtb	r3, r3
    1a08:	001a      	movs	r2, r3
    1a0a:	2302      	movs	r3, #2
    1a0c:	4013      	ands	r3, r2
    1a0e:	d053      	beq.n	1ab8 <_usb_device_interrupt_handler+0x514>
							return;
    1a10:	e07e      	b.n	1b10 <_usb_device_interrupt_handler+0x56c>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1a12:	4b41      	ldr	r3, [pc, #260]	; (1b18 <_usb_device_interrupt_handler+0x574>)
    1a14:	681b      	ldr	r3, [r3, #0]
    1a16:	681a      	ldr	r2, [r3, #0]
    1a18:	230b      	movs	r3, #11
    1a1a:	18fb      	adds	r3, r7, r3
    1a1c:	781b      	ldrb	r3, [r3, #0]
    1a1e:	3308      	adds	r3, #8
    1a20:	015b      	lsls	r3, r3, #5
    1a22:	18d3      	adds	r3, r2, r3
    1a24:	3307      	adds	r3, #7
    1a26:	781b      	ldrb	r3, [r3, #0]
    1a28:	b2db      	uxtb	r3, r3
    1a2a:	001a      	movs	r2, r3
    1a2c:	2304      	movs	r3, #4
    1a2e:	4013      	ands	r3, r2
    1a30:	d042      	beq.n	1ab8 <_usb_device_interrupt_handler+0x514>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    1a32:	4b39      	ldr	r3, [pc, #228]	; (1b18 <_usb_device_interrupt_handler+0x574>)
    1a34:	681b      	ldr	r3, [r3, #0]
    1a36:	681a      	ldr	r2, [r3, #0]
    1a38:	230b      	movs	r3, #11
    1a3a:	18fb      	adds	r3, r7, r3
    1a3c:	781b      	ldrb	r3, [r3, #0]
    1a3e:	3308      	adds	r3, #8
    1a40:	015b      	lsls	r3, r3, #5
    1a42:	18d3      	adds	r3, r2, r3
    1a44:	3307      	adds	r3, #7
    1a46:	2204      	movs	r2, #4
    1a48:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    1a4a:	230b      	movs	r3, #11
    1a4c:	18fb      	adds	r3, r7, r3
    1a4e:	781b      	ldrb	r3, [r3, #0]
    1a50:	4a33      	ldr	r2, [pc, #204]	; (1b20 <_usb_device_interrupt_handler+0x57c>)
    1a52:	015b      	lsls	r3, r3, #5
    1a54:	18d3      	adds	r3, r2, r3
    1a56:	330a      	adds	r3, #10
    1a58:	781b      	ldrb	r3, [r3, #0]
    1a5a:	b2db      	uxtb	r3, r3
    1a5c:	001a      	movs	r2, r3
    1a5e:	2302      	movs	r3, #2
    1a60:	4013      	ands	r3, r2
    1a62:	d014      	beq.n	1a8e <_usb_device_interrupt_handler+0x4ea>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    1a64:	230b      	movs	r3, #11
    1a66:	18fb      	adds	r3, r7, r3
    1a68:	781b      	ldrb	r3, [r3, #0]
    1a6a:	220b      	movs	r2, #11
    1a6c:	18ba      	adds	r2, r7, r2
    1a6e:	7812      	ldrb	r2, [r2, #0]
    1a70:	492b      	ldr	r1, [pc, #172]	; (1b20 <_usb_device_interrupt_handler+0x57c>)
    1a72:	0152      	lsls	r2, r2, #5
    1a74:	188a      	adds	r2, r1, r2
    1a76:	320a      	adds	r2, #10
    1a78:	7812      	ldrb	r2, [r2, #0]
    1a7a:	b2d2      	uxtb	r2, r2
    1a7c:	2102      	movs	r1, #2
    1a7e:	438a      	bics	r2, r1
    1a80:	b2d1      	uxtb	r1, r2
    1a82:	4a27      	ldr	r2, [pc, #156]	; (1b20 <_usb_device_interrupt_handler+0x57c>)
    1a84:	015b      	lsls	r3, r3, #5
    1a86:	18d3      	adds	r3, r2, r3
    1a88:	330a      	adds	r3, #10
    1a8a:	1c0a      	adds	r2, r1, #0
    1a8c:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    1a8e:	4b23      	ldr	r3, [pc, #140]	; (1b1c <_usb_device_interrupt_handler+0x578>)
    1a90:	220b      	movs	r2, #11
    1a92:	18ba      	adds	r2, r7, r2
    1a94:	7812      	ldrb	r2, [r2, #0]
    1a96:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1a98:	4b1f      	ldr	r3, [pc, #124]	; (1b18 <_usb_device_interrupt_handler+0x574>)
    1a9a:	681b      	ldr	r3, [r3, #0]
    1a9c:	681a      	ldr	r2, [r3, #0]
    1a9e:	230b      	movs	r3, #11
    1aa0:	18fb      	adds	r3, r7, r3
    1aa2:	781b      	ldrb	r3, [r3, #0]
    1aa4:	3308      	adds	r3, #8
    1aa6:	015b      	lsls	r3, r3, #5
    1aa8:	18d3      	adds	r3, r2, r3
    1aaa:	3307      	adds	r3, #7
    1aac:	781b      	ldrb	r3, [r3, #0]
    1aae:	b2db      	uxtb	r3, r3
    1ab0:	001a      	movs	r2, r3
    1ab2:	2301      	movs	r3, #1
    1ab4:	4013      	ands	r3, r2
    1ab6:	d128      	bne.n	1b0a <_usb_device_interrupt_handler+0x566>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    1ab8:	1d3b      	adds	r3, r7, #4
    1aba:	881b      	ldrh	r3, [r3, #0]
    1abc:	220c      	movs	r2, #12
    1abe:	4013      	ands	r3, r2
    1ac0:	d025      	beq.n	1b0e <_usb_device_interrupt_handler+0x56a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    1ac2:	4b15      	ldr	r3, [pc, #84]	; (1b18 <_usb_device_interrupt_handler+0x574>)
    1ac4:	681a      	ldr	r2, [r3, #0]
    1ac6:	230b      	movs	r3, #11
    1ac8:	18fb      	adds	r3, r7, r3
    1aca:	781b      	ldrb	r3, [r3, #0]
    1acc:	21d8      	movs	r1, #216	; 0xd8
    1ace:	011b      	lsls	r3, r3, #4
    1ad0:	18d3      	adds	r3, r2, r3
    1ad2:	185b      	adds	r3, r3, r1
    1ad4:	681a      	ldr	r2, [r3, #0]
    1ad6:	4b10      	ldr	r3, [pc, #64]	; (1b18 <_usb_device_interrupt_handler+0x574>)
    1ad8:	681b      	ldr	r3, [r3, #0]
    1ada:	4910      	ldr	r1, [pc, #64]	; (1b1c <_usb_device_interrupt_handler+0x578>)
    1adc:	0018      	movs	r0, r3
    1ade:	4790      	blx	r2
					}
					return;
    1ae0:	e015      	b.n	1b0e <_usb_device_interrupt_handler+0x56a>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    1ae2:	230b      	movs	r3, #11
    1ae4:	18fb      	adds	r3, r7, r3
    1ae6:	781a      	ldrb	r2, [r3, #0]
    1ae8:	230b      	movs	r3, #11
    1aea:	18fb      	adds	r3, r7, r3
    1aec:	3201      	adds	r2, #1
    1aee:	701a      	strb	r2, [r3, #0]
    1af0:	230b      	movs	r3, #11
    1af2:	18fb      	adds	r3, r7, r3
    1af4:	781b      	ldrb	r3, [r3, #0]
    1af6:	2b07      	cmp	r3, #7
    1af8:	d800      	bhi.n	1afc <_usb_device_interrupt_handler+0x558>
    1afa:	e5bd      	b.n	1678 <_usb_device_interrupt_handler+0xd4>
    1afc:	e008      	b.n	1b10 <_usb_device_interrupt_handler+0x56c>
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
					}
					return;
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	e006      	b.n	1b10 <_usb_device_interrupt_handler+0x56c>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
					}
					return;
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	e004      	b.n	1b10 <_usb_device_interrupt_handler+0x56c>
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
					}
					return;
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	e002      	b.n	1b10 <_usb_device_interrupt_handler+0x56c>
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
							return;
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	e000      	b.n	1b10 <_usb_device_interrupt_handler+0x56c>
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
					}
					return;
    1b0e:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
    1b10:	46bd      	mov	sp, r7
    1b12:	b004      	add	sp, #16
    1b14:	bd80      	pop	{r7, pc}
    1b16:	46c0      	nop			; (mov r8, r8)
    1b18:	20000094 	.word	0x20000094
    1b1c:	200000a4 	.word	0x200000a4
    1b20:	20000e2c 	.word	0x20000e2c

00001b24 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    1b24:	b580      	push	{r7, lr}
    1b26:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    1b28:	4b08      	ldr	r3, [pc, #32]	; (1b4c <USB_Handler+0x28>)
    1b2a:	681b      	ldr	r3, [r3, #0]
    1b2c:	681b      	ldr	r3, [r3, #0]
    1b2e:	781b      	ldrb	r3, [r3, #0]
    1b30:	061b      	lsls	r3, r3, #24
    1b32:	0fdb      	lsrs	r3, r3, #31
    1b34:	b2db      	uxtb	r3, r3
    1b36:	2b00      	cmp	r3, #0
    1b38:	d002      	beq.n	1b40 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    1b3a:	4b05      	ldr	r3, [pc, #20]	; (1b50 <USB_Handler+0x2c>)
    1b3c:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    1b3e:	e001      	b.n	1b44 <USB_Handler+0x20>
		/*host mode ISR */
		_usb_host_interrupt_handler();
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    1b40:	4b04      	ldr	r3, [pc, #16]	; (1b54 <USB_Handler+0x30>)
    1b42:	4798      	blx	r3
	}
}
    1b44:	46c0      	nop			; (mov r8, r8)
    1b46:	46bd      	mov	sp, r7
    1b48:	bd80      	pop	{r7, pc}
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	20000094 	.word	0x20000094
    1b50:	00000f29 	.word	0x00000f29
    1b54:	000015a5 	.word	0x000015a5

00001b58 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1b58:	b580      	push	{r7, lr}
    1b5a:	b086      	sub	sp, #24
    1b5c:	af00      	add	r7, sp, #0
    1b5e:	60f8      	str	r0, [r7, #12]
    1b60:	60b9      	str	r1, [r7, #8]
    1b62:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1b64:	2300      	movs	r3, #0
    1b66:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    1b68:	68fb      	ldr	r3, [r7, #12]
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d012      	beq.n	1b94 <_read+0x3c>
		return -1;
    1b6e:	2301      	movs	r3, #1
    1b70:	425b      	negs	r3, r3
    1b72:	e013      	b.n	1b9c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    1b74:	4b0b      	ldr	r3, [pc, #44]	; (1ba4 <_read+0x4c>)
    1b76:	681a      	ldr	r2, [r3, #0]
    1b78:	4b0b      	ldr	r3, [pc, #44]	; (1ba8 <_read+0x50>)
    1b7a:	681b      	ldr	r3, [r3, #0]
    1b7c:	68b9      	ldr	r1, [r7, #8]
    1b7e:	0018      	movs	r0, r3
    1b80:	4790      	blx	r2
		ptr++;
    1b82:	68bb      	ldr	r3, [r7, #8]
    1b84:	3301      	adds	r3, #1
    1b86:	60bb      	str	r3, [r7, #8]
		nChars++;
    1b88:	697b      	ldr	r3, [r7, #20]
    1b8a:	3301      	adds	r3, #1
    1b8c:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1b8e:	687b      	ldr	r3, [r7, #4]
    1b90:	3b01      	subs	r3, #1
    1b92:	607b      	str	r3, [r7, #4]
    1b94:	687b      	ldr	r3, [r7, #4]
    1b96:	2b00      	cmp	r3, #0
    1b98:	dcec      	bgt.n	1b74 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    1b9a:	697b      	ldr	r3, [r7, #20]
}
    1b9c:	0018      	movs	r0, r3
    1b9e:	46bd      	mov	sp, r7
    1ba0:	b006      	add	sp, #24
    1ba2:	bd80      	pop	{r7, pc}
    1ba4:	20000f2c 	.word	0x20000f2c
    1ba8:	20000f34 	.word	0x20000f34

00001bac <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1bac:	b580      	push	{r7, lr}
    1bae:	b086      	sub	sp, #24
    1bb0:	af00      	add	r7, sp, #0
    1bb2:	60f8      	str	r0, [r7, #12]
    1bb4:	60b9      	str	r1, [r7, #8]
    1bb6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1bb8:	2300      	movs	r3, #0
    1bba:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    1bbc:	68fb      	ldr	r3, [r7, #12]
    1bbe:	2b01      	cmp	r3, #1
    1bc0:	d01d      	beq.n	1bfe <_write+0x52>
    1bc2:	68fb      	ldr	r3, [r7, #12]
    1bc4:	2b02      	cmp	r3, #2
    1bc6:	d01a      	beq.n	1bfe <_write+0x52>
    1bc8:	68fb      	ldr	r3, [r7, #12]
    1bca:	2b03      	cmp	r3, #3
    1bcc:	d017      	beq.n	1bfe <_write+0x52>
		return -1;
    1bce:	2301      	movs	r3, #1
    1bd0:	425b      	negs	r3, r3
    1bd2:	e018      	b.n	1c06 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1bd4:	4b0e      	ldr	r3, [pc, #56]	; (1c10 <_write+0x64>)
    1bd6:	681a      	ldr	r2, [r3, #0]
    1bd8:	4b0e      	ldr	r3, [pc, #56]	; (1c14 <_write+0x68>)
    1bda:	6818      	ldr	r0, [r3, #0]
    1bdc:	68bb      	ldr	r3, [r7, #8]
    1bde:	1c59      	adds	r1, r3, #1
    1be0:	60b9      	str	r1, [r7, #8]
    1be2:	781b      	ldrb	r3, [r3, #0]
    1be4:	0019      	movs	r1, r3
    1be6:	4790      	blx	r2
    1be8:	1e03      	subs	r3, r0, #0
    1bea:	da02      	bge.n	1bf2 <_write+0x46>
			return -1;
    1bec:	2301      	movs	r3, #1
    1bee:	425b      	negs	r3, r3
    1bf0:	e009      	b.n	1c06 <_write+0x5a>
		}
		++nChars;
    1bf2:	697b      	ldr	r3, [r7, #20]
    1bf4:	3301      	adds	r3, #1
    1bf6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	3b01      	subs	r3, #1
    1bfc:	607b      	str	r3, [r7, #4]
    1bfe:	687b      	ldr	r3, [r7, #4]
    1c00:	2b00      	cmp	r3, #0
    1c02:	d1e7      	bne.n	1bd4 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    1c04:	697b      	ldr	r3, [r7, #20]
}
    1c06:	0018      	movs	r0, r3
    1c08:	46bd      	mov	sp, r7
    1c0a:	b006      	add	sp, #24
    1c0c:	bd80      	pop	{r7, pc}
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	20000f30 	.word	0x20000f30
    1c14:	20000f34 	.word	0x20000f34

00001c18 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1c18:	b580      	push	{r7, lr}
    1c1a:	b082      	sub	sp, #8
    1c1c:	af00      	add	r7, sp, #0
    1c1e:	0002      	movs	r2, r0
    1c20:	1dfb      	adds	r3, r7, #7
    1c22:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1c24:	4b06      	ldr	r3, [pc, #24]	; (1c40 <system_interrupt_enable+0x28>)
    1c26:	1dfa      	adds	r2, r7, #7
    1c28:	7812      	ldrb	r2, [r2, #0]
    1c2a:	0011      	movs	r1, r2
    1c2c:	221f      	movs	r2, #31
    1c2e:	400a      	ands	r2, r1
    1c30:	2101      	movs	r1, #1
    1c32:	4091      	lsls	r1, r2
    1c34:	000a      	movs	r2, r1
    1c36:	601a      	str	r2, [r3, #0]
}
    1c38:	46c0      	nop			; (mov r8, r8)
    1c3a:	46bd      	mov	sp, r7
    1c3c:	b002      	add	sp, #8
    1c3e:	bd80      	pop	{r7, pc}
    1c40:	e000e100 	.word	0xe000e100

00001c44 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1c44:	b580      	push	{r7, lr}
    1c46:	b084      	sub	sp, #16
    1c48:	af00      	add	r7, sp, #0
    1c4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	681b      	ldr	r3, [r3, #0]
    1c50:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1c52:	68fb      	ldr	r3, [r7, #12]
    1c54:	69db      	ldr	r3, [r3, #28]
    1c56:	1e5a      	subs	r2, r3, #1
    1c58:	4193      	sbcs	r3, r2
    1c5a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1c5c:	0018      	movs	r0, r3
    1c5e:	46bd      	mov	sp, r7
    1c60:	b004      	add	sp, #16
    1c62:	bd80      	pop	{r7, pc}

00001c64 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1c64:	b580      	push	{r7, lr}
    1c66:	b082      	sub	sp, #8
    1c68:	af00      	add	r7, sp, #0
    1c6a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1c6c:	46c0      	nop			; (mov r8, r8)
    1c6e:	687b      	ldr	r3, [r7, #4]
    1c70:	0018      	movs	r0, r3
    1c72:	4b04      	ldr	r3, [pc, #16]	; (1c84 <_usart_wait_for_sync+0x20>)
    1c74:	4798      	blx	r3
    1c76:	1e03      	subs	r3, r0, #0
    1c78:	d1f9      	bne.n	1c6e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1c7a:	46c0      	nop			; (mov r8, r8)
    1c7c:	46bd      	mov	sp, r7
    1c7e:	b002      	add	sp, #8
    1c80:	bd80      	pop	{r7, pc}
    1c82:	46c0      	nop			; (mov r8, r8)
    1c84:	00001c45 	.word	0x00001c45

00001c88 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    1c88:	b580      	push	{r7, lr}
    1c8a:	b082      	sub	sp, #8
    1c8c:	af00      	add	r7, sp, #0
    1c8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1c90:	687b      	ldr	r3, [r7, #4]
    1c92:	2280      	movs	r2, #128	; 0x80
    1c94:	05d2      	lsls	r2, r2, #23
    1c96:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1c98:	687b      	ldr	r3, [r7, #4]
    1c9a:	2200      	movs	r2, #0
    1c9c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    1c9e:	687b      	ldr	r3, [r7, #4]
    1ca0:	22ff      	movs	r2, #255	; 0xff
    1ca2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    1ca4:	687b      	ldr	r3, [r7, #4]
    1ca6:	2200      	movs	r2, #0
    1ca8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1caa:	687b      	ldr	r3, [r7, #4]
    1cac:	2200      	movs	r2, #0
    1cae:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    1cb0:	687b      	ldr	r3, [r7, #4]
    1cb2:	2296      	movs	r2, #150	; 0x96
    1cb4:	0192      	lsls	r2, r2, #6
    1cb6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    1cb8:	687b      	ldr	r3, [r7, #4]
    1cba:	2224      	movs	r2, #36	; 0x24
    1cbc:	2101      	movs	r1, #1
    1cbe:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	2225      	movs	r2, #37	; 0x25
    1cc4:	2101      	movs	r1, #1
    1cc6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    1cc8:	687b      	ldr	r3, [r7, #4]
    1cca:	2226      	movs	r2, #38	; 0x26
    1ccc:	2100      	movs	r1, #0
    1cce:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    1cd0:	687b      	ldr	r3, [r7, #4]
    1cd2:	2227      	movs	r2, #39	; 0x27
    1cd4:	2100      	movs	r1, #0
    1cd6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    1cd8:	687b      	ldr	r3, [r7, #4]
    1cda:	2200      	movs	r2, #0
    1cdc:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1cde:	687b      	ldr	r3, [r7, #4]
    1ce0:	2288      	movs	r2, #136	; 0x88
    1ce2:	0352      	lsls	r2, r2, #13
    1ce4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    1ce6:	687b      	ldr	r3, [r7, #4]
    1ce8:	222c      	movs	r2, #44	; 0x2c
    1cea:	2100      	movs	r1, #0
    1cec:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	222d      	movs	r2, #45	; 0x2d
    1cf2:	2100      	movs	r1, #0
    1cf4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1cf6:	687b      	ldr	r3, [r7, #4]
    1cf8:	2200      	movs	r2, #0
    1cfa:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1cfc:	687b      	ldr	r3, [r7, #4]
    1cfe:	2200      	movs	r2, #0
    1d00:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    1d02:	687b      	ldr	r3, [r7, #4]
    1d04:	2200      	movs	r2, #0
    1d06:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    1d08:	687b      	ldr	r3, [r7, #4]
    1d0a:	2200      	movs	r2, #0
    1d0c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1d0e:	687b      	ldr	r3, [r7, #4]
    1d10:	2200      	movs	r2, #0
    1d12:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1d14:	687b      	ldr	r3, [r7, #4]
    1d16:	2200      	movs	r2, #0
    1d18:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1d1a:	687b      	ldr	r3, [r7, #4]
    1d1c:	2200      	movs	r2, #0
    1d1e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1d20:	687b      	ldr	r3, [r7, #4]
    1d22:	2200      	movs	r2, #0
    1d24:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1d26:	687b      	ldr	r3, [r7, #4]
    1d28:	2200      	movs	r2, #0
    1d2a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1d2c:	687b      	ldr	r3, [r7, #4]
    1d2e:	2200      	movs	r2, #0
    1d30:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	2213      	movs	r2, #19
    1d36:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1d38:	687b      	ldr	r3, [r7, #4]
    1d3a:	2200      	movs	r2, #0
    1d3c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	46bd      	mov	sp, r7
    1d42:	b002      	add	sp, #8
    1d44:	bd80      	pop	{r7, pc}
    1d46:	46c0      	nop			; (mov r8, r8)

00001d48 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    1d48:	b580      	push	{r7, lr}
    1d4a:	b084      	sub	sp, #16
    1d4c:	af00      	add	r7, sp, #0
    1d4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d50:	687b      	ldr	r3, [r7, #4]
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	681b      	ldr	r3, [r3, #0]
    1d5a:	0018      	movs	r0, r3
    1d5c:	4b09      	ldr	r3, [pc, #36]	; (1d84 <usart_enable+0x3c>)
    1d5e:	4798      	blx	r3
    1d60:	0003      	movs	r3, r0
    1d62:	0018      	movs	r0, r3
    1d64:	4b08      	ldr	r3, [pc, #32]	; (1d88 <usart_enable+0x40>)
    1d66:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1d68:	687b      	ldr	r3, [r7, #4]
    1d6a:	0018      	movs	r0, r3
    1d6c:	4b07      	ldr	r3, [pc, #28]	; (1d8c <usart_enable+0x44>)
    1d6e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1d70:	68fb      	ldr	r3, [r7, #12]
    1d72:	681b      	ldr	r3, [r3, #0]
    1d74:	2202      	movs	r2, #2
    1d76:	431a      	orrs	r2, r3
    1d78:	68fb      	ldr	r3, [r7, #12]
    1d7a:	601a      	str	r2, [r3, #0]
}
    1d7c:	46c0      	nop			; (mov r8, r8)
    1d7e:	46bd      	mov	sp, r7
    1d80:	b004      	add	sp, #16
    1d82:	bd80      	pop	{r7, pc}
    1d84:	00009ed9 	.word	0x00009ed9
    1d88:	00001c19 	.word	0x00001c19
    1d8c:	00001c65 	.word	0x00001c65

00001d90 <usart_enable_transceiver>:
 * \param[in]  transceiver_type  Transceiver type
 */
static inline void usart_enable_transceiver(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    1d90:	b580      	push	{r7, lr}
    1d92:	b084      	sub	sp, #16
    1d94:	af00      	add	r7, sp, #0
    1d96:	6078      	str	r0, [r7, #4]
    1d98:	000a      	movs	r2, r1
    1d9a:	1cfb      	adds	r3, r7, #3
    1d9c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d9e:	687b      	ldr	r3, [r7, #4]
    1da0:	681b      	ldr	r3, [r3, #0]
    1da2:	60fb      	str	r3, [r7, #12]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1da4:	687b      	ldr	r3, [r7, #4]
    1da6:	0018      	movs	r0, r3
    1da8:	4b13      	ldr	r3, [pc, #76]	; (1df8 <usart_enable_transceiver+0x68>)
    1daa:	4798      	blx	r3

	switch (transceiver_type) {
    1dac:	1cfb      	adds	r3, r7, #3
    1dae:	781b      	ldrb	r3, [r3, #0]
    1db0:	2b00      	cmp	r3, #0
    1db2:	d002      	beq.n	1dba <usart_enable_transceiver+0x2a>
    1db4:	2b01      	cmp	r3, #1
    1db6:	d00b      	beq.n	1dd0 <usart_enable_transceiver+0x40>
    1db8:	e015      	b.n	1de6 <usart_enable_transceiver+0x56>
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    1dba:	68fb      	ldr	r3, [r7, #12]
    1dbc:	685b      	ldr	r3, [r3, #4]
    1dbe:	2280      	movs	r2, #128	; 0x80
    1dc0:	0292      	lsls	r2, r2, #10
    1dc2:	431a      	orrs	r2, r3
    1dc4:	68fb      	ldr	r3, [r7, #12]
    1dc6:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	2201      	movs	r2, #1
    1dcc:	719a      	strb	r2, [r3, #6]
			break;
    1dce:	e00a      	b.n	1de6 <usart_enable_transceiver+0x56>

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    1dd0:	68fb      	ldr	r3, [r7, #12]
    1dd2:	685b      	ldr	r3, [r3, #4]
    1dd4:	2280      	movs	r2, #128	; 0x80
    1dd6:	0252      	lsls	r2, r2, #9
    1dd8:	431a      	orrs	r2, r3
    1dda:	68fb      	ldr	r3, [r7, #12]
    1ddc:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	2201      	movs	r2, #1
    1de2:	71da      	strb	r2, [r3, #7]
			break;
    1de4:	46c0      	nop			; (mov r8, r8)
	}
	_usart_wait_for_sync(module);
    1de6:	687b      	ldr	r3, [r7, #4]
    1de8:	0018      	movs	r0, r3
    1dea:	4b03      	ldr	r3, [pc, #12]	; (1df8 <usart_enable_transceiver+0x68>)
    1dec:	4798      	blx	r3
}
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	46bd      	mov	sp, r7
    1df2:	b004      	add	sp, #16
    1df4:	bd80      	pop	{r7, pc}
    1df6:	46c0      	nop			; (mov r8, r8)
    1df8:	00001c65 	.word	0x00001c65

00001dfc <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    1dfc:	b580      	push	{r7, lr}
    1dfe:	b084      	sub	sp, #16
    1e00:	af00      	add	r7, sp, #0
    1e02:	60f8      	str	r0, [r7, #12]
    1e04:	60b9      	str	r1, [r7, #8]
    1e06:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1e08:	687a      	ldr	r2, [r7, #4]
    1e0a:	68b9      	ldr	r1, [r7, #8]
    1e0c:	68fb      	ldr	r3, [r7, #12]
    1e0e:	0018      	movs	r0, r3
    1e10:	4b05      	ldr	r3, [pc, #20]	; (1e28 <usart_serial_init+0x2c>)
    1e12:	4798      	blx	r3
    1e14:	1e03      	subs	r3, r0, #0
    1e16:	d101      	bne.n	1e1c <usart_serial_init+0x20>
		return true;
    1e18:	2301      	movs	r3, #1
    1e1a:	e000      	b.n	1e1e <usart_serial_init+0x22>
	}
	else {
		return false;
    1e1c:	2300      	movs	r3, #0
	}
}
    1e1e:	0018      	movs	r0, r3
    1e20:	46bd      	mov	sp, r7
    1e22:	b004      	add	sp, #16
    1e24:	bd80      	pop	{r7, pc}
    1e26:	46c0      	nop			; (mov r8, r8)
    1e28:	000005d1 	.word	0x000005d1

00001e2c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    1e2c:	b580      	push	{r7, lr}
    1e2e:	b082      	sub	sp, #8
    1e30:	af00      	add	r7, sp, #0
    1e32:	6078      	str	r0, [r7, #4]
    1e34:	000a      	movs	r2, r1
    1e36:	1cfb      	adds	r3, r7, #3
    1e38:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	1cfb      	adds	r3, r7, #3
    1e3e:	781b      	ldrb	r3, [r3, #0]
    1e40:	b29a      	uxth	r2, r3
    1e42:	687b      	ldr	r3, [r7, #4]
    1e44:	0011      	movs	r1, r2
    1e46:	0018      	movs	r0, r3
    1e48:	4b04      	ldr	r3, [pc, #16]	; (1e5c <usart_serial_putchar+0x30>)
    1e4a:	4798      	blx	r3
    1e4c:	1e03      	subs	r3, r0, #0
    1e4e:	d1f5      	bne.n	1e3c <usart_serial_putchar+0x10>

	return STATUS_OK;
    1e50:	2300      	movs	r3, #0
}
    1e52:	0018      	movs	r0, r3
    1e54:	46bd      	mov	sp, r7
    1e56:	b002      	add	sp, #8
    1e58:	bd80      	pop	{r7, pc}
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	00000845 	.word	0x00000845

00001e60 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1e60:	b580      	push	{r7, lr}
    1e62:	b084      	sub	sp, #16
    1e64:	af00      	add	r7, sp, #0
    1e66:	6078      	str	r0, [r7, #4]
    1e68:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    1e6a:	230e      	movs	r3, #14
    1e6c:	18fb      	adds	r3, r7, r3
    1e6e:	2200      	movs	r2, #0
    1e70:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1e72:	46c0      	nop			; (mov r8, r8)
    1e74:	230e      	movs	r3, #14
    1e76:	18fa      	adds	r2, r7, r3
    1e78:	687b      	ldr	r3, [r7, #4]
    1e7a:	0011      	movs	r1, r2
    1e7c:	0018      	movs	r0, r3
    1e7e:	4b07      	ldr	r3, [pc, #28]	; (1e9c <usart_serial_getchar+0x3c>)
    1e80:	4798      	blx	r3
    1e82:	1e03      	subs	r3, r0, #0
    1e84:	d1f6      	bne.n	1e74 <usart_serial_getchar+0x14>

	*c = temp;
    1e86:	230e      	movs	r3, #14
    1e88:	18fb      	adds	r3, r7, r3
    1e8a:	881b      	ldrh	r3, [r3, #0]
    1e8c:	b2da      	uxtb	r2, r3
    1e8e:	683b      	ldr	r3, [r7, #0]
    1e90:	701a      	strb	r2, [r3, #0]
}
    1e92:	46c0      	nop			; (mov r8, r8)
    1e94:	46bd      	mov	sp, r7
    1e96:	b004      	add	sp, #16
    1e98:	bd80      	pop	{r7, pc}
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	0000089d 	.word	0x0000089d

00001ea0 <usart_serial_write_packet>:
 */
static inline enum status_code usart_serial_write_packet(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1ea0:	b580      	push	{r7, lr}
    1ea2:	b084      	sub	sp, #16
    1ea4:	af00      	add	r7, sp, #0
    1ea6:	60f8      	str	r0, [r7, #12]
    1ea8:	60b9      	str	r1, [r7, #8]
    1eaa:	1dbb      	adds	r3, r7, #6
    1eac:	801a      	strh	r2, [r3, #0]
	return usart_write_buffer_wait(module, tx_data, length);
    1eae:	1dbb      	adds	r3, r7, #6
    1eb0:	881a      	ldrh	r2, [r3, #0]
    1eb2:	68b9      	ldr	r1, [r7, #8]
    1eb4:	68fb      	ldr	r3, [r7, #12]
    1eb6:	0018      	movs	r0, r3
    1eb8:	4b03      	ldr	r3, [pc, #12]	; (1ec8 <usart_serial_write_packet+0x28>)
    1eba:	4798      	blx	r3
    1ebc:	0003      	movs	r3, r0
}
    1ebe:	0018      	movs	r0, r3
    1ec0:	46bd      	mov	sp, r7
    1ec2:	b004      	add	sp, #16
    1ec4:	bd80      	pop	{r7, pc}
    1ec6:	46c0      	nop			; (mov r8, r8)
    1ec8:	0000097d 	.word	0x0000097d

00001ecc <usart_serial_read_packet>:
 */
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1ecc:	b580      	push	{r7, lr}
    1ece:	b084      	sub	sp, #16
    1ed0:	af00      	add	r7, sp, #0
    1ed2:	60f8      	str	r0, [r7, #12]
    1ed4:	60b9      	str	r1, [r7, #8]
    1ed6:	1dbb      	adds	r3, r7, #6
    1ed8:	801a      	strh	r2, [r3, #0]
	return usart_read_buffer_wait(module, rx_data, length);
    1eda:	1dbb      	adds	r3, r7, #6
    1edc:	881a      	ldrh	r2, [r3, #0]
    1ede:	68b9      	ldr	r1, [r7, #8]
    1ee0:	68fb      	ldr	r3, [r7, #12]
    1ee2:	0018      	movs	r0, r3
    1ee4:	4b03      	ldr	r3, [pc, #12]	; (1ef4 <usart_serial_read_packet+0x28>)
    1ee6:	4798      	blx	r3
    1ee8:	0003      	movs	r3, r0
}
    1eea:	0018      	movs	r0, r3
    1eec:	46bd      	mov	sp, r7
    1eee:	b004      	add	sp, #16
    1ef0:	bd80      	pop	{r7, pc}
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	00000a9d 	.word	0x00000a9d

00001ef8 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	b084      	sub	sp, #16
    1efc:	af00      	add	r7, sp, #0
    1efe:	60f8      	str	r0, [r7, #12]
    1f00:	60b9      	str	r1, [r7, #8]
    1f02:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    1f04:	4b10      	ldr	r3, [pc, #64]	; (1f48 <stdio_serial_init+0x50>)
    1f06:	68fa      	ldr	r2, [r7, #12]
    1f08:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1f0a:	4b10      	ldr	r3, [pc, #64]	; (1f4c <stdio_serial_init+0x54>)
    1f0c:	4a10      	ldr	r2, [pc, #64]	; (1f50 <stdio_serial_init+0x58>)
    1f0e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1f10:	4b10      	ldr	r3, [pc, #64]	; (1f54 <stdio_serial_init+0x5c>)
    1f12:	4a11      	ldr	r2, [pc, #68]	; (1f58 <stdio_serial_init+0x60>)
    1f14:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    1f16:	687a      	ldr	r2, [r7, #4]
    1f18:	68b9      	ldr	r1, [r7, #8]
    1f1a:	68fb      	ldr	r3, [r7, #12]
    1f1c:	0018      	movs	r0, r3
    1f1e:	4b0f      	ldr	r3, [pc, #60]	; (1f5c <stdio_serial_init+0x64>)
    1f20:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1f22:	4b0f      	ldr	r3, [pc, #60]	; (1f60 <stdio_serial_init+0x68>)
    1f24:	681b      	ldr	r3, [r3, #0]
    1f26:	689b      	ldr	r3, [r3, #8]
    1f28:	2100      	movs	r1, #0
    1f2a:	0018      	movs	r0, r3
    1f2c:	4b0d      	ldr	r3, [pc, #52]	; (1f64 <stdio_serial_init+0x6c>)
    1f2e:	4798      	blx	r3
	setbuf(stdin, NULL);
    1f30:	4b0b      	ldr	r3, [pc, #44]	; (1f60 <stdio_serial_init+0x68>)
    1f32:	681b      	ldr	r3, [r3, #0]
    1f34:	685b      	ldr	r3, [r3, #4]
    1f36:	2100      	movs	r1, #0
    1f38:	0018      	movs	r0, r3
    1f3a:	4b0a      	ldr	r3, [pc, #40]	; (1f64 <stdio_serial_init+0x6c>)
    1f3c:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	46bd      	mov	sp, r7
    1f42:	b004      	add	sp, #16
    1f44:	bd80      	pop	{r7, pc}
    1f46:	46c0      	nop			; (mov r8, r8)
    1f48:	20000f34 	.word	0x20000f34
    1f4c:	20000f30 	.word	0x20000f30
    1f50:	00001e2d 	.word	0x00001e2d
    1f54:	20000f2c 	.word	0x20000f2c
    1f58:	00001e61 	.word	0x00001e61
    1f5c:	00001dfd 	.word	0x00001dfd
    1f60:	20000074 	.word	0x20000074
    1f64:	0000c301 	.word	0x0000c301

00001f68 <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	b090      	sub	sp, #64	; 0x40
    1f6c:	af00      	add	r7, sp, #0
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
    1f6e:	003b      	movs	r3, r7
    1f70:	0018      	movs	r0, r3
    1f72:	4b1f      	ldr	r3, [pc, #124]	; (1ff0 <sio2host_init+0x88>)
    1f74:	4798      	blx	r3
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    1f76:	003b      	movs	r3, r7
    1f78:	22c4      	movs	r2, #196	; 0xc4
    1f7a:	0392      	lsls	r2, r2, #14
    1f7c:	60da      	str	r2, [r3, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    1f7e:	003b      	movs	r3, r7
    1f80:	2201      	movs	r2, #1
    1f82:	4252      	negs	r2, r2
    1f84:	631a      	str	r2, [r3, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    1f86:	003b      	movs	r3, r7
    1f88:	2201      	movs	r2, #1
    1f8a:	4252      	negs	r2, r2
    1f8c:	635a      	str	r2, [r3, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    1f8e:	003b      	movs	r3, r7
    1f90:	4a18      	ldr	r2, [pc, #96]	; (1ff4 <sio2host_init+0x8c>)
    1f92:	639a      	str	r2, [r3, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    1f94:	003b      	movs	r3, r7
    1f96:	4a18      	ldr	r2, [pc, #96]	; (1ff8 <sio2host_init+0x90>)
    1f98:	63da      	str	r2, [r3, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    1f9a:	003b      	movs	r3, r7
    1f9c:	2296      	movs	r2, #150	; 0x96
    1f9e:	0192      	lsls	r2, r2, #6
    1fa0:	621a      	str	r2, [r3, #32]
	host_uart_config.generator_source = GCLK_GENERATOR_3;
    1fa2:	003b      	movs	r3, r7
    1fa4:	222d      	movs	r2, #45	; 0x2d
    1fa6:	2103      	movs	r1, #3
    1fa8:	5499      	strb	r1, [r3, r2]
	stdio_serial_init(&host_uart_module, USART_HOST, &host_uart_config);
    1faa:	003a      	movs	r2, r7
    1fac:	4913      	ldr	r1, [pc, #76]	; (1ffc <sio2host_init+0x94>)
    1fae:	4b14      	ldr	r3, [pc, #80]	; (2000 <sio2host_init+0x98>)
    1fb0:	0018      	movs	r0, r3
    1fb2:	4b14      	ldr	r3, [pc, #80]	; (2004 <sio2host_init+0x9c>)
    1fb4:	4798      	blx	r3
	usart_enable(&host_uart_module);
    1fb6:	4b12      	ldr	r3, [pc, #72]	; (2000 <sio2host_init+0x98>)
    1fb8:	0018      	movs	r0, r3
    1fba:	4b13      	ldr	r3, [pc, #76]	; (2008 <sio2host_init+0xa0>)
    1fbc:	4798      	blx	r3
	/* Enable transceivers */
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
    1fbe:	4b10      	ldr	r3, [pc, #64]	; (2000 <sio2host_init+0x98>)
    1fc0:	2101      	movs	r1, #1
    1fc2:	0018      	movs	r0, r3
    1fc4:	4b11      	ldr	r3, [pc, #68]	; (200c <sio2host_init+0xa4>)
    1fc6:	4798      	blx	r3
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
    1fc8:	4b0d      	ldr	r3, [pc, #52]	; (2000 <sio2host_init+0x98>)
    1fca:	2100      	movs	r1, #0
    1fcc:	0018      	movs	r0, r3
    1fce:	4b0f      	ldr	r3, [pc, #60]	; (200c <sio2host_init+0xa4>)
    1fd0:	4798      	blx	r3
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
    1fd2:	4b0f      	ldr	r3, [pc, #60]	; (2010 <sio2host_init+0xa8>)
    1fd4:	0019      	movs	r1, r3
    1fd6:	2000      	movs	r0, #0
    1fd8:	4b0e      	ldr	r3, [pc, #56]	; (2014 <sio2host_init+0xac>)
    1fda:	4798      	blx	r3
    1fdc:	4b07      	ldr	r3, [pc, #28]	; (1ffc <sio2host_init+0x94>)
    1fde:	2204      	movs	r2, #4
    1fe0:	759a      	strb	r2, [r3, #22]
    1fe2:	2009      	movs	r0, #9
    1fe4:	4b0c      	ldr	r3, [pc, #48]	; (2018 <sio2host_init+0xb0>)
    1fe6:	4798      	blx	r3
}
    1fe8:	46c0      	nop			; (mov r8, r8)
    1fea:	46bd      	mov	sp, r7
    1fec:	b010      	add	sp, #64	; 0x40
    1fee:	bd80      	pop	{r7, pc}
    1ff0:	00001c89 	.word	0x00001c89
    1ff4:	00060003 	.word	0x00060003
    1ff8:	00070003 	.word	0x00070003
    1ffc:	42000800 	.word	0x42000800
    2000:	200000b0 	.word	0x200000b0
    2004:	00001ef9 	.word	0x00001ef9
    2008:	00001d49 	.word	0x00001d49
    200c:	00001d91 	.word	0x00001d91
    2010:	00002181 	.word	0x00002181
    2014:	00009e6d 	.word	0x00009e6d
    2018:	00001c19 	.word	0x00001c19

0000201c <sio2host_tx>:
		usart_disable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
		usart_disable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
#endif	
}
uint8_t sio2host_tx(uint8_t *data, uint8_t length)
{
    201c:	b590      	push	{r4, r7, lr}
    201e:	b085      	sub	sp, #20
    2020:	af00      	add	r7, sp, #0
    2022:	6078      	str	r0, [r7, #4]
    2024:	000a      	movs	r2, r1
    2026:	1cfb      	adds	r3, r7, #3
    2028:	701a      	strb	r2, [r3, #0]
#endif /*SAMD || SAMR21 || SAML21 */

	do {
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
		status
			= usart_serial_write_packet(&host_uart_module,
    202a:	1cfb      	adds	r3, r7, #3
    202c:	781b      	ldrb	r3, [r3, #0]
    202e:	b29a      	uxth	r2, r3
    2030:	230f      	movs	r3, #15
    2032:	18fc      	adds	r4, r7, r3
    2034:	6879      	ldr	r1, [r7, #4]
    2036:	4b08      	ldr	r3, [pc, #32]	; (2058 <sio2host_tx+0x3c>)
    2038:	0018      	movs	r0, r3
    203a:	4b08      	ldr	r3, [pc, #32]	; (205c <sio2host_tx+0x40>)
    203c:	4798      	blx	r3
    203e:	0003      	movs	r3, r0
    2040:	7023      	strb	r3, [r4, #0]
#else
	    status = usart_serial_write_packet(USART_HOST,
				(const uint8_t *)data,
				length);
#endif
	} while (status != STATUS_OK);
    2042:	230f      	movs	r3, #15
    2044:	18fb      	adds	r3, r7, r3
    2046:	781b      	ldrb	r3, [r3, #0]
    2048:	2b00      	cmp	r3, #0
    204a:	d1ee      	bne.n	202a <sio2host_tx+0xe>
	return length;
    204c:	1cfb      	adds	r3, r7, #3
    204e:	781b      	ldrb	r3, [r3, #0]
}
    2050:	0018      	movs	r0, r3
    2052:	46bd      	mov	sp, r7
    2054:	b005      	add	sp, #20
    2056:	bd90      	pop	{r4, r7, pc}
    2058:	200000b0 	.word	0x200000b0
    205c:	00001ea1 	.word	0x00001ea1

00002060 <sio2host_rx>:

uint8_t sio2host_rx(uint8_t *data, uint8_t max_length)
{
    2060:	b580      	push	{r7, lr}
    2062:	b084      	sub	sp, #16
    2064:	af00      	add	r7, sp, #0
    2066:	6078      	str	r0, [r7, #4]
    2068:	000a      	movs	r2, r1
    206a:	1cfb      	adds	r3, r7, #3
    206c:	701a      	strb	r2, [r3, #0]
	uint8_t data_received = 0;
    206e:	230f      	movs	r3, #15
    2070:	18fb      	adds	r3, r7, r3
    2072:	2200      	movs	r2, #0
    2074:	701a      	strb	r2, [r3, #0]
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    2076:	4b35      	ldr	r3, [pc, #212]	; (214c <sio2host_rx+0xec>)
    2078:	781a      	ldrb	r2, [r3, #0]
    207a:	4b35      	ldr	r3, [pc, #212]	; (2150 <sio2host_rx+0xf0>)
    207c:	781b      	ldrb	r3, [r3, #0]
    207e:	429a      	cmp	r2, r3
    2080:	d308      	bcc.n	2094 <sio2host_rx+0x34>
	{
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    2082:	4b32      	ldr	r3, [pc, #200]	; (214c <sio2host_rx+0xec>)
    2084:	781a      	ldrb	r2, [r3, #0]
    2086:	4b32      	ldr	r3, [pc, #200]	; (2150 <sio2host_rx+0xf0>)
    2088:	781b      	ldrb	r3, [r3, #0]
    208a:	1ad3      	subs	r3, r2, r3
    208c:	b2da      	uxtb	r2, r3
    208e:	4b31      	ldr	r3, [pc, #196]	; (2154 <sio2host_rx+0xf4>)
    2090:	701a      	strb	r2, [r3, #0]
    2092:	e009      	b.n	20a8 <sio2host_rx+0x48>
	}
	else
	{
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    2094:	4b2d      	ldr	r3, [pc, #180]	; (214c <sio2host_rx+0xec>)
    2096:	781a      	ldrb	r2, [r3, #0]
    2098:	4b2d      	ldr	r3, [pc, #180]	; (2150 <sio2host_rx+0xf0>)
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	1ad3      	subs	r3, r2, r3
    209e:	b2db      	uxtb	r3, r3
    20a0:	3b64      	subs	r3, #100	; 0x64
    20a2:	b2da      	uxtb	r2, r3
    20a4:	4b2b      	ldr	r3, [pc, #172]	; (2154 <sio2host_rx+0xf4>)
    20a6:	701a      	strb	r2, [r3, #0]
	}
	
	if (0 == serial_rx_count) {
    20a8:	4b2a      	ldr	r3, [pc, #168]	; (2154 <sio2host_rx+0xf4>)
    20aa:	781b      	ldrb	r3, [r3, #0]
    20ac:	2b00      	cmp	r3, #0
    20ae:	d101      	bne.n	20b4 <sio2host_rx+0x54>
		return 0;
    20b0:	2300      	movs	r3, #0
    20b2:	e046      	b.n	2142 <sio2host_rx+0xe2>
	}

	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    20b4:	4b27      	ldr	r3, [pc, #156]	; (2154 <sio2host_rx+0xf4>)
    20b6:	781b      	ldrb	r3, [r3, #0]
    20b8:	2b9b      	cmp	r3, #155	; 0x9b
    20ba:	d90e      	bls.n	20da <sio2host_rx+0x7a>
		/*
		 * Bytes between head and tail are overwritten by new data.
		 * The oldest data in buffer is the one to which the tail is
		 * pointing. So reading operation should start from the tail.
		 */
		serial_rx_buf_head = serial_rx_buf_tail;
    20bc:	4b23      	ldr	r3, [pc, #140]	; (214c <sio2host_rx+0xec>)
    20be:	781a      	ldrb	r2, [r3, #0]
    20c0:	4b23      	ldr	r3, [pc, #140]	; (2150 <sio2host_rx+0xf0>)
    20c2:	701a      	strb	r2, [r3, #0]
		/*
		 * This is a buffer overflow case. But still only the number of
		 * bytes equivalent to
		 * full buffer size are useful.
		 */
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    20c4:	4b23      	ldr	r3, [pc, #140]	; (2154 <sio2host_rx+0xf4>)
    20c6:	229c      	movs	r2, #156	; 0x9c
    20c8:	701a      	strb	r2, [r3, #0]

		/* Bytes received is more than or equal to buffer. */
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    20ca:	1cfb      	adds	r3, r7, #3
    20cc:	781b      	ldrb	r3, [r3, #0]
    20ce:	2b9b      	cmp	r3, #155	; 0x9b
    20d0:	d90d      	bls.n	20ee <sio2host_rx+0x8e>
			 * Requested receive length (max_length) is more than
			 * the
			 * max size of receive buffer, but at max the full
			 * buffer can be read.
			 */
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    20d2:	1cfb      	adds	r3, r7, #3
    20d4:	229c      	movs	r2, #156	; 0x9c
    20d6:	701a      	strb	r2, [r3, #0]
    20d8:	e009      	b.n	20ee <sio2host_rx+0x8e>
		}
	} else {
		/* Bytes received is less than receive buffer maximum length. */
		if (max_length > serial_rx_count) {
    20da:	4b1e      	ldr	r3, [pc, #120]	; (2154 <sio2host_rx+0xf4>)
    20dc:	781b      	ldrb	r3, [r3, #0]
    20de:	1cfa      	adds	r2, r7, #3
    20e0:	7812      	ldrb	r2, [r2, #0]
    20e2:	429a      	cmp	r2, r3
    20e4:	d903      	bls.n	20ee <sio2host_rx+0x8e>
			 * the data
			 * present in receive buffer. Hence only the number of
			 * bytes
			 * present in receive buffer are read.
			 */
			max_length = serial_rx_count;
    20e6:	1cfb      	adds	r3, r7, #3
    20e8:	4a1a      	ldr	r2, [pc, #104]	; (2154 <sio2host_rx+0xf4>)
    20ea:	7812      	ldrb	r2, [r2, #0]
    20ec:	701a      	strb	r2, [r3, #0]
		}
	}

	data_received = max_length;
    20ee:	230f      	movs	r3, #15
    20f0:	18fb      	adds	r3, r7, r3
    20f2:	1cfa      	adds	r2, r7, #3
    20f4:	7812      	ldrb	r2, [r2, #0]
    20f6:	701a      	strb	r2, [r3, #0]
	while (max_length > 0) {
    20f8:	e01c      	b.n	2134 <sio2host_rx+0xd4>
		/* Start to copy from head. */
		*data = serial_rx_buf[serial_rx_buf_head];
    20fa:	4b15      	ldr	r3, [pc, #84]	; (2150 <sio2host_rx+0xf0>)
    20fc:	781b      	ldrb	r3, [r3, #0]
    20fe:	001a      	movs	r2, r3
    2100:	4b15      	ldr	r3, [pc, #84]	; (2158 <sio2host_rx+0xf8>)
    2102:	5c9a      	ldrb	r2, [r3, r2]
    2104:	687b      	ldr	r3, [r7, #4]
    2106:	701a      	strb	r2, [r3, #0]
		data++;
    2108:	687b      	ldr	r3, [r7, #4]
    210a:	3301      	adds	r3, #1
    210c:	607b      	str	r3, [r7, #4]
		max_length--;
    210e:	1cfb      	adds	r3, r7, #3
    2110:	781a      	ldrb	r2, [r3, #0]
    2112:	1cfb      	adds	r3, r7, #3
    2114:	3a01      	subs	r2, #1
    2116:	701a      	strb	r2, [r3, #0]
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    2118:	4b0d      	ldr	r3, [pc, #52]	; (2150 <sio2host_rx+0xf0>)
    211a:	781b      	ldrb	r3, [r3, #0]
    211c:	2b9b      	cmp	r3, #155	; 0x9b
    211e:	d103      	bne.n	2128 <sio2host_rx+0xc8>
			serial_rx_buf_head = 0;
    2120:	4b0b      	ldr	r3, [pc, #44]	; (2150 <sio2host_rx+0xf0>)
    2122:	2200      	movs	r2, #0
    2124:	701a      	strb	r2, [r3, #0]
    2126:	e005      	b.n	2134 <sio2host_rx+0xd4>
		}
		else
		{
			serial_rx_buf_head++;
    2128:	4b09      	ldr	r3, [pc, #36]	; (2150 <sio2host_rx+0xf0>)
    212a:	781b      	ldrb	r3, [r3, #0]
    212c:	3301      	adds	r3, #1
    212e:	b2da      	uxtb	r2, r3
    2130:	4b07      	ldr	r3, [pc, #28]	; (2150 <sio2host_rx+0xf0>)
    2132:	701a      	strb	r2, [r3, #0]
			max_length = serial_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
    2134:	1cfb      	adds	r3, r7, #3
    2136:	781b      	ldrb	r3, [r3, #0]
    2138:	2b00      	cmp	r3, #0
    213a:	d1de      	bne.n	20fa <sio2host_rx+0x9a>
		else
		{
			serial_rx_buf_head++;
		}
	}
	return data_received;
    213c:	230f      	movs	r3, #15
    213e:	18fb      	adds	r3, r7, r3
    2140:	781b      	ldrb	r3, [r3, #0]
}
    2142:	0018      	movs	r0, r3
    2144:	46bd      	mov	sp, r7
    2146:	b004      	add	sp, #16
    2148:	bd80      	pop	{r7, pc}
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	20000181 	.word	0x20000181
    2150:	20000180 	.word	0x20000180
    2154:	20000182 	.word	0x20000182
    2158:	200000e4 	.word	0x200000e4

0000215c <sio2host_putchar>:
	}
	return c;
}

void sio2host_putchar(uint8_t ch)
{
    215c:	b580      	push	{r7, lr}
    215e:	b082      	sub	sp, #8
    2160:	af00      	add	r7, sp, #0
    2162:	0002      	movs	r2, r0
    2164:	1dfb      	adds	r3, r7, #7
    2166:	701a      	strb	r2, [r3, #0]
	sio2host_tx(&ch, 1);
    2168:	1dfb      	adds	r3, r7, #7
    216a:	2101      	movs	r1, #1
    216c:	0018      	movs	r0, r3
    216e:	4b03      	ldr	r3, [pc, #12]	; (217c <sio2host_putchar+0x20>)
    2170:	4798      	blx	r3
}
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	46bd      	mov	sp, r7
    2176:	b002      	add	sp, #8
    2178:	bd80      	pop	{r7, pc}
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	0000201d 	.word	0x0000201d

00002180 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    2180:	b580      	push	{r7, lr}
    2182:	b084      	sub	sp, #16
    2184:	af00      	add	r7, sp, #0
    2186:	0002      	movs	r2, r0
    2188:	1dfb      	adds	r3, r7, #7
    218a:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_serial_read_packet(&host_uart_module, &temp, 1);
    218c:	230f      	movs	r3, #15
    218e:	18f9      	adds	r1, r7, r3
    2190:	4b15      	ldr	r3, [pc, #84]	; (21e8 <USART_HOST_ISR_VECT+0x68>)
    2192:	2201      	movs	r2, #1
    2194:	0018      	movs	r0, r3
    2196:	4b15      	ldr	r3, [pc, #84]	; (21ec <USART_HOST_ISR_VECT+0x6c>)
    2198:	4798      	blx	r3
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    219a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    219c:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    21a0:	4b13      	ldr	r3, [pc, #76]	; (21f0 <USART_HOST_ISR_VECT+0x70>)
    21a2:	2200      	movs	r2, #0
    21a4:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    21a6:	4b13      	ldr	r3, [pc, #76]	; (21f4 <USART_HOST_ISR_VECT+0x74>)
    21a8:	781b      	ldrb	r3, [r3, #0]
    21aa:	001a      	movs	r2, r3
    21ac:	230f      	movs	r3, #15
    21ae:	18fb      	adds	r3, r7, r3
    21b0:	7819      	ldrb	r1, [r3, #0]
    21b2:	4b11      	ldr	r3, [pc, #68]	; (21f8 <USART_HOST_ISR_VECT+0x78>)
    21b4:	5499      	strb	r1, [r3, r2]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    21b6:	4b0f      	ldr	r3, [pc, #60]	; (21f4 <USART_HOST_ISR_VECT+0x74>)
    21b8:	781b      	ldrb	r3, [r3, #0]
    21ba:	2b9b      	cmp	r3, #155	; 0x9b
    21bc:	d103      	bne.n	21c6 <USART_HOST_ISR_VECT+0x46>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
    21be:	4b0d      	ldr	r3, [pc, #52]	; (21f4 <USART_HOST_ISR_VECT+0x74>)
    21c0:	2200      	movs	r2, #0
    21c2:	701a      	strb	r2, [r3, #0]
    21c4:	e005      	b.n	21d2 <USART_HOST_ISR_VECT+0x52>
	} else {
		serial_rx_buf_tail++;
    21c6:	4b0b      	ldr	r3, [pc, #44]	; (21f4 <USART_HOST_ISR_VECT+0x74>)
    21c8:	781b      	ldrb	r3, [r3, #0]
    21ca:	3301      	adds	r3, #1
    21cc:	b2da      	uxtb	r2, r3
    21ce:	4b09      	ldr	r3, [pc, #36]	; (21f4 <USART_HOST_ISR_VECT+0x74>)
    21d0:	701a      	strb	r2, [r3, #0]
	}

	cpu_irq_enable();
    21d2:	4b07      	ldr	r3, [pc, #28]	; (21f0 <USART_HOST_ISR_VECT+0x70>)
    21d4:	2201      	movs	r2, #1
    21d6:	701a      	strb	r2, [r3, #0]
    21d8:	f3bf 8f5f 	dmb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    21dc:	b662      	cpsie	i
}
    21de:	46c0      	nop			; (mov r8, r8)
    21e0:	46bd      	mov	sp, r7
    21e2:	b004      	add	sp, #16
    21e4:	bd80      	pop	{r7, pc}
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	200000b0 	.word	0x200000b0
    21ec:	00001ecd 	.word	0x00001ecd
    21f0:	20000010 	.word	0x20000010
    21f4:	20000181 	.word	0x20000181
    21f8:	200000e4 	.word	0x200000e4

000021fc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    21fc:	b580      	push	{r7, lr}
    21fe:	b082      	sub	sp, #8
    2200:	af00      	add	r7, sp, #0
    2202:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2204:	687b      	ldr	r3, [r7, #4]
    2206:	2200      	movs	r2, #0
    2208:	701a      	strb	r2, [r3, #0]
}
    220a:	46c0      	nop			; (mov r8, r8)
    220c:	46bd      	mov	sp, r7
    220e:	b002      	add	sp, #8
    2210:	bd80      	pop	{r7, pc}
    2212:	46c0      	nop			; (mov r8, r8)

00002214 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2214:	b580      	push	{r7, lr}
    2216:	b082      	sub	sp, #8
    2218:	af00      	add	r7, sp, #0
    221a:	0002      	movs	r2, r0
    221c:	6039      	str	r1, [r7, #0]
    221e:	1dfb      	adds	r3, r7, #7
    2220:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2222:	1dfb      	adds	r3, r7, #7
    2224:	781b      	ldrb	r3, [r3, #0]
    2226:	2b01      	cmp	r3, #1
    2228:	d00a      	beq.n	2240 <system_apb_clock_set_mask+0x2c>
    222a:	2b02      	cmp	r3, #2
    222c:	d00f      	beq.n	224e <system_apb_clock_set_mask+0x3a>
    222e:	2b00      	cmp	r3, #0
    2230:	d114      	bne.n	225c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2232:	4b0e      	ldr	r3, [pc, #56]	; (226c <system_apb_clock_set_mask+0x58>)
    2234:	4a0d      	ldr	r2, [pc, #52]	; (226c <system_apb_clock_set_mask+0x58>)
    2236:	6991      	ldr	r1, [r2, #24]
    2238:	683a      	ldr	r2, [r7, #0]
    223a:	430a      	orrs	r2, r1
    223c:	619a      	str	r2, [r3, #24]
			break;
    223e:	e00f      	b.n	2260 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2240:	4b0a      	ldr	r3, [pc, #40]	; (226c <system_apb_clock_set_mask+0x58>)
    2242:	4a0a      	ldr	r2, [pc, #40]	; (226c <system_apb_clock_set_mask+0x58>)
    2244:	69d1      	ldr	r1, [r2, #28]
    2246:	683a      	ldr	r2, [r7, #0]
    2248:	430a      	orrs	r2, r1
    224a:	61da      	str	r2, [r3, #28]
			break;
    224c:	e008      	b.n	2260 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    224e:	4b07      	ldr	r3, [pc, #28]	; (226c <system_apb_clock_set_mask+0x58>)
    2250:	4a06      	ldr	r2, [pc, #24]	; (226c <system_apb_clock_set_mask+0x58>)
    2252:	6a11      	ldr	r1, [r2, #32]
    2254:	683a      	ldr	r2, [r7, #0]
    2256:	430a      	orrs	r2, r1
    2258:	621a      	str	r2, [r3, #32]
			break;
    225a:	e001      	b.n	2260 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    225c:	2317      	movs	r3, #23
    225e:	e000      	b.n	2262 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2260:	2300      	movs	r3, #0
}
    2262:	0018      	movs	r0, r3
    2264:	46bd      	mov	sp, r7
    2266:	b002      	add	sp, #8
    2268:	bd80      	pop	{r7, pc}
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	40000400 	.word	0x40000400

00002270 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2270:	b580      	push	{r7, lr}
    2272:	b082      	sub	sp, #8
    2274:	af00      	add	r7, sp, #0
    2276:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	2280      	movs	r2, #128	; 0x80
    227c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    227e:	687b      	ldr	r3, [r7, #4]
    2280:	2200      	movs	r2, #0
    2282:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2284:	687b      	ldr	r3, [r7, #4]
    2286:	2201      	movs	r2, #1
    2288:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	2200      	movs	r2, #0
    228e:	70da      	strb	r2, [r3, #3]
}
    2290:	46c0      	nop			; (mov r8, r8)
    2292:	46bd      	mov	sp, r7
    2294:	b002      	add	sp, #8
    2296:	bd80      	pop	{r7, pc}

00002298 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    2298:	b580      	push	{r7, lr}
    229a:	b082      	sub	sp, #8
    229c:	af00      	add	r7, sp, #0
    229e:	0002      	movs	r2, r0
    22a0:	1dfb      	adds	r3, r7, #7
    22a2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    22a4:	4b06      	ldr	r3, [pc, #24]	; (22c0 <system_interrupt_enable+0x28>)
    22a6:	1dfa      	adds	r2, r7, #7
    22a8:	7812      	ldrb	r2, [r2, #0]
    22aa:	0011      	movs	r1, r2
    22ac:	221f      	movs	r2, #31
    22ae:	400a      	ands	r2, r1
    22b0:	2101      	movs	r1, #1
    22b2:	4091      	lsls	r1, r2
    22b4:	000a      	movs	r2, r1
    22b6:	601a      	str	r2, [r3, #0]
}
    22b8:	46c0      	nop			; (mov r8, r8)
    22ba:	46bd      	mov	sp, r7
    22bc:	b002      	add	sp, #8
    22be:	bd80      	pop	{r7, pc}
    22c0:	e000e100 	.word	0xe000e100

000022c4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    22c4:	b580      	push	{r7, lr}
    22c6:	b084      	sub	sp, #16
    22c8:	af00      	add	r7, sp, #0
    22ca:	0002      	movs	r2, r0
    22cc:	1dfb      	adds	r3, r7, #7
    22ce:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    22d0:	230f      	movs	r3, #15
    22d2:	18fb      	adds	r3, r7, r3
    22d4:	1dfa      	adds	r2, r7, #7
    22d6:	7812      	ldrb	r2, [r2, #0]
    22d8:	0952      	lsrs	r2, r2, #5
    22da:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    22dc:	230f      	movs	r3, #15
    22de:	18fb      	adds	r3, r7, r3
    22e0:	781b      	ldrb	r3, [r3, #0]
    22e2:	2b00      	cmp	r3, #0
    22e4:	d10c      	bne.n	2300 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    22e6:	4b09      	ldr	r3, [pc, #36]	; (230c <_extint_get_eic_from_channel+0x48>)
    22e8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    22ea:	230f      	movs	r3, #15
    22ec:	18fb      	adds	r3, r7, r3
    22ee:	781b      	ldrb	r3, [r3, #0]
    22f0:	009b      	lsls	r3, r3, #2
    22f2:	2210      	movs	r2, #16
    22f4:	4694      	mov	ip, r2
    22f6:	44bc      	add	ip, r7
    22f8:	4463      	add	r3, ip
    22fa:	3b08      	subs	r3, #8
    22fc:	681b      	ldr	r3, [r3, #0]
    22fe:	e000      	b.n	2302 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    2300:	2300      	movs	r3, #0
	}
}
    2302:	0018      	movs	r0, r3
    2304:	46bd      	mov	sp, r7
    2306:	b004      	add	sp, #16
    2308:	bd80      	pop	{r7, pc}
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	40001800 	.word	0x40001800

00002310 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    2310:	b580      	push	{r7, lr}
    2312:	b082      	sub	sp, #8
    2314:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    2316:	4b0f      	ldr	r3, [pc, #60]	; (2354 <extint_is_syncing+0x44>)
    2318:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    231a:	2300      	movs	r3, #0
    231c:	607b      	str	r3, [r7, #4]
    231e:	e011      	b.n	2344 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2320:	687b      	ldr	r3, [r7, #4]
    2322:	009b      	lsls	r3, r3, #2
    2324:	2208      	movs	r2, #8
    2326:	4694      	mov	ip, r2
    2328:	44bc      	add	ip, r7
    232a:	4463      	add	r3, ip
    232c:	3b08      	subs	r3, #8
    232e:	681b      	ldr	r3, [r3, #0]
    2330:	785b      	ldrb	r3, [r3, #1]
    2332:	b2db      	uxtb	r3, r3
    2334:	b25b      	sxtb	r3, r3
    2336:	2b00      	cmp	r3, #0
    2338:	da01      	bge.n	233e <extint_is_syncing+0x2e>
			return true;
    233a:	2301      	movs	r3, #1
    233c:	e006      	b.n	234c <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	3301      	adds	r3, #1
    2342:	607b      	str	r3, [r7, #4]
    2344:	687b      	ldr	r3, [r7, #4]
    2346:	2b00      	cmp	r3, #0
    2348:	d0ea      	beq.n	2320 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    234a:	2300      	movs	r3, #0
}
    234c:	0018      	movs	r0, r3
    234e:	46bd      	mov	sp, r7
    2350:	b002      	add	sp, #8
    2352:	bd80      	pop	{r7, pc}
    2354:	40001800 	.word	0x40001800

00002358 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    2358:	b580      	push	{r7, lr}
    235a:	b084      	sub	sp, #16
    235c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    235e:	4b2d      	ldr	r3, [pc, #180]	; (2414 <_system_extint_init+0xbc>)
    2360:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    2362:	2140      	movs	r1, #64	; 0x40
    2364:	2000      	movs	r0, #0
    2366:	4b2c      	ldr	r3, [pc, #176]	; (2418 <_system_extint_init+0xc0>)
    2368:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    236a:	003b      	movs	r3, r7
    236c:	0018      	movs	r0, r3
    236e:	4b2b      	ldr	r3, [pc, #172]	; (241c <_system_extint_init+0xc4>)
    2370:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    2372:	003b      	movs	r3, r7
    2374:	2200      	movs	r2, #0
    2376:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    2378:	003b      	movs	r3, r7
    237a:	0019      	movs	r1, r3
    237c:	2005      	movs	r0, #5
    237e:	4b28      	ldr	r3, [pc, #160]	; (2420 <_system_extint_init+0xc8>)
    2380:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    2382:	2005      	movs	r0, #5
    2384:	4b27      	ldr	r3, [pc, #156]	; (2424 <_system_extint_init+0xcc>)
    2386:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2388:	2300      	movs	r3, #0
    238a:	60fb      	str	r3, [r7, #12]
    238c:	e018      	b.n	23c0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    238e:	68fb      	ldr	r3, [r7, #12]
    2390:	009b      	lsls	r3, r3, #2
    2392:	2210      	movs	r2, #16
    2394:	4694      	mov	ip, r2
    2396:	44bc      	add	ip, r7
    2398:	4463      	add	r3, ip
    239a:	3b0c      	subs	r3, #12
    239c:	681a      	ldr	r2, [r3, #0]
    239e:	68fb      	ldr	r3, [r7, #12]
    23a0:	009b      	lsls	r3, r3, #2
    23a2:	2110      	movs	r1, #16
    23a4:	468c      	mov	ip, r1
    23a6:	44bc      	add	ip, r7
    23a8:	4463      	add	r3, ip
    23aa:	3b0c      	subs	r3, #12
    23ac:	681b      	ldr	r3, [r3, #0]
    23ae:	781b      	ldrb	r3, [r3, #0]
    23b0:	b2db      	uxtb	r3, r3
    23b2:	2101      	movs	r1, #1
    23b4:	430b      	orrs	r3, r1
    23b6:	b2db      	uxtb	r3, r3
    23b8:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    23ba:	68fb      	ldr	r3, [r7, #12]
    23bc:	3301      	adds	r3, #1
    23be:	60fb      	str	r3, [r7, #12]
    23c0:	68fb      	ldr	r3, [r7, #12]
    23c2:	2b00      	cmp	r3, #0
    23c4:	d0e3      	beq.n	238e <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    23c6:	46c0      	nop			; (mov r8, r8)
    23c8:	4b17      	ldr	r3, [pc, #92]	; (2428 <_system_extint_init+0xd0>)
    23ca:	4798      	blx	r3
    23cc:	1e03      	subs	r3, r0, #0
    23ce:	d1fb      	bne.n	23c8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    23d0:	230b      	movs	r3, #11
    23d2:	18fb      	adds	r3, r7, r3
    23d4:	2200      	movs	r2, #0
    23d6:	701a      	strb	r2, [r3, #0]
    23d8:	e00d      	b.n	23f6 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    23da:	230b      	movs	r3, #11
    23dc:	18fb      	adds	r3, r7, r3
    23de:	781a      	ldrb	r2, [r3, #0]
    23e0:	4b12      	ldr	r3, [pc, #72]	; (242c <_system_extint_init+0xd4>)
    23e2:	0092      	lsls	r2, r2, #2
    23e4:	2100      	movs	r1, #0
    23e6:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    23e8:	230b      	movs	r3, #11
    23ea:	18fb      	adds	r3, r7, r3
    23ec:	781a      	ldrb	r2, [r3, #0]
    23ee:	230b      	movs	r3, #11
    23f0:	18fb      	adds	r3, r7, r3
    23f2:	3201      	adds	r2, #1
    23f4:	701a      	strb	r2, [r3, #0]
    23f6:	230b      	movs	r3, #11
    23f8:	18fb      	adds	r3, r7, r3
    23fa:	781b      	ldrb	r3, [r3, #0]
    23fc:	2b0f      	cmp	r3, #15
    23fe:	d9ec      	bls.n	23da <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    2400:	2004      	movs	r0, #4
    2402:	4b0b      	ldr	r3, [pc, #44]	; (2430 <_system_extint_init+0xd8>)
    2404:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    2406:	4b0b      	ldr	r3, [pc, #44]	; (2434 <_system_extint_init+0xdc>)
    2408:	4798      	blx	r3
}
    240a:	46c0      	nop			; (mov r8, r8)
    240c:	46bd      	mov	sp, r7
    240e:	b004      	add	sp, #16
    2410:	bd80      	pop	{r7, pc}
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	40001800 	.word	0x40001800
    2418:	00002215 	.word	0x00002215
    241c:	000021fd 	.word	0x000021fd
    2420:	0000aec5 	.word	0x0000aec5
    2424:	0000af09 	.word	0x0000af09
    2428:	00002311 	.word	0x00002311
    242c:	20000f38 	.word	0x20000f38
    2430:	00002299 	.word	0x00002299
    2434:	00002439 	.word	0x00002439

00002438 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    2438:	b580      	push	{r7, lr}
    243a:	b082      	sub	sp, #8
    243c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    243e:	4b15      	ldr	r3, [pc, #84]	; (2494 <_extint_enable+0x5c>)
    2440:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2442:	2300      	movs	r3, #0
    2444:	607b      	str	r3, [r7, #4]
    2446:	e018      	b.n	247a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    2448:	687b      	ldr	r3, [r7, #4]
    244a:	009b      	lsls	r3, r3, #2
    244c:	2208      	movs	r2, #8
    244e:	4694      	mov	ip, r2
    2450:	44bc      	add	ip, r7
    2452:	4463      	add	r3, ip
    2454:	3b08      	subs	r3, #8
    2456:	681a      	ldr	r2, [r3, #0]
    2458:	687b      	ldr	r3, [r7, #4]
    245a:	009b      	lsls	r3, r3, #2
    245c:	2108      	movs	r1, #8
    245e:	468c      	mov	ip, r1
    2460:	44bc      	add	ip, r7
    2462:	4463      	add	r3, ip
    2464:	3b08      	subs	r3, #8
    2466:	681b      	ldr	r3, [r3, #0]
    2468:	781b      	ldrb	r3, [r3, #0]
    246a:	b2db      	uxtb	r3, r3
    246c:	2102      	movs	r1, #2
    246e:	430b      	orrs	r3, r1
    2470:	b2db      	uxtb	r3, r3
    2472:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2474:	687b      	ldr	r3, [r7, #4]
    2476:	3301      	adds	r3, #1
    2478:	607b      	str	r3, [r7, #4]
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	2b00      	cmp	r3, #0
    247e:	d0e3      	beq.n	2448 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    2480:	46c0      	nop			; (mov r8, r8)
    2482:	4b05      	ldr	r3, [pc, #20]	; (2498 <_extint_enable+0x60>)
    2484:	4798      	blx	r3
    2486:	1e03      	subs	r3, r0, #0
    2488:	d1fb      	bne.n	2482 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	46bd      	mov	sp, r7
    248e:	b002      	add	sp, #8
    2490:	bd80      	pop	{r7, pc}
    2492:	46c0      	nop			; (mov r8, r8)
    2494:	40001800 	.word	0x40001800
    2498:	00002311 	.word	0x00002311

0000249c <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    249c:	b580      	push	{r7, lr}
    249e:	b082      	sub	sp, #8
    24a0:	af00      	add	r7, sp, #0
    24a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	2200      	movs	r2, #0
    24a8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    24aa:	687b      	ldr	r3, [r7, #4]
    24ac:	2200      	movs	r2, #0
    24ae:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    24b0:	687b      	ldr	r3, [r7, #4]
    24b2:	2201      	movs	r2, #1
    24b4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    24b6:	687b      	ldr	r3, [r7, #4]
    24b8:	2201      	movs	r2, #1
    24ba:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    24bc:	687b      	ldr	r3, [r7, #4]
    24be:	2200      	movs	r2, #0
    24c0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    24c2:	687b      	ldr	r3, [r7, #4]
    24c4:	2202      	movs	r2, #2
    24c6:	72da      	strb	r2, [r3, #11]
}
    24c8:	46c0      	nop			; (mov r8, r8)
    24ca:	46bd      	mov	sp, r7
    24cc:	b002      	add	sp, #8
    24ce:	bd80      	pop	{r7, pc}

000024d0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    24d0:	b580      	push	{r7, lr}
    24d2:	b086      	sub	sp, #24
    24d4:	af00      	add	r7, sp, #0
    24d6:	0002      	movs	r2, r0
    24d8:	6039      	str	r1, [r7, #0]
    24da:	1dfb      	adds	r3, r7, #7
    24dc:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    24de:	2308      	movs	r3, #8
    24e0:	18fb      	adds	r3, r7, r3
    24e2:	0018      	movs	r0, r3
    24e4:	4b36      	ldr	r3, [pc, #216]	; (25c0 <extint_chan_set_config+0xf0>)
    24e6:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    24e8:	683b      	ldr	r3, [r7, #0]
    24ea:	685b      	ldr	r3, [r3, #4]
    24ec:	b2da      	uxtb	r2, r3
    24ee:	2308      	movs	r3, #8
    24f0:	18fb      	adds	r3, r7, r3
    24f2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    24f4:	2308      	movs	r3, #8
    24f6:	18fb      	adds	r3, r7, r3
    24f8:	2200      	movs	r2, #0
    24fa:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    24fc:	683b      	ldr	r3, [r7, #0]
    24fe:	7a1a      	ldrb	r2, [r3, #8]
    2500:	2308      	movs	r3, #8
    2502:	18fb      	adds	r3, r7, r3
    2504:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    2506:	683b      	ldr	r3, [r7, #0]
    2508:	681b      	ldr	r3, [r3, #0]
    250a:	b2db      	uxtb	r3, r3
    250c:	2208      	movs	r2, #8
    250e:	18ba      	adds	r2, r7, r2
    2510:	0011      	movs	r1, r2
    2512:	0018      	movs	r0, r3
    2514:	4b2b      	ldr	r3, [pc, #172]	; (25c4 <extint_chan_set_config+0xf4>)
    2516:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    2518:	1dfb      	adds	r3, r7, #7
    251a:	781b      	ldrb	r3, [r3, #0]
    251c:	0018      	movs	r0, r3
    251e:	4b2a      	ldr	r3, [pc, #168]	; (25c8 <extint_chan_set_config+0xf8>)
    2520:	4798      	blx	r3
    2522:	0003      	movs	r3, r0
    2524:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    2526:	1dfb      	adds	r3, r7, #7
    2528:	781b      	ldrb	r3, [r3, #0]
    252a:	2207      	movs	r2, #7
    252c:	4013      	ands	r3, r2
    252e:	009b      	lsls	r3, r3, #2
    2530:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    2532:	683b      	ldr	r3, [r7, #0]
    2534:	7adb      	ldrb	r3, [r3, #11]
    2536:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    2538:	683b      	ldr	r3, [r7, #0]
    253a:	7a9b      	ldrb	r3, [r3, #10]
    253c:	2b00      	cmp	r3, #0
    253e:	d003      	beq.n	2548 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    2540:	697b      	ldr	r3, [r7, #20]
    2542:	2208      	movs	r2, #8
    2544:	4313      	orrs	r3, r2
    2546:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    2548:	1dfb      	adds	r3, r7, #7
    254a:	781b      	ldrb	r3, [r3, #0]
    254c:	08db      	lsrs	r3, r3, #3
    254e:	b2db      	uxtb	r3, r3
    2550:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    2552:	1dfb      	adds	r3, r7, #7
    2554:	781b      	ldrb	r3, [r3, #0]
    2556:	08db      	lsrs	r3, r3, #3
    2558:	b2db      	uxtb	r3, r3
    255a:	001a      	movs	r2, r3
    255c:	693b      	ldr	r3, [r7, #16]
    255e:	3206      	adds	r2, #6
    2560:	0092      	lsls	r2, r2, #2
    2562:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2564:	210f      	movs	r1, #15
    2566:	68fa      	ldr	r2, [r7, #12]
    2568:	4091      	lsls	r1, r2
    256a:	000a      	movs	r2, r1
    256c:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    256e:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    2570:	6979      	ldr	r1, [r7, #20]
    2572:	68fb      	ldr	r3, [r7, #12]
    2574:	4099      	lsls	r1, r3
    2576:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2578:	431a      	orrs	r2, r3
    257a:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    257c:	693b      	ldr	r3, [r7, #16]
    257e:	1d82      	adds	r2, r0, #6
    2580:	0092      	lsls	r2, r2, #2
    2582:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    2584:	683b      	ldr	r3, [r7, #0]
    2586:	7a5b      	ldrb	r3, [r3, #9]
    2588:	2b00      	cmp	r3, #0
    258a:	d00a      	beq.n	25a2 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    258c:	693b      	ldr	r3, [r7, #16]
    258e:	695a      	ldr	r2, [r3, #20]
    2590:	1dfb      	adds	r3, r7, #7
    2592:	781b      	ldrb	r3, [r3, #0]
    2594:	2101      	movs	r1, #1
    2596:	4099      	lsls	r1, r3
    2598:	000b      	movs	r3, r1
    259a:	431a      	orrs	r2, r3
    259c:	693b      	ldr	r3, [r7, #16]
    259e:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    25a0:	e00a      	b.n	25b8 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    25a2:	693b      	ldr	r3, [r7, #16]
    25a4:	695b      	ldr	r3, [r3, #20]
    25a6:	1dfa      	adds	r2, r7, #7
    25a8:	7812      	ldrb	r2, [r2, #0]
    25aa:	2101      	movs	r1, #1
    25ac:	4091      	lsls	r1, r2
    25ae:	000a      	movs	r2, r1
    25b0:	43d2      	mvns	r2, r2
    25b2:	401a      	ands	r2, r3
    25b4:	693b      	ldr	r3, [r7, #16]
    25b6:	615a      	str	r2, [r3, #20]
	}
}
    25b8:	46c0      	nop			; (mov r8, r8)
    25ba:	46bd      	mov	sp, r7
    25bc:	b006      	add	sp, #24
    25be:	bd80      	pop	{r7, pc}
    25c0:	00002271 	.word	0x00002271
    25c4:	0000b1b1 	.word	0x0000b1b1
    25c8:	000022c5 	.word	0x000022c5

000025cc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    25cc:	b580      	push	{r7, lr}
    25ce:	b082      	sub	sp, #8
    25d0:	af00      	add	r7, sp, #0
    25d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	2200      	movs	r2, #0
    25d8:	701a      	strb	r2, [r3, #0]
}
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	46bd      	mov	sp, r7
    25de:	b002      	add	sp, #8
    25e0:	bd80      	pop	{r7, pc}
    25e2:	46c0      	nop			; (mov r8, r8)

000025e4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    25e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25e6:	b08d      	sub	sp, #52	; 0x34
    25e8:	af00      	add	r7, sp, #0
    25ea:	60b8      	str	r0, [r7, #8]
    25ec:	60f9      	str	r1, [r7, #12]
    25ee:	603a      	str	r2, [r7, #0]
    25f0:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    25f2:	2300      	movs	r3, #0
    25f4:	2400      	movs	r4, #0
    25f6:	623b      	str	r3, [r7, #32]
    25f8:	627c      	str	r4, [r7, #36]	; 0x24
    25fa:	2300      	movs	r3, #0
    25fc:	2400      	movs	r4, #0
    25fe:	61bb      	str	r3, [r7, #24]
    2600:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    2602:	233f      	movs	r3, #63	; 0x3f
    2604:	62fb      	str	r3, [r7, #44]	; 0x2c
    2606:	e053      	b.n	26b0 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    2608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    260a:	3b20      	subs	r3, #32
    260c:	2b00      	cmp	r3, #0
    260e:	db04      	blt.n	261a <long_division+0x36>
    2610:	2201      	movs	r2, #1
    2612:	409a      	lsls	r2, r3
    2614:	0013      	movs	r3, r2
    2616:	617b      	str	r3, [r7, #20]
    2618:	e00b      	b.n	2632 <long_division+0x4e>
    261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    261c:	2220      	movs	r2, #32
    261e:	1ad3      	subs	r3, r2, r3
    2620:	2201      	movs	r2, #1
    2622:	40da      	lsrs	r2, r3
    2624:	0013      	movs	r3, r2
    2626:	2100      	movs	r1, #0
    2628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    262a:	4091      	lsls	r1, r2
    262c:	000a      	movs	r2, r1
    262e:	4313      	orrs	r3, r2
    2630:	617b      	str	r3, [r7, #20]
    2632:	2201      	movs	r2, #1
    2634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2636:	409a      	lsls	r2, r3
    2638:	0013      	movs	r3, r2
    263a:	613b      	str	r3, [r7, #16]

		r = r << 1;
    263c:	69bb      	ldr	r3, [r7, #24]
    263e:	69fc      	ldr	r4, [r7, #28]
    2640:	18db      	adds	r3, r3, r3
    2642:	4164      	adcs	r4, r4
    2644:	61bb      	str	r3, [r7, #24]
    2646:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    2648:	68bb      	ldr	r3, [r7, #8]
    264a:	693a      	ldr	r2, [r7, #16]
    264c:	401a      	ands	r2, r3
    264e:	0015      	movs	r5, r2
    2650:	68fb      	ldr	r3, [r7, #12]
    2652:	697a      	ldr	r2, [r7, #20]
    2654:	401a      	ands	r2, r3
    2656:	0016      	movs	r6, r2
    2658:	002b      	movs	r3, r5
    265a:	4333      	orrs	r3, r6
    265c:	d007      	beq.n	266e <long_division+0x8a>
			r |= 0x01;
    265e:	69bb      	ldr	r3, [r7, #24]
    2660:	2201      	movs	r2, #1
    2662:	4313      	orrs	r3, r2
    2664:	61bb      	str	r3, [r7, #24]
    2666:	69fb      	ldr	r3, [r7, #28]
    2668:	2200      	movs	r2, #0
    266a:	4313      	orrs	r3, r2
    266c:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    266e:	687a      	ldr	r2, [r7, #4]
    2670:	69fb      	ldr	r3, [r7, #28]
    2672:	429a      	cmp	r2, r3
    2674:	d819      	bhi.n	26aa <long_division+0xc6>
    2676:	687a      	ldr	r2, [r7, #4]
    2678:	69fb      	ldr	r3, [r7, #28]
    267a:	429a      	cmp	r2, r3
    267c:	d103      	bne.n	2686 <long_division+0xa2>
    267e:	683a      	ldr	r2, [r7, #0]
    2680:	69bb      	ldr	r3, [r7, #24]
    2682:	429a      	cmp	r2, r3
    2684:	d811      	bhi.n	26aa <long_division+0xc6>
			r = r - d;
    2686:	69b9      	ldr	r1, [r7, #24]
    2688:	69fa      	ldr	r2, [r7, #28]
    268a:	683b      	ldr	r3, [r7, #0]
    268c:	687c      	ldr	r4, [r7, #4]
    268e:	1ac9      	subs	r1, r1, r3
    2690:	41a2      	sbcs	r2, r4
    2692:	000b      	movs	r3, r1
    2694:	0014      	movs	r4, r2
    2696:	61bb      	str	r3, [r7, #24]
    2698:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    269a:	6a3a      	ldr	r2, [r7, #32]
    269c:	693b      	ldr	r3, [r7, #16]
    269e:	4313      	orrs	r3, r2
    26a0:	623b      	str	r3, [r7, #32]
    26a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    26a4:	697b      	ldr	r3, [r7, #20]
    26a6:	4313      	orrs	r3, r2
    26a8:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    26aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    26ac:	3b01      	subs	r3, #1
    26ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    26b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    26b2:	2b00      	cmp	r3, #0
    26b4:	daa8      	bge.n	2608 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    26b6:	6a3b      	ldr	r3, [r7, #32]
    26b8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    26ba:	0018      	movs	r0, r3
    26bc:	0021      	movs	r1, r4
    26be:	46bd      	mov	sp, r7
    26c0:	b00d      	add	sp, #52	; 0x34
    26c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000026c4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    26c4:	b580      	push	{r7, lr}
    26c6:	b086      	sub	sp, #24
    26c8:	af00      	add	r7, sp, #0
    26ca:	60f8      	str	r0, [r7, #12]
    26cc:	60b9      	str	r1, [r7, #8]
    26ce:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    26d0:	2316      	movs	r3, #22
    26d2:	18fb      	adds	r3, r7, r3
    26d4:	2200      	movs	r2, #0
    26d6:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    26d8:	68bb      	ldr	r3, [r7, #8]
    26da:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    26dc:	68bb      	ldr	r3, [r7, #8]
    26de:	085a      	lsrs	r2, r3, #1
    26e0:	68fb      	ldr	r3, [r7, #12]
    26e2:	429a      	cmp	r2, r3
    26e4:	d201      	bcs.n	26ea <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    26e6:	2340      	movs	r3, #64	; 0x40
    26e8:	e026      	b.n	2738 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    26ea:	68bb      	ldr	r3, [r7, #8]
    26ec:	085b      	lsrs	r3, r3, #1
    26ee:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    26f0:	e00a      	b.n	2708 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    26f2:	693a      	ldr	r2, [r7, #16]
    26f4:	68fb      	ldr	r3, [r7, #12]
    26f6:	1ad3      	subs	r3, r2, r3
    26f8:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    26fa:	2316      	movs	r3, #22
    26fc:	18fb      	adds	r3, r7, r3
    26fe:	881a      	ldrh	r2, [r3, #0]
    2700:	2316      	movs	r3, #22
    2702:	18fb      	adds	r3, r7, r3
    2704:	3201      	adds	r2, #1
    2706:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    2708:	693a      	ldr	r2, [r7, #16]
    270a:	68fb      	ldr	r3, [r7, #12]
    270c:	429a      	cmp	r2, r3
    270e:	d2f0      	bcs.n	26f2 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    2710:	2316      	movs	r3, #22
    2712:	18fb      	adds	r3, r7, r3
    2714:	2216      	movs	r2, #22
    2716:	18ba      	adds	r2, r7, r2
    2718:	8812      	ldrh	r2, [r2, #0]
    271a:	3a01      	subs	r2, #1
    271c:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    271e:	2316      	movs	r3, #22
    2720:	18fb      	adds	r3, r7, r3
    2722:	881b      	ldrh	r3, [r3, #0]
    2724:	2bff      	cmp	r3, #255	; 0xff
    2726:	d901      	bls.n	272c <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2728:	2340      	movs	r3, #64	; 0x40
    272a:	e005      	b.n	2738 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    272c:	687b      	ldr	r3, [r7, #4]
    272e:	2216      	movs	r2, #22
    2730:	18ba      	adds	r2, r7, r2
    2732:	8812      	ldrh	r2, [r2, #0]
    2734:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    2736:	2300      	movs	r3, #0
	}
}
    2738:	0018      	movs	r0, r3
    273a:	46bd      	mov	sp, r7
    273c:	b006      	add	sp, #24
    273e:	bd80      	pop	{r7, pc}

00002740 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2740:	b5f0      	push	{r4, r5, r6, r7, lr}
    2742:	b0a1      	sub	sp, #132	; 0x84
    2744:	af00      	add	r7, sp, #0
    2746:	64f8      	str	r0, [r7, #76]	; 0x4c
    2748:	64b9      	str	r1, [r7, #72]	; 0x48
    274a:	647a      	str	r2, [r7, #68]	; 0x44
    274c:	2243      	movs	r2, #67	; 0x43
    274e:	18ba      	adds	r2, r7, r2
    2750:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    2752:	2300      	movs	r3, #0
    2754:	2400      	movs	r4, #0
    2756:	673b      	str	r3, [r7, #112]	; 0x70
    2758:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    275a:	2300      	movs	r3, #0
    275c:	2400      	movs	r4, #0
    275e:	66bb      	str	r3, [r7, #104]	; 0x68
    2760:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    2762:	2300      	movs	r3, #0
    2764:	2400      	movs	r4, #0
    2766:	67bb      	str	r3, [r7, #120]	; 0x78
    2768:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    276a:	2300      	movs	r3, #0
    276c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    276e:	2358      	movs	r3, #88	; 0x58
    2770:	2240      	movs	r2, #64	; 0x40
    2772:	4694      	mov	ip, r2
    2774:	44bc      	add	ip, r7
    2776:	4463      	add	r3, ip
    2778:	781a      	ldrb	r2, [r3, #0]
    277a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    277c:	435a      	muls	r2, r3
    277e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2780:	429a      	cmp	r2, r3
    2782:	d901      	bls.n	2788 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2784:	2340      	movs	r3, #64	; 0x40
    2786:	e0b3      	b.n	28f0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2788:	2343      	movs	r3, #67	; 0x43
    278a:	18fb      	adds	r3, r7, r3
    278c:	781b      	ldrb	r3, [r3, #0]
    278e:	2b00      	cmp	r3, #0
    2790:	d13d      	bne.n	280e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2792:	2358      	movs	r3, #88	; 0x58
    2794:	2240      	movs	r2, #64	; 0x40
    2796:	4694      	mov	ip, r2
    2798:	44bc      	add	ip, r7
    279a:	4463      	add	r3, ip
    279c:	781b      	ldrb	r3, [r3, #0]
    279e:	b2db      	uxtb	r3, r3
    27a0:	613b      	str	r3, [r7, #16]
    27a2:	2300      	movs	r3, #0
    27a4:	617b      	str	r3, [r7, #20]
    27a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    27a8:	60bb      	str	r3, [r7, #8]
    27aa:	2300      	movs	r3, #0
    27ac:	60fb      	str	r3, [r7, #12]
    27ae:	4c52      	ldr	r4, [pc, #328]	; (28f8 <_sercom_get_async_baud_val+0x1b8>)
    27b0:	68ba      	ldr	r2, [r7, #8]
    27b2:	68fb      	ldr	r3, [r7, #12]
    27b4:	6938      	ldr	r0, [r7, #16]
    27b6:	6979      	ldr	r1, [r7, #20]
    27b8:	47a0      	blx	r4
    27ba:	0003      	movs	r3, r0
    27bc:	000c      	movs	r4, r1
    27be:	001b      	movs	r3, r3
    27c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    27c2:	2300      	movs	r3, #0
    27c4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    27c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    27c8:	603b      	str	r3, [r7, #0]
    27ca:	2300      	movs	r3, #0
    27cc:	607b      	str	r3, [r7, #4]
    27ce:	6db8      	ldr	r0, [r7, #88]	; 0x58
    27d0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    27d2:	683a      	ldr	r2, [r7, #0]
    27d4:	687b      	ldr	r3, [r7, #4]
    27d6:	4c49      	ldr	r4, [pc, #292]	; (28fc <_sercom_get_async_baud_val+0x1bc>)
    27d8:	47a0      	blx	r4
    27da:	0003      	movs	r3, r0
    27dc:	000c      	movs	r4, r1
    27de:	673b      	str	r3, [r7, #112]	; 0x70
    27e0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    27e2:	2100      	movs	r1, #0
    27e4:	2201      	movs	r2, #1
    27e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    27e8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    27ea:	1ac9      	subs	r1, r1, r3
    27ec:	41a2      	sbcs	r2, r4
    27ee:	000b      	movs	r3, r1
    27f0:	0014      	movs	r4, r2
    27f2:	66bb      	str	r3, [r7, #104]	; 0x68
    27f4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    27f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    27f8:	0c1b      	lsrs	r3, r3, #16
    27fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    27fc:	0416      	lsls	r6, r2, #16
    27fe:	431e      	orrs	r6, r3
    2800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2802:	041d      	lsls	r5, r3, #16
    2804:	0033      	movs	r3, r6
    2806:	67bb      	str	r3, [r7, #120]	; 0x78
    2808:	2300      	movs	r3, #0
    280a:	67fb      	str	r3, [r7, #124]	; 0x7c
    280c:	e06a      	b.n	28e4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    280e:	2343      	movs	r3, #67	; 0x43
    2810:	18fb      	adds	r3, r7, r3
    2812:	781b      	ldrb	r3, [r3, #0]
    2814:	2b01      	cmp	r3, #1
    2816:	d165      	bne.n	28e4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    2818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    281a:	633b      	str	r3, [r7, #48]	; 0x30
    281c:	2300      	movs	r3, #0
    281e:	637b      	str	r3, [r7, #52]	; 0x34
    2820:	2358      	movs	r3, #88	; 0x58
    2822:	2240      	movs	r2, #64	; 0x40
    2824:	4694      	mov	ip, r2
    2826:	44bc      	add	ip, r7
    2828:	4463      	add	r3, ip
    282a:	781b      	ldrb	r3, [r3, #0]
    282c:	b2db      	uxtb	r3, r3
    282e:	62bb      	str	r3, [r7, #40]	; 0x28
    2830:	2300      	movs	r3, #0
    2832:	62fb      	str	r3, [r7, #44]	; 0x2c
    2834:	4c30      	ldr	r4, [pc, #192]	; (28f8 <_sercom_get_async_baud_val+0x1b8>)
    2836:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    283a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    283c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    283e:	47a0      	blx	r4
    2840:	0003      	movs	r3, r0
    2842:	000c      	movs	r4, r1
    2844:	65bb      	str	r3, [r7, #88]	; 0x58
    2846:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    2848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    284a:	623b      	str	r3, [r7, #32]
    284c:	2300      	movs	r3, #0
    284e:	627b      	str	r3, [r7, #36]	; 0x24
    2850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2852:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    2854:	001a      	movs	r2, r3
    2856:	0023      	movs	r3, r4
    2858:	6a38      	ldr	r0, [r7, #32]
    285a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    285c:	4c27      	ldr	r4, [pc, #156]	; (28fc <_sercom_get_async_baud_val+0x1bc>)
    285e:	47a0      	blx	r4
    2860:	0003      	movs	r3, r0
    2862:	000c      	movs	r4, r1
    2864:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    2866:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    2868:	2380      	movs	r3, #128	; 0x80
    286a:	019b      	lsls	r3, r3, #6
    286c:	429a      	cmp	r2, r3
    286e:	d901      	bls.n	2874 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2870:	2340      	movs	r3, #64	; 0x40
    2872:	e03d      	b.n	28f0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    2874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2876:	61bb      	str	r3, [r7, #24]
    2878:	2300      	movs	r3, #0
    287a:	61fb      	str	r3, [r7, #28]
    287c:	69b9      	ldr	r1, [r7, #24]
    287e:	69fa      	ldr	r2, [r7, #28]
    2880:	000b      	movs	r3, r1
    2882:	0f5b      	lsrs	r3, r3, #29
    2884:	0010      	movs	r0, r2
    2886:	00c0      	lsls	r0, r0, #3
    2888:	63f8      	str	r0, [r7, #60]	; 0x3c
    288a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    288c:	4318      	orrs	r0, r3
    288e:	63f8      	str	r0, [r7, #60]	; 0x3c
    2890:	000b      	movs	r3, r1
    2892:	00db      	lsls	r3, r3, #3
    2894:	63bb      	str	r3, [r7, #56]	; 0x38
    2896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2898:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    289a:	001a      	movs	r2, r3
    289c:	0023      	movs	r3, r4
    289e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    28a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    28a2:	4c16      	ldr	r4, [pc, #88]	; (28fc <_sercom_get_async_baud_val+0x1bc>)
    28a4:	47a0      	blx	r4
    28a6:	0003      	movs	r3, r0
    28a8:	000c      	movs	r4, r1
    28aa:	65bb      	str	r3, [r7, #88]	; 0x58
    28ac:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    28ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    28b0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    28b2:	b2d9      	uxtb	r1, r3
    28b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    28b6:	b2db      	uxtb	r3, r3
    28b8:	00db      	lsls	r3, r3, #3
    28ba:	b2da      	uxtb	r2, r3
    28bc:	2317      	movs	r3, #23
    28be:	2040      	movs	r0, #64	; 0x40
    28c0:	4684      	mov	ip, r0
    28c2:	44bc      	add	ip, r7
    28c4:	4463      	add	r3, ip
    28c6:	1a8a      	subs	r2, r1, r2
    28c8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    28ca:	2317      	movs	r3, #23
    28cc:	2240      	movs	r2, #64	; 0x40
    28ce:	4694      	mov	ip, r2
    28d0:	44bc      	add	ip, r7
    28d2:	4463      	add	r3, ip
    28d4:	781b      	ldrb	r3, [r3, #0]
    28d6:	035b      	lsls	r3, r3, #13
    28d8:	001a      	movs	r2, r3
    28da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    28dc:	4313      	orrs	r3, r2
    28de:	67bb      	str	r3, [r7, #120]	; 0x78
    28e0:	2300      	movs	r3, #0
    28e2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    28e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    28e6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    28e8:	b29a      	uxth	r2, r3
    28ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    28ec:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    28ee:	2300      	movs	r3, #0
}
    28f0:	0018      	movs	r0, r3
    28f2:	46bd      	mov	sp, r7
    28f4:	b021      	add	sp, #132	; 0x84
    28f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28f8:	0000b6e9 	.word	0x0000b6e9
    28fc:	000025e5 	.word	0x000025e5

00002900 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2900:	b580      	push	{r7, lr}
    2902:	b084      	sub	sp, #16
    2904:	af00      	add	r7, sp, #0
    2906:	0002      	movs	r2, r0
    2908:	1dfb      	adds	r3, r7, #7
    290a:	701a      	strb	r2, [r3, #0]
    290c:	1dbb      	adds	r3, r7, #6
    290e:	1c0a      	adds	r2, r1, #0
    2910:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2912:	4b1a      	ldr	r3, [pc, #104]	; (297c <sercom_set_gclk_generator+0x7c>)
    2914:	781b      	ldrb	r3, [r3, #0]
    2916:	2201      	movs	r2, #1
    2918:	4053      	eors	r3, r2
    291a:	b2db      	uxtb	r3, r3
    291c:	2b00      	cmp	r3, #0
    291e:	d103      	bne.n	2928 <sercom_set_gclk_generator+0x28>
    2920:	1dbb      	adds	r3, r7, #6
    2922:	781b      	ldrb	r3, [r3, #0]
    2924:	2b00      	cmp	r3, #0
    2926:	d01b      	beq.n	2960 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2928:	230c      	movs	r3, #12
    292a:	18fb      	adds	r3, r7, r3
    292c:	0018      	movs	r0, r3
    292e:	4b14      	ldr	r3, [pc, #80]	; (2980 <sercom_set_gclk_generator+0x80>)
    2930:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    2932:	230c      	movs	r3, #12
    2934:	18fb      	adds	r3, r7, r3
    2936:	1dfa      	adds	r2, r7, #7
    2938:	7812      	ldrb	r2, [r2, #0]
    293a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    293c:	230c      	movs	r3, #12
    293e:	18fb      	adds	r3, r7, r3
    2940:	0019      	movs	r1, r3
    2942:	2013      	movs	r0, #19
    2944:	4b0f      	ldr	r3, [pc, #60]	; (2984 <sercom_set_gclk_generator+0x84>)
    2946:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2948:	2013      	movs	r0, #19
    294a:	4b0f      	ldr	r3, [pc, #60]	; (2988 <sercom_set_gclk_generator+0x88>)
    294c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    294e:	4b0b      	ldr	r3, [pc, #44]	; (297c <sercom_set_gclk_generator+0x7c>)
    2950:	1dfa      	adds	r2, r7, #7
    2952:	7812      	ldrb	r2, [r2, #0]
    2954:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    2956:	4b09      	ldr	r3, [pc, #36]	; (297c <sercom_set_gclk_generator+0x7c>)
    2958:	2201      	movs	r2, #1
    295a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    295c:	2300      	movs	r3, #0
    295e:	e008      	b.n	2972 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    2960:	4b06      	ldr	r3, [pc, #24]	; (297c <sercom_set_gclk_generator+0x7c>)
    2962:	785b      	ldrb	r3, [r3, #1]
    2964:	1dfa      	adds	r2, r7, #7
    2966:	7812      	ldrb	r2, [r2, #0]
    2968:	429a      	cmp	r2, r3
    296a:	d101      	bne.n	2970 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    296c:	2300      	movs	r3, #0
    296e:	e000      	b.n	2972 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2970:	231d      	movs	r3, #29
}
    2972:	0018      	movs	r0, r3
    2974:	46bd      	mov	sp, r7
    2976:	b004      	add	sp, #16
    2978:	bd80      	pop	{r7, pc}
    297a:	46c0      	nop			; (mov r8, r8)
    297c:	20000184 	.word	0x20000184
    2980:	000025cd 	.word	0x000025cd
    2984:	0000aec5 	.word	0x0000aec5
    2988:	0000af09 	.word	0x0000af09

0000298c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    298c:	b580      	push	{r7, lr}
    298e:	b082      	sub	sp, #8
    2990:	af00      	add	r7, sp, #0
    2992:	6078      	str	r0, [r7, #4]
    2994:	000a      	movs	r2, r1
    2996:	1cfb      	adds	r3, r7, #3
    2998:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	4a4d      	ldr	r2, [pc, #308]	; (2ad4 <_sercom_get_default_pad+0x148>)
    299e:	4293      	cmp	r3, r2
    29a0:	d03f      	beq.n	2a22 <_sercom_get_default_pad+0x96>
    29a2:	4a4c      	ldr	r2, [pc, #304]	; (2ad4 <_sercom_get_default_pad+0x148>)
    29a4:	4293      	cmp	r3, r2
    29a6:	d806      	bhi.n	29b6 <_sercom_get_default_pad+0x2a>
    29a8:	4a4b      	ldr	r2, [pc, #300]	; (2ad8 <_sercom_get_default_pad+0x14c>)
    29aa:	4293      	cmp	r3, r2
    29ac:	d00f      	beq.n	29ce <_sercom_get_default_pad+0x42>
    29ae:	4a4b      	ldr	r2, [pc, #300]	; (2adc <_sercom_get_default_pad+0x150>)
    29b0:	4293      	cmp	r3, r2
    29b2:	d021      	beq.n	29f8 <_sercom_get_default_pad+0x6c>
    29b4:	e089      	b.n	2aca <_sercom_get_default_pad+0x13e>
    29b6:	4a4a      	ldr	r2, [pc, #296]	; (2ae0 <_sercom_get_default_pad+0x154>)
    29b8:	4293      	cmp	r3, r2
    29ba:	d100      	bne.n	29be <_sercom_get_default_pad+0x32>
    29bc:	e05b      	b.n	2a76 <_sercom_get_default_pad+0xea>
    29be:	4a49      	ldr	r2, [pc, #292]	; (2ae4 <_sercom_get_default_pad+0x158>)
    29c0:	4293      	cmp	r3, r2
    29c2:	d100      	bne.n	29c6 <_sercom_get_default_pad+0x3a>
    29c4:	e06c      	b.n	2aa0 <_sercom_get_default_pad+0x114>
    29c6:	4a48      	ldr	r2, [pc, #288]	; (2ae8 <_sercom_get_default_pad+0x15c>)
    29c8:	4293      	cmp	r3, r2
    29ca:	d03f      	beq.n	2a4c <_sercom_get_default_pad+0xc0>
    29cc:	e07d      	b.n	2aca <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    29ce:	1cfb      	adds	r3, r7, #3
    29d0:	781b      	ldrb	r3, [r3, #0]
    29d2:	2b01      	cmp	r3, #1
    29d4:	d00a      	beq.n	29ec <_sercom_get_default_pad+0x60>
    29d6:	dc02      	bgt.n	29de <_sercom_get_default_pad+0x52>
    29d8:	2b00      	cmp	r3, #0
    29da:	d005      	beq.n	29e8 <_sercom_get_default_pad+0x5c>
    29dc:	e075      	b.n	2aca <_sercom_get_default_pad+0x13e>
    29de:	2b02      	cmp	r3, #2
    29e0:	d006      	beq.n	29f0 <_sercom_get_default_pad+0x64>
    29e2:	2b03      	cmp	r3, #3
    29e4:	d006      	beq.n	29f4 <_sercom_get_default_pad+0x68>
    29e6:	e070      	b.n	2aca <_sercom_get_default_pad+0x13e>
    29e8:	4b40      	ldr	r3, [pc, #256]	; (2aec <_sercom_get_default_pad+0x160>)
    29ea:	e06f      	b.n	2acc <_sercom_get_default_pad+0x140>
    29ec:	4b40      	ldr	r3, [pc, #256]	; (2af0 <_sercom_get_default_pad+0x164>)
    29ee:	e06d      	b.n	2acc <_sercom_get_default_pad+0x140>
    29f0:	4b40      	ldr	r3, [pc, #256]	; (2af4 <_sercom_get_default_pad+0x168>)
    29f2:	e06b      	b.n	2acc <_sercom_get_default_pad+0x140>
    29f4:	4b40      	ldr	r3, [pc, #256]	; (2af8 <_sercom_get_default_pad+0x16c>)
    29f6:	e069      	b.n	2acc <_sercom_get_default_pad+0x140>
    29f8:	1cfb      	adds	r3, r7, #3
    29fa:	781b      	ldrb	r3, [r3, #0]
    29fc:	2b01      	cmp	r3, #1
    29fe:	d00a      	beq.n	2a16 <_sercom_get_default_pad+0x8a>
    2a00:	dc02      	bgt.n	2a08 <_sercom_get_default_pad+0x7c>
    2a02:	2b00      	cmp	r3, #0
    2a04:	d005      	beq.n	2a12 <_sercom_get_default_pad+0x86>
    2a06:	e060      	b.n	2aca <_sercom_get_default_pad+0x13e>
    2a08:	2b02      	cmp	r3, #2
    2a0a:	d006      	beq.n	2a1a <_sercom_get_default_pad+0x8e>
    2a0c:	2b03      	cmp	r3, #3
    2a0e:	d006      	beq.n	2a1e <_sercom_get_default_pad+0x92>
    2a10:	e05b      	b.n	2aca <_sercom_get_default_pad+0x13e>
    2a12:	4b3a      	ldr	r3, [pc, #232]	; (2afc <_sercom_get_default_pad+0x170>)
    2a14:	e05a      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a16:	4b3a      	ldr	r3, [pc, #232]	; (2b00 <_sercom_get_default_pad+0x174>)
    2a18:	e058      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a1a:	4b3a      	ldr	r3, [pc, #232]	; (2b04 <_sercom_get_default_pad+0x178>)
    2a1c:	e056      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a1e:	4b3a      	ldr	r3, [pc, #232]	; (2b08 <_sercom_get_default_pad+0x17c>)
    2a20:	e054      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a22:	1cfb      	adds	r3, r7, #3
    2a24:	781b      	ldrb	r3, [r3, #0]
    2a26:	2b01      	cmp	r3, #1
    2a28:	d00a      	beq.n	2a40 <_sercom_get_default_pad+0xb4>
    2a2a:	dc02      	bgt.n	2a32 <_sercom_get_default_pad+0xa6>
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	d005      	beq.n	2a3c <_sercom_get_default_pad+0xb0>
    2a30:	e04b      	b.n	2aca <_sercom_get_default_pad+0x13e>
    2a32:	2b02      	cmp	r3, #2
    2a34:	d006      	beq.n	2a44 <_sercom_get_default_pad+0xb8>
    2a36:	2b03      	cmp	r3, #3
    2a38:	d006      	beq.n	2a48 <_sercom_get_default_pad+0xbc>
    2a3a:	e046      	b.n	2aca <_sercom_get_default_pad+0x13e>
    2a3c:	4b33      	ldr	r3, [pc, #204]	; (2b0c <_sercom_get_default_pad+0x180>)
    2a3e:	e045      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a40:	4b33      	ldr	r3, [pc, #204]	; (2b10 <_sercom_get_default_pad+0x184>)
    2a42:	e043      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a44:	4b33      	ldr	r3, [pc, #204]	; (2b14 <_sercom_get_default_pad+0x188>)
    2a46:	e041      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a48:	4b33      	ldr	r3, [pc, #204]	; (2b18 <_sercom_get_default_pad+0x18c>)
    2a4a:	e03f      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a4c:	1cfb      	adds	r3, r7, #3
    2a4e:	781b      	ldrb	r3, [r3, #0]
    2a50:	2b01      	cmp	r3, #1
    2a52:	d00a      	beq.n	2a6a <_sercom_get_default_pad+0xde>
    2a54:	dc02      	bgt.n	2a5c <_sercom_get_default_pad+0xd0>
    2a56:	2b00      	cmp	r3, #0
    2a58:	d005      	beq.n	2a66 <_sercom_get_default_pad+0xda>
    2a5a:	e036      	b.n	2aca <_sercom_get_default_pad+0x13e>
    2a5c:	2b02      	cmp	r3, #2
    2a5e:	d006      	beq.n	2a6e <_sercom_get_default_pad+0xe2>
    2a60:	2b03      	cmp	r3, #3
    2a62:	d006      	beq.n	2a72 <_sercom_get_default_pad+0xe6>
    2a64:	e031      	b.n	2aca <_sercom_get_default_pad+0x13e>
    2a66:	4b2d      	ldr	r3, [pc, #180]	; (2b1c <_sercom_get_default_pad+0x190>)
    2a68:	e030      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a6a:	4b2d      	ldr	r3, [pc, #180]	; (2b20 <_sercom_get_default_pad+0x194>)
    2a6c:	e02e      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a6e:	4b2d      	ldr	r3, [pc, #180]	; (2b24 <_sercom_get_default_pad+0x198>)
    2a70:	e02c      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a72:	4b2d      	ldr	r3, [pc, #180]	; (2b28 <_sercom_get_default_pad+0x19c>)
    2a74:	e02a      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a76:	1cfb      	adds	r3, r7, #3
    2a78:	781b      	ldrb	r3, [r3, #0]
    2a7a:	2b01      	cmp	r3, #1
    2a7c:	d00a      	beq.n	2a94 <_sercom_get_default_pad+0x108>
    2a7e:	dc02      	bgt.n	2a86 <_sercom_get_default_pad+0xfa>
    2a80:	2b00      	cmp	r3, #0
    2a82:	d005      	beq.n	2a90 <_sercom_get_default_pad+0x104>
    2a84:	e021      	b.n	2aca <_sercom_get_default_pad+0x13e>
    2a86:	2b02      	cmp	r3, #2
    2a88:	d006      	beq.n	2a98 <_sercom_get_default_pad+0x10c>
    2a8a:	2b03      	cmp	r3, #3
    2a8c:	d006      	beq.n	2a9c <_sercom_get_default_pad+0x110>
    2a8e:	e01c      	b.n	2aca <_sercom_get_default_pad+0x13e>
    2a90:	4b26      	ldr	r3, [pc, #152]	; (2b2c <_sercom_get_default_pad+0x1a0>)
    2a92:	e01b      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a94:	4b26      	ldr	r3, [pc, #152]	; (2b30 <_sercom_get_default_pad+0x1a4>)
    2a96:	e019      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a98:	4b26      	ldr	r3, [pc, #152]	; (2b34 <_sercom_get_default_pad+0x1a8>)
    2a9a:	e017      	b.n	2acc <_sercom_get_default_pad+0x140>
    2a9c:	4b26      	ldr	r3, [pc, #152]	; (2b38 <_sercom_get_default_pad+0x1ac>)
    2a9e:	e015      	b.n	2acc <_sercom_get_default_pad+0x140>
    2aa0:	1cfb      	adds	r3, r7, #3
    2aa2:	781b      	ldrb	r3, [r3, #0]
    2aa4:	2b01      	cmp	r3, #1
    2aa6:	d00a      	beq.n	2abe <_sercom_get_default_pad+0x132>
    2aa8:	dc02      	bgt.n	2ab0 <_sercom_get_default_pad+0x124>
    2aaa:	2b00      	cmp	r3, #0
    2aac:	d005      	beq.n	2aba <_sercom_get_default_pad+0x12e>
    2aae:	e00c      	b.n	2aca <_sercom_get_default_pad+0x13e>
    2ab0:	2b02      	cmp	r3, #2
    2ab2:	d006      	beq.n	2ac2 <_sercom_get_default_pad+0x136>
    2ab4:	2b03      	cmp	r3, #3
    2ab6:	d006      	beq.n	2ac6 <_sercom_get_default_pad+0x13a>
    2ab8:	e007      	b.n	2aca <_sercom_get_default_pad+0x13e>
    2aba:	4b20      	ldr	r3, [pc, #128]	; (2b3c <_sercom_get_default_pad+0x1b0>)
    2abc:	e006      	b.n	2acc <_sercom_get_default_pad+0x140>
    2abe:	4b20      	ldr	r3, [pc, #128]	; (2b40 <_sercom_get_default_pad+0x1b4>)
    2ac0:	e004      	b.n	2acc <_sercom_get_default_pad+0x140>
    2ac2:	4b20      	ldr	r3, [pc, #128]	; (2b44 <_sercom_get_default_pad+0x1b8>)
    2ac4:	e002      	b.n	2acc <_sercom_get_default_pad+0x140>
    2ac6:	4b20      	ldr	r3, [pc, #128]	; (2b48 <_sercom_get_default_pad+0x1bc>)
    2ac8:	e000      	b.n	2acc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    2aca:	2300      	movs	r3, #0
}
    2acc:	0018      	movs	r0, r3
    2ace:	46bd      	mov	sp, r7
    2ad0:	b002      	add	sp, #8
    2ad2:	bd80      	pop	{r7, pc}
    2ad4:	42001000 	.word	0x42001000
    2ad8:	42000800 	.word	0x42000800
    2adc:	42000c00 	.word	0x42000c00
    2ae0:	42001800 	.word	0x42001800
    2ae4:	42001c00 	.word	0x42001c00
    2ae8:	42001400 	.word	0x42001400
    2aec:	00080002 	.word	0x00080002
    2af0:	00090002 	.word	0x00090002
    2af4:	00060003 	.word	0x00060003
    2af8:	00070003 	.word	0x00070003
    2afc:	00100002 	.word	0x00100002
    2b00:	00110002 	.word	0x00110002
    2b04:	00120002 	.word	0x00120002
    2b08:	00130002 	.word	0x00130002
    2b0c:	00080003 	.word	0x00080003
    2b10:	00090003 	.word	0x00090003
    2b14:	000e0002 	.word	0x000e0002
    2b18:	000f0002 	.word	0x000f0002
    2b1c:	001b0005 	.word	0x001b0005
    2b20:	001c0005 	.word	0x001c0005
    2b24:	00180002 	.word	0x00180002
    2b28:	00190002 	.word	0x00190002
    2b2c:	00530005 	.word	0x00530005
    2b30:	003f0005 	.word	0x003f0005
    2b34:	003e0005 	.word	0x003e0005
    2b38:	00520005 	.word	0x00520005
    2b3c:	003e0003 	.word	0x003e0003
    2b40:	003f0003 	.word	0x003f0003
    2b44:	00180003 	.word	0x00180003
    2b48:	00190003 	.word	0x00190003

00002b4c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2b4c:	b590      	push	{r4, r7, lr}
    2b4e:	b08b      	sub	sp, #44	; 0x2c
    2b50:	af00      	add	r7, sp, #0
    2b52:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2b54:	230c      	movs	r3, #12
    2b56:	18fb      	adds	r3, r7, r3
    2b58:	4a0f      	ldr	r2, [pc, #60]	; (2b98 <_sercom_get_sercom_inst_index+0x4c>)
    2b5a:	ca13      	ldmia	r2!, {r0, r1, r4}
    2b5c:	c313      	stmia	r3!, {r0, r1, r4}
    2b5e:	ca13      	ldmia	r2!, {r0, r1, r4}
    2b60:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2b62:	2300      	movs	r3, #0
    2b64:	627b      	str	r3, [r7, #36]	; 0x24
    2b66:	e00e      	b.n	2b86 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2b68:	230c      	movs	r3, #12
    2b6a:	18fb      	adds	r3, r7, r3
    2b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2b6e:	0092      	lsls	r2, r2, #2
    2b70:	58d3      	ldr	r3, [r2, r3]
    2b72:	1e1a      	subs	r2, r3, #0
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	429a      	cmp	r2, r3
    2b78:	d102      	bne.n	2b80 <_sercom_get_sercom_inst_index+0x34>
			return i;
    2b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b7c:	b2db      	uxtb	r3, r3
    2b7e:	e006      	b.n	2b8e <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b82:	3301      	adds	r3, #1
    2b84:	627b      	str	r3, [r7, #36]	; 0x24
    2b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b88:	2b05      	cmp	r3, #5
    2b8a:	d9ed      	bls.n	2b68 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2b8c:	2300      	movs	r3, #0
}
    2b8e:	0018      	movs	r0, r3
    2b90:	46bd      	mov	sp, r7
    2b92:	b00b      	add	sp, #44	; 0x2c
    2b94:	bd90      	pop	{r4, r7, pc}
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	0000caa8 	.word	0x0000caa8

00002b9c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2b9c:	b580      	push	{r7, lr}
    2b9e:	b082      	sub	sp, #8
    2ba0:	af00      	add	r7, sp, #0
    2ba2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	2200      	movs	r2, #0
    2ba8:	701a      	strb	r2, [r3, #0]
}
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	46bd      	mov	sp, r7
    2bae:	b002      	add	sp, #8
    2bb0:	bd80      	pop	{r7, pc}
    2bb2:	46c0      	nop			; (mov r8, r8)

00002bb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2bb4:	b580      	push	{r7, lr}
    2bb6:	b082      	sub	sp, #8
    2bb8:	af00      	add	r7, sp, #0
    2bba:	0002      	movs	r2, r0
    2bbc:	6039      	str	r1, [r7, #0]
    2bbe:	1dfb      	adds	r3, r7, #7
    2bc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2bc2:	1dfb      	adds	r3, r7, #7
    2bc4:	781b      	ldrb	r3, [r3, #0]
    2bc6:	2b01      	cmp	r3, #1
    2bc8:	d00a      	beq.n	2be0 <system_apb_clock_set_mask+0x2c>
    2bca:	2b02      	cmp	r3, #2
    2bcc:	d00f      	beq.n	2bee <system_apb_clock_set_mask+0x3a>
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d114      	bne.n	2bfc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2bd2:	4b0e      	ldr	r3, [pc, #56]	; (2c0c <system_apb_clock_set_mask+0x58>)
    2bd4:	4a0d      	ldr	r2, [pc, #52]	; (2c0c <system_apb_clock_set_mask+0x58>)
    2bd6:	6991      	ldr	r1, [r2, #24]
    2bd8:	683a      	ldr	r2, [r7, #0]
    2bda:	430a      	orrs	r2, r1
    2bdc:	619a      	str	r2, [r3, #24]
			break;
    2bde:	e00f      	b.n	2c00 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2be0:	4b0a      	ldr	r3, [pc, #40]	; (2c0c <system_apb_clock_set_mask+0x58>)
    2be2:	4a0a      	ldr	r2, [pc, #40]	; (2c0c <system_apb_clock_set_mask+0x58>)
    2be4:	69d1      	ldr	r1, [r2, #28]
    2be6:	683a      	ldr	r2, [r7, #0]
    2be8:	430a      	orrs	r2, r1
    2bea:	61da      	str	r2, [r3, #28]
			break;
    2bec:	e008      	b.n	2c00 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2bee:	4b07      	ldr	r3, [pc, #28]	; (2c0c <system_apb_clock_set_mask+0x58>)
    2bf0:	4a06      	ldr	r2, [pc, #24]	; (2c0c <system_apb_clock_set_mask+0x58>)
    2bf2:	6a11      	ldr	r1, [r2, #32]
    2bf4:	683a      	ldr	r2, [r7, #0]
    2bf6:	430a      	orrs	r2, r1
    2bf8:	621a      	str	r2, [r3, #32]
			break;
    2bfa:	e001      	b.n	2c00 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2bfc:	2317      	movs	r3, #23
    2bfe:	e000      	b.n	2c02 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2c00:	2300      	movs	r3, #0
}
    2c02:	0018      	movs	r0, r3
    2c04:	46bd      	mov	sp, r7
    2c06:	b002      	add	sp, #8
    2c08:	bd80      	pop	{r7, pc}
    2c0a:	46c0      	nop			; (mov r8, r8)
    2c0c:	40000400 	.word	0x40000400

00002c10 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2c10:	b580      	push	{r7, lr}
    2c12:	b082      	sub	sp, #8
    2c14:	af00      	add	r7, sp, #0
    2c16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2c18:	687b      	ldr	r3, [r7, #4]
    2c1a:	2280      	movs	r2, #128	; 0x80
    2c1c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2c1e:	687b      	ldr	r3, [r7, #4]
    2c20:	2200      	movs	r2, #0
    2c22:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2c24:	687b      	ldr	r3, [r7, #4]
    2c26:	2201      	movs	r2, #1
    2c28:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2c2a:	687b      	ldr	r3, [r7, #4]
    2c2c:	2200      	movs	r2, #0
    2c2e:	70da      	strb	r2, [r3, #3]
}
    2c30:	46c0      	nop			; (mov r8, r8)
    2c32:	46bd      	mov	sp, r7
    2c34:	b002      	add	sp, #8
    2c36:	bd80      	pop	{r7, pc}

00002c38 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    2c38:	b580      	push	{r7, lr}
    2c3a:	b084      	sub	sp, #16
    2c3c:	af00      	add	r7, sp, #0
    2c3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2c40:	687b      	ldr	r3, [r7, #4]
    2c42:	681b      	ldr	r3, [r3, #0]
    2c44:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2c46:	68fb      	ldr	r3, [r7, #12]
    2c48:	7bdb      	ldrb	r3, [r3, #15]
    2c4a:	b2db      	uxtb	r3, r3
    2c4c:	001a      	movs	r2, r3
    2c4e:	2380      	movs	r3, #128	; 0x80
    2c50:	4013      	ands	r3, r2
    2c52:	1e5a      	subs	r2, r3, #1
    2c54:	4193      	sbcs	r3, r2
    2c56:	b2db      	uxtb	r3, r3
#endif
}
    2c58:	0018      	movs	r0, r3
    2c5a:	46bd      	mov	sp, r7
    2c5c:	b004      	add	sp, #16
    2c5e:	bd80      	pop	{r7, pc}

00002c60 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2c60:	b590      	push	{r4, r7, lr}
    2c62:	b087      	sub	sp, #28
    2c64:	af00      	add	r7, sp, #0
    2c66:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2c68:	2308      	movs	r3, #8
    2c6a:	18fb      	adds	r3, r7, r3
    2c6c:	4a0d      	ldr	r2, [pc, #52]	; (2ca4 <_tc_get_inst_index+0x44>)
    2c6e:	ca13      	ldmia	r2!, {r0, r1, r4}
    2c70:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2c72:	2300      	movs	r3, #0
    2c74:	617b      	str	r3, [r7, #20]
    2c76:	e00d      	b.n	2c94 <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
    2c78:	2308      	movs	r3, #8
    2c7a:	18fb      	adds	r3, r7, r3
    2c7c:	697a      	ldr	r2, [r7, #20]
    2c7e:	0092      	lsls	r2, r2, #2
    2c80:	58d2      	ldr	r2, [r2, r3]
    2c82:	687b      	ldr	r3, [r7, #4]
    2c84:	429a      	cmp	r2, r3
    2c86:	d102      	bne.n	2c8e <_tc_get_inst_index+0x2e>
			return i;
    2c88:	697b      	ldr	r3, [r7, #20]
    2c8a:	b2db      	uxtb	r3, r3
    2c8c:	e006      	b.n	2c9c <_tc_get_inst_index+0x3c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2c8e:	697b      	ldr	r3, [r7, #20]
    2c90:	3301      	adds	r3, #1
    2c92:	617b      	str	r3, [r7, #20]
    2c94:	697b      	ldr	r3, [r7, #20]
    2c96:	2b02      	cmp	r3, #2
    2c98:	d9ee      	bls.n	2c78 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2c9a:	2300      	movs	r3, #0
}
    2c9c:	0018      	movs	r0, r3
    2c9e:	46bd      	mov	sp, r7
    2ca0:	b007      	add	sp, #28
    2ca2:	bd90      	pop	{r4, r7, pc}
    2ca4:	0000cac0 	.word	0x0000cac0

00002ca8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2ca8:	b590      	push	{r4, r7, lr}
    2caa:	b08d      	sub	sp, #52	; 0x34
    2cac:	af00      	add	r7, sp, #0
    2cae:	60f8      	str	r0, [r7, #12]
    2cb0:	60b9      	str	r1, [r7, #8]
    2cb2:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    2cb4:	232e      	movs	r3, #46	; 0x2e
    2cb6:	18fb      	adds	r3, r7, r3
    2cb8:	2200      	movs	r2, #0
    2cba:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    2cbc:	232d      	movs	r3, #45	; 0x2d
    2cbe:	18fb      	adds	r3, r7, r3
    2cc0:	2200      	movs	r2, #0
    2cc2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    2cc4:	232c      	movs	r3, #44	; 0x2c
    2cc6:	18fb      	adds	r3, r7, r3
    2cc8:	2200      	movs	r2, #0
    2cca:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2ccc:	2329      	movs	r3, #41	; 0x29
    2cce:	18fc      	adds	r4, r7, r3
    2cd0:	68bb      	ldr	r3, [r7, #8]
    2cd2:	0018      	movs	r0, r3
    2cd4:	4bbf      	ldr	r3, [pc, #764]	; (2fd4 <tc_init+0x32c>)
    2cd6:	4798      	blx	r3
    2cd8:	0003      	movs	r3, r0
    2cda:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2cdc:	2324      	movs	r3, #36	; 0x24
    2cde:	18fa      	adds	r2, r7, r3
    2ce0:	4bbd      	ldr	r3, [pc, #756]	; (2fd8 <tc_init+0x330>)
    2ce2:	0010      	movs	r0, r2
    2ce4:	0019      	movs	r1, r3
    2ce6:	2303      	movs	r3, #3
    2ce8:	001a      	movs	r2, r3
    2cea:	4bbc      	ldr	r3, [pc, #752]	; (2fdc <tc_init+0x334>)
    2cec:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2cee:	231c      	movs	r3, #28
    2cf0:	18fa      	adds	r2, r7, r3
    2cf2:	4bbb      	ldr	r3, [pc, #748]	; (2fe0 <tc_init+0x338>)
    2cf4:	0010      	movs	r0, r2
    2cf6:	0019      	movs	r1, r3
    2cf8:	2306      	movs	r3, #6
    2cfa:	001a      	movs	r2, r3
    2cfc:	4bb7      	ldr	r3, [pc, #732]	; (2fdc <tc_init+0x334>)
    2cfe:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    2d00:	232b      	movs	r3, #43	; 0x2b
    2d02:	18fb      	adds	r3, r7, r3
    2d04:	2200      	movs	r2, #0
    2d06:	701a      	strb	r2, [r3, #0]
    2d08:	e00e      	b.n	2d28 <tc_init+0x80>
		module_inst->callback[i]        = NULL;
    2d0a:	232b      	movs	r3, #43	; 0x2b
    2d0c:	18fb      	adds	r3, r7, r3
    2d0e:	781a      	ldrb	r2, [r3, #0]
    2d10:	68fb      	ldr	r3, [r7, #12]
    2d12:	3202      	adds	r2, #2
    2d14:	0092      	lsls	r2, r2, #2
    2d16:	2100      	movs	r1, #0
    2d18:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    2d1a:	232b      	movs	r3, #43	; 0x2b
    2d1c:	18fb      	adds	r3, r7, r3
    2d1e:	781a      	ldrb	r2, [r3, #0]
    2d20:	232b      	movs	r3, #43	; 0x2b
    2d22:	18fb      	adds	r3, r7, r3
    2d24:	3201      	adds	r2, #1
    2d26:	701a      	strb	r2, [r3, #0]
    2d28:	232b      	movs	r3, #43	; 0x2b
    2d2a:	18fb      	adds	r3, r7, r3
    2d2c:	781b      	ldrb	r3, [r3, #0]
    2d2e:	2b03      	cmp	r3, #3
    2d30:	d9eb      	bls.n	2d0a <tc_init+0x62>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
    2d32:	68fb      	ldr	r3, [r7, #12]
    2d34:	2200      	movs	r2, #0
    2d36:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	2200      	movs	r2, #0
    2d3c:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2d3e:	2329      	movs	r3, #41	; 0x29
    2d40:	18fb      	adds	r3, r7, r3
    2d42:	781a      	ldrb	r2, [r3, #0]
    2d44:	4ba7      	ldr	r3, [pc, #668]	; (2fe4 <tc_init+0x33c>)
    2d46:	0092      	lsls	r2, r2, #2
    2d48:	68f9      	ldr	r1, [r7, #12]
    2d4a:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2d4c:	68fb      	ldr	r3, [r7, #12]
    2d4e:	68ba      	ldr	r2, [r7, #8]
    2d50:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2d52:	687b      	ldr	r3, [r7, #4]
    2d54:	789b      	ldrb	r3, [r3, #2]
    2d56:	2b08      	cmp	r3, #8
    2d58:	d108      	bne.n	2d6c <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    2d5a:	2329      	movs	r3, #41	; 0x29
    2d5c:	18fb      	adds	r3, r7, r3
    2d5e:	781b      	ldrb	r3, [r3, #0]
    2d60:	3303      	adds	r3, #3
    2d62:	2201      	movs	r2, #1
    2d64:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2d66:	d001      	beq.n	2d6c <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2d68:	2317      	movs	r3, #23
    2d6a:	e1c4      	b.n	30f6 <tc_init+0x44e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2d6c:	687b      	ldr	r3, [r7, #4]
    2d6e:	789a      	ldrb	r2, [r3, #2]
    2d70:	68fb      	ldr	r3, [r7, #12]
    2d72:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2d74:	68bb      	ldr	r3, [r7, #8]
    2d76:	881b      	ldrh	r3, [r3, #0]
    2d78:	b29b      	uxth	r3, r3
    2d7a:	001a      	movs	r2, r3
    2d7c:	2301      	movs	r3, #1
    2d7e:	4013      	ands	r3, r2
    2d80:	d001      	beq.n	2d86 <tc_init+0xde>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2d82:	2305      	movs	r3, #5
    2d84:	e1b7      	b.n	30f6 <tc_init+0x44e>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2d86:	68bb      	ldr	r3, [r7, #8]
    2d88:	7bdb      	ldrb	r3, [r3, #15]
    2d8a:	b2db      	uxtb	r3, r3
    2d8c:	001a      	movs	r2, r3
    2d8e:	2310      	movs	r3, #16
    2d90:	4013      	ands	r3, r2
    2d92:	d001      	beq.n	2d98 <tc_init+0xf0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    2d94:	231c      	movs	r3, #28
    2d96:	e1ae      	b.n	30f6 <tc_init+0x44e>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2d98:	68bb      	ldr	r3, [r7, #8]
    2d9a:	881b      	ldrh	r3, [r3, #0]
    2d9c:	b29b      	uxth	r3, r3
    2d9e:	001a      	movs	r2, r3
    2da0:	2302      	movs	r3, #2
    2da2:	4013      	ands	r3, r2
    2da4:	d001      	beq.n	2daa <tc_init+0x102>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    2da6:	231c      	movs	r3, #28
    2da8:	e1a5      	b.n	30f6 <tc_init+0x44e>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    2daa:	687b      	ldr	r3, [r7, #4]
    2dac:	7c1b      	ldrb	r3, [r3, #16]
    2dae:	2b00      	cmp	r3, #0
    2db0:	d017      	beq.n	2de2 <tc_init+0x13a>
		system_pinmux_get_config_defaults(&pin_config);
    2db2:	2318      	movs	r3, #24
    2db4:	18fb      	adds	r3, r7, r3
    2db6:	0018      	movs	r0, r3
    2db8:	4b8b      	ldr	r3, [pc, #556]	; (2fe8 <tc_init+0x340>)
    2dba:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2dbc:	687b      	ldr	r3, [r7, #4]
    2dbe:	699b      	ldr	r3, [r3, #24]
    2dc0:	b2da      	uxtb	r2, r3
    2dc2:	2318      	movs	r3, #24
    2dc4:	18fb      	adds	r3, r7, r3
    2dc6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2dc8:	2318      	movs	r3, #24
    2dca:	18fb      	adds	r3, r7, r3
    2dcc:	2201      	movs	r2, #1
    2dce:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    2dd0:	687b      	ldr	r3, [r7, #4]
    2dd2:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    2dd4:	b2db      	uxtb	r3, r3
    2dd6:	2218      	movs	r2, #24
    2dd8:	18ba      	adds	r2, r7, r2
    2dda:	0011      	movs	r1, r2
    2ddc:	0018      	movs	r0, r3
    2dde:	4b83      	ldr	r3, [pc, #524]	; (2fec <tc_init+0x344>)
    2de0:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    2de2:	687b      	ldr	r3, [r7, #4]
    2de4:	7f1b      	ldrb	r3, [r3, #28]
    2de6:	2b00      	cmp	r3, #0
    2de8:	d017      	beq.n	2e1a <tc_init+0x172>
		system_pinmux_get_config_defaults(&pin_config);
    2dea:	2318      	movs	r3, #24
    2dec:	18fb      	adds	r3, r7, r3
    2dee:	0018      	movs	r0, r3
    2df0:	4b7d      	ldr	r3, [pc, #500]	; (2fe8 <tc_init+0x340>)
    2df2:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2df4:	687b      	ldr	r3, [r7, #4]
    2df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2df8:	b2da      	uxtb	r2, r3
    2dfa:	2318      	movs	r3, #24
    2dfc:	18fb      	adds	r3, r7, r3
    2dfe:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2e00:	2318      	movs	r3, #24
    2e02:	18fb      	adds	r3, r7, r3
    2e04:	2201      	movs	r2, #1
    2e06:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    2e08:	687b      	ldr	r3, [r7, #4]
    2e0a:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    2e0c:	b2db      	uxtb	r3, r3
    2e0e:	2218      	movs	r2, #24
    2e10:	18ba      	adds	r2, r7, r2
    2e12:	0011      	movs	r1, r2
    2e14:	0018      	movs	r0, r3
    2e16:	4b75      	ldr	r3, [pc, #468]	; (2fec <tc_init+0x344>)
    2e18:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    2e1a:	2329      	movs	r3, #41	; 0x29
    2e1c:	18fb      	adds	r3, r7, r3
    2e1e:	781a      	ldrb	r2, [r3, #0]
    2e20:	231c      	movs	r3, #28
    2e22:	18fb      	adds	r3, r7, r3
    2e24:	0052      	lsls	r2, r2, #1
    2e26:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2e28:	0019      	movs	r1, r3
    2e2a:	2002      	movs	r0, #2
    2e2c:	4b70      	ldr	r3, [pc, #448]	; (2ff0 <tc_init+0x348>)
    2e2e:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    2e30:	687b      	ldr	r3, [r7, #4]
    2e32:	789b      	ldrb	r3, [r3, #2]
    2e34:	2b08      	cmp	r3, #8
    2e36:	d10b      	bne.n	2e50 <tc_init+0x1a8>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    2e38:	2329      	movs	r3, #41	; 0x29
    2e3a:	18fb      	adds	r3, r7, r3
    2e3c:	781b      	ldrb	r3, [r3, #0]
    2e3e:	1c5a      	adds	r2, r3, #1
    2e40:	231c      	movs	r3, #28
    2e42:	18fb      	adds	r3, r7, r3
    2e44:	0052      	lsls	r2, r2, #1
    2e46:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2e48:	0019      	movs	r1, r3
    2e4a:	2002      	movs	r0, #2
    2e4c:	4b68      	ldr	r3, [pc, #416]	; (2ff0 <tc_init+0x348>)
    2e4e:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    2e50:	2314      	movs	r3, #20
    2e52:	18fb      	adds	r3, r7, r3
    2e54:	0018      	movs	r0, r3
    2e56:	4b67      	ldr	r3, [pc, #412]	; (2ff4 <tc_init+0x34c>)
    2e58:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    2e5a:	687b      	ldr	r3, [r7, #4]
    2e5c:	781a      	ldrb	r2, [r3, #0]
    2e5e:	2314      	movs	r3, #20
    2e60:	18fb      	adds	r3, r7, r3
    2e62:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2e64:	2329      	movs	r3, #41	; 0x29
    2e66:	18fb      	adds	r3, r7, r3
    2e68:	781b      	ldrb	r3, [r3, #0]
    2e6a:	2224      	movs	r2, #36	; 0x24
    2e6c:	18ba      	adds	r2, r7, r2
    2e6e:	5cd3      	ldrb	r3, [r2, r3]
    2e70:	2214      	movs	r2, #20
    2e72:	18ba      	adds	r2, r7, r2
    2e74:	0011      	movs	r1, r2
    2e76:	0018      	movs	r0, r3
    2e78:	4b5f      	ldr	r3, [pc, #380]	; (2ff8 <tc_init+0x350>)
    2e7a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2e7c:	2329      	movs	r3, #41	; 0x29
    2e7e:	18fb      	adds	r3, r7, r3
    2e80:	781b      	ldrb	r3, [r3, #0]
    2e82:	2224      	movs	r2, #36	; 0x24
    2e84:	18ba      	adds	r2, r7, r2
    2e86:	5cd3      	ldrb	r3, [r2, r3]
    2e88:	0018      	movs	r0, r3
    2e8a:	4b5c      	ldr	r3, [pc, #368]	; (2ffc <tc_init+0x354>)
    2e8c:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    2e8e:	687b      	ldr	r3, [r7, #4]
    2e90:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    2e92:	687b      	ldr	r3, [r7, #4]
    2e94:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    2e96:	4313      	orrs	r3, r2
    2e98:	b2db      	uxtb	r3, r3
    2e9a:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
    2e9c:	687b      	ldr	r3, [r7, #4]
    2e9e:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    2ea0:	4313      	orrs	r3, r2
    2ea2:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    2ea4:	687b      	ldr	r3, [r7, #4]
    2ea6:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    2ea8:	232e      	movs	r3, #46	; 0x2e
    2eaa:	18fb      	adds	r3, r7, r3
    2eac:	430a      	orrs	r2, r1
    2eae:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    2eb0:	687b      	ldr	r3, [r7, #4]
    2eb2:	785b      	ldrb	r3, [r3, #1]
    2eb4:	2b00      	cmp	r3, #0
    2eb6:	d008      	beq.n	2eca <tc_init+0x222>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2eb8:	232e      	movs	r3, #46	; 0x2e
    2eba:	18fb      	adds	r3, r7, r3
    2ebc:	222e      	movs	r2, #46	; 0x2e
    2ebe:	18ba      	adds	r2, r7, r2
    2ec0:	8812      	ldrh	r2, [r2, #0]
    2ec2:	2180      	movs	r1, #128	; 0x80
    2ec4:	0109      	lsls	r1, r1, #4
    2ec6:	430a      	orrs	r2, r1
    2ec8:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	68fb      	ldr	r3, [r7, #12]
    2ece:	0018      	movs	r0, r3
    2ed0:	4b4b      	ldr	r3, [pc, #300]	; (3000 <tc_init+0x358>)
    2ed2:	4798      	blx	r3
    2ed4:	1e03      	subs	r3, r0, #0
    2ed6:	d1f9      	bne.n	2ecc <tc_init+0x224>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2ed8:	68bb      	ldr	r3, [r7, #8]
    2eda:	222e      	movs	r2, #46	; 0x2e
    2edc:	18ba      	adds	r2, r7, r2
    2ede:	8812      	ldrh	r2, [r2, #0]
    2ee0:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    2ee2:	687b      	ldr	r3, [r7, #4]
    2ee4:	7b5b      	ldrb	r3, [r3, #13]
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d003      	beq.n	2ef2 <tc_init+0x24a>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    2eea:	232d      	movs	r3, #45	; 0x2d
    2eec:	18fb      	adds	r3, r7, r3
    2eee:	2204      	movs	r2, #4
    2ef0:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    2ef2:	687b      	ldr	r3, [r7, #4]
    2ef4:	7b9b      	ldrb	r3, [r3, #14]
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	d007      	beq.n	2f0a <tc_init+0x262>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2efa:	232d      	movs	r3, #45	; 0x2d
    2efc:	18fb      	adds	r3, r7, r3
    2efe:	222d      	movs	r2, #45	; 0x2d
    2f00:	18ba      	adds	r2, r7, r2
    2f02:	7812      	ldrb	r2, [r2, #0]
    2f04:	2101      	movs	r1, #1
    2f06:	430a      	orrs	r2, r1
    2f08:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    2f0a:	46c0      	nop			; (mov r8, r8)
    2f0c:	68fb      	ldr	r3, [r7, #12]
    2f0e:	0018      	movs	r0, r3
    2f10:	4b3b      	ldr	r3, [pc, #236]	; (3000 <tc_init+0x358>)
    2f12:	4798      	blx	r3
    2f14:	1e03      	subs	r3, r0, #0
    2f16:	d1f9      	bne.n	2f0c <tc_init+0x264>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    2f18:	68bb      	ldr	r3, [r7, #8]
    2f1a:	22ff      	movs	r2, #255	; 0xff
    2f1c:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    2f1e:	232d      	movs	r3, #45	; 0x2d
    2f20:	18fb      	adds	r3, r7, r3
    2f22:	781b      	ldrb	r3, [r3, #0]
    2f24:	2b00      	cmp	r3, #0
    2f26:	d00b      	beq.n	2f40 <tc_init+0x298>
		while (tc_is_syncing(module_inst)) {
    2f28:	46c0      	nop			; (mov r8, r8)
    2f2a:	68fb      	ldr	r3, [r7, #12]
    2f2c:	0018      	movs	r0, r3
    2f2e:	4b34      	ldr	r3, [pc, #208]	; (3000 <tc_init+0x358>)
    2f30:	4798      	blx	r3
    2f32:	1e03      	subs	r3, r0, #0
    2f34:	d1f9      	bne.n	2f2a <tc_init+0x282>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    2f36:	68bb      	ldr	r3, [r7, #8]
    2f38:	222d      	movs	r2, #45	; 0x2d
    2f3a:	18ba      	adds	r2, r7, r2
    2f3c:	7812      	ldrb	r2, [r2, #0]
    2f3e:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    2f40:	232c      	movs	r3, #44	; 0x2c
    2f42:	18fb      	adds	r3, r7, r3
    2f44:	687a      	ldr	r2, [r7, #4]
    2f46:	7a92      	ldrb	r2, [r2, #10]
    2f48:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    2f4a:	232a      	movs	r3, #42	; 0x2a
    2f4c:	18fb      	adds	r3, r7, r3
    2f4e:	2200      	movs	r2, #0
    2f50:	701a      	strb	r2, [r3, #0]
    2f52:	e01c      	b.n	2f8e <tc_init+0x2e6>
		if (config->enable_capture_on_channel[i] == true) {
    2f54:	232a      	movs	r3, #42	; 0x2a
    2f56:	18fb      	adds	r3, r7, r3
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	687a      	ldr	r2, [r7, #4]
    2f5c:	18d3      	adds	r3, r2, r3
    2f5e:	7adb      	ldrb	r3, [r3, #11]
    2f60:	2b00      	cmp	r3, #0
    2f62:	d00d      	beq.n	2f80 <tc_init+0x2d8>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2f64:	232a      	movs	r3, #42	; 0x2a
    2f66:	18fb      	adds	r3, r7, r3
    2f68:	781b      	ldrb	r3, [r3, #0]
    2f6a:	2210      	movs	r2, #16
    2f6c:	409a      	lsls	r2, r3
    2f6e:	0013      	movs	r3, r2
    2f70:	b2d9      	uxtb	r1, r3
    2f72:	232c      	movs	r3, #44	; 0x2c
    2f74:	18fb      	adds	r3, r7, r3
    2f76:	222c      	movs	r2, #44	; 0x2c
    2f78:	18ba      	adds	r2, r7, r2
    2f7a:	7812      	ldrb	r2, [r2, #0]
    2f7c:	430a      	orrs	r2, r1
    2f7e:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    2f80:	232a      	movs	r3, #42	; 0x2a
    2f82:	18fb      	adds	r3, r7, r3
    2f84:	781a      	ldrb	r2, [r3, #0]
    2f86:	232a      	movs	r3, #42	; 0x2a
    2f88:	18fb      	adds	r3, r7, r3
    2f8a:	3201      	adds	r2, #1
    2f8c:	701a      	strb	r2, [r3, #0]
    2f8e:	232a      	movs	r3, #42	; 0x2a
    2f90:	18fb      	adds	r3, r7, r3
    2f92:	781b      	ldrb	r3, [r3, #0]
    2f94:	2b01      	cmp	r3, #1
    2f96:	d9dd      	bls.n	2f54 <tc_init+0x2ac>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2f98:	46c0      	nop			; (mov r8, r8)
    2f9a:	68fb      	ldr	r3, [r7, #12]
    2f9c:	0018      	movs	r0, r3
    2f9e:	4b18      	ldr	r3, [pc, #96]	; (3000 <tc_init+0x358>)
    2fa0:	4798      	blx	r3
    2fa2:	1e03      	subs	r3, r0, #0
    2fa4:	d1f9      	bne.n	2f9a <tc_init+0x2f2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2fa6:	68bb      	ldr	r3, [r7, #8]
    2fa8:	222c      	movs	r2, #44	; 0x2c
    2faa:	18ba      	adds	r2, r7, r2
    2fac:	7812      	ldrb	r2, [r2, #0]
    2fae:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2fb0:	46c0      	nop			; (mov r8, r8)
    2fb2:	68fb      	ldr	r3, [r7, #12]
    2fb4:	0018      	movs	r0, r3
    2fb6:	4b12      	ldr	r3, [pc, #72]	; (3000 <tc_init+0x358>)
    2fb8:	4798      	blx	r3
    2fba:	1e03      	subs	r3, r0, #0
    2fbc:	d1f9      	bne.n	2fb2 <tc_init+0x30a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    2fbe:	68fb      	ldr	r3, [r7, #12]
    2fc0:	791b      	ldrb	r3, [r3, #4]
    2fc2:	2b04      	cmp	r3, #4
    2fc4:	d01e      	beq.n	3004 <tc_init+0x35c>
    2fc6:	2b08      	cmp	r3, #8
    2fc8:	d100      	bne.n	2fcc <tc_init+0x324>
    2fca:	e070      	b.n	30ae <tc_init+0x406>
    2fcc:	2b00      	cmp	r3, #0
    2fce:	d04b      	beq.n	3068 <tc_init+0x3c0>
    2fd0:	e090      	b.n	30f4 <tc_init+0x44c>
    2fd2:	46c0      	nop			; (mov r8, r8)
    2fd4:	00002c61 	.word	0x00002c61
    2fd8:	0000cacc 	.word	0x0000cacc
    2fdc:	0000c209 	.word	0x0000c209
    2fe0:	0000cad0 	.word	0x0000cad0
    2fe4:	200010a8 	.word	0x200010a8
    2fe8:	00002c11 	.word	0x00002c11
    2fec:	0000b1b1 	.word	0x0000b1b1
    2ff0:	00002bb5 	.word	0x00002bb5
    2ff4:	00002b9d 	.word	0x00002b9d
    2ff8:	0000aec5 	.word	0x0000aec5
    2ffc:	0000af09 	.word	0x0000af09
    3000:	00002c39 	.word	0x00002c39
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    3004:	46c0      	nop			; (mov r8, r8)
    3006:	68fb      	ldr	r3, [r7, #12]
    3008:	0018      	movs	r0, r3
    300a:	4b3d      	ldr	r3, [pc, #244]	; (3100 <tc_init+0x458>)
    300c:	4798      	blx	r3
    300e:	1e03      	subs	r3, r0, #0
    3010:	d1f9      	bne.n	3006 <tc_init+0x35e>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    3012:	687b      	ldr	r3, [r7, #4]
    3014:	2228      	movs	r2, #40	; 0x28
    3016:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    3018:	68bb      	ldr	r3, [r7, #8]
    301a:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    301c:	46c0      	nop			; (mov r8, r8)
    301e:	68fb      	ldr	r3, [r7, #12]
    3020:	0018      	movs	r0, r3
    3022:	4b37      	ldr	r3, [pc, #220]	; (3100 <tc_init+0x458>)
    3024:	4798      	blx	r3
    3026:	1e03      	subs	r3, r0, #0
    3028:	d1f9      	bne.n	301e <tc_init+0x376>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    302a:	687b      	ldr	r3, [r7, #4]
    302c:	2229      	movs	r2, #41	; 0x29
    302e:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    3030:	68bb      	ldr	r3, [r7, #8]
    3032:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    3034:	46c0      	nop			; (mov r8, r8)
    3036:	68fb      	ldr	r3, [r7, #12]
    3038:	0018      	movs	r0, r3
    303a:	4b31      	ldr	r3, [pc, #196]	; (3100 <tc_init+0x458>)
    303c:	4798      	blx	r3
    303e:	1e03      	subs	r3, r0, #0
    3040:	d1f9      	bne.n	3036 <tc_init+0x38e>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    3042:	687b      	ldr	r3, [r7, #4]
    3044:	222a      	movs	r2, #42	; 0x2a
    3046:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    3048:	68bb      	ldr	r3, [r7, #8]
    304a:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    304c:	46c0      	nop			; (mov r8, r8)
    304e:	68fb      	ldr	r3, [r7, #12]
    3050:	0018      	movs	r0, r3
    3052:	4b2b      	ldr	r3, [pc, #172]	; (3100 <tc_init+0x458>)
    3054:	4798      	blx	r3
    3056:	1e03      	subs	r3, r0, #0
    3058:	d1f9      	bne.n	304e <tc_init+0x3a6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    305a:	687b      	ldr	r3, [r7, #4]
    305c:	222b      	movs	r2, #43	; 0x2b
    305e:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    3060:	68bb      	ldr	r3, [r7, #8]
    3062:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    3064:	2300      	movs	r3, #0
    3066:	e046      	b.n	30f6 <tc_init+0x44e>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    3068:	46c0      	nop			; (mov r8, r8)
    306a:	68fb      	ldr	r3, [r7, #12]
    306c:	0018      	movs	r0, r3
    306e:	4b24      	ldr	r3, [pc, #144]	; (3100 <tc_init+0x458>)
    3070:	4798      	blx	r3
    3072:	1e03      	subs	r3, r0, #0
    3074:	d1f9      	bne.n	306a <tc_init+0x3c2>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    3076:	687b      	ldr	r3, [r7, #4]
    3078:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    307a:	68bb      	ldr	r3, [r7, #8]
    307c:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	68fb      	ldr	r3, [r7, #12]
    3082:	0018      	movs	r0, r3
    3084:	4b1e      	ldr	r3, [pc, #120]	; (3100 <tc_init+0x458>)
    3086:	4798      	blx	r3
    3088:	1e03      	subs	r3, r0, #0
    308a:	d1f9      	bne.n	3080 <tc_init+0x3d8>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    308c:	687b      	ldr	r3, [r7, #4]
    308e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    3090:	68bb      	ldr	r3, [r7, #8]
    3092:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3094:	46c0      	nop			; (mov r8, r8)
    3096:	68fb      	ldr	r3, [r7, #12]
    3098:	0018      	movs	r0, r3
    309a:	4b19      	ldr	r3, [pc, #100]	; (3100 <tc_init+0x458>)
    309c:	4798      	blx	r3
    309e:	1e03      	subs	r3, r0, #0
    30a0:	d1f9      	bne.n	3096 <tc_init+0x3ee>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    30a6:	68bb      	ldr	r3, [r7, #8]
    30a8:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    30aa:	2300      	movs	r3, #0
    30ac:	e023      	b.n	30f6 <tc_init+0x44e>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    30ae:	46c0      	nop			; (mov r8, r8)
    30b0:	68fb      	ldr	r3, [r7, #12]
    30b2:	0018      	movs	r0, r3
    30b4:	4b12      	ldr	r3, [pc, #72]	; (3100 <tc_init+0x458>)
    30b6:	4798      	blx	r3
    30b8:	1e03      	subs	r3, r0, #0
    30ba:	d1f9      	bne.n	30b0 <tc_init+0x408>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30c0:	68bb      	ldr	r3, [r7, #8]
    30c2:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    30c4:	46c0      	nop			; (mov r8, r8)
    30c6:	68fb      	ldr	r3, [r7, #12]
    30c8:	0018      	movs	r0, r3
    30ca:	4b0d      	ldr	r3, [pc, #52]	; (3100 <tc_init+0x458>)
    30cc:	4798      	blx	r3
    30ce:	1e03      	subs	r3, r0, #0
    30d0:	d1f9      	bne.n	30c6 <tc_init+0x41e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    30d2:	687b      	ldr	r3, [r7, #4]
    30d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    30d6:	68bb      	ldr	r3, [r7, #8]
    30d8:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    30da:	46c0      	nop			; (mov r8, r8)
    30dc:	68fb      	ldr	r3, [r7, #12]
    30de:	0018      	movs	r0, r3
    30e0:	4b07      	ldr	r3, [pc, #28]	; (3100 <tc_init+0x458>)
    30e2:	4798      	blx	r3
    30e4:	1e03      	subs	r3, r0, #0
    30e6:	d1f9      	bne.n	30dc <tc_init+0x434>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    30e8:	687b      	ldr	r3, [r7, #4]
    30ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    30ec:	68bb      	ldr	r3, [r7, #8]
    30ee:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    30f0:	2300      	movs	r3, #0
    30f2:	e000      	b.n	30f6 <tc_init+0x44e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    30f4:	2317      	movs	r3, #23
}
    30f6:	0018      	movs	r0, r3
    30f8:	46bd      	mov	sp, r7
    30fa:	b00d      	add	sp, #52	; 0x34
    30fc:	bd90      	pop	{r4, r7, pc}
    30fe:	46c0      	nop			; (mov r8, r8)
    3100:	00002c39 	.word	0x00002c39

00003104 <tc_get_count_value>:
 *
 * \return Count value of the specified TC module.
 */
uint32_t tc_get_count_value(
		const struct tc_module *const module_inst)
{
    3104:	b580      	push	{r7, lr}
    3106:	b084      	sub	sp, #16
    3108:	af00      	add	r7, sp, #0
    310a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	681b      	ldr	r3, [r3, #0]
    3110:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	0018      	movs	r0, r3
    3118:	4b0e      	ldr	r3, [pc, #56]	; (3154 <tc_get_count_value+0x50>)
    311a:	4798      	blx	r3
    311c:	1e03      	subs	r3, r0, #0
    311e:	d1f9      	bne.n	3114 <tc_get_count_value+0x10>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    3120:	687b      	ldr	r3, [r7, #4]
    3122:	791b      	ldrb	r3, [r3, #4]
    3124:	2b04      	cmp	r3, #4
    3126:	d004      	beq.n	3132 <tc_get_count_value+0x2e>
    3128:	2b08      	cmp	r3, #8
    312a:	d00a      	beq.n	3142 <tc_get_count_value+0x3e>
    312c:	2b00      	cmp	r3, #0
    312e:	d004      	beq.n	313a <tc_get_count_value+0x36>
    3130:	e00a      	b.n	3148 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    3132:	68fb      	ldr	r3, [r7, #12]
    3134:	7c1b      	ldrb	r3, [r3, #16]
    3136:	b2db      	uxtb	r3, r3
    3138:	e007      	b.n	314a <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    313a:	68fb      	ldr	r3, [r7, #12]
    313c:	8a1b      	ldrh	r3, [r3, #16]
    313e:	b29b      	uxth	r3, r3
    3140:	e003      	b.n	314a <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    3142:	68fb      	ldr	r3, [r7, #12]
    3144:	691b      	ldr	r3, [r3, #16]
    3146:	e000      	b.n	314a <tc_get_count_value+0x46>
	}

	Assert(false);
	return 0;
    3148:	2300      	movs	r3, #0
}
    314a:	0018      	movs	r0, r3
    314c:	46bd      	mov	sp, r7
    314e:	b004      	add	sp, #16
    3150:	bd80      	pop	{r7, pc}
    3152:	46c0      	nop			; (mov r8, r8)
    3154:	00002c39 	.word	0x00002c39

00003158 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    3158:	b580      	push	{r7, lr}
    315a:	b086      	sub	sp, #24
    315c:	af00      	add	r7, sp, #0
    315e:	60f8      	str	r0, [r7, #12]
    3160:	607a      	str	r2, [r7, #4]
    3162:	230b      	movs	r3, #11
    3164:	18fb      	adds	r3, r7, r3
    3166:	1c0a      	adds	r2, r1, #0
    3168:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    316a:	68fb      	ldr	r3, [r7, #12]
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	617b      	str	r3, [r7, #20]

	while (tc_is_syncing(module_inst)) {
    3170:	46c0      	nop			; (mov r8, r8)
    3172:	68fb      	ldr	r3, [r7, #12]
    3174:	0018      	movs	r0, r3
    3176:	4b20      	ldr	r3, [pc, #128]	; (31f8 <tc_set_compare_value+0xa0>)
    3178:	4798      	blx	r3
    317a:	1e03      	subs	r3, r0, #0
    317c:	d1f9      	bne.n	3172 <tc_set_compare_value+0x1a>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    317e:	68fb      	ldr	r3, [r7, #12]
    3180:	791b      	ldrb	r3, [r3, #4]
    3182:	2b04      	cmp	r3, #4
    3184:	d004      	beq.n	3190 <tc_set_compare_value+0x38>
    3186:	2b08      	cmp	r3, #8
    3188:	d022      	beq.n	31d0 <tc_set_compare_value+0x78>
    318a:	2b00      	cmp	r3, #0
    318c:	d010      	beq.n	31b0 <tc_set_compare_value+0x58>
    318e:	e02e      	b.n	31ee <tc_set_compare_value+0x96>
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    3190:	230b      	movs	r3, #11
    3192:	18fb      	adds	r3, r7, r3
    3194:	781b      	ldrb	r3, [r3, #0]
    3196:	2b01      	cmp	r3, #1
    3198:	d80a      	bhi.n	31b0 <tc_set_compare_value+0x58>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    319a:	230b      	movs	r3, #11
    319c:	18fb      	adds	r3, r7, r3
    319e:	781b      	ldrb	r3, [r3, #0]
						(uint8_t)compare;
    31a0:	687a      	ldr	r2, [r7, #4]
    31a2:	b2d1      	uxtb	r1, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    31a4:	697a      	ldr	r2, [r7, #20]
    31a6:	18d3      	adds	r3, r2, r3
    31a8:	1c0a      	adds	r2, r1, #0
    31aa:	761a      	strb	r2, [r3, #24]
						(uint8_t)compare;
				return STATUS_OK;
    31ac:	2300      	movs	r3, #0
    31ae:	e01f      	b.n	31f0 <tc_set_compare_value+0x98>
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    31b0:	230b      	movs	r3, #11
    31b2:	18fb      	adds	r3, r7, r3
    31b4:	781b      	ldrb	r3, [r3, #0]
    31b6:	2b01      	cmp	r3, #1
    31b8:	d80a      	bhi.n	31d0 <tc_set_compare_value+0x78>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    31ba:	230b      	movs	r3, #11
    31bc:	18fb      	adds	r3, r7, r3
    31be:	781a      	ldrb	r2, [r3, #0]
						(uint16_t)compare;
    31c0:	687b      	ldr	r3, [r7, #4]
    31c2:	b299      	uxth	r1, r3
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    31c4:	697b      	ldr	r3, [r7, #20]
    31c6:	320c      	adds	r2, #12
    31c8:	0052      	lsls	r2, r2, #1
    31ca:	52d1      	strh	r1, [r2, r3]
						(uint16_t)compare;
				return STATUS_OK;
    31cc:	2300      	movs	r3, #0
    31ce:	e00f      	b.n	31f0 <tc_set_compare_value+0x98>
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    31d0:	230b      	movs	r3, #11
    31d2:	18fb      	adds	r3, r7, r3
    31d4:	781b      	ldrb	r3, [r3, #0]
    31d6:	2b01      	cmp	r3, #1
    31d8:	d809      	bhi.n	31ee <tc_set_compare_value+0x96>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    31da:	230b      	movs	r3, #11
    31dc:	18fb      	adds	r3, r7, r3
    31de:	781a      	ldrb	r2, [r3, #0]
    31e0:	697b      	ldr	r3, [r7, #20]
    31e2:	3206      	adds	r2, #6
    31e4:	0092      	lsls	r2, r2, #2
    31e6:	6879      	ldr	r1, [r7, #4]
    31e8:	50d1      	str	r1, [r2, r3]
						(uint32_t)compare;
				return STATUS_OK;
    31ea:	2300      	movs	r3, #0
    31ec:	e000      	b.n	31f0 <tc_set_compare_value+0x98>
			}
	}

	return STATUS_ERR_INVALID_ARG;
    31ee:	2317      	movs	r3, #23
}
    31f0:	0018      	movs	r0, r3
    31f2:	46bd      	mov	sp, r7
    31f4:	b006      	add	sp, #24
    31f6:	bd80      	pop	{r7, pc}
    31f8:	00002c39 	.word	0x00002c39

000031fc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    31fc:	b580      	push	{r7, lr}
    31fe:	b084      	sub	sp, #16
    3200:	af00      	add	r7, sp, #0
    3202:	0002      	movs	r2, r0
    3204:	1dfb      	adds	r3, r7, #7
    3206:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3208:	230f      	movs	r3, #15
    320a:	18fb      	adds	r3, r7, r3
    320c:	1dfa      	adds	r2, r7, #7
    320e:	7812      	ldrb	r2, [r2, #0]
    3210:	09d2      	lsrs	r2, r2, #7
    3212:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3214:	230e      	movs	r3, #14
    3216:	18fb      	adds	r3, r7, r3
    3218:	1dfa      	adds	r2, r7, #7
    321a:	7812      	ldrb	r2, [r2, #0]
    321c:	0952      	lsrs	r2, r2, #5
    321e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3220:	4b0d      	ldr	r3, [pc, #52]	; (3258 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3222:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3224:	230f      	movs	r3, #15
    3226:	18fb      	adds	r3, r7, r3
    3228:	781b      	ldrb	r3, [r3, #0]
    322a:	2b00      	cmp	r3, #0
    322c:	d10f      	bne.n	324e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    322e:	230f      	movs	r3, #15
    3230:	18fb      	adds	r3, r7, r3
    3232:	781b      	ldrb	r3, [r3, #0]
    3234:	009b      	lsls	r3, r3, #2
    3236:	2210      	movs	r2, #16
    3238:	4694      	mov	ip, r2
    323a:	44bc      	add	ip, r7
    323c:	4463      	add	r3, ip
    323e:	3b08      	subs	r3, #8
    3240:	681a      	ldr	r2, [r3, #0]
    3242:	230e      	movs	r3, #14
    3244:	18fb      	adds	r3, r7, r3
    3246:	781b      	ldrb	r3, [r3, #0]
    3248:	01db      	lsls	r3, r3, #7
    324a:	18d3      	adds	r3, r2, r3
    324c:	e000      	b.n	3250 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    324e:	2300      	movs	r3, #0
	}
}
    3250:	0018      	movs	r0, r3
    3252:	46bd      	mov	sp, r7
    3254:	b004      	add	sp, #16
    3256:	bd80      	pop	{r7, pc}
    3258:	41004400 	.word	0x41004400

0000325c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    325c:	b580      	push	{r7, lr}
    325e:	b082      	sub	sp, #8
    3260:	af00      	add	r7, sp, #0
    3262:	0002      	movs	r2, r0
    3264:	1dfb      	adds	r3, r7, #7
    3266:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3268:	1dfb      	adds	r3, r7, #7
    326a:	781b      	ldrb	r3, [r3, #0]
    326c:	0018      	movs	r0, r3
    326e:	4b03      	ldr	r3, [pc, #12]	; (327c <port_get_group_from_gpio_pin+0x20>)
    3270:	4798      	blx	r3
    3272:	0003      	movs	r3, r0
}
    3274:	0018      	movs	r0, r3
    3276:	46bd      	mov	sp, r7
    3278:	b002      	add	sp, #8
    327a:	bd80      	pop	{r7, pc}
    327c:	000031fd 	.word	0x000031fd

00003280 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3280:	b580      	push	{r7, lr}
    3282:	b084      	sub	sp, #16
    3284:	af00      	add	r7, sp, #0
    3286:	0002      	movs	r2, r0
    3288:	1dfb      	adds	r3, r7, #7
    328a:	701a      	strb	r2, [r3, #0]
    328c:	1dbb      	adds	r3, r7, #6
    328e:	1c0a      	adds	r2, r1, #0
    3290:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3292:	1dfb      	adds	r3, r7, #7
    3294:	781b      	ldrb	r3, [r3, #0]
    3296:	0018      	movs	r0, r3
    3298:	4b0d      	ldr	r3, [pc, #52]	; (32d0 <port_pin_set_output_level+0x50>)
    329a:	4798      	blx	r3
    329c:	0003      	movs	r3, r0
    329e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    32a0:	1dfb      	adds	r3, r7, #7
    32a2:	781b      	ldrb	r3, [r3, #0]
    32a4:	221f      	movs	r2, #31
    32a6:	4013      	ands	r3, r2
    32a8:	2201      	movs	r2, #1
    32aa:	409a      	lsls	r2, r3
    32ac:	0013      	movs	r3, r2
    32ae:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    32b0:	1dbb      	adds	r3, r7, #6
    32b2:	781b      	ldrb	r3, [r3, #0]
    32b4:	2b00      	cmp	r3, #0
    32b6:	d003      	beq.n	32c0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    32b8:	68fb      	ldr	r3, [r7, #12]
    32ba:	68ba      	ldr	r2, [r7, #8]
    32bc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    32be:	e002      	b.n	32c6 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    32c0:	68fb      	ldr	r3, [r7, #12]
    32c2:	68ba      	ldr	r2, [r7, #8]
    32c4:	615a      	str	r2, [r3, #20]
	}
}
    32c6:	46c0      	nop			; (mov r8, r8)
    32c8:	46bd      	mov	sp, r7
    32ca:	b004      	add	sp, #16
    32cc:	bd80      	pop	{r7, pc}
    32ce:	46c0      	nop			; (mov r8, r8)
    32d0:	0000325d 	.word	0x0000325d

000032d4 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    32d4:	b580      	push	{r7, lr}
    32d6:	b084      	sub	sp, #16
    32d8:	af00      	add	r7, sp, #0
    32da:	0002      	movs	r2, r0
    32dc:	1dfb      	adds	r3, r7, #7
    32de:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    32e0:	1dfb      	adds	r3, r7, #7
    32e2:	781b      	ldrb	r3, [r3, #0]
    32e4:	0018      	movs	r0, r3
    32e6:	4b09      	ldr	r3, [pc, #36]	; (330c <port_pin_toggle_output_level+0x38>)
    32e8:	4798      	blx	r3
    32ea:	0003      	movs	r3, r0
    32ec:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    32ee:	1dfb      	adds	r3, r7, #7
    32f0:	781b      	ldrb	r3, [r3, #0]
    32f2:	221f      	movs	r2, #31
    32f4:	4013      	ands	r3, r2
    32f6:	2201      	movs	r2, #1
    32f8:	409a      	lsls	r2, r3
    32fa:	0013      	movs	r3, r2
    32fc:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    32fe:	68fb      	ldr	r3, [r7, #12]
    3300:	68ba      	ldr	r2, [r7, #8]
    3302:	61da      	str	r2, [r3, #28]
}
    3304:	46c0      	nop			; (mov r8, r8)
    3306:	46bd      	mov	sp, r7
    3308:	b004      	add	sp, #16
    330a:	bd80      	pop	{r7, pc}
    330c:	0000325d 	.word	0x0000325d

00003310 <APP_CommandsInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void APP_CommandsInit(void)
{
    3310:	b580      	push	{r7, lr}
    3312:	b082      	sub	sp, #8
    3314:	af00      	add	r7, sp, #0
	appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3316:	4b27      	ldr	r3, [pc, #156]	; (33b4 <APP_CommandsInit+0xa4>)
    3318:	2200      	movs	r2, #0
    331a:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyDurationTimer.handler
		= appCmdIdentifyDurationTimerHandler;
    331c:	4b25      	ldr	r3, [pc, #148]	; (33b4 <APP_CommandsInit+0xa4>)
    331e:	4a26      	ldr	r2, [pc, #152]	; (33b8 <APP_CommandsInit+0xa8>)
    3320:	611a      	str	r2, [r3, #16]

	appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    3322:	4b26      	ldr	r3, [pc, #152]	; (33bc <APP_CommandsInit+0xac>)
    3324:	2201      	movs	r2, #1
    3326:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
    3328:	4b24      	ldr	r3, [pc, #144]	; (33bc <APP_CommandsInit+0xac>)
    332a:	4a25      	ldr	r2, [pc, #148]	; (33c0 <APP_CommandsInit+0xb0>)
    332c:	611a      	str	r2, [r3, #16]

	appCmdInProgress = NULL;
    332e:	4b25      	ldr	r3, [pc, #148]	; (33c4 <APP_CommandsInit+0xb4>)
    3330:	2200      	movs	r2, #0
    3332:	601a      	str	r2, [r3, #0]
	appCmdDataReq.dstAddr = 0;
    3334:	4b24      	ldr	r3, [pc, #144]	; (33c8 <APP_CommandsInit+0xb8>)
    3336:	2200      	movs	r2, #0
    3338:	815a      	strh	r2, [r3, #10]
	appCmdDataReq.dstEndpoint = APP_CMD_ENDPOINT;
    333a:	4b23      	ldr	r3, [pc, #140]	; (33c8 <APP_CommandsInit+0xb8>)
    333c:	2202      	movs	r2, #2
    333e:	731a      	strb	r2, [r3, #12]
	appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
    3340:	4b21      	ldr	r3, [pc, #132]	; (33c8 <APP_CommandsInit+0xb8>)
    3342:	2202      	movs	r2, #2
    3344:	735a      	strb	r2, [r3, #13]
	appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
    3346:	4b20      	ldr	r3, [pc, #128]	; (33c8 <APP_CommandsInit+0xb8>)
    3348:	2202      	movs	r2, #2
    334a:	739a      	strb	r2, [r3, #14]
	appCmdDataReq.confirm = appCmdDataConf;
    334c:	4b1e      	ldr	r3, [pc, #120]	; (33c8 <APP_CommandsInit+0xb8>)
    334e:	4a1f      	ldr	r2, [pc, #124]	; (33cc <APP_CommandsInit+0xbc>)
    3350:	619a      	str	r2, [r3, #24]

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    3352:	1dfb      	adds	r3, r7, #7
    3354:	2200      	movs	r2, #0
    3356:	701a      	strb	r2, [r3, #0]
    3358:	e01f      	b.n	339a <APP_CommandsInit+0x8a>
		appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
    335a:	1dfb      	adds	r3, r7, #7
    335c:	7819      	ldrb	r1, [r3, #0]
    335e:	4a1c      	ldr	r2, [pc, #112]	; (33d0 <APP_CommandsInit+0xc0>)
    3360:	000b      	movs	r3, r1
    3362:	00db      	lsls	r3, r3, #3
    3364:	185b      	adds	r3, r3, r1
    3366:	5c99      	ldrb	r1, [r3, r2]
    3368:	2001      	movs	r0, #1
    336a:	4240      	negs	r0, r0
    336c:	4301      	orrs	r1, r0
    336e:	5499      	strb	r1, [r3, r2]
    3370:	18d3      	adds	r3, r2, r3
    3372:	785a      	ldrb	r2, [r3, #1]
    3374:	2101      	movs	r1, #1
    3376:	4249      	negs	r1, r1
    3378:	430a      	orrs	r2, r1
    337a:	705a      	strb	r2, [r3, #1]
		appCmdPendingTable[i].ready = false;
    337c:	1dfb      	adds	r3, r7, #7
    337e:	781a      	ldrb	r2, [r3, #0]
    3380:	4913      	ldr	r1, [pc, #76]	; (33d0 <APP_CommandsInit+0xc0>)
    3382:	0013      	movs	r3, r2
    3384:	00db      	lsls	r3, r3, #3
    3386:	189b      	adds	r3, r3, r2
    3388:	18cb      	adds	r3, r1, r3
    338a:	3303      	adds	r3, #3
    338c:	2200      	movs	r2, #0
    338e:	701a      	strb	r2, [r3, #0]
	appCmdDataReq.dstEndpoint = APP_CMD_ENDPOINT;
	appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
	appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
	appCmdDataReq.confirm = appCmdDataConf;

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    3390:	1dfb      	adds	r3, r7, #7
    3392:	781a      	ldrb	r2, [r3, #0]
    3394:	1dfb      	adds	r3, r7, #7
    3396:	3201      	adds	r2, #1
    3398:	701a      	strb	r2, [r3, #0]
    339a:	1dfb      	adds	r3, r7, #7
    339c:	781b      	ldrb	r3, [r3, #0]
    339e:	2b04      	cmp	r3, #4
    33a0:	d9db      	bls.n	335a <APP_CommandsInit+0x4a>
		appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
		appCmdPendingTable[i].ready = false;
	}

	NWK_OpenEndpoint(APP_CMD_ENDPOINT, appCmdDataInd);
    33a2:	4b0c      	ldr	r3, [pc, #48]	; (33d4 <APP_CommandsInit+0xc4>)
    33a4:	0019      	movs	r1, r3
    33a6:	2002      	movs	r0, #2
    33a8:	4b0b      	ldr	r3, [pc, #44]	; (33d8 <APP_CommandsInit+0xc8>)
    33aa:	4798      	blx	r3
}
    33ac:	46c0      	nop			; (mov r8, r8)
    33ae:	46bd      	mov	sp, r7
    33b0:	b002      	add	sp, #8
    33b2:	bd80      	pop	{r7, pc}
    33b4:	2000019c 	.word	0x2000019c
    33b8:	000039d9 	.word	0x000039d9
    33bc:	200001b0 	.word	0x200001b0
    33c0:	00003a0d 	.word	0x00003a0d
    33c4:	200001f4 	.word	0x200001f4
    33c8:	200001f8 	.word	0x200001f8
    33cc:	00003839 	.word	0x00003839
    33d0:	200001c4 	.word	0x200001c4
    33d4:	000038e5 	.word	0x000038e5
    33d8:	000063cd 	.word	0x000063cd

000033dc <APP_CommandsPending>:

/*************************************************************************//**
*****************************************************************************/
bool APP_CommandsPending(uint16_t addr)
{
    33dc:	b580      	push	{r7, lr}
    33de:	b084      	sub	sp, #16
    33e0:	af00      	add	r7, sp, #0
    33e2:	0002      	movs	r2, r0
    33e4:	1dbb      	adds	r3, r7, #6
    33e6:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    33e8:	230f      	movs	r3, #15
    33ea:	18fb      	adds	r3, r7, r3
    33ec:	2201      	movs	r2, #1
    33ee:	701a      	strb	r2, [r3, #0]
    33f0:	e026      	b.n	3440 <APP_CommandsPending+0x64>
		if (addr == appCmdPendingTable[i].addr) {
    33f2:	230f      	movs	r3, #15
    33f4:	18fb      	adds	r3, r7, r3
    33f6:	7819      	ldrb	r1, [r3, #0]
    33f8:	4a16      	ldr	r2, [pc, #88]	; (3454 <APP_CommandsPending+0x78>)
    33fa:	000b      	movs	r3, r1
    33fc:	00db      	lsls	r3, r3, #3
    33fe:	185b      	adds	r3, r3, r1
    3400:	5c99      	ldrb	r1, [r3, r2]
    3402:	18d3      	adds	r3, r2, r3
    3404:	785b      	ldrb	r3, [r3, #1]
    3406:	021b      	lsls	r3, r3, #8
    3408:	430b      	orrs	r3, r1
    340a:	b29b      	uxth	r3, r3
    340c:	1dba      	adds	r2, r7, #6
    340e:	8812      	ldrh	r2, [r2, #0]
    3410:	429a      	cmp	r2, r3
    3412:	d10e      	bne.n	3432 <APP_CommandsPending+0x56>
			appCmdPendingTable[i].ready = true;
    3414:	230f      	movs	r3, #15
    3416:	18fb      	adds	r3, r7, r3
    3418:	781a      	ldrb	r2, [r3, #0]
    341a:	490e      	ldr	r1, [pc, #56]	; (3454 <APP_CommandsPending+0x78>)
    341c:	0013      	movs	r3, r2
    341e:	00db      	lsls	r3, r3, #3
    3420:	189b      	adds	r3, r3, r2
    3422:	18cb      	adds	r3, r1, r3
    3424:	3303      	adds	r3, #3
    3426:	2201      	movs	r2, #1
    3428:	701a      	strb	r2, [r3, #0]
			appCmdCheckPendingTable();
    342a:	4b0b      	ldr	r3, [pc, #44]	; (3458 <APP_CommandsPending+0x7c>)
    342c:	4798      	blx	r3
			return true;
    342e:	2301      	movs	r3, #1
    3430:	e00c      	b.n	344c <APP_CommandsPending+0x70>

/*************************************************************************//**
*****************************************************************************/
bool APP_CommandsPending(uint16_t addr)
{
	for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    3432:	230f      	movs	r3, #15
    3434:	18fb      	adds	r3, r7, r3
    3436:	781a      	ldrb	r2, [r3, #0]
    3438:	230f      	movs	r3, #15
    343a:	18fb      	adds	r3, r7, r3
    343c:	3201      	adds	r2, #1
    343e:	701a      	strb	r2, [r3, #0]
    3440:	230f      	movs	r3, #15
    3442:	18fb      	adds	r3, r7, r3
    3444:	781b      	ldrb	r3, [r3, #0]
    3446:	2b04      	cmp	r3, #4
    3448:	d9d3      	bls.n	33f2 <APP_CommandsPending+0x16>
			appCmdCheckPendingTable();
			return true;
		}
	}

	return false;
    344a:	2300      	movs	r3, #0
}
    344c:	0018      	movs	r0, r3
    344e:	46bd      	mov	sp, r7
    3450:	b004      	add	sp, #16
    3452:	bd80      	pop	{r7, pc}
    3454:	200001c4 	.word	0x200001c4
    3458:	0000387d 	.word	0x0000387d

0000345c <APP_CommandsByteReceived>:

/*************************************************************************//**
*****************************************************************************/
void APP_CommandsByteReceived(uint8_t byte)
{
    345c:	b580      	push	{r7, lr}
    345e:	b082      	sub	sp, #8
    3460:	af00      	add	r7, sp, #0
    3462:	0002      	movs	r2, r0
    3464:	1dfb      	adds	r3, r7, #7
    3466:	701a      	strb	r2, [r3, #0]
	switch (appCmdUartState) {
    3468:	4b4c      	ldr	r3, [pc, #304]	; (359c <APP_CommandsByteReceived+0x140>)
    346a:	781b      	ldrb	r3, [r3, #0]
    346c:	2b04      	cmp	r3, #4
    346e:	d900      	bls.n	3472 <APP_CommandsByteReceived+0x16>
    3470:	e08b      	b.n	358a <APP_CommandsByteReceived+0x12e>
    3472:	009a      	lsls	r2, r3, #2
    3474:	4b4a      	ldr	r3, [pc, #296]	; (35a0 <APP_CommandsByteReceived+0x144>)
    3476:	18d3      	adds	r3, r2, r3
    3478:	681b      	ldr	r3, [r3, #0]
    347a:	469f      	mov	pc, r3
	case APP_CMD_UART_STATE_IDLE:
	{
		if (0x10 == byte) {
    347c:	1dfb      	adds	r3, r7, #7
    347e:	781b      	ldrb	r3, [r3, #0]
    3480:	2b10      	cmp	r3, #16
    3482:	d000      	beq.n	3486 <APP_CommandsByteReceived+0x2a>
    3484:	e083      	b.n	358e <APP_CommandsByteReceived+0x132>
			appCmdUartPtr = 0;
    3486:	4b47      	ldr	r3, [pc, #284]	; (35a4 <APP_CommandsByteReceived+0x148>)
    3488:	2200      	movs	r2, #0
    348a:	701a      	strb	r2, [r3, #0]
			appCmdUartCsum = byte;
    348c:	4b46      	ldr	r3, [pc, #280]	; (35a8 <APP_CommandsByteReceived+0x14c>)
    348e:	1dfa      	adds	r2, r7, #7
    3490:	7812      	ldrb	r2, [r2, #0]
    3492:	701a      	strb	r2, [r3, #0]
			appCmdUartState = APP_CMD_UART_STATE_SYNC;
    3494:	4b41      	ldr	r3, [pc, #260]	; (359c <APP_CommandsByteReceived+0x140>)
    3496:	2201      	movs	r2, #1
    3498:	701a      	strb	r2, [r3, #0]
		}
	}
	break;
    349a:	e078      	b.n	358e <APP_CommandsByteReceived+0x132>

	case APP_CMD_UART_STATE_SYNC:
	{
		appCmdUartCsum += byte;
    349c:	4b42      	ldr	r3, [pc, #264]	; (35a8 <APP_CommandsByteReceived+0x14c>)
    349e:	781a      	ldrb	r2, [r3, #0]
    34a0:	1dfb      	adds	r3, r7, #7
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	18d3      	adds	r3, r2, r3
    34a6:	b2da      	uxtb	r2, r3
    34a8:	4b3f      	ldr	r3, [pc, #252]	; (35a8 <APP_CommandsByteReceived+0x14c>)
    34aa:	701a      	strb	r2, [r3, #0]

		if (0x02 == byte) {
    34ac:	1dfb      	adds	r3, r7, #7
    34ae:	781b      	ldrb	r3, [r3, #0]
    34b0:	2b02      	cmp	r3, #2
    34b2:	d103      	bne.n	34bc <APP_CommandsByteReceived+0x60>
			appCmdUartState = APP_CMD_UART_STATE_DATA;
    34b4:	4b39      	ldr	r3, [pc, #228]	; (359c <APP_CommandsByteReceived+0x140>)
    34b6:	2202      	movs	r2, #2
    34b8:	701a      	strb	r2, [r3, #0]
		} else {
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
		}
	}
	break;
    34ba:	e06b      	b.n	3594 <APP_CommandsByteReceived+0x138>
		appCmdUartCsum += byte;

		if (0x02 == byte) {
			appCmdUartState = APP_CMD_UART_STATE_DATA;
		} else {
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
    34bc:	4b37      	ldr	r3, [pc, #220]	; (359c <APP_CommandsByteReceived+0x140>)
    34be:	2200      	movs	r2, #0
    34c0:	701a      	strb	r2, [r3, #0]
		}
	}
	break;
    34c2:	e067      	b.n	3594 <APP_CommandsByteReceived+0x138>

	case APP_CMD_UART_STATE_DATA:
	{
		appCmdUartCsum += byte;
    34c4:	4b38      	ldr	r3, [pc, #224]	; (35a8 <APP_CommandsByteReceived+0x14c>)
    34c6:	781a      	ldrb	r2, [r3, #0]
    34c8:	1dfb      	adds	r3, r7, #7
    34ca:	781b      	ldrb	r3, [r3, #0]
    34cc:	18d3      	adds	r3, r2, r3
    34ce:	b2da      	uxtb	r2, r3
    34d0:	4b35      	ldr	r3, [pc, #212]	; (35a8 <APP_CommandsByteReceived+0x14c>)
    34d2:	701a      	strb	r2, [r3, #0]

		if (0x10 == byte) {
    34d4:	1dfb      	adds	r3, r7, #7
    34d6:	781b      	ldrb	r3, [r3, #0]
    34d8:	2b10      	cmp	r3, #16
    34da:	d103      	bne.n	34e4 <APP_CommandsByteReceived+0x88>
			appCmdUartState = APP_CMD_UART_STATE_MARK;
    34dc:	4b2f      	ldr	r3, [pc, #188]	; (359c <APP_CommandsByteReceived+0x140>)
    34de:	2203      	movs	r2, #3
    34e0:	701a      	strb	r2, [r3, #0]
    34e2:	e00a      	b.n	34fa <APP_CommandsByteReceived+0x9e>
		} else {
			appCmdUartBuf[appCmdUartPtr++] = byte;
    34e4:	4b2f      	ldr	r3, [pc, #188]	; (35a4 <APP_CommandsByteReceived+0x148>)
    34e6:	781b      	ldrb	r3, [r3, #0]
    34e8:	1c5a      	adds	r2, r3, #1
    34ea:	b2d1      	uxtb	r1, r2
    34ec:	4a2d      	ldr	r2, [pc, #180]	; (35a4 <APP_CommandsByteReceived+0x148>)
    34ee:	7011      	strb	r1, [r2, #0]
    34f0:	0019      	movs	r1, r3
    34f2:	4b2e      	ldr	r3, [pc, #184]	; (35ac <APP_CommandsByteReceived+0x150>)
    34f4:	1dfa      	adds	r2, r7, #7
    34f6:	7812      	ldrb	r2, [r2, #0]
    34f8:	545a      	strb	r2, [r3, r1]
		}

		if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE) {
    34fa:	4b2a      	ldr	r3, [pc, #168]	; (35a4 <APP_CommandsByteReceived+0x148>)
    34fc:	781b      	ldrb	r3, [r3, #0]
    34fe:	2b10      	cmp	r3, #16
    3500:	d147      	bne.n	3592 <APP_CommandsByteReceived+0x136>
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
    3502:	4b26      	ldr	r3, [pc, #152]	; (359c <APP_CommandsByteReceived+0x140>)
    3504:	2200      	movs	r2, #0
    3506:	701a      	strb	r2, [r3, #0]
		}
	}
	break;
    3508:	e043      	b.n	3592 <APP_CommandsByteReceived+0x136>

	case APP_CMD_UART_STATE_MARK:
	{
		appCmdUartCsum += byte;
    350a:	4b27      	ldr	r3, [pc, #156]	; (35a8 <APP_CommandsByteReceived+0x14c>)
    350c:	781a      	ldrb	r2, [r3, #0]
    350e:	1dfb      	adds	r3, r7, #7
    3510:	781b      	ldrb	r3, [r3, #0]
    3512:	18d3      	adds	r3, r2, r3
    3514:	b2da      	uxtb	r2, r3
    3516:	4b24      	ldr	r3, [pc, #144]	; (35a8 <APP_CommandsByteReceived+0x14c>)
    3518:	701a      	strb	r2, [r3, #0]

		if (0x10 == byte) {
    351a:	1dfb      	adds	r3, r7, #7
    351c:	781b      	ldrb	r3, [r3, #0]
    351e:	2b10      	cmp	r3, #16
    3520:	d116      	bne.n	3550 <APP_CommandsByteReceived+0xf4>
			appCmdUartBuf[appCmdUartPtr++] = byte;
    3522:	4b20      	ldr	r3, [pc, #128]	; (35a4 <APP_CommandsByteReceived+0x148>)
    3524:	781b      	ldrb	r3, [r3, #0]
    3526:	1c5a      	adds	r2, r3, #1
    3528:	b2d1      	uxtb	r1, r2
    352a:	4a1e      	ldr	r2, [pc, #120]	; (35a4 <APP_CommandsByteReceived+0x148>)
    352c:	7011      	strb	r1, [r2, #0]
    352e:	0019      	movs	r1, r3
    3530:	4b1e      	ldr	r3, [pc, #120]	; (35ac <APP_CommandsByteReceived+0x150>)
    3532:	1dfa      	adds	r2, r7, #7
    3534:	7812      	ldrb	r2, [r2, #0]
    3536:	545a      	strb	r2, [r3, r1]

			if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE) {
    3538:	4b1a      	ldr	r3, [pc, #104]	; (35a4 <APP_CommandsByteReceived+0x148>)
    353a:	781b      	ldrb	r3, [r3, #0]
    353c:	2b10      	cmp	r3, #16
    353e:	d103      	bne.n	3548 <APP_CommandsByteReceived+0xec>
				appCmdUartState = APP_CMD_UART_STATE_IDLE;
    3540:	4b16      	ldr	r3, [pc, #88]	; (359c <APP_CommandsByteReceived+0x140>)
    3542:	2200      	movs	r2, #0
    3544:	701a      	strb	r2, [r3, #0]
			appCmdUartState = APP_CMD_UART_STATE_CSUM;
		} else {
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
		}
	}
	break;
    3546:	e025      	b.n	3594 <APP_CommandsByteReceived+0x138>
			appCmdUartBuf[appCmdUartPtr++] = byte;

			if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE) {
				appCmdUartState = APP_CMD_UART_STATE_IDLE;
			} else {
				appCmdUartState = APP_CMD_UART_STATE_DATA;
    3548:	4b14      	ldr	r3, [pc, #80]	; (359c <APP_CommandsByteReceived+0x140>)
    354a:	2202      	movs	r2, #2
    354c:	701a      	strb	r2, [r3, #0]
			appCmdUartState = APP_CMD_UART_STATE_CSUM;
		} else {
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
		}
	}
	break;
    354e:	e021      	b.n	3594 <APP_CommandsByteReceived+0x138>
			if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE) {
				appCmdUartState = APP_CMD_UART_STATE_IDLE;
			} else {
				appCmdUartState = APP_CMD_UART_STATE_DATA;
			}
		} else if (0x03 == byte) {
    3550:	1dfb      	adds	r3, r7, #7
    3552:	781b      	ldrb	r3, [r3, #0]
    3554:	2b03      	cmp	r3, #3
    3556:	d103      	bne.n	3560 <APP_CommandsByteReceived+0x104>
			appCmdUartState = APP_CMD_UART_STATE_CSUM;
    3558:	4b10      	ldr	r3, [pc, #64]	; (359c <APP_CommandsByteReceived+0x140>)
    355a:	2204      	movs	r2, #4
    355c:	701a      	strb	r2, [r3, #0]
		} else {
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
		}
	}
	break;
    355e:	e019      	b.n	3594 <APP_CommandsByteReceived+0x138>
				appCmdUartState = APP_CMD_UART_STATE_DATA;
			}
		} else if (0x03 == byte) {
			appCmdUartState = APP_CMD_UART_STATE_CSUM;
		} else {
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
    3560:	4b0e      	ldr	r3, [pc, #56]	; (359c <APP_CommandsByteReceived+0x140>)
    3562:	2200      	movs	r2, #0
    3564:	701a      	strb	r2, [r3, #0]
		}
	}
	break;
    3566:	e015      	b.n	3594 <APP_CommandsByteReceived+0x138>

	case APP_CMD_UART_STATE_CSUM:
	{
		if (byte == appCmdUartCsum) {
    3568:	4b0f      	ldr	r3, [pc, #60]	; (35a8 <APP_CommandsByteReceived+0x14c>)
    356a:	781b      	ldrb	r3, [r3, #0]
    356c:	1dfa      	adds	r2, r7, #7
    356e:	7812      	ldrb	r2, [r2, #0]
    3570:	429a      	cmp	r2, r3
    3572:	d106      	bne.n	3582 <APP_CommandsByteReceived+0x126>
			appCmdUartProcess(appCmdUartBuf, appCmdUartPtr);
    3574:	4b0b      	ldr	r3, [pc, #44]	; (35a4 <APP_CommandsByteReceived+0x148>)
    3576:	781a      	ldrb	r2, [r3, #0]
    3578:	4b0c      	ldr	r3, [pc, #48]	; (35ac <APP_CommandsByteReceived+0x150>)
    357a:	0011      	movs	r1, r2
    357c:	0018      	movs	r0, r3
    357e:	4b0c      	ldr	r3, [pc, #48]	; (35b0 <APP_CommandsByteReceived+0x154>)
    3580:	4798      	blx	r3
		}

		appCmdUartState = APP_CMD_UART_STATE_IDLE;
    3582:	4b06      	ldr	r3, [pc, #24]	; (359c <APP_CommandsByteReceived+0x140>)
    3584:	2200      	movs	r2, #0
    3586:	701a      	strb	r2, [r3, #0]
	}
	break;
    3588:	e004      	b.n	3594 <APP_CommandsByteReceived+0x138>

	default:
		break;
    358a:	46c0      	nop			; (mov r8, r8)
    358c:	e002      	b.n	3594 <APP_CommandsByteReceived+0x138>
			appCmdUartPtr = 0;
			appCmdUartCsum = byte;
			appCmdUartState = APP_CMD_UART_STATE_SYNC;
		}
	}
	break;
    358e:	46c0      	nop			; (mov r8, r8)
    3590:	e000      	b.n	3594 <APP_CommandsByteReceived+0x138>

		if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE) {
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
		}
	}
	break;
    3592:	46c0      	nop			; (mov r8, r8)
	break;

	default:
		break;
	}
}
    3594:	46c0      	nop			; (mov r8, r8)
    3596:	46bd      	mov	sp, r7
    3598:	b002      	add	sp, #8
    359a:	bd80      	pop	{r7, pc}
    359c:	20000186 	.word	0x20000186
    35a0:	0000cad8 	.word	0x0000cad8
    35a4:	20000187 	.word	0x20000187
    35a8:	20000198 	.word	0x20000198
    35ac:	20000188 	.word	0x20000188
    35b0:	000035b5 	.word	0x000035b5

000035b4 <appCmdUartProcess>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdUartProcess(uint8_t *data, uint8_t size)
{
    35b4:	b5b0      	push	{r4, r5, r7, lr}
    35b6:	b086      	sub	sp, #24
    35b8:	af00      	add	r7, sp, #0
    35ba:	6078      	str	r0, [r7, #4]
    35bc:	000a      	movs	r2, r1
    35be:	1cfb      	adds	r3, r7, #3
    35c0:	701a      	strb	r2, [r3, #0]
	AppCmdUartHeader_t *header = (AppCmdUartHeader_t *)data;
    35c2:	687b      	ldr	r3, [r7, #4]
    35c4:	617b      	str	r3, [r7, #20]

	if (size < sizeof(AppCmdUartHeader_t)) {
    35c6:	1cfb      	adds	r3, r7, #3
    35c8:	781b      	ldrb	r3, [r3, #0]
    35ca:	2b08      	cmp	r3, #8
    35cc:	d960      	bls.n	3690 <appCmdUartProcess+0xdc>
		return;
	}

	if (APP_COMMAND_ID_IDENTIFY == header->commandId) {
    35ce:	697b      	ldr	r3, [r7, #20]
    35d0:	781b      	ldrb	r3, [r3, #0]
    35d2:	2b10      	cmp	r3, #16
    35d4:	d15d      	bne.n	3692 <appCmdUartProcess+0xde>
		AppCmdUartIdentify_t *uartCmd = (AppCmdUartIdentify_t *)data;
    35d6:	687b      	ldr	r3, [r7, #4]
    35d8:	613b      	str	r3, [r7, #16]
		AppCmdIdentify_t cmd;

		cmd.id = APP_COMMAND_ID_IDENTIFY;
    35da:	2308      	movs	r3, #8
    35dc:	18fb      	adds	r3, r7, r3
    35de:	2210      	movs	r2, #16
    35e0:	701a      	strb	r2, [r3, #0]
		cmd.duration = uartCmd->duration;
    35e2:	693b      	ldr	r3, [r7, #16]
    35e4:	7a5a      	ldrb	r2, [r3, #9]
    35e6:	7a9b      	ldrb	r3, [r3, #10]
    35e8:	021b      	lsls	r3, r3, #8
    35ea:	4313      	orrs	r3, r2
    35ec:	b29a      	uxth	r2, r3
    35ee:	2308      	movs	r3, #8
    35f0:	18fb      	adds	r3, r7, r3
    35f2:	3301      	adds	r3, #1
    35f4:	21ff      	movs	r1, #255	; 0xff
    35f6:	4011      	ands	r1, r2
    35f8:	000c      	movs	r4, r1
    35fa:	7819      	ldrb	r1, [r3, #0]
    35fc:	2000      	movs	r0, #0
    35fe:	4001      	ands	r1, r0
    3600:	1c08      	adds	r0, r1, #0
    3602:	1c21      	adds	r1, r4, #0
    3604:	4301      	orrs	r1, r0
    3606:	7019      	strb	r1, [r3, #0]
    3608:	0a12      	lsrs	r2, r2, #8
    360a:	b290      	uxth	r0, r2
    360c:	785a      	ldrb	r2, [r3, #1]
    360e:	2100      	movs	r1, #0
    3610:	400a      	ands	r2, r1
    3612:	1c11      	adds	r1, r2, #0
    3614:	1c02      	adds	r2, r0, #0
    3616:	430a      	orrs	r2, r1
    3618:	705a      	strb	r2, [r3, #1]
		cmd.period = uartCmd->period;
    361a:	693b      	ldr	r3, [r7, #16]
    361c:	7ada      	ldrb	r2, [r3, #11]
    361e:	7b1b      	ldrb	r3, [r3, #12]
    3620:	021b      	lsls	r3, r3, #8
    3622:	4313      	orrs	r3, r2
    3624:	b29a      	uxth	r2, r3
    3626:	2308      	movs	r3, #8
    3628:	18fb      	adds	r3, r7, r3
    362a:	3303      	adds	r3, #3
    362c:	21ff      	movs	r1, #255	; 0xff
    362e:	4011      	ands	r1, r2
    3630:	000c      	movs	r4, r1
    3632:	7819      	ldrb	r1, [r3, #0]
    3634:	2000      	movs	r0, #0
    3636:	4001      	ands	r1, r0
    3638:	1c08      	adds	r0, r1, #0
    363a:	1c21      	adds	r1, r4, #0
    363c:	4301      	orrs	r1, r0
    363e:	7019      	strb	r1, [r3, #0]
    3640:	0a12      	lsrs	r2, r2, #8
    3642:	b290      	uxth	r0, r2
    3644:	785a      	ldrb	r2, [r3, #1]
    3646:	2100      	movs	r1, #0
    3648:	400a      	ands	r2, r1
    364a:	1c11      	adds	r1, r2, #0
    364c:	1c02      	adds	r2, r0, #0
    364e:	430a      	orrs	r2, r1
    3650:	705a      	strb	r2, [r3, #1]

		appCmdBuffer(header->dstAddr, (uint8_t *)&cmd,
    3652:	697b      	ldr	r3, [r7, #20]
    3654:	785a      	ldrb	r2, [r3, #1]
    3656:	7899      	ldrb	r1, [r3, #2]
    3658:	0209      	lsls	r1, r1, #8
    365a:	430a      	orrs	r2, r1
    365c:	78d9      	ldrb	r1, [r3, #3]
    365e:	0409      	lsls	r1, r1, #16
    3660:	430a      	orrs	r2, r1
    3662:	7919      	ldrb	r1, [r3, #4]
    3664:	0609      	lsls	r1, r1, #24
    3666:	430a      	orrs	r2, r1
    3668:	0014      	movs	r4, r2
    366a:	795a      	ldrb	r2, [r3, #5]
    366c:	7999      	ldrb	r1, [r3, #6]
    366e:	0209      	lsls	r1, r1, #8
    3670:	430a      	orrs	r2, r1
    3672:	79d9      	ldrb	r1, [r3, #7]
    3674:	0409      	lsls	r1, r1, #16
    3676:	430a      	orrs	r2, r1
    3678:	7a1b      	ldrb	r3, [r3, #8]
    367a:	061b      	lsls	r3, r3, #24
    367c:	4313      	orrs	r3, r2
    367e:	001d      	movs	r5, r3
    3680:	b2a3      	uxth	r3, r4
    3682:	2208      	movs	r2, #8
    3684:	18b9      	adds	r1, r7, r2
    3686:	2205      	movs	r2, #5
    3688:	0018      	movs	r0, r3
    368a:	4b03      	ldr	r3, [pc, #12]	; (3698 <appCmdUartProcess+0xe4>)
    368c:	4798      	blx	r3
    368e:	e000      	b.n	3692 <appCmdUartProcess+0xde>
static void appCmdUartProcess(uint8_t *data, uint8_t size)
{
	AppCmdUartHeader_t *header = (AppCmdUartHeader_t *)data;

	if (size < sizeof(AppCmdUartHeader_t)) {
		return;
    3690:	46c0      	nop			; (mov r8, r8)
		cmd.period = uartCmd->period;

		appCmdBuffer(header->dstAddr, (uint8_t *)&cmd,
				sizeof(AppCmdIdentify_t));
	}
}
    3692:	46bd      	mov	sp, r7
    3694:	b006      	add	sp, #24
    3696:	bdb0      	pop	{r4, r5, r7, pc}
    3698:	0000369d 	.word	0x0000369d

0000369c <appCmdBuffer>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdBuffer(uint16_t addr, uint8_t *data, uint8_t size)
{
    369c:	b5b0      	push	{r4, r5, r7, lr}
    369e:	b084      	sub	sp, #16
    36a0:	af00      	add	r7, sp, #0
    36a2:	6039      	str	r1, [r7, #0]
    36a4:	0011      	movs	r1, r2
    36a6:	1dbb      	adds	r3, r7, #6
    36a8:	1c02      	adds	r2, r0, #0
    36aa:	801a      	strh	r2, [r3, #0]
    36ac:	1d7b      	adds	r3, r7, #5
    36ae:	1c0a      	adds	r2, r1, #0
    36b0:	701a      	strb	r2, [r3, #0]
	if (APP_ADDR == addr) {
    36b2:	1dbb      	adds	r3, r7, #6
    36b4:	881b      	ldrh	r3, [r3, #0]
    36b6:	2b00      	cmp	r3, #0
    36b8:	d107      	bne.n	36ca <appCmdBuffer+0x2e>
		appCmdHandle(data, size);
    36ba:	1d7b      	adds	r3, r7, #5
    36bc:	781a      	ldrb	r2, [r3, #0]
    36be:	683b      	ldr	r3, [r7, #0]
    36c0:	0011      	movs	r1, r2
    36c2:	0018      	movs	r0, r3
    36c4:	4b43      	ldr	r3, [pc, #268]	; (37d4 <appCmdBuffer+0x138>)
    36c6:	4798      	blx	r3
			appCmdPendingTable[0].ready = true;
			memcpy(&appCmdPendingTable[0].payload, data, size);
			appCmdCheckPendingTable();
		}
	}
}
    36c8:	e080      	b.n	37cc <appCmdBuffer+0x130>
*****************************************************************************/
static void appCmdBuffer(uint16_t addr, uint8_t *data, uint8_t size)
{
	if (APP_ADDR == addr) {
		appCmdHandle(data, size);
	} else if (addr & NWK_ROUTE_NON_ROUTING) {
    36ca:	1dbb      	adds	r3, r7, #6
    36cc:	2200      	movs	r2, #0
    36ce:	5e9b      	ldrsh	r3, [r3, r2]
    36d0:	2b00      	cmp	r3, #0
    36d2:	da62      	bge.n	379a <appCmdBuffer+0xfe>
		for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    36d4:	230f      	movs	r3, #15
    36d6:	18fb      	adds	r3, r7, r3
    36d8:	2201      	movs	r2, #1
    36da:	701a      	strb	r2, [r3, #0]
    36dc:	e057      	b.n	378e <appCmdBuffer+0xf2>
			if (APP_CMD_INVALID_ADDR ==
					appCmdPendingTable[i].addr) {
    36de:	230f      	movs	r3, #15
    36e0:	18fb      	adds	r3, r7, r3
    36e2:	7819      	ldrb	r1, [r3, #0]
    36e4:	4a3c      	ldr	r2, [pc, #240]	; (37d8 <appCmdBuffer+0x13c>)
    36e6:	000b      	movs	r3, r1
    36e8:	00db      	lsls	r3, r3, #3
    36ea:	185b      	adds	r3, r3, r1
    36ec:	5c99      	ldrb	r1, [r3, r2]
    36ee:	18d3      	adds	r3, r2, r3
    36f0:	785b      	ldrb	r3, [r3, #1]
    36f2:	021b      	lsls	r3, r3, #8
    36f4:	430b      	orrs	r3, r1
    36f6:	b29b      	uxth	r3, r3
{
	if (APP_ADDR == addr) {
		appCmdHandle(data, size);
	} else if (addr & NWK_ROUTE_NON_ROUTING) {
		for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
			if (APP_CMD_INVALID_ADDR ==
    36f8:	4a38      	ldr	r2, [pc, #224]	; (37dc <appCmdBuffer+0x140>)
    36fa:	4293      	cmp	r3, r2
    36fc:	d140      	bne.n	3780 <appCmdBuffer+0xe4>
					appCmdPendingTable[i].addr) {
				appCmdPendingTable[i].addr = addr;
    36fe:	230f      	movs	r3, #15
    3700:	18fb      	adds	r3, r7, r3
    3702:	7819      	ldrb	r1, [r3, #0]
    3704:	4a34      	ldr	r2, [pc, #208]	; (37d8 <appCmdBuffer+0x13c>)
    3706:	000b      	movs	r3, r1
    3708:	00db      	lsls	r3, r3, #3
    370a:	185b      	adds	r3, r3, r1
    370c:	1db9      	adds	r1, r7, #6
    370e:	780d      	ldrb	r5, [r1, #0]
    3710:	5c98      	ldrb	r0, [r3, r2]
    3712:	2400      	movs	r4, #0
    3714:	4020      	ands	r0, r4
    3716:	1c04      	adds	r4, r0, #0
    3718:	1c28      	adds	r0, r5, #0
    371a:	4320      	orrs	r0, r4
    371c:	5498      	strb	r0, [r3, r2]
    371e:	7848      	ldrb	r0, [r1, #1]
    3720:	18d3      	adds	r3, r2, r3
    3722:	785a      	ldrb	r2, [r3, #1]
    3724:	2100      	movs	r1, #0
    3726:	400a      	ands	r2, r1
    3728:	1c11      	adds	r1, r2, #0
    372a:	1c02      	adds	r2, r0, #0
    372c:	430a      	orrs	r2, r1
    372e:	705a      	strb	r2, [r3, #1]
				appCmdPendingTable[i].size = size;
    3730:	230f      	movs	r3, #15
    3732:	18fb      	adds	r3, r7, r3
    3734:	781a      	ldrb	r2, [r3, #0]
    3736:	4928      	ldr	r1, [pc, #160]	; (37d8 <appCmdBuffer+0x13c>)
    3738:	0013      	movs	r3, r2
    373a:	00db      	lsls	r3, r3, #3
    373c:	189b      	adds	r3, r3, r2
    373e:	18cb      	adds	r3, r1, r3
    3740:	3302      	adds	r3, #2
    3742:	1d7a      	adds	r2, r7, #5
    3744:	7812      	ldrb	r2, [r2, #0]
    3746:	701a      	strb	r2, [r3, #0]
				appCmdPendingTable[i].ready = false;
    3748:	230f      	movs	r3, #15
    374a:	18fb      	adds	r3, r7, r3
    374c:	781a      	ldrb	r2, [r3, #0]
    374e:	4922      	ldr	r1, [pc, #136]	; (37d8 <appCmdBuffer+0x13c>)
    3750:	0013      	movs	r3, r2
    3752:	00db      	lsls	r3, r3, #3
    3754:	189b      	adds	r3, r3, r2
    3756:	18cb      	adds	r3, r1, r3
    3758:	3303      	adds	r3, #3
    375a:	2200      	movs	r2, #0
    375c:	701a      	strb	r2, [r3, #0]
				memcpy(&appCmdPendingTable[i].payload, data,
    375e:	230f      	movs	r3, #15
    3760:	18fb      	adds	r3, r7, r3
    3762:	781a      	ldrb	r2, [r3, #0]
    3764:	0013      	movs	r3, r2
    3766:	00db      	lsls	r3, r3, #3
    3768:	189b      	adds	r3, r3, r2
    376a:	4a1b      	ldr	r2, [pc, #108]	; (37d8 <appCmdBuffer+0x13c>)
    376c:	189b      	adds	r3, r3, r2
    376e:	1d18      	adds	r0, r3, #4
    3770:	1d7b      	adds	r3, r7, #5
    3772:	781a      	ldrb	r2, [r3, #0]
    3774:	683b      	ldr	r3, [r7, #0]
    3776:	0019      	movs	r1, r3
    3778:	4b19      	ldr	r3, [pc, #100]	; (37e0 <appCmdBuffer+0x144>)
    377a:	4798      	blx	r3
						size);
				break;
    377c:	46c0      	nop			; (mov r8, r8)
			appCmdPendingTable[0].ready = true;
			memcpy(&appCmdPendingTable[0].payload, data, size);
			appCmdCheckPendingTable();
		}
	}
}
    377e:	e025      	b.n	37cc <appCmdBuffer+0x130>
static void appCmdBuffer(uint16_t addr, uint8_t *data, uint8_t size)
{
	if (APP_ADDR == addr) {
		appCmdHandle(data, size);
	} else if (addr & NWK_ROUTE_NON_ROUTING) {
		for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    3780:	230f      	movs	r3, #15
    3782:	18fb      	adds	r3, r7, r3
    3784:	781a      	ldrb	r2, [r3, #0]
    3786:	230f      	movs	r3, #15
    3788:	18fb      	adds	r3, r7, r3
    378a:	3201      	adds	r2, #1
    378c:	701a      	strb	r2, [r3, #0]
    378e:	230f      	movs	r3, #15
    3790:	18fb      	adds	r3, r7, r3
    3792:	781b      	ldrb	r3, [r3, #0]
    3794:	2b04      	cmp	r3, #4
    3796:	d9a2      	bls.n	36de <appCmdBuffer+0x42>
			appCmdPendingTable[0].ready = true;
			memcpy(&appCmdPendingTable[0].payload, data, size);
			appCmdCheckPendingTable();
		}
	}
}
    3798:	e018      	b.n	37cc <appCmdBuffer+0x130>
				break;
			}
		}
	} else {
		/* Entry 0 in the table is reserved for non-sleeping devices */
		if (APP_CMD_INVALID_ADDR == appCmdPendingTable[0].addr) {
    379a:	4b0f      	ldr	r3, [pc, #60]	; (37d8 <appCmdBuffer+0x13c>)
    379c:	881b      	ldrh	r3, [r3, #0]
    379e:	4a0f      	ldr	r2, [pc, #60]	; (37dc <appCmdBuffer+0x140>)
    37a0:	4293      	cmp	r3, r2
    37a2:	d113      	bne.n	37cc <appCmdBuffer+0x130>
			appCmdPendingTable[0].addr = addr;
    37a4:	4b0c      	ldr	r3, [pc, #48]	; (37d8 <appCmdBuffer+0x13c>)
    37a6:	1dba      	adds	r2, r7, #6
    37a8:	8812      	ldrh	r2, [r2, #0]
    37aa:	801a      	strh	r2, [r3, #0]
			appCmdPendingTable[0].size = size;
    37ac:	4b0a      	ldr	r3, [pc, #40]	; (37d8 <appCmdBuffer+0x13c>)
    37ae:	1d7a      	adds	r2, r7, #5
    37b0:	7812      	ldrb	r2, [r2, #0]
    37b2:	709a      	strb	r2, [r3, #2]
			appCmdPendingTable[0].ready = true;
    37b4:	4b08      	ldr	r3, [pc, #32]	; (37d8 <appCmdBuffer+0x13c>)
    37b6:	2201      	movs	r2, #1
    37b8:	70da      	strb	r2, [r3, #3]
			memcpy(&appCmdPendingTable[0].payload, data, size);
    37ba:	1d7b      	adds	r3, r7, #5
    37bc:	781a      	ldrb	r2, [r3, #0]
    37be:	6839      	ldr	r1, [r7, #0]
    37c0:	4b08      	ldr	r3, [pc, #32]	; (37e4 <appCmdBuffer+0x148>)
    37c2:	0018      	movs	r0, r3
    37c4:	4b06      	ldr	r3, [pc, #24]	; (37e0 <appCmdBuffer+0x144>)
    37c6:	4798      	blx	r3
			appCmdCheckPendingTable();
    37c8:	4b07      	ldr	r3, [pc, #28]	; (37e8 <appCmdBuffer+0x14c>)
    37ca:	4798      	blx	r3
		}
	}
}
    37cc:	46c0      	nop			; (mov r8, r8)
    37ce:	46bd      	mov	sp, r7
    37d0:	b004      	add	sp, #16
    37d2:	bdb0      	pop	{r4, r5, r7, pc}
    37d4:	0000390d 	.word	0x0000390d
    37d8:	200001c4 	.word	0x200001c4
    37dc:	0000ffff 	.word	0x0000ffff
    37e0:	0000c209 	.word	0x0000c209
    37e4:	200001c8 	.word	0x200001c8
    37e8:	0000387d 	.word	0x0000387d

000037ec <appCmdDataRequest>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataRequest(AppCmdPendingTableEntry_t *entry)
{
    37ec:	b580      	push	{r7, lr}
    37ee:	b082      	sub	sp, #8
    37f0:	af00      	add	r7, sp, #0
    37f2:	6078      	str	r0, [r7, #4]
	appCmdInProgress = entry;
    37f4:	4b0d      	ldr	r3, [pc, #52]	; (382c <appCmdDataRequest+0x40>)
    37f6:	687a      	ldr	r2, [r7, #4]
    37f8:	601a      	str	r2, [r3, #0]

	appCmdDataReq.dstAddr = entry->addr;
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	781a      	ldrb	r2, [r3, #0]
    37fe:	785b      	ldrb	r3, [r3, #1]
    3800:	021b      	lsls	r3, r3, #8
    3802:	4313      	orrs	r3, r2
    3804:	b29a      	uxth	r2, r3
    3806:	4b0a      	ldr	r3, [pc, #40]	; (3830 <appCmdDataRequest+0x44>)
    3808:	815a      	strh	r2, [r3, #10]
	appCmdDataReq.data = &entry->payload;
    380a:	687b      	ldr	r3, [r7, #4]
    380c:	1d1a      	adds	r2, r3, #4
    380e:	4b08      	ldr	r3, [pc, #32]	; (3830 <appCmdDataRequest+0x44>)
    3810:	611a      	str	r2, [r3, #16]
	appCmdDataReq.size = entry->size;
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	789a      	ldrb	r2, [r3, #2]
    3816:	4b06      	ldr	r3, [pc, #24]	; (3830 <appCmdDataRequest+0x44>)
    3818:	751a      	strb	r2, [r3, #20]
	NWK_DataReq(&appCmdDataReq);
    381a:	4b05      	ldr	r3, [pc, #20]	; (3830 <appCmdDataRequest+0x44>)
    381c:	0018      	movs	r0, r3
    381e:	4b05      	ldr	r3, [pc, #20]	; (3834 <appCmdDataRequest+0x48>)
    3820:	4798      	blx	r3
}
    3822:	46c0      	nop			; (mov r8, r8)
    3824:	46bd      	mov	sp, r7
    3826:	b002      	add	sp, #8
    3828:	bd80      	pop	{r7, pc}
    382a:	46c0      	nop			; (mov r8, r8)
    382c:	200001f4 	.word	0x200001f4
    3830:	200001f8 	.word	0x200001f8
    3834:	00006475 	.word	0x00006475

00003838 <appCmdDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataConf(NWK_DataReq_t *req)
{
    3838:	b580      	push	{r7, lr}
    383a:	b082      	sub	sp, #8
    383c:	af00      	add	r7, sp, #0
    383e:	6078      	str	r0, [r7, #4]
	appCmdInProgress->addr = APP_CMD_INVALID_ADDR;
    3840:	4b0c      	ldr	r3, [pc, #48]	; (3874 <appCmdDataConf+0x3c>)
    3842:	681b      	ldr	r3, [r3, #0]
    3844:	781a      	ldrb	r2, [r3, #0]
    3846:	2101      	movs	r1, #1
    3848:	4249      	negs	r1, r1
    384a:	430a      	orrs	r2, r1
    384c:	701a      	strb	r2, [r3, #0]
    384e:	785a      	ldrb	r2, [r3, #1]
    3850:	2101      	movs	r1, #1
    3852:	4249      	negs	r1, r1
    3854:	430a      	orrs	r2, r1
    3856:	705a      	strb	r2, [r3, #1]
	appCmdInProgress->ready = false;
    3858:	4b06      	ldr	r3, [pc, #24]	; (3874 <appCmdDataConf+0x3c>)
    385a:	681b      	ldr	r3, [r3, #0]
    385c:	2200      	movs	r2, #0
    385e:	70da      	strb	r2, [r3, #3]
	appCmdInProgress = NULL;
    3860:	4b04      	ldr	r3, [pc, #16]	; (3874 <appCmdDataConf+0x3c>)
    3862:	2200      	movs	r2, #0
    3864:	601a      	str	r2, [r3, #0]

	appCmdCheckPendingTable();
    3866:	4b04      	ldr	r3, [pc, #16]	; (3878 <appCmdDataConf+0x40>)
    3868:	4798      	blx	r3

	(void)req;
}
    386a:	46c0      	nop			; (mov r8, r8)
    386c:	46bd      	mov	sp, r7
    386e:	b002      	add	sp, #8
    3870:	bd80      	pop	{r7, pc}
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	200001f4 	.word	0x200001f4
    3878:	0000387d 	.word	0x0000387d

0000387c <appCmdCheckPendingTable>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdCheckPendingTable(void)
{
    387c:	b580      	push	{r7, lr}
    387e:	b082      	sub	sp, #8
    3880:	af00      	add	r7, sp, #0
	if (appCmdInProgress) {
    3882:	4b15      	ldr	r3, [pc, #84]	; (38d8 <appCmdCheckPendingTable+0x5c>)
    3884:	681b      	ldr	r3, [r3, #0]
    3886:	2b00      	cmp	r3, #0
    3888:	d122      	bne.n	38d0 <appCmdCheckPendingTable+0x54>
		return;
	}

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    388a:	1dfb      	adds	r3, r7, #7
    388c:	2200      	movs	r2, #0
    388e:	701a      	strb	r2, [r3, #0]
    3890:	e019      	b.n	38c6 <appCmdCheckPendingTable+0x4a>
		if (appCmdPendingTable[i].ready) {
    3892:	1dfb      	adds	r3, r7, #7
    3894:	781a      	ldrb	r2, [r3, #0]
    3896:	4911      	ldr	r1, [pc, #68]	; (38dc <appCmdCheckPendingTable+0x60>)
    3898:	0013      	movs	r3, r2
    389a:	00db      	lsls	r3, r3, #3
    389c:	189b      	adds	r3, r3, r2
    389e:	18cb      	adds	r3, r1, r3
    38a0:	3303      	adds	r3, #3
    38a2:	781b      	ldrb	r3, [r3, #0]
    38a4:	2b00      	cmp	r3, #0
    38a6:	d009      	beq.n	38bc <appCmdCheckPendingTable+0x40>
			appCmdDataRequest(&appCmdPendingTable[i]);
    38a8:	1dfb      	adds	r3, r7, #7
    38aa:	781a      	ldrb	r2, [r3, #0]
    38ac:	0013      	movs	r3, r2
    38ae:	00db      	lsls	r3, r3, #3
    38b0:	189b      	adds	r3, r3, r2
    38b2:	4a0a      	ldr	r2, [pc, #40]	; (38dc <appCmdCheckPendingTable+0x60>)
    38b4:	189b      	adds	r3, r3, r2
    38b6:	0018      	movs	r0, r3
    38b8:	4b09      	ldr	r3, [pc, #36]	; (38e0 <appCmdCheckPendingTable+0x64>)
    38ba:	4798      	blx	r3
{
	if (appCmdInProgress) {
		return;
	}

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    38bc:	1dfb      	adds	r3, r7, #7
    38be:	781a      	ldrb	r2, [r3, #0]
    38c0:	1dfb      	adds	r3, r7, #7
    38c2:	3201      	adds	r2, #1
    38c4:	701a      	strb	r2, [r3, #0]
    38c6:	1dfb      	adds	r3, r7, #7
    38c8:	781b      	ldrb	r3, [r3, #0]
    38ca:	2b04      	cmp	r3, #4
    38cc:	d9e1      	bls.n	3892 <appCmdCheckPendingTable+0x16>
    38ce:	e000      	b.n	38d2 <appCmdCheckPendingTable+0x56>
/*************************************************************************//**
*****************************************************************************/
static void appCmdCheckPendingTable(void)
{
	if (appCmdInProgress) {
		return;
    38d0:	46c0      	nop			; (mov r8, r8)
	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
		if (appCmdPendingTable[i].ready) {
			appCmdDataRequest(&appCmdPendingTable[i]);
		}
	}
}
    38d2:	46bd      	mov	sp, r7
    38d4:	b002      	add	sp, #8
    38d6:	bd80      	pop	{r7, pc}
    38d8:	200001f4 	.word	0x200001f4
    38dc:	200001c4 	.word	0x200001c4
    38e0:	000037ed 	.word	0x000037ed

000038e4 <appCmdDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool appCmdDataInd(NWK_DataInd_t *ind)
{
    38e4:	b580      	push	{r7, lr}
    38e6:	b082      	sub	sp, #8
    38e8:	af00      	add	r7, sp, #0
    38ea:	6078      	str	r0, [r7, #4]
	return appCmdHandle(ind->data, ind->size);
    38ec:	687b      	ldr	r3, [r7, #4]
    38ee:	689a      	ldr	r2, [r3, #8]
    38f0:	687b      	ldr	r3, [r7, #4]
    38f2:	7b1b      	ldrb	r3, [r3, #12]
    38f4:	0019      	movs	r1, r3
    38f6:	0010      	movs	r0, r2
    38f8:	4b03      	ldr	r3, [pc, #12]	; (3908 <appCmdDataInd+0x24>)
    38fa:	4798      	blx	r3
    38fc:	0003      	movs	r3, r0
}
    38fe:	0018      	movs	r0, r3
    3900:	46bd      	mov	sp, r7
    3902:	b002      	add	sp, #8
    3904:	bd80      	pop	{r7, pc}
    3906:	46c0      	nop			; (mov r8, r8)
    3908:	0000390d 	.word	0x0000390d

0000390c <appCmdHandle>:

/*************************************************************************//**
*****************************************************************************/
static bool appCmdHandle(uint8_t *data, uint8_t size)
{
    390c:	b580      	push	{r7, lr}
    390e:	b084      	sub	sp, #16
    3910:	af00      	add	r7, sp, #0
    3912:	6078      	str	r0, [r7, #4]
    3914:	000a      	movs	r2, r1
    3916:	1cfb      	adds	r3, r7, #3
    3918:	701a      	strb	r2, [r3, #0]
	AppCmdHeader_t *header = (AppCmdHeader_t *)data;
    391a:	687b      	ldr	r3, [r7, #4]
    391c:	60fb      	str	r3, [r7, #12]

	if (size < sizeof(AppCmdHeader_t)) {
    391e:	1cfb      	adds	r3, r7, #3
    3920:	781b      	ldrb	r3, [r3, #0]
    3922:	2b00      	cmp	r3, #0
    3924:	d101      	bne.n	392a <appCmdHandle+0x1e>
		return false;
    3926:	2300      	movs	r3, #0
    3928:	e042      	b.n	39b0 <appCmdHandle+0xa4>
	}

	if (APP_COMMAND_ID_IDENTIFY == header->id) {
    392a:	68fb      	ldr	r3, [r7, #12]
    392c:	781b      	ldrb	r3, [r3, #0]
    392e:	2b10      	cmp	r3, #16
    3930:	d13d      	bne.n	39ae <appCmdHandle+0xa2>
		AppCmdIdentify_t *req = (AppCmdIdentify_t *)data;
    3932:	687b      	ldr	r3, [r7, #4]
    3934:	60bb      	str	r3, [r7, #8]

		if (sizeof(AppCmdIdentify_t) != size) {
    3936:	1cfb      	adds	r3, r7, #3
    3938:	781b      	ldrb	r3, [r3, #0]
    393a:	2b05      	cmp	r3, #5
    393c:	d001      	beq.n	3942 <appCmdHandle+0x36>
			return false;
    393e:	2300      	movs	r3, #0
    3940:	e036      	b.n	39b0 <appCmdHandle+0xa4>
		}

		SYS_TimerStop(&appCmdIdentifyDurationTimer);
    3942:	4b1d      	ldr	r3, [pc, #116]	; (39b8 <appCmdHandle+0xac>)
    3944:	0018      	movs	r0, r3
    3946:	4b1d      	ldr	r3, [pc, #116]	; (39bc <appCmdHandle+0xb0>)
    3948:	4798      	blx	r3
		SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    394a:	4b1d      	ldr	r3, [pc, #116]	; (39c0 <appCmdHandle+0xb4>)
    394c:	0018      	movs	r0, r3
    394e:	4b1b      	ldr	r3, [pc, #108]	; (39bc <appCmdHandle+0xb0>)
    3950:	4798      	blx	r3

		appCmdIdentifyDurationTimer.interval = req->duration;
    3952:	68bb      	ldr	r3, [r7, #8]
    3954:	785a      	ldrb	r2, [r3, #1]
    3956:	789b      	ldrb	r3, [r3, #2]
    3958:	021b      	lsls	r3, r3, #8
    395a:	4313      	orrs	r3, r2
    395c:	b29b      	uxth	r3, r3
    395e:	001a      	movs	r2, r3
    3960:	4b15      	ldr	r3, [pc, #84]	; (39b8 <appCmdHandle+0xac>)
    3962:	609a      	str	r2, [r3, #8]
		appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3964:	4b14      	ldr	r3, [pc, #80]	; (39b8 <appCmdHandle+0xac>)
    3966:	2200      	movs	r2, #0
    3968:	731a      	strb	r2, [r3, #12]
		appCmdIdentifyDurationTimer.handler
			= appCmdIdentifyDurationTimerHandler;
    396a:	4b13      	ldr	r3, [pc, #76]	; (39b8 <appCmdHandle+0xac>)
    396c:	4a15      	ldr	r2, [pc, #84]	; (39c4 <appCmdHandle+0xb8>)
    396e:	611a      	str	r2, [r3, #16]
		SYS_TimerStart(&appCmdIdentifyDurationTimer);
    3970:	4b11      	ldr	r3, [pc, #68]	; (39b8 <appCmdHandle+0xac>)
    3972:	0018      	movs	r0, r3
    3974:	4b14      	ldr	r3, [pc, #80]	; (39c8 <appCmdHandle+0xbc>)
    3976:	4798      	blx	r3

		appCmdIdentifyPeriodTimer.interval = req->period;
    3978:	68bb      	ldr	r3, [r7, #8]
    397a:	78da      	ldrb	r2, [r3, #3]
    397c:	791b      	ldrb	r3, [r3, #4]
    397e:	021b      	lsls	r3, r3, #8
    3980:	4313      	orrs	r3, r2
    3982:	b29b      	uxth	r3, r3
    3984:	001a      	movs	r2, r3
    3986:	4b0e      	ldr	r3, [pc, #56]	; (39c0 <appCmdHandle+0xb4>)
    3988:	609a      	str	r2, [r3, #8]
		appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    398a:	4b0d      	ldr	r3, [pc, #52]	; (39c0 <appCmdHandle+0xb4>)
    398c:	2201      	movs	r2, #1
    398e:	731a      	strb	r2, [r3, #12]
		appCmdIdentifyPeriodTimer.handler
			= appCmdIdentifyPeriodTimerHandler;
    3990:	4b0b      	ldr	r3, [pc, #44]	; (39c0 <appCmdHandle+0xb4>)
    3992:	4a0e      	ldr	r2, [pc, #56]	; (39cc <appCmdHandle+0xc0>)
    3994:	611a      	str	r2, [r3, #16]
		SYS_TimerStart(&appCmdIdentifyPeriodTimer);
    3996:	4b0a      	ldr	r3, [pc, #40]	; (39c0 <appCmdHandle+0xb4>)
    3998:	0018      	movs	r0, r3
    399a:	4b0b      	ldr	r3, [pc, #44]	; (39c8 <appCmdHandle+0xbc>)
    399c:	4798      	blx	r3
#if (LED_COUNT > 0)
		LED_On(LED_IDENTIFY);
    399e:	2100      	movs	r1, #0
    39a0:	2013      	movs	r0, #19
    39a2:	4b0b      	ldr	r3, [pc, #44]	; (39d0 <appCmdHandle+0xc4>)
    39a4:	4798      	blx	r3
#endif
		NWK_Lock();
    39a6:	4b0b      	ldr	r3, [pc, #44]	; (39d4 <appCmdHandle+0xc8>)
    39a8:	4798      	blx	r3

		return true;
    39aa:	2301      	movs	r3, #1
    39ac:	e000      	b.n	39b0 <appCmdHandle+0xa4>
	}

	return false;
    39ae:	2300      	movs	r3, #0
}
    39b0:	0018      	movs	r0, r3
    39b2:	46bd      	mov	sp, r7
    39b4:	b004      	add	sp, #16
    39b6:	bd80      	pop	{r7, pc}
    39b8:	2000019c 	.word	0x2000019c
    39bc:	00005add 	.word	0x00005add
    39c0:	200001b0 	.word	0x200001b0
    39c4:	000039d9 	.word	0x000039d9
    39c8:	00005aa5 	.word	0x00005aa5
    39cc:	00003a0d 	.word	0x00003a0d
    39d0:	00003281 	.word	0x00003281
    39d4:	000063f5 	.word	0x000063f5

000039d8 <appCmdIdentifyDurationTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdIdentifyDurationTimerHandler(SYS_Timer_t *timer)
{
    39d8:	b580      	push	{r7, lr}
    39da:	b082      	sub	sp, #8
    39dc:	af00      	add	r7, sp, #0
    39de:	6078      	str	r0, [r7, #4]
	NWK_Unlock();
    39e0:	4b06      	ldr	r3, [pc, #24]	; (39fc <appCmdIdentifyDurationTimerHandler+0x24>)
    39e2:	4798      	blx	r3
#if (LED_COUNT > 0)
	LED_Off(LED_IDENTIFY);
    39e4:	2101      	movs	r1, #1
    39e6:	2013      	movs	r0, #19
    39e8:	4b05      	ldr	r3, [pc, #20]	; (3a00 <appCmdIdentifyDurationTimerHandler+0x28>)
    39ea:	4798      	blx	r3
#endif
	SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    39ec:	4b05      	ldr	r3, [pc, #20]	; (3a04 <appCmdIdentifyDurationTimerHandler+0x2c>)
    39ee:	0018      	movs	r0, r3
    39f0:	4b05      	ldr	r3, [pc, #20]	; (3a08 <appCmdIdentifyDurationTimerHandler+0x30>)
    39f2:	4798      	blx	r3
	(void)timer;
}
    39f4:	46c0      	nop			; (mov r8, r8)
    39f6:	46bd      	mov	sp, r7
    39f8:	b002      	add	sp, #8
    39fa:	bd80      	pop	{r7, pc}
    39fc:	00006415 	.word	0x00006415
    3a00:	00003281 	.word	0x00003281
    3a04:	200001b0 	.word	0x200001b0
    3a08:	00005add 	.word	0x00005add

00003a0c <appCmdIdentifyPeriodTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdIdentifyPeriodTimerHandler(SYS_Timer_t *timer)
{
    3a0c:	b580      	push	{r7, lr}
    3a0e:	b082      	sub	sp, #8
    3a10:	af00      	add	r7, sp, #0
    3a12:	6078      	str	r0, [r7, #4]
#if (LED_COUNT > 0)
	LED_Toggle(LED_IDENTIFY);
    3a14:	2013      	movs	r0, #19
    3a16:	4b03      	ldr	r3, [pc, #12]	; (3a24 <appCmdIdentifyPeriodTimerHandler+0x18>)
    3a18:	4798      	blx	r3
#endif
	(void)timer;
}
    3a1a:	46c0      	nop			; (mov r8, r8)
    3a1c:	46bd      	mov	sp, r7
    3a1e:	b002      	add	sp, #8
    3a20:	bd80      	pop	{r7, pc}
    3a22:	46c0      	nop			; (mov r8, r8)
    3a24:	000032d5 	.word	0x000032d5

00003a28 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3a28:	b580      	push	{r7, lr}
    3a2a:	b084      	sub	sp, #16
    3a2c:	af00      	add	r7, sp, #0
    3a2e:	0002      	movs	r2, r0
    3a30:	1dfb      	adds	r3, r7, #7
    3a32:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3a34:	230f      	movs	r3, #15
    3a36:	18fb      	adds	r3, r7, r3
    3a38:	1dfa      	adds	r2, r7, #7
    3a3a:	7812      	ldrb	r2, [r2, #0]
    3a3c:	09d2      	lsrs	r2, r2, #7
    3a3e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3a40:	230e      	movs	r3, #14
    3a42:	18fb      	adds	r3, r7, r3
    3a44:	1dfa      	adds	r2, r7, #7
    3a46:	7812      	ldrb	r2, [r2, #0]
    3a48:	0952      	lsrs	r2, r2, #5
    3a4a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3a4c:	4b0d      	ldr	r3, [pc, #52]	; (3a84 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3a4e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3a50:	230f      	movs	r3, #15
    3a52:	18fb      	adds	r3, r7, r3
    3a54:	781b      	ldrb	r3, [r3, #0]
    3a56:	2b00      	cmp	r3, #0
    3a58:	d10f      	bne.n	3a7a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3a5a:	230f      	movs	r3, #15
    3a5c:	18fb      	adds	r3, r7, r3
    3a5e:	781b      	ldrb	r3, [r3, #0]
    3a60:	009b      	lsls	r3, r3, #2
    3a62:	2210      	movs	r2, #16
    3a64:	4694      	mov	ip, r2
    3a66:	44bc      	add	ip, r7
    3a68:	4463      	add	r3, ip
    3a6a:	3b08      	subs	r3, #8
    3a6c:	681a      	ldr	r2, [r3, #0]
    3a6e:	230e      	movs	r3, #14
    3a70:	18fb      	adds	r3, r7, r3
    3a72:	781b      	ldrb	r3, [r3, #0]
    3a74:	01db      	lsls	r3, r3, #7
    3a76:	18d3      	adds	r3, r2, r3
    3a78:	e000      	b.n	3a7c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3a7a:	2300      	movs	r3, #0
	}
}
    3a7c:	0018      	movs	r0, r3
    3a7e:	46bd      	mov	sp, r7
    3a80:	b004      	add	sp, #16
    3a82:	bd80      	pop	{r7, pc}
    3a84:	41004400 	.word	0x41004400

00003a88 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3a88:	b580      	push	{r7, lr}
    3a8a:	b082      	sub	sp, #8
    3a8c:	af00      	add	r7, sp, #0
    3a8e:	0002      	movs	r2, r0
    3a90:	1dfb      	adds	r3, r7, #7
    3a92:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3a94:	1dfb      	adds	r3, r7, #7
    3a96:	781b      	ldrb	r3, [r3, #0]
    3a98:	0018      	movs	r0, r3
    3a9a:	4b03      	ldr	r3, [pc, #12]	; (3aa8 <port_get_group_from_gpio_pin+0x20>)
    3a9c:	4798      	blx	r3
    3a9e:	0003      	movs	r3, r0
}
    3aa0:	0018      	movs	r0, r3
    3aa2:	46bd      	mov	sp, r7
    3aa4:	b002      	add	sp, #8
    3aa6:	bd80      	pop	{r7, pc}
    3aa8:	00003a29 	.word	0x00003a29

00003aac <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3aac:	b580      	push	{r7, lr}
    3aae:	b084      	sub	sp, #16
    3ab0:	af00      	add	r7, sp, #0
    3ab2:	0002      	movs	r2, r0
    3ab4:	1dfb      	adds	r3, r7, #7
    3ab6:	701a      	strb	r2, [r3, #0]
    3ab8:	1dbb      	adds	r3, r7, #6
    3aba:	1c0a      	adds	r2, r1, #0
    3abc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3abe:	1dfb      	adds	r3, r7, #7
    3ac0:	781b      	ldrb	r3, [r3, #0]
    3ac2:	0018      	movs	r0, r3
    3ac4:	4b0d      	ldr	r3, [pc, #52]	; (3afc <port_pin_set_output_level+0x50>)
    3ac6:	4798      	blx	r3
    3ac8:	0003      	movs	r3, r0
    3aca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3acc:	1dfb      	adds	r3, r7, #7
    3ace:	781b      	ldrb	r3, [r3, #0]
    3ad0:	221f      	movs	r2, #31
    3ad2:	4013      	ands	r3, r2
    3ad4:	2201      	movs	r2, #1
    3ad6:	409a      	lsls	r2, r3
    3ad8:	0013      	movs	r3, r2
    3ada:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3adc:	1dbb      	adds	r3, r7, #6
    3ade:	781b      	ldrb	r3, [r3, #0]
    3ae0:	2b00      	cmp	r3, #0
    3ae2:	d003      	beq.n	3aec <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3ae4:	68fb      	ldr	r3, [r7, #12]
    3ae6:	68ba      	ldr	r2, [r7, #8]
    3ae8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3aea:	e002      	b.n	3af2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3aec:	68fb      	ldr	r3, [r7, #12]
    3aee:	68ba      	ldr	r2, [r7, #8]
    3af0:	615a      	str	r2, [r3, #20]
	}
}
    3af2:	46c0      	nop			; (mov r8, r8)
    3af4:	46bd      	mov	sp, r7
    3af6:	b004      	add	sp, #16
    3af8:	bd80      	pop	{r7, pc}
    3afa:	46c0      	nop			; (mov r8, r8)
    3afc:	00003a89 	.word	0x00003a89

00003b00 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    3b00:	b580      	push	{r7, lr}
    3b02:	b084      	sub	sp, #16
    3b04:	af00      	add	r7, sp, #0
    3b06:	0002      	movs	r2, r0
    3b08:	1dfb      	adds	r3, r7, #7
    3b0a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3b0c:	1dfb      	adds	r3, r7, #7
    3b0e:	781b      	ldrb	r3, [r3, #0]
    3b10:	0018      	movs	r0, r3
    3b12:	4b09      	ldr	r3, [pc, #36]	; (3b38 <port_pin_toggle_output_level+0x38>)
    3b14:	4798      	blx	r3
    3b16:	0003      	movs	r3, r0
    3b18:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3b1a:	1dfb      	adds	r3, r7, #7
    3b1c:	781b      	ldrb	r3, [r3, #0]
    3b1e:	221f      	movs	r2, #31
    3b20:	4013      	ands	r3, r2
    3b22:	2201      	movs	r2, #1
    3b24:	409a      	lsls	r2, r3
    3b26:	0013      	movs	r3, r2
    3b28:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    3b2a:	68fb      	ldr	r3, [r7, #12]
    3b2c:	68ba      	ldr	r2, [r7, #8]
    3b2e:	61da      	str	r2, [r3, #28]
}
    3b30:	46c0      	nop			; (mov r8, r8)
    3b32:	46bd      	mov	sp, r7
    3b34:	b004      	add	sp, #16
    3b36:	bd80      	pop	{r7, pc}
    3b38:	00003a89 	.word	0x00003a89

00003b3c <UartBytesReceived>:
#if APP_COORDINATOR

/*****************************************************************************
*****************************************************************************/
void UartBytesReceived(uint16_t bytes, uint8_t *byte )
{
    3b3c:	b580      	push	{r7, lr}
    3b3e:	b084      	sub	sp, #16
    3b40:	af00      	add	r7, sp, #0
    3b42:	0002      	movs	r2, r0
    3b44:	6039      	str	r1, [r7, #0]
    3b46:	1dbb      	adds	r3, r7, #6
    3b48:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < bytes; i++) {
    3b4a:	230e      	movs	r3, #14
    3b4c:	18fb      	adds	r3, r7, r3
    3b4e:	2200      	movs	r2, #0
    3b50:	801a      	strh	r2, [r3, #0]
    3b52:	e00f      	b.n	3b74 <UartBytesReceived+0x38>
		APP_CommandsByteReceived(byte[i]);
    3b54:	230e      	movs	r3, #14
    3b56:	18fb      	adds	r3, r7, r3
    3b58:	881b      	ldrh	r3, [r3, #0]
    3b5a:	683a      	ldr	r2, [r7, #0]
    3b5c:	18d3      	adds	r3, r2, r3
    3b5e:	781b      	ldrb	r3, [r3, #0]
    3b60:	0018      	movs	r0, r3
    3b62:	4b0a      	ldr	r3, [pc, #40]	; (3b8c <UartBytesReceived+0x50>)
    3b64:	4798      	blx	r3

/*****************************************************************************
*****************************************************************************/
void UartBytesReceived(uint16_t bytes, uint8_t *byte )
{
	for (uint16_t i = 0; i < bytes; i++) {
    3b66:	230e      	movs	r3, #14
    3b68:	18fb      	adds	r3, r7, r3
    3b6a:	881a      	ldrh	r2, [r3, #0]
    3b6c:	230e      	movs	r3, #14
    3b6e:	18fb      	adds	r3, r7, r3
    3b70:	3201      	adds	r2, #1
    3b72:	801a      	strh	r2, [r3, #0]
    3b74:	230e      	movs	r3, #14
    3b76:	18fa      	adds	r2, r7, r3
    3b78:	1dbb      	adds	r3, r7, #6
    3b7a:	8812      	ldrh	r2, [r2, #0]
    3b7c:	881b      	ldrh	r3, [r3, #0]
    3b7e:	429a      	cmp	r2, r3
    3b80:	d3e8      	bcc.n	3b54 <UartBytesReceived+0x18>
		APP_CommandsByteReceived(byte[i]);
	}
}
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	46bd      	mov	sp, r7
    3b86:	b004      	add	sp, #16
    3b88:	bd80      	pop	{r7, pc}
    3b8a:	46c0      	nop			; (mov r8, r8)
    3b8c:	0000345d 	.word	0x0000345d

00003b90 <appUartSendMessage>:

static void appUartSendMessage(uint8_t *data, uint8_t size)
{
    3b90:	b580      	push	{r7, lr}
    3b92:	b084      	sub	sp, #16
    3b94:	af00      	add	r7, sp, #0
    3b96:	6078      	str	r0, [r7, #4]
    3b98:	000a      	movs	r2, r1
    3b9a:	1cfb      	adds	r3, r7, #3
    3b9c:	701a      	strb	r2, [r3, #0]
	uint8_t cs = 0;
    3b9e:	230f      	movs	r3, #15
    3ba0:	18fb      	adds	r3, r7, r3
    3ba2:	2200      	movs	r2, #0
    3ba4:	701a      	strb	r2, [r3, #0]

	sio2host_putchar(0x10);
    3ba6:	2010      	movs	r0, #16
    3ba8:	4b2b      	ldr	r3, [pc, #172]	; (3c58 <appUartSendMessage+0xc8>)
    3baa:	4798      	blx	r3
	sio2host_putchar(0x02);
    3bac:	2002      	movs	r0, #2
    3bae:	4b2a      	ldr	r3, [pc, #168]	; (3c58 <appUartSendMessage+0xc8>)
    3bb0:	4798      	blx	r3

	for (uint8_t i = 0; i < size; i++) {
    3bb2:	230e      	movs	r3, #14
    3bb4:	18fb      	adds	r3, r7, r3
    3bb6:	2200      	movs	r2, #0
    3bb8:	701a      	strb	r2, [r3, #0]
    3bba:	e02e      	b.n	3c1a <appUartSendMessage+0x8a>
		if (data[i] == 0x10) {
    3bbc:	230e      	movs	r3, #14
    3bbe:	18fb      	adds	r3, r7, r3
    3bc0:	781b      	ldrb	r3, [r3, #0]
    3bc2:	687a      	ldr	r2, [r7, #4]
    3bc4:	18d3      	adds	r3, r2, r3
    3bc6:	781b      	ldrb	r3, [r3, #0]
    3bc8:	2b10      	cmp	r3, #16
    3bca:	d109      	bne.n	3be0 <appUartSendMessage+0x50>
			sio2host_putchar(0x10);
    3bcc:	2010      	movs	r0, #16
    3bce:	4b22      	ldr	r3, [pc, #136]	; (3c58 <appUartSendMessage+0xc8>)
    3bd0:	4798      	blx	r3
			cs += 0x10;
    3bd2:	230f      	movs	r3, #15
    3bd4:	18fb      	adds	r3, r7, r3
    3bd6:	220f      	movs	r2, #15
    3bd8:	18ba      	adds	r2, r7, r2
    3bda:	7812      	ldrb	r2, [r2, #0]
    3bdc:	3210      	adds	r2, #16
    3bde:	701a      	strb	r2, [r3, #0]
		}

		sio2host_putchar(data[i]);
    3be0:	230e      	movs	r3, #14
    3be2:	18fb      	adds	r3, r7, r3
    3be4:	781b      	ldrb	r3, [r3, #0]
    3be6:	687a      	ldr	r2, [r7, #4]
    3be8:	18d3      	adds	r3, r2, r3
    3bea:	781b      	ldrb	r3, [r3, #0]
    3bec:	0018      	movs	r0, r3
    3bee:	4b1a      	ldr	r3, [pc, #104]	; (3c58 <appUartSendMessage+0xc8>)
    3bf0:	4798      	blx	r3
		cs += data[i];
    3bf2:	230e      	movs	r3, #14
    3bf4:	18fb      	adds	r3, r7, r3
    3bf6:	781b      	ldrb	r3, [r3, #0]
    3bf8:	687a      	ldr	r2, [r7, #4]
    3bfa:	18d3      	adds	r3, r2, r3
    3bfc:	7819      	ldrb	r1, [r3, #0]
    3bfe:	230f      	movs	r3, #15
    3c00:	18fb      	adds	r3, r7, r3
    3c02:	220f      	movs	r2, #15
    3c04:	18ba      	adds	r2, r7, r2
    3c06:	7812      	ldrb	r2, [r2, #0]
    3c08:	188a      	adds	r2, r1, r2
    3c0a:	701a      	strb	r2, [r3, #0]
	uint8_t cs = 0;

	sio2host_putchar(0x10);
	sio2host_putchar(0x02);

	for (uint8_t i = 0; i < size; i++) {
    3c0c:	230e      	movs	r3, #14
    3c0e:	18fb      	adds	r3, r7, r3
    3c10:	781a      	ldrb	r2, [r3, #0]
    3c12:	230e      	movs	r3, #14
    3c14:	18fb      	adds	r3, r7, r3
    3c16:	3201      	adds	r2, #1
    3c18:	701a      	strb	r2, [r3, #0]
    3c1a:	230e      	movs	r3, #14
    3c1c:	18fa      	adds	r2, r7, r3
    3c1e:	1cfb      	adds	r3, r7, #3
    3c20:	7812      	ldrb	r2, [r2, #0]
    3c22:	781b      	ldrb	r3, [r3, #0]
    3c24:	429a      	cmp	r2, r3
    3c26:	d3c9      	bcc.n	3bbc <appUartSendMessage+0x2c>

		sio2host_putchar(data[i]);
		cs += data[i];
	}

	sio2host_putchar(0x10);
    3c28:	2010      	movs	r0, #16
    3c2a:	4b0b      	ldr	r3, [pc, #44]	; (3c58 <appUartSendMessage+0xc8>)
    3c2c:	4798      	blx	r3
	sio2host_putchar(0x03);
    3c2e:	2003      	movs	r0, #3
    3c30:	4b09      	ldr	r3, [pc, #36]	; (3c58 <appUartSendMessage+0xc8>)
    3c32:	4798      	blx	r3
	cs += 0x10 + 0x02 + 0x10 + 0x03;
    3c34:	230f      	movs	r3, #15
    3c36:	18fb      	adds	r3, r7, r3
    3c38:	220f      	movs	r2, #15
    3c3a:	18ba      	adds	r2, r7, r2
    3c3c:	7812      	ldrb	r2, [r2, #0]
    3c3e:	3225      	adds	r2, #37	; 0x25
    3c40:	701a      	strb	r2, [r3, #0]

	sio2host_putchar(cs);
    3c42:	230f      	movs	r3, #15
    3c44:	18fb      	adds	r3, r7, r3
    3c46:	781b      	ldrb	r3, [r3, #0]
    3c48:	0018      	movs	r0, r3
    3c4a:	4b03      	ldr	r3, [pc, #12]	; (3c58 <appUartSendMessage+0xc8>)
    3c4c:	4798      	blx	r3
}
    3c4e:	46c0      	nop			; (mov r8, r8)
    3c50:	46bd      	mov	sp, r7
    3c52:	b004      	add	sp, #16
    3c54:	bd80      	pop	{r7, pc}
    3c56:	46c0      	nop			; (mov r8, r8)
    3c58:	0000215d 	.word	0x0000215d

00003c5c <appDataInd>:
#endif

/*****************************************************************************
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    3c5c:	b580      	push	{r7, lr}
    3c5e:	b084      	sub	sp, #16
    3c60:	af00      	add	r7, sp, #0
    3c62:	6078      	str	r0, [r7, #4]
	AppMessage_t *msg = (AppMessage_t *)ind->data;
    3c64:	687b      	ldr	r3, [r7, #4]
    3c66:	689b      	ldr	r3, [r3, #8]
    3c68:	60fb      	str	r3, [r7, #12]
#if (LED_COUNT > 0)
	LED_Toggle(LED_DATA);
    3c6a:	2013      	movs	r0, #19
    3c6c:	4b10      	ldr	r3, [pc, #64]	; (3cb0 <appDataInd+0x54>)
    3c6e:	4798      	blx	r3
#endif
	msg->lqi = ind->lqi;
    3c70:	687b      	ldr	r3, [r7, #4]
    3c72:	7b5a      	ldrb	r2, [r3, #13]
    3c74:	68fb      	ldr	r3, [r7, #12]
    3c76:	765a      	strb	r2, [r3, #25]
	msg->rssi = ind->rssi;
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	220e      	movs	r2, #14
    3c7c:	569a      	ldrsb	r2, [r3, r2]
    3c7e:	68fb      	ldr	r3, [r7, #12]
    3c80:	769a      	strb	r2, [r3, #26]
#if APP_COORDINATOR
	appUartSendMessage(ind->data, ind->size);
    3c82:	687b      	ldr	r3, [r7, #4]
    3c84:	689a      	ldr	r2, [r3, #8]
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	7b1b      	ldrb	r3, [r3, #12]
    3c8a:	0019      	movs	r1, r3
    3c8c:	0010      	movs	r0, r2
    3c8e:	4b09      	ldr	r3, [pc, #36]	; (3cb4 <appDataInd+0x58>)
    3c90:	4798      	blx	r3

	if (APP_CommandsPending(ind->srcAddr)) {
    3c92:	687b      	ldr	r3, [r7, #4]
    3c94:	881b      	ldrh	r3, [r3, #0]
    3c96:	0018      	movs	r0, r3
    3c98:	4b07      	ldr	r3, [pc, #28]	; (3cb8 <appDataInd+0x5c>)
    3c9a:	4798      	blx	r3
    3c9c:	1e03      	subs	r3, r0, #0
    3c9e:	d002      	beq.n	3ca6 <appDataInd+0x4a>
		NWK_SetAckControl(APP_COMMAND_PENDING);
    3ca0:	2001      	movs	r0, #1
    3ca2:	4b06      	ldr	r3, [pc, #24]	; (3cbc <appDataInd+0x60>)
    3ca4:	4798      	blx	r3
	}
#endif
	return true;
    3ca6:	2301      	movs	r3, #1
}
    3ca8:	0018      	movs	r0, r3
    3caa:	46bd      	mov	sp, r7
    3cac:	b004      	add	sp, #16
    3cae:	bd80      	pop	{r7, pc}
    3cb0:	00003b01 	.word	0x00003b01
    3cb4:	00003b91 	.word	0x00003b91
    3cb8:	000033dd 	.word	0x000033dd
    3cbc:	00007c99 	.word	0x00007c99

00003cc0 <appDataSendingTimerHandler>:

/*****************************************************************************
*****************************************************************************/
static void appDataSendingTimerHandler(SYS_Timer_t *timer)
{
    3cc0:	b580      	push	{r7, lr}
    3cc2:	b082      	sub	sp, #8
    3cc4:	af00      	add	r7, sp, #0
    3cc6:	6078      	str	r0, [r7, #4]
	if (APP_STATE_WAIT_SEND_TIMER == appState) {
    3cc8:	4b07      	ldr	r3, [pc, #28]	; (3ce8 <appDataSendingTimerHandler+0x28>)
    3cca:	781b      	ldrb	r3, [r3, #0]
    3ccc:	2b04      	cmp	r3, #4
    3cce:	d103      	bne.n	3cd8 <appDataSendingTimerHandler+0x18>
		appState = APP_STATE_SEND;
    3cd0:	4b05      	ldr	r3, [pc, #20]	; (3ce8 <appDataSendingTimerHandler+0x28>)
    3cd2:	2201      	movs	r2, #1
    3cd4:	701a      	strb	r2, [r3, #0]
	} else {
		SYS_TimerStart(&appDataSendingTimer);
	}

	(void)timer;
}
    3cd6:	e003      	b.n	3ce0 <appDataSendingTimerHandler+0x20>
static void appDataSendingTimerHandler(SYS_Timer_t *timer)
{
	if (APP_STATE_WAIT_SEND_TIMER == appState) {
		appState = APP_STATE_SEND;
	} else {
		SYS_TimerStart(&appDataSendingTimer);
    3cd8:	4b04      	ldr	r3, [pc, #16]	; (3cec <appDataSendingTimerHandler+0x2c>)
    3cda:	0018      	movs	r0, r3
    3cdc:	4b04      	ldr	r3, [pc, #16]	; (3cf0 <appDataSendingTimerHandler+0x30>)
    3cde:	4798      	blx	r3
	}

	(void)timer;
}
    3ce0:	46c0      	nop			; (mov r8, r8)
    3ce2:	46bd      	mov	sp, r7
    3ce4:	b002      	add	sp, #8
    3ce6:	bd80      	pop	{r7, pc}
    3ce8:	20000218 	.word	0x20000218
    3cec:	2000026c 	.word	0x2000026c
    3cf0:	00005aa5 	.word	0x00005aa5

00003cf4 <appSendData>:
#endif

/*****************************************************************************
*****************************************************************************/
static void appSendData(void)
{
    3cf4:	b5b0      	push	{r4, r5, r7, lr}
    3cf6:	af00      	add	r7, sp, #0
#ifdef NWK_ENABLE_ROUTING
	appMsg.parentShortAddr = NWK_RouteNextHop(0, 0);
    3cf8:	2100      	movs	r1, #0
    3cfa:	2000      	movs	r0, #0
    3cfc:	4b13      	ldr	r3, [pc, #76]	; (3d4c <appSendData+0x58>)
    3cfe:	4798      	blx	r3
    3d00:	0003      	movs	r3, r0
    3d02:	001a      	movs	r2, r3
    3d04:	4b12      	ldr	r3, [pc, #72]	; (3d50 <appSendData+0x5c>)
    3d06:	3317      	adds	r3, #23
    3d08:	21ff      	movs	r1, #255	; 0xff
    3d0a:	4011      	ands	r1, r2
    3d0c:	000c      	movs	r4, r1
    3d0e:	7819      	ldrb	r1, [r3, #0]
    3d10:	2000      	movs	r0, #0
    3d12:	4001      	ands	r1, r0
    3d14:	1c08      	adds	r0, r1, #0
    3d16:	1c21      	adds	r1, r4, #0
    3d18:	4301      	orrs	r1, r0
    3d1a:	7019      	strb	r1, [r3, #0]
    3d1c:	0a12      	lsrs	r2, r2, #8
    3d1e:	b290      	uxth	r0, r2
    3d20:	785a      	ldrb	r2, [r3, #1]
    3d22:	2100      	movs	r1, #0
    3d24:	400a      	ands	r2, r1
    3d26:	1c11      	adds	r1, r2, #0
    3d28:	1c02      	adds	r2, r0, #0
    3d2a:	430a      	orrs	r2, r1
    3d2c:	705a      	strb	r2, [r3, #1]
	
#endif


#if APP_COORDINATOR
	appUartSendMessage((uint8_t *)&appMsg, sizeof(appMsg));
    3d2e:	4b08      	ldr	r3, [pc, #32]	; (3d50 <appSendData+0x5c>)
    3d30:	213a      	movs	r1, #58	; 0x3a
    3d32:	0018      	movs	r0, r3
    3d34:	4b07      	ldr	r3, [pc, #28]	; (3d54 <appSendData+0x60>)
    3d36:	4798      	blx	r3
	SYS_TimerStart(&appDataSendingTimer);
    3d38:	4b07      	ldr	r3, [pc, #28]	; (3d58 <appSendData+0x64>)
    3d3a:	0018      	movs	r0, r3
    3d3c:	4b07      	ldr	r3, [pc, #28]	; (3d5c <appSendData+0x68>)
    3d3e:	4798      	blx	r3
	appState = APP_STATE_WAIT_SEND_TIMER;
    3d40:	4b07      	ldr	r3, [pc, #28]	; (3d60 <appSendData+0x6c>)
    3d42:	2204      	movs	r2, #4
    3d44:	701a      	strb	r2, [r3, #0]
#endif
	NWK_DataReq(&appNwkDataReq);

	appState = APP_STATE_WAIT_CONF;
#endif
}
    3d46:	46c0      	nop			; (mov r8, r8)
    3d48:	46bd      	mov	sp, r7
    3d4a:	bdb0      	pop	{r4, r5, r7, pc}
    3d4c:	00006bd1 	.word	0x00006bd1
    3d50:	20000230 	.word	0x20000230
    3d54:	00003b91 	.word	0x00003b91
    3d58:	2000026c 	.word	0x2000026c
    3d5c:	00005aa5 	.word	0x00005aa5
    3d60:	20000218 	.word	0x20000218

00003d64 <appInit>:

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
    3d64:	b580      	push	{r7, lr}
    3d66:	af00      	add	r7, sp, #0
	appMsg.commandId            = APP_COMMAND_ID_NETWORK_INFO;
    3d68:	4b66      	ldr	r3, [pc, #408]	; (3f04 <appInit+0x1a0>)
    3d6a:	2201      	movs	r2, #1
    3d6c:	701a      	strb	r2, [r3, #0]
	appMsg.nodeType             = APP_NODE_TYPE;
    3d6e:	4b65      	ldr	r3, [pc, #404]	; (3f04 <appInit+0x1a0>)
    3d70:	2200      	movs	r2, #0
    3d72:	705a      	strb	r2, [r3, #1]
	appMsg.extAddr              = APP_ADDR;
    3d74:	4b63      	ldr	r3, [pc, #396]	; (3f04 <appInit+0x1a0>)
    3d76:	3302      	adds	r3, #2
    3d78:	881a      	ldrh	r2, [r3, #0]
    3d7a:	2100      	movs	r1, #0
    3d7c:	400a      	ands	r2, r1
    3d7e:	801a      	strh	r2, [r3, #0]
    3d80:	885a      	ldrh	r2, [r3, #2]
    3d82:	2100      	movs	r1, #0
    3d84:	400a      	ands	r2, r1
    3d86:	805a      	strh	r2, [r3, #2]
    3d88:	889a      	ldrh	r2, [r3, #4]
    3d8a:	2100      	movs	r1, #0
    3d8c:	400a      	ands	r2, r1
    3d8e:	809a      	strh	r2, [r3, #4]
    3d90:	88da      	ldrh	r2, [r3, #6]
    3d92:	2100      	movs	r1, #0
    3d94:	400a      	ands	r2, r1
    3d96:	80da      	strh	r2, [r3, #6]
	appMsg.shortAddr            = APP_ADDR;
    3d98:	4b5a      	ldr	r3, [pc, #360]	; (3f04 <appInit+0x1a0>)
    3d9a:	2200      	movs	r2, #0
    3d9c:	815a      	strh	r2, [r3, #10]
	appMsg.softVersion          = 0x01010100;
    3d9e:	4b59      	ldr	r3, [pc, #356]	; (3f04 <appInit+0x1a0>)
    3da0:	4a59      	ldr	r2, [pc, #356]	; (3f08 <appInit+0x1a4>)
    3da2:	60da      	str	r2, [r3, #12]
	appMsg.channelMask          = (1L << APP_CHANNEL);
    3da4:	4b57      	ldr	r3, [pc, #348]	; (3f04 <appInit+0x1a0>)
    3da6:	2280      	movs	r2, #128	; 0x80
    3da8:	0212      	lsls	r2, r2, #8
    3daa:	611a      	str	r2, [r3, #16]
	appMsg.panId                = APP_PANID;
    3dac:	4b55      	ldr	r3, [pc, #340]	; (3f04 <appInit+0x1a0>)
    3dae:	4a57      	ldr	r2, [pc, #348]	; (3f0c <appInit+0x1a8>)
    3db0:	829a      	strh	r2, [r3, #20]
	appMsg.workingChannel       = APP_CHANNEL;
    3db2:	4b54      	ldr	r3, [pc, #336]	; (3f04 <appInit+0x1a0>)
    3db4:	220f      	movs	r2, #15
    3db6:	759a      	strb	r2, [r3, #22]
	appMsg.parentShortAddr      = 0;
    3db8:	4b52      	ldr	r3, [pc, #328]	; (3f04 <appInit+0x1a0>)
    3dba:	3317      	adds	r3, #23
    3dbc:	781a      	ldrb	r2, [r3, #0]
    3dbe:	2100      	movs	r1, #0
    3dc0:	400a      	ands	r2, r1
    3dc2:	701a      	strb	r2, [r3, #0]
    3dc4:	785a      	ldrb	r2, [r3, #1]
    3dc6:	2100      	movs	r1, #0
    3dc8:	400a      	ands	r2, r1
    3dca:	705a      	strb	r2, [r3, #1]
	appMsg.lqi                  = 0;
    3dcc:	4b4d      	ldr	r3, [pc, #308]	; (3f04 <appInit+0x1a0>)
    3dce:	2200      	movs	r2, #0
    3dd0:	765a      	strb	r2, [r3, #25]
	appMsg.rssi                 = 0;
    3dd2:	4b4c      	ldr	r3, [pc, #304]	; (3f04 <appInit+0x1a0>)
    3dd4:	2200      	movs	r2, #0
    3dd6:	769a      	strb	r2, [r3, #26]

	appMsg.sensors.type        = 1;
    3dd8:	4b4a      	ldr	r3, [pc, #296]	; (3f04 <appInit+0x1a0>)
    3dda:	2201      	movs	r2, #1
    3ddc:	76da      	strb	r2, [r3, #27]
	appMsg.sensors.size        = sizeof(int32_t) * 4;
    3dde:	4b49      	ldr	r3, [pc, #292]	; (3f04 <appInit+0x1a0>)
    3de0:	2210      	movs	r2, #16
    3de2:	771a      	strb	r2, [r3, #28]
	appMsg.sensors.battery     = 0;
    3de4:	4b47      	ldr	r3, [pc, #284]	; (3f04 <appInit+0x1a0>)
    3de6:	331d      	adds	r3, #29
    3de8:	781a      	ldrb	r2, [r3, #0]
    3dea:	2100      	movs	r1, #0
    3dec:	400a      	ands	r2, r1
    3dee:	701a      	strb	r2, [r3, #0]
    3df0:	785a      	ldrb	r2, [r3, #1]
    3df2:	2100      	movs	r1, #0
    3df4:	400a      	ands	r2, r1
    3df6:	705a      	strb	r2, [r3, #1]
    3df8:	789a      	ldrb	r2, [r3, #2]
    3dfa:	2100      	movs	r1, #0
    3dfc:	400a      	ands	r2, r1
    3dfe:	709a      	strb	r2, [r3, #2]
    3e00:	78da      	ldrb	r2, [r3, #3]
    3e02:	2100      	movs	r1, #0
    3e04:	400a      	ands	r2, r1
    3e06:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.temperature = 0;
    3e08:	4b3e      	ldr	r3, [pc, #248]	; (3f04 <appInit+0x1a0>)
    3e0a:	3321      	adds	r3, #33	; 0x21
    3e0c:	781a      	ldrb	r2, [r3, #0]
    3e0e:	2100      	movs	r1, #0
    3e10:	400a      	ands	r2, r1
    3e12:	701a      	strb	r2, [r3, #0]
    3e14:	785a      	ldrb	r2, [r3, #1]
    3e16:	2100      	movs	r1, #0
    3e18:	400a      	ands	r2, r1
    3e1a:	705a      	strb	r2, [r3, #1]
    3e1c:	789a      	ldrb	r2, [r3, #2]
    3e1e:	2100      	movs	r1, #0
    3e20:	400a      	ands	r2, r1
    3e22:	709a      	strb	r2, [r3, #2]
    3e24:	78da      	ldrb	r2, [r3, #3]
    3e26:	2100      	movs	r1, #0
    3e28:	400a      	ands	r2, r1
    3e2a:	70da      	strb	r2, [r3, #3]
	//appMsg.sensors.light       = 0;
	appMsg.sensors.humidity		= 0;
    3e2c:	4b35      	ldr	r3, [pc, #212]	; (3f04 <appInit+0x1a0>)
    3e2e:	3329      	adds	r3, #41	; 0x29
    3e30:	781a      	ldrb	r2, [r3, #0]
    3e32:	2100      	movs	r1, #0
    3e34:	400a      	ands	r2, r1
    3e36:	701a      	strb	r2, [r3, #0]
    3e38:	785a      	ldrb	r2, [r3, #1]
    3e3a:	2100      	movs	r1, #0
    3e3c:	400a      	ands	r2, r1
    3e3e:	705a      	strb	r2, [r3, #1]
    3e40:	789a      	ldrb	r2, [r3, #2]
    3e42:	2100      	movs	r1, #0
    3e44:	400a      	ands	r2, r1
    3e46:	709a      	strb	r2, [r3, #2]
    3e48:	78da      	ldrb	r2, [r3, #3]
    3e4a:	2100      	movs	r1, #0
    3e4c:	400a      	ands	r2, r1
    3e4e:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.moisture      = 0;
    3e50:	4b2c      	ldr	r3, [pc, #176]	; (3f04 <appInit+0x1a0>)
    3e52:	3325      	adds	r3, #37	; 0x25
    3e54:	781a      	ldrb	r2, [r3, #0]
    3e56:	2100      	movs	r1, #0
    3e58:	400a      	ands	r2, r1
    3e5a:	701a      	strb	r2, [r3, #0]
    3e5c:	785a      	ldrb	r2, [r3, #1]
    3e5e:	2100      	movs	r1, #0
    3e60:	400a      	ands	r2, r1
    3e62:	705a      	strb	r2, [r3, #1]
    3e64:	789a      	ldrb	r2, [r3, #2]
    3e66:	2100      	movs	r1, #0
    3e68:	400a      	ands	r2, r1
    3e6a:	709a      	strb	r2, [r3, #2]
    3e6c:	78da      	ldrb	r2, [r3, #3]
    3e6e:	2100      	movs	r1, #0
    3e70:	400a      	ands	r2, r1
    3e72:	70da      	strb	r2, [r3, #3]

	appMsg.caption.type         = 32;
    3e74:	4b23      	ldr	r3, [pc, #140]	; (3f04 <appInit+0x1a0>)
    3e76:	222d      	movs	r2, #45	; 0x2d
    3e78:	2120      	movs	r1, #32
    3e7a:	5499      	strb	r1, [r3, r2]
	appMsg.caption.size         = APP_CAPTION_SIZE;
    3e7c:	4b21      	ldr	r3, [pc, #132]	; (3f04 <appInit+0x1a0>)
    3e7e:	222e      	movs	r2, #46	; 0x2e
    3e80:	210b      	movs	r1, #11
    3e82:	5499      	strb	r1, [r3, r2]
	memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    3e84:	4b1f      	ldr	r3, [pc, #124]	; (3f04 <appInit+0x1a0>)
    3e86:	222f      	movs	r2, #47	; 0x2f
    3e88:	4921      	ldr	r1, [pc, #132]	; (3f10 <appInit+0x1ac>)
    3e8a:	189b      	adds	r3, r3, r2
    3e8c:	220b      	movs	r2, #11
    3e8e:	0018      	movs	r0, r3
    3e90:	4b20      	ldr	r3, [pc, #128]	; (3f14 <appInit+0x1b0>)
    3e92:	4798      	blx	r3

	NWK_SetAddr(APP_ADDR);
    3e94:	2000      	movs	r0, #0
    3e96:	4b20      	ldr	r3, [pc, #128]	; (3f18 <appInit+0x1b4>)
    3e98:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    3e9a:	4b1c      	ldr	r3, [pc, #112]	; (3f0c <appInit+0x1a8>)
    3e9c:	0018      	movs	r0, r3
    3e9e:	4b1f      	ldr	r3, [pc, #124]	; (3f1c <appInit+0x1b8>)
    3ea0:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    3ea2:	200f      	movs	r0, #15
    3ea4:	4b1e      	ldr	r3, [pc, #120]	; (3f20 <appInit+0x1bc>)
    3ea6:	4798      	blx	r3
#if (defined(PHY_AT86RF212B) || defined(PHY_AT86RF212))
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
#endif
	PHY_SetRxState(true);
    3ea8:	2001      	movs	r0, #1
    3eaa:	4b1e      	ldr	r3, [pc, #120]	; (3f24 <appInit+0x1c0>)
    3eac:	4798      	blx	r3

#ifdef NWK_ENABLE_SECURITY
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    3eae:	4b1e      	ldr	r3, [pc, #120]	; (3f28 <appInit+0x1c4>)
    3eb0:	0018      	movs	r0, r3
    3eb2:	4b1e      	ldr	r3, [pc, #120]	; (3f2c <appInit+0x1c8>)
    3eb4:	4798      	blx	r3
#endif

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    3eb6:	4b1e      	ldr	r3, [pc, #120]	; (3f30 <appInit+0x1cc>)
    3eb8:	0019      	movs	r1, r3
    3eba:	2001      	movs	r0, #1
    3ebc:	4b1d      	ldr	r3, [pc, #116]	; (3f34 <appInit+0x1d0>)
    3ebe:	4798      	blx	r3

	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    3ec0:	4b1d      	ldr	r3, [pc, #116]	; (3f38 <appInit+0x1d4>)
    3ec2:	22fa      	movs	r2, #250	; 0xfa
    3ec4:	00d2      	lsls	r2, r2, #3
    3ec6:	609a      	str	r2, [r3, #8]
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3ec8:	4b1b      	ldr	r3, [pc, #108]	; (3f38 <appInit+0x1d4>)
    3eca:	2200      	movs	r2, #0
    3ecc:	731a      	strb	r2, [r3, #12]
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    3ece:	4b1a      	ldr	r3, [pc, #104]	; (3f38 <appInit+0x1d4>)
    3ed0:	4a1a      	ldr	r2, [pc, #104]	; (3f3c <appInit+0x1d8>)
    3ed2:	611a      	str	r2, [r3, #16]
#if (LED_DATA)
	LED_Init(LED_DATA);
    3ed4:	2013      	movs	r0, #19
    3ed6:	4b1a      	ldr	r3, [pc, #104]	; (3f40 <appInit+0x1dc>)
    3ed8:	4798      	blx	r3
#define LED_COUNT 1
#endif
#if LED_NETWORK
	LED_Init(LED_NETWORK);
    3eda:	2013      	movs	r0, #19
    3edc:	4b18      	ldr	r3, [pc, #96]	; (3f40 <appInit+0x1dc>)
    3ede:	4798      	blx	r3
	appCommandWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
	appCommandWaitTimer.handler = appCommandWaitTimerHandler;
#else
#if (LED_COUNT > 0)
	
	LED_On(LED_NETWORK);
    3ee0:	2100      	movs	r1, #0
    3ee2:	2013      	movs	r0, #19
    3ee4:	4b17      	ldr	r3, [pc, #92]	; (3f44 <appInit+0x1e0>)
    3ee6:	4798      	blx	r3
#endif
#endif

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
	srand(PHY_RandomReq());
    3ee8:	4b17      	ldr	r3, [pc, #92]	; (3f48 <appInit+0x1e4>)
    3eea:	4798      	blx	r3
    3eec:	0003      	movs	r3, r0
    3eee:	0018      	movs	r0, r3
    3ef0:	4b16      	ldr	r3, [pc, #88]	; (3f4c <appInit+0x1e8>)
    3ef2:	4798      	blx	r3
#endif

	APP_CommandsInit();
    3ef4:	4b16      	ldr	r3, [pc, #88]	; (3f50 <appInit+0x1ec>)
    3ef6:	4798      	blx	r3

	appState = APP_STATE_SEND;
    3ef8:	4b16      	ldr	r3, [pc, #88]	; (3f54 <appInit+0x1f0>)
    3efa:	2201      	movs	r2, #1
    3efc:	701a      	strb	r2, [r3, #0]
}
    3efe:	46c0      	nop			; (mov r8, r8)
    3f00:	46bd      	mov	sp, r7
    3f02:	bd80      	pop	{r7, pc}
    3f04:	20000230 	.word	0x20000230
    3f08:	01010100 	.word	0x01010100
    3f0c:	00001234 	.word	0x00001234
    3f10:	0000caec 	.word	0x0000caec
    3f14:	0000c209 	.word	0x0000c209
    3f18:	0000636d 	.word	0x0000636d
    3f1c:	0000639d 	.word	0x0000639d
    3f20:	00005e9d 	.word	0x00005e9d
    3f24:	00005e75 	.word	0x00005e75
    3f28:	0000caf8 	.word	0x0000caf8
    3f2c:	000084e5 	.word	0x000084e5
    3f30:	00003c5d 	.word	0x00003c5d
    3f34:	000063cd 	.word	0x000063cd
    3f38:	2000026c 	.word	0x2000026c
    3f3c:	00003cc1 	.word	0x00003cc1
    3f40:	00003b01 	.word	0x00003b01
    3f44:	00003aad 	.word	0x00003aad
    3f48:	00005fd1 	.word	0x00005fd1
    3f4c:	0000c22d 	.word	0x0000c22d
    3f50:	00003311 	.word	0x00003311
    3f54:	20000218 	.word	0x20000218

00003f58 <APP_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
    3f58:	b580      	push	{r7, lr}
    3f5a:	b082      	sub	sp, #8
    3f5c:	af00      	add	r7, sp, #0
	switch (appState) {
    3f5e:	4b17      	ldr	r3, [pc, #92]	; (3fbc <APP_TaskHandler+0x64>)
    3f60:	781b      	ldrb	r3, [r3, #0]
    3f62:	2b01      	cmp	r3, #1
    3f64:	d007      	beq.n	3f76 <APP_TaskHandler+0x1e>
    3f66:	2b03      	cmp	r3, #3
    3f68:	d008      	beq.n	3f7c <APP_TaskHandler+0x24>
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	d000      	beq.n	3f70 <APP_TaskHandler+0x18>
		appState = APP_STATE_SEND;
	}
	break;
#endif
	default:
		break;
    3f6e:	e00d      	b.n	3f8c <APP_TaskHandler+0x34>
static void APP_TaskHandler(void)
{
	switch (appState) {
	case APP_STATE_INITIAL:
	{
		appInit();
    3f70:	4b13      	ldr	r3, [pc, #76]	; (3fc0 <APP_TaskHandler+0x68>)
    3f72:	4798      	blx	r3
	}
	break;
    3f74:	e00a      	b.n	3f8c <APP_TaskHandler+0x34>

	case APP_STATE_SEND:
	{
		appSendData();
    3f76:	4b13      	ldr	r3, [pc, #76]	; (3fc4 <APP_TaskHandler+0x6c>)
    3f78:	4798      	blx	r3
	}
	break;
    3f7a:	e007      	b.n	3f8c <APP_TaskHandler+0x34>
	case APP_STATE_SENDING_DONE:
	{
#if APP_ENDDEVICE
		appState = APP_STATE_PREPARE_TO_SLEEP;
#else
		SYS_TimerStart(&appDataSendingTimer);
    3f7c:	4b12      	ldr	r3, [pc, #72]	; (3fc8 <APP_TaskHandler+0x70>)
    3f7e:	0018      	movs	r0, r3
    3f80:	4b12      	ldr	r3, [pc, #72]	; (3fcc <APP_TaskHandler+0x74>)
    3f82:	4798      	blx	r3
		appState = APP_STATE_WAIT_SEND_TIMER;
    3f84:	4b0d      	ldr	r3, [pc, #52]	; (3fbc <APP_TaskHandler+0x64>)
    3f86:	2204      	movs	r2, #4
    3f88:	701a      	strb	r2, [r3, #0]
#endif
	}
	break;
    3f8a:	46c0      	nop			; (mov r8, r8)
	}

#if (APP_COORDINATOR)
	uint16_t bytes;
#if !SIO2USB
	if ((bytes = sio2host_rx(rx_data, APP_RX_BUF_SIZE)) > 0) {
    3f8c:	4b10      	ldr	r3, [pc, #64]	; (3fd0 <APP_TaskHandler+0x78>)
    3f8e:	2114      	movs	r1, #20
    3f90:	0018      	movs	r0, r3
    3f92:	4b10      	ldr	r3, [pc, #64]	; (3fd4 <APP_TaskHandler+0x7c>)
    3f94:	4798      	blx	r3
    3f96:	0003      	movs	r3, r0
    3f98:	001a      	movs	r2, r3
    3f9a:	1dbb      	adds	r3, r7, #6
    3f9c:	801a      	strh	r2, [r3, #0]
    3f9e:	1dbb      	adds	r3, r7, #6
    3fa0:	881b      	ldrh	r3, [r3, #0]
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d006      	beq.n	3fb4 <APP_TaskHandler+0x5c>
		UartBytesReceived(bytes, (uint8_t *)&rx_data);
    3fa6:	4a0a      	ldr	r2, [pc, #40]	; (3fd0 <APP_TaskHandler+0x78>)
    3fa8:	1dbb      	adds	r3, r7, #6
    3faa:	881b      	ldrh	r3, [r3, #0]
    3fac:	0011      	movs	r1, r2
    3fae:	0018      	movs	r0, r3
    3fb0:	4b09      	ldr	r3, [pc, #36]	; (3fd8 <APP_TaskHandler+0x80>)
    3fb2:	4798      	blx	r3
	{
		UartBytesReceived(bytes, (uint8_t *)&rx_data);
	}
#endif
#endif
}
    3fb4:	46c0      	nop			; (mov r8, r8)
    3fb6:	46bd      	mov	sp, r7
    3fb8:	b002      	add	sp, #8
    3fba:	bd80      	pop	{r7, pc}
    3fbc:	20000218 	.word	0x20000218
    3fc0:	00003d65 	.word	0x00003d65
    3fc4:	00003cf5 	.word	0x00003cf5
    3fc8:	2000026c 	.word	0x2000026c
    3fcc:	00005aa5 	.word	0x00005aa5
    3fd0:	2000021c 	.word	0x2000021c
    3fd4:	00002061 	.word	0x00002061
    3fd8:	00003b3d 	.word	0x00003b3d

00003fdc <wsndemo_init>:

/**
 * Init function of the WSNDemo application
 */
void wsndemo_init(void)
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	af00      	add	r7, sp, #0
	
	SYS_Init();
    3fe0:	4b03      	ldr	r3, [pc, #12]	; (3ff0 <wsndemo_init+0x14>)
    3fe2:	4798      	blx	r3
#endif // HTU21D

#endif
#if APP_COORDINATOR
#if !SIO2USB
	sio2host_init();
    3fe4:	4b03      	ldr	r3, [pc, #12]	; (3ff4 <wsndemo_init+0x18>)
    3fe6:	4798      	blx	r3
	stdio_usb_init();
	stdio_usb_enable();
#endif

#endif
}
    3fe8:	46c0      	nop			; (mov r8, r8)
    3fea:	46bd      	mov	sp, r7
    3fec:	bd80      	pop	{r7, pc}
    3fee:	46c0      	nop			; (mov r8, r8)
    3ff0:	00005969 	.word	0x00005969
    3ff4:	00001f69 	.word	0x00001f69

00003ff8 <wsndemo_task>:
/**
 * Task of the WSNDemo application
 * This task should be called in a while(1)
 */
void wsndemo_task(void)
{
    3ff8:	b580      	push	{r7, lr}
    3ffa:	af00      	add	r7, sp, #0
	SYS_TaskHandler();
    3ffc:	4b03      	ldr	r3, [pc, #12]	; (400c <wsndemo_task+0x14>)
    3ffe:	4798      	blx	r3
	APP_TaskHandler();
    4000:	4b03      	ldr	r3, [pc, #12]	; (4010 <wsndemo_task+0x18>)
    4002:	4798      	blx	r3
}
    4004:	46c0      	nop			; (mov r8, r8)
    4006:	46bd      	mov	sp, r7
    4008:	bd80      	pop	{r7, pc}
    400a:	46c0      	nop			; (mov r8, r8)
    400c:	00005995 	.word	0x00005995
    4010:	00003f59 	.word	0x00003f59

00004014 <sal_init>:
 * @brief Initialization of SAL.
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
    4014:	b580      	push	{r7, lr}
    4016:	af00      	add	r7, sp, #0
}
    4018:	46c0      	nop			; (mov r8, r8)
    401a:	46bd      	mov	sp, r7
    401c:	bd80      	pop	{r7, pc}
    401e:	46c0      	nop			; (mov r8, r8)

00004020 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    4020:	b580      	push	{r7, lr}
    4022:	b086      	sub	sp, #24
    4024:	af00      	add	r7, sp, #0
    4026:	6078      	str	r0, [r7, #4]
    4028:	0008      	movs	r0, r1
    402a:	0011      	movs	r1, r2
    402c:	1cfb      	adds	r3, r7, #3
    402e:	1c02      	adds	r2, r0, #0
    4030:	701a      	strb	r2, [r3, #0]
    4032:	1cbb      	adds	r3, r7, #2
    4034:	1c0a      	adds	r2, r1, #0
    4036:	701a      	strb	r2, [r3, #0]
	if (key != NULL) {
    4038:	687b      	ldr	r3, [r7, #4]
    403a:	2b00      	cmp	r3, #0
    403c:	d01c      	beq.n	4078 <sal_aes_setup+0x58>
		/* Setup key. */
		dec_initialized = false;
    403e:	4b5e      	ldr	r3, [pc, #376]	; (41b8 <sal_aes_setup+0x198>)
    4040:	2200      	movs	r2, #0
    4042:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    4044:	4b5d      	ldr	r3, [pc, #372]	; (41bc <sal_aes_setup+0x19c>)
    4046:	2202      	movs	r2, #2
    4048:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    404a:	4a5d      	ldr	r2, [pc, #372]	; (41c0 <sal_aes_setup+0x1a0>)
    404c:	687b      	ldr	r3, [r7, #4]
    404e:	0010      	movs	r0, r2
    4050:	0019      	movs	r1, r3
    4052:	2310      	movs	r3, #16
    4054:	001a      	movs	r2, r3
    4056:	4b5b      	ldr	r3, [pc, #364]	; (41c4 <sal_aes_setup+0x1a4>)
    4058:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    405a:	4b5b      	ldr	r3, [pc, #364]	; (41c8 <sal_aes_setup+0x1a8>)
    405c:	2210      	movs	r2, #16
    405e:	701a      	strb	r2, [r3, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    4060:	4b5a      	ldr	r3, [pc, #360]	; (41cc <sal_aes_setup+0x1ac>)
    4062:	6879      	ldr	r1, [r7, #4]
    4064:	2210      	movs	r2, #16
    4066:	0018      	movs	r0, r3
    4068:	4b56      	ldr	r3, [pc, #344]	; (41c4 <sal_aes_setup+0x1a4>)
    406a:	4798      	blx	r3

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    406c:	4b56      	ldr	r3, [pc, #344]	; (41c8 <sal_aes_setup+0x1a8>)
    406e:	2211      	movs	r2, #17
    4070:	0019      	movs	r1, r3
    4072:	2083      	movs	r0, #131	; 0x83
    4074:	4b56      	ldr	r3, [pc, #344]	; (41d0 <sal_aes_setup+0x1b0>)
    4076:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    4078:	1cbb      	adds	r3, r7, #2
    407a:	781b      	ldrb	r3, [r3, #0]
    407c:	2b00      	cmp	r3, #0
    407e:	d002      	beq.n	4086 <sal_aes_setup+0x66>
    4080:	2b01      	cmp	r3, #1
    4082:	d016      	beq.n	40b2 <sal_aes_setup+0x92>
    4084:	e053      	b.n	412e <sal_aes_setup+0x10e>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    4086:	4b4d      	ldr	r3, [pc, #308]	; (41bc <sal_aes_setup+0x19c>)
    4088:	781b      	ldrb	r3, [r3, #0]
    408a:	2b01      	cmp	r3, #1
    408c:	d151      	bne.n	4132 <sal_aes_setup+0x112>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    408e:	4b4e      	ldr	r3, [pc, #312]	; (41c8 <sal_aes_setup+0x1a8>)
    4090:	2210      	movs	r2, #16
    4092:	701a      	strb	r2, [r3, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    4094:	4a4d      	ldr	r2, [pc, #308]	; (41cc <sal_aes_setup+0x1ac>)
    4096:	4b4a      	ldr	r3, [pc, #296]	; (41c0 <sal_aes_setup+0x1a0>)
    4098:	0010      	movs	r0, r2
    409a:	0019      	movs	r1, r3
    409c:	2310      	movs	r3, #16
    409e:	001a      	movs	r2, r3
    40a0:	4b48      	ldr	r3, [pc, #288]	; (41c4 <sal_aes_setup+0x1a4>)
    40a2:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    40a4:	4b48      	ldr	r3, [pc, #288]	; (41c8 <sal_aes_setup+0x1a8>)
    40a6:	2211      	movs	r2, #17
    40a8:	0019      	movs	r1, r3
    40aa:	2083      	movs	r0, #131	; 0x83
    40ac:	4b48      	ldr	r3, [pc, #288]	; (41d0 <sal_aes_setup+0x1b0>)
    40ae:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);
		}

		break;
    40b0:	e03f      	b.n	4132 <sal_aes_setup+0x112>

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    40b2:	4b42      	ldr	r3, [pc, #264]	; (41bc <sal_aes_setup+0x19c>)
    40b4:	781b      	ldrb	r3, [r3, #0]
    40b6:	2b01      	cmp	r3, #1
    40b8:	d03d      	beq.n	4136 <sal_aes_setup+0x116>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    40ba:	4b43      	ldr	r3, [pc, #268]	; (41c8 <sal_aes_setup+0x1a8>)
    40bc:	2210      	movs	r2, #16
    40be:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    40c0:	4b3d      	ldr	r3, [pc, #244]	; (41b8 <sal_aes_setup+0x198>)
    40c2:	781b      	ldrb	r3, [r3, #0]
    40c4:	2201      	movs	r2, #1
    40c6:	4053      	eors	r3, r2
    40c8:	b2db      	uxtb	r3, r3
    40ca:	2b00      	cmp	r3, #0
    40cc:	d01d      	beq.n	410a <sal_aes_setup+0xea>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    40ce:	4b3e      	ldr	r3, [pc, #248]	; (41c8 <sal_aes_setup+0x1a8>)
    40d0:	2200      	movs	r2, #0
    40d2:	701a      	strb	r2, [r3, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    40d4:	4b3c      	ldr	r3, [pc, #240]	; (41c8 <sal_aes_setup+0x1a8>)
    40d6:	2280      	movs	r2, #128	; 0x80
    40d8:	745a      	strb	r2, [r3, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    40da:	4b3e      	ldr	r3, [pc, #248]	; (41d4 <sal_aes_setup+0x1b4>)
    40dc:	2201      	movs	r2, #1
    40de:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    40e0:	2308      	movs	r3, #8
    40e2:	18fb      	adds	r3, r7, r3
    40e4:	2100      	movs	r1, #0
    40e6:	0018      	movs	r0, r3
    40e8:	4b3b      	ldr	r3, [pc, #236]	; (41d8 <sal_aes_setup+0x1b8>)
    40ea:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    40ec:	4b36      	ldr	r3, [pc, #216]	; (41c8 <sal_aes_setup+0x1a8>)
    40ee:	2210      	movs	r2, #16
    40f0:	701a      	strb	r2, [r3, #0]
				trx_sram_write(
    40f2:	4b35      	ldr	r3, [pc, #212]	; (41c8 <sal_aes_setup+0x1a8>)
    40f4:	2201      	movs	r2, #1
    40f6:	0019      	movs	r1, r3
    40f8:	2083      	movs	r0, #131	; 0x83
    40fa:	4b35      	ldr	r3, [pc, #212]	; (41d0 <sal_aes_setup+0x1b0>)
    40fc:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    40fe:	4b37      	ldr	r3, [pc, #220]	; (41dc <sal_aes_setup+0x1bc>)
    4100:	2210      	movs	r2, #16
    4102:	0019      	movs	r1, r3
    4104:	2084      	movs	r0, #132	; 0x84
    4106:	4b36      	ldr	r3, [pc, #216]	; (41e0 <sal_aes_setup+0x1c0>)
    4108:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    410a:	4a30      	ldr	r2, [pc, #192]	; (41cc <sal_aes_setup+0x1ac>)
    410c:	4b33      	ldr	r3, [pc, #204]	; (41dc <sal_aes_setup+0x1bc>)
    410e:	0010      	movs	r0, r2
    4110:	0019      	movs	r1, r3
    4112:	2310      	movs	r3, #16
    4114:	001a      	movs	r2, r3
    4116:	4b2b      	ldr	r3, [pc, #172]	; (41c4 <sal_aes_setup+0x1a4>)
    4118:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    411a:	4b2b      	ldr	r3, [pc, #172]	; (41c8 <sal_aes_setup+0x1a8>)
    411c:	2211      	movs	r2, #17
    411e:	0019      	movs	r1, r3
    4120:	2083      	movs	r0, #131	; 0x83
    4122:	4b2b      	ldr	r3, [pc, #172]	; (41d0 <sal_aes_setup+0x1b0>)
    4124:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    4126:	4b24      	ldr	r3, [pc, #144]	; (41b8 <sal_aes_setup+0x198>)
    4128:	2201      	movs	r2, #1
    412a:	701a      	strb	r2, [r3, #0]
		}

		break;
    412c:	e003      	b.n	4136 <sal_aes_setup+0x116>

	default:
		return false;
    412e:	2300      	movs	r3, #0
    4130:	e03d      	b.n	41ae <sal_aes_setup+0x18e>
			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
					aes_buf, AES_BLOCKSIZE + 1);
		}

		break;
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	e000      	b.n	4138 <sal_aes_setup+0x118>
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
		}

		break;
    4136:	46c0      	nop			; (mov r8, r8)

	default:
		return false;
	}

	last_dir = dir;
    4138:	4b20      	ldr	r3, [pc, #128]	; (41bc <sal_aes_setup+0x19c>)
    413a:	1cba      	adds	r2, r7, #2
    413c:	7812      	ldrb	r2, [r2, #0]
    413e:	701a      	strb	r2, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    4140:	1cfb      	adds	r3, r7, #3
    4142:	781b      	ldrb	r3, [r3, #0]
    4144:	2b00      	cmp	r3, #0
    4146:	d001      	beq.n	414c <sal_aes_setup+0x12c>
    4148:	2b02      	cmp	r3, #2
    414a:	d12f      	bne.n	41ac <sal_aes_setup+0x18c>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    414c:	1cfb      	adds	r3, r7, #3
    414e:	781b      	ldrb	r3, [r3, #0]
    4150:	011b      	lsls	r3, r3, #4
    4152:	b25b      	sxtb	r3, r3
    4154:	2270      	movs	r2, #112	; 0x70
    4156:	4013      	ands	r3, r2
    4158:	b25a      	sxtb	r2, r3
				SR_MASK(SR_AES_DIR, dir);
    415a:	1cbb      	adds	r3, r7, #2
    415c:	781b      	ldrb	r3, [r3, #0]
    415e:	00db      	lsls	r3, r3, #3
	/* Set encryption mode. */
	switch (enc_mode) {
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    4160:	b25b      	sxtb	r3, r3
    4162:	2108      	movs	r1, #8
    4164:	400b      	ands	r3, r1
    4166:	b25b      	sxtb	r3, r3
    4168:	4313      	orrs	r3, r2
    416a:	b25b      	sxtb	r3, r3
    416c:	b2da      	uxtb	r2, r3
    416e:	4b16      	ldr	r3, [pc, #88]	; (41c8 <sal_aes_setup+0x1a8>)
    4170:	701a      	strb	r2, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    4172:	1cfb      	adds	r3, r7, #3
    4174:	781b      	ldrb	r3, [r3, #0]
    4176:	011b      	lsls	r3, r3, #4
    4178:	b25b      	sxtb	r3, r3
    417a:	2270      	movs	r2, #112	; 0x70
    417c:	4013      	ands	r3, r2
    417e:	b25a      	sxtb	r2, r3
				SR_MASK(SR_AES_DIR, dir) |
    4180:	1cbb      	adds	r3, r7, #2
    4182:	781b      	ldrb	r3, [r3, #0]
    4184:	00db      	lsls	r3, r3, #3
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    4186:	b25b      	sxtb	r3, r3
    4188:	2108      	movs	r1, #8
    418a:	400b      	ands	r3, r1
    418c:	b25b      	sxtb	r3, r3
    418e:	4313      	orrs	r3, r2
    4190:	b25b      	sxtb	r3, r3
    4192:	2280      	movs	r2, #128	; 0x80
    4194:	4252      	negs	r2, r2
    4196:	4313      	orrs	r3, r2
    4198:	b25b      	sxtb	r3, r3
    419a:	b2da      	uxtb	r2, r3
    419c:	4b0a      	ldr	r3, [pc, #40]	; (41c8 <sal_aes_setup+0x1a8>)
    419e:	745a      	strb	r2, [r3, #17]
				SR_MASK(SR_AES_DIR, dir) |
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;
    41a0:	46c0      	nop			; (mov r8, r8)

	default:
		return (false);
	}

	setup_flag = true;
    41a2:	4b0c      	ldr	r3, [pc, #48]	; (41d4 <sal_aes_setup+0x1b4>)
    41a4:	2201      	movs	r2, #1
    41a6:	701a      	strb	r2, [r3, #0]

	return (true);
    41a8:	2301      	movs	r3, #1
    41aa:	e000      	b.n	41ae <sal_aes_setup+0x18e>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    41ac:	2300      	movs	r3, #0
	}

	setup_flag = true;

	return (true);
}
    41ae:	0018      	movs	r0, r3
    41b0:	46bd      	mov	sp, r7
    41b2:	b006      	add	sp, #24
    41b4:	bd80      	pop	{r7, pc}
    41b6:	46c0      	nop			; (mov r8, r8)
    41b8:	20000281 	.word	0x20000281
    41bc:	20000000 	.word	0x20000000
    41c0:	20000298 	.word	0x20000298
    41c4:	0000c209 	.word	0x0000c209
    41c8:	20000284 	.word	0x20000284
    41cc:	20000285 	.word	0x20000285
    41d0:	00004e75 	.word	0x00004e75
    41d4:	20000280 	.word	0x20000280
    41d8:	000041e5 	.word	0x000041e5
    41dc:	200002a8 	.word	0x200002a8
    41e0:	00005039 	.word	0x00005039

000041e4 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    41e4:	b580      	push	{r7, lr}
    41e6:	b084      	sub	sp, #16
    41e8:	af00      	add	r7, sp, #0
    41ea:	6078      	str	r0, [r7, #4]
    41ec:	6039      	str	r1, [r7, #0]
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    41ee:	4b1a      	ldr	r3, [pc, #104]	; (4258 <sal_aes_wrrd+0x74>)
    41f0:	6879      	ldr	r1, [r7, #4]
    41f2:	2210      	movs	r2, #16
    41f4:	0018      	movs	r0, r3
    41f6:	4b19      	ldr	r3, [pc, #100]	; (425c <sal_aes_wrrd+0x78>)
    41f8:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    41fa:	230f      	movs	r3, #15
    41fc:	18fb      	adds	r3, r7, r3
    41fe:	4a18      	ldr	r2, [pc, #96]	; (4260 <sal_aes_wrrd+0x7c>)
    4200:	7c52      	ldrb	r2, [r2, #17]
    4202:	701a      	strb	r2, [r3, #0]

	if (setup_flag) {
    4204:	4b17      	ldr	r3, [pc, #92]	; (4264 <sal_aes_wrrd+0x80>)
    4206:	781b      	ldrb	r3, [r3, #0]
    4208:	2b00      	cmp	r3, #0
    420a:	d009      	beq.n	4220 <sal_aes_wrrd+0x3c>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    420c:	4b14      	ldr	r3, [pc, #80]	; (4260 <sal_aes_wrrd+0x7c>)
    420e:	2212      	movs	r2, #18
    4210:	0019      	movs	r1, r3
    4212:	2083      	movs	r0, #131	; 0x83
    4214:	4b14      	ldr	r3, [pc, #80]	; (4268 <sal_aes_wrrd+0x84>)
    4216:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    4218:	4b12      	ldr	r3, [pc, #72]	; (4264 <sal_aes_wrrd+0x80>)
    421a:	2200      	movs	r2, #0
    421c:	701a      	strb	r2, [r3, #0]
    421e:	e005      	b.n	422c <sal_aes_wrrd+0x48>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    4220:	4b0d      	ldr	r3, [pc, #52]	; (4258 <sal_aes_wrrd+0x74>)
    4222:	2211      	movs	r2, #17
    4224:	0019      	movs	r1, r3
    4226:	2084      	movs	r0, #132	; 0x84
    4228:	4b0f      	ldr	r3, [pc, #60]	; (4268 <sal_aes_wrrd+0x84>)
    422a:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    422c:	683b      	ldr	r3, [r7, #0]
    422e:	2b00      	cmp	r3, #0
    4230:	d005      	beq.n	423e <sal_aes_wrrd+0x5a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    4232:	4909      	ldr	r1, [pc, #36]	; (4258 <sal_aes_wrrd+0x74>)
    4234:	683b      	ldr	r3, [r7, #0]
    4236:	2210      	movs	r2, #16
    4238:	0018      	movs	r0, r3
    423a:	4b08      	ldr	r3, [pc, #32]	; (425c <sal_aes_wrrd+0x78>)
    423c:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    423e:	4b08      	ldr	r3, [pc, #32]	; (4260 <sal_aes_wrrd+0x7c>)
    4240:	220f      	movs	r2, #15
    4242:	18ba      	adds	r2, r7, r2
    4244:	7812      	ldrb	r2, [r2, #0]
    4246:	745a      	strb	r2, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    4248:	2018      	movs	r0, #24
    424a:	4b08      	ldr	r3, [pc, #32]	; (426c <sal_aes_wrrd+0x88>)
    424c:	4798      	blx	r3
}
    424e:	46c0      	nop			; (mov r8, r8)
    4250:	46bd      	mov	sp, r7
    4252:	b004      	add	sp, #16
    4254:	bd80      	pop	{r7, pc}
    4256:	46c0      	nop			; (mov r8, r8)
    4258:	20000285 	.word	0x20000285
    425c:	0000c209 	.word	0x0000c209
    4260:	20000284 	.word	0x20000284
    4264:	20000280 	.word	0x20000280
    4268:	00005211 	.word	0x00005211
    426c:	0000a26d 	.word	0x0000a26d

00004270 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    4270:	b580      	push	{r7, lr}
    4272:	b082      	sub	sp, #8
    4274:	af00      	add	r7, sp, #0
    4276:	6078      	str	r0, [r7, #4]
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	2210      	movs	r2, #16
    427c:	0019      	movs	r1, r3
    427e:	2084      	movs	r0, #132	; 0x84
    4280:	4b02      	ldr	r3, [pc, #8]	; (428c <sal_aes_read+0x1c>)
    4282:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    4284:	46c0      	nop			; (mov r8, r8)
    4286:	46bd      	mov	sp, r7
    4288:	b002      	add	sp, #8
    428a:	bd80      	pop	{r7, pc}
    428c:	00005039 	.word	0x00005039

00004290 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    4290:	b580      	push	{r7, lr}
    4292:	b082      	sub	sp, #8
    4294:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4296:	f3ef 8310 	mrs	r3, PRIMASK
    429a:	607b      	str	r3, [r7, #4]
  return(result);
    429c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    429e:	425a      	negs	r2, r3
    42a0:	4153      	adcs	r3, r2
    42a2:	b2db      	uxtb	r3, r3
    42a4:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    42a6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    42a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    42ac:	4b03      	ldr	r3, [pc, #12]	; (42bc <cpu_irq_save+0x2c>)
    42ae:	2200      	movs	r2, #0
    42b0:	701a      	strb	r2, [r3, #0]
	return flags;
    42b2:	683b      	ldr	r3, [r7, #0]
}
    42b4:	0018      	movs	r0, r3
    42b6:	46bd      	mov	sp, r7
    42b8:	b002      	add	sp, #8
    42ba:	bd80      	pop	{r7, pc}
    42bc:	20000010 	.word	0x20000010

000042c0 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    42c0:	b580      	push	{r7, lr}
    42c2:	b082      	sub	sp, #8
    42c4:	af00      	add	r7, sp, #0
    42c6:	6078      	str	r0, [r7, #4]
	return (flags);
    42c8:	687b      	ldr	r3, [r7, #4]
    42ca:	1e5a      	subs	r2, r3, #1
    42cc:	4193      	sbcs	r3, r2
    42ce:	b2db      	uxtb	r3, r3
}
    42d0:	0018      	movs	r0, r3
    42d2:	46bd      	mov	sp, r7
    42d4:	b002      	add	sp, #8
    42d6:	bd80      	pop	{r7, pc}

000042d8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    42d8:	b580      	push	{r7, lr}
    42da:	b082      	sub	sp, #8
    42dc:	af00      	add	r7, sp, #0
    42de:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	0018      	movs	r0, r3
    42e4:	4b06      	ldr	r3, [pc, #24]	; (4300 <cpu_irq_restore+0x28>)
    42e6:	4798      	blx	r3
    42e8:	1e03      	subs	r3, r0, #0
    42ea:	d005      	beq.n	42f8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    42ec:	4b05      	ldr	r3, [pc, #20]	; (4304 <cpu_irq_restore+0x2c>)
    42ee:	2201      	movs	r2, #1
    42f0:	701a      	strb	r2, [r3, #0]
    42f2:	f3bf 8f5f 	dmb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    42f6:	b662      	cpsie	i
}
    42f8:	46c0      	nop			; (mov r8, r8)
    42fa:	46bd      	mov	sp, r7
    42fc:	b002      	add	sp, #8
    42fe:	bd80      	pop	{r7, pc}
    4300:	000042c1 	.word	0x000042c1
    4304:	20000010 	.word	0x20000010

00004308 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4308:	b580      	push	{r7, lr}
    430a:	b084      	sub	sp, #16
    430c:	af00      	add	r7, sp, #0
    430e:	0002      	movs	r2, r0
    4310:	1dfb      	adds	r3, r7, #7
    4312:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4314:	230f      	movs	r3, #15
    4316:	18fb      	adds	r3, r7, r3
    4318:	1dfa      	adds	r2, r7, #7
    431a:	7812      	ldrb	r2, [r2, #0]
    431c:	09d2      	lsrs	r2, r2, #7
    431e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4320:	230e      	movs	r3, #14
    4322:	18fb      	adds	r3, r7, r3
    4324:	1dfa      	adds	r2, r7, #7
    4326:	7812      	ldrb	r2, [r2, #0]
    4328:	0952      	lsrs	r2, r2, #5
    432a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    432c:	4b0d      	ldr	r3, [pc, #52]	; (4364 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    432e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4330:	230f      	movs	r3, #15
    4332:	18fb      	adds	r3, r7, r3
    4334:	781b      	ldrb	r3, [r3, #0]
    4336:	2b00      	cmp	r3, #0
    4338:	d10f      	bne.n	435a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    433a:	230f      	movs	r3, #15
    433c:	18fb      	adds	r3, r7, r3
    433e:	781b      	ldrb	r3, [r3, #0]
    4340:	009b      	lsls	r3, r3, #2
    4342:	2210      	movs	r2, #16
    4344:	4694      	mov	ip, r2
    4346:	44bc      	add	ip, r7
    4348:	4463      	add	r3, ip
    434a:	3b08      	subs	r3, #8
    434c:	681a      	ldr	r2, [r3, #0]
    434e:	230e      	movs	r3, #14
    4350:	18fb      	adds	r3, r7, r3
    4352:	781b      	ldrb	r3, [r3, #0]
    4354:	01db      	lsls	r3, r3, #7
    4356:	18d3      	adds	r3, r2, r3
    4358:	e000      	b.n	435c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    435a:	2300      	movs	r3, #0
	}
}
    435c:	0018      	movs	r0, r3
    435e:	46bd      	mov	sp, r7
    4360:	b004      	add	sp, #16
    4362:	bd80      	pop	{r7, pc}
    4364:	41004400 	.word	0x41004400

00004368 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4368:	b580      	push	{r7, lr}
    436a:	b082      	sub	sp, #8
    436c:	af00      	add	r7, sp, #0
    436e:	0002      	movs	r2, r0
    4370:	1dfb      	adds	r3, r7, #7
    4372:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4374:	1dfb      	adds	r3, r7, #7
    4376:	781b      	ldrb	r3, [r3, #0]
    4378:	0018      	movs	r0, r3
    437a:	4b03      	ldr	r3, [pc, #12]	; (4388 <port_get_group_from_gpio_pin+0x20>)
    437c:	4798      	blx	r3
    437e:	0003      	movs	r3, r0
}
    4380:	0018      	movs	r0, r3
    4382:	46bd      	mov	sp, r7
    4384:	b002      	add	sp, #8
    4386:	bd80      	pop	{r7, pc}
    4388:	00004309 	.word	0x00004309

0000438c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    438c:	b580      	push	{r7, lr}
    438e:	b082      	sub	sp, #8
    4390:	af00      	add	r7, sp, #0
    4392:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	2200      	movs	r2, #0
    4398:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    439a:	687b      	ldr	r3, [r7, #4]
    439c:	2201      	movs	r2, #1
    439e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    43a0:	687b      	ldr	r3, [r7, #4]
    43a2:	2200      	movs	r2, #0
    43a4:	709a      	strb	r2, [r3, #2]
}
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	46bd      	mov	sp, r7
    43aa:	b002      	add	sp, #8
    43ac:	bd80      	pop	{r7, pc}
    43ae:	46c0      	nop			; (mov r8, r8)

000043b0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    43b0:	b580      	push	{r7, lr}
    43b2:	b084      	sub	sp, #16
    43b4:	af00      	add	r7, sp, #0
    43b6:	0002      	movs	r2, r0
    43b8:	1dfb      	adds	r3, r7, #7
    43ba:	701a      	strb	r2, [r3, #0]
    43bc:	1dbb      	adds	r3, r7, #6
    43be:	1c0a      	adds	r2, r1, #0
    43c0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    43c2:	1dfb      	adds	r3, r7, #7
    43c4:	781b      	ldrb	r3, [r3, #0]
    43c6:	0018      	movs	r0, r3
    43c8:	4b0d      	ldr	r3, [pc, #52]	; (4400 <port_pin_set_output_level+0x50>)
    43ca:	4798      	blx	r3
    43cc:	0003      	movs	r3, r0
    43ce:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    43d0:	1dfb      	adds	r3, r7, #7
    43d2:	781b      	ldrb	r3, [r3, #0]
    43d4:	221f      	movs	r2, #31
    43d6:	4013      	ands	r3, r2
    43d8:	2201      	movs	r2, #1
    43da:	409a      	lsls	r2, r3
    43dc:	0013      	movs	r3, r2
    43de:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    43e0:	1dbb      	adds	r3, r7, #6
    43e2:	781b      	ldrb	r3, [r3, #0]
    43e4:	2b00      	cmp	r3, #0
    43e6:	d003      	beq.n	43f0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    43e8:	68fb      	ldr	r3, [r7, #12]
    43ea:	68ba      	ldr	r2, [r7, #8]
    43ec:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    43ee:	e002      	b.n	43f6 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    43f0:	68fb      	ldr	r3, [r7, #12]
    43f2:	68ba      	ldr	r2, [r7, #8]
    43f4:	615a      	str	r2, [r3, #20]
	}
}
    43f6:	46c0      	nop			; (mov r8, r8)
    43f8:	46bd      	mov	sp, r7
    43fa:	b004      	add	sp, #16
    43fc:	bd80      	pop	{r7, pc}
    43fe:	46c0      	nop			; (mov r8, r8)
    4400:	00004369 	.word	0x00004369

00004404 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4404:	b580      	push	{r7, lr}
    4406:	b082      	sub	sp, #8
    4408:	af00      	add	r7, sp, #0
    440a:	0002      	movs	r2, r0
    440c:	1dfb      	adds	r3, r7, #7
    440e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4410:	4b06      	ldr	r3, [pc, #24]	; (442c <system_interrupt_enable+0x28>)
    4412:	1dfa      	adds	r2, r7, #7
    4414:	7812      	ldrb	r2, [r2, #0]
    4416:	0011      	movs	r1, r2
    4418:	221f      	movs	r2, #31
    441a:	400a      	ands	r2, r1
    441c:	2101      	movs	r1, #1
    441e:	4091      	lsls	r1, r2
    4420:	000a      	movs	r2, r1
    4422:	601a      	str	r2, [r3, #0]
}
    4424:	46c0      	nop			; (mov r8, r8)
    4426:	46bd      	mov	sp, r7
    4428:	b002      	add	sp, #8
    442a:	bd80      	pop	{r7, pc}
    442c:	e000e100 	.word	0xe000e100

00004430 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    4430:	b580      	push	{r7, lr}
    4432:	b084      	sub	sp, #16
    4434:	af00      	add	r7, sp, #0
    4436:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4438:	687b      	ldr	r3, [r7, #4]
    443a:	681b      	ldr	r3, [r3, #0]
    443c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    443e:	68fb      	ldr	r3, [r7, #12]
    4440:	69db      	ldr	r3, [r3, #28]
    4442:	1e5a      	subs	r2, r3, #1
    4444:	4193      	sbcs	r3, r2
    4446:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    4448:	0018      	movs	r0, r3
    444a:	46bd      	mov	sp, r7
    444c:	b004      	add	sp, #16
    444e:	bd80      	pop	{r7, pc}

00004450 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    4450:	b580      	push	{r7, lr}
    4452:	b082      	sub	sp, #8
    4454:	af00      	add	r7, sp, #0
    4456:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    4458:	687b      	ldr	r3, [r7, #4]
    445a:	2201      	movs	r2, #1
    445c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    445e:	687b      	ldr	r3, [r7, #4]
    4460:	2200      	movs	r2, #0
    4462:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    4464:	687b      	ldr	r3, [r7, #4]
    4466:	2200      	movs	r2, #0
    4468:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    446a:	687b      	ldr	r3, [r7, #4]
    446c:	22c0      	movs	r2, #192	; 0xc0
    446e:	0392      	lsls	r2, r2, #14
    4470:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    4472:	687b      	ldr	r3, [r7, #4]
    4474:	2200      	movs	r2, #0
    4476:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    4478:	687b      	ldr	r3, [r7, #4]
    447a:	2200      	movs	r2, #0
    447c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    447e:	687b      	ldr	r3, [r7, #4]
    4480:	2201      	movs	r2, #1
    4482:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    4484:	687b      	ldr	r3, [r7, #4]
    4486:	2201      	movs	r2, #1
    4488:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	2200      	movs	r2, #0
    448e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    4490:	687b      	ldr	r3, [r7, #4]
    4492:	2224      	movs	r2, #36	; 0x24
    4494:	2100      	movs	r1, #0
    4496:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4498:	687b      	ldr	r3, [r7, #4]
    449a:	3318      	adds	r3, #24
    449c:	220c      	movs	r2, #12
    449e:	2100      	movs	r1, #0
    44a0:	0018      	movs	r0, r3
    44a2:	4b0a      	ldr	r3, [pc, #40]	; (44cc <spi_get_config_defaults+0x7c>)
    44a4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    44a6:	687b      	ldr	r3, [r7, #4]
    44a8:	4a09      	ldr	r2, [pc, #36]	; (44d0 <spi_get_config_defaults+0x80>)
    44aa:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    44ac:	687b      	ldr	r3, [r7, #4]
    44ae:	2200      	movs	r2, #0
    44b0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    44b2:	687b      	ldr	r3, [r7, #4]
    44b4:	2200      	movs	r2, #0
    44b6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    44b8:	687b      	ldr	r3, [r7, #4]
    44ba:	2200      	movs	r2, #0
    44bc:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    44be:	687b      	ldr	r3, [r7, #4]
    44c0:	2200      	movs	r2, #0
    44c2:	635a      	str	r2, [r3, #52]	; 0x34

};
    44c4:	46c0      	nop			; (mov r8, r8)
    44c6:	46bd      	mov	sp, r7
    44c8:	b002      	add	sp, #8
    44ca:	bd80      	pop	{r7, pc}
    44cc:	0000c21b 	.word	0x0000c21b
    44d0:	000186a0 	.word	0x000186a0

000044d4 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    44d4:	b580      	push	{r7, lr}
    44d6:	b082      	sub	sp, #8
    44d8:	af00      	add	r7, sp, #0
    44da:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	220a      	movs	r2, #10
    44e0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    44e2:	687b      	ldr	r3, [r7, #4]
    44e4:	2200      	movs	r2, #0
    44e6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    44e8:	687b      	ldr	r3, [r7, #4]
    44ea:	2200      	movs	r2, #0
    44ec:	709a      	strb	r2, [r3, #2]
}
    44ee:	46c0      	nop			; (mov r8, r8)
    44f0:	46bd      	mov	sp, r7
    44f2:	b002      	add	sp, #8
    44f4:	bd80      	pop	{r7, pc}
    44f6:	46c0      	nop			; (mov r8, r8)

000044f8 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    44f8:	b580      	push	{r7, lr}
    44fa:	b084      	sub	sp, #16
    44fc:	af00      	add	r7, sp, #0
    44fe:	6078      	str	r0, [r7, #4]
    4500:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    4502:	683b      	ldr	r3, [r7, #0]
    4504:	781a      	ldrb	r2, [r3, #0]
    4506:	687b      	ldr	r3, [r7, #4]
    4508:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    450a:	683b      	ldr	r3, [r7, #0]
    450c:	785a      	ldrb	r2, [r3, #1]
    450e:	687b      	ldr	r3, [r7, #4]
    4510:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    4512:	683b      	ldr	r3, [r7, #0]
    4514:	789a      	ldrb	r2, [r3, #2]
    4516:	687b      	ldr	r3, [r7, #4]
    4518:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    451a:	230c      	movs	r3, #12
    451c:	18fb      	adds	r3, r7, r3
    451e:	0018      	movs	r0, r3
    4520:	4b0b      	ldr	r3, [pc, #44]	; (4550 <spi_attach_slave+0x58>)
    4522:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    4524:	230c      	movs	r3, #12
    4526:	18fb      	adds	r3, r7, r3
    4528:	2201      	movs	r2, #1
    452a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    452c:	687b      	ldr	r3, [r7, #4]
    452e:	781b      	ldrb	r3, [r3, #0]
    4530:	220c      	movs	r2, #12
    4532:	18ba      	adds	r2, r7, r2
    4534:	0011      	movs	r1, r2
    4536:	0018      	movs	r0, r3
    4538:	4b06      	ldr	r3, [pc, #24]	; (4554 <spi_attach_slave+0x5c>)
    453a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    453c:	687b      	ldr	r3, [r7, #4]
    453e:	781b      	ldrb	r3, [r3, #0]
    4540:	2101      	movs	r1, #1
    4542:	0018      	movs	r0, r3
    4544:	4b04      	ldr	r3, [pc, #16]	; (4558 <spi_attach_slave+0x60>)
    4546:	4798      	blx	r3
}
    4548:	46c0      	nop			; (mov r8, r8)
    454a:	46bd      	mov	sp, r7
    454c:	b004      	add	sp, #16
    454e:	bd80      	pop	{r7, pc}
    4550:	0000438d 	.word	0x0000438d
    4554:	0000a2c5 	.word	0x0000a2c5
    4558:	000043b1 	.word	0x000043b1

0000455c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    455c:	b580      	push	{r7, lr}
    455e:	b084      	sub	sp, #16
    4560:	af00      	add	r7, sp, #0
    4562:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4564:	687b      	ldr	r3, [r7, #4]
    4566:	681b      	ldr	r3, [r3, #0]
    4568:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    456a:	687b      	ldr	r3, [r7, #4]
    456c:	681b      	ldr	r3, [r3, #0]
    456e:	0018      	movs	r0, r3
    4570:	4b0b      	ldr	r3, [pc, #44]	; (45a0 <spi_enable+0x44>)
    4572:	4798      	blx	r3
    4574:	0003      	movs	r3, r0
    4576:	0018      	movs	r0, r3
    4578:	4b0a      	ldr	r3, [pc, #40]	; (45a4 <spi_enable+0x48>)
    457a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    457c:	46c0      	nop			; (mov r8, r8)
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	0018      	movs	r0, r3
    4582:	4b09      	ldr	r3, [pc, #36]	; (45a8 <spi_enable+0x4c>)
    4584:	4798      	blx	r3
    4586:	1e03      	subs	r3, r0, #0
    4588:	d1f9      	bne.n	457e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    458a:	68fb      	ldr	r3, [r7, #12]
    458c:	681b      	ldr	r3, [r3, #0]
    458e:	2202      	movs	r2, #2
    4590:	431a      	orrs	r2, r3
    4592:	68fb      	ldr	r3, [r7, #12]
    4594:	601a      	str	r2, [r3, #0]
}
    4596:	46c0      	nop			; (mov r8, r8)
    4598:	46bd      	mov	sp, r7
    459a:	b004      	add	sp, #16
    459c:	bd80      	pop	{r7, pc}
    459e:	46c0      	nop			; (mov r8, r8)
    45a0:	00009ed9 	.word	0x00009ed9
    45a4:	00004405 	.word	0x00004405
    45a8:	00004431 	.word	0x00004431

000045ac <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    45ac:	b580      	push	{r7, lr}
    45ae:	b084      	sub	sp, #16
    45b0:	af00      	add	r7, sp, #0
    45b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    45b4:	687b      	ldr	r3, [r7, #4]
    45b6:	681b      	ldr	r3, [r3, #0]
    45b8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    45ba:	68fb      	ldr	r3, [r7, #12]
    45bc:	7e1b      	ldrb	r3, [r3, #24]
    45be:	b2db      	uxtb	r3, r3
    45c0:	001a      	movs	r2, r3
    45c2:	2302      	movs	r3, #2
    45c4:	4013      	ands	r3, r2
    45c6:	1e5a      	subs	r2, r3, #1
    45c8:	4193      	sbcs	r3, r2
    45ca:	b2db      	uxtb	r3, r3
}
    45cc:	0018      	movs	r0, r3
    45ce:	46bd      	mov	sp, r7
    45d0:	b004      	add	sp, #16
    45d2:	bd80      	pop	{r7, pc}

000045d4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    45d4:	b580      	push	{r7, lr}
    45d6:	b084      	sub	sp, #16
    45d8:	af00      	add	r7, sp, #0
    45da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    45dc:	687b      	ldr	r3, [r7, #4]
    45de:	681b      	ldr	r3, [r3, #0]
    45e0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    45e2:	68fb      	ldr	r3, [r7, #12]
    45e4:	7e1b      	ldrb	r3, [r3, #24]
    45e6:	b2db      	uxtb	r3, r3
    45e8:	001a      	movs	r2, r3
    45ea:	2301      	movs	r3, #1
    45ec:	4013      	ands	r3, r2
    45ee:	1e5a      	subs	r2, r3, #1
    45f0:	4193      	sbcs	r3, r2
    45f2:	b2db      	uxtb	r3, r3
}
    45f4:	0018      	movs	r0, r3
    45f6:	46bd      	mov	sp, r7
    45f8:	b004      	add	sp, #16
    45fa:	bd80      	pop	{r7, pc}

000045fc <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    45fc:	b580      	push	{r7, lr}
    45fe:	b084      	sub	sp, #16
    4600:	af00      	add	r7, sp, #0
    4602:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4604:	687b      	ldr	r3, [r7, #4]
    4606:	681b      	ldr	r3, [r3, #0]
    4608:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    460a:	68fb      	ldr	r3, [r7, #12]
    460c:	7e1b      	ldrb	r3, [r3, #24]
    460e:	b2db      	uxtb	r3, r3
    4610:	001a      	movs	r2, r3
    4612:	2304      	movs	r3, #4
    4614:	4013      	ands	r3, r2
    4616:	1e5a      	subs	r2, r3, #1
    4618:	4193      	sbcs	r3, r2
    461a:	b2db      	uxtb	r3, r3
}
    461c:	0018      	movs	r0, r3
    461e:	46bd      	mov	sp, r7
    4620:	b004      	add	sp, #16
    4622:	bd80      	pop	{r7, pc}

00004624 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    4624:	b580      	push	{r7, lr}
    4626:	b084      	sub	sp, #16
    4628:	af00      	add	r7, sp, #0
    462a:	6078      	str	r0, [r7, #4]
    462c:	000a      	movs	r2, r1
    462e:	1cbb      	adds	r3, r7, #2
    4630:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4632:	687b      	ldr	r3, [r7, #4]
    4634:	681b      	ldr	r3, [r3, #0]
    4636:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4638:	687b      	ldr	r3, [r7, #4]
    463a:	0018      	movs	r0, r3
    463c:	4b0a      	ldr	r3, [pc, #40]	; (4668 <spi_write+0x44>)
    463e:	4798      	blx	r3
    4640:	0003      	movs	r3, r0
    4642:	001a      	movs	r2, r3
    4644:	2301      	movs	r3, #1
    4646:	4053      	eors	r3, r2
    4648:	b2db      	uxtb	r3, r3
    464a:	2b00      	cmp	r3, #0
    464c:	d001      	beq.n	4652 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    464e:	2305      	movs	r3, #5
    4650:	e006      	b.n	4660 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4652:	1cbb      	adds	r3, r7, #2
    4654:	881b      	ldrh	r3, [r3, #0]
    4656:	05db      	lsls	r3, r3, #23
    4658:	0dda      	lsrs	r2, r3, #23
    465a:	68fb      	ldr	r3, [r7, #12]
    465c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    465e:	2300      	movs	r3, #0
}
    4660:	0018      	movs	r0, r3
    4662:	46bd      	mov	sp, r7
    4664:	b004      	add	sp, #16
    4666:	bd80      	pop	{r7, pc}
    4668:	000045d5 	.word	0x000045d5

0000466c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    466c:	b580      	push	{r7, lr}
    466e:	b084      	sub	sp, #16
    4670:	af00      	add	r7, sp, #0
    4672:	6078      	str	r0, [r7, #4]
    4674:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	681b      	ldr	r3, [r3, #0]
    467a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    467c:	687b      	ldr	r3, [r7, #4]
    467e:	0018      	movs	r0, r3
    4680:	4b1b      	ldr	r3, [pc, #108]	; (46f0 <spi_read+0x84>)
    4682:	4798      	blx	r3
    4684:	0003      	movs	r3, r0
    4686:	001a      	movs	r2, r3
    4688:	2301      	movs	r3, #1
    468a:	4053      	eors	r3, r2
    468c:	b2db      	uxtb	r3, r3
    468e:	2b00      	cmp	r3, #0
    4690:	d001      	beq.n	4696 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    4692:	2310      	movs	r3, #16
    4694:	e027      	b.n	46e6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    4696:	230f      	movs	r3, #15
    4698:	18fb      	adds	r3, r7, r3
    469a:	2200      	movs	r2, #0
    469c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    469e:	68bb      	ldr	r3, [r7, #8]
    46a0:	8b5b      	ldrh	r3, [r3, #26]
    46a2:	b29b      	uxth	r3, r3
    46a4:	001a      	movs	r2, r3
    46a6:	2304      	movs	r3, #4
    46a8:	4013      	ands	r3, r2
    46aa:	d006      	beq.n	46ba <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    46ac:	230f      	movs	r3, #15
    46ae:	18fb      	adds	r3, r7, r3
    46b0:	221e      	movs	r2, #30
    46b2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    46b4:	68bb      	ldr	r3, [r7, #8]
    46b6:	2204      	movs	r2, #4
    46b8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    46ba:	687b      	ldr	r3, [r7, #4]
    46bc:	799b      	ldrb	r3, [r3, #6]
    46be:	2b01      	cmp	r3, #1
    46c0:	d108      	bne.n	46d4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    46c2:	68bb      	ldr	r3, [r7, #8]
    46c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46c6:	b29b      	uxth	r3, r3
    46c8:	05db      	lsls	r3, r3, #23
    46ca:	0ddb      	lsrs	r3, r3, #23
    46cc:	b29a      	uxth	r2, r3
    46ce:	683b      	ldr	r3, [r7, #0]
    46d0:	801a      	strh	r2, [r3, #0]
    46d2:	e005      	b.n	46e0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    46d4:	68bb      	ldr	r3, [r7, #8]
    46d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46d8:	b2db      	uxtb	r3, r3
    46da:	b29a      	uxth	r2, r3
    46dc:	683b      	ldr	r3, [r7, #0]
    46de:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    46e0:	230f      	movs	r3, #15
    46e2:	18fb      	adds	r3, r7, r3
    46e4:	781b      	ldrb	r3, [r3, #0]
}
    46e6:	0018      	movs	r0, r3
    46e8:	46bd      	mov	sp, r7
    46ea:	b004      	add	sp, #16
    46ec:	bd80      	pop	{r7, pc}
    46ee:	46c0      	nop			; (mov r8, r8)
    46f0:	000045fd 	.word	0x000045fd

000046f4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    46f4:	b580      	push	{r7, lr}
    46f6:	b084      	sub	sp, #16
    46f8:	af00      	add	r7, sp, #0
    46fa:	0002      	movs	r2, r0
    46fc:	1dfb      	adds	r3, r7, #7
    46fe:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4700:	230f      	movs	r3, #15
    4702:	18fb      	adds	r3, r7, r3
    4704:	1dfa      	adds	r2, r7, #7
    4706:	7812      	ldrb	r2, [r2, #0]
    4708:	0952      	lsrs	r2, r2, #5
    470a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    470c:	230f      	movs	r3, #15
    470e:	18fb      	adds	r3, r7, r3
    4710:	781b      	ldrb	r3, [r3, #0]
    4712:	2b00      	cmp	r3, #0
    4714:	d10c      	bne.n	4730 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4716:	4b09      	ldr	r3, [pc, #36]	; (473c <_extint_get_eic_from_channel+0x48>)
    4718:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    471a:	230f      	movs	r3, #15
    471c:	18fb      	adds	r3, r7, r3
    471e:	781b      	ldrb	r3, [r3, #0]
    4720:	009b      	lsls	r3, r3, #2
    4722:	2210      	movs	r2, #16
    4724:	4694      	mov	ip, r2
    4726:	44bc      	add	ip, r7
    4728:	4463      	add	r3, ip
    472a:	3b08      	subs	r3, #8
    472c:	681b      	ldr	r3, [r3, #0]
    472e:	e000      	b.n	4732 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    4730:	2300      	movs	r3, #0
	}
}
    4732:	0018      	movs	r0, r3
    4734:	46bd      	mov	sp, r7
    4736:	b004      	add	sp, #16
    4738:	bd80      	pop	{r7, pc}
    473a:	46c0      	nop			; (mov r8, r8)
    473c:	40001800 	.word	0x40001800

00004740 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    4740:	b580      	push	{r7, lr}
    4742:	b084      	sub	sp, #16
    4744:	af00      	add	r7, sp, #0
    4746:	0002      	movs	r2, r0
    4748:	1dfb      	adds	r3, r7, #7
    474a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    474c:	1dfb      	adds	r3, r7, #7
    474e:	781b      	ldrb	r3, [r3, #0]
    4750:	0018      	movs	r0, r3
    4752:	4b09      	ldr	r3, [pc, #36]	; (4778 <extint_chan_clear_detected+0x38>)
    4754:	4798      	blx	r3
    4756:	0003      	movs	r3, r0
    4758:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    475a:	1dfb      	adds	r3, r7, #7
    475c:	781b      	ldrb	r3, [r3, #0]
    475e:	221f      	movs	r2, #31
    4760:	4013      	ands	r3, r2
    4762:	2201      	movs	r2, #1
    4764:	409a      	lsls	r2, r3
    4766:	0013      	movs	r3, r2
    4768:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    476a:	68fb      	ldr	r3, [r7, #12]
    476c:	68ba      	ldr	r2, [r7, #8]
    476e:	611a      	str	r2, [r3, #16]
}
    4770:	46c0      	nop			; (mov r8, r8)
    4772:	46bd      	mov	sp, r7
    4774:	b004      	add	sp, #16
    4776:	bd80      	pop	{r7, pc}
    4778:	000046f5 	.word	0x000046f5

0000477c <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    477c:	b580      	push	{r7, lr}
    477e:	af00      	add	r7, sp, #0
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
    4780:	2000      	movs	r0, #0
    4782:	4b06      	ldr	r3, [pc, #24]	; (479c <AT86RFX_ISR+0x20>)
    4784:	4798      	blx	r3
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    4786:	4b06      	ldr	r3, [pc, #24]	; (47a0 <AT86RFX_ISR+0x24>)
    4788:	681b      	ldr	r3, [r3, #0]
    478a:	2b00      	cmp	r3, #0
    478c:	d002      	beq.n	4794 <AT86RFX_ISR+0x18>
		irq_hdl_trx();
    478e:	4b04      	ldr	r3, [pc, #16]	; (47a0 <AT86RFX_ISR+0x24>)
    4790:	681b      	ldr	r3, [r3, #0]
    4792:	4798      	blx	r3
	}
}
    4794:	46c0      	nop			; (mov r8, r8)
    4796:	46bd      	mov	sp, r7
    4798:	bd80      	pop	{r7, pc}
    479a:	46c0      	nop			; (mov r8, r8)
    479c:	00004741 	.word	0x00004741
    47a0:	200002b8 	.word	0x200002b8

000047a4 <trx_spi_init>:

void trx_spi_init(void)
{
    47a4:	b580      	push	{r7, lr}
    47a6:	b084      	sub	sp, #16
    47a8:	af00      	add	r7, sp, #0
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    47aa:	4b37      	ldr	r3, [pc, #220]	; (4888 <trx_spi_init+0xe4>)
    47ac:	0018      	movs	r0, r3
    47ae:	4b37      	ldr	r3, [pc, #220]	; (488c <trx_spi_init+0xe8>)
    47b0:	4798      	blx	r3
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    47b2:	4b35      	ldr	r3, [pc, #212]	; (4888 <trx_spi_init+0xe4>)
    47b4:	223f      	movs	r2, #63	; 0x3f
    47b6:	701a      	strb	r2, [r3, #0]
	
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf); //Added as SPI does config the output of RST & SLP pins 
    47b8:	230c      	movs	r3, #12
    47ba:	18fb      	adds	r3, r7, r3
    47bc:	0018      	movs	r0, r3
    47be:	4b34      	ldr	r3, [pc, #208]	; (4890 <trx_spi_init+0xec>)
    47c0:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    47c2:	230c      	movs	r3, #12
    47c4:	18fb      	adds	r3, r7, r3
    47c6:	2201      	movs	r2, #1
    47c8:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(AT86RFX_RST_PIN,&pin_conf);
    47ca:	230c      	movs	r3, #12
    47cc:	18fb      	adds	r3, r7, r3
    47ce:	0019      	movs	r1, r3
    47d0:	202f      	movs	r0, #47	; 0x2f
    47d2:	4b30      	ldr	r3, [pc, #192]	; (4894 <trx_spi_init+0xf0>)
    47d4:	4798      	blx	r3
	port_pin_set_config(AT86RFX_SLP_PIN,&pin_conf);
    47d6:	230c      	movs	r3, #12
    47d8:	18fb      	adds	r3, r7, r3
    47da:	0019      	movs	r1, r3
    47dc:	2014      	movs	r0, #20
    47de:	4b2d      	ldr	r3, [pc, #180]	; (4894 <trx_spi_init+0xf0>)
    47e0:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
    47e2:	4a29      	ldr	r2, [pc, #164]	; (4888 <trx_spi_init+0xe4>)
    47e4:	4b2c      	ldr	r3, [pc, #176]	; (4898 <trx_spi_init+0xf4>)
    47e6:	0011      	movs	r1, r2
    47e8:	0018      	movs	r0, r3
    47ea:	4b2c      	ldr	r3, [pc, #176]	; (489c <trx_spi_init+0xf8>)
    47ec:	4798      	blx	r3
	spi_get_config_defaults(&config);
    47ee:	4b2c      	ldr	r3, [pc, #176]	; (48a0 <trx_spi_init+0xfc>)
    47f0:	0018      	movs	r0, r3
    47f2:	4b2c      	ldr	r3, [pc, #176]	; (48a4 <trx_spi_init+0x100>)
    47f4:	4798      	blx	r3
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    47f6:	4b2a      	ldr	r3, [pc, #168]	; (48a0 <trx_spi_init+0xfc>)
    47f8:	2280      	movs	r2, #128	; 0x80
    47fa:	0252      	lsls	r2, r2, #9
    47fc:	60da      	str	r2, [r3, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    47fe:	4b28      	ldr	r3, [pc, #160]	; (48a0 <trx_spi_init+0xfc>)
    4800:	4a29      	ldr	r2, [pc, #164]	; (48a8 <trx_spi_init+0x104>)
    4802:	619a      	str	r2, [r3, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    4804:	4b26      	ldr	r3, [pc, #152]	; (48a0 <trx_spi_init+0xfc>)
    4806:	4a29      	ldr	r2, [pc, #164]	; (48ac <trx_spi_init+0x108>)
    4808:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    480a:	4b25      	ldr	r3, [pc, #148]	; (48a0 <trx_spi_init+0xfc>)
    480c:	2201      	movs	r2, #1
    480e:	4252      	negs	r2, r2
    4810:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    4812:	4b23      	ldr	r3, [pc, #140]	; (48a0 <trx_spi_init+0xfc>)
    4814:	4a26      	ldr	r2, [pc, #152]	; (48b0 <trx_spi_init+0x10c>)
    4816:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    4818:	4b21      	ldr	r3, [pc, #132]	; (48a0 <trx_spi_init+0xfc>)
    481a:	4a26      	ldr	r2, [pc, #152]	; (48b4 <trx_spi_init+0x110>)
    481c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = GCLK_GENERATOR_3;
    481e:	4b20      	ldr	r3, [pc, #128]	; (48a0 <trx_spi_init+0xfc>)
    4820:	2224      	movs	r2, #36	; 0x24
    4822:	2103      	movs	r1, #3
    4824:	5499      	strb	r1, [r3, r2]
	spi_init(&master, AT86RFX_SPI, &config);
    4826:	4a1e      	ldr	r2, [pc, #120]	; (48a0 <trx_spi_init+0xfc>)
    4828:	4923      	ldr	r1, [pc, #140]	; (48b8 <trx_spi_init+0x114>)
    482a:	4b24      	ldr	r3, [pc, #144]	; (48bc <trx_spi_init+0x118>)
    482c:	0018      	movs	r0, r3
    482e:	4b24      	ldr	r3, [pc, #144]	; (48c0 <trx_spi_init+0x11c>)
    4830:	4798      	blx	r3
	spi_enable(&master);
    4832:	4b22      	ldr	r3, [pc, #136]	; (48bc <trx_spi_init+0x118>)
    4834:	0018      	movs	r0, r3
    4836:	4b23      	ldr	r3, [pc, #140]	; (48c4 <trx_spi_init+0x120>)
    4838:	4798      	blx	r3

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    483a:	003b      	movs	r3, r7
    483c:	0018      	movs	r0, r3
    483e:	4b22      	ldr	r3, [pc, #136]	; (48c8 <trx_spi_init+0x124>)
    4840:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    4842:	003b      	movs	r3, r7
    4844:	2220      	movs	r2, #32
    4846:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    4848:	003b      	movs	r3, r7
    484a:	2280      	movs	r2, #128	; 0x80
    484c:	0392      	lsls	r2, r2, #14
    484e:	605a      	str	r2, [r3, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    4850:	003b      	movs	r3, r7
    4852:	2202      	movs	r2, #2
    4854:	721a      	strb	r2, [r3, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    4856:	003b      	movs	r3, r7
    4858:	2201      	movs	r2, #1
    485a:	725a      	strb	r2, [r3, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    485c:	003b      	movs	r3, r7
    485e:	2200      	movs	r2, #0
    4860:	729a      	strb	r2, [r3, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    4862:	003b      	movs	r3, r7
    4864:	2201      	movs	r2, #1
    4866:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    4868:	003b      	movs	r3, r7
    486a:	0019      	movs	r1, r3
    486c:	2000      	movs	r0, #0
    486e:	4b17      	ldr	r3, [pc, #92]	; (48cc <trx_spi_init+0x128>)
    4870:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    4872:	4b17      	ldr	r3, [pc, #92]	; (48d0 <trx_spi_init+0x12c>)
    4874:	2200      	movs	r2, #0
    4876:	2100      	movs	r1, #0
    4878:	0018      	movs	r0, r3
    487a:	4b16      	ldr	r3, [pc, #88]	; (48d4 <trx_spi_init+0x130>)
    487c:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    487e:	46c0      	nop			; (mov r8, r8)
    4880:	46bd      	mov	sp, r7
    4882:	b004      	add	sp, #16
    4884:	bd80      	pop	{r7, pc}
    4886:	46c0      	nop			; (mov r8, r8)
    4888:	20000f7c 	.word	0x20000f7c
    488c:	000044d5 	.word	0x000044d5
    4890:	0000438d 	.word	0x0000438d
    4894:	0000a2c5 	.word	0x0000a2c5
    4898:	20000f80 	.word	0x20000f80
    489c:	000044f9 	.word	0x000044f9
    48a0:	20000f84 	.word	0x20000f84
    48a4:	00004451 	.word	0x00004451
    48a8:	003d0900 	.word	0x003d0900
    48ac:	00530005 	.word	0x00530005
    48b0:	003e0005 	.word	0x003e0005
    48b4:	00520005 	.word	0x00520005
    48b8:	42001800 	.word	0x42001800
    48bc:	20000fbc 	.word	0x20000fbc
    48c0:	00009761 	.word	0x00009761
    48c4:	0000455d 	.word	0x0000455d
    48c8:	0000249d 	.word	0x0000249d
    48cc:	000024d1 	.word	0x000024d1
    48d0:	0000477d 	.word	0x0000477d
    48d4:	0000a081 	.word	0x0000a081

000048d8 <PhyReset>:

void PhyReset(void)
{
    48d8:	b580      	push	{r7, lr}
    48da:	af00      	add	r7, sp, #0
	/* Ensure control lines have correct levels. */
	RST_HIGH();
    48dc:	2101      	movs	r1, #1
    48de:	202f      	movs	r0, #47	; 0x2f
    48e0:	4b0c      	ldr	r3, [pc, #48]	; (4914 <PhyReset+0x3c>)
    48e2:	4798      	blx	r3
	SLP_TR_LOW();
    48e4:	2100      	movs	r1, #0
    48e6:	2014      	movs	r0, #20
    48e8:	4b0a      	ldr	r3, [pc, #40]	; (4914 <PhyReset+0x3c>)
    48ea:	4798      	blx	r3

	/* Wait typical time of timer TR1. */
	delay_us(330);
    48ec:	23a5      	movs	r3, #165	; 0xa5
    48ee:	005b      	lsls	r3, r3, #1
    48f0:	0018      	movs	r0, r3
    48f2:	4b09      	ldr	r3, [pc, #36]	; (4918 <PhyReset+0x40>)
    48f4:	4798      	blx	r3

	RST_LOW();
    48f6:	2100      	movs	r1, #0
    48f8:	202f      	movs	r0, #47	; 0x2f
    48fa:	4b06      	ldr	r3, [pc, #24]	; (4914 <PhyReset+0x3c>)
    48fc:	4798      	blx	r3
	delay_us(10);
    48fe:	200a      	movs	r0, #10
    4900:	4b05      	ldr	r3, [pc, #20]	; (4918 <PhyReset+0x40>)
    4902:	4798      	blx	r3
	RST_HIGH();
    4904:	2101      	movs	r1, #1
    4906:	202f      	movs	r0, #47	; 0x2f
    4908:	4b02      	ldr	r3, [pc, #8]	; (4914 <PhyReset+0x3c>)
    490a:	4798      	blx	r3
}
    490c:	46c0      	nop			; (mov r8, r8)
    490e:	46bd      	mov	sp, r7
    4910:	bd80      	pop	{r7, pc}
    4912:	46c0      	nop			; (mov r8, r8)
    4914:	000043b1 	.word	0x000043b1
    4918:	0000a26d 	.word	0x0000a26d

0000491c <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    491c:	b580      	push	{r7, lr}
    491e:	b084      	sub	sp, #16
    4920:	af00      	add	r7, sp, #0
    4922:	0002      	movs	r2, r0
    4924:	1dfb      	adds	r3, r7, #7
    4926:	701a      	strb	r2, [r3, #0]
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t register_value = 0;
    4928:	230c      	movs	r3, #12
    492a:	18fb      	adds	r3, r7, r3
    492c:	2200      	movs	r2, #0
    492e:	801a      	strh	r2, [r3, #0]
	uint8_t register_value = 0;
#endif

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    4930:	4b44      	ldr	r3, [pc, #272]	; (4a44 <trx_reg_read+0x128>)
    4932:	4798      	blx	r3
    4934:	0002      	movs	r2, r0
    4936:	230f      	movs	r3, #15
    4938:	18fb      	adds	r3, r7, r3
    493a:	701a      	strb	r2, [r3, #0]

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
    493c:	1dfb      	adds	r3, r7, #7
    493e:	1dfa      	adds	r2, r7, #7
    4940:	7812      	ldrb	r2, [r2, #0]
    4942:	2180      	movs	r1, #128	; 0x80
    4944:	4249      	negs	r1, r1
    4946:	430a      	orrs	r2, r1
    4948:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    494a:	493f      	ldr	r1, [pc, #252]	; (4a48 <trx_reg_read+0x12c>)
    494c:	4b3f      	ldr	r3, [pc, #252]	; (4a4c <trx_reg_read+0x130>)
    494e:	2201      	movs	r2, #1
    4950:	0018      	movs	r0, r3
    4952:	4b3f      	ldr	r3, [pc, #252]	; (4a50 <trx_reg_read+0x134>)
    4954:	4798      	blx	r3

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    4956:	46c0      	nop			; (mov r8, r8)
    4958:	4b3c      	ldr	r3, [pc, #240]	; (4a4c <trx_reg_read+0x130>)
    495a:	0018      	movs	r0, r3
    495c:	4b3d      	ldr	r3, [pc, #244]	; (4a54 <trx_reg_read+0x138>)
    495e:	4798      	blx	r3
    4960:	0003      	movs	r3, r0
    4962:	001a      	movs	r2, r3
    4964:	2301      	movs	r3, #1
    4966:	4053      	eors	r3, r2
    4968:	b2db      	uxtb	r3, r3
    496a:	2b00      	cmp	r3, #0
    496c:	d1f4      	bne.n	4958 <trx_reg_read+0x3c>
	}
	spi_write(&master, addr);
    496e:	1dfb      	adds	r3, r7, #7
    4970:	781b      	ldrb	r3, [r3, #0]
    4972:	b29a      	uxth	r2, r3
    4974:	4b35      	ldr	r3, [pc, #212]	; (4a4c <trx_reg_read+0x130>)
    4976:	0011      	movs	r1, r2
    4978:	0018      	movs	r0, r3
    497a:	4b37      	ldr	r3, [pc, #220]	; (4a58 <trx_reg_read+0x13c>)
    497c:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    497e:	46c0      	nop			; (mov r8, r8)
    4980:	4b32      	ldr	r3, [pc, #200]	; (4a4c <trx_reg_read+0x130>)
    4982:	0018      	movs	r0, r3
    4984:	4b35      	ldr	r3, [pc, #212]	; (4a5c <trx_reg_read+0x140>)
    4986:	4798      	blx	r3
    4988:	0003      	movs	r3, r0
    498a:	001a      	movs	r2, r3
    498c:	2301      	movs	r3, #1
    498e:	4053      	eors	r3, r2
    4990:	b2db      	uxtb	r3, r3
    4992:	2b00      	cmp	r3, #0
    4994:	d1f4      	bne.n	4980 <trx_reg_read+0x64>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4996:	46c0      	nop			; (mov r8, r8)
    4998:	4b2c      	ldr	r3, [pc, #176]	; (4a4c <trx_reg_read+0x130>)
    499a:	0018      	movs	r0, r3
    499c:	4b30      	ldr	r3, [pc, #192]	; (4a60 <trx_reg_read+0x144>)
    499e:	4798      	blx	r3
    49a0:	0003      	movs	r3, r0
    49a2:	001a      	movs	r2, r3
    49a4:	2301      	movs	r3, #1
    49a6:	4053      	eors	r3, r2
    49a8:	b2db      	uxtb	r3, r3
    49aa:	2b00      	cmp	r3, #0
    49ac:	d1f4      	bne.n	4998 <trx_reg_read+0x7c>
	}
	spi_read(&master, &dummy_read);
    49ae:	4a2d      	ldr	r2, [pc, #180]	; (4a64 <trx_reg_read+0x148>)
    49b0:	4b26      	ldr	r3, [pc, #152]	; (4a4c <trx_reg_read+0x130>)
    49b2:	0011      	movs	r1, r2
    49b4:	0018      	movs	r0, r3
    49b6:	4b2c      	ldr	r3, [pc, #176]	; (4a68 <trx_reg_read+0x14c>)
    49b8:	4798      	blx	r3

	while (!spi_is_ready_to_write(&master)) {
    49ba:	46c0      	nop			; (mov r8, r8)
    49bc:	4b23      	ldr	r3, [pc, #140]	; (4a4c <trx_reg_read+0x130>)
    49be:	0018      	movs	r0, r3
    49c0:	4b24      	ldr	r3, [pc, #144]	; (4a54 <trx_reg_read+0x138>)
    49c2:	4798      	blx	r3
    49c4:	0003      	movs	r3, r0
    49c6:	001a      	movs	r2, r3
    49c8:	2301      	movs	r3, #1
    49ca:	4053      	eors	r3, r2
    49cc:	b2db      	uxtb	r3, r3
    49ce:	2b00      	cmp	r3, #0
    49d0:	d1f4      	bne.n	49bc <trx_reg_read+0xa0>
	}
	spi_write(&master, 0);
    49d2:	4b1e      	ldr	r3, [pc, #120]	; (4a4c <trx_reg_read+0x130>)
    49d4:	2100      	movs	r1, #0
    49d6:	0018      	movs	r0, r3
    49d8:	4b1f      	ldr	r3, [pc, #124]	; (4a58 <trx_reg_read+0x13c>)
    49da:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    49dc:	46c0      	nop			; (mov r8, r8)
    49de:	4b1b      	ldr	r3, [pc, #108]	; (4a4c <trx_reg_read+0x130>)
    49e0:	0018      	movs	r0, r3
    49e2:	4b1e      	ldr	r3, [pc, #120]	; (4a5c <trx_reg_read+0x140>)
    49e4:	4798      	blx	r3
    49e6:	0003      	movs	r3, r0
    49e8:	001a      	movs	r2, r3
    49ea:	2301      	movs	r3, #1
    49ec:	4053      	eors	r3, r2
    49ee:	b2db      	uxtb	r3, r3
    49f0:	2b00      	cmp	r3, #0
    49f2:	d1f4      	bne.n	49de <trx_reg_read+0xc2>
	}
	while (!spi_is_ready_to_read(&master)) {
    49f4:	46c0      	nop			; (mov r8, r8)
    49f6:	4b15      	ldr	r3, [pc, #84]	; (4a4c <trx_reg_read+0x130>)
    49f8:	0018      	movs	r0, r3
    49fa:	4b19      	ldr	r3, [pc, #100]	; (4a60 <trx_reg_read+0x144>)
    49fc:	4798      	blx	r3
    49fe:	0003      	movs	r3, r0
    4a00:	001a      	movs	r2, r3
    4a02:	2301      	movs	r3, #1
    4a04:	4053      	eors	r3, r2
    4a06:	b2db      	uxtb	r3, r3
    4a08:	2b00      	cmp	r3, #0
    4a0a:	d1f4      	bne.n	49f6 <trx_reg_read+0xda>
	}
	spi_read(&master, &register_value);
    4a0c:	230c      	movs	r3, #12
    4a0e:	18fa      	adds	r2, r7, r3
    4a10:	4b0e      	ldr	r3, [pc, #56]	; (4a4c <trx_reg_read+0x130>)
    4a12:	0011      	movs	r1, r2
    4a14:	0018      	movs	r0, r3
    4a16:	4b14      	ldr	r3, [pc, #80]	; (4a68 <trx_reg_read+0x14c>)
    4a18:	4798      	blx	r3

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4a1a:	490b      	ldr	r1, [pc, #44]	; (4a48 <trx_reg_read+0x12c>)
    4a1c:	4b0b      	ldr	r3, [pc, #44]	; (4a4c <trx_reg_read+0x130>)
    4a1e:	2200      	movs	r2, #0
    4a20:	0018      	movs	r0, r3
    4a22:	4b0b      	ldr	r3, [pc, #44]	; (4a50 <trx_reg_read+0x134>)
    4a24:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    4a26:	230f      	movs	r3, #15
    4a28:	18fb      	adds	r3, r7, r3
    4a2a:	781b      	ldrb	r3, [r3, #0]
    4a2c:	0018      	movs	r0, r3
    4a2e:	4b0f      	ldr	r3, [pc, #60]	; (4a6c <trx_reg_read+0x150>)
    4a30:	4798      	blx	r3

	return register_value;
    4a32:	230c      	movs	r3, #12
    4a34:	18fb      	adds	r3, r7, r3
    4a36:	881b      	ldrh	r3, [r3, #0]
    4a38:	b2db      	uxtb	r3, r3
}
    4a3a:	0018      	movs	r0, r3
    4a3c:	46bd      	mov	sp, r7
    4a3e:	b004      	add	sp, #16
    4a40:	bd80      	pop	{r7, pc}
    4a42:	46c0      	nop			; (mov r8, r8)
    4a44:	00004291 	.word	0x00004291
    4a48:	20000f80 	.word	0x20000f80
    4a4c:	20000fbc 	.word	0x20000fbc
    4a50:	00009905 	.word	0x00009905
    4a54:	000045d5 	.word	0x000045d5
    4a58:	00004625 	.word	0x00004625
    4a5c:	000045ad 	.word	0x000045ad
    4a60:	000045fd 	.word	0x000045fd
    4a64:	20000f78 	.word	0x20000f78
    4a68:	0000466d 	.word	0x0000466d
    4a6c:	000042d9 	.word	0x000042d9

00004a70 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    4a70:	b580      	push	{r7, lr}
    4a72:	b084      	sub	sp, #16
    4a74:	af00      	add	r7, sp, #0
    4a76:	0002      	movs	r2, r0
    4a78:	1dfb      	adds	r3, r7, #7
    4a7a:	701a      	strb	r2, [r3, #0]
    4a7c:	1dbb      	adds	r3, r7, #6
    4a7e:	1c0a      	adds	r2, r1, #0
    4a80:	701a      	strb	r2, [r3, #0]
	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    4a82:	4b43      	ldr	r3, [pc, #268]	; (4b90 <trx_reg_write+0x120>)
    4a84:	4798      	blx	r3
    4a86:	0002      	movs	r2, r0
    4a88:	230f      	movs	r3, #15
    4a8a:	18fb      	adds	r3, r7, r3
    4a8c:	701a      	strb	r2, [r3, #0]

	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;
    4a8e:	1dfb      	adds	r3, r7, #7
    4a90:	1dfa      	adds	r2, r7, #7
    4a92:	7812      	ldrb	r2, [r2, #0]
    4a94:	2140      	movs	r1, #64	; 0x40
    4a96:	4249      	negs	r1, r1
    4a98:	430a      	orrs	r2, r1
    4a9a:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4a9c:	493d      	ldr	r1, [pc, #244]	; (4b94 <trx_reg_write+0x124>)
    4a9e:	4b3e      	ldr	r3, [pc, #248]	; (4b98 <trx_reg_write+0x128>)
    4aa0:	2201      	movs	r2, #1
    4aa2:	0018      	movs	r0, r3
    4aa4:	4b3d      	ldr	r3, [pc, #244]	; (4b9c <trx_reg_write+0x12c>)
    4aa6:	4798      	blx	r3

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    4aa8:	46c0      	nop			; (mov r8, r8)
    4aaa:	4b3b      	ldr	r3, [pc, #236]	; (4b98 <trx_reg_write+0x128>)
    4aac:	0018      	movs	r0, r3
    4aae:	4b3c      	ldr	r3, [pc, #240]	; (4ba0 <trx_reg_write+0x130>)
    4ab0:	4798      	blx	r3
    4ab2:	0003      	movs	r3, r0
    4ab4:	001a      	movs	r2, r3
    4ab6:	2301      	movs	r3, #1
    4ab8:	4053      	eors	r3, r2
    4aba:	b2db      	uxtb	r3, r3
    4abc:	2b00      	cmp	r3, #0
    4abe:	d1f4      	bne.n	4aaa <trx_reg_write+0x3a>
	}
	spi_write(&master, addr);
    4ac0:	1dfb      	adds	r3, r7, #7
    4ac2:	781b      	ldrb	r3, [r3, #0]
    4ac4:	b29a      	uxth	r2, r3
    4ac6:	4b34      	ldr	r3, [pc, #208]	; (4b98 <trx_reg_write+0x128>)
    4ac8:	0011      	movs	r1, r2
    4aca:	0018      	movs	r0, r3
    4acc:	4b35      	ldr	r3, [pc, #212]	; (4ba4 <trx_reg_write+0x134>)
    4ace:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    4ad0:	46c0      	nop			; (mov r8, r8)
    4ad2:	4b31      	ldr	r3, [pc, #196]	; (4b98 <trx_reg_write+0x128>)
    4ad4:	0018      	movs	r0, r3
    4ad6:	4b34      	ldr	r3, [pc, #208]	; (4ba8 <trx_reg_write+0x138>)
    4ad8:	4798      	blx	r3
    4ada:	0003      	movs	r3, r0
    4adc:	001a      	movs	r2, r3
    4ade:	2301      	movs	r3, #1
    4ae0:	4053      	eors	r3, r2
    4ae2:	b2db      	uxtb	r3, r3
    4ae4:	2b00      	cmp	r3, #0
    4ae6:	d1f4      	bne.n	4ad2 <trx_reg_write+0x62>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4ae8:	46c0      	nop			; (mov r8, r8)
    4aea:	4b2b      	ldr	r3, [pc, #172]	; (4b98 <trx_reg_write+0x128>)
    4aec:	0018      	movs	r0, r3
    4aee:	4b2f      	ldr	r3, [pc, #188]	; (4bac <trx_reg_write+0x13c>)
    4af0:	4798      	blx	r3
    4af2:	0003      	movs	r3, r0
    4af4:	001a      	movs	r2, r3
    4af6:	2301      	movs	r3, #1
    4af8:	4053      	eors	r3, r2
    4afa:	b2db      	uxtb	r3, r3
    4afc:	2b00      	cmp	r3, #0
    4afe:	d1f4      	bne.n	4aea <trx_reg_write+0x7a>
	}
	spi_read(&master, &dummy_read);
    4b00:	4a2b      	ldr	r2, [pc, #172]	; (4bb0 <trx_reg_write+0x140>)
    4b02:	4b25      	ldr	r3, [pc, #148]	; (4b98 <trx_reg_write+0x128>)
    4b04:	0011      	movs	r1, r2
    4b06:	0018      	movs	r0, r3
    4b08:	4b2a      	ldr	r3, [pc, #168]	; (4bb4 <trx_reg_write+0x144>)
    4b0a:	4798      	blx	r3

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    4b0c:	46c0      	nop			; (mov r8, r8)
    4b0e:	4b22      	ldr	r3, [pc, #136]	; (4b98 <trx_reg_write+0x128>)
    4b10:	0018      	movs	r0, r3
    4b12:	4b23      	ldr	r3, [pc, #140]	; (4ba0 <trx_reg_write+0x130>)
    4b14:	4798      	blx	r3
    4b16:	0003      	movs	r3, r0
    4b18:	001a      	movs	r2, r3
    4b1a:	2301      	movs	r3, #1
    4b1c:	4053      	eors	r3, r2
    4b1e:	b2db      	uxtb	r3, r3
    4b20:	2b00      	cmp	r3, #0
    4b22:	d1f4      	bne.n	4b0e <trx_reg_write+0x9e>
	}
	spi_write(&master, data);
    4b24:	1dbb      	adds	r3, r7, #6
    4b26:	781b      	ldrb	r3, [r3, #0]
    4b28:	b29a      	uxth	r2, r3
    4b2a:	4b1b      	ldr	r3, [pc, #108]	; (4b98 <trx_reg_write+0x128>)
    4b2c:	0011      	movs	r1, r2
    4b2e:	0018      	movs	r0, r3
    4b30:	4b1c      	ldr	r3, [pc, #112]	; (4ba4 <trx_reg_write+0x134>)
    4b32:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    4b34:	46c0      	nop			; (mov r8, r8)
    4b36:	4b18      	ldr	r3, [pc, #96]	; (4b98 <trx_reg_write+0x128>)
    4b38:	0018      	movs	r0, r3
    4b3a:	4b1b      	ldr	r3, [pc, #108]	; (4ba8 <trx_reg_write+0x138>)
    4b3c:	4798      	blx	r3
    4b3e:	0003      	movs	r3, r0
    4b40:	001a      	movs	r2, r3
    4b42:	2301      	movs	r3, #1
    4b44:	4053      	eors	r3, r2
    4b46:	b2db      	uxtb	r3, r3
    4b48:	2b00      	cmp	r3, #0
    4b4a:	d1f4      	bne.n	4b36 <trx_reg_write+0xc6>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4b4c:	46c0      	nop			; (mov r8, r8)
    4b4e:	4b12      	ldr	r3, [pc, #72]	; (4b98 <trx_reg_write+0x128>)
    4b50:	0018      	movs	r0, r3
    4b52:	4b16      	ldr	r3, [pc, #88]	; (4bac <trx_reg_write+0x13c>)
    4b54:	4798      	blx	r3
    4b56:	0003      	movs	r3, r0
    4b58:	001a      	movs	r2, r3
    4b5a:	2301      	movs	r3, #1
    4b5c:	4053      	eors	r3, r2
    4b5e:	b2db      	uxtb	r3, r3
    4b60:	2b00      	cmp	r3, #0
    4b62:	d1f4      	bne.n	4b4e <trx_reg_write+0xde>
	}
	spi_read(&master, &dummy_read);
    4b64:	4a12      	ldr	r2, [pc, #72]	; (4bb0 <trx_reg_write+0x140>)
    4b66:	4b0c      	ldr	r3, [pc, #48]	; (4b98 <trx_reg_write+0x128>)
    4b68:	0011      	movs	r1, r2
    4b6a:	0018      	movs	r0, r3
    4b6c:	4b11      	ldr	r3, [pc, #68]	; (4bb4 <trx_reg_write+0x144>)
    4b6e:	4798      	blx	r3

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4b70:	4908      	ldr	r1, [pc, #32]	; (4b94 <trx_reg_write+0x124>)
    4b72:	4b09      	ldr	r3, [pc, #36]	; (4b98 <trx_reg_write+0x128>)
    4b74:	2200      	movs	r2, #0
    4b76:	0018      	movs	r0, r3
    4b78:	4b08      	ldr	r3, [pc, #32]	; (4b9c <trx_reg_write+0x12c>)
    4b7a:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    4b7c:	230f      	movs	r3, #15
    4b7e:	18fb      	adds	r3, r7, r3
    4b80:	781b      	ldrb	r3, [r3, #0]
    4b82:	0018      	movs	r0, r3
    4b84:	4b0c      	ldr	r3, [pc, #48]	; (4bb8 <trx_reg_write+0x148>)
    4b86:	4798      	blx	r3
}
    4b88:	46c0      	nop			; (mov r8, r8)
    4b8a:	46bd      	mov	sp, r7
    4b8c:	b004      	add	sp, #16
    4b8e:	bd80      	pop	{r7, pc}
    4b90:	00004291 	.word	0x00004291
    4b94:	20000f80 	.word	0x20000f80
    4b98:	20000fbc 	.word	0x20000fbc
    4b9c:	00009905 	.word	0x00009905
    4ba0:	000045d5 	.word	0x000045d5
    4ba4:	00004625 	.word	0x00004625
    4ba8:	000045ad 	.word	0x000045ad
    4bac:	000045fd 	.word	0x000045fd
    4bb0:	20000f78 	.word	0x20000f78
    4bb4:	0000466d 	.word	0x0000466d
    4bb8:	000042d9 	.word	0x000042d9

00004bbc <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    4bbc:	b580      	push	{r7, lr}
    4bbe:	b084      	sub	sp, #16
    4bc0:	af00      	add	r7, sp, #0
    4bc2:	6078      	str	r0, [r7, #4]
    4bc4:	000a      	movs	r2, r1
    4bc6:	1cfb      	adds	r3, r7, #3
    4bc8:	701a      	strb	r2, [r3, #0]
	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    4bca:	4b49      	ldr	r3, [pc, #292]	; (4cf0 <trx_frame_read+0x134>)
    4bcc:	4798      	blx	r3
    4bce:	0002      	movs	r2, r0
    4bd0:	230f      	movs	r3, #15
    4bd2:	18fb      	adds	r3, r7, r3
    4bd4:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4bd6:	4947      	ldr	r1, [pc, #284]	; (4cf4 <trx_frame_read+0x138>)
    4bd8:	4b47      	ldr	r3, [pc, #284]	; (4cf8 <trx_frame_read+0x13c>)
    4bda:	2201      	movs	r2, #1
    4bdc:	0018      	movs	r0, r3
    4bde:	4b47      	ldr	r3, [pc, #284]	; (4cfc <trx_frame_read+0x140>)
    4be0:	4798      	blx	r3

	temp = TRX_CMD_FR;
    4be2:	230c      	movs	r3, #12
    4be4:	18fb      	adds	r3, r7, r3
    4be6:	2220      	movs	r2, #32
    4be8:	801a      	strh	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4bea:	46c0      	nop			; (mov r8, r8)
    4bec:	4b42      	ldr	r3, [pc, #264]	; (4cf8 <trx_frame_read+0x13c>)
    4bee:	0018      	movs	r0, r3
    4bf0:	4b43      	ldr	r3, [pc, #268]	; (4d00 <trx_frame_read+0x144>)
    4bf2:	4798      	blx	r3
    4bf4:	0003      	movs	r3, r0
    4bf6:	001a      	movs	r2, r3
    4bf8:	2301      	movs	r3, #1
    4bfa:	4053      	eors	r3, r2
    4bfc:	b2db      	uxtb	r3, r3
    4bfe:	2b00      	cmp	r3, #0
    4c00:	d1f4      	bne.n	4bec <trx_frame_read+0x30>
	}
	spi_write(&master, temp);
    4c02:	230c      	movs	r3, #12
    4c04:	18fb      	adds	r3, r7, r3
    4c06:	881a      	ldrh	r2, [r3, #0]
    4c08:	4b3b      	ldr	r3, [pc, #236]	; (4cf8 <trx_frame_read+0x13c>)
    4c0a:	0011      	movs	r1, r2
    4c0c:	0018      	movs	r0, r3
    4c0e:	4b3d      	ldr	r3, [pc, #244]	; (4d04 <trx_frame_read+0x148>)
    4c10:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    4c12:	46c0      	nop			; (mov r8, r8)
    4c14:	4b38      	ldr	r3, [pc, #224]	; (4cf8 <trx_frame_read+0x13c>)
    4c16:	0018      	movs	r0, r3
    4c18:	4b3b      	ldr	r3, [pc, #236]	; (4d08 <trx_frame_read+0x14c>)
    4c1a:	4798      	blx	r3
    4c1c:	0003      	movs	r3, r0
    4c1e:	001a      	movs	r2, r3
    4c20:	2301      	movs	r3, #1
    4c22:	4053      	eors	r3, r2
    4c24:	b2db      	uxtb	r3, r3
    4c26:	2b00      	cmp	r3, #0
    4c28:	d1f4      	bne.n	4c14 <trx_frame_read+0x58>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4c2a:	46c0      	nop			; (mov r8, r8)
    4c2c:	4b32      	ldr	r3, [pc, #200]	; (4cf8 <trx_frame_read+0x13c>)
    4c2e:	0018      	movs	r0, r3
    4c30:	4b36      	ldr	r3, [pc, #216]	; (4d0c <trx_frame_read+0x150>)
    4c32:	4798      	blx	r3
    4c34:	0003      	movs	r3, r0
    4c36:	001a      	movs	r2, r3
    4c38:	2301      	movs	r3, #1
    4c3a:	4053      	eors	r3, r2
    4c3c:	b2db      	uxtb	r3, r3
    4c3e:	2b00      	cmp	r3, #0
    4c40:	d1f4      	bne.n	4c2c <trx_frame_read+0x70>
	}
	spi_read(&master, &dummy_read);
    4c42:	4a33      	ldr	r2, [pc, #204]	; (4d10 <trx_frame_read+0x154>)
    4c44:	4b2c      	ldr	r3, [pc, #176]	; (4cf8 <trx_frame_read+0x13c>)
    4c46:	0011      	movs	r1, r2
    4c48:	0018      	movs	r0, r3
    4c4a:	4b32      	ldr	r3, [pc, #200]	; (4d14 <trx_frame_read+0x158>)
    4c4c:	4798      	blx	r3

	while (length--) {
    4c4e:	e038      	b.n	4cc2 <trx_frame_read+0x106>
		while (!spi_is_ready_to_write(&master)) {
    4c50:	46c0      	nop			; (mov r8, r8)
    4c52:	4b29      	ldr	r3, [pc, #164]	; (4cf8 <trx_frame_read+0x13c>)
    4c54:	0018      	movs	r0, r3
    4c56:	4b2a      	ldr	r3, [pc, #168]	; (4d00 <trx_frame_read+0x144>)
    4c58:	4798      	blx	r3
    4c5a:	0003      	movs	r3, r0
    4c5c:	001a      	movs	r2, r3
    4c5e:	2301      	movs	r3, #1
    4c60:	4053      	eors	r3, r2
    4c62:	b2db      	uxtb	r3, r3
    4c64:	2b00      	cmp	r3, #0
    4c66:	d1f4      	bne.n	4c52 <trx_frame_read+0x96>
		}
		spi_write(&master, 0);
    4c68:	4b23      	ldr	r3, [pc, #140]	; (4cf8 <trx_frame_read+0x13c>)
    4c6a:	2100      	movs	r1, #0
    4c6c:	0018      	movs	r0, r3
    4c6e:	4b25      	ldr	r3, [pc, #148]	; (4d04 <trx_frame_read+0x148>)
    4c70:	4798      	blx	r3
		while (!spi_is_write_complete(&master)) {
    4c72:	46c0      	nop			; (mov r8, r8)
    4c74:	4b20      	ldr	r3, [pc, #128]	; (4cf8 <trx_frame_read+0x13c>)
    4c76:	0018      	movs	r0, r3
    4c78:	4b23      	ldr	r3, [pc, #140]	; (4d08 <trx_frame_read+0x14c>)
    4c7a:	4798      	blx	r3
    4c7c:	0003      	movs	r3, r0
    4c7e:	001a      	movs	r2, r3
    4c80:	2301      	movs	r3, #1
    4c82:	4053      	eors	r3, r2
    4c84:	b2db      	uxtb	r3, r3
    4c86:	2b00      	cmp	r3, #0
    4c88:	d1f4      	bne.n	4c74 <trx_frame_read+0xb8>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4c8a:	46c0      	nop			; (mov r8, r8)
    4c8c:	4b1a      	ldr	r3, [pc, #104]	; (4cf8 <trx_frame_read+0x13c>)
    4c8e:	0018      	movs	r0, r3
    4c90:	4b1e      	ldr	r3, [pc, #120]	; (4d0c <trx_frame_read+0x150>)
    4c92:	4798      	blx	r3
    4c94:	0003      	movs	r3, r0
    4c96:	001a      	movs	r2, r3
    4c98:	2301      	movs	r3, #1
    4c9a:	4053      	eors	r3, r2
    4c9c:	b2db      	uxtb	r3, r3
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d1f4      	bne.n	4c8c <trx_frame_read+0xd0>
		}
		spi_read(&master, &temp);
    4ca2:	230c      	movs	r3, #12
    4ca4:	18fa      	adds	r2, r7, r3
    4ca6:	4b14      	ldr	r3, [pc, #80]	; (4cf8 <trx_frame_read+0x13c>)
    4ca8:	0011      	movs	r1, r2
    4caa:	0018      	movs	r0, r3
    4cac:	4b19      	ldr	r3, [pc, #100]	; (4d14 <trx_frame_read+0x158>)
    4cae:	4798      	blx	r3
		*data = temp;
    4cb0:	230c      	movs	r3, #12
    4cb2:	18fb      	adds	r3, r7, r3
    4cb4:	881b      	ldrh	r3, [r3, #0]
    4cb6:	b2da      	uxtb	r2, r3
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	701a      	strb	r2, [r3, #0]
		data++;
    4cbc:	687b      	ldr	r3, [r7, #4]
    4cbe:	3301      	adds	r3, #1
    4cc0:	607b      	str	r3, [r7, #4]
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4cc2:	1cfb      	adds	r3, r7, #3
    4cc4:	781b      	ldrb	r3, [r3, #0]
    4cc6:	1cfa      	adds	r2, r7, #3
    4cc8:	1e59      	subs	r1, r3, #1
    4cca:	7011      	strb	r1, [r2, #0]
    4ccc:	2b00      	cmp	r3, #0
    4cce:	d1bf      	bne.n	4c50 <trx_frame_read+0x94>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4cd0:	4908      	ldr	r1, [pc, #32]	; (4cf4 <trx_frame_read+0x138>)
    4cd2:	4b09      	ldr	r3, [pc, #36]	; (4cf8 <trx_frame_read+0x13c>)
    4cd4:	2200      	movs	r2, #0
    4cd6:	0018      	movs	r0, r3
    4cd8:	4b08      	ldr	r3, [pc, #32]	; (4cfc <trx_frame_read+0x140>)
    4cda:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    4cdc:	230f      	movs	r3, #15
    4cde:	18fb      	adds	r3, r7, r3
    4ce0:	781b      	ldrb	r3, [r3, #0]
    4ce2:	0018      	movs	r0, r3
    4ce4:	4b0c      	ldr	r3, [pc, #48]	; (4d18 <trx_frame_read+0x15c>)
    4ce6:	4798      	blx	r3
}
    4ce8:	46c0      	nop			; (mov r8, r8)
    4cea:	46bd      	mov	sp, r7
    4cec:	b004      	add	sp, #16
    4cee:	bd80      	pop	{r7, pc}
    4cf0:	00004291 	.word	0x00004291
    4cf4:	20000f80 	.word	0x20000f80
    4cf8:	20000fbc 	.word	0x20000fbc
    4cfc:	00009905 	.word	0x00009905
    4d00:	000045d5 	.word	0x000045d5
    4d04:	00004625 	.word	0x00004625
    4d08:	000045ad 	.word	0x000045ad
    4d0c:	000045fd 	.word	0x000045fd
    4d10:	20000f78 	.word	0x20000f78
    4d14:	0000466d 	.word	0x0000466d
    4d18:	000042d9 	.word	0x000042d9

00004d1c <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    4d1c:	b580      	push	{r7, lr}
    4d1e:	b084      	sub	sp, #16
    4d20:	af00      	add	r7, sp, #0
    4d22:	6078      	str	r0, [r7, #4]
    4d24:	000a      	movs	r2, r1
    4d26:	1cfb      	adds	r3, r7, #3
    4d28:	701a      	strb	r2, [r3, #0]
	uint8_t temp;

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    4d2a:	4b47      	ldr	r3, [pc, #284]	; (4e48 <trx_frame_write+0x12c>)
    4d2c:	4798      	blx	r3
    4d2e:	0002      	movs	r2, r0
    4d30:	230f      	movs	r3, #15
    4d32:	18fb      	adds	r3, r7, r3
    4d34:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4d36:	4945      	ldr	r1, [pc, #276]	; (4e4c <trx_frame_write+0x130>)
    4d38:	4b45      	ldr	r3, [pc, #276]	; (4e50 <trx_frame_write+0x134>)
    4d3a:	2201      	movs	r2, #1
    4d3c:	0018      	movs	r0, r3
    4d3e:	4b45      	ldr	r3, [pc, #276]	; (4e54 <trx_frame_write+0x138>)
    4d40:	4798      	blx	r3

	temp = TRX_CMD_FW;
    4d42:	230e      	movs	r3, #14
    4d44:	18fb      	adds	r3, r7, r3
    4d46:	2260      	movs	r2, #96	; 0x60
    4d48:	701a      	strb	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4d4a:	46c0      	nop			; (mov r8, r8)
    4d4c:	4b40      	ldr	r3, [pc, #256]	; (4e50 <trx_frame_write+0x134>)
    4d4e:	0018      	movs	r0, r3
    4d50:	4b41      	ldr	r3, [pc, #260]	; (4e58 <trx_frame_write+0x13c>)
    4d52:	4798      	blx	r3
    4d54:	0003      	movs	r3, r0
    4d56:	001a      	movs	r2, r3
    4d58:	2301      	movs	r3, #1
    4d5a:	4053      	eors	r3, r2
    4d5c:	b2db      	uxtb	r3, r3
    4d5e:	2b00      	cmp	r3, #0
    4d60:	d1f4      	bne.n	4d4c <trx_frame_write+0x30>
	}
	spi_write(&master, temp);
    4d62:	230e      	movs	r3, #14
    4d64:	18fb      	adds	r3, r7, r3
    4d66:	781b      	ldrb	r3, [r3, #0]
    4d68:	b29a      	uxth	r2, r3
    4d6a:	4b39      	ldr	r3, [pc, #228]	; (4e50 <trx_frame_write+0x134>)
    4d6c:	0011      	movs	r1, r2
    4d6e:	0018      	movs	r0, r3
    4d70:	4b3a      	ldr	r3, [pc, #232]	; (4e5c <trx_frame_write+0x140>)
    4d72:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    4d74:	46c0      	nop			; (mov r8, r8)
    4d76:	4b36      	ldr	r3, [pc, #216]	; (4e50 <trx_frame_write+0x134>)
    4d78:	0018      	movs	r0, r3
    4d7a:	4b39      	ldr	r3, [pc, #228]	; (4e60 <trx_frame_write+0x144>)
    4d7c:	4798      	blx	r3
    4d7e:	0003      	movs	r3, r0
    4d80:	001a      	movs	r2, r3
    4d82:	2301      	movs	r3, #1
    4d84:	4053      	eors	r3, r2
    4d86:	b2db      	uxtb	r3, r3
    4d88:	2b00      	cmp	r3, #0
    4d8a:	d1f4      	bne.n	4d76 <trx_frame_write+0x5a>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4d8c:	46c0      	nop			; (mov r8, r8)
    4d8e:	4b30      	ldr	r3, [pc, #192]	; (4e50 <trx_frame_write+0x134>)
    4d90:	0018      	movs	r0, r3
    4d92:	4b34      	ldr	r3, [pc, #208]	; (4e64 <trx_frame_write+0x148>)
    4d94:	4798      	blx	r3
    4d96:	0003      	movs	r3, r0
    4d98:	001a      	movs	r2, r3
    4d9a:	2301      	movs	r3, #1
    4d9c:	4053      	eors	r3, r2
    4d9e:	b2db      	uxtb	r3, r3
    4da0:	2b00      	cmp	r3, #0
    4da2:	d1f4      	bne.n	4d8e <trx_frame_write+0x72>
	}
	spi_read(&master, &dummy_read);
    4da4:	4a30      	ldr	r2, [pc, #192]	; (4e68 <trx_frame_write+0x14c>)
    4da6:	4b2a      	ldr	r3, [pc, #168]	; (4e50 <trx_frame_write+0x134>)
    4da8:	0011      	movs	r1, r2
    4daa:	0018      	movs	r0, r3
    4dac:	4b2f      	ldr	r3, [pc, #188]	; (4e6c <trx_frame_write+0x150>)
    4dae:	4798      	blx	r3
	while (length--) {
    4db0:	e033      	b.n	4e1a <trx_frame_write+0xfe>
		while (!spi_is_ready_to_write(&master)) {
    4db2:	46c0      	nop			; (mov r8, r8)
    4db4:	4b26      	ldr	r3, [pc, #152]	; (4e50 <trx_frame_write+0x134>)
    4db6:	0018      	movs	r0, r3
    4db8:	4b27      	ldr	r3, [pc, #156]	; (4e58 <trx_frame_write+0x13c>)
    4dba:	4798      	blx	r3
    4dbc:	0003      	movs	r3, r0
    4dbe:	001a      	movs	r2, r3
    4dc0:	2301      	movs	r3, #1
    4dc2:	4053      	eors	r3, r2
    4dc4:	b2db      	uxtb	r3, r3
    4dc6:	2b00      	cmp	r3, #0
    4dc8:	d1f4      	bne.n	4db4 <trx_frame_write+0x98>
		}
		spi_write(&master, *data++);
    4dca:	687b      	ldr	r3, [r7, #4]
    4dcc:	1c5a      	adds	r2, r3, #1
    4dce:	607a      	str	r2, [r7, #4]
    4dd0:	781b      	ldrb	r3, [r3, #0]
    4dd2:	b29a      	uxth	r2, r3
    4dd4:	4b1e      	ldr	r3, [pc, #120]	; (4e50 <trx_frame_write+0x134>)
    4dd6:	0011      	movs	r1, r2
    4dd8:	0018      	movs	r0, r3
    4dda:	4b20      	ldr	r3, [pc, #128]	; (4e5c <trx_frame_write+0x140>)
    4ddc:	4798      	blx	r3
		while (!spi_is_write_complete(&master)) {
    4dde:	46c0      	nop			; (mov r8, r8)
    4de0:	4b1b      	ldr	r3, [pc, #108]	; (4e50 <trx_frame_write+0x134>)
    4de2:	0018      	movs	r0, r3
    4de4:	4b1e      	ldr	r3, [pc, #120]	; (4e60 <trx_frame_write+0x144>)
    4de6:	4798      	blx	r3
    4de8:	0003      	movs	r3, r0
    4dea:	001a      	movs	r2, r3
    4dec:	2301      	movs	r3, #1
    4dee:	4053      	eors	r3, r2
    4df0:	b2db      	uxtb	r3, r3
    4df2:	2b00      	cmp	r3, #0
    4df4:	d1f4      	bne.n	4de0 <trx_frame_write+0xc4>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4df6:	46c0      	nop			; (mov r8, r8)
    4df8:	4b15      	ldr	r3, [pc, #84]	; (4e50 <trx_frame_write+0x134>)
    4dfa:	0018      	movs	r0, r3
    4dfc:	4b19      	ldr	r3, [pc, #100]	; (4e64 <trx_frame_write+0x148>)
    4dfe:	4798      	blx	r3
    4e00:	0003      	movs	r3, r0
    4e02:	001a      	movs	r2, r3
    4e04:	2301      	movs	r3, #1
    4e06:	4053      	eors	r3, r2
    4e08:	b2db      	uxtb	r3, r3
    4e0a:	2b00      	cmp	r3, #0
    4e0c:	d1f4      	bne.n	4df8 <trx_frame_write+0xdc>
		}
		spi_read(&master, &dummy_read);
    4e0e:	4a16      	ldr	r2, [pc, #88]	; (4e68 <trx_frame_write+0x14c>)
    4e10:	4b0f      	ldr	r3, [pc, #60]	; (4e50 <trx_frame_write+0x134>)
    4e12:	0011      	movs	r1, r2
    4e14:	0018      	movs	r0, r3
    4e16:	4b15      	ldr	r3, [pc, #84]	; (4e6c <trx_frame_write+0x150>)
    4e18:	4798      	blx	r3
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    4e1a:	1cfb      	adds	r3, r7, #3
    4e1c:	781b      	ldrb	r3, [r3, #0]
    4e1e:	1cfa      	adds	r2, r7, #3
    4e20:	1e59      	subs	r1, r3, #1
    4e22:	7011      	strb	r1, [r2, #0]
    4e24:	2b00      	cmp	r3, #0
    4e26:	d1c4      	bne.n	4db2 <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4e28:	4908      	ldr	r1, [pc, #32]	; (4e4c <trx_frame_write+0x130>)
    4e2a:	4b09      	ldr	r3, [pc, #36]	; (4e50 <trx_frame_write+0x134>)
    4e2c:	2200      	movs	r2, #0
    4e2e:	0018      	movs	r0, r3
    4e30:	4b08      	ldr	r3, [pc, #32]	; (4e54 <trx_frame_write+0x138>)
    4e32:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    4e34:	230f      	movs	r3, #15
    4e36:	18fb      	adds	r3, r7, r3
    4e38:	781b      	ldrb	r3, [r3, #0]
    4e3a:	0018      	movs	r0, r3
    4e3c:	4b0c      	ldr	r3, [pc, #48]	; (4e70 <trx_frame_write+0x154>)
    4e3e:	4798      	blx	r3
}
    4e40:	46c0      	nop			; (mov r8, r8)
    4e42:	46bd      	mov	sp, r7
    4e44:	b004      	add	sp, #16
    4e46:	bd80      	pop	{r7, pc}
    4e48:	00004291 	.word	0x00004291
    4e4c:	20000f80 	.word	0x20000f80
    4e50:	20000fbc 	.word	0x20000fbc
    4e54:	00009905 	.word	0x00009905
    4e58:	000045d5 	.word	0x000045d5
    4e5c:	00004625 	.word	0x00004625
    4e60:	000045ad 	.word	0x000045ad
    4e64:	000045fd 	.word	0x000045fd
    4e68:	20000f78 	.word	0x20000f78
    4e6c:	0000466d 	.word	0x0000466d
    4e70:	000042d9 	.word	0x000042d9

00004e74 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    4e74:	b580      	push	{r7, lr}
    4e76:	b084      	sub	sp, #16
    4e78:	af00      	add	r7, sp, #0
    4e7a:	6039      	str	r1, [r7, #0]
    4e7c:	0011      	movs	r1, r2
    4e7e:	1dfb      	adds	r3, r7, #7
    4e80:	1c02      	adds	r2, r0, #0
    4e82:	701a      	strb	r2, [r3, #0]
    4e84:	1dbb      	adds	r3, r7, #6
    4e86:	1c0a      	adds	r2, r1, #0
    4e88:	701a      	strb	r2, [r3, #0]
	uint8_t temp;

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    4e8a:	4b60      	ldr	r3, [pc, #384]	; (500c <trx_sram_write+0x198>)
    4e8c:	4798      	blx	r3
    4e8e:	0002      	movs	r2, r0
    4e90:	230f      	movs	r3, #15
    4e92:	18fb      	adds	r3, r7, r3
    4e94:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4e96:	495e      	ldr	r1, [pc, #376]	; (5010 <trx_sram_write+0x19c>)
    4e98:	4b5e      	ldr	r3, [pc, #376]	; (5014 <trx_sram_write+0x1a0>)
    4e9a:	2201      	movs	r2, #1
    4e9c:	0018      	movs	r0, r3
    4e9e:	4b5e      	ldr	r3, [pc, #376]	; (5018 <trx_sram_write+0x1a4>)
    4ea0:	4798      	blx	r3

	/* Send the command byte */
	temp = TRX_CMD_SW;
    4ea2:	230e      	movs	r3, #14
    4ea4:	18fb      	adds	r3, r7, r3
    4ea6:	2240      	movs	r2, #64	; 0x40
    4ea8:	701a      	strb	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4eaa:	46c0      	nop			; (mov r8, r8)
    4eac:	4b59      	ldr	r3, [pc, #356]	; (5014 <trx_sram_write+0x1a0>)
    4eae:	0018      	movs	r0, r3
    4eb0:	4b5a      	ldr	r3, [pc, #360]	; (501c <trx_sram_write+0x1a8>)
    4eb2:	4798      	blx	r3
    4eb4:	0003      	movs	r3, r0
    4eb6:	001a      	movs	r2, r3
    4eb8:	2301      	movs	r3, #1
    4eba:	4053      	eors	r3, r2
    4ebc:	b2db      	uxtb	r3, r3
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d1f4      	bne.n	4eac <trx_sram_write+0x38>
	}
	spi_write(&master, temp);
    4ec2:	230e      	movs	r3, #14
    4ec4:	18fb      	adds	r3, r7, r3
    4ec6:	781b      	ldrb	r3, [r3, #0]
    4ec8:	b29a      	uxth	r2, r3
    4eca:	4b52      	ldr	r3, [pc, #328]	; (5014 <trx_sram_write+0x1a0>)
    4ecc:	0011      	movs	r1, r2
    4ece:	0018      	movs	r0, r3
    4ed0:	4b53      	ldr	r3, [pc, #332]	; (5020 <trx_sram_write+0x1ac>)
    4ed2:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    4ed4:	46c0      	nop			; (mov r8, r8)
    4ed6:	4b4f      	ldr	r3, [pc, #316]	; (5014 <trx_sram_write+0x1a0>)
    4ed8:	0018      	movs	r0, r3
    4eda:	4b52      	ldr	r3, [pc, #328]	; (5024 <trx_sram_write+0x1b0>)
    4edc:	4798      	blx	r3
    4ede:	0003      	movs	r3, r0
    4ee0:	001a      	movs	r2, r3
    4ee2:	2301      	movs	r3, #1
    4ee4:	4053      	eors	r3, r2
    4ee6:	b2db      	uxtb	r3, r3
    4ee8:	2b00      	cmp	r3, #0
    4eea:	d1f4      	bne.n	4ed6 <trx_sram_write+0x62>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4eec:	46c0      	nop			; (mov r8, r8)
    4eee:	4b49      	ldr	r3, [pc, #292]	; (5014 <trx_sram_write+0x1a0>)
    4ef0:	0018      	movs	r0, r3
    4ef2:	4b4d      	ldr	r3, [pc, #308]	; (5028 <trx_sram_write+0x1b4>)
    4ef4:	4798      	blx	r3
    4ef6:	0003      	movs	r3, r0
    4ef8:	001a      	movs	r2, r3
    4efa:	2301      	movs	r3, #1
    4efc:	4053      	eors	r3, r2
    4efe:	b2db      	uxtb	r3, r3
    4f00:	2b00      	cmp	r3, #0
    4f02:	d1f4      	bne.n	4eee <trx_sram_write+0x7a>
	}
	spi_read(&master, &dummy_read);
    4f04:	4a49      	ldr	r2, [pc, #292]	; (502c <trx_sram_write+0x1b8>)
    4f06:	4b43      	ldr	r3, [pc, #268]	; (5014 <trx_sram_write+0x1a0>)
    4f08:	0011      	movs	r1, r2
    4f0a:	0018      	movs	r0, r3
    4f0c:	4b48      	ldr	r3, [pc, #288]	; (5030 <trx_sram_write+0x1bc>)
    4f0e:	4798      	blx	r3

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    4f10:	46c0      	nop			; (mov r8, r8)
    4f12:	4b40      	ldr	r3, [pc, #256]	; (5014 <trx_sram_write+0x1a0>)
    4f14:	0018      	movs	r0, r3
    4f16:	4b41      	ldr	r3, [pc, #260]	; (501c <trx_sram_write+0x1a8>)
    4f18:	4798      	blx	r3
    4f1a:	0003      	movs	r3, r0
    4f1c:	001a      	movs	r2, r3
    4f1e:	2301      	movs	r3, #1
    4f20:	4053      	eors	r3, r2
    4f22:	b2db      	uxtb	r3, r3
    4f24:	2b00      	cmp	r3, #0
    4f26:	d1f4      	bne.n	4f12 <trx_sram_write+0x9e>
	}
	spi_write(&master, addr);
    4f28:	1dfb      	adds	r3, r7, #7
    4f2a:	781b      	ldrb	r3, [r3, #0]
    4f2c:	b29a      	uxth	r2, r3
    4f2e:	4b39      	ldr	r3, [pc, #228]	; (5014 <trx_sram_write+0x1a0>)
    4f30:	0011      	movs	r1, r2
    4f32:	0018      	movs	r0, r3
    4f34:	4b3a      	ldr	r3, [pc, #232]	; (5020 <trx_sram_write+0x1ac>)
    4f36:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    4f38:	46c0      	nop			; (mov r8, r8)
    4f3a:	4b36      	ldr	r3, [pc, #216]	; (5014 <trx_sram_write+0x1a0>)
    4f3c:	0018      	movs	r0, r3
    4f3e:	4b39      	ldr	r3, [pc, #228]	; (5024 <trx_sram_write+0x1b0>)
    4f40:	4798      	blx	r3
    4f42:	0003      	movs	r3, r0
    4f44:	001a      	movs	r2, r3
    4f46:	2301      	movs	r3, #1
    4f48:	4053      	eors	r3, r2
    4f4a:	b2db      	uxtb	r3, r3
    4f4c:	2b00      	cmp	r3, #0
    4f4e:	d1f4      	bne.n	4f3a <trx_sram_write+0xc6>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4f50:	46c0      	nop			; (mov r8, r8)
    4f52:	4b30      	ldr	r3, [pc, #192]	; (5014 <trx_sram_write+0x1a0>)
    4f54:	0018      	movs	r0, r3
    4f56:	4b34      	ldr	r3, [pc, #208]	; (5028 <trx_sram_write+0x1b4>)
    4f58:	4798      	blx	r3
    4f5a:	0003      	movs	r3, r0
    4f5c:	001a      	movs	r2, r3
    4f5e:	2301      	movs	r3, #1
    4f60:	4053      	eors	r3, r2
    4f62:	b2db      	uxtb	r3, r3
    4f64:	2b00      	cmp	r3, #0
    4f66:	d1f4      	bne.n	4f52 <trx_sram_write+0xde>
	}
	spi_read(&master, &dummy_read);
    4f68:	4a30      	ldr	r2, [pc, #192]	; (502c <trx_sram_write+0x1b8>)
    4f6a:	4b2a      	ldr	r3, [pc, #168]	; (5014 <trx_sram_write+0x1a0>)
    4f6c:	0011      	movs	r1, r2
    4f6e:	0018      	movs	r0, r3
    4f70:	4b2f      	ldr	r3, [pc, #188]	; (5030 <trx_sram_write+0x1bc>)
    4f72:	4798      	blx	r3

	while (length--) {
    4f74:	e033      	b.n	4fde <trx_sram_write+0x16a>
		while (!spi_is_ready_to_write(&master)) {
    4f76:	46c0      	nop			; (mov r8, r8)
    4f78:	4b26      	ldr	r3, [pc, #152]	; (5014 <trx_sram_write+0x1a0>)
    4f7a:	0018      	movs	r0, r3
    4f7c:	4b27      	ldr	r3, [pc, #156]	; (501c <trx_sram_write+0x1a8>)
    4f7e:	4798      	blx	r3
    4f80:	0003      	movs	r3, r0
    4f82:	001a      	movs	r2, r3
    4f84:	2301      	movs	r3, #1
    4f86:	4053      	eors	r3, r2
    4f88:	b2db      	uxtb	r3, r3
    4f8a:	2b00      	cmp	r3, #0
    4f8c:	d1f4      	bne.n	4f78 <trx_sram_write+0x104>
		}
		spi_write(&master, *data++);
    4f8e:	683b      	ldr	r3, [r7, #0]
    4f90:	1c5a      	adds	r2, r3, #1
    4f92:	603a      	str	r2, [r7, #0]
    4f94:	781b      	ldrb	r3, [r3, #0]
    4f96:	b29a      	uxth	r2, r3
    4f98:	4b1e      	ldr	r3, [pc, #120]	; (5014 <trx_sram_write+0x1a0>)
    4f9a:	0011      	movs	r1, r2
    4f9c:	0018      	movs	r0, r3
    4f9e:	4b20      	ldr	r3, [pc, #128]	; (5020 <trx_sram_write+0x1ac>)
    4fa0:	4798      	blx	r3
		while (!spi_is_write_complete(&master)) {
    4fa2:	46c0      	nop			; (mov r8, r8)
    4fa4:	4b1b      	ldr	r3, [pc, #108]	; (5014 <trx_sram_write+0x1a0>)
    4fa6:	0018      	movs	r0, r3
    4fa8:	4b1e      	ldr	r3, [pc, #120]	; (5024 <trx_sram_write+0x1b0>)
    4faa:	4798      	blx	r3
    4fac:	0003      	movs	r3, r0
    4fae:	001a      	movs	r2, r3
    4fb0:	2301      	movs	r3, #1
    4fb2:	4053      	eors	r3, r2
    4fb4:	b2db      	uxtb	r3, r3
    4fb6:	2b00      	cmp	r3, #0
    4fb8:	d1f4      	bne.n	4fa4 <trx_sram_write+0x130>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4fba:	46c0      	nop			; (mov r8, r8)
    4fbc:	4b15      	ldr	r3, [pc, #84]	; (5014 <trx_sram_write+0x1a0>)
    4fbe:	0018      	movs	r0, r3
    4fc0:	4b19      	ldr	r3, [pc, #100]	; (5028 <trx_sram_write+0x1b4>)
    4fc2:	4798      	blx	r3
    4fc4:	0003      	movs	r3, r0
    4fc6:	001a      	movs	r2, r3
    4fc8:	2301      	movs	r3, #1
    4fca:	4053      	eors	r3, r2
    4fcc:	b2db      	uxtb	r3, r3
    4fce:	2b00      	cmp	r3, #0
    4fd0:	d1f4      	bne.n	4fbc <trx_sram_write+0x148>
		}
		spi_read(&master, &dummy_read);
    4fd2:	4a16      	ldr	r2, [pc, #88]	; (502c <trx_sram_write+0x1b8>)
    4fd4:	4b0f      	ldr	r3, [pc, #60]	; (5014 <trx_sram_write+0x1a0>)
    4fd6:	0011      	movs	r1, r2
    4fd8:	0018      	movs	r0, r3
    4fda:	4b15      	ldr	r3, [pc, #84]	; (5030 <trx_sram_write+0x1bc>)
    4fdc:	4798      	blx	r3
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4fde:	1dbb      	adds	r3, r7, #6
    4fe0:	781b      	ldrb	r3, [r3, #0]
    4fe2:	1dba      	adds	r2, r7, #6
    4fe4:	1e59      	subs	r1, r3, #1
    4fe6:	7011      	strb	r1, [r2, #0]
    4fe8:	2b00      	cmp	r3, #0
    4fea:	d1c4      	bne.n	4f76 <trx_sram_write+0x102>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4fec:	4908      	ldr	r1, [pc, #32]	; (5010 <trx_sram_write+0x19c>)
    4fee:	4b09      	ldr	r3, [pc, #36]	; (5014 <trx_sram_write+0x1a0>)
    4ff0:	2200      	movs	r2, #0
    4ff2:	0018      	movs	r0, r3
    4ff4:	4b08      	ldr	r3, [pc, #32]	; (5018 <trx_sram_write+0x1a4>)
    4ff6:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    4ff8:	230f      	movs	r3, #15
    4ffa:	18fb      	adds	r3, r7, r3
    4ffc:	781b      	ldrb	r3, [r3, #0]
    4ffe:	0018      	movs	r0, r3
    5000:	4b0c      	ldr	r3, [pc, #48]	; (5034 <trx_sram_write+0x1c0>)
    5002:	4798      	blx	r3
}
    5004:	46c0      	nop			; (mov r8, r8)
    5006:	46bd      	mov	sp, r7
    5008:	b004      	add	sp, #16
    500a:	bd80      	pop	{r7, pc}
    500c:	00004291 	.word	0x00004291
    5010:	20000f80 	.word	0x20000f80
    5014:	20000fbc 	.word	0x20000fbc
    5018:	00009905 	.word	0x00009905
    501c:	000045d5 	.word	0x000045d5
    5020:	00004625 	.word	0x00004625
    5024:	000045ad 	.word	0x000045ad
    5028:	000045fd 	.word	0x000045fd
    502c:	20000f78 	.word	0x20000f78
    5030:	0000466d 	.word	0x0000466d
    5034:	000042d9 	.word	0x000042d9

00005038 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    5038:	b580      	push	{r7, lr}
    503a:	b084      	sub	sp, #16
    503c:	af00      	add	r7, sp, #0
    503e:	6039      	str	r1, [r7, #0]
    5040:	0011      	movs	r1, r2
    5042:	1dfb      	adds	r3, r7, #7
    5044:	1c02      	adds	r2, r0, #0
    5046:	701a      	strb	r2, [r3, #0]
    5048:	1dbb      	adds	r3, r7, #6
    504a:	1c0a      	adds	r2, r1, #0
    504c:	701a      	strb	r2, [r3, #0]
	delay_us(1); /* wap_rf4ce */
    504e:	2001      	movs	r0, #1
    5050:	4b63      	ldr	r3, [pc, #396]	; (51e0 <trx_sram_read+0x1a8>)
    5052:	4798      	blx	r3

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    5054:	4b63      	ldr	r3, [pc, #396]	; (51e4 <trx_sram_read+0x1ac>)
    5056:	4798      	blx	r3
    5058:	0002      	movs	r2, r0
    505a:	230f      	movs	r3, #15
    505c:	18fb      	adds	r3, r7, r3
    505e:	701a      	strb	r2, [r3, #0]
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5060:	4961      	ldr	r1, [pc, #388]	; (51e8 <trx_sram_read+0x1b0>)
    5062:	4b62      	ldr	r3, [pc, #392]	; (51ec <trx_sram_read+0x1b4>)
    5064:	2201      	movs	r2, #1
    5066:	0018      	movs	r0, r3
    5068:	4b61      	ldr	r3, [pc, #388]	; (51f0 <trx_sram_read+0x1b8>)
    506a:	4798      	blx	r3

	temp = TRX_CMD_SR;
    506c:	230c      	movs	r3, #12
    506e:	18fb      	adds	r3, r7, r3
    5070:	2200      	movs	r2, #0
    5072:	801a      	strh	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5074:	46c0      	nop			; (mov r8, r8)
    5076:	4b5d      	ldr	r3, [pc, #372]	; (51ec <trx_sram_read+0x1b4>)
    5078:	0018      	movs	r0, r3
    507a:	4b5e      	ldr	r3, [pc, #376]	; (51f4 <trx_sram_read+0x1bc>)
    507c:	4798      	blx	r3
    507e:	0003      	movs	r3, r0
    5080:	001a      	movs	r2, r3
    5082:	2301      	movs	r3, #1
    5084:	4053      	eors	r3, r2
    5086:	b2db      	uxtb	r3, r3
    5088:	2b00      	cmp	r3, #0
    508a:	d1f4      	bne.n	5076 <trx_sram_read+0x3e>
	}
	spi_write(&master, temp);
    508c:	230c      	movs	r3, #12
    508e:	18fb      	adds	r3, r7, r3
    5090:	881a      	ldrh	r2, [r3, #0]
    5092:	4b56      	ldr	r3, [pc, #344]	; (51ec <trx_sram_read+0x1b4>)
    5094:	0011      	movs	r1, r2
    5096:	0018      	movs	r0, r3
    5098:	4b57      	ldr	r3, [pc, #348]	; (51f8 <trx_sram_read+0x1c0>)
    509a:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    509c:	46c0      	nop			; (mov r8, r8)
    509e:	4b53      	ldr	r3, [pc, #332]	; (51ec <trx_sram_read+0x1b4>)
    50a0:	0018      	movs	r0, r3
    50a2:	4b56      	ldr	r3, [pc, #344]	; (51fc <trx_sram_read+0x1c4>)
    50a4:	4798      	blx	r3
    50a6:	0003      	movs	r3, r0
    50a8:	001a      	movs	r2, r3
    50aa:	2301      	movs	r3, #1
    50ac:	4053      	eors	r3, r2
    50ae:	b2db      	uxtb	r3, r3
    50b0:	2b00      	cmp	r3, #0
    50b2:	d1f4      	bne.n	509e <trx_sram_read+0x66>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    50b4:	46c0      	nop			; (mov r8, r8)
    50b6:	4b4d      	ldr	r3, [pc, #308]	; (51ec <trx_sram_read+0x1b4>)
    50b8:	0018      	movs	r0, r3
    50ba:	4b51      	ldr	r3, [pc, #324]	; (5200 <trx_sram_read+0x1c8>)
    50bc:	4798      	blx	r3
    50be:	0003      	movs	r3, r0
    50c0:	001a      	movs	r2, r3
    50c2:	2301      	movs	r3, #1
    50c4:	4053      	eors	r3, r2
    50c6:	b2db      	uxtb	r3, r3
    50c8:	2b00      	cmp	r3, #0
    50ca:	d1f4      	bne.n	50b6 <trx_sram_read+0x7e>
	}
	spi_read(&master, &dummy_read);
    50cc:	4a4d      	ldr	r2, [pc, #308]	; (5204 <trx_sram_read+0x1cc>)
    50ce:	4b47      	ldr	r3, [pc, #284]	; (51ec <trx_sram_read+0x1b4>)
    50d0:	0011      	movs	r1, r2
    50d2:	0018      	movs	r0, r3
    50d4:	4b4c      	ldr	r3, [pc, #304]	; (5208 <trx_sram_read+0x1d0>)
    50d6:	4798      	blx	r3

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    50d8:	46c0      	nop			; (mov r8, r8)
    50da:	4b44      	ldr	r3, [pc, #272]	; (51ec <trx_sram_read+0x1b4>)
    50dc:	0018      	movs	r0, r3
    50de:	4b45      	ldr	r3, [pc, #276]	; (51f4 <trx_sram_read+0x1bc>)
    50e0:	4798      	blx	r3
    50e2:	0003      	movs	r3, r0
    50e4:	001a      	movs	r2, r3
    50e6:	2301      	movs	r3, #1
    50e8:	4053      	eors	r3, r2
    50ea:	b2db      	uxtb	r3, r3
    50ec:	2b00      	cmp	r3, #0
    50ee:	d1f4      	bne.n	50da <trx_sram_read+0xa2>
	}
	spi_write(&master, addr);
    50f0:	1dfb      	adds	r3, r7, #7
    50f2:	781b      	ldrb	r3, [r3, #0]
    50f4:	b29a      	uxth	r2, r3
    50f6:	4b3d      	ldr	r3, [pc, #244]	; (51ec <trx_sram_read+0x1b4>)
    50f8:	0011      	movs	r1, r2
    50fa:	0018      	movs	r0, r3
    50fc:	4b3e      	ldr	r3, [pc, #248]	; (51f8 <trx_sram_read+0x1c0>)
    50fe:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    5100:	46c0      	nop			; (mov r8, r8)
    5102:	4b3a      	ldr	r3, [pc, #232]	; (51ec <trx_sram_read+0x1b4>)
    5104:	0018      	movs	r0, r3
    5106:	4b3d      	ldr	r3, [pc, #244]	; (51fc <trx_sram_read+0x1c4>)
    5108:	4798      	blx	r3
    510a:	0003      	movs	r3, r0
    510c:	001a      	movs	r2, r3
    510e:	2301      	movs	r3, #1
    5110:	4053      	eors	r3, r2
    5112:	b2db      	uxtb	r3, r3
    5114:	2b00      	cmp	r3, #0
    5116:	d1f4      	bne.n	5102 <trx_sram_read+0xca>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5118:	46c0      	nop			; (mov r8, r8)
    511a:	4b34      	ldr	r3, [pc, #208]	; (51ec <trx_sram_read+0x1b4>)
    511c:	0018      	movs	r0, r3
    511e:	4b38      	ldr	r3, [pc, #224]	; (5200 <trx_sram_read+0x1c8>)
    5120:	4798      	blx	r3
    5122:	0003      	movs	r3, r0
    5124:	001a      	movs	r2, r3
    5126:	2301      	movs	r3, #1
    5128:	4053      	eors	r3, r2
    512a:	b2db      	uxtb	r3, r3
    512c:	2b00      	cmp	r3, #0
    512e:	d1f4      	bne.n	511a <trx_sram_read+0xe2>
	}
	spi_read(&master, &dummy_read);
    5130:	4a34      	ldr	r2, [pc, #208]	; (5204 <trx_sram_read+0x1cc>)
    5132:	4b2e      	ldr	r3, [pc, #184]	; (51ec <trx_sram_read+0x1b4>)
    5134:	0011      	movs	r1, r2
    5136:	0018      	movs	r0, r3
    5138:	4b33      	ldr	r3, [pc, #204]	; (5208 <trx_sram_read+0x1d0>)
    513a:	4798      	blx	r3

	/* Upload the received byte in the user provided location */
	while (length--) {
    513c:	e038      	b.n	51b0 <trx_sram_read+0x178>
		while (!spi_is_ready_to_write(&master)) {
    513e:	46c0      	nop			; (mov r8, r8)
    5140:	4b2a      	ldr	r3, [pc, #168]	; (51ec <trx_sram_read+0x1b4>)
    5142:	0018      	movs	r0, r3
    5144:	4b2b      	ldr	r3, [pc, #172]	; (51f4 <trx_sram_read+0x1bc>)
    5146:	4798      	blx	r3
    5148:	0003      	movs	r3, r0
    514a:	001a      	movs	r2, r3
    514c:	2301      	movs	r3, #1
    514e:	4053      	eors	r3, r2
    5150:	b2db      	uxtb	r3, r3
    5152:	2b00      	cmp	r3, #0
    5154:	d1f4      	bne.n	5140 <trx_sram_read+0x108>
		}
		spi_write(&master, 0);
    5156:	4b25      	ldr	r3, [pc, #148]	; (51ec <trx_sram_read+0x1b4>)
    5158:	2100      	movs	r1, #0
    515a:	0018      	movs	r0, r3
    515c:	4b26      	ldr	r3, [pc, #152]	; (51f8 <trx_sram_read+0x1c0>)
    515e:	4798      	blx	r3
		while (!spi_is_write_complete(&master)) {
    5160:	46c0      	nop			; (mov r8, r8)
    5162:	4b22      	ldr	r3, [pc, #136]	; (51ec <trx_sram_read+0x1b4>)
    5164:	0018      	movs	r0, r3
    5166:	4b25      	ldr	r3, [pc, #148]	; (51fc <trx_sram_read+0x1c4>)
    5168:	4798      	blx	r3
    516a:	0003      	movs	r3, r0
    516c:	001a      	movs	r2, r3
    516e:	2301      	movs	r3, #1
    5170:	4053      	eors	r3, r2
    5172:	b2db      	uxtb	r3, r3
    5174:	2b00      	cmp	r3, #0
    5176:	d1f4      	bne.n	5162 <trx_sram_read+0x12a>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5178:	46c0      	nop			; (mov r8, r8)
    517a:	4b1c      	ldr	r3, [pc, #112]	; (51ec <trx_sram_read+0x1b4>)
    517c:	0018      	movs	r0, r3
    517e:	4b20      	ldr	r3, [pc, #128]	; (5200 <trx_sram_read+0x1c8>)
    5180:	4798      	blx	r3
    5182:	0003      	movs	r3, r0
    5184:	001a      	movs	r2, r3
    5186:	2301      	movs	r3, #1
    5188:	4053      	eors	r3, r2
    518a:	b2db      	uxtb	r3, r3
    518c:	2b00      	cmp	r3, #0
    518e:	d1f4      	bne.n	517a <trx_sram_read+0x142>
		}
		spi_read(&master, &temp);
    5190:	230c      	movs	r3, #12
    5192:	18fa      	adds	r2, r7, r3
    5194:	4b15      	ldr	r3, [pc, #84]	; (51ec <trx_sram_read+0x1b4>)
    5196:	0011      	movs	r1, r2
    5198:	0018      	movs	r0, r3
    519a:	4b1b      	ldr	r3, [pc, #108]	; (5208 <trx_sram_read+0x1d0>)
    519c:	4798      	blx	r3
		*data = temp;
    519e:	230c      	movs	r3, #12
    51a0:	18fb      	adds	r3, r7, r3
    51a2:	881b      	ldrh	r3, [r3, #0]
    51a4:	b2da      	uxtb	r2, r3
    51a6:	683b      	ldr	r3, [r7, #0]
    51a8:	701a      	strb	r2, [r3, #0]
		data++;
    51aa:	683b      	ldr	r3, [r7, #0]
    51ac:	3301      	adds	r3, #1
    51ae:	603b      	str	r3, [r7, #0]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    51b0:	1dbb      	adds	r3, r7, #6
    51b2:	781b      	ldrb	r3, [r3, #0]
    51b4:	1dba      	adds	r2, r7, #6
    51b6:	1e59      	subs	r1, r3, #1
    51b8:	7011      	strb	r1, [r2, #0]
    51ba:	2b00      	cmp	r3, #0
    51bc:	d1bf      	bne.n	513e <trx_sram_read+0x106>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    51be:	490a      	ldr	r1, [pc, #40]	; (51e8 <trx_sram_read+0x1b0>)
    51c0:	4b0a      	ldr	r3, [pc, #40]	; (51ec <trx_sram_read+0x1b4>)
    51c2:	2200      	movs	r2, #0
    51c4:	0018      	movs	r0, r3
    51c6:	4b0a      	ldr	r3, [pc, #40]	; (51f0 <trx_sram_read+0x1b8>)
    51c8:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    51ca:	230f      	movs	r3, #15
    51cc:	18fb      	adds	r3, r7, r3
    51ce:	781b      	ldrb	r3, [r3, #0]
    51d0:	0018      	movs	r0, r3
    51d2:	4b0e      	ldr	r3, [pc, #56]	; (520c <trx_sram_read+0x1d4>)
    51d4:	4798      	blx	r3
}
    51d6:	46c0      	nop			; (mov r8, r8)
    51d8:	46bd      	mov	sp, r7
    51da:	b004      	add	sp, #16
    51dc:	bd80      	pop	{r7, pc}
    51de:	46c0      	nop			; (mov r8, r8)
    51e0:	0000a26d 	.word	0x0000a26d
    51e4:	00004291 	.word	0x00004291
    51e8:	20000f80 	.word	0x20000f80
    51ec:	20000fbc 	.word	0x20000fbc
    51f0:	00009905 	.word	0x00009905
    51f4:	000045d5 	.word	0x000045d5
    51f8:	00004625 	.word	0x00004625
    51fc:	000045ad 	.word	0x000045ad
    5200:	000045fd 	.word	0x000045fd
    5204:	20000f78 	.word	0x20000f78
    5208:	0000466d 	.word	0x0000466d
    520c:	000042d9 	.word	0x000042d9

00005210 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    5210:	b580      	push	{r7, lr}
    5212:	b084      	sub	sp, #16
    5214:	af00      	add	r7, sp, #0
    5216:	6039      	str	r1, [r7, #0]
    5218:	0011      	movs	r1, r2
    521a:	1dfb      	adds	r3, r7, #7
    521c:	1c02      	adds	r2, r0, #0
    521e:	701a      	strb	r2, [r3, #0]
    5220:	1dbb      	adds	r3, r7, #6
    5222:	1c0a      	adds	r2, r1, #0
    5224:	701a      	strb	r2, [r3, #0]
	uint8_t *odata;
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
    5226:	2308      	movs	r3, #8
    5228:	18fb      	adds	r3, r7, r3
    522a:	2200      	movs	r2, #0
    522c:	801a      	strh	r2, [r3, #0]
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    522e:	2001      	movs	r0, #1
    5230:	4b9a      	ldr	r3, [pc, #616]	; (549c <trx_aes_wrrd+0x28c>)
    5232:	4798      	blx	r3

	ENTER_TRX_REGION();
    5234:	2100      	movs	r1, #0
    5236:	2000      	movs	r0, #0
    5238:	4b99      	ldr	r3, [pc, #612]	; (54a0 <trx_aes_wrrd+0x290>)
    523a:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    523c:	4999      	ldr	r1, [pc, #612]	; (54a4 <trx_aes_wrrd+0x294>)
    523e:	4b9a      	ldr	r3, [pc, #616]	; (54a8 <trx_aes_wrrd+0x298>)
    5240:	2201      	movs	r2, #1
    5242:	0018      	movs	r0, r3
    5244:	4b99      	ldr	r3, [pc, #612]	; (54ac <trx_aes_wrrd+0x29c>)
    5246:	4798      	blx	r3

	/* Send the command byte */
	temp = TRX_CMD_SW;
    5248:	230b      	movs	r3, #11
    524a:	18fb      	adds	r3, r7, r3
    524c:	2240      	movs	r2, #64	; 0x40
    524e:	701a      	strb	r2, [r3, #0]

	while (!spi_is_ready_to_write(&master)) {
    5250:	46c0      	nop			; (mov r8, r8)
    5252:	4b95      	ldr	r3, [pc, #596]	; (54a8 <trx_aes_wrrd+0x298>)
    5254:	0018      	movs	r0, r3
    5256:	4b96      	ldr	r3, [pc, #600]	; (54b0 <trx_aes_wrrd+0x2a0>)
    5258:	4798      	blx	r3
    525a:	0003      	movs	r3, r0
    525c:	001a      	movs	r2, r3
    525e:	2301      	movs	r3, #1
    5260:	4053      	eors	r3, r2
    5262:	b2db      	uxtb	r3, r3
    5264:	2b00      	cmp	r3, #0
    5266:	d1f4      	bne.n	5252 <trx_aes_wrrd+0x42>
	}
	spi_write(&master, temp);
    5268:	230b      	movs	r3, #11
    526a:	18fb      	adds	r3, r7, r3
    526c:	781b      	ldrb	r3, [r3, #0]
    526e:	b29a      	uxth	r2, r3
    5270:	4b8d      	ldr	r3, [pc, #564]	; (54a8 <trx_aes_wrrd+0x298>)
    5272:	0011      	movs	r1, r2
    5274:	0018      	movs	r0, r3
    5276:	4b8f      	ldr	r3, [pc, #572]	; (54b4 <trx_aes_wrrd+0x2a4>)
    5278:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    527a:	46c0      	nop			; (mov r8, r8)
    527c:	4b8a      	ldr	r3, [pc, #552]	; (54a8 <trx_aes_wrrd+0x298>)
    527e:	0018      	movs	r0, r3
    5280:	4b8d      	ldr	r3, [pc, #564]	; (54b8 <trx_aes_wrrd+0x2a8>)
    5282:	4798      	blx	r3
    5284:	0003      	movs	r3, r0
    5286:	001a      	movs	r2, r3
    5288:	2301      	movs	r3, #1
    528a:	4053      	eors	r3, r2
    528c:	b2db      	uxtb	r3, r3
    528e:	2b00      	cmp	r3, #0
    5290:	d1f4      	bne.n	527c <trx_aes_wrrd+0x6c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5292:	46c0      	nop			; (mov r8, r8)
    5294:	4b84      	ldr	r3, [pc, #528]	; (54a8 <trx_aes_wrrd+0x298>)
    5296:	0018      	movs	r0, r3
    5298:	4b88      	ldr	r3, [pc, #544]	; (54bc <trx_aes_wrrd+0x2ac>)
    529a:	4798      	blx	r3
    529c:	0003      	movs	r3, r0
    529e:	001a      	movs	r2, r3
    52a0:	2301      	movs	r3, #1
    52a2:	4053      	eors	r3, r2
    52a4:	b2db      	uxtb	r3, r3
    52a6:	2b00      	cmp	r3, #0
    52a8:	d1f4      	bne.n	5294 <trx_aes_wrrd+0x84>
	}
	spi_read(&master, &dummy_read);
    52aa:	4a85      	ldr	r2, [pc, #532]	; (54c0 <trx_aes_wrrd+0x2b0>)
    52ac:	4b7e      	ldr	r3, [pc, #504]	; (54a8 <trx_aes_wrrd+0x298>)
    52ae:	0011      	movs	r1, r2
    52b0:	0018      	movs	r0, r3
    52b2:	4b84      	ldr	r3, [pc, #528]	; (54c4 <trx_aes_wrrd+0x2b4>)
    52b4:	4798      	blx	r3

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    52b6:	46c0      	nop			; (mov r8, r8)
    52b8:	4b7b      	ldr	r3, [pc, #492]	; (54a8 <trx_aes_wrrd+0x298>)
    52ba:	0018      	movs	r0, r3
    52bc:	4b7c      	ldr	r3, [pc, #496]	; (54b0 <trx_aes_wrrd+0x2a0>)
    52be:	4798      	blx	r3
    52c0:	0003      	movs	r3, r0
    52c2:	001a      	movs	r2, r3
    52c4:	2301      	movs	r3, #1
    52c6:	4053      	eors	r3, r2
    52c8:	b2db      	uxtb	r3, r3
    52ca:	2b00      	cmp	r3, #0
    52cc:	d1f4      	bne.n	52b8 <trx_aes_wrrd+0xa8>
	}
	spi_write(&master, addr);
    52ce:	1dfb      	adds	r3, r7, #7
    52d0:	781b      	ldrb	r3, [r3, #0]
    52d2:	b29a      	uxth	r2, r3
    52d4:	4b74      	ldr	r3, [pc, #464]	; (54a8 <trx_aes_wrrd+0x298>)
    52d6:	0011      	movs	r1, r2
    52d8:	0018      	movs	r0, r3
    52da:	4b76      	ldr	r3, [pc, #472]	; (54b4 <trx_aes_wrrd+0x2a4>)
    52dc:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    52de:	46c0      	nop			; (mov r8, r8)
    52e0:	4b71      	ldr	r3, [pc, #452]	; (54a8 <trx_aes_wrrd+0x298>)
    52e2:	0018      	movs	r0, r3
    52e4:	4b74      	ldr	r3, [pc, #464]	; (54b8 <trx_aes_wrrd+0x2a8>)
    52e6:	4798      	blx	r3
    52e8:	0003      	movs	r3, r0
    52ea:	001a      	movs	r2, r3
    52ec:	2301      	movs	r3, #1
    52ee:	4053      	eors	r3, r2
    52f0:	b2db      	uxtb	r3, r3
    52f2:	2b00      	cmp	r3, #0
    52f4:	d1f4      	bne.n	52e0 <trx_aes_wrrd+0xd0>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    52f6:	46c0      	nop			; (mov r8, r8)
    52f8:	4b6b      	ldr	r3, [pc, #428]	; (54a8 <trx_aes_wrrd+0x298>)
    52fa:	0018      	movs	r0, r3
    52fc:	4b6f      	ldr	r3, [pc, #444]	; (54bc <trx_aes_wrrd+0x2ac>)
    52fe:	4798      	blx	r3
    5300:	0003      	movs	r3, r0
    5302:	001a      	movs	r2, r3
    5304:	2301      	movs	r3, #1
    5306:	4053      	eors	r3, r2
    5308:	b2db      	uxtb	r3, r3
    530a:	2b00      	cmp	r3, #0
    530c:	d1f4      	bne.n	52f8 <trx_aes_wrrd+0xe8>
	}
	spi_read(&master, &dummy_read);
    530e:	4a6c      	ldr	r2, [pc, #432]	; (54c0 <trx_aes_wrrd+0x2b0>)
    5310:	4b65      	ldr	r3, [pc, #404]	; (54a8 <trx_aes_wrrd+0x298>)
    5312:	0011      	movs	r1, r2
    5314:	0018      	movs	r0, r3
    5316:	4b6b      	ldr	r3, [pc, #428]	; (54c4 <trx_aes_wrrd+0x2b4>)
    5318:	4798      	blx	r3

	/* now transfer data */
	odata = idata;
    531a:	683b      	ldr	r3, [r7, #0]
    531c:	60fb      	str	r3, [r7, #12]

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    531e:	46c0      	nop			; (mov r8, r8)
    5320:	4b61      	ldr	r3, [pc, #388]	; (54a8 <trx_aes_wrrd+0x298>)
    5322:	0018      	movs	r0, r3
    5324:	4b62      	ldr	r3, [pc, #392]	; (54b0 <trx_aes_wrrd+0x2a0>)
    5326:	4798      	blx	r3
    5328:	0003      	movs	r3, r0
    532a:	001a      	movs	r2, r3
    532c:	2301      	movs	r3, #1
    532e:	4053      	eors	r3, r2
    5330:	b2db      	uxtb	r3, r3
    5332:	2b00      	cmp	r3, #0
    5334:	d1f4      	bne.n	5320 <trx_aes_wrrd+0x110>
	}
	spi_write(&master, *idata++);
    5336:	683b      	ldr	r3, [r7, #0]
    5338:	1c5a      	adds	r2, r3, #1
    533a:	603a      	str	r2, [r7, #0]
    533c:	781b      	ldrb	r3, [r3, #0]
    533e:	b29a      	uxth	r2, r3
    5340:	4b59      	ldr	r3, [pc, #356]	; (54a8 <trx_aes_wrrd+0x298>)
    5342:	0011      	movs	r1, r2
    5344:	0018      	movs	r0, r3
    5346:	4b5b      	ldr	r3, [pc, #364]	; (54b4 <trx_aes_wrrd+0x2a4>)
    5348:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    534a:	46c0      	nop			; (mov r8, r8)
    534c:	4b56      	ldr	r3, [pc, #344]	; (54a8 <trx_aes_wrrd+0x298>)
    534e:	0018      	movs	r0, r3
    5350:	4b59      	ldr	r3, [pc, #356]	; (54b8 <trx_aes_wrrd+0x2a8>)
    5352:	4798      	blx	r3
    5354:	0003      	movs	r3, r0
    5356:	001a      	movs	r2, r3
    5358:	2301      	movs	r3, #1
    535a:	4053      	eors	r3, r2
    535c:	b2db      	uxtb	r3, r3
    535e:	2b00      	cmp	r3, #0
    5360:	d1f4      	bne.n	534c <trx_aes_wrrd+0x13c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5362:	46c0      	nop			; (mov r8, r8)
    5364:	4b50      	ldr	r3, [pc, #320]	; (54a8 <trx_aes_wrrd+0x298>)
    5366:	0018      	movs	r0, r3
    5368:	4b54      	ldr	r3, [pc, #336]	; (54bc <trx_aes_wrrd+0x2ac>)
    536a:	4798      	blx	r3
    536c:	0003      	movs	r3, r0
    536e:	001a      	movs	r2, r3
    5370:	2301      	movs	r3, #1
    5372:	4053      	eors	r3, r2
    5374:	b2db      	uxtb	r3, r3
    5376:	2b00      	cmp	r3, #0
    5378:	d1f4      	bne.n	5364 <trx_aes_wrrd+0x154>
	}
	spi_read(&master, &dummy_read);
    537a:	4a51      	ldr	r2, [pc, #324]	; (54c0 <trx_aes_wrrd+0x2b0>)
    537c:	4b4a      	ldr	r3, [pc, #296]	; (54a8 <trx_aes_wrrd+0x298>)
    537e:	0011      	movs	r1, r2
    5380:	0018      	movs	r0, r3
    5382:	4b50      	ldr	r3, [pc, #320]	; (54c4 <trx_aes_wrrd+0x2b4>)
    5384:	4798      	blx	r3

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    5386:	e041      	b.n	540c <trx_aes_wrrd+0x1fc>
		while (!spi_is_ready_to_write(&master)) {
    5388:	46c0      	nop			; (mov r8, r8)
    538a:	4b47      	ldr	r3, [pc, #284]	; (54a8 <trx_aes_wrrd+0x298>)
    538c:	0018      	movs	r0, r3
    538e:	4b48      	ldr	r3, [pc, #288]	; (54b0 <trx_aes_wrrd+0x2a0>)
    5390:	4798      	blx	r3
    5392:	0003      	movs	r3, r0
    5394:	001a      	movs	r2, r3
    5396:	2301      	movs	r3, #1
    5398:	4053      	eors	r3, r2
    539a:	b2db      	uxtb	r3, r3
    539c:	2b00      	cmp	r3, #0
    539e:	d1f4      	bne.n	538a <trx_aes_wrrd+0x17a>
		}
		spi_write(&master, *idata++);
    53a0:	683b      	ldr	r3, [r7, #0]
    53a2:	1c5a      	adds	r2, r3, #1
    53a4:	603a      	str	r2, [r7, #0]
    53a6:	781b      	ldrb	r3, [r3, #0]
    53a8:	b29a      	uxth	r2, r3
    53aa:	4b3f      	ldr	r3, [pc, #252]	; (54a8 <trx_aes_wrrd+0x298>)
    53ac:	0011      	movs	r1, r2
    53ae:	0018      	movs	r0, r3
    53b0:	4b40      	ldr	r3, [pc, #256]	; (54b4 <trx_aes_wrrd+0x2a4>)
    53b2:	4798      	blx	r3
		while (!spi_is_write_complete(&master)) {
    53b4:	46c0      	nop			; (mov r8, r8)
    53b6:	4b3c      	ldr	r3, [pc, #240]	; (54a8 <trx_aes_wrrd+0x298>)
    53b8:	0018      	movs	r0, r3
    53ba:	4b3f      	ldr	r3, [pc, #252]	; (54b8 <trx_aes_wrrd+0x2a8>)
    53bc:	4798      	blx	r3
    53be:	0003      	movs	r3, r0
    53c0:	001a      	movs	r2, r3
    53c2:	2301      	movs	r3, #1
    53c4:	4053      	eors	r3, r2
    53c6:	b2db      	uxtb	r3, r3
    53c8:	2b00      	cmp	r3, #0
    53ca:	d1f4      	bne.n	53b6 <trx_aes_wrrd+0x1a6>
		}
		while (!spi_is_ready_to_read(&master)) {
    53cc:	46c0      	nop			; (mov r8, r8)
    53ce:	4b36      	ldr	r3, [pc, #216]	; (54a8 <trx_aes_wrrd+0x298>)
    53d0:	0018      	movs	r0, r3
    53d2:	4b3a      	ldr	r3, [pc, #232]	; (54bc <trx_aes_wrrd+0x2ac>)
    53d4:	4798      	blx	r3
    53d6:	0003      	movs	r3, r0
    53d8:	001a      	movs	r2, r3
    53da:	2301      	movs	r3, #1
    53dc:	4053      	eors	r3, r2
    53de:	b2db      	uxtb	r3, r3
    53e0:	2b00      	cmp	r3, #0
    53e2:	d1f4      	bne.n	53ce <trx_aes_wrrd+0x1be>
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
    53e4:	2308      	movs	r3, #8
    53e6:	18fa      	adds	r2, r7, r3
    53e8:	4b2f      	ldr	r3, [pc, #188]	; (54a8 <trx_aes_wrrd+0x298>)
    53ea:	0011      	movs	r1, r2
    53ec:	0018      	movs	r0, r3
    53ee:	4b35      	ldr	r3, [pc, #212]	; (54c4 <trx_aes_wrrd+0x2b4>)
    53f0:	4798      	blx	r3
		*odata++ = (uint8_t)odata_var;
    53f2:	68fb      	ldr	r3, [r7, #12]
    53f4:	1c5a      	adds	r2, r3, #1
    53f6:	60fa      	str	r2, [r7, #12]
    53f8:	2208      	movs	r2, #8
    53fa:	18ba      	adds	r2, r7, r2
    53fc:	8812      	ldrh	r2, [r2, #0]
    53fe:	b2d2      	uxtb	r2, r2
    5400:	701a      	strb	r2, [r3, #0]
#else
		spi_read(&master, (uint16_t *)odata++);
#endif
		length--;
    5402:	1dbb      	adds	r3, r7, #6
    5404:	781a      	ldrb	r2, [r3, #0]
    5406:	1dbb      	adds	r3, r7, #6
    5408:	3a01      	subs	r2, #1
    540a:	701a      	strb	r2, [r3, #0]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    540c:	1dbb      	adds	r3, r7, #6
    540e:	781b      	ldrb	r3, [r3, #0]
    5410:	2b00      	cmp	r3, #0
    5412:	d1b9      	bne.n	5388 <trx_aes_wrrd+0x178>
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    5414:	46c0      	nop			; (mov r8, r8)
    5416:	4b24      	ldr	r3, [pc, #144]	; (54a8 <trx_aes_wrrd+0x298>)
    5418:	0018      	movs	r0, r3
    541a:	4b25      	ldr	r3, [pc, #148]	; (54b0 <trx_aes_wrrd+0x2a0>)
    541c:	4798      	blx	r3
    541e:	0003      	movs	r3, r0
    5420:	001a      	movs	r2, r3
    5422:	2301      	movs	r3, #1
    5424:	4053      	eors	r3, r2
    5426:	b2db      	uxtb	r3, r3
    5428:	2b00      	cmp	r3, #0
    542a:	d1f4      	bne.n	5416 <trx_aes_wrrd+0x206>
	}
	spi_write(&master, 0);
    542c:	4b1e      	ldr	r3, [pc, #120]	; (54a8 <trx_aes_wrrd+0x298>)
    542e:	2100      	movs	r1, #0
    5430:	0018      	movs	r0, r3
    5432:	4b20      	ldr	r3, [pc, #128]	; (54b4 <trx_aes_wrrd+0x2a4>)
    5434:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    5436:	46c0      	nop			; (mov r8, r8)
    5438:	4b1b      	ldr	r3, [pc, #108]	; (54a8 <trx_aes_wrrd+0x298>)
    543a:	0018      	movs	r0, r3
    543c:	4b1e      	ldr	r3, [pc, #120]	; (54b8 <trx_aes_wrrd+0x2a8>)
    543e:	4798      	blx	r3
    5440:	0003      	movs	r3, r0
    5442:	001a      	movs	r2, r3
    5444:	2301      	movs	r3, #1
    5446:	4053      	eors	r3, r2
    5448:	b2db      	uxtb	r3, r3
    544a:	2b00      	cmp	r3, #0
    544c:	d1f4      	bne.n	5438 <trx_aes_wrrd+0x228>
	}
	while (!spi_is_ready_to_read(&master)) {
    544e:	46c0      	nop			; (mov r8, r8)
    5450:	4b15      	ldr	r3, [pc, #84]	; (54a8 <trx_aes_wrrd+0x298>)
    5452:	0018      	movs	r0, r3
    5454:	4b19      	ldr	r3, [pc, #100]	; (54bc <trx_aes_wrrd+0x2ac>)
    5456:	4798      	blx	r3
    5458:	0003      	movs	r3, r0
    545a:	001a      	movs	r2, r3
    545c:	2301      	movs	r3, #1
    545e:	4053      	eors	r3, r2
    5460:	b2db      	uxtb	r3, r3
    5462:	2b00      	cmp	r3, #0
    5464:	d1f4      	bne.n	5450 <trx_aes_wrrd+0x240>
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
    5466:	2308      	movs	r3, #8
    5468:	18fa      	adds	r2, r7, r3
    546a:	4b0f      	ldr	r3, [pc, #60]	; (54a8 <trx_aes_wrrd+0x298>)
    546c:	0011      	movs	r1, r2
    546e:	0018      	movs	r0, r3
    5470:	4b14      	ldr	r3, [pc, #80]	; (54c4 <trx_aes_wrrd+0x2b4>)
    5472:	4798      	blx	r3
	*odata = (uint8_t)odata_var;
    5474:	2308      	movs	r3, #8
    5476:	18fb      	adds	r3, r7, r3
    5478:	881b      	ldrh	r3, [r3, #0]
    547a:	b2da      	uxtb	r2, r3
    547c:	68fb      	ldr	r3, [r7, #12]
    547e:	701a      	strb	r2, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5480:	4908      	ldr	r1, [pc, #32]	; (54a4 <trx_aes_wrrd+0x294>)
    5482:	4b09      	ldr	r3, [pc, #36]	; (54a8 <trx_aes_wrrd+0x298>)
    5484:	2200      	movs	r2, #0
    5486:	0018      	movs	r0, r3
    5488:	4b08      	ldr	r3, [pc, #32]	; (54ac <trx_aes_wrrd+0x29c>)
    548a:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    548c:	2100      	movs	r1, #0
    548e:	2000      	movs	r0, #0
    5490:	4b0d      	ldr	r3, [pc, #52]	; (54c8 <trx_aes_wrrd+0x2b8>)
    5492:	4798      	blx	r3
}
    5494:	46c0      	nop			; (mov r8, r8)
    5496:	46bd      	mov	sp, r7
    5498:	b004      	add	sp, #16
    549a:	bd80      	pop	{r7, pc}
    549c:	0000a26d 	.word	0x0000a26d
    54a0:	0000a12d 	.word	0x0000a12d
    54a4:	20000f80 	.word	0x20000f80
    54a8:	20000fbc 	.word	0x20000fbc
    54ac:	00009905 	.word	0x00009905
    54b0:	000045d5 	.word	0x000045d5
    54b4:	00004625 	.word	0x00004625
    54b8:	000045ad 	.word	0x000045ad
    54bc:	000045fd 	.word	0x000045fd
    54c0:	20000f78 	.word	0x20000f78
    54c4:	0000466d 	.word	0x0000466d
    54c8:	0000a0e5 	.word	0x0000a0e5

000054cc <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    54cc:	b580      	push	{r7, lr}
    54ce:	b082      	sub	sp, #8
    54d0:	af00      	add	r7, sp, #0
    54d2:	0002      	movs	r2, r0
    54d4:	1dfb      	adds	r3, r7, #7
    54d6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    54d8:	4b06      	ldr	r3, [pc, #24]	; (54f4 <system_interrupt_enable+0x28>)
    54da:	1dfa      	adds	r2, r7, #7
    54dc:	7812      	ldrb	r2, [r2, #0]
    54de:	0011      	movs	r1, r2
    54e0:	221f      	movs	r2, #31
    54e2:	400a      	ands	r2, r1
    54e4:	2101      	movs	r1, #1
    54e6:	4091      	lsls	r1, r2
    54e8:	000a      	movs	r2, r1
    54ea:	601a      	str	r2, [r3, #0]
}
    54ec:	46c0      	nop			; (mov r8, r8)
    54ee:	46bd      	mov	sp, r7
    54f0:	b002      	add	sp, #8
    54f2:	bd80      	pop	{r7, pc}
    54f4:	e000e100 	.word	0xe000e100

000054f8 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    54f8:	b580      	push	{r7, lr}
    54fa:	b084      	sub	sp, #16
    54fc:	af00      	add	r7, sp, #0
    54fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5500:	687b      	ldr	r3, [r7, #4]
    5502:	681b      	ldr	r3, [r3, #0]
    5504:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5506:	68fb      	ldr	r3, [r7, #12]
    5508:	7bdb      	ldrb	r3, [r3, #15]
    550a:	b2db      	uxtb	r3, r3
    550c:	001a      	movs	r2, r3
    550e:	2380      	movs	r3, #128	; 0x80
    5510:	4013      	ands	r3, r2
    5512:	1e5a      	subs	r2, r3, #1
    5514:	4193      	sbcs	r3, r2
    5516:	b2db      	uxtb	r3, r3
#endif
}
    5518:	0018      	movs	r0, r3
    551a:	46bd      	mov	sp, r7
    551c:	b004      	add	sp, #16
    551e:	bd80      	pop	{r7, pc}

00005520 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    5520:	b580      	push	{r7, lr}
    5522:	b082      	sub	sp, #8
    5524:	af00      	add	r7, sp, #0
    5526:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    5528:	687b      	ldr	r3, [r7, #4]
    552a:	2200      	movs	r2, #0
    552c:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    552e:	687b      	ldr	r3, [r7, #4]
    5530:	2200      	movs	r2, #0
    5532:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    5534:	687b      	ldr	r3, [r7, #4]
    5536:	2200      	movs	r2, #0
    5538:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    553a:	687b      	ldr	r3, [r7, #4]
    553c:	2200      	movs	r2, #0
    553e:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	2200      	movs	r2, #0
    5544:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    5546:	687b      	ldr	r3, [r7, #4]
    5548:	2200      	movs	r2, #0
    554a:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    554c:	687b      	ldr	r3, [r7, #4]
    554e:	2200      	movs	r2, #0
    5550:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    5552:	687b      	ldr	r3, [r7, #4]
    5554:	2200      	movs	r2, #0
    5556:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    5558:	687b      	ldr	r3, [r7, #4]
    555a:	2200      	movs	r2, #0
    555c:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    555e:	687b      	ldr	r3, [r7, #4]
    5560:	2200      	movs	r2, #0
    5562:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    5564:	687b      	ldr	r3, [r7, #4]
    5566:	2200      	movs	r2, #0
    5568:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    556a:	687b      	ldr	r3, [r7, #4]
    556c:	2200      	movs	r2, #0
    556e:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    5570:	687b      	ldr	r3, [r7, #4]
    5572:	2200      	movs	r2, #0
    5574:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    5576:	687b      	ldr	r3, [r7, #4]
    5578:	2200      	movs	r2, #0
    557a:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    557c:	687b      	ldr	r3, [r7, #4]
    557e:	2200      	movs	r2, #0
    5580:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    5582:	687b      	ldr	r3, [r7, #4]
    5584:	2200      	movs	r2, #0
    5586:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    5588:	687b      	ldr	r3, [r7, #4]
    558a:	2200      	movs	r2, #0
    558c:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    558e:	687b      	ldr	r3, [r7, #4]
    5590:	2200      	movs	r2, #0
    5592:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    5594:	687b      	ldr	r3, [r7, #4]
    5596:	2200      	movs	r2, #0
    5598:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    559a:	687b      	ldr	r3, [r7, #4]
    559c:	2200      	movs	r2, #0
    559e:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    55a0:	46c0      	nop			; (mov r8, r8)
    55a2:	46bd      	mov	sp, r7
    55a4:	b002      	add	sp, #8
    55a6:	bd80      	pop	{r7, pc}

000055a8 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    55a8:	b580      	push	{r7, lr}
    55aa:	b084      	sub	sp, #16
    55ac:	af00      	add	r7, sp, #0
    55ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    55b0:	687b      	ldr	r3, [r7, #4]
    55b2:	681b      	ldr	r3, [r3, #0]
    55b4:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    55b6:	46c0      	nop			; (mov r8, r8)
    55b8:	687b      	ldr	r3, [r7, #4]
    55ba:	0018      	movs	r0, r3
    55bc:	4b07      	ldr	r3, [pc, #28]	; (55dc <tc_enable+0x34>)
    55be:	4798      	blx	r3
    55c0:	1e03      	subs	r3, r0, #0
    55c2:	d1f9      	bne.n	55b8 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    55c4:	68fb      	ldr	r3, [r7, #12]
    55c6:	881b      	ldrh	r3, [r3, #0]
    55c8:	b29b      	uxth	r3, r3
    55ca:	2202      	movs	r2, #2
    55cc:	4313      	orrs	r3, r2
    55ce:	b29a      	uxth	r2, r3
    55d0:	68fb      	ldr	r3, [r7, #12]
    55d2:	801a      	strh	r2, [r3, #0]
}
    55d4:	46c0      	nop			; (mov r8, r8)
    55d6:	46bd      	mov	sp, r7
    55d8:	b004      	add	sp, #16
    55da:	bd80      	pop	{r7, pc}
    55dc:	000054f9 	.word	0x000054f9

000055e0 <tc_clear_status>:
 * \param[in] status_flags  Bitmask of \c TC_STATUS_* flags to clear
 */
static inline void tc_clear_status(
		struct tc_module *const module_inst,
		const uint32_t status_flags)
{
    55e0:	b580      	push	{r7, lr}
    55e2:	b084      	sub	sp, #16
    55e4:	af00      	add	r7, sp, #0
    55e6:	6078      	str	r0, [r7, #4]
    55e8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    55ea:	687b      	ldr	r3, [r7, #4]
    55ec:	681b      	ldr	r3, [r3, #0]
    55ee:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    55f0:	2300      	movs	r3, #0
    55f2:	60fb      	str	r3, [r7, #12]

	/* Check for TC channel 0 match */
	if (status_flags & TC_STATUS_CHANNEL_0_MATCH) {
    55f4:	683b      	ldr	r3, [r7, #0]
    55f6:	2201      	movs	r2, #1
    55f8:	4013      	ands	r3, r2
    55fa:	d003      	beq.n	5604 <tc_clear_status+0x24>
		int_flags |= TC_INTFLAG_MC(1);
    55fc:	68fb      	ldr	r3, [r7, #12]
    55fe:	2210      	movs	r2, #16
    5600:	4313      	orrs	r3, r2
    5602:	60fb      	str	r3, [r7, #12]
	}

	/* Check for TC channel 1 match */
	if (status_flags & TC_STATUS_CHANNEL_1_MATCH) {
    5604:	683b      	ldr	r3, [r7, #0]
    5606:	2202      	movs	r2, #2
    5608:	4013      	ands	r3, r2
    560a:	d003      	beq.n	5614 <tc_clear_status+0x34>
		int_flags |= TC_INTFLAG_MC(2);
    560c:	68fb      	ldr	r3, [r7, #12]
    560e:	2220      	movs	r2, #32
    5610:	4313      	orrs	r3, r2
    5612:	60fb      	str	r3, [r7, #12]
	}

#if !defined(FEATURE_TC_SYNCBUSY_SCHEME_VERSION_2)
	/* Check for TC read synchronization ready */
	if (status_flags & TC_STATUS_SYNC_READY) {
    5614:	683b      	ldr	r3, [r7, #0]
    5616:	2204      	movs	r2, #4
    5618:	4013      	ands	r3, r2
    561a:	d003      	beq.n	5624 <tc_clear_status+0x44>
		int_flags |= TC_INTFLAG_SYNCRDY;
    561c:	68fb      	ldr	r3, [r7, #12]
    561e:	2208      	movs	r2, #8
    5620:	4313      	orrs	r3, r2
    5622:	60fb      	str	r3, [r7, #12]
	}
#endif

	/* Check for TC capture overflow */
	if (status_flags & TC_STATUS_CAPTURE_OVERFLOW) {
    5624:	683b      	ldr	r3, [r7, #0]
    5626:	2208      	movs	r2, #8
    5628:	4013      	ands	r3, r2
    562a:	d003      	beq.n	5634 <tc_clear_status+0x54>
		int_flags |= TC_INTFLAG_ERR;
    562c:	68fb      	ldr	r3, [r7, #12]
    562e:	2202      	movs	r2, #2
    5630:	4313      	orrs	r3, r2
    5632:	60fb      	str	r3, [r7, #12]
	}

	/* Check for TC count overflow */
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
    5634:	683b      	ldr	r3, [r7, #0]
    5636:	2210      	movs	r2, #16
    5638:	4013      	ands	r3, r2
    563a:	d003      	beq.n	5644 <tc_clear_status+0x64>
		int_flags |= TC_INTFLAG_OVF;
    563c:	68fb      	ldr	r3, [r7, #12]
    563e:	2201      	movs	r2, #1
    5640:	4313      	orrs	r3, r2
    5642:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    5644:	68fb      	ldr	r3, [r7, #12]
    5646:	b2da      	uxtb	r2, r3
    5648:	68bb      	ldr	r3, [r7, #8]
    564a:	739a      	strb	r2, [r3, #14]
}
    564c:	46c0      	nop			; (mov r8, r8)
    564e:	46bd      	mov	sp, r7
    5650:	b004      	add	sp, #16
    5652:	bd80      	pop	{r7, pc}

00005654 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    5654:	b580      	push	{r7, lr}
    5656:	b082      	sub	sp, #8
    5658:	af00      	add	r7, sp, #0
    565a:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    565c:	4a04      	ldr	r2, [pc, #16]	; (5670 <_tc_interrupt_get_interrupt_vector+0x1c>)
    565e:	687b      	ldr	r3, [r7, #4]
    5660:	18d3      	adds	r3, r2, r3
    5662:	781b      	ldrb	r3, [r3, #0]
    5664:	b25b      	sxtb	r3, r3
}
    5666:	0018      	movs	r0, r3
    5668:	46bd      	mov	sp, r7
    566a:	b002      	add	sp, #8
    566c:	bd80      	pop	{r7, pc}
    566e:	46c0      	nop			; (mov r8, r8)
    5670:	20000004 	.word	0x20000004

00005674 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    5674:	b580      	push	{r7, lr}
    5676:	b082      	sub	sp, #8
    5678:	af00      	add	r7, sp, #0
    567a:	6078      	str	r0, [r7, #4]
    567c:	000a      	movs	r2, r1
    567e:	1cfb      	adds	r3, r7, #3
    5680:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    5682:	687b      	ldr	r3, [r7, #4]
    5684:	681b      	ldr	r3, [r3, #0]
    5686:	0018      	movs	r0, r3
    5688:	4b22      	ldr	r3, [pc, #136]	; (5714 <tc_enable_callback+0xa0>)
    568a:	4798      	blx	r3
    568c:	0003      	movs	r3, r0
    568e:	0018      	movs	r0, r3
    5690:	4b21      	ldr	r3, [pc, #132]	; (5718 <tc_enable_callback+0xa4>)
    5692:	4798      	blx	r3
    5694:	0003      	movs	r3, r0
    5696:	0018      	movs	r0, r3
    5698:	4b20      	ldr	r3, [pc, #128]	; (571c <tc_enable_callback+0xa8>)
    569a:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    569c:	1cfb      	adds	r3, r7, #3
    569e:	781b      	ldrb	r3, [r3, #0]
    56a0:	2b02      	cmp	r3, #2
    56a2:	d10b      	bne.n	56bc <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    56a4:	687b      	ldr	r3, [r7, #4]
    56a6:	7e5b      	ldrb	r3, [r3, #25]
    56a8:	2210      	movs	r2, #16
    56aa:	4313      	orrs	r3, r2
    56ac:	b2da      	uxtb	r2, r3
    56ae:	687b      	ldr	r3, [r7, #4]
    56b0:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    56b2:	687b      	ldr	r3, [r7, #4]
    56b4:	681b      	ldr	r3, [r3, #0]
    56b6:	2210      	movs	r2, #16
    56b8:	735a      	strb	r2, [r3, #13]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
    56ba:	e026      	b.n	570a <tc_enable_callback+0x96>
	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    56bc:	1cfb      	adds	r3, r7, #3
    56be:	781b      	ldrb	r3, [r3, #0]
    56c0:	2b03      	cmp	r3, #3
    56c2:	d10b      	bne.n	56dc <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    56c4:	687b      	ldr	r3, [r7, #4]
    56c6:	7e5b      	ldrb	r3, [r3, #25]
    56c8:	2220      	movs	r2, #32
    56ca:	4313      	orrs	r3, r2
    56cc:	b2da      	uxtb	r2, r3
    56ce:	687b      	ldr	r3, [r7, #4]
    56d0:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    56d2:	687b      	ldr	r3, [r7, #4]
    56d4:	681b      	ldr	r3, [r3, #0]
    56d6:	2220      	movs	r2, #32
    56d8:	735a      	strb	r2, [r3, #13]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
    56da:	e016      	b.n	570a <tc_enable_callback+0x96>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    56dc:	687b      	ldr	r3, [r7, #4]
    56de:	7e5b      	ldrb	r3, [r3, #25]
    56e0:	b25a      	sxtb	r2, r3
    56e2:	1cfb      	adds	r3, r7, #3
    56e4:	781b      	ldrb	r3, [r3, #0]
    56e6:	2101      	movs	r1, #1
    56e8:	4099      	lsls	r1, r3
    56ea:	000b      	movs	r3, r1
    56ec:	b25b      	sxtb	r3, r3
    56ee:	4313      	orrs	r3, r2
    56f0:	b25b      	sxtb	r3, r3
    56f2:	b2da      	uxtb	r2, r3
    56f4:	687b      	ldr	r3, [r7, #4]
    56f6:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    56f8:	687b      	ldr	r3, [r7, #4]
    56fa:	681b      	ldr	r3, [r3, #0]
    56fc:	1cfa      	adds	r2, r7, #3
    56fe:	7812      	ldrb	r2, [r2, #0]
    5700:	2101      	movs	r1, #1
    5702:	4091      	lsls	r1, r2
    5704:	000a      	movs	r2, r1
    5706:	b2d2      	uxtb	r2, r2
    5708:	735a      	strb	r2, [r3, #13]
	}
}
    570a:	46c0      	nop			; (mov r8, r8)
    570c:	46bd      	mov	sp, r7
    570e:	b002      	add	sp, #8
    5710:	bd80      	pop	{r7, pc}
    5712:	46c0      	nop			; (mov r8, r8)
    5714:	00002c61 	.word	0x00002c61
    5718:	00005655 	.word	0x00005655
    571c:	000054cd 	.word	0x000054cd

00005720 <tc_disable_callback>:
 * \param[in]     module        Pointer to TC software instance struct
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_disable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type){
    5720:	b580      	push	{r7, lr}
    5722:	b082      	sub	sp, #8
    5724:	af00      	add	r7, sp, #0
    5726:	6078      	str	r0, [r7, #4]
    5728:	000a      	movs	r2, r1
    572a:	1cfb      	adds	r3, r7, #3
    572c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    572e:	1cfb      	adds	r3, r7, #3
    5730:	781b      	ldrb	r3, [r3, #0]
    5732:	2b02      	cmp	r3, #2
    5734:	d10b      	bne.n	574e <tc_disable_callback+0x2e>
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    5736:	687b      	ldr	r3, [r7, #4]
    5738:	681b      	ldr	r3, [r3, #0]
    573a:	2210      	movs	r2, #16
    573c:	731a      	strb	r2, [r3, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    573e:	687b      	ldr	r3, [r7, #4]
    5740:	7e5b      	ldrb	r3, [r3, #25]
    5742:	2210      	movs	r2, #16
    5744:	4393      	bics	r3, r2
    5746:	b2da      	uxtb	r2, r3
    5748:	687b      	ldr	r3, [r7, #4]
    574a:	765a      	strb	r2, [r3, #25]
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
		module->enable_callback_mask &= ~(1 << callback_type);
	}
}
    574c:	e028      	b.n	57a0 <tc_disable_callback+0x80>
	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    574e:	1cfb      	adds	r3, r7, #3
    5750:	781b      	ldrb	r3, [r3, #0]
    5752:	2b03      	cmp	r3, #3
    5754:	d10b      	bne.n	576e <tc_disable_callback+0x4e>
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
    5756:	687b      	ldr	r3, [r7, #4]
    5758:	681b      	ldr	r3, [r3, #0]
    575a:	2220      	movs	r2, #32
    575c:	731a      	strb	r2, [r3, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
    575e:	687b      	ldr	r3, [r7, #4]
    5760:	7e5b      	ldrb	r3, [r3, #25]
    5762:	2220      	movs	r2, #32
    5764:	4393      	bics	r3, r2
    5766:	b2da      	uxtb	r2, r3
    5768:	687b      	ldr	r3, [r7, #4]
    576a:	765a      	strb	r2, [r3, #25]
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
		module->enable_callback_mask &= ~(1 << callback_type);
	}
}
    576c:	e018      	b.n	57a0 <tc_disable_callback+0x80>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    576e:	687b      	ldr	r3, [r7, #4]
    5770:	681b      	ldr	r3, [r3, #0]
    5772:	1cfa      	adds	r2, r7, #3
    5774:	7812      	ldrb	r2, [r2, #0]
    5776:	2101      	movs	r1, #1
    5778:	4091      	lsls	r1, r2
    577a:	000a      	movs	r2, r1
    577c:	b2d2      	uxtb	r2, r2
    577e:	731a      	strb	r2, [r3, #12]
		module->enable_callback_mask &= ~(1 << callback_type);
    5780:	687b      	ldr	r3, [r7, #4]
    5782:	7e5b      	ldrb	r3, [r3, #25]
    5784:	b25b      	sxtb	r3, r3
    5786:	1cfa      	adds	r2, r7, #3
    5788:	7812      	ldrb	r2, [r2, #0]
    578a:	2101      	movs	r1, #1
    578c:	4091      	lsls	r1, r2
    578e:	000a      	movs	r2, r1
    5790:	b252      	sxtb	r2, r2
    5792:	43d2      	mvns	r2, r2
    5794:	b252      	sxtb	r2, r2
    5796:	4013      	ands	r3, r2
    5798:	b25b      	sxtb	r3, r3
    579a:	b2da      	uxtb	r2, r3
    579c:	687b      	ldr	r3, [r7, #4]
    579e:	765a      	strb	r2, [r3, #25]
	}
}
    57a0:	46c0      	nop			; (mov r8, r8)
    57a2:	46bd      	mov	sp, r7
    57a4:	b002      	add	sp, #8
    57a6:	bd80      	pop	{r7, pc}

000057a8 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    57a8:	b580      	push	{r7, lr}
    57aa:	af00      	add	r7, sp, #0
	return ((uint16_t)tc_get_count_value(&module_inst));
    57ac:	4b04      	ldr	r3, [pc, #16]	; (57c0 <tmr_read_count+0x18>)
    57ae:	0018      	movs	r0, r3
    57b0:	4b04      	ldr	r3, [pc, #16]	; (57c4 <tmr_read_count+0x1c>)
    57b2:	4798      	blx	r3
    57b4:	0003      	movs	r3, r0
    57b6:	b29b      	uxth	r3, r3
}
    57b8:	0018      	movs	r0, r3
    57ba:	46bd      	mov	sp, r7
    57bc:	bd80      	pop	{r7, pc}
    57be:	46c0      	nop			; (mov r8, r8)
    57c0:	2000102c 	.word	0x2000102c
    57c4:	00003105 	.word	0x00003105

000057c8 <tmr_disable_cc_interrupt>:

/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
    57c8:	b580      	push	{r7, lr}
    57ca:	af00      	add	r7, sp, #0
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
    57cc:	4b03      	ldr	r3, [pc, #12]	; (57dc <tmr_disable_cc_interrupt+0x14>)
    57ce:	2102      	movs	r1, #2
    57d0:	0018      	movs	r0, r3
    57d2:	4b03      	ldr	r3, [pc, #12]	; (57e0 <tmr_disable_cc_interrupt+0x18>)
    57d4:	4798      	blx	r3
}
    57d6:	46c0      	nop			; (mov r8, r8)
    57d8:	46bd      	mov	sp, r7
    57da:	bd80      	pop	{r7, pc}
    57dc:	2000102c 	.word	0x2000102c
    57e0:	00005721 	.word	0x00005721

000057e4 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    57e4:	b580      	push	{r7, lr}
    57e6:	af00      	add	r7, sp, #0
	tc_clear_status(&module_inst, TC_STATUS_CHANNEL_0_MATCH);
    57e8:	4b06      	ldr	r3, [pc, #24]	; (5804 <tmr_enable_cc_interrupt+0x20>)
    57ea:	2101      	movs	r1, #1
    57ec:	0018      	movs	r0, r3
    57ee:	4b06      	ldr	r3, [pc, #24]	; (5808 <tmr_enable_cc_interrupt+0x24>)
    57f0:	4798      	blx	r3
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
    57f2:	4b04      	ldr	r3, [pc, #16]	; (5804 <tmr_enable_cc_interrupt+0x20>)
    57f4:	2102      	movs	r1, #2
    57f6:	0018      	movs	r0, r3
    57f8:	4b04      	ldr	r3, [pc, #16]	; (580c <tmr_enable_cc_interrupt+0x28>)
    57fa:	4798      	blx	r3
}
    57fc:	46c0      	nop			; (mov r8, r8)
    57fe:	46bd      	mov	sp, r7
    5800:	bd80      	pop	{r7, pc}
    5802:	46c0      	nop			; (mov r8, r8)
    5804:	2000102c 	.word	0x2000102c
    5808:	000055e1 	.word	0x000055e1
    580c:	00005675 	.word	0x00005675

00005810 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    5810:	b580      	push	{r7, lr}
    5812:	b082      	sub	sp, #8
    5814:	af00      	add	r7, sp, #0
    5816:	0002      	movs	r2, r0
    5818:	1dbb      	adds	r3, r7, #6
    581a:	801a      	strh	r2, [r3, #0]
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    581c:	1dbb      	adds	r3, r7, #6
    581e:	881a      	ldrh	r2, [r3, #0]
    5820:	4b04      	ldr	r3, [pc, #16]	; (5834 <tmr_write_cmpreg+0x24>)
    5822:	2100      	movs	r1, #0
    5824:	0018      	movs	r0, r3
    5826:	4b04      	ldr	r3, [pc, #16]	; (5838 <tmr_write_cmpreg+0x28>)
    5828:	4798      	blx	r3
			(uint32_t)compare_value);
}
    582a:	46c0      	nop			; (mov r8, r8)
    582c:	46bd      	mov	sp, r7
    582e:	b002      	add	sp, #8
    5830:	bd80      	pop	{r7, pc}
    5832:	46c0      	nop			; (mov r8, r8)
    5834:	2000102c 	.word	0x2000102c
    5838:	00003159 	.word	0x00003159

0000583c <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    583c:	b580      	push	{r7, lr}
    583e:	b082      	sub	sp, #8
    5840:	af00      	add	r7, sp, #0
    5842:	6078      	str	r0, [r7, #4]
	tmr_ovf_callback();
    5844:	4b02      	ldr	r3, [pc, #8]	; (5850 <tc_ovf_callback+0x14>)
    5846:	4798      	blx	r3
}
    5848:	46c0      	nop			; (mov r8, r8)
    584a:	46bd      	mov	sp, r7
    584c:	b002      	add	sp, #8
    584e:	bd80      	pop	{r7, pc}
    5850:	0000b471 	.word	0x0000b471

00005854 <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    5854:	b580      	push	{r7, lr}
    5856:	b082      	sub	sp, #8
    5858:	af00      	add	r7, sp, #0
    585a:	6078      	str	r0, [r7, #4]
	tmr_cca_callback();
    585c:	4b02      	ldr	r3, [pc, #8]	; (5868 <tc_cca_callback+0x14>)
    585e:	4798      	blx	r3
}
    5860:	46c0      	nop			; (mov r8, r8)
    5862:	46bd      	mov	sp, r7
    5864:	b002      	add	sp, #8
    5866:	bd80      	pop	{r7, pc}
    5868:	0000b4b9 	.word	0x0000b4b9

0000586c <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    586c:	b580      	push	{r7, lr}
    586e:	b082      	sub	sp, #8
    5870:	af00      	add	r7, sp, #0
	float timer_multiplier;
	tc_get_config_defaults(&timer_config);
    5872:	4b2b      	ldr	r3, [pc, #172]	; (5920 <tmr_init+0xb4>)
    5874:	0018      	movs	r0, r3
    5876:	4b2b      	ldr	r3, [pc, #172]	; (5924 <tmr_init+0xb8>)
    5878:	4798      	blx	r3
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    587a:	4b29      	ldr	r3, [pc, #164]	; (5920 <tmr_init+0xb4>)
    587c:	2201      	movs	r2, #1
    587e:	4252      	negs	r2, r2
    5880:	855a      	strh	r2, [r3, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    5882:	4a27      	ldr	r2, [pc, #156]	; (5920 <tmr_init+0xb4>)
    5884:	4928      	ldr	r1, [pc, #160]	; (5928 <tmr_init+0xbc>)
    5886:	4b29      	ldr	r3, [pc, #164]	; (592c <tmr_init+0xc0>)
    5888:	0018      	movs	r0, r3
    588a:	4b29      	ldr	r3, [pc, #164]	; (5930 <tmr_init+0xc4>)
    588c:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    588e:	4929      	ldr	r1, [pc, #164]	; (5934 <tmr_init+0xc8>)
    5890:	4b26      	ldr	r3, [pc, #152]	; (592c <tmr_init+0xc0>)
    5892:	2200      	movs	r2, #0
    5894:	0018      	movs	r0, r3
    5896:	4b28      	ldr	r3, [pc, #160]	; (5938 <tmr_init+0xcc>)
    5898:	4798      	blx	r3
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    589a:	4928      	ldr	r1, [pc, #160]	; (593c <tmr_init+0xd0>)
    589c:	4b23      	ldr	r3, [pc, #140]	; (592c <tmr_init+0xc0>)
    589e:	2202      	movs	r2, #2
    58a0:	0018      	movs	r0, r3
    58a2:	4b25      	ldr	r3, [pc, #148]	; (5938 <tmr_init+0xcc>)
    58a4:	4798      	blx	r3
			TC_CALLBACK_CC_CHANNEL0);
	tc_enable_callback(&module_inst, TC_CALLBACK_OVERFLOW);
    58a6:	4b21      	ldr	r3, [pc, #132]	; (592c <tmr_init+0xc0>)
    58a8:	2100      	movs	r1, #0
    58aa:	0018      	movs	r0, r3
    58ac:	4b24      	ldr	r3, [pc, #144]	; (5940 <tmr_init+0xd4>)
    58ae:	4798      	blx	r3
	/*tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);*/

	tc_enable(&module_inst);
    58b0:	4b1e      	ldr	r3, [pc, #120]	; (592c <tmr_init+0xc0>)
    58b2:	0018      	movs	r0, r3
    58b4:	4b23      	ldr	r3, [pc, #140]	; (5944 <tmr_init+0xd8>)
    58b6:	4798      	blx	r3
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    58b8:	2000      	movs	r0, #0
    58ba:	4b23      	ldr	r3, [pc, #140]	; (5948 <tmr_init+0xdc>)
    58bc:	4798      	blx	r3
    58be:	0002      	movs	r2, r0
    58c0:	4b22      	ldr	r3, [pc, #136]	; (594c <tmr_init+0xe0>)
    58c2:	0010      	movs	r0, r2
    58c4:	4798      	blx	r3
    58c6:	1c02      	adds	r2, r0, #0
    58c8:	4b21      	ldr	r3, [pc, #132]	; (5950 <tmr_init+0xe4>)
    58ca:	4922      	ldr	r1, [pc, #136]	; (5954 <tmr_init+0xe8>)
    58cc:	1c10      	adds	r0, r2, #0
    58ce:	4798      	blx	r3
    58d0:	1c03      	adds	r3, r0, #0
    58d2:	607b      	str	r3, [r7, #4]
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    58d4:	4b20      	ldr	r3, [pc, #128]	; (5958 <tmr_init+0xec>)
    58d6:	6878      	ldr	r0, [r7, #4]
    58d8:	4798      	blx	r3
    58da:	0002      	movs	r2, r0
    58dc:	4b1b      	ldr	r3, [pc, #108]	; (594c <tmr_init+0xe0>)
    58de:	0010      	movs	r0, r2
    58e0:	4798      	blx	r3
    58e2:	1c02      	adds	r2, r0, #0
    58e4:	4b1d      	ldr	r3, [pc, #116]	; (595c <tmr_init+0xf0>)
    58e6:	1c11      	adds	r1, r2, #0
    58e8:	6878      	ldr	r0, [r7, #4]
    58ea:	4798      	blx	r3
    58ec:	1c03      	adds	r3, r0, #0
    58ee:	1c1a      	adds	r2, r3, #0
    58f0:	4b1b      	ldr	r3, [pc, #108]	; (5960 <tmr_init+0xf4>)
    58f2:	21fc      	movs	r1, #252	; 0xfc
    58f4:	0589      	lsls	r1, r1, #22
    58f6:	1c10      	adds	r0, r2, #0
    58f8:	4798      	blx	r3
    58fa:	1e03      	subs	r3, r0, #0
    58fc:	d006      	beq.n	590c <tmr_init+0xa0>
	{
		timer_multiplier += 1.0f;
    58fe:	4b19      	ldr	r3, [pc, #100]	; (5964 <tmr_init+0xf8>)
    5900:	21fe      	movs	r1, #254	; 0xfe
    5902:	0589      	lsls	r1, r1, #22
    5904:	6878      	ldr	r0, [r7, #4]
    5906:	4798      	blx	r3
    5908:	1c03      	adds	r3, r0, #0
    590a:	607b      	str	r3, [r7, #4]
	}
	
	return (uint8_t) timer_multiplier;
    590c:	4b12      	ldr	r3, [pc, #72]	; (5958 <tmr_init+0xec>)
    590e:	6878      	ldr	r0, [r7, #4]
    5910:	4798      	blx	r3
    5912:	0003      	movs	r3, r0
    5914:	b2db      	uxtb	r3, r3
}
    5916:	0018      	movs	r0, r3
    5918:	46bd      	mov	sp, r7
    591a:	b002      	add	sp, #8
    591c:	bd80      	pop	{r7, pc}
    591e:	46c0      	nop			; (mov r8, r8)
    5920:	20000ff8 	.word	0x20000ff8
    5924:	00005521 	.word	0x00005521
    5928:	42002c00 	.word	0x42002c00
    592c:	2000102c 	.word	0x2000102c
    5930:	00002ca9 	.word	0x00002ca9
    5934:	0000583d 	.word	0x0000583d
    5938:	000090f5 	.word	0x000090f5
    593c:	00005855 	.word	0x00005855
    5940:	00005675 	.word	0x00005675
    5944:	000055a9 	.word	0x000055a9
    5948:	0000aded 	.word	0x0000aded
    594c:	0000c141 	.word	0x0000c141
    5950:	0000ba5d 	.word	0x0000ba5d
    5954:	49742400 	.word	0x49742400
    5958:	0000b741 	.word	0x0000b741
    595c:	0000bdf1 	.word	0x0000bdf1
    5960:	0000b659 	.word	0x0000b659
    5964:	0000b771 	.word	0x0000b771

00005968 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    5968:	b580      	push	{r7, lr}
    596a:	af00      	add	r7, sp, #0
	SYS_TimerInit();
    596c:	4b05      	ldr	r3, [pc, #20]	; (5984 <SYS_Init+0x1c>)
    596e:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    5970:	4b05      	ldr	r3, [pc, #20]	; (5988 <SYS_Init+0x20>)
    5972:	4798      	blx	r3
#endif
	PHY_Init();
    5974:	4b05      	ldr	r3, [pc, #20]	; (598c <SYS_Init+0x24>)
    5976:	4798      	blx	r3
	NWK_Init();
    5978:	4b05      	ldr	r3, [pc, #20]	; (5990 <SYS_Init+0x28>)
    597a:	4798      	blx	r3
}
    597c:	46c0      	nop			; (mov r8, r8)
    597e:	46bd      	mov	sp, r7
    5980:	bd80      	pop	{r7, pc}
    5982:	46c0      	nop			; (mov r8, r8)
    5984:	00005a5d 	.word	0x00005a5d
    5988:	00004015 	.word	0x00004015
    598c:	00005df1 	.word	0x00005df1
    5990:	000062e1 	.word	0x000062e1

00005994 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    5994:	b580      	push	{r7, lr}
    5996:	af00      	add	r7, sp, #0
	PHY_TaskHandler();
    5998:	4b04      	ldr	r3, [pc, #16]	; (59ac <SYS_TaskHandler+0x18>)
    599a:	4798      	blx	r3
	NWK_TaskHandler();
    599c:	4b04      	ldr	r3, [pc, #16]	; (59b0 <SYS_TaskHandler+0x1c>)
    599e:	4798      	blx	r3
	SYS_TimerTaskHandler();
    59a0:	4b04      	ldr	r3, [pc, #16]	; (59b4 <SYS_TaskHandler+0x20>)
    59a2:	4798      	blx	r3
}
    59a4:	46c0      	nop			; (mov r8, r8)
    59a6:	46bd      	mov	sp, r7
    59a8:	bd80      	pop	{r7, pc}
    59aa:	46c0      	nop			; (mov r8, r8)
    59ac:	000061a9 	.word	0x000061a9
    59b0:	00006435 	.word	0x00006435
    59b4:	00005b85 	.word	0x00005b85

000059b8 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    59b8:	b580      	push	{r7, lr}
    59ba:	b082      	sub	sp, #8
    59bc:	af00      	add	r7, sp, #0
    59be:	6078      	str	r0, [r7, #4]
    59c0:	6039      	str	r1, [r7, #0]
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    59c2:	683a      	ldr	r2, [r7, #0]
    59c4:	687b      	ldr	r3, [r7, #4]
    59c6:	0011      	movs	r1, r2
    59c8:	0018      	movs	r0, r3
    59ca:	4b04      	ldr	r3, [pc, #16]	; (59dc <SYS_EncryptReq+0x24>)
    59cc:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    59ce:	4b04      	ldr	r3, [pc, #16]	; (59e0 <SYS_EncryptReq+0x28>)
    59d0:	4798      	blx	r3
}
    59d2:	46c0      	nop			; (mov r8, r8)
    59d4:	46bd      	mov	sp, r7
    59d6:	b002      	add	sp, #8
    59d8:	bd80      	pop	{r7, pc}
    59da:	46c0      	nop			; (mov r8, r8)
    59dc:	00006055 	.word	0x00006055
    59e0:	00008621 	.word	0x00008621

000059e4 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    59e4:	b580      	push	{r7, lr}
    59e6:	b082      	sub	sp, #8
    59e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    59ea:	f3ef 8310 	mrs	r3, PRIMASK
    59ee:	607b      	str	r3, [r7, #4]
  return(result);
    59f0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    59f2:	425a      	negs	r2, r3
    59f4:	4153      	adcs	r3, r2
    59f6:	b2db      	uxtb	r3, r3
    59f8:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    59fa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    59fc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5a00:	4b03      	ldr	r3, [pc, #12]	; (5a10 <cpu_irq_save+0x2c>)
    5a02:	2200      	movs	r2, #0
    5a04:	701a      	strb	r2, [r3, #0]
	return flags;
    5a06:	683b      	ldr	r3, [r7, #0]
}
    5a08:	0018      	movs	r0, r3
    5a0a:	46bd      	mov	sp, r7
    5a0c:	b002      	add	sp, #8
    5a0e:	bd80      	pop	{r7, pc}
    5a10:	20000010 	.word	0x20000010

00005a14 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    5a14:	b580      	push	{r7, lr}
    5a16:	b082      	sub	sp, #8
    5a18:	af00      	add	r7, sp, #0
    5a1a:	6078      	str	r0, [r7, #4]
	return (flags);
    5a1c:	687b      	ldr	r3, [r7, #4]
    5a1e:	1e5a      	subs	r2, r3, #1
    5a20:	4193      	sbcs	r3, r2
    5a22:	b2db      	uxtb	r3, r3
}
    5a24:	0018      	movs	r0, r3
    5a26:	46bd      	mov	sp, r7
    5a28:	b002      	add	sp, #8
    5a2a:	bd80      	pop	{r7, pc}

00005a2c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    5a2c:	b580      	push	{r7, lr}
    5a2e:	b082      	sub	sp, #8
    5a30:	af00      	add	r7, sp, #0
    5a32:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    5a34:	687b      	ldr	r3, [r7, #4]
    5a36:	0018      	movs	r0, r3
    5a38:	4b06      	ldr	r3, [pc, #24]	; (5a54 <cpu_irq_restore+0x28>)
    5a3a:	4798      	blx	r3
    5a3c:	1e03      	subs	r3, r0, #0
    5a3e:	d005      	beq.n	5a4c <cpu_irq_restore+0x20>
		cpu_irq_enable();
    5a40:	4b05      	ldr	r3, [pc, #20]	; (5a58 <cpu_irq_restore+0x2c>)
    5a42:	2201      	movs	r2, #1
    5a44:	701a      	strb	r2, [r3, #0]
    5a46:	f3bf 8f5f 	dmb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5a4a:	b662      	cpsie	i
}
    5a4c:	46c0      	nop			; (mov r8, r8)
    5a4e:	46bd      	mov	sp, r7
    5a50:	b002      	add	sp, #8
    5a52:	bd80      	pop	{r7, pc}
    5a54:	00005a15 	.word	0x00005a15
    5a58:	20000010 	.word	0x20000010

00005a5c <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    5a5c:	b580      	push	{r7, lr}
    5a5e:	af00      	add	r7, sp, #0
	SysTimerIrqCount = 0;
    5a60:	4b09      	ldr	r3, [pc, #36]	; (5a88 <SYS_TimerInit+0x2c>)
    5a62:	2200      	movs	r2, #0
    5a64:	701a      	strb	r2, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    5a66:	4b09      	ldr	r3, [pc, #36]	; (5a8c <SYS_TimerInit+0x30>)
    5a68:	0018      	movs	r0, r3
    5a6a:	4b09      	ldr	r3, [pc, #36]	; (5a90 <SYS_TimerInit+0x34>)
    5a6c:	4798      	blx	r3
	common_tc_init();
    5a6e:	4b09      	ldr	r3, [pc, #36]	; (5a94 <SYS_TimerInit+0x38>)
    5a70:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    5a72:	4b09      	ldr	r3, [pc, #36]	; (5a98 <SYS_TimerInit+0x3c>)
    5a74:	0018      	movs	r0, r3
    5a76:	4b09      	ldr	r3, [pc, #36]	; (5a9c <SYS_TimerInit+0x40>)
    5a78:	4798      	blx	r3
	timers = NULL;
    5a7a:	4b09      	ldr	r3, [pc, #36]	; (5aa0 <SYS_TimerInit+0x44>)
    5a7c:	2200      	movs	r2, #0
    5a7e:	601a      	str	r2, [r3, #0]
}
    5a80:	46c0      	nop			; (mov r8, r8)
    5a82:	46bd      	mov	sp, r7
    5a84:	bd80      	pop	{r7, pc}
    5a86:	46c0      	nop			; (mov r8, r8)
    5a88:	20001048 	.word	0x20001048
    5a8c:	00005ced 	.word	0x00005ced
    5a90:	0000b4d5 	.word	0x0000b4d5
    5a94:	0000b451 	.word	0x0000b451
    5a98:	00002710 	.word	0x00002710
    5a9c:	0000b3e5 	.word	0x0000b3e5
    5aa0:	200002bc 	.word	0x200002bc

00005aa4 <SYS_TimerStart>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    5aa4:	b580      	push	{r7, lr}
    5aa6:	b082      	sub	sp, #8
    5aa8:	af00      	add	r7, sp, #0
    5aaa:	6078      	str	r0, [r7, #4]
	if (!SYS_TimerStarted(timer)) {
    5aac:	687b      	ldr	r3, [r7, #4]
    5aae:	0018      	movs	r0, r3
    5ab0:	4b08      	ldr	r3, [pc, #32]	; (5ad4 <SYS_TimerStart+0x30>)
    5ab2:	4798      	blx	r3
    5ab4:	0003      	movs	r3, r0
    5ab6:	001a      	movs	r2, r3
    5ab8:	2301      	movs	r3, #1
    5aba:	4053      	eors	r3, r2
    5abc:	b2db      	uxtb	r3, r3
    5abe:	2b00      	cmp	r3, #0
    5ac0:	d003      	beq.n	5aca <SYS_TimerStart+0x26>
		placeTimer(timer);
    5ac2:	687b      	ldr	r3, [r7, #4]
    5ac4:	0018      	movs	r0, r3
    5ac6:	4b04      	ldr	r3, [pc, #16]	; (5ad8 <SYS_TimerStart+0x34>)
    5ac8:	4798      	blx	r3
	}
}
    5aca:	46c0      	nop			; (mov r8, r8)
    5acc:	46bd      	mov	sp, r7
    5ace:	b002      	add	sp, #8
    5ad0:	bd80      	pop	{r7, pc}
    5ad2:	46c0      	nop			; (mov r8, r8)
    5ad4:	00005b4d 	.word	0x00005b4d
    5ad8:	00005c4d 	.word	0x00005c4d

00005adc <SYS_TimerStop>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    5adc:	b580      	push	{r7, lr}
    5ade:	b084      	sub	sp, #16
    5ae0:	af00      	add	r7, sp, #0
    5ae2:	6078      	str	r0, [r7, #4]
	SYS_Timer_t *prev = NULL;
    5ae4:	2300      	movs	r3, #0
    5ae6:	60fb      	str	r3, [r7, #12]

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    5ae8:	4b17      	ldr	r3, [pc, #92]	; (5b48 <SYS_TimerStop+0x6c>)
    5aea:	681b      	ldr	r3, [r3, #0]
    5aec:	60bb      	str	r3, [r7, #8]
    5aee:	e022      	b.n	5b36 <SYS_TimerStop+0x5a>
		if (t == timer) {
    5af0:	68ba      	ldr	r2, [r7, #8]
    5af2:	687b      	ldr	r3, [r7, #4]
    5af4:	429a      	cmp	r2, r3
    5af6:	d119      	bne.n	5b2c <SYS_TimerStop+0x50>
			if (prev) {
    5af8:	68fb      	ldr	r3, [r7, #12]
    5afa:	2b00      	cmp	r3, #0
    5afc:	d004      	beq.n	5b08 <SYS_TimerStop+0x2c>
				prev->next = t->next;
    5afe:	68bb      	ldr	r3, [r7, #8]
    5b00:	681a      	ldr	r2, [r3, #0]
    5b02:	68fb      	ldr	r3, [r7, #12]
    5b04:	601a      	str	r2, [r3, #0]
    5b06:	e003      	b.n	5b10 <SYS_TimerStop+0x34>
			} else {
				timers = t->next;
    5b08:	68bb      	ldr	r3, [r7, #8]
    5b0a:	681a      	ldr	r2, [r3, #0]
    5b0c:	4b0e      	ldr	r3, [pc, #56]	; (5b48 <SYS_TimerStop+0x6c>)
    5b0e:	601a      	str	r2, [r3, #0]
			}

			if (t->next) {
    5b10:	68bb      	ldr	r3, [r7, #8]
    5b12:	681b      	ldr	r3, [r3, #0]
    5b14:	2b00      	cmp	r3, #0
    5b16:	d012      	beq.n	5b3e <SYS_TimerStop+0x62>
				t->next->timeout += timer->timeout;
    5b18:	68bb      	ldr	r3, [r7, #8]
    5b1a:	681b      	ldr	r3, [r3, #0]
    5b1c:	68ba      	ldr	r2, [r7, #8]
    5b1e:	6812      	ldr	r2, [r2, #0]
    5b20:	6851      	ldr	r1, [r2, #4]
    5b22:	687a      	ldr	r2, [r7, #4]
    5b24:	6852      	ldr	r2, [r2, #4]
    5b26:	188a      	adds	r2, r1, r2
    5b28:	605a      	str	r2, [r3, #4]
			}

			break;
    5b2a:	e008      	b.n	5b3e <SYS_TimerStop+0x62>
		}

		prev = t;
    5b2c:	68bb      	ldr	r3, [r7, #8]
    5b2e:	60fb      	str	r3, [r7, #12]
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    5b30:	68bb      	ldr	r3, [r7, #8]
    5b32:	681b      	ldr	r3, [r3, #0]
    5b34:	60bb      	str	r3, [r7, #8]
    5b36:	68bb      	ldr	r3, [r7, #8]
    5b38:	2b00      	cmp	r3, #0
    5b3a:	d1d9      	bne.n	5af0 <SYS_TimerStop+0x14>
			break;
		}

		prev = t;
	}
}
    5b3c:	e000      	b.n	5b40 <SYS_TimerStop+0x64>

			if (t->next) {
				t->next->timeout += timer->timeout;
			}

			break;
    5b3e:	46c0      	nop			; (mov r8, r8)
		}

		prev = t;
	}
}
    5b40:	46c0      	nop			; (mov r8, r8)
    5b42:	46bd      	mov	sp, r7
    5b44:	b004      	add	sp, #16
    5b46:	bd80      	pop	{r7, pc}
    5b48:	200002bc 	.word	0x200002bc

00005b4c <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
    5b4c:	b580      	push	{r7, lr}
    5b4e:	b084      	sub	sp, #16
    5b50:	af00      	add	r7, sp, #0
    5b52:	6078      	str	r0, [r7, #4]
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    5b54:	4b0a      	ldr	r3, [pc, #40]	; (5b80 <SYS_TimerStarted+0x34>)
    5b56:	681b      	ldr	r3, [r3, #0]
    5b58:	60fb      	str	r3, [r7, #12]
    5b5a:	e008      	b.n	5b6e <SYS_TimerStarted+0x22>
		if (t == timer) {
    5b5c:	68fa      	ldr	r2, [r7, #12]
    5b5e:	687b      	ldr	r3, [r7, #4]
    5b60:	429a      	cmp	r2, r3
    5b62:	d101      	bne.n	5b68 <SYS_TimerStarted+0x1c>
			return true;
    5b64:	2301      	movs	r3, #1
    5b66:	e006      	b.n	5b76 <SYS_TimerStarted+0x2a>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    5b68:	68fb      	ldr	r3, [r7, #12]
    5b6a:	681b      	ldr	r3, [r3, #0]
    5b6c:	60fb      	str	r3, [r7, #12]
    5b6e:	68fb      	ldr	r3, [r7, #12]
    5b70:	2b00      	cmp	r3, #0
    5b72:	d1f3      	bne.n	5b5c <SYS_TimerStarted+0x10>
		if (t == timer) {
			return true;
		}
	}
	return false;
    5b74:	2300      	movs	r3, #0
}
    5b76:	0018      	movs	r0, r3
    5b78:	46bd      	mov	sp, r7
    5b7a:	b004      	add	sp, #16
    5b7c:	bd80      	pop	{r7, pc}
    5b7e:	46c0      	nop			; (mov r8, r8)
    5b80:	200002bc 	.word	0x200002bc

00005b84 <SYS_TimerTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    5b84:	b580      	push	{r7, lr}
    5b86:	b084      	sub	sp, #16
    5b88:	af00      	add	r7, sp, #0
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    5b8a:	4b2b      	ldr	r3, [pc, #172]	; (5c38 <SYS_TimerTaskHandler+0xb4>)
    5b8c:	781b      	ldrb	r3, [r3, #0]
    5b8e:	b2db      	uxtb	r3, r3
    5b90:	2b00      	cmp	r3, #0
    5b92:	d04c      	beq.n	5c2e <SYS_TimerTaskHandler+0xaa>
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
    5b94:	4b29      	ldr	r3, [pc, #164]	; (5c3c <SYS_TimerTaskHandler+0xb8>)
    5b96:	4798      	blx	r3
    5b98:	0003      	movs	r3, r0
    5b9a:	60bb      	str	r3, [r7, #8]
	cnt = SysTimerIrqCount;
    5b9c:	1dfb      	adds	r3, r7, #7
    5b9e:	4a26      	ldr	r2, [pc, #152]	; (5c38 <SYS_TimerTaskHandler+0xb4>)
    5ba0:	7812      	ldrb	r2, [r2, #0]
    5ba2:	701a      	strb	r2, [r3, #0]
	SysTimerIrqCount = 0;
    5ba4:	4b24      	ldr	r3, [pc, #144]	; (5c38 <SYS_TimerTaskHandler+0xb4>)
    5ba6:	2200      	movs	r2, #0
    5ba8:	701a      	strb	r2, [r3, #0]
	/* Leave the critical section */
	cpu_irq_restore(flags);
    5baa:	68bb      	ldr	r3, [r7, #8]
    5bac:	0018      	movs	r0, r3
    5bae:	4b24      	ldr	r3, [pc, #144]	; (5c40 <SYS_TimerTaskHandler+0xbc>)
    5bb0:	4798      	blx	r3

	elapsed = cnt * SYS_TIMER_INTERVAL;
    5bb2:	1dfb      	adds	r3, r7, #7
    5bb4:	781a      	ldrb	r2, [r3, #0]
    5bb6:	0013      	movs	r3, r2
    5bb8:	009b      	lsls	r3, r3, #2
    5bba:	189b      	adds	r3, r3, r2
    5bbc:	005b      	lsls	r3, r3, #1
    5bbe:	60fb      	str	r3, [r7, #12]

	while (timers && (timers->timeout <= elapsed)) {
    5bc0:	e01e      	b.n	5c00 <SYS_TimerTaskHandler+0x7c>
		SYS_Timer_t *timer = timers;
    5bc2:	4b20      	ldr	r3, [pc, #128]	; (5c44 <SYS_TimerTaskHandler+0xc0>)
    5bc4:	681b      	ldr	r3, [r3, #0]
    5bc6:	603b      	str	r3, [r7, #0]

		elapsed -= timers->timeout;
    5bc8:	4b1e      	ldr	r3, [pc, #120]	; (5c44 <SYS_TimerTaskHandler+0xc0>)
    5bca:	681b      	ldr	r3, [r3, #0]
    5bcc:	685b      	ldr	r3, [r3, #4]
    5bce:	68fa      	ldr	r2, [r7, #12]
    5bd0:	1ad3      	subs	r3, r2, r3
    5bd2:	60fb      	str	r3, [r7, #12]
		timers = timers->next;
    5bd4:	4b1b      	ldr	r3, [pc, #108]	; (5c44 <SYS_TimerTaskHandler+0xc0>)
    5bd6:	681b      	ldr	r3, [r3, #0]
    5bd8:	681a      	ldr	r2, [r3, #0]
    5bda:	4b1a      	ldr	r3, [pc, #104]	; (5c44 <SYS_TimerTaskHandler+0xc0>)
    5bdc:	601a      	str	r2, [r3, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    5bde:	683b      	ldr	r3, [r7, #0]
    5be0:	7b1b      	ldrb	r3, [r3, #12]
    5be2:	2b01      	cmp	r3, #1
    5be4:	d103      	bne.n	5bee <SYS_TimerTaskHandler+0x6a>
			placeTimer(timer);
    5be6:	683b      	ldr	r3, [r7, #0]
    5be8:	0018      	movs	r0, r3
    5bea:	4b17      	ldr	r3, [pc, #92]	; (5c48 <SYS_TimerTaskHandler+0xc4>)
    5bec:	4798      	blx	r3
		}

		if (timer->handler) {
    5bee:	683b      	ldr	r3, [r7, #0]
    5bf0:	691b      	ldr	r3, [r3, #16]
    5bf2:	2b00      	cmp	r3, #0
    5bf4:	d004      	beq.n	5c00 <SYS_TimerTaskHandler+0x7c>
			timer->handler(timer);
    5bf6:	683b      	ldr	r3, [r7, #0]
    5bf8:	691b      	ldr	r3, [r3, #16]
    5bfa:	683a      	ldr	r2, [r7, #0]
    5bfc:	0010      	movs	r0, r2
    5bfe:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    5c00:	4b10      	ldr	r3, [pc, #64]	; (5c44 <SYS_TimerTaskHandler+0xc0>)
    5c02:	681b      	ldr	r3, [r3, #0]
    5c04:	2b00      	cmp	r3, #0
    5c06:	d005      	beq.n	5c14 <SYS_TimerTaskHandler+0x90>
    5c08:	4b0e      	ldr	r3, [pc, #56]	; (5c44 <SYS_TimerTaskHandler+0xc0>)
    5c0a:	681b      	ldr	r3, [r3, #0]
    5c0c:	685a      	ldr	r2, [r3, #4]
    5c0e:	68fb      	ldr	r3, [r7, #12]
    5c10:	429a      	cmp	r2, r3
    5c12:	d9d6      	bls.n	5bc2 <SYS_TimerTaskHandler+0x3e>
		if (timer->handler) {
			timer->handler(timer);
		}
	}

	if (timers) {
    5c14:	4b0b      	ldr	r3, [pc, #44]	; (5c44 <SYS_TimerTaskHandler+0xc0>)
    5c16:	681b      	ldr	r3, [r3, #0]
    5c18:	2b00      	cmp	r3, #0
    5c1a:	d009      	beq.n	5c30 <SYS_TimerTaskHandler+0xac>
		timers->timeout -= elapsed;
    5c1c:	4b09      	ldr	r3, [pc, #36]	; (5c44 <SYS_TimerTaskHandler+0xc0>)
    5c1e:	681b      	ldr	r3, [r3, #0]
    5c20:	4a08      	ldr	r2, [pc, #32]	; (5c44 <SYS_TimerTaskHandler+0xc0>)
    5c22:	6812      	ldr	r2, [r2, #0]
    5c24:	6851      	ldr	r1, [r2, #4]
    5c26:	68fa      	ldr	r2, [r7, #12]
    5c28:	1a8a      	subs	r2, r1, r2
    5c2a:	605a      	str	r2, [r3, #4]
    5c2c:	e000      	b.n	5c30 <SYS_TimerTaskHandler+0xac>
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
		return;
    5c2e:	46c0      	nop			; (mov r8, r8)
	}

	if (timers) {
		timers->timeout -= elapsed;
	}
}
    5c30:	46bd      	mov	sp, r7
    5c32:	b004      	add	sp, #16
    5c34:	bd80      	pop	{r7, pc}
    5c36:	46c0      	nop			; (mov r8, r8)
    5c38:	20001048 	.word	0x20001048
    5c3c:	000059e5 	.word	0x000059e5
    5c40:	00005a2d 	.word	0x00005a2d
    5c44:	200002bc 	.word	0x200002bc
    5c48:	00005c4d 	.word	0x00005c4d

00005c4c <placeTimer>:

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    5c4c:	b580      	push	{r7, lr}
    5c4e:	b086      	sub	sp, #24
    5c50:	af00      	add	r7, sp, #0
    5c52:	6078      	str	r0, [r7, #4]
	if (timers) {
    5c54:	4b24      	ldr	r3, [pc, #144]	; (5ce8 <placeTimer+0x9c>)
    5c56:	681b      	ldr	r3, [r3, #0]
    5c58:	2b00      	cmp	r3, #0
    5c5a:	d037      	beq.n	5ccc <placeTimer+0x80>
		SYS_Timer_t *prev = NULL;
    5c5c:	2300      	movs	r3, #0
    5c5e:	617b      	str	r3, [r7, #20]
		uint32_t timeout = timer->interval;
    5c60:	687b      	ldr	r3, [r7, #4]
    5c62:	689b      	ldr	r3, [r3, #8]
    5c64:	613b      	str	r3, [r7, #16]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    5c66:	4b20      	ldr	r3, [pc, #128]	; (5ce8 <placeTimer+0x9c>)
    5c68:	681b      	ldr	r3, [r3, #0]
    5c6a:	60fb      	str	r3, [r7, #12]
    5c6c:	e015      	b.n	5c9a <placeTimer+0x4e>
			if (timeout < t->timeout) {
    5c6e:	68fb      	ldr	r3, [r7, #12]
    5c70:	685a      	ldr	r2, [r3, #4]
    5c72:	693b      	ldr	r3, [r7, #16]
    5c74:	429a      	cmp	r2, r3
    5c76:	d906      	bls.n	5c86 <placeTimer+0x3a>
				t->timeout -= timeout;
    5c78:	68fb      	ldr	r3, [r7, #12]
    5c7a:	685a      	ldr	r2, [r3, #4]
    5c7c:	693b      	ldr	r3, [r7, #16]
    5c7e:	1ad2      	subs	r2, r2, r3
    5c80:	68fb      	ldr	r3, [r7, #12]
    5c82:	605a      	str	r2, [r3, #4]
				break;
    5c84:	e00c      	b.n	5ca0 <placeTimer+0x54>
			} else {
				timeout -= t->timeout;
    5c86:	68fb      	ldr	r3, [r7, #12]
    5c88:	685b      	ldr	r3, [r3, #4]
    5c8a:	693a      	ldr	r2, [r7, #16]
    5c8c:	1ad3      	subs	r3, r2, r3
    5c8e:	613b      	str	r3, [r7, #16]
			}

			prev = t;
    5c90:	68fb      	ldr	r3, [r7, #12]
    5c92:	617b      	str	r3, [r7, #20]
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    5c94:	68fb      	ldr	r3, [r7, #12]
    5c96:	681b      	ldr	r3, [r3, #0]
    5c98:	60fb      	str	r3, [r7, #12]
    5c9a:	68fb      	ldr	r3, [r7, #12]
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	d1e6      	bne.n	5c6e <placeTimer+0x22>
			}

			prev = t;
		}

		timer->timeout = timeout;
    5ca0:	687b      	ldr	r3, [r7, #4]
    5ca2:	693a      	ldr	r2, [r7, #16]
    5ca4:	605a      	str	r2, [r3, #4]

		if (prev) {
    5ca6:	697b      	ldr	r3, [r7, #20]
    5ca8:	2b00      	cmp	r3, #0
    5caa:	d007      	beq.n	5cbc <placeTimer+0x70>
			timer->next = prev->next;
    5cac:	697b      	ldr	r3, [r7, #20]
    5cae:	681a      	ldr	r2, [r3, #0]
    5cb0:	687b      	ldr	r3, [r7, #4]
    5cb2:	601a      	str	r2, [r3, #0]
			prev->next = timer;
    5cb4:	697b      	ldr	r3, [r7, #20]
    5cb6:	687a      	ldr	r2, [r7, #4]
    5cb8:	601a      	str	r2, [r3, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    5cba:	e011      	b.n	5ce0 <placeTimer+0x94>

		if (prev) {
			timer->next = prev->next;
			prev->next = timer;
		} else {
			timer->next = timers;
    5cbc:	4b0a      	ldr	r3, [pc, #40]	; (5ce8 <placeTimer+0x9c>)
    5cbe:	681a      	ldr	r2, [r3, #0]
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	601a      	str	r2, [r3, #0]
			timers = timer;
    5cc4:	4b08      	ldr	r3, [pc, #32]	; (5ce8 <placeTimer+0x9c>)
    5cc6:	687a      	ldr	r2, [r7, #4]
    5cc8:	601a      	str	r2, [r3, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    5cca:	e009      	b.n	5ce0 <placeTimer+0x94>
		} else {
			timer->next = timers;
			timers = timer;
		}
	} else {
		timer->next = NULL;
    5ccc:	687b      	ldr	r3, [r7, #4]
    5cce:	2200      	movs	r2, #0
    5cd0:	601a      	str	r2, [r3, #0]
		timer->timeout = timer->interval;
    5cd2:	687b      	ldr	r3, [r7, #4]
    5cd4:	689a      	ldr	r2, [r3, #8]
    5cd6:	687b      	ldr	r3, [r7, #4]
    5cd8:	605a      	str	r2, [r3, #4]
		timers = timer;
    5cda:	4b03      	ldr	r3, [pc, #12]	; (5ce8 <placeTimer+0x9c>)
    5cdc:	687a      	ldr	r2, [r7, #4]
    5cde:	601a      	str	r2, [r3, #0]
	}
}
    5ce0:	46c0      	nop			; (mov r8, r8)
    5ce2:	46bd      	mov	sp, r7
    5ce4:	b006      	add	sp, #24
    5ce6:	bd80      	pop	{r7, pc}
    5ce8:	200002bc 	.word	0x200002bc

00005cec <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    5cec:	b580      	push	{r7, lr}
    5cee:	af00      	add	r7, sp, #0
	SysTimerIrqCount++;
    5cf0:	4b06      	ldr	r3, [pc, #24]	; (5d0c <SYS_HwExpiry_Cb+0x20>)
    5cf2:	781b      	ldrb	r3, [r3, #0]
    5cf4:	b2db      	uxtb	r3, r3
    5cf6:	3301      	adds	r3, #1
    5cf8:	b2da      	uxtb	r2, r3
    5cfa:	4b04      	ldr	r3, [pc, #16]	; (5d0c <SYS_HwExpiry_Cb+0x20>)
    5cfc:	701a      	strb	r2, [r3, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    5cfe:	4b04      	ldr	r3, [pc, #16]	; (5d10 <SYS_HwExpiry_Cb+0x24>)
    5d00:	0018      	movs	r0, r3
    5d02:	4b04      	ldr	r3, [pc, #16]	; (5d14 <SYS_HwExpiry_Cb+0x28>)
    5d04:	4798      	blx	r3
}
    5d06:	46c0      	nop			; (mov r8, r8)
    5d08:	46bd      	mov	sp, r7
    5d0a:	bd80      	pop	{r7, pc}
    5d0c:	20001048 	.word	0x20001048
    5d10:	00002710 	.word	0x00002710
    5d14:	0000b3e5 	.word	0x0000b3e5

00005d18 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5d18:	b580      	push	{r7, lr}
    5d1a:	b084      	sub	sp, #16
    5d1c:	af00      	add	r7, sp, #0
    5d1e:	0002      	movs	r2, r0
    5d20:	1dfb      	adds	r3, r7, #7
    5d22:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5d24:	230f      	movs	r3, #15
    5d26:	18fb      	adds	r3, r7, r3
    5d28:	1dfa      	adds	r2, r7, #7
    5d2a:	7812      	ldrb	r2, [r2, #0]
    5d2c:	09d2      	lsrs	r2, r2, #7
    5d2e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5d30:	230e      	movs	r3, #14
    5d32:	18fb      	adds	r3, r7, r3
    5d34:	1dfa      	adds	r2, r7, #7
    5d36:	7812      	ldrb	r2, [r2, #0]
    5d38:	0952      	lsrs	r2, r2, #5
    5d3a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5d3c:	4b0d      	ldr	r3, [pc, #52]	; (5d74 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5d3e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    5d40:	230f      	movs	r3, #15
    5d42:	18fb      	adds	r3, r7, r3
    5d44:	781b      	ldrb	r3, [r3, #0]
    5d46:	2b00      	cmp	r3, #0
    5d48:	d10f      	bne.n	5d6a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5d4a:	230f      	movs	r3, #15
    5d4c:	18fb      	adds	r3, r7, r3
    5d4e:	781b      	ldrb	r3, [r3, #0]
    5d50:	009b      	lsls	r3, r3, #2
    5d52:	2210      	movs	r2, #16
    5d54:	4694      	mov	ip, r2
    5d56:	44bc      	add	ip, r7
    5d58:	4463      	add	r3, ip
    5d5a:	3b08      	subs	r3, #8
    5d5c:	681a      	ldr	r2, [r3, #0]
    5d5e:	230e      	movs	r3, #14
    5d60:	18fb      	adds	r3, r7, r3
    5d62:	781b      	ldrb	r3, [r3, #0]
    5d64:	01db      	lsls	r3, r3, #7
    5d66:	18d3      	adds	r3, r2, r3
    5d68:	e000      	b.n	5d6c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    5d6a:	2300      	movs	r3, #0
	}
}
    5d6c:	0018      	movs	r0, r3
    5d6e:	46bd      	mov	sp, r7
    5d70:	b004      	add	sp, #16
    5d72:	bd80      	pop	{r7, pc}
    5d74:	41004400 	.word	0x41004400

00005d78 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5d78:	b580      	push	{r7, lr}
    5d7a:	b082      	sub	sp, #8
    5d7c:	af00      	add	r7, sp, #0
    5d7e:	0002      	movs	r2, r0
    5d80:	1dfb      	adds	r3, r7, #7
    5d82:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5d84:	1dfb      	adds	r3, r7, #7
    5d86:	781b      	ldrb	r3, [r3, #0]
    5d88:	0018      	movs	r0, r3
    5d8a:	4b03      	ldr	r3, [pc, #12]	; (5d98 <port_get_group_from_gpio_pin+0x20>)
    5d8c:	4798      	blx	r3
    5d8e:	0003      	movs	r3, r0
}
    5d90:	0018      	movs	r0, r3
    5d92:	46bd      	mov	sp, r7
    5d94:	b002      	add	sp, #8
    5d96:	bd80      	pop	{r7, pc}
    5d98:	00005d19 	.word	0x00005d19

00005d9c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    5d9c:	b580      	push	{r7, lr}
    5d9e:	b084      	sub	sp, #16
    5da0:	af00      	add	r7, sp, #0
    5da2:	0002      	movs	r2, r0
    5da4:	1dfb      	adds	r3, r7, #7
    5da6:	701a      	strb	r2, [r3, #0]
    5da8:	1dbb      	adds	r3, r7, #6
    5daa:	1c0a      	adds	r2, r1, #0
    5dac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    5dae:	1dfb      	adds	r3, r7, #7
    5db0:	781b      	ldrb	r3, [r3, #0]
    5db2:	0018      	movs	r0, r3
    5db4:	4b0d      	ldr	r3, [pc, #52]	; (5dec <port_pin_set_output_level+0x50>)
    5db6:	4798      	blx	r3
    5db8:	0003      	movs	r3, r0
    5dba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5dbc:	1dfb      	adds	r3, r7, #7
    5dbe:	781b      	ldrb	r3, [r3, #0]
    5dc0:	221f      	movs	r2, #31
    5dc2:	4013      	ands	r3, r2
    5dc4:	2201      	movs	r2, #1
    5dc6:	409a      	lsls	r2, r3
    5dc8:	0013      	movs	r3, r2
    5dca:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    5dcc:	1dbb      	adds	r3, r7, #6
    5dce:	781b      	ldrb	r3, [r3, #0]
    5dd0:	2b00      	cmp	r3, #0
    5dd2:	d003      	beq.n	5ddc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    5dd4:	68fb      	ldr	r3, [r7, #12]
    5dd6:	68ba      	ldr	r2, [r7, #8]
    5dd8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    5dda:	e002      	b.n	5de2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5ddc:	68fb      	ldr	r3, [r7, #12]
    5dde:	68ba      	ldr	r2, [r7, #8]
    5de0:	615a      	str	r2, [r3, #20]
	}
}
    5de2:	46c0      	nop			; (mov r8, r8)
    5de4:	46bd      	mov	sp, r7
    5de6:	b004      	add	sp, #16
    5de8:	bd80      	pop	{r7, pc}
    5dea:	46c0      	nop			; (mov r8, r8)
    5dec:	00005d79 	.word	0x00005d79

00005df0 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{	
    5df0:	b580      	push	{r7, lr}
    5df2:	b082      	sub	sp, #8
    5df4:	af00      	add	r7, sp, #0
	trx_spi_init();
    5df6:	4b19      	ldr	r3, [pc, #100]	; (5e5c <PHY_Init+0x6c>)
    5df8:	4798      	blx	r3
	PhyReset();
    5dfa:	4b19      	ldr	r3, [pc, #100]	; (5e60 <PHY_Init+0x70>)
    5dfc:	4798      	blx	r3
	phyRxState = false;
    5dfe:	4b19      	ldr	r3, [pc, #100]	; (5e64 <PHY_Init+0x74>)
    5e00:	2200      	movs	r2, #0
    5e02:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    5e04:	4b18      	ldr	r3, [pc, #96]	; (5e68 <PHY_Init+0x78>)
    5e06:	2201      	movs	r2, #1
    5e08:	701a      	strb	r2, [r3, #0]

 
	do {
		PhyReset();
    5e0a:	4b15      	ldr	r3, [pc, #84]	; (5e60 <PHY_Init+0x70>)
    5e0c:	4798      	blx	r3
		phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);		
    5e0e:	2108      	movs	r1, #8
    5e10:	2002      	movs	r0, #2
    5e12:	4b16      	ldr	r3, [pc, #88]	; (5e6c <PHY_Init+0x7c>)
    5e14:	4798      	blx	r3
		int8_t PN=phyReadRegister(PART_NUM_REG);
    5e16:	201c      	movs	r0, #28
    5e18:	4b15      	ldr	r3, [pc, #84]	; (5e70 <PHY_Init+0x80>)
    5e1a:	4798      	blx	r3
    5e1c:	0003      	movs	r3, r0
    5e1e:	001a      	movs	r2, r3
    5e20:	1dfb      	adds	r3, r7, #7
    5e22:	701a      	strb	r2, [r3, #0]
		
		int8_t Status=phyReadRegister(TRX_STATUS_REG);	
    5e24:	2001      	movs	r0, #1
    5e26:	4b12      	ldr	r3, [pc, #72]	; (5e70 <PHY_Init+0x80>)
    5e28:	4798      	blx	r3
    5e2a:	0003      	movs	r3, r0
    5e2c:	001a      	movs	r2, r3
    5e2e:	1dbb      	adds	r3, r7, #6
    5e30:	701a      	strb	r2, [r3, #0]
	}
	while (TRX_STATUS_TRX_OFF !=(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    5e32:	2001      	movs	r0, #1
    5e34:	4b0e      	ldr	r3, [pc, #56]	; (5e70 <PHY_Init+0x80>)
    5e36:	4798      	blx	r3
    5e38:	0003      	movs	r3, r0
    5e3a:	001a      	movs	r2, r3
    5e3c:	231f      	movs	r3, #31
    5e3e:	4013      	ands	r3, r2
    5e40:	2b08      	cmp	r3, #8
    5e42:	d1e2      	bne.n	5e0a <PHY_Init+0x1a>

	phyWriteRegister(TRX_CTRL_1_REG,
    5e44:	212e      	movs	r1, #46	; 0x2e
    5e46:	2004      	movs	r0, #4
    5e48:	4b08      	ldr	r3, [pc, #32]	; (5e6c <PHY_Init+0x7c>)
    5e4a:	4798      	blx	r3
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
    5e4c:	21a0      	movs	r1, #160	; 0xa0
    5e4e:	200c      	movs	r0, #12
    5e50:	4b06      	ldr	r3, [pc, #24]	; (5e6c <PHY_Init+0x7c>)
    5e52:	4798      	blx	r3
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    5e54:	46c0      	nop			; (mov r8, r8)
    5e56:	46bd      	mov	sp, r7
    5e58:	b002      	add	sp, #8
    5e5a:	bd80      	pop	{r7, pc}
    5e5c:	000047a5 	.word	0x000047a5
    5e60:	000048d9 	.word	0x000048d9
    5e64:	20000344 	.word	0x20000344
    5e68:	200002c0 	.word	0x200002c0
    5e6c:	00006091 	.word	0x00006091
    5e70:	000060c1 	.word	0x000060c1

00005e74 <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    5e74:	b580      	push	{r7, lr}
    5e76:	b082      	sub	sp, #8
    5e78:	af00      	add	r7, sp, #0
    5e7a:	0002      	movs	r2, r0
    5e7c:	1dfb      	adds	r3, r7, #7
    5e7e:	701a      	strb	r2, [r3, #0]
	phyRxState = rx;
    5e80:	4b04      	ldr	r3, [pc, #16]	; (5e94 <PHY_SetRxState+0x20>)
    5e82:	1dfa      	adds	r2, r7, #7
    5e84:	7812      	ldrb	r2, [r2, #0]
    5e86:	701a      	strb	r2, [r3, #0]
	phySetRxState();
    5e88:	4b03      	ldr	r3, [pc, #12]	; (5e98 <PHY_SetRxState+0x24>)
    5e8a:	4798      	blx	r3
}
    5e8c:	46c0      	nop			; (mov r8, r8)
    5e8e:	46bd      	mov	sp, r7
    5e90:	b002      	add	sp, #8
    5e92:	bd80      	pop	{r7, pc}
    5e94:	20000344 	.word	0x20000344
    5e98:	00006121 	.word	0x00006121

00005e9c <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    5e9c:	b580      	push	{r7, lr}
    5e9e:	b084      	sub	sp, #16
    5ea0:	af00      	add	r7, sp, #0
    5ea2:	0002      	movs	r2, r0
    5ea4:	1dfb      	adds	r3, r7, #7
    5ea6:	701a      	strb	r2, [r3, #0]
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    5ea8:	2008      	movs	r0, #8
    5eaa:	4b0c      	ldr	r3, [pc, #48]	; (5edc <PHY_SetChannel+0x40>)
    5eac:	4798      	blx	r3
    5eae:	0003      	movs	r3, r0
    5eb0:	0019      	movs	r1, r3
    5eb2:	230f      	movs	r3, #15
    5eb4:	18fb      	adds	r3, r7, r3
    5eb6:	221f      	movs	r2, #31
    5eb8:	4391      	bics	r1, r2
    5eba:	000a      	movs	r2, r1
    5ebc:	701a      	strb	r2, [r3, #0]
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    5ebe:	230f      	movs	r3, #15
    5ec0:	18fa      	adds	r2, r7, r3
    5ec2:	1dfb      	adds	r3, r7, #7
    5ec4:	7812      	ldrb	r2, [r2, #0]
    5ec6:	781b      	ldrb	r3, [r3, #0]
    5ec8:	4313      	orrs	r3, r2
    5eca:	b2db      	uxtb	r3, r3
    5ecc:	0019      	movs	r1, r3
    5ece:	2008      	movs	r0, #8
    5ed0:	4b03      	ldr	r3, [pc, #12]	; (5ee0 <PHY_SetChannel+0x44>)
    5ed2:	4798      	blx	r3
}
    5ed4:	46c0      	nop			; (mov r8, r8)
    5ed6:	46bd      	mov	sp, r7
    5ed8:	b004      	add	sp, #16
    5eda:	bd80      	pop	{r7, pc}
    5edc:	000060c1 	.word	0x000060c1
    5ee0:	00006091 	.word	0x00006091

00005ee4 <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    5ee4:	b580      	push	{r7, lr}
    5ee6:	b084      	sub	sp, #16
    5ee8:	af00      	add	r7, sp, #0
    5eea:	0002      	movs	r2, r0
    5eec:	1dbb      	adds	r3, r7, #6
    5eee:	801a      	strh	r2, [r3, #0]
	uint8_t *d = (uint8_t *)&panId;
    5ef0:	1dbb      	adds	r3, r7, #6
    5ef2:	60fb      	str	r3, [r7, #12]

	phyWriteRegister(PAN_ID_0_REG, d[0]);
    5ef4:	68fb      	ldr	r3, [r7, #12]
    5ef6:	781b      	ldrb	r3, [r3, #0]
    5ef8:	0019      	movs	r1, r3
    5efa:	2022      	movs	r0, #34	; 0x22
    5efc:	4b06      	ldr	r3, [pc, #24]	; (5f18 <PHY_SetPanId+0x34>)
    5efe:	4798      	blx	r3
	phyWriteRegister(PAN_ID_1_REG, d[1]);
    5f00:	68fb      	ldr	r3, [r7, #12]
    5f02:	3301      	adds	r3, #1
    5f04:	781b      	ldrb	r3, [r3, #0]
    5f06:	0019      	movs	r1, r3
    5f08:	2023      	movs	r0, #35	; 0x23
    5f0a:	4b03      	ldr	r3, [pc, #12]	; (5f18 <PHY_SetPanId+0x34>)
    5f0c:	4798      	blx	r3
}
    5f0e:	46c0      	nop			; (mov r8, r8)
    5f10:	46bd      	mov	sp, r7
    5f12:	b004      	add	sp, #16
    5f14:	bd80      	pop	{r7, pc}
    5f16:	46c0      	nop			; (mov r8, r8)
    5f18:	00006091 	.word	0x00006091

00005f1c <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    5f1c:	b580      	push	{r7, lr}
    5f1e:	b084      	sub	sp, #16
    5f20:	af00      	add	r7, sp, #0
    5f22:	0002      	movs	r2, r0
    5f24:	1dbb      	adds	r3, r7, #6
    5f26:	801a      	strh	r2, [r3, #0]
	uint8_t *d = (uint8_t *)&addr;
    5f28:	1dbb      	adds	r3, r7, #6
    5f2a:	60fb      	str	r3, [r7, #12]

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    5f2c:	68fb      	ldr	r3, [r7, #12]
    5f2e:	781b      	ldrb	r3, [r3, #0]
    5f30:	0019      	movs	r1, r3
    5f32:	2020      	movs	r0, #32
    5f34:	4b0b      	ldr	r3, [pc, #44]	; (5f64 <PHY_SetShortAddr+0x48>)
    5f36:	4798      	blx	r3
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    5f38:	68fb      	ldr	r3, [r7, #12]
    5f3a:	3301      	adds	r3, #1
    5f3c:	781b      	ldrb	r3, [r3, #0]
    5f3e:	0019      	movs	r1, r3
    5f40:	2021      	movs	r0, #33	; 0x21
    5f42:	4b08      	ldr	r3, [pc, #32]	; (5f64 <PHY_SetShortAddr+0x48>)
    5f44:	4798      	blx	r3
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    5f46:	68fb      	ldr	r3, [r7, #12]
    5f48:	781a      	ldrb	r2, [r3, #0]
    5f4a:	68fb      	ldr	r3, [r7, #12]
    5f4c:	3301      	adds	r3, #1
    5f4e:	781b      	ldrb	r3, [r3, #0]
    5f50:	18d3      	adds	r3, r2, r3
    5f52:	b2db      	uxtb	r3, r3
    5f54:	0019      	movs	r1, r3
    5f56:	202d      	movs	r0, #45	; 0x2d
    5f58:	4b02      	ldr	r3, [pc, #8]	; (5f64 <PHY_SetShortAddr+0x48>)
    5f5a:	4798      	blx	r3
}
    5f5c:	46c0      	nop			; (mov r8, r8)
    5f5e:	46bd      	mov	sp, r7
    5f60:	b004      	add	sp, #16
    5f62:	bd80      	pop	{r7, pc}
    5f64:	00006091 	.word	0x00006091

00005f68 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    5f68:	b580      	push	{r7, lr}
    5f6a:	b082      	sub	sp, #8
    5f6c:	af00      	add	r7, sp, #0
    5f6e:	6078      	str	r0, [r7, #4]
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    5f70:	2019      	movs	r0, #25
    5f72:	4b12      	ldr	r3, [pc, #72]	; (5fbc <PHY_DataReq+0x54>)
    5f74:	4798      	blx	r3

	phyReadRegister(IRQ_STATUS_REG);
    5f76:	200f      	movs	r0, #15
    5f78:	4b11      	ldr	r3, [pc, #68]	; (5fc0 <PHY_DataReq+0x58>)
    5f7a:	4798      	blx	r3

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    5f7c:	687b      	ldr	r3, [r7, #4]
    5f7e:	781b      	ldrb	r3, [r3, #0]
    5f80:	3302      	adds	r3, #2
    5f82:	b2da      	uxtb	r2, r3
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	701a      	strb	r2, [r3, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    5f88:	687b      	ldr	r3, [r7, #4]
    5f8a:	781b      	ldrb	r3, [r3, #0]
    5f8c:	3b01      	subs	r3, #1
    5f8e:	b2da      	uxtb	r2, r3
    5f90:	687b      	ldr	r3, [r7, #4]
    5f92:	0011      	movs	r1, r2
    5f94:	0018      	movs	r0, r3
    5f96:	4b0b      	ldr	r3, [pc, #44]	; (5fc4 <PHY_DataReq+0x5c>)
    5f98:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    5f9a:	4b0b      	ldr	r3, [pc, #44]	; (5fc8 <PHY_DataReq+0x60>)
    5f9c:	2203      	movs	r2, #3
    5f9e:	701a      	strb	r2, [r3, #0]

	TRX_SLP_TR_HIGH();
    5fa0:	2101      	movs	r1, #1
    5fa2:	2014      	movs	r0, #20
    5fa4:	4b09      	ldr	r3, [pc, #36]	; (5fcc <PHY_DataReq+0x64>)
    5fa6:	4798      	blx	r3
	TRX_TRIG_DELAY();
    5fa8:	46c0      	nop			; (mov r8, r8)
    5faa:	46c0      	nop			; (mov r8, r8)
	TRX_SLP_TR_LOW();
    5fac:	2100      	movs	r1, #0
    5fae:	2014      	movs	r0, #20
    5fb0:	4b06      	ldr	r3, [pc, #24]	; (5fcc <PHY_DataReq+0x64>)
    5fb2:	4798      	blx	r3
}
    5fb4:	46c0      	nop			; (mov r8, r8)
    5fb6:	46bd      	mov	sp, r7
    5fb8:	b002      	add	sp, #8
    5fba:	bd80      	pop	{r7, pc}
    5fbc:	00006151 	.word	0x00006151
    5fc0:	000060c1 	.word	0x000060c1
    5fc4:	00004d1d 	.word	0x00004d1d
    5fc8:	200002c0 	.word	0x200002c0
    5fcc:	00005d9d 	.word	0x00005d9d

00005fd0 <PHY_RandomReq>:

/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
    5fd0:	b580      	push	{r7, lr}
    5fd2:	b082      	sub	sp, #8
    5fd4:	af00      	add	r7, sp, #0
	uint16_t rnd = 0;
    5fd6:	1dbb      	adds	r3, r7, #6
    5fd8:	2200      	movs	r2, #0
    5fda:	801a      	strh	r2, [r3, #0]
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);
    5fdc:	2006      	movs	r0, #6
    5fde:	4b19      	ldr	r3, [pc, #100]	; (6044 <PHY_RandomReq+0x74>)
    5fe0:	4798      	blx	r3

	for (uint8_t i = 0; i < 16; i += 2) {
    5fe2:	1d7b      	adds	r3, r7, #5
    5fe4:	2200      	movs	r2, #0
    5fe6:	701a      	strb	r2, [r3, #0]
    5fe8:	e01f      	b.n	602a <PHY_RandomReq+0x5a>
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    5fea:	2001      	movs	r0, #1
    5fec:	4b16      	ldr	r3, [pc, #88]	; (6048 <PHY_RandomReq+0x78>)
    5fee:	4798      	blx	r3
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    5ff0:	2006      	movs	r0, #6
    5ff2:	4b16      	ldr	r3, [pc, #88]	; (604c <PHY_RandomReq+0x7c>)
    5ff4:	4798      	blx	r3
    5ff6:	0003      	movs	r3, r0
    5ff8:	095b      	lsrs	r3, r3, #5
    5ffa:	b2da      	uxtb	r2, r3
    5ffc:	1d3b      	adds	r3, r7, #4
    5ffe:	2103      	movs	r1, #3
    6000:	400a      	ands	r2, r1
    6002:	701a      	strb	r2, [r3, #0]
		rnd |= rndValue << i;
    6004:	1d3b      	adds	r3, r7, #4
    6006:	781a      	ldrb	r2, [r3, #0]
    6008:	1d7b      	adds	r3, r7, #5
    600a:	781b      	ldrb	r3, [r3, #0]
    600c:	409a      	lsls	r2, r3
    600e:	0013      	movs	r3, r2
    6010:	b21a      	sxth	r2, r3
    6012:	1dbb      	adds	r3, r7, #6
    6014:	2100      	movs	r1, #0
    6016:	5e5b      	ldrsh	r3, [r3, r1]
    6018:	4313      	orrs	r3, r2
    601a:	b21a      	sxth	r2, r3
    601c:	1dbb      	adds	r3, r7, #6
    601e:	801a      	strh	r2, [r3, #0]
	uint16_t rnd = 0;
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
    6020:	1d7b      	adds	r3, r7, #5
    6022:	1d7a      	adds	r2, r7, #5
    6024:	7812      	ldrb	r2, [r2, #0]
    6026:	3202      	adds	r2, #2
    6028:	701a      	strb	r2, [r3, #0]
    602a:	1d7b      	adds	r3, r7, #5
    602c:	781b      	ldrb	r3, [r3, #0]
    602e:	2b0f      	cmp	r3, #15
    6030:	d9db      	bls.n	5fea <PHY_RandomReq+0x1a>
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
		rnd |= rndValue << i;
	}

	phySetRxState();
    6032:	4b07      	ldr	r3, [pc, #28]	; (6050 <PHY_RandomReq+0x80>)
    6034:	4798      	blx	r3

	return rnd;
    6036:	1dbb      	adds	r3, r7, #6
    6038:	881b      	ldrh	r3, [r3, #0]
}
    603a:	0018      	movs	r0, r3
    603c:	46bd      	mov	sp, r7
    603e:	b002      	add	sp, #8
    6040:	bd80      	pop	{r7, pc}
    6042:	46c0      	nop			; (mov r8, r8)
    6044:	00006151 	.word	0x00006151
    6048:	0000a26d 	.word	0x0000a26d
    604c:	000060c1 	.word	0x000060c1
    6050:	00006121 	.word	0x00006121

00006054 <PHY_EncryptReq>:

/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    6054:	b580      	push	{r7, lr}
    6056:	b082      	sub	sp, #8
    6058:	af00      	add	r7, sp, #0
    605a:	6078      	str	r0, [r7, #4]
    605c:	6039      	str	r1, [r7, #0]
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    605e:	683b      	ldr	r3, [r7, #0]
    6060:	2200      	movs	r2, #0
    6062:	2100      	movs	r1, #0
    6064:	0018      	movs	r0, r3
    6066:	4b07      	ldr	r3, [pc, #28]	; (6084 <PHY_EncryptReq+0x30>)
    6068:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
    606a:	687b      	ldr	r3, [r7, #4]
    606c:	2100      	movs	r1, #0
    606e:	0018      	movs	r0, r3
    6070:	4b05      	ldr	r3, [pc, #20]	; (6088 <PHY_EncryptReq+0x34>)
    6072:	4798      	blx	r3
#else
	sal_aes_exec(text);
#endif
	sal_aes_read(text);
    6074:	687b      	ldr	r3, [r7, #4]
    6076:	0018      	movs	r0, r3
    6078:	4b04      	ldr	r3, [pc, #16]	; (608c <PHY_EncryptReq+0x38>)
    607a:	4798      	blx	r3
}
    607c:	46c0      	nop			; (mov r8, r8)
    607e:	46bd      	mov	sp, r7
    6080:	b002      	add	sp, #8
    6082:	bd80      	pop	{r7, pc}
    6084:	00004021 	.word	0x00004021
    6088:	000041e5 	.word	0x000041e5
    608c:	00004271 	.word	0x00004271

00006090 <phyWriteRegister>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    6090:	b580      	push	{r7, lr}
    6092:	b082      	sub	sp, #8
    6094:	af00      	add	r7, sp, #0
    6096:	0002      	movs	r2, r0
    6098:	1dfb      	adds	r3, r7, #7
    609a:	701a      	strb	r2, [r3, #0]
    609c:	1dbb      	adds	r3, r7, #6
    609e:	1c0a      	adds	r2, r1, #0
    60a0:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    60a2:	1dbb      	adds	r3, r7, #6
    60a4:	781a      	ldrb	r2, [r3, #0]
    60a6:	1dfb      	adds	r3, r7, #7
    60a8:	781b      	ldrb	r3, [r3, #0]
    60aa:	0011      	movs	r1, r2
    60ac:	0018      	movs	r0, r3
    60ae:	4b03      	ldr	r3, [pc, #12]	; (60bc <phyWriteRegister+0x2c>)
    60b0:	4798      	blx	r3
}
    60b2:	46c0      	nop			; (mov r8, r8)
    60b4:	46bd      	mov	sp, r7
    60b6:	b002      	add	sp, #8
    60b8:	bd80      	pop	{r7, pc}
    60ba:	46c0      	nop			; (mov r8, r8)
    60bc:	00004a71 	.word	0x00004a71

000060c0 <phyReadRegister>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    60c0:	b590      	push	{r4, r7, lr}
    60c2:	b085      	sub	sp, #20
    60c4:	af00      	add	r7, sp, #0
    60c6:	0002      	movs	r2, r0
    60c8:	1dfb      	adds	r3, r7, #7
    60ca:	701a      	strb	r2, [r3, #0]
	uint8_t value;

	value = trx_reg_read(reg);
    60cc:	230f      	movs	r3, #15
    60ce:	18fc      	adds	r4, r7, r3
    60d0:	1dfb      	adds	r3, r7, #7
    60d2:	781b      	ldrb	r3, [r3, #0]
    60d4:	0018      	movs	r0, r3
    60d6:	4b05      	ldr	r3, [pc, #20]	; (60ec <phyReadRegister+0x2c>)
    60d8:	4798      	blx	r3
    60da:	0003      	movs	r3, r0
    60dc:	7023      	strb	r3, [r4, #0]

	return value;
    60de:	230f      	movs	r3, #15
    60e0:	18fb      	adds	r3, r7, r3
    60e2:	781b      	ldrb	r3, [r3, #0]
}
    60e4:	0018      	movs	r0, r3
    60e6:	46bd      	mov	sp, r7
    60e8:	b005      	add	sp, #20
    60ea:	bd90      	pop	{r4, r7, pc}
    60ec:	0000491d 	.word	0x0000491d

000060f0 <phyWaitState>:

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
    60f0:	b590      	push	{r4, r7, lr}
    60f2:	b083      	sub	sp, #12
    60f4:	af00      	add	r7, sp, #0
    60f6:	0002      	movs	r2, r0
    60f8:	1dfb      	adds	r3, r7, #7
    60fa:	701a      	strb	r2, [r3, #0]
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    60fc:	46c0      	nop			; (mov r8, r8)
    60fe:	1dfb      	adds	r3, r7, #7
    6100:	781c      	ldrb	r4, [r3, #0]
    6102:	2001      	movs	r0, #1
    6104:	4b05      	ldr	r3, [pc, #20]	; (611c <phyWaitState+0x2c>)
    6106:	4798      	blx	r3
    6108:	0003      	movs	r3, r0
    610a:	001a      	movs	r2, r3
    610c:	231f      	movs	r3, #31
    610e:	4013      	ands	r3, r2
    6110:	429c      	cmp	r4, r3
    6112:	d1f4      	bne.n	60fe <phyWaitState+0xe>
	}
}
    6114:	46c0      	nop			; (mov r8, r8)
    6116:	46bd      	mov	sp, r7
    6118:	b003      	add	sp, #12
    611a:	bd90      	pop	{r4, r7, pc}
    611c:	000060c1 	.word	0x000060c1

00006120 <phySetRxState>:

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    6120:	b580      	push	{r7, lr}
    6122:	af00      	add	r7, sp, #0
	phyTrxSetState(TRX_CMD_TRX_OFF);
    6124:	2008      	movs	r0, #8
    6126:	4b07      	ldr	r3, [pc, #28]	; (6144 <phySetRxState+0x24>)
    6128:	4798      	blx	r3

	phyReadRegister(IRQ_STATUS_REG);
    612a:	200f      	movs	r0, #15
    612c:	4b06      	ldr	r3, [pc, #24]	; (6148 <phySetRxState+0x28>)
    612e:	4798      	blx	r3

	if (phyRxState) {
    6130:	4b06      	ldr	r3, [pc, #24]	; (614c <phySetRxState+0x2c>)
    6132:	781b      	ldrb	r3, [r3, #0]
    6134:	2b00      	cmp	r3, #0
    6136:	d002      	beq.n	613e <phySetRxState+0x1e>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    6138:	2016      	movs	r0, #22
    613a:	4b02      	ldr	r3, [pc, #8]	; (6144 <phySetRxState+0x24>)
    613c:	4798      	blx	r3
	}
}
    613e:	46c0      	nop			; (mov r8, r8)
    6140:	46bd      	mov	sp, r7
    6142:	bd80      	pop	{r7, pc}
    6144:	00006151 	.word	0x00006151
    6148:	000060c1 	.word	0x000060c1
    614c:	20000344 	.word	0x20000344

00006150 <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    6150:	b590      	push	{r4, r7, lr}
    6152:	b083      	sub	sp, #12
    6154:	af00      	add	r7, sp, #0
    6156:	0002      	movs	r2, r0
    6158:	1dfb      	adds	r3, r7, #7
    615a:	701a      	strb	r2, [r3, #0]
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
    615c:	2103      	movs	r1, #3
    615e:	2002      	movs	r0, #2
    6160:	4b0f      	ldr	r3, [pc, #60]	; (61a0 <phyTrxSetState+0x50>)
    6162:	4798      	blx	r3
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    6164:	2001      	movs	r0, #1
    6166:	4b0f      	ldr	r3, [pc, #60]	; (61a4 <phyTrxSetState+0x54>)
    6168:	4798      	blx	r3
    616a:	0003      	movs	r3, r0
    616c:	001a      	movs	r2, r3
    616e:	231f      	movs	r3, #31
    6170:	4013      	ands	r3, r2
    6172:	2b08      	cmp	r3, #8
    6174:	d1f2      	bne.n	615c <phyTrxSetState+0xc>

	do { phyWriteRegister(TRX_STATE_REG,
    6176:	1dfb      	adds	r3, r7, #7
    6178:	781b      	ldrb	r3, [r3, #0]
    617a:	0019      	movs	r1, r3
    617c:	2002      	movs	r0, #2
    617e:	4b08      	ldr	r3, [pc, #32]	; (61a0 <phyTrxSetState+0x50>)
    6180:	4798      	blx	r3
			     state); } while (state !=
    6182:	1dfb      	adds	r3, r7, #7
    6184:	781c      	ldrb	r4, [r3, #0]
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    6186:	2001      	movs	r0, #1
    6188:	4b06      	ldr	r3, [pc, #24]	; (61a4 <phyTrxSetState+0x54>)
    618a:	4798      	blx	r3
    618c:	0003      	movs	r3, r0
    618e:	001a      	movs	r2, r3
    6190:	231f      	movs	r3, #31
    6192:	4013      	ands	r3, r2
    6194:	429c      	cmp	r4, r3
    6196:	d1ee      	bne.n	6176 <phyTrxSetState+0x26>
}
    6198:	46c0      	nop			; (mov r8, r8)
    619a:	46bd      	mov	sp, r7
    619c:	b003      	add	sp, #12
    619e:	bd90      	pop	{r4, r7, pc}
    61a0:	00006091 	.word	0x00006091
    61a4:	000060c1 	.word	0x000060c1

000061a8 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    61a8:	b580      	push	{r7, lr}
    61aa:	b084      	sub	sp, #16
    61ac:	af00      	add	r7, sp, #0
	if (PHY_STATE_SLEEP == phyState) {
    61ae:	4b43      	ldr	r3, [pc, #268]	; (62bc <PHY_TaskHandler+0x114>)
    61b0:	781b      	ldrb	r3, [r3, #0]
    61b2:	2b02      	cmp	r3, #2
    61b4:	d100      	bne.n	61b8 <PHY_TaskHandler+0x10>
    61b6:	e07d      	b.n	62b4 <PHY_TaskHandler+0x10c>
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    61b8:	200f      	movs	r0, #15
    61ba:	4b41      	ldr	r3, [pc, #260]	; (62c0 <PHY_TaskHandler+0x118>)
    61bc:	4798      	blx	r3
    61be:	0003      	movs	r3, r0
    61c0:	001a      	movs	r2, r3
    61c2:	2308      	movs	r3, #8
    61c4:	4013      	ands	r3, r2
    61c6:	d100      	bne.n	61ca <PHY_TaskHandler+0x22>
    61c8:	e075      	b.n	62b6 <PHY_TaskHandler+0x10e>
		if (PHY_STATE_IDLE == phyState) {
    61ca:	4b3c      	ldr	r3, [pc, #240]	; (62bc <PHY_TaskHandler+0x114>)
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	2b01      	cmp	r3, #1
    61d0:	d135      	bne.n	623e <PHY_TaskHandler+0x96>
			PHY_DataInd_t ind;
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);
    61d2:	2007      	movs	r0, #7
    61d4:	4b3a      	ldr	r3, [pc, #232]	; (62c0 <PHY_TaskHandler+0x118>)
    61d6:	4798      	blx	r3
    61d8:	0003      	movs	r3, r0
    61da:	001a      	movs	r2, r3
    61dc:	230e      	movs	r3, #14
    61de:	18fb      	adds	r3, r7, r3
    61e0:	701a      	strb	r2, [r3, #0]

			trx_frame_read(&size, 1);
    61e2:	1cfb      	adds	r3, r7, #3
    61e4:	2101      	movs	r1, #1
    61e6:	0018      	movs	r0, r3
    61e8:	4b36      	ldr	r3, [pc, #216]	; (62c4 <PHY_TaskHandler+0x11c>)
    61ea:	4798      	blx	r3

			trx_frame_read(phyRxBuffer, size + 2);
    61ec:	1cfb      	adds	r3, r7, #3
    61ee:	781b      	ldrb	r3, [r3, #0]
    61f0:	3302      	adds	r3, #2
    61f2:	b2da      	uxtb	r2, r3
    61f4:	4b34      	ldr	r3, [pc, #208]	; (62c8 <PHY_TaskHandler+0x120>)
    61f6:	0011      	movs	r1, r2
    61f8:	0018      	movs	r0, r3
    61fa:	4b32      	ldr	r3, [pc, #200]	; (62c4 <PHY_TaskHandler+0x11c>)
    61fc:	4798      	blx	r3

			ind.data = phyRxBuffer + 1;
    61fe:	4a33      	ldr	r2, [pc, #204]	; (62cc <PHY_TaskHandler+0x124>)
    6200:	1d3b      	adds	r3, r7, #4
    6202:	601a      	str	r2, [r3, #0]

			ind.size = size - PHY_CRC_SIZE;
    6204:	1cfb      	adds	r3, r7, #3
    6206:	781b      	ldrb	r3, [r3, #0]
    6208:	3b02      	subs	r3, #2
    620a:	b2da      	uxtb	r2, r3
    620c:	1d3b      	adds	r3, r7, #4
    620e:	711a      	strb	r2, [r3, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    6210:	1cfb      	adds	r3, r7, #3
    6212:	781b      	ldrb	r3, [r3, #0]
    6214:	3301      	adds	r3, #1
    6216:	4a2c      	ldr	r2, [pc, #176]	; (62c8 <PHY_TaskHandler+0x120>)
    6218:	5cd2      	ldrb	r2, [r2, r3]
    621a:	1d3b      	adds	r3, r7, #4
    621c:	715a      	strb	r2, [r3, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    621e:	230e      	movs	r3, #14
    6220:	18fb      	adds	r3, r7, r3
    6222:	781b      	ldrb	r3, [r3, #0]
    6224:	3b5b      	subs	r3, #91	; 0x5b
    6226:	b2db      	uxtb	r3, r3
    6228:	b25a      	sxtb	r2, r3
    622a:	1d3b      	adds	r3, r7, #4
    622c:	719a      	strb	r2, [r3, #6]
			PHY_DataInd(&ind);
    622e:	1d3b      	adds	r3, r7, #4
    6230:	0018      	movs	r0, r3
    6232:	4b27      	ldr	r3, [pc, #156]	; (62d0 <PHY_TaskHandler+0x128>)
    6234:	4798      	blx	r3

			phyWaitState(TRX_STATUS_RX_AACK_ON);
    6236:	2016      	movs	r0, #22
    6238:	4b26      	ldr	r3, [pc, #152]	; (62d4 <PHY_TaskHandler+0x12c>)
    623a:	4798      	blx	r3
    623c:	e03b      	b.n	62b6 <PHY_TaskHandler+0x10e>
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    623e:	4b1f      	ldr	r3, [pc, #124]	; (62bc <PHY_TaskHandler+0x114>)
    6240:	781b      	ldrb	r3, [r3, #0]
    6242:	2b03      	cmp	r3, #3
    6244:	d137      	bne.n	62b6 <PHY_TaskHandler+0x10e>
			uint8_t status
				= (phyReadRegister(TRX_STATE_REG) >>
    6246:	2002      	movs	r0, #2
    6248:	4b1d      	ldr	r3, [pc, #116]	; (62c0 <PHY_TaskHandler+0x118>)
    624a:	4798      	blx	r3
    624c:	0003      	movs	r3, r0
    624e:	001a      	movs	r2, r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    6250:	230f      	movs	r3, #15
    6252:	18fb      	adds	r3, r7, r3
    6254:	0952      	lsrs	r2, r2, #5
    6256:	701a      	strb	r2, [r3, #0]
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    6258:	230f      	movs	r3, #15
    625a:	18fb      	adds	r3, r7, r3
    625c:	781b      	ldrb	r3, [r3, #0]
    625e:	2b00      	cmp	r3, #0
    6260:	d104      	bne.n	626c <PHY_TaskHandler+0xc4>
				status = PHY_STATUS_SUCCESS;
    6262:	230f      	movs	r3, #15
    6264:	18fb      	adds	r3, r7, r3
    6266:	2200      	movs	r2, #0
    6268:	701a      	strb	r2, [r3, #0]
    626a:	e017      	b.n	629c <PHY_TaskHandler+0xf4>
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    626c:	230f      	movs	r3, #15
    626e:	18fb      	adds	r3, r7, r3
    6270:	781b      	ldrb	r3, [r3, #0]
    6272:	2b03      	cmp	r3, #3
    6274:	d104      	bne.n	6280 <PHY_TaskHandler+0xd8>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    6276:	230f      	movs	r3, #15
    6278:	18fb      	adds	r3, r7, r3
    627a:	2201      	movs	r2, #1
    627c:	701a      	strb	r2, [r3, #0]
    627e:	e00d      	b.n	629c <PHY_TaskHandler+0xf4>
			} else if (TRAC_STATUS_NO_ACK == status) {
    6280:	230f      	movs	r3, #15
    6282:	18fb      	adds	r3, r7, r3
    6284:	781b      	ldrb	r3, [r3, #0]
    6286:	2b05      	cmp	r3, #5
    6288:	d104      	bne.n	6294 <PHY_TaskHandler+0xec>
				status = PHY_STATUS_NO_ACK;
    628a:	230f      	movs	r3, #15
    628c:	18fb      	adds	r3, r7, r3
    628e:	2202      	movs	r2, #2
    6290:	701a      	strb	r2, [r3, #0]
    6292:	e003      	b.n	629c <PHY_TaskHandler+0xf4>
			} else {
				status = PHY_STATUS_ERROR;
    6294:	230f      	movs	r3, #15
    6296:	18fb      	adds	r3, r7, r3
    6298:	2203      	movs	r2, #3
    629a:	701a      	strb	r2, [r3, #0]
			}

			phySetRxState();
    629c:	4b0e      	ldr	r3, [pc, #56]	; (62d8 <PHY_TaskHandler+0x130>)
    629e:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    62a0:	4b06      	ldr	r3, [pc, #24]	; (62bc <PHY_TaskHandler+0x114>)
    62a2:	2201      	movs	r2, #1
    62a4:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    62a6:	230f      	movs	r3, #15
    62a8:	18fb      	adds	r3, r7, r3
    62aa:	781b      	ldrb	r3, [r3, #0]
    62ac:	0018      	movs	r0, r3
    62ae:	4b0b      	ldr	r3, [pc, #44]	; (62dc <PHY_TaskHandler+0x134>)
    62b0:	4798      	blx	r3
    62b2:	e000      	b.n	62b6 <PHY_TaskHandler+0x10e>
/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
    62b4:	46c0      	nop			; (mov r8, r8)
			phyState = PHY_STATE_IDLE;

			PHY_DataConf(status);
		}
	}
}
    62b6:	46bd      	mov	sp, r7
    62b8:	b004      	add	sp, #16
    62ba:	bd80      	pop	{r7, pc}
    62bc:	200002c0 	.word	0x200002c0
    62c0:	000060c1 	.word	0x000060c1
    62c4:	00004bbd 	.word	0x00004bbd
    62c8:	200002c4 	.word	0x200002c4
    62cc:	200002c5 	.word	0x200002c5
    62d0:	00007b09 	.word	0x00007b09
    62d4:	000060f1 	.word	0x000060f1
    62d8:	00006121 	.word	0x00006121
    62dc:	00008f09 	.word	0x00008f09

000062e0 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    62e0:	b580      	push	{r7, lr}
    62e2:	b082      	sub	sp, #8
    62e4:	af00      	add	r7, sp, #0
	nwkIb.nwkSeqNum = 0;
    62e6:	4b19      	ldr	r3, [pc, #100]	; (634c <NWK_Init+0x6c>)
    62e8:	2200      	movs	r2, #0
    62ea:	711a      	strb	r2, [r3, #4]
	nwkIb.macSeqNum = 0;
    62ec:	4b17      	ldr	r3, [pc, #92]	; (634c <NWK_Init+0x6c>)
    62ee:	2200      	movs	r2, #0
    62f0:	715a      	strb	r2, [r3, #5]
	nwkIb.addr = 0;
    62f2:	4b16      	ldr	r3, [pc, #88]	; (634c <NWK_Init+0x6c>)
    62f4:	2200      	movs	r2, #0
    62f6:	801a      	strh	r2, [r3, #0]
	nwkIb.lock = 0;
    62f8:	4b14      	ldr	r3, [pc, #80]	; (634c <NWK_Init+0x6c>)
    62fa:	2258      	movs	r2, #88	; 0x58
    62fc:	2100      	movs	r1, #0
    62fe:	5299      	strh	r1, [r3, r2]

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    6300:	1dfb      	adds	r3, r7, #7
    6302:	2200      	movs	r2, #0
    6304:	701a      	strb	r2, [r3, #0]
    6306:	e00b      	b.n	6320 <NWK_Init+0x40>
		nwkIb.endpoint[i] = NULL;
    6308:	1dfb      	adds	r3, r7, #7
    630a:	781a      	ldrb	r2, [r3, #0]
    630c:	4b0f      	ldr	r3, [pc, #60]	; (634c <NWK_Init+0x6c>)
    630e:	3202      	adds	r2, #2
    6310:	0092      	lsls	r2, r2, #2
    6312:	2100      	movs	r1, #0
    6314:	50d1      	str	r1, [r2, r3]
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    6316:	1dfb      	adds	r3, r7, #7
    6318:	781a      	ldrb	r2, [r3, #0]
    631a:	1dfb      	adds	r3, r7, #7
    631c:	3201      	adds	r2, #1
    631e:	701a      	strb	r2, [r3, #0]
    6320:	1dfb      	adds	r3, r7, #7
    6322:	781b      	ldrb	r3, [r3, #0]
    6324:	2b0f      	cmp	r3, #15
    6326:	d9ef      	bls.n	6308 <NWK_Init+0x28>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    6328:	4b09      	ldr	r3, [pc, #36]	; (6350 <NWK_Init+0x70>)
    632a:	4798      	blx	r3
	nwkRxInit();
    632c:	4b09      	ldr	r3, [pc, #36]	; (6354 <NWK_Init+0x74>)
    632e:	4798      	blx	r3
	nwkFrameInit();
    6330:	4b09      	ldr	r3, [pc, #36]	; (6358 <NWK_Init+0x78>)
    6332:	4798      	blx	r3
	nwkDataReqInit();
    6334:	4b09      	ldr	r3, [pc, #36]	; (635c <NWK_Init+0x7c>)
    6336:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    6338:	4b09      	ldr	r3, [pc, #36]	; (6360 <NWK_Init+0x80>)
    633a:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    633c:	4b09      	ldr	r3, [pc, #36]	; (6364 <NWK_Init+0x84>)
    633e:	4798      	blx	r3
#ifdef NWK_ENABLE_MULTICAST
	nwkGroupInit();
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
    6340:	4b09      	ldr	r3, [pc, #36]	; (6368 <NWK_Init+0x88>)
    6342:	4798      	blx	r3
#endif
}
    6344:	46c0      	nop			; (mov r8, r8)
    6346:	46bd      	mov	sp, r7
    6348:	b002      	add	sp, #8
    634a:	bd80      	pop	{r7, pc}
    634c:	2000104c 	.word	0x2000104c
    6350:	000088ed 	.word	0x000088ed
    6354:	00007a99 	.word	0x00007a99
    6358:	00006819 	.word	0x00006819
    635c:	00006461 	.word	0x00006461
    6360:	00006a29 	.word	0x00006a29
    6364:	000084c5 	.word	0x000084c5
    6368:	00007169 	.word	0x00007169

0000636c <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    636c:	b580      	push	{r7, lr}
    636e:	b082      	sub	sp, #8
    6370:	af00      	add	r7, sp, #0
    6372:	0002      	movs	r2, r0
    6374:	1dbb      	adds	r3, r7, #6
    6376:	801a      	strh	r2, [r3, #0]
	nwkIb.addr = addr;
    6378:	4b06      	ldr	r3, [pc, #24]	; (6394 <NWK_SetAddr+0x28>)
    637a:	1dba      	adds	r2, r7, #6
    637c:	8812      	ldrh	r2, [r2, #0]
    637e:	801a      	strh	r2, [r3, #0]
	PHY_SetShortAddr(addr);
    6380:	1dbb      	adds	r3, r7, #6
    6382:	881b      	ldrh	r3, [r3, #0]
    6384:	0018      	movs	r0, r3
    6386:	4b04      	ldr	r3, [pc, #16]	; (6398 <NWK_SetAddr+0x2c>)
    6388:	4798      	blx	r3
}
    638a:	46c0      	nop			; (mov r8, r8)
    638c:	46bd      	mov	sp, r7
    638e:	b002      	add	sp, #8
    6390:	bd80      	pop	{r7, pc}
    6392:	46c0      	nop			; (mov r8, r8)
    6394:	2000104c 	.word	0x2000104c
    6398:	00005f1d 	.word	0x00005f1d

0000639c <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    639c:	b580      	push	{r7, lr}
    639e:	b082      	sub	sp, #8
    63a0:	af00      	add	r7, sp, #0
    63a2:	0002      	movs	r2, r0
    63a4:	1dbb      	adds	r3, r7, #6
    63a6:	801a      	strh	r2, [r3, #0]
	nwkIb.panId = panId;
    63a8:	4b06      	ldr	r3, [pc, #24]	; (63c4 <NWK_SetPanId+0x28>)
    63aa:	1dba      	adds	r2, r7, #6
    63ac:	8812      	ldrh	r2, [r2, #0]
    63ae:	805a      	strh	r2, [r3, #2]
	PHY_SetPanId(panId);
    63b0:	1dbb      	adds	r3, r7, #6
    63b2:	881b      	ldrh	r3, [r3, #0]
    63b4:	0018      	movs	r0, r3
    63b6:	4b04      	ldr	r3, [pc, #16]	; (63c8 <NWK_SetPanId+0x2c>)
    63b8:	4798      	blx	r3
}
    63ba:	46c0      	nop			; (mov r8, r8)
    63bc:	46bd      	mov	sp, r7
    63be:	b002      	add	sp, #8
    63c0:	bd80      	pop	{r7, pc}
    63c2:	46c0      	nop			; (mov r8, r8)
    63c4:	2000104c 	.word	0x2000104c
    63c8:	00005ee5 	.word	0x00005ee5

000063cc <NWK_OpenEndpoint>:
*  @brief Registers callback @a ind for the endpoint @a endpoint
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
    63cc:	b580      	push	{r7, lr}
    63ce:	b082      	sub	sp, #8
    63d0:	af00      	add	r7, sp, #0
    63d2:	0002      	movs	r2, r0
    63d4:	6039      	str	r1, [r7, #0]
    63d6:	1dfb      	adds	r3, r7, #7
    63d8:	701a      	strb	r2, [r3, #0]
	nwkIb.endpoint[id] = handler;
    63da:	1dfb      	adds	r3, r7, #7
    63dc:	781a      	ldrb	r2, [r3, #0]
    63de:	4b04      	ldr	r3, [pc, #16]	; (63f0 <NWK_OpenEndpoint+0x24>)
    63e0:	3202      	adds	r2, #2
    63e2:	0092      	lsls	r2, r2, #2
    63e4:	6839      	ldr	r1, [r7, #0]
    63e6:	50d1      	str	r1, [r2, r3]
}
    63e8:	46c0      	nop			; (mov r8, r8)
    63ea:	46bd      	mov	sp, r7
    63ec:	b002      	add	sp, #8
    63ee:	bd80      	pop	{r7, pc}
    63f0:	2000104c 	.word	0x2000104c

000063f4 <NWK_Lock>:

/*************************************************************************//**
*  @brief Increases the lock counter and sets a busy state
*****************************************************************************/
void NWK_Lock(void)
{
    63f4:	b580      	push	{r7, lr}
    63f6:	af00      	add	r7, sp, #0
	nwkIb.lock++;
    63f8:	4b05      	ldr	r3, [pc, #20]	; (6410 <NWK_Lock+0x1c>)
    63fa:	2258      	movs	r2, #88	; 0x58
    63fc:	5a9b      	ldrh	r3, [r3, r2]
    63fe:	3301      	adds	r3, #1
    6400:	b299      	uxth	r1, r3
    6402:	4b03      	ldr	r3, [pc, #12]	; (6410 <NWK_Lock+0x1c>)
    6404:	2258      	movs	r2, #88	; 0x58
    6406:	5299      	strh	r1, [r3, r2]
}
    6408:	46c0      	nop			; (mov r8, r8)
    640a:	46bd      	mov	sp, r7
    640c:	bd80      	pop	{r7, pc}
    640e:	46c0      	nop			; (mov r8, r8)
    6410:	2000104c 	.word	0x2000104c

00006414 <NWK_Unlock>:

/*************************************************************************//**
*  @brief Decreases the lock counter and sets a free state if counter reaches 0
*****************************************************************************/
void NWK_Unlock(void)
{
    6414:	b580      	push	{r7, lr}
    6416:	af00      	add	r7, sp, #0
	nwkIb.lock--;
    6418:	4b05      	ldr	r3, [pc, #20]	; (6430 <NWK_Unlock+0x1c>)
    641a:	2258      	movs	r2, #88	; 0x58
    641c:	5a9b      	ldrh	r3, [r3, r2]
    641e:	3b01      	subs	r3, #1
    6420:	b299      	uxth	r1, r3
    6422:	4b03      	ldr	r3, [pc, #12]	; (6430 <NWK_Unlock+0x1c>)
    6424:	2258      	movs	r2, #88	; 0x58
    6426:	5299      	strh	r1, [r3, r2]
}
    6428:	46c0      	nop			; (mov r8, r8)
    642a:	46bd      	mov	sp, r7
    642c:	bd80      	pop	{r7, pc}
    642e:	46c0      	nop			; (mov r8, r8)
    6430:	2000104c 	.word	0x2000104c

00006434 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    6434:	b580      	push	{r7, lr}
    6436:	af00      	add	r7, sp, #0
	nwkRxTaskHandler();
    6438:	4b05      	ldr	r3, [pc, #20]	; (6450 <NWK_TaskHandler+0x1c>)
    643a:	4798      	blx	r3
	nwkTxTaskHandler();
    643c:	4b05      	ldr	r3, [pc, #20]	; (6454 <NWK_TaskHandler+0x20>)
    643e:	4798      	blx	r3
	nwkDataReqTaskHandler();
    6440:	4b05      	ldr	r3, [pc, #20]	; (6458 <NWK_TaskHandler+0x24>)
    6442:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    6444:	4b05      	ldr	r3, [pc, #20]	; (645c <NWK_TaskHandler+0x28>)
    6446:	4798      	blx	r3
#endif
}
    6448:	46c0      	nop			; (mov r8, r8)
    644a:	46bd      	mov	sp, r7
    644c:	bd80      	pop	{r7, pc}
    644e:	46c0      	nop			; (mov r8, r8)
    6450:	000083f9 	.word	0x000083f9
    6454:	00008f5d 	.word	0x00008f5d
    6458:	000067c5 	.word	0x000067c5
    645c:	000087fd 	.word	0x000087fd

00006460 <nwkDataReqInit>:

/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
    6460:	b580      	push	{r7, lr}
    6462:	af00      	add	r7, sp, #0
	nwkDataReqQueue = NULL;
    6464:	4b02      	ldr	r3, [pc, #8]	; (6470 <nwkDataReqInit+0x10>)
    6466:	2200      	movs	r2, #0
    6468:	601a      	str	r2, [r3, #0]
}
    646a:	46c0      	nop			; (mov r8, r8)
    646c:	46bd      	mov	sp, r7
    646e:	bd80      	pop	{r7, pc}
    6470:	20000348 	.word	0x20000348

00006474 <NWK_DataReq>:
/*************************************************************************//**
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    6474:	b580      	push	{r7, lr}
    6476:	b082      	sub	sp, #8
    6478:	af00      	add	r7, sp, #0
    647a:	6078      	str	r0, [r7, #4]
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    647c:	687b      	ldr	r3, [r7, #4]
    647e:	2200      	movs	r2, #0
    6480:	721a      	strb	r2, [r3, #8]
	req->status = NWK_SUCCESS_STATUS;
    6482:	687b      	ldr	r3, [r7, #4]
    6484:	2200      	movs	r2, #0
    6486:	771a      	strb	r2, [r3, #28]
	req->frame = NULL;
    6488:	687b      	ldr	r3, [r7, #4]
    648a:	2200      	movs	r2, #0
    648c:	605a      	str	r2, [r3, #4]

	nwkIb.lock++;
    648e:	4b0f      	ldr	r3, [pc, #60]	; (64cc <NWK_DataReq+0x58>)
    6490:	2258      	movs	r2, #88	; 0x58
    6492:	5a9b      	ldrh	r3, [r3, r2]
    6494:	3301      	adds	r3, #1
    6496:	b299      	uxth	r1, r3
    6498:	4b0c      	ldr	r3, [pc, #48]	; (64cc <NWK_DataReq+0x58>)
    649a:	2258      	movs	r2, #88	; 0x58
    649c:	5299      	strh	r1, [r3, r2]

	if (NULL == nwkDataReqQueue) {
    649e:	4b0c      	ldr	r3, [pc, #48]	; (64d0 <NWK_DataReq+0x5c>)
    64a0:	681b      	ldr	r3, [r3, #0]
    64a2:	2b00      	cmp	r3, #0
    64a4:	d106      	bne.n	64b4 <NWK_DataReq+0x40>
		req->next = NULL;
    64a6:	687b      	ldr	r3, [r7, #4]
    64a8:	2200      	movs	r2, #0
    64aa:	601a      	str	r2, [r3, #0]
		nwkDataReqQueue = req;
    64ac:	4b08      	ldr	r3, [pc, #32]	; (64d0 <NWK_DataReq+0x5c>)
    64ae:	687a      	ldr	r2, [r7, #4]
    64b0:	601a      	str	r2, [r3, #0]
	} else {
		req->next = nwkDataReqQueue;
		nwkDataReqQueue = req;
	}
}
    64b2:	e006      	b.n	64c2 <NWK_DataReq+0x4e>

	if (NULL == nwkDataReqQueue) {
		req->next = NULL;
		nwkDataReqQueue = req;
	} else {
		req->next = nwkDataReqQueue;
    64b4:	4b06      	ldr	r3, [pc, #24]	; (64d0 <NWK_DataReq+0x5c>)
    64b6:	681a      	ldr	r2, [r3, #0]
    64b8:	687b      	ldr	r3, [r7, #4]
    64ba:	601a      	str	r2, [r3, #0]
		nwkDataReqQueue = req;
    64bc:	4b04      	ldr	r3, [pc, #16]	; (64d0 <NWK_DataReq+0x5c>)
    64be:	687a      	ldr	r2, [r7, #4]
    64c0:	601a      	str	r2, [r3, #0]
	}
}
    64c2:	46c0      	nop			; (mov r8, r8)
    64c4:	46bd      	mov	sp, r7
    64c6:	b002      	add	sp, #8
    64c8:	bd80      	pop	{r7, pc}
    64ca:	46c0      	nop			; (mov r8, r8)
    64cc:	2000104c 	.word	0x2000104c
    64d0:	20000348 	.word	0x20000348

000064d4 <nwkDataReqSendFrame>:
*  @brief Prepares and send outgoing frame based on the request @a req
* parameters
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
    64d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    64d6:	b085      	sub	sp, #20
    64d8:	af00      	add	r7, sp, #0
    64da:	6078      	str	r0, [r7, #4]
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    64dc:	4b82      	ldr	r3, [pc, #520]	; (66e8 <nwkDataReqSendFrame+0x214>)
    64de:	4798      	blx	r3
    64e0:	0003      	movs	r3, r0
    64e2:	60fb      	str	r3, [r7, #12]
    64e4:	68fb      	ldr	r3, [r7, #12]
    64e6:	2b00      	cmp	r3, #0
    64e8:	d106      	bne.n	64f8 <nwkDataReqSendFrame+0x24>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    64ea:	687b      	ldr	r3, [r7, #4]
    64ec:	2202      	movs	r2, #2
    64ee:	721a      	strb	r2, [r3, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    64f0:	687b      	ldr	r3, [r7, #4]
    64f2:	2202      	movs	r2, #2
    64f4:	771a      	strb	r2, [r3, #28]
		return;
    64f6:	e0f3      	b.n	66e0 <nwkDataReqSendFrame+0x20c>
	}

	req->frame = frame;
    64f8:	687b      	ldr	r3, [r7, #4]
    64fa:	68fa      	ldr	r2, [r7, #12]
    64fc:	605a      	str	r2, [r3, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    64fe:	687b      	ldr	r3, [r7, #4]
    6500:	2201      	movs	r2, #1
    6502:	721a      	strb	r2, [r3, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    6504:	68fb      	ldr	r3, [r7, #12]
    6506:	2289      	movs	r2, #137	; 0x89
    6508:	4978      	ldr	r1, [pc, #480]	; (66ec <nwkDataReqSendFrame+0x218>)
    650a:	20ff      	movs	r0, #255	; 0xff
    650c:	4008      	ands	r0, r1
    650e:	0005      	movs	r5, r0
    6510:	5c98      	ldrb	r0, [r3, r2]
    6512:	2400      	movs	r4, #0
    6514:	4020      	ands	r0, r4
    6516:	1c04      	adds	r4, r0, #0
    6518:	1c28      	adds	r0, r5, #0
    651a:	4320      	orrs	r0, r4
    651c:	5498      	strb	r0, [r3, r2]
    651e:	0a08      	lsrs	r0, r1, #8
    6520:	24ff      	movs	r4, #255	; 0xff
    6522:	4020      	ands	r0, r4
    6524:	0006      	movs	r6, r0
    6526:	1898      	adds	r0, r3, r2
    6528:	7844      	ldrb	r4, [r0, #1]
    652a:	2500      	movs	r5, #0
    652c:	402c      	ands	r4, r5
    652e:	1c25      	adds	r5, r4, #0
    6530:	1c34      	adds	r4, r6, #0
    6532:	432c      	orrs	r4, r5
    6534:	7044      	strb	r4, [r0, #1]
    6536:	0c08      	lsrs	r0, r1, #16
    6538:	24ff      	movs	r4, #255	; 0xff
    653a:	4020      	ands	r0, r4
    653c:	0006      	movs	r6, r0
    653e:	1898      	adds	r0, r3, r2
    6540:	7884      	ldrb	r4, [r0, #2]
    6542:	2500      	movs	r5, #0
    6544:	402c      	ands	r4, r5
    6546:	1c25      	adds	r5, r4, #0
    6548:	1c34      	adds	r4, r6, #0
    654a:	432c      	orrs	r4, r5
    654c:	7084      	strb	r4, [r0, #2]
    654e:	0e08      	lsrs	r0, r1, #24
    6550:	189b      	adds	r3, r3, r2
    6552:	78da      	ldrb	r2, [r3, #3]
    6554:	2100      	movs	r1, #0
    6556:	400a      	ands	r2, r1
    6558:	1c11      	adds	r1, r2, #0
    655a:	1c02      	adds	r2, r0, #0
    655c:	430a      	orrs	r2, r1
    655e:	70da      	strb	r2, [r3, #3]
	frame->tx.control = req->options &
    6560:	687b      	ldr	r3, [r7, #4]
    6562:	7b9b      	ldrb	r3, [r3, #14]
    6564:	001a      	movs	r2, r3
    6566:	2304      	movs	r3, #4
    6568:	4013      	ands	r3, r2
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;
    656a:	1e5a      	subs	r2, r3, #1
    656c:	4193      	sbcs	r3, r2
    656e:	b2db      	uxtb	r3, r3
    6570:	0019      	movs	r1, r3

	req->frame = frame;
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;

	frame->tx.confirm = nwkDataReqTxConf;
	frame->tx.control = req->options &
    6572:	68fb      	ldr	r3, [r7, #12]
    6574:	2288      	movs	r2, #136	; 0x88
    6576:	5499      	strb	r1, [r3, r2]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    6578:	687b      	ldr	r3, [r7, #4]
    657a:	7b9b      	ldrb	r3, [r3, #14]
    657c:	001a      	movs	r2, r3
    657e:	2301      	movs	r3, #1
    6580:	4013      	ands	r3, r2
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    6582:	1e5a      	subs	r2, r3, #1
    6584:	4193      	sbcs	r3, r2
    6586:	b2da      	uxtb	r2, r3
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    6588:	68fb      	ldr	r3, [r7, #12]
    658a:	2101      	movs	r1, #1
    658c:	400a      	ands	r2, r1
    658e:	0010      	movs	r0, r2
    6590:	7ada      	ldrb	r2, [r3, #11]
    6592:	2101      	movs	r1, #1
    6594:	438a      	bics	r2, r1
    6596:	1c11      	adds	r1, r2, #0
    6598:	1c02      	adds	r2, r0, #0
    659a:	430a      	orrs	r2, r1
    659c:	72da      	strb	r2, [r3, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    659e:	687b      	ldr	r3, [r7, #4]
    65a0:	7b9b      	ldrb	r3, [r3, #14]
    65a2:	001a      	movs	r2, r3
    65a4:	2308      	movs	r3, #8
    65a6:	4013      	ands	r3, r2
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    65a8:	1e5a      	subs	r2, r3, #1
    65aa:	4193      	sbcs	r3, r2
    65ac:	b2da      	uxtb	r2, r3
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    65ae:	68fb      	ldr	r3, [r7, #12]
    65b0:	2101      	movs	r1, #1
    65b2:	400a      	ands	r2, r1
    65b4:	0090      	lsls	r0, r2, #2
    65b6:	7ada      	ldrb	r2, [r3, #11]
    65b8:	2104      	movs	r1, #4
    65ba:	438a      	bics	r2, r1
    65bc:	1c11      	adds	r1, r2, #0
    65be:	1c02      	adds	r2, r0, #0
    65c0:	430a      	orrs	r2, r1
    65c2:	72da      	strb	r2, [r3, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    65c4:	687b      	ldr	r3, [r7, #4]
    65c6:	7b9b      	ldrb	r3, [r3, #14]
    65c8:	001a      	movs	r2, r3
    65ca:	2302      	movs	r3, #2
    65cc:	4013      	ands	r3, r2
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    65ce:	1e5a      	subs	r2, r3, #1
    65d0:	4193      	sbcs	r3, r2
    65d2:	b2da      	uxtb	r2, r3
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    65d4:	68fb      	ldr	r3, [r7, #12]
    65d6:	2101      	movs	r1, #1
    65d8:	400a      	ands	r2, r1
    65da:	1890      	adds	r0, r2, r2
    65dc:	7ada      	ldrb	r2, [r3, #11]
    65de:	2102      	movs	r1, #2
    65e0:	438a      	bics	r2, r1
    65e2:	1c11      	adds	r1, r2, #0
    65e4:	1c02      	adds	r2, r0, #0
    65e6:	430a      	orrs	r2, r1
    65e8:	72da      	strb	r2, [r3, #11]
		frame->payload += sizeof(NwkFrameMulticastHeader_t);
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}
#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    65ea:	4b41      	ldr	r3, [pc, #260]	; (66f0 <nwkDataReqSendFrame+0x21c>)
    65ec:	791b      	ldrb	r3, [r3, #4]
    65ee:	3301      	adds	r3, #1
    65f0:	b2da      	uxtb	r2, r3
    65f2:	4b3f      	ldr	r3, [pc, #252]	; (66f0 <nwkDataReqSendFrame+0x21c>)
    65f4:	711a      	strb	r2, [r3, #4]
    65f6:	4b3e      	ldr	r3, [pc, #248]	; (66f0 <nwkDataReqSendFrame+0x21c>)
    65f8:	791a      	ldrb	r2, [r3, #4]
    65fa:	68fb      	ldr	r3, [r7, #12]
    65fc:	731a      	strb	r2, [r3, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    65fe:	4b3c      	ldr	r3, [pc, #240]	; (66f0 <nwkDataReqSendFrame+0x21c>)
    6600:	881a      	ldrh	r2, [r3, #0]
    6602:	68fb      	ldr	r3, [r7, #12]
    6604:	330d      	adds	r3, #13
    6606:	21ff      	movs	r1, #255	; 0xff
    6608:	4011      	ands	r1, r2
    660a:	000c      	movs	r4, r1
    660c:	7819      	ldrb	r1, [r3, #0]
    660e:	2000      	movs	r0, #0
    6610:	4001      	ands	r1, r0
    6612:	1c08      	adds	r0, r1, #0
    6614:	1c21      	adds	r1, r4, #0
    6616:	4301      	orrs	r1, r0
    6618:	7019      	strb	r1, [r3, #0]
    661a:	0a12      	lsrs	r2, r2, #8
    661c:	b290      	uxth	r0, r2
    661e:	785a      	ldrb	r2, [r3, #1]
    6620:	2100      	movs	r1, #0
    6622:	400a      	ands	r2, r1
    6624:	1c11      	adds	r1, r2, #0
    6626:	1c02      	adds	r2, r0, #0
    6628:	430a      	orrs	r2, r1
    662a:	705a      	strb	r2, [r3, #1]
	frame->header.nwkDstAddr = req->dstAddr;
    662c:	687b      	ldr	r3, [r7, #4]
    662e:	895a      	ldrh	r2, [r3, #10]
    6630:	68fb      	ldr	r3, [r7, #12]
    6632:	330f      	adds	r3, #15
    6634:	21ff      	movs	r1, #255	; 0xff
    6636:	4011      	ands	r1, r2
    6638:	000c      	movs	r4, r1
    663a:	7819      	ldrb	r1, [r3, #0]
    663c:	2000      	movs	r0, #0
    663e:	4001      	ands	r1, r0
    6640:	1c08      	adds	r0, r1, #0
    6642:	1c21      	adds	r1, r4, #0
    6644:	4301      	orrs	r1, r0
    6646:	7019      	strb	r1, [r3, #0]
    6648:	0a12      	lsrs	r2, r2, #8
    664a:	b290      	uxth	r0, r2
    664c:	785a      	ldrb	r2, [r3, #1]
    664e:	2100      	movs	r1, #0
    6650:	400a      	ands	r2, r1
    6652:	1c11      	adds	r1, r2, #0
    6654:	1c02      	adds	r2, r0, #0
    6656:	430a      	orrs	r2, r1
    6658:	705a      	strb	r2, [r3, #1]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    665a:	687b      	ldr	r3, [r7, #4]
    665c:	7b5b      	ldrb	r3, [r3, #13]
    665e:	1c1a      	adds	r2, r3, #0
    6660:	230f      	movs	r3, #15
    6662:	4013      	ands	r3, r2
    6664:	b2da      	uxtb	r2, r3
    6666:	68fb      	ldr	r3, [r7, #12]
    6668:	210f      	movs	r1, #15
    666a:	400a      	ands	r2, r1
    666c:	0010      	movs	r0, r2
    666e:	7c5a      	ldrb	r2, [r3, #17]
    6670:	210f      	movs	r1, #15
    6672:	438a      	bics	r2, r1
    6674:	1c11      	adds	r1, r2, #0
    6676:	1c02      	adds	r2, r0, #0
    6678:	430a      	orrs	r2, r1
    667a:	745a      	strb	r2, [r3, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    667c:	687b      	ldr	r3, [r7, #4]
    667e:	7b1b      	ldrb	r3, [r3, #12]
    6680:	1c1a      	adds	r2, r3, #0
    6682:	230f      	movs	r3, #15
    6684:	4013      	ands	r3, r2
    6686:	b2da      	uxtb	r2, r3
    6688:	68fb      	ldr	r3, [r7, #12]
    668a:	0110      	lsls	r0, r2, #4
    668c:	7c5a      	ldrb	r2, [r3, #17]
    668e:	210f      	movs	r1, #15
    6690:	400a      	ands	r2, r1
    6692:	1c11      	adds	r1, r2, #0
    6694:	1c02      	adds	r2, r0, #0
    6696:	430a      	orrs	r2, r1
    6698:	745a      	strb	r2, [r3, #17]

	memcpy(frame->payload, req->data, req->size);
    669a:	68fb      	ldr	r3, [r7, #12]
    669c:	2281      	movs	r2, #129	; 0x81
    669e:	5c9a      	ldrb	r2, [r3, r2]
    66a0:	2182      	movs	r1, #130	; 0x82
    66a2:	5c59      	ldrb	r1, [r3, r1]
    66a4:	0209      	lsls	r1, r1, #8
    66a6:	430a      	orrs	r2, r1
    66a8:	2183      	movs	r1, #131	; 0x83
    66aa:	5c59      	ldrb	r1, [r3, r1]
    66ac:	0409      	lsls	r1, r1, #16
    66ae:	430a      	orrs	r2, r1
    66b0:	2184      	movs	r1, #132	; 0x84
    66b2:	5c5b      	ldrb	r3, [r3, r1]
    66b4:	061b      	lsls	r3, r3, #24
    66b6:	4313      	orrs	r3, r2
    66b8:	0018      	movs	r0, r3
    66ba:	687b      	ldr	r3, [r7, #4]
    66bc:	6919      	ldr	r1, [r3, #16]
    66be:	687b      	ldr	r3, [r7, #4]
    66c0:	7d1b      	ldrb	r3, [r3, #20]
    66c2:	001a      	movs	r2, r3
    66c4:	4b0b      	ldr	r3, [pc, #44]	; (66f4 <nwkDataReqSendFrame+0x220>)
    66c6:	4798      	blx	r3
	frame->size += req->size;
    66c8:	68fb      	ldr	r3, [r7, #12]
    66ca:	785a      	ldrb	r2, [r3, #1]
    66cc:	687b      	ldr	r3, [r7, #4]
    66ce:	7d1b      	ldrb	r3, [r3, #20]
    66d0:	18d3      	adds	r3, r2, r3
    66d2:	b2da      	uxtb	r2, r3
    66d4:	68fb      	ldr	r3, [r7, #12]
    66d6:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(frame);
    66d8:	68fb      	ldr	r3, [r7, #12]
    66da:	0018      	movs	r0, r3
    66dc:	4b06      	ldr	r3, [pc, #24]	; (66f8 <nwkDataReqSendFrame+0x224>)
    66de:	4798      	blx	r3
}
    66e0:	46bd      	mov	sp, r7
    66e2:	b005      	add	sp, #20
    66e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66e6:	46c0      	nop			; (mov r8, r8)
    66e8:	00006855 	.word	0x00006855
    66ec:	000066fd 	.word	0x000066fd
    66f0:	2000104c 	.word	0x2000104c
    66f4:	0000c209 	.word	0x0000c209
    66f8:	00008935 	.word	0x00008935

000066fc <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    66fc:	b580      	push	{r7, lr}
    66fe:	b084      	sub	sp, #16
    6700:	af00      	add	r7, sp, #0
    6702:	6078      	str	r0, [r7, #4]
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    6704:	4b12      	ldr	r3, [pc, #72]	; (6750 <nwkDataReqTxConf+0x54>)
    6706:	681b      	ldr	r3, [r3, #0]
    6708:	60fb      	str	r3, [r7, #12]
    670a:	e015      	b.n	6738 <nwkDataReqTxConf+0x3c>
		if (req->frame == frame) {
    670c:	68fb      	ldr	r3, [r7, #12]
    670e:	685a      	ldr	r2, [r3, #4]
    6710:	687b      	ldr	r3, [r7, #4]
    6712:	429a      	cmp	r2, r3
    6714:	d10d      	bne.n	6732 <nwkDataReqTxConf+0x36>
			req->status = frame->tx.status;
    6716:	687b      	ldr	r3, [r7, #4]
    6718:	2285      	movs	r2, #133	; 0x85
    671a:	5c9a      	ldrb	r2, [r3, r2]
    671c:	68fb      	ldr	r3, [r7, #12]
    671e:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    6720:	687b      	ldr	r3, [r7, #4]
    6722:	2288      	movs	r2, #136	; 0x88
    6724:	5c9a      	ldrb	r2, [r3, r2]
    6726:	68fb      	ldr	r3, [r7, #12]
    6728:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    672a:	68fb      	ldr	r3, [r7, #12]
    672c:	2202      	movs	r2, #2
    672e:	721a      	strb	r2, [r3, #8]
			break;
    6730:	e005      	b.n	673e <nwkDataReqTxConf+0x42>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    6732:	68fb      	ldr	r3, [r7, #12]
    6734:	681b      	ldr	r3, [r3, #0]
    6736:	60fb      	str	r3, [r7, #12]
    6738:	68fb      	ldr	r3, [r7, #12]
    673a:	2b00      	cmp	r3, #0
    673c:	d1e6      	bne.n	670c <nwkDataReqTxConf+0x10>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    673e:	687b      	ldr	r3, [r7, #4]
    6740:	0018      	movs	r0, r3
    6742:	4b04      	ldr	r3, [pc, #16]	; (6754 <nwkDataReqTxConf+0x58>)
    6744:	4798      	blx	r3
}
    6746:	46c0      	nop			; (mov r8, r8)
    6748:	46bd      	mov	sp, r7
    674a:	b004      	add	sp, #16
    674c:	bd80      	pop	{r7, pc}
    674e:	46c0      	nop			; (mov r8, r8)
    6750:	20000348 	.word	0x20000348
    6754:	00006955 	.word	0x00006955

00006758 <nwkDataReqConfirm>:
/*************************************************************************//**
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
    6758:	b580      	push	{r7, lr}
    675a:	b084      	sub	sp, #16
    675c:	af00      	add	r7, sp, #0
    675e:	6078      	str	r0, [r7, #4]
	if (nwkDataReqQueue == req) {
    6760:	4b16      	ldr	r3, [pc, #88]	; (67bc <nwkDataReqConfirm+0x64>)
    6762:	681a      	ldr	r2, [r3, #0]
    6764:	687b      	ldr	r3, [r7, #4]
    6766:	429a      	cmp	r2, r3
    6768:	d105      	bne.n	6776 <nwkDataReqConfirm+0x1e>
		nwkDataReqQueue = nwkDataReqQueue->next;
    676a:	4b14      	ldr	r3, [pc, #80]	; (67bc <nwkDataReqConfirm+0x64>)
    676c:	681b      	ldr	r3, [r3, #0]
    676e:	681a      	ldr	r2, [r3, #0]
    6770:	4b12      	ldr	r3, [pc, #72]	; (67bc <nwkDataReqConfirm+0x64>)
    6772:	601a      	str	r2, [r3, #0]
    6774:	e010      	b.n	6798 <nwkDataReqConfirm+0x40>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
    6776:	4b11      	ldr	r3, [pc, #68]	; (67bc <nwkDataReqConfirm+0x64>)
    6778:	681b      	ldr	r3, [r3, #0]
    677a:	60fb      	str	r3, [r7, #12]
		while (prev->next != req) {
    677c:	e002      	b.n	6784 <nwkDataReqConfirm+0x2c>
			prev = prev->next;
    677e:	68fb      	ldr	r3, [r7, #12]
    6780:	681b      	ldr	r3, [r3, #0]
    6782:	60fb      	str	r3, [r7, #12]
{
	if (nwkDataReqQueue == req) {
		nwkDataReqQueue = nwkDataReqQueue->next;
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    6784:	68fb      	ldr	r3, [r7, #12]
    6786:	681a      	ldr	r2, [r3, #0]
    6788:	687b      	ldr	r3, [r7, #4]
    678a:	429a      	cmp	r2, r3
    678c:	d1f7      	bne.n	677e <nwkDataReqConfirm+0x26>
			prev = prev->next;
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    678e:	68fb      	ldr	r3, [r7, #12]
    6790:	681b      	ldr	r3, [r3, #0]
    6792:	681a      	ldr	r2, [r3, #0]
    6794:	68fb      	ldr	r3, [r7, #12]
    6796:	601a      	str	r2, [r3, #0]
	}

	nwkIb.lock--;
    6798:	4b09      	ldr	r3, [pc, #36]	; (67c0 <nwkDataReqConfirm+0x68>)
    679a:	2258      	movs	r2, #88	; 0x58
    679c:	5a9b      	ldrh	r3, [r3, r2]
    679e:	3b01      	subs	r3, #1
    67a0:	b299      	uxth	r1, r3
    67a2:	4b07      	ldr	r3, [pc, #28]	; (67c0 <nwkDataReqConfirm+0x68>)
    67a4:	2258      	movs	r2, #88	; 0x58
    67a6:	5299      	strh	r1, [r3, r2]
	req->confirm(req);
    67a8:	687b      	ldr	r3, [r7, #4]
    67aa:	699b      	ldr	r3, [r3, #24]
    67ac:	687a      	ldr	r2, [r7, #4]
    67ae:	0010      	movs	r0, r2
    67b0:	4798      	blx	r3
}
    67b2:	46c0      	nop			; (mov r8, r8)
    67b4:	46bd      	mov	sp, r7
    67b6:	b004      	add	sp, #16
    67b8:	bd80      	pop	{r7, pc}
    67ba:	46c0      	nop			; (mov r8, r8)
    67bc:	20000348 	.word	0x20000348
    67c0:	2000104c 	.word	0x2000104c

000067c4 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    67c4:	b580      	push	{r7, lr}
    67c6:	b082      	sub	sp, #8
    67c8:	af00      	add	r7, sp, #0
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    67ca:	4b10      	ldr	r3, [pc, #64]	; (680c <nwkDataReqTaskHandler+0x48>)
    67cc:	681b      	ldr	r3, [r3, #0]
    67ce:	607b      	str	r3, [r7, #4]
    67d0:	e016      	b.n	6800 <nwkDataReqTaskHandler+0x3c>
		switch (req->state) {
    67d2:	687b      	ldr	r3, [r7, #4]
    67d4:	7a1b      	ldrb	r3, [r3, #8]
    67d6:	2b01      	cmp	r3, #1
    67d8:	d00e      	beq.n	67f8 <nwkDataReqTaskHandler+0x34>
    67da:	2b02      	cmp	r3, #2
    67dc:	d007      	beq.n	67ee <nwkDataReqTaskHandler+0x2a>
    67de:	2b00      	cmp	r3, #0
    67e0:	d000      	beq.n	67e4 <nwkDataReqTaskHandler+0x20>
			return;
		}
		break;

		default:
			break;
    67e2:	e00a      	b.n	67fa <nwkDataReqTaskHandler+0x36>
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
		switch (req->state) {
		case NWK_DATA_REQ_STATE_INITIAL:
		{
			nwkDataReqSendFrame(req);
    67e4:	687b      	ldr	r3, [r7, #4]
    67e6:	0018      	movs	r0, r3
    67e8:	4b09      	ldr	r3, [pc, #36]	; (6810 <nwkDataReqTaskHandler+0x4c>)
    67ea:	4798      	blx	r3
			return;
    67ec:	e00b      	b.n	6806 <nwkDataReqTaskHandler+0x42>
		case NWK_DATA_REQ_STATE_WAIT_CONF:
			break;

		case NWK_DATA_REQ_STATE_CONFIRM:
		{
			nwkDataReqConfirm(req);
    67ee:	687b      	ldr	r3, [r7, #4]
    67f0:	0018      	movs	r0, r3
    67f2:	4b08      	ldr	r3, [pc, #32]	; (6814 <nwkDataReqTaskHandler+0x50>)
    67f4:	4798      	blx	r3
			return;
    67f6:	e006      	b.n	6806 <nwkDataReqTaskHandler+0x42>
			return;
		}
		break;

		case NWK_DATA_REQ_STATE_WAIT_CONF:
			break;
    67f8:	46c0      	nop			; (mov r8, r8)
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    67fa:	687b      	ldr	r3, [r7, #4]
    67fc:	681b      	ldr	r3, [r3, #0]
    67fe:	607b      	str	r3, [r7, #4]
    6800:	687b      	ldr	r3, [r7, #4]
    6802:	2b00      	cmp	r3, #0
    6804:	d1e5      	bne.n	67d2 <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    6806:	46bd      	mov	sp, r7
    6808:	b002      	add	sp, #8
    680a:	bd80      	pop	{r7, pc}
    680c:	20000348 	.word	0x20000348
    6810:	000064d5 	.word	0x000064d5
    6814:	00006759 	.word	0x00006759

00006818 <nwkFrameInit>:

/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    6818:	b580      	push	{r7, lr}
    681a:	b082      	sub	sp, #8
    681c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    681e:	1dfb      	adds	r3, r7, #7
    6820:	2200      	movs	r2, #0
    6822:	701a      	strb	r2, [r3, #0]
    6824:	e00b      	b.n	683e <nwkFrameInit+0x26>
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    6826:	1dfb      	adds	r3, r7, #7
    6828:	781a      	ldrb	r2, [r3, #0]
    682a:	4b09      	ldr	r3, [pc, #36]	; (6850 <nwkFrameInit+0x38>)
    682c:	218d      	movs	r1, #141	; 0x8d
    682e:	434a      	muls	r2, r1
    6830:	2100      	movs	r1, #0
    6832:	54d1      	strb	r1, [r2, r3]
/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    6834:	1dfb      	adds	r3, r7, #7
    6836:	781a      	ldrb	r2, [r3, #0]
    6838:	1dfb      	adds	r3, r7, #7
    683a:	3201      	adds	r2, #1
    683c:	701a      	strb	r2, [r3, #0]
    683e:	1dfb      	adds	r3, r7, #7
    6840:	781b      	ldrb	r3, [r3, #0]
    6842:	2b09      	cmp	r3, #9
    6844:	d9ef      	bls.n	6826 <nwkFrameInit+0xe>
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
	}
}
    6846:	46c0      	nop			; (mov r8, r8)
    6848:	46bd      	mov	sp, r7
    684a:	b002      	add	sp, #8
    684c:	bd80      	pop	{r7, pc}
    684e:	46c0      	nop			; (mov r8, r8)
    6850:	2000034c 	.word	0x2000034c

00006854 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    6854:	b590      	push	{r4, r7, lr}
    6856:	b083      	sub	sp, #12
    6858:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    685a:	1dfb      	adds	r3, r7, #7
    685c:	2200      	movs	r2, #0
    685e:	701a      	strb	r2, [r3, #0]
    6860:	e068      	b.n	6934 <nwkFrameAlloc+0xe0>
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    6862:	1dfb      	adds	r3, r7, #7
    6864:	781a      	ldrb	r2, [r3, #0]
    6866:	4b38      	ldr	r3, [pc, #224]	; (6948 <nwkFrameAlloc+0xf4>)
    6868:	218d      	movs	r1, #141	; 0x8d
    686a:	434a      	muls	r2, r1
    686c:	5cd3      	ldrb	r3, [r2, r3]
    686e:	2b00      	cmp	r3, #0
    6870:	d15b      	bne.n	692a <nwkFrameAlloc+0xd6>
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    6872:	1dfb      	adds	r3, r7, #7
    6874:	781b      	ldrb	r3, [r3, #0]
    6876:	228d      	movs	r2, #141	; 0x8d
    6878:	435a      	muls	r2, r3
    687a:	4b33      	ldr	r3, [pc, #204]	; (6948 <nwkFrameAlloc+0xf4>)
    687c:	18d3      	adds	r3, r2, r3
    687e:	228d      	movs	r2, #141	; 0x8d
    6880:	2100      	movs	r1, #0
    6882:	0018      	movs	r0, r3
    6884:	4b31      	ldr	r3, [pc, #196]	; (694c <nwkFrameAlloc+0xf8>)
    6886:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    6888:	1dfb      	adds	r3, r7, #7
    688a:	781b      	ldrb	r3, [r3, #0]
    688c:	4a2e      	ldr	r2, [pc, #184]	; (6948 <nwkFrameAlloc+0xf4>)
    688e:	218d      	movs	r1, #141	; 0x8d
    6890:	434b      	muls	r3, r1
    6892:	18d3      	adds	r3, r2, r3
    6894:	3301      	adds	r3, #1
    6896:	2210      	movs	r2, #16
    6898:	701a      	strb	r2, [r3, #0]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    689a:	1dfb      	adds	r3, r7, #7
    689c:	781b      	ldrb	r3, [r3, #0]
    689e:	1dfa      	adds	r2, r7, #7
    68a0:	7812      	ldrb	r2, [r2, #0]
    68a2:	218d      	movs	r1, #141	; 0x8d
    68a4:	4351      	muls	r1, r2
    68a6:	4a28      	ldr	r2, [pc, #160]	; (6948 <nwkFrameAlloc+0xf4>)
    68a8:	188a      	adds	r2, r1, r2
    68aa:	3202      	adds	r2, #2
    68ac:	3210      	adds	r2, #16
    68ae:	4926      	ldr	r1, [pc, #152]	; (6948 <nwkFrameAlloc+0xf4>)
    68b0:	2080      	movs	r0, #128	; 0x80
    68b2:	248d      	movs	r4, #141	; 0x8d
    68b4:	4363      	muls	r3, r4
    68b6:	18cb      	adds	r3, r1, r3
    68b8:	181b      	adds	r3, r3, r0
    68ba:	3301      	adds	r3, #1
    68bc:	21ff      	movs	r1, #255	; 0xff
    68be:	4011      	ands	r1, r2
    68c0:	000c      	movs	r4, r1
    68c2:	7819      	ldrb	r1, [r3, #0]
    68c4:	2000      	movs	r0, #0
    68c6:	4001      	ands	r1, r0
    68c8:	1c08      	adds	r0, r1, #0
    68ca:	1c21      	adds	r1, r4, #0
    68cc:	4301      	orrs	r1, r0
    68ce:	7019      	strb	r1, [r3, #0]
    68d0:	0a11      	lsrs	r1, r2, #8
    68d2:	20ff      	movs	r0, #255	; 0xff
    68d4:	4001      	ands	r1, r0
    68d6:	000c      	movs	r4, r1
    68d8:	7859      	ldrb	r1, [r3, #1]
    68da:	2000      	movs	r0, #0
    68dc:	4001      	ands	r1, r0
    68de:	1c08      	adds	r0, r1, #0
    68e0:	1c21      	adds	r1, r4, #0
    68e2:	4301      	orrs	r1, r0
    68e4:	7059      	strb	r1, [r3, #1]
    68e6:	0c11      	lsrs	r1, r2, #16
    68e8:	20ff      	movs	r0, #255	; 0xff
    68ea:	4001      	ands	r1, r0
    68ec:	000c      	movs	r4, r1
    68ee:	7899      	ldrb	r1, [r3, #2]
    68f0:	2000      	movs	r0, #0
    68f2:	4001      	ands	r1, r0
    68f4:	1c08      	adds	r0, r1, #0
    68f6:	1c21      	adds	r1, r4, #0
    68f8:	4301      	orrs	r1, r0
    68fa:	7099      	strb	r1, [r3, #2]
    68fc:	0e10      	lsrs	r0, r2, #24
    68fe:	78da      	ldrb	r2, [r3, #3]
    6900:	2100      	movs	r1, #0
    6902:	400a      	ands	r2, r1
    6904:	1c11      	adds	r1, r2, #0
    6906:	1c02      	adds	r2, r0, #0
    6908:	430a      	orrs	r2, r1
    690a:	70da      	strb	r2, [r3, #3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    690c:	4b10      	ldr	r3, [pc, #64]	; (6950 <nwkFrameAlloc+0xfc>)
    690e:	2258      	movs	r2, #88	; 0x58
    6910:	5a9b      	ldrh	r3, [r3, r2]
    6912:	3301      	adds	r3, #1
    6914:	b299      	uxth	r1, r3
    6916:	4b0e      	ldr	r3, [pc, #56]	; (6950 <nwkFrameAlloc+0xfc>)
    6918:	2258      	movs	r2, #88	; 0x58
    691a:	5299      	strh	r1, [r3, r2]
			return &nwkFrameFrames[i];
    691c:	1dfb      	adds	r3, r7, #7
    691e:	781b      	ldrb	r3, [r3, #0]
    6920:	228d      	movs	r2, #141	; 0x8d
    6922:	435a      	muls	r2, r3
    6924:	4b08      	ldr	r3, [pc, #32]	; (6948 <nwkFrameAlloc+0xf4>)
    6926:	18d3      	adds	r3, r2, r3
    6928:	e009      	b.n	693e <nwkFrameAlloc+0xea>
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    692a:	1dfb      	adds	r3, r7, #7
    692c:	781a      	ldrb	r2, [r3, #0]
    692e:	1dfb      	adds	r3, r7, #7
    6930:	3201      	adds	r2, #1
    6932:	701a      	strb	r2, [r3, #0]
    6934:	1dfb      	adds	r3, r7, #7
    6936:	781b      	ldrb	r3, [r3, #0]
    6938:	2b09      	cmp	r3, #9
    693a:	d992      	bls.n	6862 <nwkFrameAlloc+0xe>
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    693c:	2300      	movs	r3, #0
}
    693e:	0018      	movs	r0, r3
    6940:	46bd      	mov	sp, r7
    6942:	b003      	add	sp, #12
    6944:	bd90      	pop	{r4, r7, pc}
    6946:	46c0      	nop			; (mov r8, r8)
    6948:	2000034c 	.word	0x2000034c
    694c:	0000c21b 	.word	0x0000c21b
    6950:	2000104c 	.word	0x2000104c

00006954 <nwkFrameFree>:
/*************************************************************************//**
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
    6954:	b580      	push	{r7, lr}
    6956:	b082      	sub	sp, #8
    6958:	af00      	add	r7, sp, #0
    695a:	6078      	str	r0, [r7, #4]
	frame->state = NWK_FRAME_STATE_FREE;
    695c:	687b      	ldr	r3, [r7, #4]
    695e:	2200      	movs	r2, #0
    6960:	701a      	strb	r2, [r3, #0]
	nwkIb.lock--;
    6962:	4b06      	ldr	r3, [pc, #24]	; (697c <nwkFrameFree+0x28>)
    6964:	2258      	movs	r2, #88	; 0x58
    6966:	5a9b      	ldrh	r3, [r3, r2]
    6968:	3b01      	subs	r3, #1
    696a:	b299      	uxth	r1, r3
    696c:	4b03      	ldr	r3, [pc, #12]	; (697c <nwkFrameFree+0x28>)
    696e:	2258      	movs	r2, #88	; 0x58
    6970:	5299      	strh	r1, [r3, r2]
}
    6972:	46c0      	nop			; (mov r8, r8)
    6974:	46bd      	mov	sp, r7
    6976:	b002      	add	sp, #8
    6978:	bd80      	pop	{r7, pc}
    697a:	46c0      	nop			; (mov r8, r8)
    697c:	2000104c 	.word	0x2000104c

00006980 <nwkFrameNext>:
* frame
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
    6980:	b580      	push	{r7, lr}
    6982:	b082      	sub	sp, #8
    6984:	af00      	add	r7, sp, #0
    6986:	6078      	str	r0, [r7, #4]
	if (NULL == frame) {
    6988:	687b      	ldr	r3, [r7, #4]
    698a:	2b00      	cmp	r3, #0
    698c:	d102      	bne.n	6994 <nwkFrameNext+0x14>
		frame = nwkFrameFrames;
    698e:	4b0c      	ldr	r3, [pc, #48]	; (69c0 <nwkFrameNext+0x40>)
    6990:	607b      	str	r3, [r7, #4]
    6992:	e00c      	b.n	69ae <nwkFrameNext+0x2e>
	} else {
		frame++;
    6994:	687b      	ldr	r3, [r7, #4]
    6996:	338d      	adds	r3, #141	; 0x8d
    6998:	607b      	str	r3, [r7, #4]
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    699a:	e008      	b.n	69ae <nwkFrameNext+0x2e>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    699c:	687b      	ldr	r3, [r7, #4]
    699e:	781b      	ldrb	r3, [r3, #0]
    69a0:	2b00      	cmp	r3, #0
    69a2:	d001      	beq.n	69a8 <nwkFrameNext+0x28>
			return frame;
    69a4:	687b      	ldr	r3, [r7, #4]
    69a6:	e007      	b.n	69b8 <nwkFrameNext+0x38>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    69a8:	687b      	ldr	r3, [r7, #4]
    69aa:	338d      	adds	r3, #141	; 0x8d
    69ac:	607b      	str	r3, [r7, #4]
    69ae:	687a      	ldr	r2, [r7, #4]
    69b0:	4b04      	ldr	r3, [pc, #16]	; (69c4 <nwkFrameNext+0x44>)
    69b2:	429a      	cmp	r2, r3
    69b4:	d3f2      	bcc.n	699c <nwkFrameNext+0x1c>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    69b6:	2300      	movs	r3, #0
}
    69b8:	0018      	movs	r0, r3
    69ba:	46bd      	mov	sp, r7
    69bc:	b002      	add	sp, #8
    69be:	bd80      	pop	{r7, pc}
    69c0:	2000034c 	.word	0x2000034c
    69c4:	200008ce 	.word	0x200008ce

000069c8 <nwkFrameCommandInit>:
/*************************************************************************//**
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    69c8:	b590      	push	{r4, r7, lr}
    69ca:	b083      	sub	sp, #12
    69cc:	af00      	add	r7, sp, #0
    69ce:	6078      	str	r0, [r7, #4]
	frame->tx.status = NWK_SUCCESS_STATUS;
    69d0:	687b      	ldr	r3, [r7, #4]
    69d2:	2285      	movs	r2, #133	; 0x85
    69d4:	2100      	movs	r1, #0
    69d6:	5499      	strb	r1, [r3, r2]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    69d8:	4b12      	ldr	r3, [pc, #72]	; (6a24 <nwkFrameCommandInit+0x5c>)
    69da:	791b      	ldrb	r3, [r3, #4]
    69dc:	3301      	adds	r3, #1
    69de:	b2da      	uxtb	r2, r3
    69e0:	4b10      	ldr	r3, [pc, #64]	; (6a24 <nwkFrameCommandInit+0x5c>)
    69e2:	711a      	strb	r2, [r3, #4]
    69e4:	4b0f      	ldr	r3, [pc, #60]	; (6a24 <nwkFrameCommandInit+0x5c>)
    69e6:	791a      	ldrb	r2, [r3, #4]
    69e8:	687b      	ldr	r3, [r7, #4]
    69ea:	731a      	strb	r2, [r3, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    69ec:	4b0d      	ldr	r3, [pc, #52]	; (6a24 <nwkFrameCommandInit+0x5c>)
    69ee:	881a      	ldrh	r2, [r3, #0]
    69f0:	687b      	ldr	r3, [r7, #4]
    69f2:	330d      	adds	r3, #13
    69f4:	21ff      	movs	r1, #255	; 0xff
    69f6:	4011      	ands	r1, r2
    69f8:	000c      	movs	r4, r1
    69fa:	7819      	ldrb	r1, [r3, #0]
    69fc:	2000      	movs	r0, #0
    69fe:	4001      	ands	r1, r0
    6a00:	1c08      	adds	r0, r1, #0
    6a02:	1c21      	adds	r1, r4, #0
    6a04:	4301      	orrs	r1, r0
    6a06:	7019      	strb	r1, [r3, #0]
    6a08:	0a12      	lsrs	r2, r2, #8
    6a0a:	b290      	uxth	r0, r2
    6a0c:	785a      	ldrb	r2, [r3, #1]
    6a0e:	2100      	movs	r1, #0
    6a10:	400a      	ands	r2, r1
    6a12:	1c11      	adds	r1, r2, #0
    6a14:	1c02      	adds	r2, r0, #0
    6a16:	430a      	orrs	r2, r1
    6a18:	705a      	strb	r2, [r3, #1]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    6a1a:	46c0      	nop			; (mov r8, r8)
    6a1c:	46bd      	mov	sp, r7
    6a1e:	b003      	add	sp, #12
    6a20:	bd90      	pop	{r4, r7, pc}
    6a22:	46c0      	nop			; (mov r8, r8)
    6a24:	2000104c 	.word	0x2000104c

00006a28 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    6a28:	b580      	push	{r7, lr}
    6a2a:	b082      	sub	sp, #8
    6a2c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    6a2e:	1dfb      	adds	r3, r7, #7
    6a30:	2200      	movs	r2, #0
    6a32:	701a      	strb	r2, [r3, #0]
    6a34:	e01d      	b.n	6a72 <nwkRouteInit+0x4a>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    6a36:	1dfb      	adds	r3, r7, #7
    6a38:	781b      	ldrb	r3, [r3, #0]
    6a3a:	4a12      	ldr	r2, [pc, #72]	; (6a84 <nwkRouteInit+0x5c>)
    6a3c:	00db      	lsls	r3, r3, #3
    6a3e:	18d3      	adds	r3, r2, r3
    6a40:	3302      	adds	r3, #2
    6a42:	2201      	movs	r2, #1
    6a44:	4252      	negs	r2, r2
    6a46:	801a      	strh	r2, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    6a48:	1dfb      	adds	r3, r7, #7
    6a4a:	781a      	ldrb	r2, [r3, #0]
    6a4c:	4b0d      	ldr	r3, [pc, #52]	; (6a84 <nwkRouteInit+0x5c>)
    6a4e:	00d2      	lsls	r2, r2, #3
    6a50:	5cd1      	ldrb	r1, [r2, r3]
    6a52:	2001      	movs	r0, #1
    6a54:	4381      	bics	r1, r0
    6a56:	54d1      	strb	r1, [r2, r3]
		nwkRouteTable[i].rank = 0;
    6a58:	1dfb      	adds	r3, r7, #7
    6a5a:	781b      	ldrb	r3, [r3, #0]
    6a5c:	4a09      	ldr	r2, [pc, #36]	; (6a84 <nwkRouteInit+0x5c>)
    6a5e:	00db      	lsls	r3, r3, #3
    6a60:	18d3      	adds	r3, r2, r3
    6a62:	3306      	adds	r3, #6
    6a64:	2200      	movs	r2, #0
    6a66:	701a      	strb	r2, [r3, #0]
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    6a68:	1dfb      	adds	r3, r7, #7
    6a6a:	781a      	ldrb	r2, [r3, #0]
    6a6c:	1dfb      	adds	r3, r7, #7
    6a6e:	3201      	adds	r2, #1
    6a70:	701a      	strb	r2, [r3, #0]
    6a72:	1dfb      	adds	r3, r7, #7
    6a74:	781b      	ldrb	r3, [r3, #0]
    6a76:	2b63      	cmp	r3, #99	; 0x63
    6a78:	d9dd      	bls.n	6a36 <nwkRouteInit+0xe>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    6a7a:	46c0      	nop			; (mov r8, r8)
    6a7c:	46bd      	mov	sp, r7
    6a7e:	b002      	add	sp, #8
    6a80:	bd80      	pop	{r7, pc}
    6a82:	46c0      	nop			; (mov r8, r8)
    6a84:	200008d0 	.word	0x200008d0

00006a88 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    6a88:	b580      	push	{r7, lr}
    6a8a:	b084      	sub	sp, #16
    6a8c:	af00      	add	r7, sp, #0
    6a8e:	0002      	movs	r2, r0
    6a90:	1dbb      	adds	r3, r7, #6
    6a92:	801a      	strh	r2, [r3, #0]
    6a94:	1d7b      	adds	r3, r7, #5
    6a96:	1c0a      	adds	r2, r1, #0
    6a98:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    6a9a:	230f      	movs	r3, #15
    6a9c:	18fb      	adds	r3, r7, r3
    6a9e:	2200      	movs	r2, #0
    6aa0:	701a      	strb	r2, [r3, #0]
    6aa2:	e027      	b.n	6af4 <NWK_RouteFindEntry+0x6c>
		if (nwkRouteTable[i].dstAddr == dst &&
    6aa4:	230f      	movs	r3, #15
    6aa6:	18fb      	adds	r3, r7, r3
    6aa8:	781b      	ldrb	r3, [r3, #0]
    6aaa:	4a17      	ldr	r2, [pc, #92]	; (6b08 <NWK_RouteFindEntry+0x80>)
    6aac:	00db      	lsls	r3, r3, #3
    6aae:	18d3      	adds	r3, r2, r3
    6ab0:	3302      	adds	r3, #2
    6ab2:	881b      	ldrh	r3, [r3, #0]
    6ab4:	1dba      	adds	r2, r7, #6
    6ab6:	8812      	ldrh	r2, [r2, #0]
    6ab8:	429a      	cmp	r2, r3
    6aba:	d114      	bne.n	6ae6 <NWK_RouteFindEntry+0x5e>
				nwkRouteTable[i].multicast == multicast) {
    6abc:	230f      	movs	r3, #15
    6abe:	18fb      	adds	r3, r7, r3
    6ac0:	781a      	ldrb	r2, [r3, #0]
    6ac2:	4b11      	ldr	r3, [pc, #68]	; (6b08 <NWK_RouteFindEntry+0x80>)
    6ac4:	00d2      	lsls	r2, r2, #3
    6ac6:	5cd3      	ldrb	r3, [r2, r3]
    6ac8:	079b      	lsls	r3, r3, #30
    6aca:	0fdb      	lsrs	r3, r3, #31
    6acc:	b2db      	uxtb	r3, r3
    6ace:	001a      	movs	r2, r3
    6ad0:	1d7b      	adds	r3, r7, #5
    6ad2:	781b      	ldrb	r3, [r3, #0]
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    6ad4:	429a      	cmp	r2, r3
    6ad6:	d106      	bne.n	6ae6 <NWK_RouteFindEntry+0x5e>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    6ad8:	230f      	movs	r3, #15
    6ada:	18fb      	adds	r3, r7, r3
    6adc:	781b      	ldrb	r3, [r3, #0]
    6ade:	00da      	lsls	r2, r3, #3
    6ae0:	4b09      	ldr	r3, [pc, #36]	; (6b08 <NWK_RouteFindEntry+0x80>)
    6ae2:	18d3      	adds	r3, r2, r3
    6ae4:	e00c      	b.n	6b00 <NWK_RouteFindEntry+0x78>

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    6ae6:	230f      	movs	r3, #15
    6ae8:	18fb      	adds	r3, r7, r3
    6aea:	781a      	ldrb	r2, [r3, #0]
    6aec:	230f      	movs	r3, #15
    6aee:	18fb      	adds	r3, r7, r3
    6af0:	3201      	adds	r2, #1
    6af2:	701a      	strb	r2, [r3, #0]
    6af4:	230f      	movs	r3, #15
    6af6:	18fb      	adds	r3, r7, r3
    6af8:	781b      	ldrb	r3, [r3, #0]
    6afa:	2b63      	cmp	r3, #99	; 0x63
    6afc:	d9d2      	bls.n	6aa4 <NWK_RouteFindEntry+0x1c>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    6afe:	2300      	movs	r3, #0
}
    6b00:	0018      	movs	r0, r3
    6b02:	46bd      	mov	sp, r7
    6b04:	b004      	add	sp, #16
    6b06:	bd80      	pop	{r7, pc}
    6b08:	200008d0 	.word	0x200008d0

00006b0c <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    6b0c:	b580      	push	{r7, lr}
    6b0e:	b084      	sub	sp, #16
    6b10:	af00      	add	r7, sp, #0
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    6b12:	4b22      	ldr	r3, [pc, #136]	; (6b9c <NWK_RouteNewEntry+0x90>)
    6b14:	60fb      	str	r3, [r7, #12]
	NWK_RouteTableEntry_t *entry = NULL;
    6b16:	2300      	movs	r3, #0
    6b18:	60bb      	str	r3, [r7, #8]

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    6b1a:	1dfb      	adds	r3, r7, #7
    6b1c:	2200      	movs	r2, #0
    6b1e:	701a      	strb	r2, [r3, #0]
    6b20:	e022      	b.n	6b68 <NWK_RouteNewEntry+0x5c>
		if (iter->fixed) {
    6b22:	68fb      	ldr	r3, [r7, #12]
    6b24:	781b      	ldrb	r3, [r3, #0]
    6b26:	2201      	movs	r2, #1
    6b28:	4013      	ands	r3, r2
    6b2a:	b2db      	uxtb	r3, r3
    6b2c:	2b00      	cmp	r3, #0
    6b2e:	d112      	bne.n	6b56 <NWK_RouteNewEntry+0x4a>
			continue;
		}

		if (0 == iter->rank) {
    6b30:	68fb      	ldr	r3, [r7, #12]
    6b32:	799b      	ldrb	r3, [r3, #6]
    6b34:	2b00      	cmp	r3, #0
    6b36:	d102      	bne.n	6b3e <NWK_RouteNewEntry+0x32>
			entry = iter;
    6b38:	68fb      	ldr	r3, [r7, #12]
    6b3a:	60bb      	str	r3, [r7, #8]
			break;
    6b3c:	e018      	b.n	6b70 <NWK_RouteNewEntry+0x64>
		}

		if (NULL == entry || iter->rank < entry->rank) {
    6b3e:	68bb      	ldr	r3, [r7, #8]
    6b40:	2b00      	cmp	r3, #0
    6b42:	d005      	beq.n	6b50 <NWK_RouteNewEntry+0x44>
    6b44:	68fb      	ldr	r3, [r7, #12]
    6b46:	799a      	ldrb	r2, [r3, #6]
    6b48:	68bb      	ldr	r3, [r7, #8]
    6b4a:	799b      	ldrb	r3, [r3, #6]
    6b4c:	429a      	cmp	r2, r3
    6b4e:	d203      	bcs.n	6b58 <NWK_RouteNewEntry+0x4c>
			entry = iter;
    6b50:	68fb      	ldr	r3, [r7, #12]
    6b52:	60bb      	str	r3, [r7, #8]
    6b54:	e000      	b.n	6b58 <NWK_RouteNewEntry+0x4c>
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
		if (iter->fixed) {
			continue;
    6b56:	46c0      	nop			; (mov r8, r8)
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    6b58:	1dfb      	adds	r3, r7, #7
    6b5a:	781a      	ldrb	r2, [r3, #0]
    6b5c:	1dfb      	adds	r3, r7, #7
    6b5e:	3201      	adds	r2, #1
    6b60:	701a      	strb	r2, [r3, #0]
    6b62:	68fb      	ldr	r3, [r7, #12]
    6b64:	3308      	adds	r3, #8
    6b66:	60fb      	str	r3, [r7, #12]
    6b68:	1dfb      	adds	r3, r7, #7
    6b6a:	781b      	ldrb	r3, [r3, #0]
    6b6c:	2b63      	cmp	r3, #99	; 0x63
    6b6e:	d9d8      	bls.n	6b22 <NWK_RouteNewEntry+0x16>
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    6b70:	68bb      	ldr	r3, [r7, #8]
    6b72:	781a      	ldrb	r2, [r3, #0]
    6b74:	2102      	movs	r1, #2
    6b76:	438a      	bics	r2, r1
    6b78:	701a      	strb	r2, [r3, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    6b7a:	68bb      	ldr	r3, [r7, #8]
    6b7c:	781a      	ldrb	r2, [r3, #0]
    6b7e:	210f      	movs	r1, #15
    6b80:	400a      	ands	r2, r1
    6b82:	1c11      	adds	r1, r2, #0
    6b84:	2230      	movs	r2, #48	; 0x30
    6b86:	430a      	orrs	r2, r1
    6b88:	701a      	strb	r2, [r3, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    6b8a:	68bb      	ldr	r3, [r7, #8]
    6b8c:	2280      	movs	r2, #128	; 0x80
    6b8e:	719a      	strb	r2, [r3, #6]

	return entry;
    6b90:	68bb      	ldr	r3, [r7, #8]
}
    6b92:	0018      	movs	r0, r3
    6b94:	46bd      	mov	sp, r7
    6b96:	b004      	add	sp, #16
    6b98:	bd80      	pop	{r7, pc}
    6b9a:	46c0      	nop			; (mov r8, r8)
    6b9c:	200008d0 	.word	0x200008d0

00006ba0 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
    6ba0:	b580      	push	{r7, lr}
    6ba2:	b082      	sub	sp, #8
    6ba4:	af00      	add	r7, sp, #0
    6ba6:	6078      	str	r0, [r7, #4]
	if (entry->fixed) {
    6ba8:	687b      	ldr	r3, [r7, #4]
    6baa:	781b      	ldrb	r3, [r3, #0]
    6bac:	2201      	movs	r2, #1
    6bae:	4013      	ands	r3, r2
    6bb0:	b2db      	uxtb	r3, r3
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	d107      	bne.n	6bc6 <NWK_RouteFreeEntry+0x26>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    6bb6:	687b      	ldr	r3, [r7, #4]
    6bb8:	2201      	movs	r2, #1
    6bba:	4252      	negs	r2, r2
    6bbc:	805a      	strh	r2, [r3, #2]
	entry->rank = 0;
    6bbe:	687b      	ldr	r3, [r7, #4]
    6bc0:	2200      	movs	r2, #0
    6bc2:	719a      	strb	r2, [r3, #6]
    6bc4:	e000      	b.n	6bc8 <NWK_RouteFreeEntry+0x28>
/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
		return;
    6bc6:	46c0      	nop			; (mov r8, r8)
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
	entry->rank = 0;
}
    6bc8:	46bd      	mov	sp, r7
    6bca:	b002      	add	sp, #8
    6bcc:	bd80      	pop	{r7, pc}
    6bce:	46c0      	nop			; (mov r8, r8)

00006bd0 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    6bd0:	b580      	push	{r7, lr}
    6bd2:	b084      	sub	sp, #16
    6bd4:	af00      	add	r7, sp, #0
    6bd6:	0002      	movs	r2, r0
    6bd8:	1dbb      	adds	r3, r7, #6
    6bda:	801a      	strh	r2, [r3, #0]
    6bdc:	1d7b      	adds	r3, r7, #5
    6bde:	1c0a      	adds	r2, r1, #0
    6be0:	701a      	strb	r2, [r3, #0]
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    6be2:	1d7b      	adds	r3, r7, #5
    6be4:	781a      	ldrb	r2, [r3, #0]
    6be6:	1dbb      	adds	r3, r7, #6
    6be8:	881b      	ldrh	r3, [r3, #0]
    6bea:	0011      	movs	r1, r2
    6bec:	0018      	movs	r0, r3
    6bee:	4b07      	ldr	r3, [pc, #28]	; (6c0c <NWK_RouteNextHop+0x3c>)
    6bf0:	4798      	blx	r3
    6bf2:	0003      	movs	r3, r0
    6bf4:	60fb      	str	r3, [r7, #12]
	if (entry) {
    6bf6:	68fb      	ldr	r3, [r7, #12]
    6bf8:	2b00      	cmp	r3, #0
    6bfa:	d002      	beq.n	6c02 <NWK_RouteNextHop+0x32>
		return entry->nextHopAddr;
    6bfc:	68fb      	ldr	r3, [r7, #12]
    6bfe:	889b      	ldrh	r3, [r3, #4]
    6c00:	e000      	b.n	6c04 <NWK_RouteNextHop+0x34>
	}

	return NWK_ROUTE_UNKNOWN;
    6c02:	4b03      	ldr	r3, [pc, #12]	; (6c10 <NWK_RouteNextHop+0x40>)
}
    6c04:	0018      	movs	r0, r3
    6c06:	46bd      	mov	sp, r7
    6c08:	b004      	add	sp, #16
    6c0a:	bd80      	pop	{r7, pc}
    6c0c:	00006a89 	.word	0x00006a89
    6c10:	0000ffff 	.word	0x0000ffff

00006c14 <nwkRouteUpdateEntry>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteUpdateEntry(uint16_t dst, uint8_t multicast, uint16_t nextHop,
		uint8_t lqi)
{
    6c14:	b5b0      	push	{r4, r5, r7, lr}
    6c16:	b084      	sub	sp, #16
    6c18:	af00      	add	r7, sp, #0
    6c1a:	0005      	movs	r5, r0
    6c1c:	000c      	movs	r4, r1
    6c1e:	0010      	movs	r0, r2
    6c20:	0019      	movs	r1, r3
    6c22:	1dbb      	adds	r3, r7, #6
    6c24:	1c2a      	adds	r2, r5, #0
    6c26:	801a      	strh	r2, [r3, #0]
    6c28:	1d7b      	adds	r3, r7, #5
    6c2a:	1c22      	adds	r2, r4, #0
    6c2c:	701a      	strb	r2, [r3, #0]
    6c2e:	1cbb      	adds	r3, r7, #2
    6c30:	1c02      	adds	r2, r0, #0
    6c32:	801a      	strh	r2, [r3, #0]
    6c34:	1d3b      	adds	r3, r7, #4
    6c36:	1c0a      	adds	r2, r1, #0
    6c38:	701a      	strb	r2, [r3, #0]
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    6c3a:	1d7b      	adds	r3, r7, #5
    6c3c:	781a      	ldrb	r2, [r3, #0]
    6c3e:	1dbb      	adds	r3, r7, #6
    6c40:	881b      	ldrh	r3, [r3, #0]
    6c42:	0011      	movs	r1, r2
    6c44:	0018      	movs	r0, r3
    6c46:	4b1b      	ldr	r3, [pc, #108]	; (6cb4 <nwkRouteUpdateEntry+0xa0>)
    6c48:	4798      	blx	r3
    6c4a:	0003      	movs	r3, r0
    6c4c:	60fb      	str	r3, [r7, #12]

	if (NULL == entry) {
    6c4e:	68fb      	ldr	r3, [r7, #12]
    6c50:	2b00      	cmp	r3, #0
    6c52:	d103      	bne.n	6c5c <nwkRouteUpdateEntry+0x48>
		entry = NWK_RouteNewEntry();
    6c54:	4b18      	ldr	r3, [pc, #96]	; (6cb8 <nwkRouteUpdateEntry+0xa4>)
    6c56:	4798      	blx	r3
    6c58:	0003      	movs	r3, r0
    6c5a:	60fb      	str	r3, [r7, #12]
	}

	entry->dstAddr = dst;
    6c5c:	68fb      	ldr	r3, [r7, #12]
    6c5e:	1dba      	adds	r2, r7, #6
    6c60:	8812      	ldrh	r2, [r2, #0]
    6c62:	805a      	strh	r2, [r3, #2]
	entry->nextHopAddr = nextHop;
    6c64:	68fb      	ldr	r3, [r7, #12]
    6c66:	1cba      	adds	r2, r7, #2
    6c68:	8812      	ldrh	r2, [r2, #0]
    6c6a:	809a      	strh	r2, [r3, #4]
	entry->multicast = multicast;
    6c6c:	1d7b      	adds	r3, r7, #5
    6c6e:	781b      	ldrb	r3, [r3, #0]
    6c70:	2201      	movs	r2, #1
    6c72:	4013      	ands	r3, r2
    6c74:	b2da      	uxtb	r2, r3
    6c76:	68fb      	ldr	r3, [r7, #12]
    6c78:	2101      	movs	r1, #1
    6c7a:	400a      	ands	r2, r1
    6c7c:	1890      	adds	r0, r2, r2
    6c7e:	781a      	ldrb	r2, [r3, #0]
    6c80:	2102      	movs	r1, #2
    6c82:	438a      	bics	r2, r1
    6c84:	1c11      	adds	r1, r2, #0
    6c86:	1c02      	adds	r2, r0, #0
    6c88:	430a      	orrs	r2, r1
    6c8a:	701a      	strb	r2, [r3, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    6c8c:	68fb      	ldr	r3, [r7, #12]
    6c8e:	781a      	ldrb	r2, [r3, #0]
    6c90:	210f      	movs	r1, #15
    6c92:	400a      	ands	r2, r1
    6c94:	1c11      	adds	r1, r2, #0
    6c96:	2230      	movs	r2, #48	; 0x30
    6c98:	430a      	orrs	r2, r1
    6c9a:	701a      	strb	r2, [r3, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    6c9c:	68fb      	ldr	r3, [r7, #12]
    6c9e:	2280      	movs	r2, #128	; 0x80
    6ca0:	719a      	strb	r2, [r3, #6]
	entry->lqi = lqi;
    6ca2:	68fb      	ldr	r3, [r7, #12]
    6ca4:	1d3a      	adds	r2, r7, #4
    6ca6:	7812      	ldrb	r2, [r2, #0]
    6ca8:	71da      	strb	r2, [r3, #7]
}
    6caa:	46c0      	nop			; (mov r8, r8)
    6cac:	46bd      	mov	sp, r7
    6cae:	b004      	add	sp, #16
    6cb0:	bdb0      	pop	{r4, r5, r7, pc}
    6cb2:	46c0      	nop			; (mov r8, r8)
    6cb4:	00006a89 	.word	0x00006a89
    6cb8:	00006b0d 	.word	0x00006b0d

00006cbc <nwkRouteRemove>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    6cbc:	b580      	push	{r7, lr}
    6cbe:	b084      	sub	sp, #16
    6cc0:	af00      	add	r7, sp, #0
    6cc2:	0002      	movs	r2, r0
    6cc4:	1dbb      	adds	r3, r7, #6
    6cc6:	801a      	strh	r2, [r3, #0]
    6cc8:	1d7b      	adds	r3, r7, #5
    6cca:	1c0a      	adds	r2, r1, #0
    6ccc:	701a      	strb	r2, [r3, #0]
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    6cce:	1d7b      	adds	r3, r7, #5
    6cd0:	781a      	ldrb	r2, [r3, #0]
    6cd2:	1dbb      	adds	r3, r7, #6
    6cd4:	881b      	ldrh	r3, [r3, #0]
    6cd6:	0011      	movs	r1, r2
    6cd8:	0018      	movs	r0, r3
    6cda:	4b07      	ldr	r3, [pc, #28]	; (6cf8 <nwkRouteRemove+0x3c>)
    6cdc:	4798      	blx	r3
    6cde:	0003      	movs	r3, r0
    6ce0:	60fb      	str	r3, [r7, #12]
	if (entry) {
    6ce2:	68fb      	ldr	r3, [r7, #12]
    6ce4:	2b00      	cmp	r3, #0
    6ce6:	d003      	beq.n	6cf0 <nwkRouteRemove+0x34>
		NWK_RouteFreeEntry(entry);
    6ce8:	68fb      	ldr	r3, [r7, #12]
    6cea:	0018      	movs	r0, r3
    6cec:	4b03      	ldr	r3, [pc, #12]	; (6cfc <nwkRouteRemove+0x40>)
    6cee:	4798      	blx	r3
	}
}
    6cf0:	46c0      	nop			; (mov r8, r8)
    6cf2:	46bd      	mov	sp, r7
    6cf4:	b004      	add	sp, #16
    6cf6:	bd80      	pop	{r7, pc}
    6cf8:	00006a89 	.word	0x00006a89
    6cfc:	00006ba1 	.word	0x00006ba1

00006d00 <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    6d00:	b580      	push	{r7, lr}
    6d02:	b082      	sub	sp, #8
    6d04:	af00      	add	r7, sp, #0
    6d06:	6078      	str	r0, [r7, #4]

	entry->lqi = frame->rx.lqi;
#else
	(void)frame;
#endif
}
    6d08:	46c0      	nop			; (mov r8, r8)
    6d0a:	46bd      	mov	sp, r7
    6d0c:	b002      	add	sp, #8
    6d0e:	bd80      	pop	{r7, pc}

00006d10 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    6d10:	b580      	push	{r7, lr}
    6d12:	b084      	sub	sp, #16
    6d14:	af00      	add	r7, sp, #0
    6d16:	6078      	str	r0, [r7, #4]
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    6d18:	687b      	ldr	r3, [r7, #4]
    6d1a:	7bda      	ldrb	r2, [r3, #15]
    6d1c:	7c1b      	ldrb	r3, [r3, #16]
    6d1e:	021b      	lsls	r3, r3, #8
    6d20:	4313      	orrs	r3, r2
    6d22:	b29b      	uxth	r3, r3
    6d24:	4a2e      	ldr	r2, [pc, #184]	; (6de0 <nwkRouteFrameSent+0xd0>)
    6d26:	4293      	cmp	r3, r2
    6d28:	d053      	beq.n	6dd2 <nwkRouteFrameSent+0xc2>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    6d2a:	687b      	ldr	r3, [r7, #4]
    6d2c:	7bda      	ldrb	r2, [r3, #15]
    6d2e:	7c1b      	ldrb	r3, [r3, #16]
    6d30:	021b      	lsls	r3, r3, #8
    6d32:	4313      	orrs	r3, r2
    6d34:	b29a      	uxth	r2, r3
			frame->header.nwkFcf.multicast);
    6d36:	687b      	ldr	r3, [r7, #4]
    6d38:	7adb      	ldrb	r3, [r3, #11]
    6d3a:	071b      	lsls	r3, r3, #28
    6d3c:	0fdb      	lsrs	r3, r3, #31
    6d3e:	b2db      	uxtb	r3, r3

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    6d40:	0019      	movs	r1, r3
    6d42:	0010      	movs	r0, r2
    6d44:	4b27      	ldr	r3, [pc, #156]	; (6de4 <nwkRouteFrameSent+0xd4>)
    6d46:	4798      	blx	r3
    6d48:	0003      	movs	r3, r0
    6d4a:	60fb      	str	r3, [r7, #12]
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    6d4c:	68fb      	ldr	r3, [r7, #12]
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d041      	beq.n	6dd6 <nwkRouteFrameSent+0xc6>
    6d52:	68fb      	ldr	r3, [r7, #12]
    6d54:	781b      	ldrb	r3, [r3, #0]
    6d56:	2201      	movs	r2, #1
    6d58:	4013      	ands	r3, r2
    6d5a:	b2db      	uxtb	r3, r3
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	d13a      	bne.n	6dd6 <nwkRouteFrameSent+0xc6>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    6d60:	687b      	ldr	r3, [r7, #4]
    6d62:	2285      	movs	r2, #133	; 0x85
    6d64:	5c9b      	ldrb	r3, [r3, r2]
    6d66:	2b00      	cmp	r3, #0
    6d68:	d114      	bne.n	6d94 <nwkRouteFrameSent+0x84>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    6d6a:	68fb      	ldr	r3, [r7, #12]
    6d6c:	781a      	ldrb	r2, [r3, #0]
    6d6e:	210f      	movs	r1, #15
    6d70:	400a      	ands	r2, r1
    6d72:	1c11      	adds	r1, r2, #0
    6d74:	2230      	movs	r2, #48	; 0x30
    6d76:	430a      	orrs	r2, r1
    6d78:	701a      	strb	r2, [r3, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    6d7a:	68fb      	ldr	r3, [r7, #12]
    6d7c:	799b      	ldrb	r3, [r3, #6]
    6d7e:	3301      	adds	r3, #1
    6d80:	b2da      	uxtb	r2, r3
    6d82:	68fb      	ldr	r3, [r7, #12]
    6d84:	719a      	strb	r2, [r3, #6]
    6d86:	68fb      	ldr	r3, [r7, #12]
    6d88:	799b      	ldrb	r3, [r3, #6]
    6d8a:	2bff      	cmp	r3, #255	; 0xff
    6d8c:	d124      	bne.n	6dd8 <nwkRouteFrameSent+0xc8>
			nwkRouteNormalizeRanks();
    6d8e:	4b16      	ldr	r3, [pc, #88]	; (6de8 <nwkRouteFrameSent+0xd8>)
    6d90:	4798      	blx	r3
    6d92:	e021      	b.n	6dd8 <nwkRouteFrameSent+0xc8>
		}
	} else {
		if (0 == --entry->score) {
    6d94:	68fb      	ldr	r3, [r7, #12]
    6d96:	781b      	ldrb	r3, [r3, #0]
    6d98:	061b      	lsls	r3, r3, #24
    6d9a:	0f1b      	lsrs	r3, r3, #28
    6d9c:	b2db      	uxtb	r3, r3
    6d9e:	330f      	adds	r3, #15
    6da0:	1c1a      	adds	r2, r3, #0
    6da2:	230f      	movs	r3, #15
    6da4:	4013      	ands	r3, r2
    6da6:	b2da      	uxtb	r2, r3
    6da8:	68fb      	ldr	r3, [r7, #12]
    6daa:	0110      	lsls	r0, r2, #4
    6dac:	781a      	ldrb	r2, [r3, #0]
    6dae:	210f      	movs	r1, #15
    6db0:	400a      	ands	r2, r1
    6db2:	1c11      	adds	r1, r2, #0
    6db4:	1c02      	adds	r2, r0, #0
    6db6:	430a      	orrs	r2, r1
    6db8:	701a      	strb	r2, [r3, #0]
    6dba:	68fb      	ldr	r3, [r7, #12]
    6dbc:	781b      	ldrb	r3, [r3, #0]
    6dbe:	061b      	lsls	r3, r3, #24
    6dc0:	0f1b      	lsrs	r3, r3, #28
    6dc2:	b2db      	uxtb	r3, r3
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	d107      	bne.n	6dd8 <nwkRouteFrameSent+0xc8>
			NWK_RouteFreeEntry(entry);
    6dc8:	68fb      	ldr	r3, [r7, #12]
    6dca:	0018      	movs	r0, r3
    6dcc:	4b07      	ldr	r3, [pc, #28]	; (6dec <nwkRouteFrameSent+0xdc>)
    6dce:	4798      	blx	r3
    6dd0:	e002      	b.n	6dd8 <nwkRouteFrameSent+0xc8>
void nwkRouteFrameSent(NwkFrame_t *frame)
{
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
    6dd2:	46c0      	nop			; (mov r8, r8)
    6dd4:	e000      	b.n	6dd8 <nwkRouteFrameSent+0xc8>

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
		return;
    6dd6:	46c0      	nop			; (mov r8, r8)
	} else {
		if (0 == --entry->score) {
			NWK_RouteFreeEntry(entry);
		}
	}
}
    6dd8:	46bd      	mov	sp, r7
    6dda:	b004      	add	sp, #16
    6ddc:	bd80      	pop	{r7, pc}
    6dde:	46c0      	nop			; (mov r8, r8)
    6de0:	0000ffff 	.word	0x0000ffff
    6de4:	00006a89 	.word	0x00006a89
    6de8:	00007115 	.word	0x00007115
    6dec:	00006ba1 	.word	0x00006ba1

00006df0 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    6df0:	b590      	push	{r4, r7, lr}
    6df2:	b085      	sub	sp, #20
    6df4:	af00      	add	r7, sp, #0
    6df6:	6078      	str	r0, [r7, #4]
	NwkFrameHeader_t *header = &frame->header;
    6df8:	687b      	ldr	r3, [r7, #4]
    6dfa:	3302      	adds	r3, #2
    6dfc:	60fb      	str	r3, [r7, #12]

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    6dfe:	68fb      	ldr	r3, [r7, #12]
    6e00:	7b5a      	ldrb	r2, [r3, #13]
    6e02:	7b9b      	ldrb	r3, [r3, #14]
    6e04:	021b      	lsls	r3, r3, #8
    6e06:	4313      	orrs	r3, r2
    6e08:	b29b      	uxth	r3, r3
    6e0a:	4a35      	ldr	r2, [pc, #212]	; (6ee0 <nwkRoutePrepareTx+0xf0>)
    6e0c:	4293      	cmp	r3, r2
    6e0e:	d10c      	bne.n	6e2a <nwkRoutePrepareTx+0x3a>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    6e10:	68fb      	ldr	r3, [r7, #12]
    6e12:	3305      	adds	r3, #5
    6e14:	781a      	ldrb	r2, [r3, #0]
    6e16:	2101      	movs	r1, #1
    6e18:	4249      	negs	r1, r1
    6e1a:	430a      	orrs	r2, r1
    6e1c:	701a      	strb	r2, [r3, #0]
    6e1e:	785a      	ldrb	r2, [r3, #1]
    6e20:	2101      	movs	r1, #1
    6e22:	4249      	negs	r1, r1
    6e24:	430a      	orrs	r2, r1
    6e26:	705a      	strb	r2, [r3, #1]
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
			nwkRouteDiscoveryRequest(frame);
		}
  #endif
	}
}
    6e28:	e055      	b.n	6ed6 <nwkRoutePrepareTx+0xe6>
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
		header->macDstAddr = NWK_BROADCAST_ADDR;
	} else if (header->nwkFcf.linkLocal) {
    6e2a:	68fb      	ldr	r3, [r7, #12]
    6e2c:	7a5b      	ldrb	r3, [r3, #9]
    6e2e:	2204      	movs	r2, #4
    6e30:	4013      	ands	r3, r2
    6e32:	b2db      	uxtb	r3, r3
    6e34:	2b00      	cmp	r3, #0
    6e36:	d01b      	beq.n	6e70 <nwkRoutePrepareTx+0x80>
		header->macDstAddr = header->nwkDstAddr;
    6e38:	68fb      	ldr	r3, [r7, #12]
    6e3a:	7b5a      	ldrb	r2, [r3, #13]
    6e3c:	7b9b      	ldrb	r3, [r3, #14]
    6e3e:	021b      	lsls	r3, r3, #8
    6e40:	4313      	orrs	r3, r2
    6e42:	b29a      	uxth	r2, r3
    6e44:	68fb      	ldr	r3, [r7, #12]
    6e46:	3305      	adds	r3, #5
    6e48:	21ff      	movs	r1, #255	; 0xff
    6e4a:	4011      	ands	r1, r2
    6e4c:	000c      	movs	r4, r1
    6e4e:	7819      	ldrb	r1, [r3, #0]
    6e50:	2000      	movs	r0, #0
    6e52:	4001      	ands	r1, r0
    6e54:	1c08      	adds	r0, r1, #0
    6e56:	1c21      	adds	r1, r4, #0
    6e58:	4301      	orrs	r1, r0
    6e5a:	7019      	strb	r1, [r3, #0]
    6e5c:	0a12      	lsrs	r2, r2, #8
    6e5e:	b290      	uxth	r0, r2
    6e60:	785a      	ldrb	r2, [r3, #1]
    6e62:	2100      	movs	r1, #0
    6e64:	400a      	ands	r2, r1
    6e66:	1c11      	adds	r1, r2, #0
    6e68:	1c02      	adds	r2, r0, #0
    6e6a:	430a      	orrs	r2, r1
    6e6c:	705a      	strb	r2, [r3, #1]
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
			nwkRouteDiscoveryRequest(frame);
		}
  #endif
	}
}
    6e6e:	e032      	b.n	6ed6 <nwkRoutePrepareTx+0xe6>
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    6e70:	68fb      	ldr	r3, [r7, #12]
    6e72:	7b5a      	ldrb	r2, [r3, #13]
    6e74:	7b9b      	ldrb	r3, [r3, #14]
    6e76:	021b      	lsls	r3, r3, #8
    6e78:	4313      	orrs	r3, r2
    6e7a:	b29a      	uxth	r2, r3
				header->nwkFcf.multicast);
    6e7c:	68fb      	ldr	r3, [r7, #12]
    6e7e:	7a5b      	ldrb	r3, [r3, #9]
    6e80:	071b      	lsls	r3, r3, #28
    6e82:	0fdb      	lsrs	r3, r3, #31
    6e84:	b2db      	uxtb	r3, r3
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    6e86:	0019      	movs	r1, r3
    6e88:	0010      	movs	r0, r2
    6e8a:	4b16      	ldr	r3, [pc, #88]	; (6ee4 <nwkRoutePrepareTx+0xf4>)
    6e8c:	4798      	blx	r3
    6e8e:	0003      	movs	r3, r0
    6e90:	001a      	movs	r2, r3
    6e92:	68fb      	ldr	r3, [r7, #12]
    6e94:	3305      	adds	r3, #5
    6e96:	21ff      	movs	r1, #255	; 0xff
    6e98:	4011      	ands	r1, r2
    6e9a:	000c      	movs	r4, r1
    6e9c:	7819      	ldrb	r1, [r3, #0]
    6e9e:	2000      	movs	r0, #0
    6ea0:	4001      	ands	r1, r0
    6ea2:	1c08      	adds	r0, r1, #0
    6ea4:	1c21      	adds	r1, r4, #0
    6ea6:	4301      	orrs	r1, r0
    6ea8:	7019      	strb	r1, [r3, #0]
    6eaa:	0a12      	lsrs	r2, r2, #8
    6eac:	b290      	uxth	r0, r2
    6eae:	785a      	ldrb	r2, [r3, #1]
    6eb0:	2100      	movs	r1, #0
    6eb2:	400a      	ands	r2, r1
    6eb4:	1c11      	adds	r1, r2, #0
    6eb6:	1c02      	adds	r2, r0, #0
    6eb8:	430a      	orrs	r2, r1
    6eba:	705a      	strb	r2, [r3, #1]
				header->nwkFcf.multicast);

  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
    6ebc:	68fb      	ldr	r3, [r7, #12]
    6ebe:	795a      	ldrb	r2, [r3, #5]
    6ec0:	799b      	ldrb	r3, [r3, #6]
    6ec2:	021b      	lsls	r3, r3, #8
    6ec4:	4313      	orrs	r3, r2
    6ec6:	b29b      	uxth	r3, r3
    6ec8:	4a05      	ldr	r2, [pc, #20]	; (6ee0 <nwkRoutePrepareTx+0xf0>)
    6eca:	4293      	cmp	r3, r2
    6ecc:	d103      	bne.n	6ed6 <nwkRoutePrepareTx+0xe6>
			nwkRouteDiscoveryRequest(frame);
    6ece:	687b      	ldr	r3, [r7, #4]
    6ed0:	0018      	movs	r0, r3
    6ed2:	4b05      	ldr	r3, [pc, #20]	; (6ee8 <nwkRoutePrepareTx+0xf8>)
    6ed4:	4798      	blx	r3
		}
  #endif
	}
}
    6ed6:	46c0      	nop			; (mov r8, r8)
    6ed8:	46bd      	mov	sp, r7
    6eda:	b005      	add	sp, #20
    6edc:	bd90      	pop	{r4, r7, pc}
    6ede:	46c0      	nop			; (mov r8, r8)
    6ee0:	0000ffff 	.word	0x0000ffff
    6ee4:	00006bd1 	.word	0x00006bd1
    6ee8:	000071c5 	.word	0x000071c5

00006eec <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    6eec:	b590      	push	{r4, r7, lr}
    6eee:	b085      	sub	sp, #20
    6ef0:	af00      	add	r7, sp, #0
    6ef2:	6078      	str	r0, [r7, #4]
	NwkFrameHeader_t *header = &frame->header;
    6ef4:	687b      	ldr	r3, [r7, #4]
    6ef6:	3302      	adds	r3, #2
    6ef8:	60fb      	str	r3, [r7, #12]

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    6efa:	68fb      	ldr	r3, [r7, #12]
    6efc:	7b5a      	ldrb	r2, [r3, #13]
    6efe:	7b9b      	ldrb	r3, [r3, #14]
    6f00:	021b      	lsls	r3, r3, #8
    6f02:	4313      	orrs	r3, r2
    6f04:	b29a      	uxth	r2, r3
			header->nwkFcf.multicast)) {
    6f06:	68fb      	ldr	r3, [r7, #12]
    6f08:	7a5b      	ldrb	r3, [r3, #9]
    6f0a:	071b      	lsls	r3, r3, #28
    6f0c:	0fdb      	lsrs	r3, r3, #31
    6f0e:	b2db      	uxtb	r3, r3
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    6f10:	0019      	movs	r1, r3
    6f12:	0010      	movs	r0, r2
    6f14:	4b20      	ldr	r3, [pc, #128]	; (6f98 <nwkRouteFrame+0xac>)
    6f16:	4798      	blx	r3
    6f18:	0003      	movs	r3, r0
    6f1a:	1e1a      	subs	r2, r3, #0
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    6f1c:	4b1f      	ldr	r3, [pc, #124]	; (6f9c <nwkRouteFrame+0xb0>)
    6f1e:	429a      	cmp	r2, r3
    6f20:	d01d      	beq.n	6f5e <nwkRouteFrame+0x72>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    6f22:	687b      	ldr	r3, [r7, #4]
    6f24:	2289      	movs	r2, #137	; 0x89
    6f26:	5c99      	ldrb	r1, [r3, r2]
    6f28:	2000      	movs	r0, #0
    6f2a:	4001      	ands	r1, r0
    6f2c:	5499      	strb	r1, [r3, r2]
    6f2e:	1899      	adds	r1, r3, r2
    6f30:	7848      	ldrb	r0, [r1, #1]
    6f32:	2400      	movs	r4, #0
    6f34:	4020      	ands	r0, r4
    6f36:	7048      	strb	r0, [r1, #1]
    6f38:	1899      	adds	r1, r3, r2
    6f3a:	7888      	ldrb	r0, [r1, #2]
    6f3c:	2400      	movs	r4, #0
    6f3e:	4020      	ands	r0, r4
    6f40:	7088      	strb	r0, [r1, #2]
    6f42:	189b      	adds	r3, r3, r2
    6f44:	78da      	ldrb	r2, [r3, #3]
    6f46:	2100      	movs	r1, #0
    6f48:	400a      	ands	r2, r1
    6f4a:	70da      	strb	r2, [r3, #3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    6f4c:	687b      	ldr	r3, [r7, #4]
    6f4e:	2288      	movs	r2, #136	; 0x88
    6f50:	2102      	movs	r1, #2
    6f52:	5499      	strb	r1, [r3, r2]
		nwkTxFrame(frame);
    6f54:	687b      	ldr	r3, [r7, #4]
    6f56:	0018      	movs	r0, r3
    6f58:	4b11      	ldr	r3, [pc, #68]	; (6fa0 <nwkRouteFrame+0xb4>)
    6f5a:	4798      	blx	r3
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
	}
}
    6f5c:	e017      	b.n	6f8e <nwkRouteFrame+0xa2>
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    6f5e:	68fb      	ldr	r3, [r7, #12]
    6f60:	7ada      	ldrb	r2, [r3, #11]
    6f62:	7b1b      	ldrb	r3, [r3, #12]
    6f64:	021b      	lsls	r3, r3, #8
    6f66:	4313      	orrs	r3, r2
    6f68:	b298      	uxth	r0, r3
    6f6a:	68fb      	ldr	r3, [r7, #12]
    6f6c:	7b5a      	ldrb	r2, [r3, #13]
    6f6e:	7b9b      	ldrb	r3, [r3, #14]
    6f70:	021b      	lsls	r3, r3, #8
    6f72:	4313      	orrs	r3, r2
    6f74:	b299      	uxth	r1, r3
				header->nwkFcf.multicast);
    6f76:	68fb      	ldr	r3, [r7, #12]
    6f78:	7a5b      	ldrb	r3, [r3, #9]
    6f7a:	071b      	lsls	r3, r3, #28
    6f7c:	0fdb      	lsrs	r3, r3, #31
    6f7e:	b2db      	uxtb	r3, r3
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    6f80:	001a      	movs	r2, r3
    6f82:	4b08      	ldr	r3, [pc, #32]	; (6fa4 <nwkRouteFrame+0xb8>)
    6f84:	4798      	blx	r3
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    6f86:	687b      	ldr	r3, [r7, #4]
    6f88:	0018      	movs	r0, r3
    6f8a:	4b07      	ldr	r3, [pc, #28]	; (6fa8 <nwkRouteFrame+0xbc>)
    6f8c:	4798      	blx	r3
	}
}
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	46bd      	mov	sp, r7
    6f92:	b005      	add	sp, #20
    6f94:	bd90      	pop	{r4, r7, pc}
    6f96:	46c0      	nop			; (mov r8, r8)
    6f98:	00006bd1 	.word	0x00006bd1
    6f9c:	0000ffff 	.word	0x0000ffff
    6fa0:	00008935 	.word	0x00008935
    6fa4:	00006fad 	.word	0x00006fad
    6fa8:	00006955 	.word	0x00006955

00006fac <nwkRouteSendRouteError>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst,
		uint8_t multicast)
{
    6fac:	b590      	push	{r4, r7, lr}
    6fae:	b085      	sub	sp, #20
    6fb0:	af00      	add	r7, sp, #0
    6fb2:	0004      	movs	r4, r0
    6fb4:	0008      	movs	r0, r1
    6fb6:	0011      	movs	r1, r2
    6fb8:	1dbb      	adds	r3, r7, #6
    6fba:	1c22      	adds	r2, r4, #0
    6fbc:	801a      	strh	r2, [r3, #0]
    6fbe:	1d3b      	adds	r3, r7, #4
    6fc0:	1c02      	adds	r2, r0, #0
    6fc2:	801a      	strh	r2, [r3, #0]
    6fc4:	1cfb      	adds	r3, r7, #3
    6fc6:	1c0a      	adds	r2, r1, #0
    6fc8:	701a      	strb	r2, [r3, #0]
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    6fca:	4b3f      	ldr	r3, [pc, #252]	; (70c8 <nwkRouteSendRouteError+0x11c>)
    6fcc:	4798      	blx	r3
    6fce:	0003      	movs	r3, r0
    6fd0:	60fb      	str	r3, [r7, #12]
    6fd2:	68fb      	ldr	r3, [r7, #12]
    6fd4:	2b00      	cmp	r3, #0
    6fd6:	d073      	beq.n	70c0 <nwkRouteSendRouteError+0x114>
		return;
	}

	nwkFrameCommandInit(frame);
    6fd8:	68fb      	ldr	r3, [r7, #12]
    6fda:	0018      	movs	r0, r3
    6fdc:	4b3b      	ldr	r3, [pc, #236]	; (70cc <nwkRouteSendRouteError+0x120>)
    6fde:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    6fe0:	68fb      	ldr	r3, [r7, #12]
    6fe2:	785b      	ldrb	r3, [r3, #1]
    6fe4:	3306      	adds	r3, #6
    6fe6:	b2da      	uxtb	r2, r3
    6fe8:	68fb      	ldr	r3, [r7, #12]
    6fea:	705a      	strb	r2, [r3, #1]
	frame->tx.confirm = NULL;
    6fec:	68fb      	ldr	r3, [r7, #12]
    6fee:	2289      	movs	r2, #137	; 0x89
    6ff0:	5c99      	ldrb	r1, [r3, r2]
    6ff2:	2000      	movs	r0, #0
    6ff4:	4001      	ands	r1, r0
    6ff6:	5499      	strb	r1, [r3, r2]
    6ff8:	1899      	adds	r1, r3, r2
    6ffa:	7848      	ldrb	r0, [r1, #1]
    6ffc:	2400      	movs	r4, #0
    6ffe:	4020      	ands	r0, r4
    7000:	7048      	strb	r0, [r1, #1]
    7002:	1899      	adds	r1, r3, r2
    7004:	7888      	ldrb	r0, [r1, #2]
    7006:	2400      	movs	r4, #0
    7008:	4020      	ands	r0, r4
    700a:	7088      	strb	r0, [r1, #2]
    700c:	189b      	adds	r3, r3, r2
    700e:	78da      	ldrb	r2, [r3, #3]
    7010:	2100      	movs	r1, #0
    7012:	400a      	ands	r2, r1
    7014:	70da      	strb	r2, [r3, #3]

	frame->header.nwkDstAddr = src;
    7016:	68fb      	ldr	r3, [r7, #12]
    7018:	1dba      	adds	r2, r7, #6
    701a:	330f      	adds	r3, #15
    701c:	7814      	ldrb	r4, [r2, #0]
    701e:	7819      	ldrb	r1, [r3, #0]
    7020:	2000      	movs	r0, #0
    7022:	4001      	ands	r1, r0
    7024:	1c08      	adds	r0, r1, #0
    7026:	1c21      	adds	r1, r4, #0
    7028:	4301      	orrs	r1, r0
    702a:	7019      	strb	r1, [r3, #0]
    702c:	7850      	ldrb	r0, [r2, #1]
    702e:	785a      	ldrb	r2, [r3, #1]
    7030:	2100      	movs	r1, #0
    7032:	400a      	ands	r2, r1
    7034:	1c11      	adds	r1, r2, #0
    7036:	1c02      	adds	r2, r0, #0
    7038:	430a      	orrs	r2, r1
    703a:	705a      	strb	r2, [r3, #1]

	command = (NwkCommandRouteError_t *)frame->payload;
    703c:	68fb      	ldr	r3, [r7, #12]
    703e:	2281      	movs	r2, #129	; 0x81
    7040:	5c9a      	ldrb	r2, [r3, r2]
    7042:	2182      	movs	r1, #130	; 0x82
    7044:	5c59      	ldrb	r1, [r3, r1]
    7046:	0209      	lsls	r1, r1, #8
    7048:	430a      	orrs	r2, r1
    704a:	2183      	movs	r1, #131	; 0x83
    704c:	5c59      	ldrb	r1, [r3, r1]
    704e:	0409      	lsls	r1, r1, #16
    7050:	430a      	orrs	r2, r1
    7052:	2184      	movs	r1, #132	; 0x84
    7054:	5c5b      	ldrb	r3, [r3, r1]
    7056:	061b      	lsls	r3, r3, #24
    7058:	4313      	orrs	r3, r2
    705a:	60bb      	str	r3, [r7, #8]
	command->id = NWK_COMMAND_ROUTE_ERROR;
    705c:	68bb      	ldr	r3, [r7, #8]
    705e:	2201      	movs	r2, #1
    7060:	701a      	strb	r2, [r3, #0]
	command->srcAddr = src;
    7062:	68bb      	ldr	r3, [r7, #8]
    7064:	1dba      	adds	r2, r7, #6
    7066:	3301      	adds	r3, #1
    7068:	7814      	ldrb	r4, [r2, #0]
    706a:	7819      	ldrb	r1, [r3, #0]
    706c:	2000      	movs	r0, #0
    706e:	4001      	ands	r1, r0
    7070:	1c08      	adds	r0, r1, #0
    7072:	1c21      	adds	r1, r4, #0
    7074:	4301      	orrs	r1, r0
    7076:	7019      	strb	r1, [r3, #0]
    7078:	7850      	ldrb	r0, [r2, #1]
    707a:	785a      	ldrb	r2, [r3, #1]
    707c:	2100      	movs	r1, #0
    707e:	400a      	ands	r2, r1
    7080:	1c11      	adds	r1, r2, #0
    7082:	1c02      	adds	r2, r0, #0
    7084:	430a      	orrs	r2, r1
    7086:	705a      	strb	r2, [r3, #1]
	command->dstAddr = dst;
    7088:	68bb      	ldr	r3, [r7, #8]
    708a:	1d3a      	adds	r2, r7, #4
    708c:	3303      	adds	r3, #3
    708e:	7814      	ldrb	r4, [r2, #0]
    7090:	7819      	ldrb	r1, [r3, #0]
    7092:	2000      	movs	r0, #0
    7094:	4001      	ands	r1, r0
    7096:	1c08      	adds	r0, r1, #0
    7098:	1c21      	adds	r1, r4, #0
    709a:	4301      	orrs	r1, r0
    709c:	7019      	strb	r1, [r3, #0]
    709e:	7850      	ldrb	r0, [r2, #1]
    70a0:	785a      	ldrb	r2, [r3, #1]
    70a2:	2100      	movs	r1, #0
    70a4:	400a      	ands	r2, r1
    70a6:	1c11      	adds	r1, r2, #0
    70a8:	1c02      	adds	r2, r0, #0
    70aa:	430a      	orrs	r2, r1
    70ac:	705a      	strb	r2, [r3, #1]
	command->multicast = multicast;
    70ae:	68bb      	ldr	r3, [r7, #8]
    70b0:	1cfa      	adds	r2, r7, #3
    70b2:	7812      	ldrb	r2, [r2, #0]
    70b4:	715a      	strb	r2, [r3, #5]

	nwkTxFrame(frame);
    70b6:	68fb      	ldr	r3, [r7, #12]
    70b8:	0018      	movs	r0, r3
    70ba:	4b05      	ldr	r3, [pc, #20]	; (70d0 <nwkRouteSendRouteError+0x124>)
    70bc:	4798      	blx	r3
    70be:	e000      	b.n	70c2 <nwkRouteSendRouteError+0x116>
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
		return;
    70c0:	46c0      	nop			; (mov r8, r8)
	command->srcAddr = src;
	command->dstAddr = dst;
	command->multicast = multicast;

	nwkTxFrame(frame);
}
    70c2:	46bd      	mov	sp, r7
    70c4:	b005      	add	sp, #20
    70c6:	bd90      	pop	{r4, r7, pc}
    70c8:	00006855 	.word	0x00006855
    70cc:	000069c9 	.word	0x000069c9
    70d0:	00008935 	.word	0x00008935

000070d4 <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    70d4:	b580      	push	{r7, lr}
    70d6:	b084      	sub	sp, #16
    70d8:	af00      	add	r7, sp, #0
    70da:	6078      	str	r0, [r7, #4]
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    70dc:	687b      	ldr	r3, [r7, #4]
    70de:	689b      	ldr	r3, [r3, #8]
    70e0:	60fb      	str	r3, [r7, #12]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    70e2:	687b      	ldr	r3, [r7, #4]
    70e4:	7b1b      	ldrb	r3, [r3, #12]
    70e6:	2b06      	cmp	r3, #6
    70e8:	d001      	beq.n	70ee <nwkRouteErrorReceived+0x1a>
		return false;
    70ea:	2300      	movs	r3, #0
    70ec:	e00c      	b.n	7108 <nwkRouteErrorReceived+0x34>
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    70ee:	68fb      	ldr	r3, [r7, #12]
    70f0:	78da      	ldrb	r2, [r3, #3]
    70f2:	791b      	ldrb	r3, [r3, #4]
    70f4:	021b      	lsls	r3, r3, #8
    70f6:	4313      	orrs	r3, r2
    70f8:	b29a      	uxth	r2, r3
    70fa:	68fb      	ldr	r3, [r7, #12]
    70fc:	795b      	ldrb	r3, [r3, #5]
    70fe:	0019      	movs	r1, r3
    7100:	0010      	movs	r0, r2
    7102:	4b03      	ldr	r3, [pc, #12]	; (7110 <nwkRouteErrorReceived+0x3c>)
    7104:	4798      	blx	r3

	return true;
    7106:	2301      	movs	r3, #1
}
    7108:	0018      	movs	r0, r3
    710a:	46bd      	mov	sp, r7
    710c:	b004      	add	sp, #16
    710e:	bd80      	pop	{r7, pc}
    7110:	00006cbd 	.word	0x00006cbd

00007114 <nwkRouteNormalizeRanks>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
    7114:	b580      	push	{r7, lr}
    7116:	b082      	sub	sp, #8
    7118:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    711a:	1dfb      	adds	r3, r7, #7
    711c:	2200      	movs	r2, #0
    711e:	701a      	strb	r2, [r3, #0]
    7120:	e017      	b.n	7152 <nwkRouteNormalizeRanks+0x3e>
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    7122:	1dfb      	adds	r3, r7, #7
    7124:	781b      	ldrb	r3, [r3, #0]
    7126:	1dfa      	adds	r2, r7, #7
    7128:	7812      	ldrb	r2, [r2, #0]
    712a:	490e      	ldr	r1, [pc, #56]	; (7164 <nwkRouteNormalizeRanks+0x50>)
    712c:	00d2      	lsls	r2, r2, #3
    712e:	188a      	adds	r2, r1, r2
    7130:	3206      	adds	r2, #6
    7132:	7812      	ldrb	r2, [r2, #0]
    7134:	0852      	lsrs	r2, r2, #1
    7136:	b2d2      	uxtb	r2, r2
    7138:	3201      	adds	r2, #1
    713a:	b2d1      	uxtb	r1, r2
    713c:	4a09      	ldr	r2, [pc, #36]	; (7164 <nwkRouteNormalizeRanks+0x50>)
    713e:	00db      	lsls	r3, r3, #3
    7140:	18d3      	adds	r3, r2, r3
    7142:	3306      	adds	r3, #6
    7144:	1c0a      	adds	r2, r1, #0
    7146:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    7148:	1dfb      	adds	r3, r7, #7
    714a:	781a      	ldrb	r2, [r3, #0]
    714c:	1dfb      	adds	r3, r7, #7
    714e:	3201      	adds	r2, #1
    7150:	701a      	strb	r2, [r3, #0]
    7152:	1dfb      	adds	r3, r7, #7
    7154:	781b      	ldrb	r3, [r3, #0]
    7156:	2b63      	cmp	r3, #99	; 0x63
    7158:	d9e3      	bls.n	7122 <nwkRouteNormalizeRanks+0xe>
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
	}
}
    715a:	46c0      	nop			; (mov r8, r8)
    715c:	46bd      	mov	sp, r7
    715e:	b002      	add	sp, #8
    7160:	bd80      	pop	{r7, pc}
    7162:	46c0      	nop			; (mov r8, r8)
    7164:	200008d0 	.word	0x200008d0

00007168 <nwkRouteDiscoveryInit>:

/*************************************************************************//**
*  @brief Initializes the Route Discovery module
*****************************************************************************/
void nwkRouteDiscoveryInit(void)
{
    7168:	b580      	push	{r7, lr}
    716a:	b082      	sub	sp, #8
    716c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    716e:	1dfb      	adds	r3, r7, #7
    7170:	2200      	movs	r2, #0
    7172:	701a      	strb	r2, [r3, #0]
    7174:	e00f      	b.n	7196 <nwkRouteDiscoveryInit+0x2e>
		nwkRouteDiscoveryTable[i].timeout = 0;
    7176:	1dfb      	adds	r3, r7, #7
    7178:	781a      	ldrb	r2, [r3, #0]
    717a:	490f      	ldr	r1, [pc, #60]	; (71b8 <nwkRouteDiscoveryInit+0x50>)
    717c:	0013      	movs	r3, r2
    717e:	005b      	lsls	r3, r3, #1
    7180:	189b      	adds	r3, r3, r2
    7182:	009b      	lsls	r3, r3, #2
    7184:	18cb      	adds	r3, r1, r3
    7186:	330a      	adds	r3, #10
    7188:	2200      	movs	r2, #0
    718a:	801a      	strh	r2, [r3, #0]
/*************************************************************************//**
*  @brief Initializes the Route Discovery module
*****************************************************************************/
void nwkRouteDiscoveryInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    718c:	1dfb      	adds	r3, r7, #7
    718e:	781a      	ldrb	r2, [r3, #0]
    7190:	1dfb      	adds	r3, r7, #7
    7192:	3201      	adds	r2, #1
    7194:	701a      	strb	r2, [r3, #0]
    7196:	1dfb      	adds	r3, r7, #7
    7198:	781b      	ldrb	r3, [r3, #0]
    719a:	2b04      	cmp	r3, #4
    719c:	d9eb      	bls.n	7176 <nwkRouteDiscoveryInit+0xe>
		nwkRouteDiscoveryTable[i].timeout = 0;
	}

	nwkRouteDiscoveryTimer.interval = NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    719e:	4b07      	ldr	r3, [pc, #28]	; (71bc <nwkRouteDiscoveryInit+0x54>)
    71a0:	2264      	movs	r2, #100	; 0x64
    71a2:	609a      	str	r2, [r3, #8]
	nwkRouteDiscoveryTimer.mode = SYS_TIMER_INTERVAL_MODE;
    71a4:	4b05      	ldr	r3, [pc, #20]	; (71bc <nwkRouteDiscoveryInit+0x54>)
    71a6:	2200      	movs	r2, #0
    71a8:	731a      	strb	r2, [r3, #12]
	nwkRouteDiscoveryTimer.handler = nwkRouteDiscoveryTimerHandler;
    71aa:	4b04      	ldr	r3, [pc, #16]	; (71bc <nwkRouteDiscoveryInit+0x54>)
    71ac:	4a04      	ldr	r2, [pc, #16]	; (71c0 <nwkRouteDiscoveryInit+0x58>)
    71ae:	611a      	str	r2, [r3, #16]
}
    71b0:	46c0      	nop			; (mov r8, r8)
    71b2:	46bd      	mov	sp, r7
    71b4:	b002      	add	sp, #8
    71b6:	bd80      	pop	{r7, pc}
    71b8:	20000bf0 	.word	0x20000bf0
    71bc:	20000c2c 	.word	0x20000c2c
    71c0:	000073d9 	.word	0x000073d9

000071c4 <nwkRouteDiscoveryRequest>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
    71c4:	b580      	push	{r7, lr}
    71c6:	b084      	sub	sp, #16
    71c8:	af00      	add	r7, sp, #0
    71ca:	6078      	str	r0, [r7, #4]
	NwkFrameHeader_t *header = &frame->header;
    71cc:	687b      	ldr	r3, [r7, #4]
    71ce:	3302      	adds	r3, #2
    71d0:	60fb      	str	r3, [r7, #12]
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
    71d2:	4b25      	ldr	r3, [pc, #148]	; (7268 <nwkRouteDiscoveryRequest+0xa4>)
    71d4:	8818      	ldrh	r0, [r3, #0]
    71d6:	68fb      	ldr	r3, [r7, #12]
    71d8:	7b5a      	ldrb	r2, [r3, #13]
    71da:	7b9b      	ldrb	r3, [r3, #14]
    71dc:	021b      	lsls	r3, r3, #8
    71de:	4313      	orrs	r3, r2
    71e0:	b299      	uxth	r1, r3
			header->nwkFcf.multicast);
    71e2:	68fb      	ldr	r3, [r7, #12]
    71e4:	7a5b      	ldrb	r3, [r3, #9]
    71e6:	071b      	lsls	r3, r3, #28
    71e8:	0fdb      	lsrs	r3, r3, #31
    71ea:	b2db      	uxtb	r3, r3
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
    71ec:	001a      	movs	r2, r3
    71ee:	4b1f      	ldr	r3, [pc, #124]	; (726c <nwkRouteDiscoveryRequest+0xa8>)
    71f0:	4798      	blx	r3
    71f2:	0003      	movs	r3, r0
    71f4:	60bb      	str	r3, [r7, #8]
			header->nwkFcf.multicast);

	if (entry) {
    71f6:	68bb      	ldr	r3, [r7, #8]
    71f8:	2b00      	cmp	r3, #0
    71fa:	d003      	beq.n	7204 <nwkRouteDiscoveryRequest+0x40>
		frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    71fc:	687b      	ldr	r3, [r7, #4]
    71fe:	2240      	movs	r2, #64	; 0x40
    7200:	701a      	strb	r2, [r3, #0]
		return;
    7202:	e02e      	b.n	7262 <nwkRouteDiscoveryRequest+0x9e>
	}

	entry = nwkRouteDiscoveryNewEntry();
    7204:	4b1a      	ldr	r3, [pc, #104]	; (7270 <nwkRouteDiscoveryRequest+0xac>)
    7206:	4798      	blx	r3
    7208:	0003      	movs	r3, r0
    720a:	60bb      	str	r3, [r7, #8]

	if (entry) {
    720c:	68bb      	ldr	r3, [r7, #8]
    720e:	2b00      	cmp	r3, #0
    7210:	d022      	beq.n	7258 <nwkRouteDiscoveryRequest+0x94>
		entry->srcAddr = nwkIb.addr;
    7212:	4b15      	ldr	r3, [pc, #84]	; (7268 <nwkRouteDiscoveryRequest+0xa4>)
    7214:	881a      	ldrh	r2, [r3, #0]
    7216:	68bb      	ldr	r3, [r7, #8]
    7218:	801a      	strh	r2, [r3, #0]
		entry->dstAddr = header->nwkDstAddr;
    721a:	68fb      	ldr	r3, [r7, #12]
    721c:	7b5a      	ldrb	r2, [r3, #13]
    721e:	7b9b      	ldrb	r3, [r3, #14]
    7220:	021b      	lsls	r3, r3, #8
    7222:	4313      	orrs	r3, r2
    7224:	b29a      	uxth	r2, r3
    7226:	68bb      	ldr	r3, [r7, #8]
    7228:	805a      	strh	r2, [r3, #2]
		entry->multicast = header->nwkFcf.multicast;
    722a:	68fb      	ldr	r3, [r7, #12]
    722c:	7a5b      	ldrb	r3, [r3, #9]
    722e:	071b      	lsls	r3, r3, #28
    7230:	0fdb      	lsrs	r3, r3, #31
    7232:	b2db      	uxtb	r3, r3
    7234:	001a      	movs	r2, r3
    7236:	68bb      	ldr	r3, [r7, #8]
    7238:	711a      	strb	r2, [r3, #4]
		entry->senderAddr = NWK_BROADCAST_ADDR;
    723a:	68bb      	ldr	r3, [r7, #8]
    723c:	2201      	movs	r2, #1
    723e:	4252      	negs	r2, r2
    7240:	80da      	strh	r2, [r3, #6]

		if (nwkRouteDiscoverySendRequest(entry,
    7242:	68bb      	ldr	r3, [r7, #8]
    7244:	21ff      	movs	r1, #255	; 0xff
    7246:	0018      	movs	r0, r3
    7248:	4b0a      	ldr	r3, [pc, #40]	; (7274 <nwkRouteDiscoveryRequest+0xb0>)
    724a:	4798      	blx	r3
    724c:	1e03      	subs	r3, r0, #0
    724e:	d003      	beq.n	7258 <nwkRouteDiscoveryRequest+0x94>
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY)) {
			frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    7250:	687b      	ldr	r3, [r7, #4]
    7252:	2240      	movs	r2, #64	; 0x40
    7254:	701a      	strb	r2, [r3, #0]
			return;
    7256:	e004      	b.n	7262 <nwkRouteDiscoveryRequest+0x9e>
		}
	}

	nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    7258:	687b      	ldr	r3, [r7, #4]
    725a:	2111      	movs	r1, #17
    725c:	0018      	movs	r0, r3
    725e:	4b06      	ldr	r3, [pc, #24]	; (7278 <nwkRouteDiscoveryRequest+0xb4>)
    7260:	4798      	blx	r3
}
    7262:	46bd      	mov	sp, r7
    7264:	b004      	add	sp, #16
    7266:	bd80      	pop	{r7, pc}
    7268:	2000104c 	.word	0x2000104c
    726c:	0000727d 	.word	0x0000727d
    7270:	00007351 	.word	0x00007351
    7274:	0000748d 	.word	0x0000748d
    7278:	00008dd5 	.word	0x00008dd5

0000727c <nwkRouteDiscoveryFindEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
    727c:	b590      	push	{r4, r7, lr}
    727e:	b085      	sub	sp, #20
    7280:	af00      	add	r7, sp, #0
    7282:	0004      	movs	r4, r0
    7284:	0008      	movs	r0, r1
    7286:	0011      	movs	r1, r2
    7288:	1dbb      	adds	r3, r7, #6
    728a:	1c22      	adds	r2, r4, #0
    728c:	801a      	strh	r2, [r3, #0]
    728e:	1d3b      	adds	r3, r7, #4
    7290:	1c02      	adds	r2, r0, #0
    7292:	801a      	strh	r2, [r3, #0]
    7294:	1cfb      	adds	r3, r7, #3
    7296:	1c0a      	adds	r2, r1, #0
    7298:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    729a:	230f      	movs	r3, #15
    729c:	18fb      	adds	r3, r7, r3
    729e:	2200      	movs	r2, #0
    72a0:	701a      	strb	r2, [r3, #0]
    72a2:	e048      	b.n	7336 <nwkRouteDiscoveryFindEntry+0xba>
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
    72a4:	230f      	movs	r3, #15
    72a6:	18fb      	adds	r3, r7, r3
    72a8:	781a      	ldrb	r2, [r3, #0]
    72aa:	4928      	ldr	r1, [pc, #160]	; (734c <nwkRouteDiscoveryFindEntry+0xd0>)
    72ac:	0013      	movs	r3, r2
    72ae:	005b      	lsls	r3, r3, #1
    72b0:	189b      	adds	r3, r3, r2
    72b2:	009b      	lsls	r3, r3, #2
    72b4:	18cb      	adds	r3, r1, r3
    72b6:	330a      	adds	r3, #10
    72b8:	881b      	ldrh	r3, [r3, #0]
    72ba:	2b00      	cmp	r3, #0
    72bc:	d034      	beq.n	7328 <nwkRouteDiscoveryFindEntry+0xac>
				nwkRouteDiscoveryTable[i].srcAddr == src &&
    72be:	230f      	movs	r3, #15
    72c0:	18fb      	adds	r3, r7, r3
    72c2:	781a      	ldrb	r2, [r3, #0]
    72c4:	4921      	ldr	r1, [pc, #132]	; (734c <nwkRouteDiscoveryFindEntry+0xd0>)
    72c6:	0013      	movs	r3, r2
    72c8:	005b      	lsls	r3, r3, #1
    72ca:	189b      	adds	r3, r3, r2
    72cc:	009b      	lsls	r3, r3, #2
    72ce:	5a5b      	ldrh	r3, [r3, r1]
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
    72d0:	1dba      	adds	r2, r7, #6
    72d2:	8812      	ldrh	r2, [r2, #0]
    72d4:	429a      	cmp	r2, r3
    72d6:	d127      	bne.n	7328 <nwkRouteDiscoveryFindEntry+0xac>
				nwkRouteDiscoveryTable[i].srcAddr == src &&
				nwkRouteDiscoveryTable[i].dstAddr == dst &&
    72d8:	230f      	movs	r3, #15
    72da:	18fb      	adds	r3, r7, r3
    72dc:	781a      	ldrb	r2, [r3, #0]
    72de:	491b      	ldr	r1, [pc, #108]	; (734c <nwkRouteDiscoveryFindEntry+0xd0>)
    72e0:	0013      	movs	r3, r2
    72e2:	005b      	lsls	r3, r3, #1
    72e4:	189b      	adds	r3, r3, r2
    72e6:	009b      	lsls	r3, r3, #2
    72e8:	18cb      	adds	r3, r1, r3
    72ea:	3302      	adds	r3, #2
    72ec:	881b      	ldrh	r3, [r3, #0]
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
				nwkRouteDiscoveryTable[i].srcAddr == src &&
    72ee:	1d3a      	adds	r2, r7, #4
    72f0:	8812      	ldrh	r2, [r2, #0]
    72f2:	429a      	cmp	r2, r3
    72f4:	d118      	bne.n	7328 <nwkRouteDiscoveryFindEntry+0xac>
				nwkRouteDiscoveryTable[i].dstAddr == dst &&
				nwkRouteDiscoveryTable[i].multicast ==
    72f6:	230f      	movs	r3, #15
    72f8:	18fb      	adds	r3, r7, r3
    72fa:	781a      	ldrb	r2, [r3, #0]
    72fc:	4913      	ldr	r1, [pc, #76]	; (734c <nwkRouteDiscoveryFindEntry+0xd0>)
    72fe:	0013      	movs	r3, r2
    7300:	005b      	lsls	r3, r3, #1
    7302:	189b      	adds	r3, r3, r2
    7304:	009b      	lsls	r3, r3, #2
    7306:	18cb      	adds	r3, r1, r3
    7308:	3304      	adds	r3, #4
    730a:	781b      	ldrb	r3, [r3, #0]
		uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
				nwkRouteDiscoveryTable[i].srcAddr == src &&
				nwkRouteDiscoveryTable[i].dstAddr == dst &&
    730c:	1cfa      	adds	r2, r7, #3
    730e:	7812      	ldrb	r2, [r2, #0]
    7310:	429a      	cmp	r2, r3
    7312:	d109      	bne.n	7328 <nwkRouteDiscoveryFindEntry+0xac>
				nwkRouteDiscoveryTable[i].multicast ==
				multicast) {
			return &nwkRouteDiscoveryTable[i];
    7314:	230f      	movs	r3, #15
    7316:	18fb      	adds	r3, r7, r3
    7318:	781a      	ldrb	r2, [r3, #0]
    731a:	0013      	movs	r3, r2
    731c:	005b      	lsls	r3, r3, #1
    731e:	189b      	adds	r3, r3, r2
    7320:	009b      	lsls	r3, r3, #2
    7322:	4a0a      	ldr	r2, [pc, #40]	; (734c <nwkRouteDiscoveryFindEntry+0xd0>)
    7324:	189b      	adds	r3, r3, r2
    7326:	e00c      	b.n	7342 <nwkRouteDiscoveryFindEntry+0xc6>
/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    7328:	230f      	movs	r3, #15
    732a:	18fb      	adds	r3, r7, r3
    732c:	781a      	ldrb	r2, [r3, #0]
    732e:	230f      	movs	r3, #15
    7330:	18fb      	adds	r3, r7, r3
    7332:	3201      	adds	r2, #1
    7334:	701a      	strb	r2, [r3, #0]
    7336:	230f      	movs	r3, #15
    7338:	18fb      	adds	r3, r7, r3
    733a:	781b      	ldrb	r3, [r3, #0]
    733c:	2b04      	cmp	r3, #4
    733e:	d9b1      	bls.n	72a4 <nwkRouteDiscoveryFindEntry+0x28>
				multicast) {
			return &nwkRouteDiscoveryTable[i];
		}
	}

	return NULL;
    7340:	2300      	movs	r3, #0
}
    7342:	0018      	movs	r0, r3
    7344:	46bd      	mov	sp, r7
    7346:	b005      	add	sp, #20
    7348:	bd90      	pop	{r4, r7, pc}
    734a:	46c0      	nop			; (mov r8, r8)
    734c:	20000bf0 	.word	0x20000bf0

00007350 <nwkRouteDiscoveryNewEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
    7350:	b580      	push	{r7, lr}
    7352:	b082      	sub	sp, #8
    7354:	af00      	add	r7, sp, #0
	NwkRouteDiscoveryTableEntry_t *entry = NULL;
    7356:	2300      	movs	r3, #0
    7358:	607b      	str	r3, [r7, #4]

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    735a:	1cfb      	adds	r3, r7, #3
    735c:	2200      	movs	r2, #0
    735e:	701a      	strb	r2, [r3, #0]
    7360:	e01a      	b.n	7398 <nwkRouteDiscoveryNewEntry+0x48>
		if (0 == nwkRouteDiscoveryTable[i].timeout) {
    7362:	1cfb      	adds	r3, r7, #3
    7364:	781a      	ldrb	r2, [r3, #0]
    7366:	4919      	ldr	r1, [pc, #100]	; (73cc <nwkRouteDiscoveryNewEntry+0x7c>)
    7368:	0013      	movs	r3, r2
    736a:	005b      	lsls	r3, r3, #1
    736c:	189b      	adds	r3, r3, r2
    736e:	009b      	lsls	r3, r3, #2
    7370:	18cb      	adds	r3, r1, r3
    7372:	330a      	adds	r3, #10
    7374:	881b      	ldrh	r3, [r3, #0]
    7376:	2b00      	cmp	r3, #0
    7378:	d109      	bne.n	738e <nwkRouteDiscoveryNewEntry+0x3e>
			entry = &nwkRouteDiscoveryTable[i];
    737a:	1cfb      	adds	r3, r7, #3
    737c:	781a      	ldrb	r2, [r3, #0]
    737e:	0013      	movs	r3, r2
    7380:	005b      	lsls	r3, r3, #1
    7382:	189b      	adds	r3, r3, r2
    7384:	009b      	lsls	r3, r3, #2
    7386:	4a11      	ldr	r2, [pc, #68]	; (73cc <nwkRouteDiscoveryNewEntry+0x7c>)
    7388:	189b      	adds	r3, r3, r2
    738a:	607b      	str	r3, [r7, #4]
			break;
    738c:	e008      	b.n	73a0 <nwkRouteDiscoveryNewEntry+0x50>
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
	NwkRouteDiscoveryTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    738e:	1cfb      	adds	r3, r7, #3
    7390:	781a      	ldrb	r2, [r3, #0]
    7392:	1cfb      	adds	r3, r7, #3
    7394:	3201      	adds	r2, #1
    7396:	701a      	strb	r2, [r3, #0]
    7398:	1cfb      	adds	r3, r7, #3
    739a:	781b      	ldrb	r3, [r3, #0]
    739c:	2b04      	cmp	r3, #4
    739e:	d9e0      	bls.n	7362 <nwkRouteDiscoveryNewEntry+0x12>
			entry = &nwkRouteDiscoveryTable[i];
			break;
		}
	}

	if (entry) {
    73a0:	687b      	ldr	r3, [r7, #4]
    73a2:	2b00      	cmp	r3, #0
    73a4:	d00d      	beq.n	73c2 <nwkRouteDiscoveryNewEntry+0x72>
		entry->forwardLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    73a6:	687b      	ldr	r3, [r7, #4]
    73a8:	2200      	movs	r2, #0
    73aa:	721a      	strb	r2, [r3, #8]
		entry->reverseLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    73ac:	687b      	ldr	r3, [r7, #4]
    73ae:	2200      	movs	r2, #0
    73b0:	725a      	strb	r2, [r3, #9]
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
    73b2:	687b      	ldr	r3, [r7, #4]
    73b4:	22fa      	movs	r2, #250	; 0xfa
    73b6:	0092      	lsls	r2, r2, #2
    73b8:	815a      	strh	r2, [r3, #10]
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
    73ba:	4b05      	ldr	r3, [pc, #20]	; (73d0 <nwkRouteDiscoveryNewEntry+0x80>)
    73bc:	0018      	movs	r0, r3
    73be:	4b05      	ldr	r3, [pc, #20]	; (73d4 <nwkRouteDiscoveryNewEntry+0x84>)
    73c0:	4798      	blx	r3
	}

	return entry;
    73c2:	687b      	ldr	r3, [r7, #4]
}
    73c4:	0018      	movs	r0, r3
    73c6:	46bd      	mov	sp, r7
    73c8:	b002      	add	sp, #8
    73ca:	bd80      	pop	{r7, pc}
    73cc:	20000bf0 	.word	0x20000bf0
    73d0:	20000c2c 	.word	0x20000c2c
    73d4:	00005aa5 	.word	0x00005aa5

000073d8 <nwkRouteDiscoveryTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
    73d8:	b580      	push	{r7, lr}
    73da:	b084      	sub	sp, #16
    73dc:	af00      	add	r7, sp, #0
    73de:	6078      	str	r0, [r7, #4]
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;
    73e0:	230f      	movs	r3, #15
    73e2:	18fb      	adds	r3, r7, r3
    73e4:	2200      	movs	r2, #0
    73e6:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    73e8:	230e      	movs	r3, #14
    73ea:	18fb      	adds	r3, r7, r3
    73ec:	2200      	movs	r2, #0
    73ee:	701a      	strb	r2, [r3, #0]
    73f0:	e032      	b.n	7458 <nwkRouteDiscoveryTimerHandler+0x80>
		entry = &nwkRouteDiscoveryTable[i];
    73f2:	230e      	movs	r3, #14
    73f4:	18fb      	adds	r3, r7, r3
    73f6:	781a      	ldrb	r2, [r3, #0]
    73f8:	0013      	movs	r3, r2
    73fa:	005b      	lsls	r3, r3, #1
    73fc:	189b      	adds	r3, r3, r2
    73fe:	009b      	lsls	r3, r3, #2
    7400:	4a1e      	ldr	r2, [pc, #120]	; (747c <nwkRouteDiscoveryTimerHandler+0xa4>)
    7402:	189b      	adds	r3, r3, r2
    7404:	60bb      	str	r3, [r7, #8]

		if (entry->timeout > NWK_ROUTE_DISCOVERY_TIMER_INTERVAL) {
    7406:	68bb      	ldr	r3, [r7, #8]
    7408:	895b      	ldrh	r3, [r3, #10]
    740a:	2b64      	cmp	r3, #100	; 0x64
    740c:	d90a      	bls.n	7424 <nwkRouteDiscoveryTimerHandler+0x4c>
			entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    740e:	68bb      	ldr	r3, [r7, #8]
    7410:	895b      	ldrh	r3, [r3, #10]
    7412:	3b64      	subs	r3, #100	; 0x64
    7414:	b29a      	uxth	r2, r3
    7416:	68bb      	ldr	r3, [r7, #8]
    7418:	815a      	strh	r2, [r3, #10]
			restart = true;
    741a:	230f      	movs	r3, #15
    741c:	18fb      	adds	r3, r7, r3
    741e:	2201      	movs	r2, #1
    7420:	701a      	strb	r2, [r3, #0]
    7422:	e012      	b.n	744a <nwkRouteDiscoveryTimerHandler+0x72>
		} else {
			entry->timeout = 0;
    7424:	68bb      	ldr	r3, [r7, #8]
    7426:	2200      	movs	r2, #0
    7428:	815a      	strh	r2, [r3, #10]

			if (entry->srcAddr == nwkIb.addr) {
    742a:	68bb      	ldr	r3, [r7, #8]
    742c:	881a      	ldrh	r2, [r3, #0]
    742e:	4b14      	ldr	r3, [pc, #80]	; (7480 <nwkRouteDiscoveryTimerHandler+0xa8>)
    7430:	881b      	ldrh	r3, [r3, #0]
    7432:	429a      	cmp	r2, r3
    7434:	d109      	bne.n	744a <nwkRouteDiscoveryTimerHandler+0x72>
				nwkRouteDiscoveryDone(entry,
						entry->reverseLinkQuality >
    7436:	68bb      	ldr	r3, [r7, #8]
    7438:	7a5b      	ldrb	r3, [r3, #9]
			restart = true;
		} else {
			entry->timeout = 0;

			if (entry->srcAddr == nwkIb.addr) {
				nwkRouteDiscoveryDone(entry,
    743a:	1e5a      	subs	r2, r3, #1
    743c:	4193      	sbcs	r3, r2
    743e:	b2da      	uxtb	r2, r3
    7440:	68bb      	ldr	r3, [r7, #8]
    7442:	0011      	movs	r1, r2
    7444:	0018      	movs	r0, r3
    7446:	4b0f      	ldr	r3, [pc, #60]	; (7484 <nwkRouteDiscoveryTimerHandler+0xac>)
    7448:	4798      	blx	r3
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    744a:	230e      	movs	r3, #14
    744c:	18fb      	adds	r3, r7, r3
    744e:	781a      	ldrb	r2, [r3, #0]
    7450:	230e      	movs	r3, #14
    7452:	18fb      	adds	r3, r7, r3
    7454:	3201      	adds	r2, #1
    7456:	701a      	strb	r2, [r3, #0]
    7458:	230e      	movs	r3, #14
    745a:	18fb      	adds	r3, r7, r3
    745c:	781b      	ldrb	r3, [r3, #0]
    745e:	2b04      	cmp	r3, #4
    7460:	d9c7      	bls.n	73f2 <nwkRouteDiscoveryTimerHandler+0x1a>
						0);
			}
		}
	}

	if (restart) {
    7462:	230f      	movs	r3, #15
    7464:	18fb      	adds	r3, r7, r3
    7466:	781b      	ldrb	r3, [r3, #0]
    7468:	2b00      	cmp	r3, #0
    746a:	d003      	beq.n	7474 <nwkRouteDiscoveryTimerHandler+0x9c>
		SYS_TimerStart(timer);
    746c:	687b      	ldr	r3, [r7, #4]
    746e:	0018      	movs	r0, r3
    7470:	4b05      	ldr	r3, [pc, #20]	; (7488 <nwkRouteDiscoveryTimerHandler+0xb0>)
    7472:	4798      	blx	r3
	}
}
    7474:	46c0      	nop			; (mov r8, r8)
    7476:	46bd      	mov	sp, r7
    7478:	b004      	add	sp, #16
    747a:	bd80      	pop	{r7, pc}
    747c:	20000bf0 	.word	0x20000bf0
    7480:	2000104c 	.word	0x2000104c
    7484:	000079a9 	.word	0x000079a9
    7488:	00005aa5 	.word	0x00005aa5

0000748c <nwkRouteDiscoverySendRequest>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRouteDiscoverySendRequest(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t lq)
{
    748c:	b590      	push	{r4, r7, lr}
    748e:	b085      	sub	sp, #20
    7490:	af00      	add	r7, sp, #0
    7492:	6078      	str	r0, [r7, #4]
    7494:	000a      	movs	r2, r1
    7496:	1cfb      	adds	r3, r7, #3
    7498:	701a      	strb	r2, [r3, #0]
	NwkFrame_t *req;
	NwkCommandRouteRequest_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    749a:	4b45      	ldr	r3, [pc, #276]	; (75b0 <nwkRouteDiscoverySendRequest+0x124>)
    749c:	4798      	blx	r3
    749e:	0003      	movs	r3, r0
    74a0:	60fb      	str	r3, [r7, #12]
    74a2:	68fb      	ldr	r3, [r7, #12]
    74a4:	2b00      	cmp	r3, #0
    74a6:	d101      	bne.n	74ac <nwkRouteDiscoverySendRequest+0x20>
		return false;
    74a8:	2300      	movs	r3, #0
    74aa:	e07d      	b.n	75a8 <nwkRouteDiscoverySendRequest+0x11c>
	}

	nwkFrameCommandInit(req);
    74ac:	68fb      	ldr	r3, [r7, #12]
    74ae:	0018      	movs	r0, r3
    74b0:	4b40      	ldr	r3, [pc, #256]	; (75b4 <nwkRouteDiscoverySendRequest+0x128>)
    74b2:	4798      	blx	r3

	req->size += sizeof(NwkCommandRouteRequest_t);
    74b4:	68fb      	ldr	r3, [r7, #12]
    74b6:	785b      	ldrb	r3, [r3, #1]
    74b8:	3307      	adds	r3, #7
    74ba:	b2da      	uxtb	r2, r3
    74bc:	68fb      	ldr	r3, [r7, #12]
    74be:	705a      	strb	r2, [r3, #1]
	req->tx.confirm = NULL;
    74c0:	68fb      	ldr	r3, [r7, #12]
    74c2:	2289      	movs	r2, #137	; 0x89
    74c4:	5c99      	ldrb	r1, [r3, r2]
    74c6:	2000      	movs	r0, #0
    74c8:	4001      	ands	r1, r0
    74ca:	5499      	strb	r1, [r3, r2]
    74cc:	1899      	adds	r1, r3, r2
    74ce:	7848      	ldrb	r0, [r1, #1]
    74d0:	2400      	movs	r4, #0
    74d2:	4020      	ands	r0, r4
    74d4:	7048      	strb	r0, [r1, #1]
    74d6:	1899      	adds	r1, r3, r2
    74d8:	7888      	ldrb	r0, [r1, #2]
    74da:	2400      	movs	r4, #0
    74dc:	4020      	ands	r0, r4
    74de:	7088      	strb	r0, [r1, #2]
    74e0:	189b      	adds	r3, r3, r2
    74e2:	78da      	ldrb	r2, [r3, #3]
    74e4:	2100      	movs	r1, #0
    74e6:	400a      	ands	r2, r1
    74e8:	70da      	strb	r2, [r3, #3]

	req->header.nwkFcf.linkLocal = 1;
    74ea:	68fb      	ldr	r3, [r7, #12]
    74ec:	7ada      	ldrb	r2, [r3, #11]
    74ee:	2104      	movs	r1, #4
    74f0:	430a      	orrs	r2, r1
    74f2:	72da      	strb	r2, [r3, #11]
	req->header.nwkDstAddr = NWK_BROADCAST_ADDR;
    74f4:	68fb      	ldr	r3, [r7, #12]
    74f6:	330f      	adds	r3, #15
    74f8:	781a      	ldrb	r2, [r3, #0]
    74fa:	2101      	movs	r1, #1
    74fc:	4249      	negs	r1, r1
    74fe:	430a      	orrs	r2, r1
    7500:	701a      	strb	r2, [r3, #0]
    7502:	785a      	ldrb	r2, [r3, #1]
    7504:	2101      	movs	r1, #1
    7506:	4249      	negs	r1, r1
    7508:	430a      	orrs	r2, r1
    750a:	705a      	strb	r2, [r3, #1]

	command = (NwkCommandRouteRequest_t *)req->payload;
    750c:	68fb      	ldr	r3, [r7, #12]
    750e:	2281      	movs	r2, #129	; 0x81
    7510:	5c9a      	ldrb	r2, [r3, r2]
    7512:	2182      	movs	r1, #130	; 0x82
    7514:	5c59      	ldrb	r1, [r3, r1]
    7516:	0209      	lsls	r1, r1, #8
    7518:	430a      	orrs	r2, r1
    751a:	2183      	movs	r1, #131	; 0x83
    751c:	5c59      	ldrb	r1, [r3, r1]
    751e:	0409      	lsls	r1, r1, #16
    7520:	430a      	orrs	r2, r1
    7522:	2184      	movs	r1, #132	; 0x84
    7524:	5c5b      	ldrb	r3, [r3, r1]
    7526:	061b      	lsls	r3, r3, #24
    7528:	4313      	orrs	r3, r2
    752a:	60bb      	str	r3, [r7, #8]
	command->id = NWK_COMMAND_ROUTE_REQUEST;
    752c:	68bb      	ldr	r3, [r7, #8]
    752e:	2202      	movs	r2, #2
    7530:	701a      	strb	r2, [r3, #0]
	command->srcAddr = entry->srcAddr;
    7532:	687b      	ldr	r3, [r7, #4]
    7534:	881a      	ldrh	r2, [r3, #0]
    7536:	68bb      	ldr	r3, [r7, #8]
    7538:	3301      	adds	r3, #1
    753a:	21ff      	movs	r1, #255	; 0xff
    753c:	4011      	ands	r1, r2
    753e:	000c      	movs	r4, r1
    7540:	7819      	ldrb	r1, [r3, #0]
    7542:	2000      	movs	r0, #0
    7544:	4001      	ands	r1, r0
    7546:	1c08      	adds	r0, r1, #0
    7548:	1c21      	adds	r1, r4, #0
    754a:	4301      	orrs	r1, r0
    754c:	7019      	strb	r1, [r3, #0]
    754e:	0a12      	lsrs	r2, r2, #8
    7550:	b290      	uxth	r0, r2
    7552:	785a      	ldrb	r2, [r3, #1]
    7554:	2100      	movs	r1, #0
    7556:	400a      	ands	r2, r1
    7558:	1c11      	adds	r1, r2, #0
    755a:	1c02      	adds	r2, r0, #0
    755c:	430a      	orrs	r2, r1
    755e:	705a      	strb	r2, [r3, #1]
	command->dstAddr = entry->dstAddr;
    7560:	687b      	ldr	r3, [r7, #4]
    7562:	885a      	ldrh	r2, [r3, #2]
    7564:	68bb      	ldr	r3, [r7, #8]
    7566:	3303      	adds	r3, #3
    7568:	21ff      	movs	r1, #255	; 0xff
    756a:	4011      	ands	r1, r2
    756c:	000c      	movs	r4, r1
    756e:	7819      	ldrb	r1, [r3, #0]
    7570:	2000      	movs	r0, #0
    7572:	4001      	ands	r1, r0
    7574:	1c08      	adds	r0, r1, #0
    7576:	1c21      	adds	r1, r4, #0
    7578:	4301      	orrs	r1, r0
    757a:	7019      	strb	r1, [r3, #0]
    757c:	0a12      	lsrs	r2, r2, #8
    757e:	b290      	uxth	r0, r2
    7580:	785a      	ldrb	r2, [r3, #1]
    7582:	2100      	movs	r1, #0
    7584:	400a      	ands	r2, r1
    7586:	1c11      	adds	r1, r2, #0
    7588:	1c02      	adds	r2, r0, #0
    758a:	430a      	orrs	r2, r1
    758c:	705a      	strb	r2, [r3, #1]
	command->multicast = entry->multicast;
    758e:	687b      	ldr	r3, [r7, #4]
    7590:	791a      	ldrb	r2, [r3, #4]
    7592:	68bb      	ldr	r3, [r7, #8]
    7594:	715a      	strb	r2, [r3, #5]
	command->linkQuality = lq;
    7596:	68bb      	ldr	r3, [r7, #8]
    7598:	1cfa      	adds	r2, r7, #3
    759a:	7812      	ldrb	r2, [r2, #0]
    759c:	719a      	strb	r2, [r3, #6]

	nwkTxFrame(req);
    759e:	68fb      	ldr	r3, [r7, #12]
    75a0:	0018      	movs	r0, r3
    75a2:	4b05      	ldr	r3, [pc, #20]	; (75b8 <nwkRouteDiscoverySendRequest+0x12c>)
    75a4:	4798      	blx	r3

	return true;
    75a6:	2301      	movs	r3, #1
}
    75a8:	0018      	movs	r0, r3
    75aa:	46bd      	mov	sp, r7
    75ac:	b005      	add	sp, #20
    75ae:	bd90      	pop	{r4, r7, pc}
    75b0:	00006855 	.word	0x00006855
    75b4:	000069c9 	.word	0x000069c9
    75b8:	00008935 	.word	0x00008935

000075bc <nwkRouteDiscoveryRequestReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryRequestReceived(NWK_DataInd_t *ind)
{
    75bc:	b590      	push	{r4, r7, lr}
    75be:	b087      	sub	sp, #28
    75c0:	af00      	add	r7, sp, #0
    75c2:	6078      	str	r0, [r7, #4]
	NwkCommandRouteRequest_t *command
    75c4:	687b      	ldr	r3, [r7, #4]
    75c6:	689b      	ldr	r3, [r3, #8]
    75c8:	60fb      	str	r3, [r7, #12]
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;
    75ca:	2313      	movs	r3, #19
    75cc:	18fb      	adds	r3, r7, r3
    75ce:	2200      	movs	r2, #0
    75d0:	701a      	strb	r2, [r3, #0]

	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	7b1b      	ldrb	r3, [r3, #12]
    75d6:	2b07      	cmp	r3, #7
    75d8:	d001      	beq.n	75de <nwkRouteDiscoveryRequestReceived+0x22>
		return false;
    75da:	2300      	movs	r3, #0
    75dc:	e0a2      	b.n	7724 <nwkRouteDiscoveryRequestReceived+0x168>
	if (1 == command->multicast && NWK_GroupIsMember(command->dstAddr)) {
		reply = true;
	}
#endif

	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
    75de:	68fb      	ldr	r3, [r7, #12]
    75e0:	795b      	ldrb	r3, [r3, #5]
    75e2:	2b00      	cmp	r3, #0
    75e4:	d10d      	bne.n	7602 <nwkRouteDiscoveryRequestReceived+0x46>
    75e6:	68fb      	ldr	r3, [r7, #12]
    75e8:	78da      	ldrb	r2, [r3, #3]
    75ea:	791b      	ldrb	r3, [r3, #4]
    75ec:	021b      	lsls	r3, r3, #8
    75ee:	4313      	orrs	r3, r2
    75f0:	b29a      	uxth	r2, r3
    75f2:	4b4e      	ldr	r3, [pc, #312]	; (772c <nwkRouteDiscoveryRequestReceived+0x170>)
    75f4:	881b      	ldrh	r3, [r3, #0]
    75f6:	429a      	cmp	r2, r3
    75f8:	d103      	bne.n	7602 <nwkRouteDiscoveryRequestReceived+0x46>
		reply = true;
    75fa:	2313      	movs	r3, #19
    75fc:	18fb      	adds	r3, r7, r3
    75fe:	2201      	movs	r2, #1
    7600:	701a      	strb	r2, [r3, #0]
	}

	if (command->srcAddr == nwkIb.addr) {
    7602:	68fb      	ldr	r3, [r7, #12]
    7604:	785a      	ldrb	r2, [r3, #1]
    7606:	789b      	ldrb	r3, [r3, #2]
    7608:	021b      	lsls	r3, r3, #8
    760a:	4313      	orrs	r3, r2
    760c:	b29a      	uxth	r2, r3
    760e:	4b47      	ldr	r3, [pc, #284]	; (772c <nwkRouteDiscoveryRequestReceived+0x170>)
    7610:	881b      	ldrh	r3, [r3, #0]
    7612:	429a      	cmp	r2, r3
    7614:	d101      	bne.n	761a <nwkRouteDiscoveryRequestReceived+0x5e>
		return true;
    7616:	2301      	movs	r3, #1
    7618:	e084      	b.n	7724 <nwkRouteDiscoveryRequestReceived+0x168>
	}

	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
    761a:	2313      	movs	r3, #19
    761c:	18fb      	adds	r3, r7, r3
    761e:	781b      	ldrb	r3, [r3, #0]
    7620:	2201      	movs	r2, #1
    7622:	4053      	eors	r3, r2
    7624:	b2db      	uxtb	r3, r3
    7626:	2b00      	cmp	r3, #0
    7628:	d006      	beq.n	7638 <nwkRouteDiscoveryRequestReceived+0x7c>
    762a:	4b40      	ldr	r3, [pc, #256]	; (772c <nwkRouteDiscoveryRequestReceived+0x170>)
    762c:	881b      	ldrh	r3, [r3, #0]
    762e:	b21b      	sxth	r3, r3
    7630:	2b00      	cmp	r3, #0
    7632:	da01      	bge.n	7638 <nwkRouteDiscoveryRequestReceived+0x7c>
		return true;
    7634:	2301      	movs	r3, #1
    7636:	e075      	b.n	7724 <nwkRouteDiscoveryRequestReceived+0x168>
	}

	linkQuality = nwkRouteDiscoveryUpdateLq(command->linkQuality, ind->lqi);
    7638:	68fb      	ldr	r3, [r7, #12]
    763a:	799a      	ldrb	r2, [r3, #6]
    763c:	687b      	ldr	r3, [r7, #4]
    763e:	7b5b      	ldrb	r3, [r3, #13]
    7640:	210b      	movs	r1, #11
    7642:	187c      	adds	r4, r7, r1
    7644:	0019      	movs	r1, r3
    7646:	0010      	movs	r0, r2
    7648:	4b39      	ldr	r3, [pc, #228]	; (7730 <nwkRouteDiscoveryRequestReceived+0x174>)
    764a:	4798      	blx	r3
    764c:	0003      	movs	r3, r0
    764e:	7023      	strb	r3, [r4, #0]

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    7650:	68fb      	ldr	r3, [r7, #12]
    7652:	785a      	ldrb	r2, [r3, #1]
    7654:	789b      	ldrb	r3, [r3, #2]
    7656:	021b      	lsls	r3, r3, #8
    7658:	4313      	orrs	r3, r2
    765a:	b298      	uxth	r0, r3
    765c:	68fb      	ldr	r3, [r7, #12]
    765e:	78da      	ldrb	r2, [r3, #3]
    7660:	791b      	ldrb	r3, [r3, #4]
    7662:	021b      	lsls	r3, r3, #8
    7664:	4313      	orrs	r3, r2
    7666:	b299      	uxth	r1, r3
    7668:	68fb      	ldr	r3, [r7, #12]
    766a:	795b      	ldrb	r3, [r3, #5]
    766c:	001a      	movs	r2, r3
    766e:	4b31      	ldr	r3, [pc, #196]	; (7734 <nwkRouteDiscoveryRequestReceived+0x178>)
    7670:	4798      	blx	r3
    7672:	0003      	movs	r3, r0
    7674:	617b      	str	r3, [r7, #20]
			command->multicast);

	if (entry) {
    7676:	697b      	ldr	r3, [r7, #20]
    7678:	2b00      	cmp	r3, #0
    767a:	d008      	beq.n	768e <nwkRouteDiscoveryRequestReceived+0xd2>
		if (linkQuality <= entry->forwardLinkQuality) {
    767c:	697b      	ldr	r3, [r7, #20]
    767e:	7a1b      	ldrb	r3, [r3, #8]
    7680:	220b      	movs	r2, #11
    7682:	18ba      	adds	r2, r7, r2
    7684:	7812      	ldrb	r2, [r2, #0]
    7686:	429a      	cmp	r2, r3
    7688:	d80a      	bhi.n	76a0 <nwkRouteDiscoveryRequestReceived+0xe4>
			return true;
    768a:	2301      	movs	r3, #1
    768c:	e04a      	b.n	7724 <nwkRouteDiscoveryRequestReceived+0x168>
		}
	} else {
		if (NULL == (entry = nwkRouteDiscoveryNewEntry())) {
    768e:	4b2a      	ldr	r3, [pc, #168]	; (7738 <nwkRouteDiscoveryRequestReceived+0x17c>)
    7690:	4798      	blx	r3
    7692:	0003      	movs	r3, r0
    7694:	617b      	str	r3, [r7, #20]
    7696:	697b      	ldr	r3, [r7, #20]
    7698:	2b00      	cmp	r3, #0
    769a:	d101      	bne.n	76a0 <nwkRouteDiscoveryRequestReceived+0xe4>
			return true;
    769c:	2301      	movs	r3, #1
    769e:	e041      	b.n	7724 <nwkRouteDiscoveryRequestReceived+0x168>
		}
	}

	entry->srcAddr = command->srcAddr;
    76a0:	68fb      	ldr	r3, [r7, #12]
    76a2:	785a      	ldrb	r2, [r3, #1]
    76a4:	789b      	ldrb	r3, [r3, #2]
    76a6:	021b      	lsls	r3, r3, #8
    76a8:	4313      	orrs	r3, r2
    76aa:	b29a      	uxth	r2, r3
    76ac:	697b      	ldr	r3, [r7, #20]
    76ae:	801a      	strh	r2, [r3, #0]
	entry->dstAddr = command->dstAddr;
    76b0:	68fb      	ldr	r3, [r7, #12]
    76b2:	78da      	ldrb	r2, [r3, #3]
    76b4:	791b      	ldrb	r3, [r3, #4]
    76b6:	021b      	lsls	r3, r3, #8
    76b8:	4313      	orrs	r3, r2
    76ba:	b29a      	uxth	r2, r3
    76bc:	697b      	ldr	r3, [r7, #20]
    76be:	805a      	strh	r2, [r3, #2]
	entry->multicast = command->multicast;
    76c0:	68fb      	ldr	r3, [r7, #12]
    76c2:	795a      	ldrb	r2, [r3, #5]
    76c4:	697b      	ldr	r3, [r7, #20]
    76c6:	711a      	strb	r2, [r3, #4]
	entry->senderAddr = ind->srcAddr;
    76c8:	687b      	ldr	r3, [r7, #4]
    76ca:	881a      	ldrh	r2, [r3, #0]
    76cc:	697b      	ldr	r3, [r7, #20]
    76ce:	80da      	strh	r2, [r3, #6]
	entry->forwardLinkQuality = linkQuality;
    76d0:	697b      	ldr	r3, [r7, #20]
    76d2:	220b      	movs	r2, #11
    76d4:	18ba      	adds	r2, r7, r2
    76d6:	7812      	ldrb	r2, [r2, #0]
    76d8:	721a      	strb	r2, [r3, #8]

	if (reply) {
    76da:	2313      	movs	r3, #19
    76dc:	18fb      	adds	r3, r7, r3
    76de:	781b      	ldrb	r3, [r3, #0]
    76e0:	2b00      	cmp	r3, #0
    76e2:	d016      	beq.n	7712 <nwkRouteDiscoveryRequestReceived+0x156>
		nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr,
    76e4:	68fb      	ldr	r3, [r7, #12]
    76e6:	785a      	ldrb	r2, [r3, #1]
    76e8:	789b      	ldrb	r3, [r3, #2]
    76ea:	021b      	lsls	r3, r3, #8
    76ec:	4313      	orrs	r3, r2
    76ee:	b298      	uxth	r0, r3
    76f0:	687b      	ldr	r3, [r7, #4]
    76f2:	881a      	ldrh	r2, [r3, #0]
    76f4:	230b      	movs	r3, #11
    76f6:	18fb      	adds	r3, r7, r3
    76f8:	781b      	ldrb	r3, [r3, #0]
    76fa:	2100      	movs	r1, #0
    76fc:	4c0f      	ldr	r4, [pc, #60]	; (773c <nwkRouteDiscoveryRequestReceived+0x180>)
    76fe:	47a0      	blx	r4
				linkQuality);
		nwkRouteDiscoverySendReply(entry, linkQuality,
    7700:	230b      	movs	r3, #11
    7702:	18fb      	adds	r3, r7, r3
    7704:	7819      	ldrb	r1, [r3, #0]
    7706:	697b      	ldr	r3, [r7, #20]
    7708:	22ff      	movs	r2, #255	; 0xff
    770a:	0018      	movs	r0, r3
    770c:	4b0c      	ldr	r3, [pc, #48]	; (7740 <nwkRouteDiscoveryRequestReceived+0x184>)
    770e:	4798      	blx	r3
    7710:	e007      	b.n	7722 <nwkRouteDiscoveryRequestReceived+0x166>
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
    7712:	230b      	movs	r3, #11
    7714:	18fb      	adds	r3, r7, r3
    7716:	781a      	ldrb	r2, [r3, #0]
    7718:	697b      	ldr	r3, [r7, #20]
    771a:	0011      	movs	r1, r2
    771c:	0018      	movs	r0, r3
    771e:	4b09      	ldr	r3, [pc, #36]	; (7744 <nwkRouteDiscoveryRequestReceived+0x188>)
    7720:	4798      	blx	r3
	}

	return true;
    7722:	2301      	movs	r3, #1
}
    7724:	0018      	movs	r0, r3
    7726:	46bd      	mov	sp, r7
    7728:	b007      	add	sp, #28
    772a:	bd90      	pop	{r4, r7, pc}
    772c:	2000104c 	.word	0x2000104c
    7730:	00007a31 	.word	0x00007a31
    7734:	0000727d 	.word	0x0000727d
    7738:	00007351 	.word	0x00007351
    773c:	00006c15 	.word	0x00006c15
    7740:	00007749 	.word	0x00007749
    7744:	0000748d 	.word	0x0000748d

00007748 <nwkRouteDiscoverySendReply>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoverySendReply(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t flq, uint8_t rlq)
{
    7748:	b590      	push	{r4, r7, lr}
    774a:	b085      	sub	sp, #20
    774c:	af00      	add	r7, sp, #0
    774e:	6078      	str	r0, [r7, #4]
    7750:	0008      	movs	r0, r1
    7752:	0011      	movs	r1, r2
    7754:	1cfb      	adds	r3, r7, #3
    7756:	1c02      	adds	r2, r0, #0
    7758:	701a      	strb	r2, [r3, #0]
    775a:	1cbb      	adds	r3, r7, #2
    775c:	1c0a      	adds	r2, r1, #0
    775e:	701a      	strb	r2, [r3, #0]
	NwkFrame_t *req;
	NwkCommandRouteReply_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    7760:	4b4b      	ldr	r3, [pc, #300]	; (7890 <nwkRouteDiscoverySendReply+0x148>)
    7762:	4798      	blx	r3
    7764:	0003      	movs	r3, r0
    7766:	60fb      	str	r3, [r7, #12]
    7768:	68fb      	ldr	r3, [r7, #12]
    776a:	2b00      	cmp	r3, #0
    776c:	d100      	bne.n	7770 <nwkRouteDiscoverySendReply+0x28>
    776e:	e08b      	b.n	7888 <nwkRouteDiscoverySendReply+0x140>
		return;
	}

	nwkFrameCommandInit(req);
    7770:	68fb      	ldr	r3, [r7, #12]
    7772:	0018      	movs	r0, r3
    7774:	4b47      	ldr	r3, [pc, #284]	; (7894 <nwkRouteDiscoverySendReply+0x14c>)
    7776:	4798      	blx	r3

	req->size += sizeof(NwkCommandRouteReply_t);
    7778:	68fb      	ldr	r3, [r7, #12]
    777a:	785b      	ldrb	r3, [r3, #1]
    777c:	3308      	adds	r3, #8
    777e:	b2da      	uxtb	r2, r3
    7780:	68fb      	ldr	r3, [r7, #12]
    7782:	705a      	strb	r2, [r3, #1]
	req->tx.confirm = NULL;
    7784:	68fb      	ldr	r3, [r7, #12]
    7786:	2289      	movs	r2, #137	; 0x89
    7788:	5c99      	ldrb	r1, [r3, r2]
    778a:	2000      	movs	r0, #0
    778c:	4001      	ands	r1, r0
    778e:	5499      	strb	r1, [r3, r2]
    7790:	1899      	adds	r1, r3, r2
    7792:	7848      	ldrb	r0, [r1, #1]
    7794:	2400      	movs	r4, #0
    7796:	4020      	ands	r0, r4
    7798:	7048      	strb	r0, [r1, #1]
    779a:	1899      	adds	r1, r3, r2
    779c:	7888      	ldrb	r0, [r1, #2]
    779e:	2400      	movs	r4, #0
    77a0:	4020      	ands	r0, r4
    77a2:	7088      	strb	r0, [r1, #2]
    77a4:	189b      	adds	r3, r3, r2
    77a6:	78da      	ldrb	r2, [r3, #3]
    77a8:	2100      	movs	r1, #0
    77aa:	400a      	ands	r2, r1
    77ac:	70da      	strb	r2, [r3, #3]
	req->tx.control = NWK_TX_CONTROL_DIRECT_LINK;
    77ae:	68fb      	ldr	r3, [r7, #12]
    77b0:	2288      	movs	r2, #136	; 0x88
    77b2:	2104      	movs	r1, #4
    77b4:	5499      	strb	r1, [r3, r2]

	req->header.nwkDstAddr = entry->senderAddr;
    77b6:	687b      	ldr	r3, [r7, #4]
    77b8:	88da      	ldrh	r2, [r3, #6]
    77ba:	68fb      	ldr	r3, [r7, #12]
    77bc:	330f      	adds	r3, #15
    77be:	21ff      	movs	r1, #255	; 0xff
    77c0:	4011      	ands	r1, r2
    77c2:	000c      	movs	r4, r1
    77c4:	7819      	ldrb	r1, [r3, #0]
    77c6:	2000      	movs	r0, #0
    77c8:	4001      	ands	r1, r0
    77ca:	1c08      	adds	r0, r1, #0
    77cc:	1c21      	adds	r1, r4, #0
    77ce:	4301      	orrs	r1, r0
    77d0:	7019      	strb	r1, [r3, #0]
    77d2:	0a12      	lsrs	r2, r2, #8
    77d4:	b290      	uxth	r0, r2
    77d6:	785a      	ldrb	r2, [r3, #1]
    77d8:	2100      	movs	r1, #0
    77da:	400a      	ands	r2, r1
    77dc:	1c11      	adds	r1, r2, #0
    77de:	1c02      	adds	r2, r0, #0
    77e0:	430a      	orrs	r2, r1
    77e2:	705a      	strb	r2, [r3, #1]

	command = (NwkCommandRouteReply_t *)req->payload;
    77e4:	68fb      	ldr	r3, [r7, #12]
    77e6:	2281      	movs	r2, #129	; 0x81
    77e8:	5c9a      	ldrb	r2, [r3, r2]
    77ea:	2182      	movs	r1, #130	; 0x82
    77ec:	5c59      	ldrb	r1, [r3, r1]
    77ee:	0209      	lsls	r1, r1, #8
    77f0:	430a      	orrs	r2, r1
    77f2:	2183      	movs	r1, #131	; 0x83
    77f4:	5c59      	ldrb	r1, [r3, r1]
    77f6:	0409      	lsls	r1, r1, #16
    77f8:	430a      	orrs	r2, r1
    77fa:	2184      	movs	r1, #132	; 0x84
    77fc:	5c5b      	ldrb	r3, [r3, r1]
    77fe:	061b      	lsls	r3, r3, #24
    7800:	4313      	orrs	r3, r2
    7802:	60bb      	str	r3, [r7, #8]
	command->id = NWK_COMMAND_ROUTE_REPLY;
    7804:	68bb      	ldr	r3, [r7, #8]
    7806:	2203      	movs	r2, #3
    7808:	701a      	strb	r2, [r3, #0]
	command->srcAddr = entry->srcAddr;
    780a:	687b      	ldr	r3, [r7, #4]
    780c:	881a      	ldrh	r2, [r3, #0]
    780e:	68bb      	ldr	r3, [r7, #8]
    7810:	3301      	adds	r3, #1
    7812:	21ff      	movs	r1, #255	; 0xff
    7814:	4011      	ands	r1, r2
    7816:	000c      	movs	r4, r1
    7818:	7819      	ldrb	r1, [r3, #0]
    781a:	2000      	movs	r0, #0
    781c:	4001      	ands	r1, r0
    781e:	1c08      	adds	r0, r1, #0
    7820:	1c21      	adds	r1, r4, #0
    7822:	4301      	orrs	r1, r0
    7824:	7019      	strb	r1, [r3, #0]
    7826:	0a12      	lsrs	r2, r2, #8
    7828:	b290      	uxth	r0, r2
    782a:	785a      	ldrb	r2, [r3, #1]
    782c:	2100      	movs	r1, #0
    782e:	400a      	ands	r2, r1
    7830:	1c11      	adds	r1, r2, #0
    7832:	1c02      	adds	r2, r0, #0
    7834:	430a      	orrs	r2, r1
    7836:	705a      	strb	r2, [r3, #1]
	command->dstAddr = entry->dstAddr;
    7838:	687b      	ldr	r3, [r7, #4]
    783a:	885a      	ldrh	r2, [r3, #2]
    783c:	68bb      	ldr	r3, [r7, #8]
    783e:	3303      	adds	r3, #3
    7840:	21ff      	movs	r1, #255	; 0xff
    7842:	4011      	ands	r1, r2
    7844:	000c      	movs	r4, r1
    7846:	7819      	ldrb	r1, [r3, #0]
    7848:	2000      	movs	r0, #0
    784a:	4001      	ands	r1, r0
    784c:	1c08      	adds	r0, r1, #0
    784e:	1c21      	adds	r1, r4, #0
    7850:	4301      	orrs	r1, r0
    7852:	7019      	strb	r1, [r3, #0]
    7854:	0a12      	lsrs	r2, r2, #8
    7856:	b290      	uxth	r0, r2
    7858:	785a      	ldrb	r2, [r3, #1]
    785a:	2100      	movs	r1, #0
    785c:	400a      	ands	r2, r1
    785e:	1c11      	adds	r1, r2, #0
    7860:	1c02      	adds	r2, r0, #0
    7862:	430a      	orrs	r2, r1
    7864:	705a      	strb	r2, [r3, #1]
	command->multicast = entry->multicast;
    7866:	687b      	ldr	r3, [r7, #4]
    7868:	791a      	ldrb	r2, [r3, #4]
    786a:	68bb      	ldr	r3, [r7, #8]
    786c:	715a      	strb	r2, [r3, #5]
	command->forwardLinkQuality = flq;
    786e:	68bb      	ldr	r3, [r7, #8]
    7870:	1cfa      	adds	r2, r7, #3
    7872:	7812      	ldrb	r2, [r2, #0]
    7874:	719a      	strb	r2, [r3, #6]
	command->reverseLinkQuality = rlq;
    7876:	68bb      	ldr	r3, [r7, #8]
    7878:	1cba      	adds	r2, r7, #2
    787a:	7812      	ldrb	r2, [r2, #0]
    787c:	71da      	strb	r2, [r3, #7]

	nwkTxFrame(req);
    787e:	68fb      	ldr	r3, [r7, #12]
    7880:	0018      	movs	r0, r3
    7882:	4b05      	ldr	r3, [pc, #20]	; (7898 <nwkRouteDiscoverySendReply+0x150>)
    7884:	4798      	blx	r3
    7886:	e000      	b.n	788a <nwkRouteDiscoverySendReply+0x142>
{
	NwkFrame_t *req;
	NwkCommandRouteReply_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
		return;
    7888:	46c0      	nop			; (mov r8, r8)
	command->multicast = entry->multicast;
	command->forwardLinkQuality = flq;
	command->reverseLinkQuality = rlq;

	nwkTxFrame(req);
}
    788a:	46bd      	mov	sp, r7
    788c:	b005      	add	sp, #20
    788e:	bd90      	pop	{r4, r7, pc}
    7890:	00006855 	.word	0x00006855
    7894:	000069c9 	.word	0x000069c9
    7898:	00008935 	.word	0x00008935

0000789c <nwkRouteDiscoveryReplyReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryReplyReceived(NWK_DataInd_t *ind)
{
    789c:	b590      	push	{r4, r7, lr}
    789e:	b087      	sub	sp, #28
    78a0:	af00      	add	r7, sp, #0
    78a2:	6078      	str	r0, [r7, #4]
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
    78a4:	687b      	ldr	r3, [r7, #4]
    78a6:	689b      	ldr	r3, [r3, #8]
    78a8:	617b      	str	r3, [r7, #20]
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
    78aa:	687b      	ldr	r3, [r7, #4]
    78ac:	7b1b      	ldrb	r3, [r3, #12]
    78ae:	2b08      	cmp	r3, #8
    78b0:	d001      	beq.n	78b6 <nwkRouteDiscoveryReplyReceived+0x1a>
		return false;
    78b2:	2300      	movs	r3, #0
    78b4:	e06a      	b.n	798c <nwkRouteDiscoveryReplyReceived+0xf0>
	}

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    78b6:	697b      	ldr	r3, [r7, #20]
    78b8:	785a      	ldrb	r2, [r3, #1]
    78ba:	789b      	ldrb	r3, [r3, #2]
    78bc:	021b      	lsls	r3, r3, #8
    78be:	4313      	orrs	r3, r2
    78c0:	b298      	uxth	r0, r3
    78c2:	697b      	ldr	r3, [r7, #20]
    78c4:	78da      	ldrb	r2, [r3, #3]
    78c6:	791b      	ldrb	r3, [r3, #4]
    78c8:	021b      	lsls	r3, r3, #8
    78ca:	4313      	orrs	r3, r2
    78cc:	b299      	uxth	r1, r3
    78ce:	697b      	ldr	r3, [r7, #20]
    78d0:	795b      	ldrb	r3, [r3, #5]
    78d2:	001a      	movs	r2, r3
    78d4:	4b2f      	ldr	r3, [pc, #188]	; (7994 <nwkRouteDiscoveryReplyReceived+0xf8>)
    78d6:	4798      	blx	r3
    78d8:	0003      	movs	r3, r0
    78da:	613b      	str	r3, [r7, #16]
			command->multicast);

	linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality,
    78dc:	697b      	ldr	r3, [r7, #20]
    78de:	79da      	ldrb	r2, [r3, #7]
    78e0:	687b      	ldr	r3, [r7, #4]
    78e2:	7b5b      	ldrb	r3, [r3, #13]
    78e4:	210f      	movs	r1, #15
    78e6:	187c      	adds	r4, r7, r1
    78e8:	0019      	movs	r1, r3
    78ea:	0010      	movs	r0, r2
    78ec:	4b2a      	ldr	r3, [pc, #168]	; (7998 <nwkRouteDiscoveryReplyReceived+0xfc>)
    78ee:	4798      	blx	r3
    78f0:	0003      	movs	r3, r0
    78f2:	7023      	strb	r3, [r4, #0]
			ind->lqi);

	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
    78f4:	693b      	ldr	r3, [r7, #16]
    78f6:	2b00      	cmp	r3, #0
    78f8:	d047      	beq.n	798a <nwkRouteDiscoveryReplyReceived+0xee>
    78fa:	697b      	ldr	r3, [r7, #20]
    78fc:	799a      	ldrb	r2, [r3, #6]
    78fe:	693b      	ldr	r3, [r7, #16]
    7900:	7a5b      	ldrb	r3, [r3, #9]
    7902:	429a      	cmp	r2, r3
    7904:	d941      	bls.n	798a <nwkRouteDiscoveryReplyReceived+0xee>
		entry->reverseLinkQuality = command->forwardLinkQuality;
    7906:	697b      	ldr	r3, [r7, #20]
    7908:	799a      	ldrb	r2, [r3, #6]
    790a:	693b      	ldr	r3, [r7, #16]
    790c:	725a      	strb	r2, [r3, #9]

		if (command->srcAddr == nwkIb.addr) {
    790e:	697b      	ldr	r3, [r7, #20]
    7910:	785a      	ldrb	r2, [r3, #1]
    7912:	789b      	ldrb	r3, [r3, #2]
    7914:	021b      	lsls	r3, r3, #8
    7916:	4313      	orrs	r3, r2
    7918:	b29a      	uxth	r2, r3
    791a:	4b20      	ldr	r3, [pc, #128]	; (799c <nwkRouteDiscoveryReplyReceived+0x100>)
    791c:	881b      	ldrh	r3, [r3, #0]
    791e:	429a      	cmp	r2, r3
    7920:	d10e      	bne.n	7940 <nwkRouteDiscoveryReplyReceived+0xa4>
			nwkRouteUpdateEntry(command->dstAddr,
    7922:	697b      	ldr	r3, [r7, #20]
    7924:	78da      	ldrb	r2, [r3, #3]
    7926:	791b      	ldrb	r3, [r3, #4]
    7928:	021b      	lsls	r3, r3, #8
    792a:	4313      	orrs	r3, r2
    792c:	b298      	uxth	r0, r3
    792e:	697b      	ldr	r3, [r7, #20]
    7930:	7959      	ldrb	r1, [r3, #5]
    7932:	687b      	ldr	r3, [r7, #4]
    7934:	881a      	ldrh	r2, [r3, #0]
    7936:	697b      	ldr	r3, [r7, #20]
    7938:	799b      	ldrb	r3, [r3, #6]
    793a:	4c19      	ldr	r4, [pc, #100]	; (79a0 <nwkRouteDiscoveryReplyReceived+0x104>)
    793c:	47a0      	blx	r4
    793e:	e024      	b.n	798a <nwkRouteDiscoveryReplyReceived+0xee>
					command->multicast, ind->srcAddr,
					command->forwardLinkQuality);
			/* nwkRouteDiscoveryDone(entry, true); */
		} else {
			nwkRouteUpdateEntry(command->dstAddr,
    7940:	697b      	ldr	r3, [r7, #20]
    7942:	78da      	ldrb	r2, [r3, #3]
    7944:	791b      	ldrb	r3, [r3, #4]
    7946:	021b      	lsls	r3, r3, #8
    7948:	4313      	orrs	r3, r2
    794a:	b298      	uxth	r0, r3
    794c:	697b      	ldr	r3, [r7, #20]
    794e:	7959      	ldrb	r1, [r3, #5]
    7950:	687b      	ldr	r3, [r7, #4]
    7952:	881a      	ldrh	r2, [r3, #0]
    7954:	230f      	movs	r3, #15
    7956:	18fb      	adds	r3, r7, r3
    7958:	781b      	ldrb	r3, [r3, #0]
    795a:	4c11      	ldr	r4, [pc, #68]	; (79a0 <nwkRouteDiscoveryReplyReceived+0x104>)
    795c:	47a0      	blx	r4
					command->multicast, ind->srcAddr,
					linkQuality);
			nwkRouteUpdateEntry(command->srcAddr, 0,
    795e:	697b      	ldr	r3, [r7, #20]
    7960:	785a      	ldrb	r2, [r3, #1]
    7962:	789b      	ldrb	r3, [r3, #2]
    7964:	021b      	lsls	r3, r3, #8
    7966:	4313      	orrs	r3, r2
    7968:	b298      	uxth	r0, r3
    796a:	693b      	ldr	r3, [r7, #16]
    796c:	88da      	ldrh	r2, [r3, #6]
    796e:	693b      	ldr	r3, [r7, #16]
    7970:	7a1b      	ldrb	r3, [r3, #8]
    7972:	2100      	movs	r1, #0
    7974:	4c0a      	ldr	r4, [pc, #40]	; (79a0 <nwkRouteDiscoveryReplyReceived+0x104>)
    7976:	47a0      	blx	r4
					entry->senderAddr,
					entry->forwardLinkQuality);
			nwkRouteDiscoverySendReply(entry,
    7978:	697b      	ldr	r3, [r7, #20]
    797a:	7999      	ldrb	r1, [r3, #6]
    797c:	230f      	movs	r3, #15
    797e:	18fb      	adds	r3, r7, r3
    7980:	781a      	ldrb	r2, [r3, #0]
    7982:	693b      	ldr	r3, [r7, #16]
    7984:	0018      	movs	r0, r3
    7986:	4b07      	ldr	r3, [pc, #28]	; (79a4 <nwkRouteDiscoveryReplyReceived+0x108>)
    7988:	4798      	blx	r3
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    798a:	2301      	movs	r3, #1
}
    798c:	0018      	movs	r0, r3
    798e:	46bd      	mov	sp, r7
    7990:	b007      	add	sp, #28
    7992:	bd90      	pop	{r4, r7, pc}
    7994:	0000727d 	.word	0x0000727d
    7998:	00007a31 	.word	0x00007a31
    799c:	2000104c 	.word	0x2000104c
    79a0:	00006c15 	.word	0x00006c15
    79a4:	00007749 	.word	0x00007749

000079a8 <nwkRouteDiscoveryDone>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
    79a8:	b580      	push	{r7, lr}
    79aa:	b084      	sub	sp, #16
    79ac:	af00      	add	r7, sp, #0
    79ae:	6078      	str	r0, [r7, #4]
    79b0:	000a      	movs	r2, r1
    79b2:	1cfb      	adds	r3, r7, #3
    79b4:	701a      	strb	r2, [r3, #0]
	NwkFrame_t *frame = NULL;
    79b6:	2300      	movs	r3, #0
    79b8:	60fb      	str	r3, [r7, #12]

	while (NULL != (frame = nwkFrameNext(frame))) {
    79ba:	e026      	b.n	7a0a <nwkRouteDiscoveryDone+0x62>
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
    79bc:	68fb      	ldr	r3, [r7, #12]
    79be:	781b      	ldrb	r3, [r3, #0]
    79c0:	2b40      	cmp	r3, #64	; 0x40
    79c2:	d000      	beq.n	79c6 <nwkRouteDiscoveryDone+0x1e>
			continue;
    79c4:	e021      	b.n	7a0a <nwkRouteDiscoveryDone+0x62>
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    79c6:	687b      	ldr	r3, [r7, #4]
    79c8:	885a      	ldrh	r2, [r3, #2]
    79ca:	68fb      	ldr	r3, [r7, #12]
    79cc:	7bd9      	ldrb	r1, [r3, #15]
    79ce:	7c1b      	ldrb	r3, [r3, #16]
    79d0:	021b      	lsls	r3, r3, #8
    79d2:	430b      	orrs	r3, r1
    79d4:	b29b      	uxth	r3, r3
    79d6:	429a      	cmp	r2, r3
    79d8:	d117      	bne.n	7a0a <nwkRouteDiscoveryDone+0x62>
				entry->multicast !=
    79da:	687b      	ldr	r3, [r7, #4]
    79dc:	791b      	ldrb	r3, [r3, #4]
				frame->header.nwkFcf.multicast) {
    79de:	68fa      	ldr	r2, [r7, #12]
    79e0:	7ad2      	ldrb	r2, [r2, #11]
    79e2:	0712      	lsls	r2, r2, #28
    79e4:	0fd2      	lsrs	r2, r2, #31
    79e6:	b2d2      	uxtb	r2, r2
	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
			continue;
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    79e8:	4293      	cmp	r3, r2
    79ea:	d000      	beq.n	79ee <nwkRouteDiscoveryDone+0x46>
				entry->multicast !=
				frame->header.nwkFcf.multicast) {
			continue;
    79ec:	e00d      	b.n	7a0a <nwkRouteDiscoveryDone+0x62>
		}

		if (status) {
    79ee:	1cfb      	adds	r3, r7, #3
    79f0:	781b      	ldrb	r3, [r3, #0]
    79f2:	2b00      	cmp	r3, #0
    79f4:	d004      	beq.n	7a00 <nwkRouteDiscoveryDone+0x58>
			nwkTxFrame(frame);
    79f6:	68fb      	ldr	r3, [r7, #12]
    79f8:	0018      	movs	r0, r3
    79fa:	4b0a      	ldr	r3, [pc, #40]	; (7a24 <nwkRouteDiscoveryDone+0x7c>)
    79fc:	4798      	blx	r3
    79fe:	e004      	b.n	7a0a <nwkRouteDiscoveryDone+0x62>
		} else {
			nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    7a00:	68fb      	ldr	r3, [r7, #12]
    7a02:	2111      	movs	r1, #17
    7a04:	0018      	movs	r0, r3
    7a06:	4b08      	ldr	r3, [pc, #32]	; (7a28 <nwkRouteDiscoveryDone+0x80>)
    7a08:	4798      	blx	r3
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    7a0a:	68fb      	ldr	r3, [r7, #12]
    7a0c:	0018      	movs	r0, r3
    7a0e:	4b07      	ldr	r3, [pc, #28]	; (7a2c <nwkRouteDiscoveryDone+0x84>)
    7a10:	4798      	blx	r3
    7a12:	0003      	movs	r3, r0
    7a14:	60fb      	str	r3, [r7, #12]
    7a16:	68fb      	ldr	r3, [r7, #12]
    7a18:	2b00      	cmp	r3, #0
    7a1a:	d1cf      	bne.n	79bc <nwkRouteDiscoveryDone+0x14>
			nwkTxFrame(frame);
		} else {
			nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
		}
	}
}
    7a1c:	46c0      	nop			; (mov r8, r8)
    7a1e:	46bd      	mov	sp, r7
    7a20:	b004      	add	sp, #16
    7a22:	bd80      	pop	{r7, pc}
    7a24:	00008935 	.word	0x00008935
    7a28:	00008dd5 	.word	0x00008dd5
    7a2c:	00006981 	.word	0x00006981

00007a30 <nwkRouteDiscoveryUpdateLq>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
    7a30:	b580      	push	{r7, lr}
    7a32:	b082      	sub	sp, #8
    7a34:	af00      	add	r7, sp, #0
    7a36:	0002      	movs	r2, r0
    7a38:	1dfb      	adds	r3, r7, #7
    7a3a:	701a      	strb	r2, [r3, #0]
    7a3c:	1dbb      	adds	r3, r7, #6
    7a3e:	1c0a      	adds	r2, r1, #0
    7a40:	701a      	strb	r2, [r3, #0]
	return ((uint16_t)lqa * lqb) >> 8;
    7a42:	1dfb      	adds	r3, r7, #7
    7a44:	781b      	ldrb	r3, [r3, #0]
    7a46:	1dba      	adds	r2, r7, #6
    7a48:	7812      	ldrb	r2, [r2, #0]
    7a4a:	4353      	muls	r3, r2
    7a4c:	121b      	asrs	r3, r3, #8
    7a4e:	b2db      	uxtb	r3, r3
}
    7a50:	0018      	movs	r0, r3
    7a52:	46bd      	mov	sp, r7
    7a54:	b002      	add	sp, #8
    7a56:	bd80      	pop	{r7, pc}

00007a58 <nwkFramePayloadSize>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
    7a58:	b580      	push	{r7, lr}
    7a5a:	b082      	sub	sp, #8
    7a5c:	af00      	add	r7, sp, #0
    7a5e:	6078      	str	r0, [r7, #4]
	return frame->size - (frame->payload - frame->data);
    7a60:	687b      	ldr	r3, [r7, #4]
    7a62:	785a      	ldrb	r2, [r3, #1]
    7a64:	687b      	ldr	r3, [r7, #4]
    7a66:	2181      	movs	r1, #129	; 0x81
    7a68:	5c59      	ldrb	r1, [r3, r1]
    7a6a:	2082      	movs	r0, #130	; 0x82
    7a6c:	5c18      	ldrb	r0, [r3, r0]
    7a6e:	0200      	lsls	r0, r0, #8
    7a70:	4301      	orrs	r1, r0
    7a72:	2083      	movs	r0, #131	; 0x83
    7a74:	5c18      	ldrb	r0, [r3, r0]
    7a76:	0400      	lsls	r0, r0, #16
    7a78:	4301      	orrs	r1, r0
    7a7a:	2084      	movs	r0, #132	; 0x84
    7a7c:	5c1b      	ldrb	r3, [r3, r0]
    7a7e:	061b      	lsls	r3, r3, #24
    7a80:	430b      	orrs	r3, r1
    7a82:	0019      	movs	r1, r3
    7a84:	687b      	ldr	r3, [r7, #4]
    7a86:	3302      	adds	r3, #2
    7a88:	1acb      	subs	r3, r1, r3
    7a8a:	b2db      	uxtb	r3, r3
    7a8c:	1ad3      	subs	r3, r2, r3
    7a8e:	b2db      	uxtb	r3, r3
}
    7a90:	0018      	movs	r0, r3
    7a92:	46bd      	mov	sp, r7
    7a94:	b002      	add	sp, #8
    7a96:	bd80      	pop	{r7, pc}

00007a98 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    7a98:	b580      	push	{r7, lr}
    7a9a:	b082      	sub	sp, #8
    7a9c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    7a9e:	1dfb      	adds	r3, r7, #7
    7aa0:	2200      	movs	r2, #0
    7aa2:	701a      	strb	r2, [r3, #0]
    7aa4:	e00f      	b.n	7ac6 <nwkRxInit+0x2e>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    7aa6:	1dfb      	adds	r3, r7, #7
    7aa8:	781a      	ldrb	r2, [r3, #0]
    7aaa:	4912      	ldr	r1, [pc, #72]	; (7af4 <nwkRxInit+0x5c>)
    7aac:	0013      	movs	r3, r2
    7aae:	005b      	lsls	r3, r3, #1
    7ab0:	189b      	adds	r3, r3, r2
    7ab2:	005b      	lsls	r3, r3, #1
    7ab4:	18cb      	adds	r3, r1, r3
    7ab6:	3304      	adds	r3, #4
    7ab8:	2200      	movs	r2, #0
    7aba:	701a      	strb	r2, [r3, #0]
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    7abc:	1dfb      	adds	r3, r7, #7
    7abe:	781a      	ldrb	r2, [r3, #0]
    7ac0:	1dfb      	adds	r3, r7, #7
    7ac2:	3201      	adds	r2, #1
    7ac4:	701a      	strb	r2, [r3, #0]
    7ac6:	1dfb      	adds	r3, r7, #7
    7ac8:	781b      	ldrb	r3, [r3, #0]
    7aca:	2b31      	cmp	r3, #49	; 0x31
    7acc:	d9eb      	bls.n	7aa6 <nwkRxInit+0xe>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    7ace:	4b0a      	ldr	r3, [pc, #40]	; (7af8 <nwkRxInit+0x60>)
    7ad0:	2264      	movs	r2, #100	; 0x64
    7ad2:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    7ad4:	4b08      	ldr	r3, [pc, #32]	; (7af8 <nwkRxInit+0x60>)
    7ad6:	2200      	movs	r2, #0
    7ad8:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    7ada:	4b07      	ldr	r3, [pc, #28]	; (7af8 <nwkRxInit+0x60>)
    7adc:	4a07      	ldr	r2, [pc, #28]	; (7afc <nwkRxInit+0x64>)
    7ade:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    7ae0:	4b07      	ldr	r3, [pc, #28]	; (7b00 <nwkRxInit+0x68>)
    7ae2:	0019      	movs	r1, r3
    7ae4:	2000      	movs	r0, #0
    7ae6:	4b07      	ldr	r3, [pc, #28]	; (7b04 <nwkRxInit+0x6c>)
    7ae8:	4798      	blx	r3
}
    7aea:	46c0      	nop			; (mov r8, r8)
    7aec:	46bd      	mov	sp, r7
    7aee:	b002      	add	sp, #8
    7af0:	bd80      	pop	{r7, pc}
    7af2:	46c0      	nop			; (mov r8, r8)
    7af4:	20000c40 	.word	0x20000c40
    7af8:	20000d70 	.word	0x20000d70
    7afc:	00007ce5 	.word	0x00007ce5
    7b00:	00007f11 	.word	0x00007f11
    7b04:	000063cd 	.word	0x000063cd

00007b08 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    7b08:	b580      	push	{r7, lr}
    7b0a:	b084      	sub	sp, #16
    7b0c:	af00      	add	r7, sp, #0
    7b0e:	6078      	str	r0, [r7, #4]
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    7b10:	687b      	ldr	r3, [r7, #4]
    7b12:	681b      	ldr	r3, [r3, #0]
    7b14:	3301      	adds	r3, #1
    7b16:	781b      	ldrb	r3, [r3, #0]
    7b18:	2b88      	cmp	r3, #136	; 0x88
    7b1a:	d130      	bne.n	7b7e <PHY_DataInd+0x76>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    7b1c:	687b      	ldr	r3, [r7, #4]
    7b1e:	681b      	ldr	r3, [r3, #0]
    7b20:	781b      	ldrb	r3, [r3, #0]
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    7b22:	2b61      	cmp	r3, #97	; 0x61
    7b24:	d004      	beq.n	7b30 <PHY_DataInd+0x28>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    7b26:	687b      	ldr	r3, [r7, #4]
    7b28:	681b      	ldr	r3, [r3, #0]
    7b2a:	781b      	ldrb	r3, [r3, #0]
    7b2c:	2b41      	cmp	r3, #65	; 0x41
    7b2e:	d126      	bne.n	7b7e <PHY_DataInd+0x76>
			ind->size < sizeof(NwkFrameHeader_t)) {
    7b30:	687b      	ldr	r3, [r7, #4]
    7b32:	791b      	ldrb	r3, [r3, #4]
void PHY_DataInd(PHY_DataInd_t *ind)
{
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    7b34:	2b0f      	cmp	r3, #15
    7b36:	d922      	bls.n	7b7e <PHY_DataInd+0x76>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    7b38:	4b14      	ldr	r3, [pc, #80]	; (7b8c <PHY_DataInd+0x84>)
    7b3a:	4798      	blx	r3
    7b3c:	0003      	movs	r3, r0
    7b3e:	60fb      	str	r3, [r7, #12]
    7b40:	68fb      	ldr	r3, [r7, #12]
    7b42:	2b00      	cmp	r3, #0
    7b44:	d01d      	beq.n	7b82 <PHY_DataInd+0x7a>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    7b46:	68fb      	ldr	r3, [r7, #12]
    7b48:	2220      	movs	r2, #32
    7b4a:	701a      	strb	r2, [r3, #0]
	frame->size = ind->size;
    7b4c:	687b      	ldr	r3, [r7, #4]
    7b4e:	791a      	ldrb	r2, [r3, #4]
    7b50:	68fb      	ldr	r3, [r7, #12]
    7b52:	705a      	strb	r2, [r3, #1]
	frame->rx.lqi = ind->lqi;
    7b54:	687b      	ldr	r3, [r7, #4]
    7b56:	7959      	ldrb	r1, [r3, #5]
    7b58:	68fb      	ldr	r3, [r7, #12]
    7b5a:	2285      	movs	r2, #133	; 0x85
    7b5c:	5499      	strb	r1, [r3, r2]
	frame->rx.rssi = ind->rssi;
    7b5e:	687b      	ldr	r3, [r7, #4]
    7b60:	2106      	movs	r1, #6
    7b62:	5659      	ldrsb	r1, [r3, r1]
    7b64:	68fb      	ldr	r3, [r7, #12]
    7b66:	2286      	movs	r2, #134	; 0x86
    7b68:	5499      	strb	r1, [r3, r2]
	memcpy(frame->data, ind->data, ind->size);
    7b6a:	68fb      	ldr	r3, [r7, #12]
    7b6c:	1c98      	adds	r0, r3, #2
    7b6e:	687b      	ldr	r3, [r7, #4]
    7b70:	6819      	ldr	r1, [r3, #0]
    7b72:	687b      	ldr	r3, [r7, #4]
    7b74:	791b      	ldrb	r3, [r3, #4]
    7b76:	001a      	movs	r2, r3
    7b78:	4b05      	ldr	r3, [pc, #20]	; (7b90 <PHY_DataInd+0x88>)
    7b7a:	4798      	blx	r3
    7b7c:	e002      	b.n	7b84 <PHY_DataInd+0x7c>
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
    7b7e:	46c0      	nop			; (mov r8, r8)
    7b80:	e000      	b.n	7b84 <PHY_DataInd+0x7c>
	}

	if (NULL == (frame = nwkFrameAlloc())) {
		return;
    7b82:	46c0      	nop			; (mov r8, r8)
	frame->state = NWK_RX_STATE_RECEIVED;
	frame->size = ind->size;
	frame->rx.lqi = ind->lqi;
	frame->rx.rssi = ind->rssi;
	memcpy(frame->data, ind->data, ind->size);
}
    7b84:	46bd      	mov	sp, r7
    7b86:	b004      	add	sp, #16
    7b88:	bd80      	pop	{r7, pc}
    7b8a:	46c0      	nop			; (mov r8, r8)
    7b8c:	00006855 	.word	0x00006855
    7b90:	0000c209 	.word	0x0000c209

00007b94 <nwkRxSendAck>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxSendAck(NwkFrame_t *frame)
{
    7b94:	b590      	push	{r4, r7, lr}
    7b96:	b085      	sub	sp, #20
    7b98:	af00      	add	r7, sp, #0
    7b9a:	6078      	str	r0, [r7, #4]
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    7b9c:	4b3a      	ldr	r3, [pc, #232]	; (7c88 <nwkRxSendAck+0xf4>)
    7b9e:	4798      	blx	r3
    7ba0:	0003      	movs	r3, r0
    7ba2:	60fb      	str	r3, [r7, #12]
    7ba4:	68fb      	ldr	r3, [r7, #12]
    7ba6:	2b00      	cmp	r3, #0
    7ba8:	d069      	beq.n	7c7e <nwkRxSendAck+0xea>
		return;
	}

	nwkFrameCommandInit(ack);
    7baa:	68fb      	ldr	r3, [r7, #12]
    7bac:	0018      	movs	r0, r3
    7bae:	4b37      	ldr	r3, [pc, #220]	; (7c8c <nwkRxSendAck+0xf8>)
    7bb0:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    7bb2:	68fb      	ldr	r3, [r7, #12]
    7bb4:	785b      	ldrb	r3, [r3, #1]
    7bb6:	3303      	adds	r3, #3
    7bb8:	b2da      	uxtb	r2, r3
    7bba:	68fb      	ldr	r3, [r7, #12]
    7bbc:	705a      	strb	r2, [r3, #1]
	ack->tx.confirm = NULL;
    7bbe:	68fb      	ldr	r3, [r7, #12]
    7bc0:	2289      	movs	r2, #137	; 0x89
    7bc2:	5c99      	ldrb	r1, [r3, r2]
    7bc4:	2000      	movs	r0, #0
    7bc6:	4001      	ands	r1, r0
    7bc8:	5499      	strb	r1, [r3, r2]
    7bca:	1899      	adds	r1, r3, r2
    7bcc:	7848      	ldrb	r0, [r1, #1]
    7bce:	2400      	movs	r4, #0
    7bd0:	4020      	ands	r0, r4
    7bd2:	7048      	strb	r0, [r1, #1]
    7bd4:	1899      	adds	r1, r3, r2
    7bd6:	7888      	ldrb	r0, [r1, #2]
    7bd8:	2400      	movs	r4, #0
    7bda:	4020      	ands	r0, r4
    7bdc:	7088      	strb	r0, [r1, #2]
    7bde:	189b      	adds	r3, r3, r2
    7be0:	78da      	ldrb	r2, [r3, #3]
    7be2:	2100      	movs	r1, #0
    7be4:	400a      	ands	r2, r1
    7be6:	70da      	strb	r2, [r3, #3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    7be8:	687b      	ldr	r3, [r7, #4]
    7bea:	7adb      	ldrb	r3, [r3, #11]
    7bec:	079b      	lsls	r3, r3, #30
    7bee:	0fdb      	lsrs	r3, r3, #31
    7bf0:	b2da      	uxtb	r2, r3
    7bf2:	68fb      	ldr	r3, [r7, #12]
    7bf4:	2101      	movs	r1, #1
    7bf6:	400a      	ands	r2, r1
    7bf8:	1890      	adds	r0, r2, r2
    7bfa:	7ada      	ldrb	r2, [r3, #11]
    7bfc:	2102      	movs	r1, #2
    7bfe:	438a      	bics	r2, r1
    7c00:	1c11      	adds	r1, r2, #0
    7c02:	1c02      	adds	r2, r0, #0
    7c04:	430a      	orrs	r2, r1
    7c06:	72da      	strb	r2, [r3, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    7c08:	687b      	ldr	r3, [r7, #4]
    7c0a:	7b5a      	ldrb	r2, [r3, #13]
    7c0c:	7b9b      	ldrb	r3, [r3, #14]
    7c0e:	021b      	lsls	r3, r3, #8
    7c10:	4313      	orrs	r3, r2
    7c12:	b29a      	uxth	r2, r3
    7c14:	68fb      	ldr	r3, [r7, #12]
    7c16:	330f      	adds	r3, #15
    7c18:	21ff      	movs	r1, #255	; 0xff
    7c1a:	4011      	ands	r1, r2
    7c1c:	000c      	movs	r4, r1
    7c1e:	7819      	ldrb	r1, [r3, #0]
    7c20:	2000      	movs	r0, #0
    7c22:	4001      	ands	r1, r0
    7c24:	1c08      	adds	r0, r1, #0
    7c26:	1c21      	adds	r1, r4, #0
    7c28:	4301      	orrs	r1, r0
    7c2a:	7019      	strb	r1, [r3, #0]
    7c2c:	0a12      	lsrs	r2, r2, #8
    7c2e:	b290      	uxth	r0, r2
    7c30:	785a      	ldrb	r2, [r3, #1]
    7c32:	2100      	movs	r1, #0
    7c34:	400a      	ands	r2, r1
    7c36:	1c11      	adds	r1, r2, #0
    7c38:	1c02      	adds	r2, r0, #0
    7c3a:	430a      	orrs	r2, r1
    7c3c:	705a      	strb	r2, [r3, #1]

	command = (NwkCommandAck_t *)ack->payload;
    7c3e:	68fb      	ldr	r3, [r7, #12]
    7c40:	2281      	movs	r2, #129	; 0x81
    7c42:	5c9a      	ldrb	r2, [r3, r2]
    7c44:	2182      	movs	r1, #130	; 0x82
    7c46:	5c59      	ldrb	r1, [r3, r1]
    7c48:	0209      	lsls	r1, r1, #8
    7c4a:	430a      	orrs	r2, r1
    7c4c:	2183      	movs	r1, #131	; 0x83
    7c4e:	5c59      	ldrb	r1, [r3, r1]
    7c50:	0409      	lsls	r1, r1, #16
    7c52:	430a      	orrs	r2, r1
    7c54:	2184      	movs	r1, #132	; 0x84
    7c56:	5c5b      	ldrb	r3, [r3, r1]
    7c58:	061b      	lsls	r3, r3, #24
    7c5a:	4313      	orrs	r3, r2
    7c5c:	60bb      	str	r3, [r7, #8]
	command->id = NWK_COMMAND_ACK;
    7c5e:	68bb      	ldr	r3, [r7, #8]
    7c60:	2200      	movs	r2, #0
    7c62:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    7c64:	4b0a      	ldr	r3, [pc, #40]	; (7c90 <nwkRxSendAck+0xfc>)
    7c66:	781a      	ldrb	r2, [r3, #0]
    7c68:	68bb      	ldr	r3, [r7, #8]
    7c6a:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    7c6c:	687b      	ldr	r3, [r7, #4]
    7c6e:	7b1a      	ldrb	r2, [r3, #12]
    7c70:	68bb      	ldr	r3, [r7, #8]
    7c72:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    7c74:	68fb      	ldr	r3, [r7, #12]
    7c76:	0018      	movs	r0, r3
    7c78:	4b06      	ldr	r3, [pc, #24]	; (7c94 <nwkRxSendAck+0x100>)
    7c7a:	4798      	blx	r3
    7c7c:	e000      	b.n	7c80 <nwkRxSendAck+0xec>
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
		return;
    7c7e:	46c0      	nop			; (mov r8, r8)
	command->id = NWK_COMMAND_ACK;
	command->control = nwkRxAckControl;
	command->seq = frame->header.nwkSeq;

	nwkTxFrame(ack);
}
    7c80:	46bd      	mov	sp, r7
    7c82:	b005      	add	sp, #20
    7c84:	bd90      	pop	{r4, r7, pc}
    7c86:	46c0      	nop			; (mov r8, r8)
    7c88:	00006855 	.word	0x00006855
    7c8c:	000069c9 	.word	0x000069c9
    7c90:	20000d6c 	.word	0x20000d6c
    7c94:	00008935 	.word	0x00008935

00007c98 <NWK_SetAckControl>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
    7c98:	b580      	push	{r7, lr}
    7c9a:	b082      	sub	sp, #8
    7c9c:	af00      	add	r7, sp, #0
    7c9e:	0002      	movs	r2, r0
    7ca0:	1dfb      	adds	r3, r7, #7
    7ca2:	701a      	strb	r2, [r3, #0]
	nwkRxAckControl = control;
    7ca4:	4b03      	ldr	r3, [pc, #12]	; (7cb4 <NWK_SetAckControl+0x1c>)
    7ca6:	1dfa      	adds	r2, r7, #7
    7ca8:	7812      	ldrb	r2, [r2, #0]
    7caa:	701a      	strb	r2, [r3, #0]
}
    7cac:	46c0      	nop			; (mov r8, r8)
    7cae:	46bd      	mov	sp, r7
    7cb0:	b002      	add	sp, #8
    7cb2:	bd80      	pop	{r7, pc}
    7cb4:	20000d6c 	.word	0x20000d6c

00007cb8 <nwkRxDecryptConf>:
#ifdef NWK_ENABLE_SECURITY

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
    7cb8:	b580      	push	{r7, lr}
    7cba:	b082      	sub	sp, #8
    7cbc:	af00      	add	r7, sp, #0
    7cbe:	6078      	str	r0, [r7, #4]
    7cc0:	000a      	movs	r2, r1
    7cc2:	1cfb      	adds	r3, r7, #3
    7cc4:	701a      	strb	r2, [r3, #0]
	if (status) {
    7cc6:	1cfb      	adds	r3, r7, #3
    7cc8:	781b      	ldrb	r3, [r3, #0]
    7cca:	2b00      	cmp	r3, #0
    7ccc:	d003      	beq.n	7cd6 <nwkRxDecryptConf+0x1e>
		frame->state = NWK_RX_STATE_INDICATE;
    7cce:	687b      	ldr	r3, [r7, #4]
    7cd0:	2222      	movs	r2, #34	; 0x22
    7cd2:	701a      	strb	r2, [r3, #0]
	} else {
		frame->state = NWK_RX_STATE_FINISH;
	}
}
    7cd4:	e002      	b.n	7cdc <nwkRxDecryptConf+0x24>
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
		frame->state = NWK_RX_STATE_INDICATE;
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    7cd6:	687b      	ldr	r3, [r7, #4]
    7cd8:	2224      	movs	r2, #36	; 0x24
    7cda:	701a      	strb	r2, [r3, #0]
	}
}
    7cdc:	46c0      	nop			; (mov r8, r8)
    7cde:	46bd      	mov	sp, r7
    7ce0:	b002      	add	sp, #8
    7ce2:	bd80      	pop	{r7, pc}

00007ce4 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    7ce4:	b580      	push	{r7, lr}
    7ce6:	b084      	sub	sp, #16
    7ce8:	af00      	add	r7, sp, #0
    7cea:	6078      	str	r0, [r7, #4]
	bool restart = false;
    7cec:	230f      	movs	r3, #15
    7cee:	18fb      	adds	r3, r7, r3
    7cf0:	2200      	movs	r2, #0
    7cf2:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    7cf4:	230e      	movs	r3, #14
    7cf6:	18fb      	adds	r3, r7, r3
    7cf8:	2200      	movs	r2, #0
    7cfa:	701a      	strb	r2, [r3, #0]
    7cfc:	e02d      	b.n	7d5a <nwkRxDuplicateRejectionTimerHandler+0x76>
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    7cfe:	230e      	movs	r3, #14
    7d00:	18fb      	adds	r3, r7, r3
    7d02:	781a      	ldrb	r2, [r3, #0]
    7d04:	491e      	ldr	r1, [pc, #120]	; (7d80 <nwkRxDuplicateRejectionTimerHandler+0x9c>)
    7d06:	0013      	movs	r3, r2
    7d08:	005b      	lsls	r3, r3, #1
    7d0a:	189b      	adds	r3, r3, r2
    7d0c:	005b      	lsls	r3, r3, #1
    7d0e:	18cb      	adds	r3, r1, r3
    7d10:	3304      	adds	r3, #4
    7d12:	781b      	ldrb	r3, [r3, #0]
    7d14:	2b00      	cmp	r3, #0
    7d16:	d019      	beq.n	7d4c <nwkRxDuplicateRejectionTimerHandler+0x68>
			nwkRxDuplicateRejectionTable[i].ttl--;
    7d18:	230e      	movs	r3, #14
    7d1a:	18fb      	adds	r3, r7, r3
    7d1c:	781a      	ldrb	r2, [r3, #0]
    7d1e:	4918      	ldr	r1, [pc, #96]	; (7d80 <nwkRxDuplicateRejectionTimerHandler+0x9c>)
    7d20:	0013      	movs	r3, r2
    7d22:	005b      	lsls	r3, r3, #1
    7d24:	189b      	adds	r3, r3, r2
    7d26:	005b      	lsls	r3, r3, #1
    7d28:	18cb      	adds	r3, r1, r3
    7d2a:	3304      	adds	r3, #4
    7d2c:	781b      	ldrb	r3, [r3, #0]
    7d2e:	3b01      	subs	r3, #1
    7d30:	b2d8      	uxtb	r0, r3
    7d32:	4913      	ldr	r1, [pc, #76]	; (7d80 <nwkRxDuplicateRejectionTimerHandler+0x9c>)
    7d34:	0013      	movs	r3, r2
    7d36:	005b      	lsls	r3, r3, #1
    7d38:	189b      	adds	r3, r3, r2
    7d3a:	005b      	lsls	r3, r3, #1
    7d3c:	18cb      	adds	r3, r1, r3
    7d3e:	3304      	adds	r3, #4
    7d40:	1c02      	adds	r2, r0, #0
    7d42:	701a      	strb	r2, [r3, #0]
			restart = true;
    7d44:	230f      	movs	r3, #15
    7d46:	18fb      	adds	r3, r7, r3
    7d48:	2201      	movs	r2, #1
    7d4a:	701a      	strb	r2, [r3, #0]
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    7d4c:	230e      	movs	r3, #14
    7d4e:	18fb      	adds	r3, r7, r3
    7d50:	781a      	ldrb	r2, [r3, #0]
    7d52:	230e      	movs	r3, #14
    7d54:	18fb      	adds	r3, r7, r3
    7d56:	3201      	adds	r2, #1
    7d58:	701a      	strb	r2, [r3, #0]
    7d5a:	230e      	movs	r3, #14
    7d5c:	18fb      	adds	r3, r7, r3
    7d5e:	781b      	ldrb	r3, [r3, #0]
    7d60:	2b31      	cmp	r3, #49	; 0x31
    7d62:	d9cc      	bls.n	7cfe <nwkRxDuplicateRejectionTimerHandler+0x1a>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    7d64:	230f      	movs	r3, #15
    7d66:	18fb      	adds	r3, r7, r3
    7d68:	781b      	ldrb	r3, [r3, #0]
    7d6a:	2b00      	cmp	r3, #0
    7d6c:	d003      	beq.n	7d76 <nwkRxDuplicateRejectionTimerHandler+0x92>
		SYS_TimerStart(timer);
    7d6e:	687b      	ldr	r3, [r7, #4]
    7d70:	0018      	movs	r0, r3
    7d72:	4b04      	ldr	r3, [pc, #16]	; (7d84 <nwkRxDuplicateRejectionTimerHandler+0xa0>)
    7d74:	4798      	blx	r3
	}
}
    7d76:	46c0      	nop			; (mov r8, r8)
    7d78:	46bd      	mov	sp, r7
    7d7a:	b004      	add	sp, #16
    7d7c:	bd80      	pop	{r7, pc}
    7d7e:	46c0      	nop			; (mov r8, r8)
    7d80:	20000c40 	.word	0x20000c40
    7d84:	00005aa5 	.word	0x00005aa5

00007d88 <nwkRxRejectDuplicate>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
    7d88:	b580      	push	{r7, lr}
    7d8a:	b086      	sub	sp, #24
    7d8c:	af00      	add	r7, sp, #0
    7d8e:	6078      	str	r0, [r7, #4]
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    7d90:	2300      	movs	r3, #0
    7d92:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    7d94:	2313      	movs	r3, #19
    7d96:	18fb      	adds	r3, r7, r3
    7d98:	2200      	movs	r2, #0
    7d9a:	701a      	strb	r2, [r3, #0]
    7d9c:	e087      	b.n	7eae <nwkRxRejectDuplicate+0x126>
		entry = &nwkRxDuplicateRejectionTable[i];
    7d9e:	2313      	movs	r3, #19
    7da0:	18fb      	adds	r3, r7, r3
    7da2:	781a      	ldrb	r2, [r3, #0]
    7da4:	0013      	movs	r3, r2
    7da6:	005b      	lsls	r3, r3, #1
    7da8:	189b      	adds	r3, r3, r2
    7daa:	005b      	lsls	r3, r3, #1
    7dac:	4a53      	ldr	r2, [pc, #332]	; (7efc <nwkRxRejectDuplicate+0x174>)
    7dae:	189b      	adds	r3, r3, r2
    7db0:	60fb      	str	r3, [r7, #12]

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    7db2:	68fb      	ldr	r3, [r7, #12]
    7db4:	791b      	ldrb	r3, [r3, #4]
    7db6:	2b00      	cmp	r3, #0
    7db8:	d06c      	beq.n	7e94 <nwkRxRejectDuplicate+0x10c>
    7dba:	687b      	ldr	r3, [r7, #4]
    7dbc:	7ada      	ldrb	r2, [r3, #11]
    7dbe:	7b1b      	ldrb	r3, [r3, #12]
    7dc0:	021b      	lsls	r3, r3, #8
    7dc2:	4313      	orrs	r3, r2
    7dc4:	b29a      	uxth	r2, r3
    7dc6:	68fb      	ldr	r3, [r7, #12]
    7dc8:	881b      	ldrh	r3, [r3, #0]
    7dca:	429a      	cmp	r2, r3
    7dcc:	d162      	bne.n	7e94 <nwkRxRejectDuplicate+0x10c>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    7dce:	68fb      	ldr	r3, [r7, #12]
    7dd0:	7899      	ldrb	r1, [r3, #2]
    7dd2:	687b      	ldr	r3, [r7, #4]
    7dd4:	7a9a      	ldrb	r2, [r3, #10]
    7dd6:	230b      	movs	r3, #11
    7dd8:	18fb      	adds	r3, r7, r3
    7dda:	1a8a      	subs	r2, r1, r2
    7ddc:	701a      	strb	r2, [r3, #0]

			if (diff < 8) {
    7dde:	230b      	movs	r3, #11
    7de0:	18fb      	adds	r3, r7, r3
    7de2:	781b      	ldrb	r3, [r3, #0]
    7de4:	2b07      	cmp	r3, #7
    7de6:	d836      	bhi.n	7e56 <nwkRxRejectDuplicate+0xce>
				if (entry->mask & (1 << diff)) {
    7de8:	68fb      	ldr	r3, [r7, #12]
    7dea:	78db      	ldrb	r3, [r3, #3]
    7dec:	001a      	movs	r2, r3
    7dee:	230b      	movs	r3, #11
    7df0:	18fb      	adds	r3, r7, r3
    7df2:	781b      	ldrb	r3, [r3, #0]
    7df4:	411a      	asrs	r2, r3
    7df6:	0013      	movs	r3, r2
    7df8:	2201      	movs	r2, #1
    7dfa:	4013      	ands	r3, r2
    7dfc:	d01a      	beq.n	7e34 <nwkRxRejectDuplicate+0xac>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    7dfe:	4b40      	ldr	r3, [pc, #256]	; (7f00 <nwkRxRejectDuplicate+0x178>)
    7e00:	881a      	ldrh	r2, [r3, #0]
    7e02:	687b      	ldr	r3, [r7, #4]
    7e04:	7959      	ldrb	r1, [r3, #5]
    7e06:	799b      	ldrb	r3, [r3, #6]
    7e08:	021b      	lsls	r3, r3, #8
    7e0a:	430b      	orrs	r3, r1
    7e0c:	b29b      	uxth	r3, r3
    7e0e:	429a      	cmp	r2, r3
    7e10:	d10e      	bne.n	7e30 <nwkRxRejectDuplicate+0xa8>
						nwkRouteRemove(
    7e12:	687b      	ldr	r3, [r7, #4]
    7e14:	7b5a      	ldrb	r2, [r3, #13]
    7e16:	7b9b      	ldrb	r3, [r3, #14]
    7e18:	021b      	lsls	r3, r3, #8
    7e1a:	4313      	orrs	r3, r2
    7e1c:	b29a      	uxth	r2, r3
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    7e1e:	687b      	ldr	r3, [r7, #4]
    7e20:	7a5b      	ldrb	r3, [r3, #9]
    7e22:	071b      	lsls	r3, r3, #28
    7e24:	0fdb      	lsrs	r3, r3, #31
    7e26:	b2db      	uxtb	r3, r3

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    7e28:	0019      	movs	r1, r3
    7e2a:	0010      	movs	r0, r2
    7e2c:	4b35      	ldr	r3, [pc, #212]	; (7f04 <nwkRxRejectDuplicate+0x17c>)
    7e2e:	4798      	blx	r3
								header->nwkDstAddr,
								header->nwkFcf.multicast);
					}
	#endif
					return true;
    7e30:	2301      	movs	r3, #1
    7e32:	e05e      	b.n	7ef2 <nwkRxRejectDuplicate+0x16a>
				}

				entry->mask |= (1 << diff);
    7e34:	68fb      	ldr	r3, [r7, #12]
    7e36:	78db      	ldrb	r3, [r3, #3]
    7e38:	b25a      	sxtb	r2, r3
    7e3a:	230b      	movs	r3, #11
    7e3c:	18fb      	adds	r3, r7, r3
    7e3e:	781b      	ldrb	r3, [r3, #0]
    7e40:	2101      	movs	r1, #1
    7e42:	4099      	lsls	r1, r3
    7e44:	000b      	movs	r3, r1
    7e46:	b25b      	sxtb	r3, r3
    7e48:	4313      	orrs	r3, r2
    7e4a:	b25b      	sxtb	r3, r3
    7e4c:	b2da      	uxtb	r2, r3
    7e4e:	68fb      	ldr	r3, [r7, #12]
    7e50:	70da      	strb	r2, [r3, #3]
				return false;
    7e52:	2300      	movs	r3, #0
    7e54:	e04d      	b.n	7ef2 <nwkRxRejectDuplicate+0x16a>
			} else {
				uint8_t shift = -(int8_t)diff;
    7e56:	230a      	movs	r3, #10
    7e58:	18fb      	adds	r3, r7, r3
    7e5a:	220b      	movs	r2, #11
    7e5c:	18ba      	adds	r2, r7, r2
    7e5e:	7812      	ldrb	r2, [r2, #0]
    7e60:	4252      	negs	r2, r2
    7e62:	701a      	strb	r2, [r3, #0]

				entry->seq = header->nwkSeq;
    7e64:	687b      	ldr	r3, [r7, #4]
    7e66:	7a9a      	ldrb	r2, [r3, #10]
    7e68:	68fb      	ldr	r3, [r7, #12]
    7e6a:	709a      	strb	r2, [r3, #2]
				entry->mask = (entry->mask << shift) | 1;
    7e6c:	68fb      	ldr	r3, [r7, #12]
    7e6e:	78db      	ldrb	r3, [r3, #3]
    7e70:	001a      	movs	r2, r3
    7e72:	230a      	movs	r3, #10
    7e74:	18fb      	adds	r3, r7, r3
    7e76:	781b      	ldrb	r3, [r3, #0]
    7e78:	409a      	lsls	r2, r3
    7e7a:	0013      	movs	r3, r2
    7e7c:	b25b      	sxtb	r3, r3
    7e7e:	2201      	movs	r2, #1
    7e80:	4313      	orrs	r3, r2
    7e82:	b25b      	sxtb	r3, r3
    7e84:	b2da      	uxtb	r2, r3
    7e86:	68fb      	ldr	r3, [r7, #12]
    7e88:	70da      	strb	r2, [r3, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    7e8a:	68fb      	ldr	r3, [r7, #12]
    7e8c:	2215      	movs	r2, #21
    7e8e:	711a      	strb	r2, [r3, #4]
				return false;
    7e90:	2300      	movs	r3, #0
    7e92:	e02e      	b.n	7ef2 <nwkRxRejectDuplicate+0x16a>
			}
		}

		if (0 == entry->ttl) {
    7e94:	68fb      	ldr	r3, [r7, #12]
    7e96:	791b      	ldrb	r3, [r3, #4]
    7e98:	2b00      	cmp	r3, #0
    7e9a:	d101      	bne.n	7ea0 <nwkRxRejectDuplicate+0x118>
			freeEntry = entry;
    7e9c:	68fb      	ldr	r3, [r7, #12]
    7e9e:	617b      	str	r3, [r7, #20]
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    7ea0:	2313      	movs	r3, #19
    7ea2:	18fb      	adds	r3, r7, r3
    7ea4:	781a      	ldrb	r2, [r3, #0]
    7ea6:	2313      	movs	r3, #19
    7ea8:	18fb      	adds	r3, r7, r3
    7eaa:	3201      	adds	r2, #1
    7eac:	701a      	strb	r2, [r3, #0]
    7eae:	2313      	movs	r3, #19
    7eb0:	18fb      	adds	r3, r7, r3
    7eb2:	781b      	ldrb	r3, [r3, #0]
    7eb4:	2b31      	cmp	r3, #49	; 0x31
    7eb6:	d800      	bhi.n	7eba <nwkRxRejectDuplicate+0x132>
    7eb8:	e771      	b.n	7d9e <nwkRxRejectDuplicate+0x16>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    7eba:	697b      	ldr	r3, [r7, #20]
    7ebc:	2b00      	cmp	r3, #0
    7ebe:	d101      	bne.n	7ec4 <nwkRxRejectDuplicate+0x13c>
		return true;
    7ec0:	2301      	movs	r3, #1
    7ec2:	e016      	b.n	7ef2 <nwkRxRejectDuplicate+0x16a>
	}

	freeEntry->src = header->nwkSrcAddr;
    7ec4:	687b      	ldr	r3, [r7, #4]
    7ec6:	7ada      	ldrb	r2, [r3, #11]
    7ec8:	7b1b      	ldrb	r3, [r3, #12]
    7eca:	021b      	lsls	r3, r3, #8
    7ecc:	4313      	orrs	r3, r2
    7ece:	b29a      	uxth	r2, r3
    7ed0:	697b      	ldr	r3, [r7, #20]
    7ed2:	801a      	strh	r2, [r3, #0]
	freeEntry->seq = header->nwkSeq;
    7ed4:	687b      	ldr	r3, [r7, #4]
    7ed6:	7a9a      	ldrb	r2, [r3, #10]
    7ed8:	697b      	ldr	r3, [r7, #20]
    7eda:	709a      	strb	r2, [r3, #2]
	freeEntry->mask = 1;
    7edc:	697b      	ldr	r3, [r7, #20]
    7ede:	2201      	movs	r2, #1
    7ee0:	70da      	strb	r2, [r3, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    7ee2:	697b      	ldr	r3, [r7, #20]
    7ee4:	2215      	movs	r2, #21
    7ee6:	711a      	strb	r2, [r3, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    7ee8:	4b07      	ldr	r3, [pc, #28]	; (7f08 <nwkRxRejectDuplicate+0x180>)
    7eea:	0018      	movs	r0, r3
    7eec:	4b07      	ldr	r3, [pc, #28]	; (7f0c <nwkRxRejectDuplicate+0x184>)
    7eee:	4798      	blx	r3

	return false;
    7ef0:	2300      	movs	r3, #0
}
    7ef2:	0018      	movs	r0, r3
    7ef4:	46bd      	mov	sp, r7
    7ef6:	b006      	add	sp, #24
    7ef8:	bd80      	pop	{r7, pc}
    7efa:	46c0      	nop			; (mov r8, r8)
    7efc:	20000c40 	.word	0x20000c40
    7f00:	2000104c 	.word	0x2000104c
    7f04:	00006cbd 	.word	0x00006cbd
    7f08:	20000d70 	.word	0x20000d70
    7f0c:	00005aa5 	.word	0x00005aa5

00007f10 <nwkRxSeriveDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    7f10:	b580      	push	{r7, lr}
    7f12:	b082      	sub	sp, #8
    7f14:	af00      	add	r7, sp, #0
    7f16:	6078      	str	r0, [r7, #4]
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    7f18:	687b      	ldr	r3, [r7, #4]
    7f1a:	7b1b      	ldrb	r3, [r3, #12]
    7f1c:	2b00      	cmp	r3, #0
    7f1e:	d101      	bne.n	7f24 <nwkRxSeriveDataInd+0x14>
		return false;
    7f20:	2300      	movs	r3, #0
    7f22:	e026      	b.n	7f72 <nwkRxSeriveDataInd+0x62>
	}

	switch (ind->data[0]) {
    7f24:	687b      	ldr	r3, [r7, #4]
    7f26:	689b      	ldr	r3, [r3, #8]
    7f28:	781b      	ldrb	r3, [r3, #0]
    7f2a:	2b01      	cmp	r3, #1
    7f2c:	d00e      	beq.n	7f4c <nwkRxSeriveDataInd+0x3c>
    7f2e:	dc02      	bgt.n	7f36 <nwkRxSeriveDataInd+0x26>
    7f30:	2b00      	cmp	r3, #0
    7f32:	d005      	beq.n	7f40 <nwkRxSeriveDataInd+0x30>
    7f34:	e01c      	b.n	7f70 <nwkRxSeriveDataInd+0x60>
    7f36:	2b02      	cmp	r3, #2
    7f38:	d00e      	beq.n	7f58 <nwkRxSeriveDataInd+0x48>
    7f3a:	2b03      	cmp	r3, #3
    7f3c:	d012      	beq.n	7f64 <nwkRxSeriveDataInd+0x54>
    7f3e:	e017      	b.n	7f70 <nwkRxSeriveDataInd+0x60>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    7f40:	687b      	ldr	r3, [r7, #4]
    7f42:	0018      	movs	r0, r3
    7f44:	4b0d      	ldr	r3, [pc, #52]	; (7f7c <nwkRxSeriveDataInd+0x6c>)
    7f46:	4798      	blx	r3
    7f48:	0003      	movs	r3, r0
    7f4a:	e012      	b.n	7f72 <nwkRxSeriveDataInd+0x62>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    7f4c:	687b      	ldr	r3, [r7, #4]
    7f4e:	0018      	movs	r0, r3
    7f50:	4b0b      	ldr	r3, [pc, #44]	; (7f80 <nwkRxSeriveDataInd+0x70>)
    7f52:	4798      	blx	r3
    7f54:	0003      	movs	r3, r0
    7f56:	e00c      	b.n	7f72 <nwkRxSeriveDataInd+0x62>
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	case NWK_COMMAND_ROUTE_REQUEST:
		return nwkRouteDiscoveryRequestReceived(ind);
    7f58:	687b      	ldr	r3, [r7, #4]
    7f5a:	0018      	movs	r0, r3
    7f5c:	4b09      	ldr	r3, [pc, #36]	; (7f84 <nwkRxSeriveDataInd+0x74>)
    7f5e:	4798      	blx	r3
    7f60:	0003      	movs	r3, r0
    7f62:	e006      	b.n	7f72 <nwkRxSeriveDataInd+0x62>

	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
    7f64:	687b      	ldr	r3, [r7, #4]
    7f66:	0018      	movs	r0, r3
    7f68:	4b07      	ldr	r3, [pc, #28]	; (7f88 <nwkRxSeriveDataInd+0x78>)
    7f6a:	4798      	blx	r3
    7f6c:	0003      	movs	r3, r0
    7f6e:	e000      	b.n	7f72 <nwkRxSeriveDataInd+0x62>
#endif

	default:
		return false;
    7f70:	2300      	movs	r3, #0
	}
}
    7f72:	0018      	movs	r0, r3
    7f74:	46bd      	mov	sp, r7
    7f76:	b002      	add	sp, #8
    7f78:	bd80      	pop	{r7, pc}
    7f7a:	46c0      	nop			; (mov r8, r8)
    7f7c:	00008ca5 	.word	0x00008ca5
    7f80:	000070d5 	.word	0x000070d5
    7f84:	000075bd 	.word	0x000075bd
    7f88:	0000789d 	.word	0x0000789d

00007f8c <nwkRxHandleReceivedFrame>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
    7f8c:	b580      	push	{r7, lr}
    7f8e:	b084      	sub	sp, #16
    7f90:	af00      	add	r7, sp, #0
    7f92:	6078      	str	r0, [r7, #4]
	NwkFrameHeader_t *header = &frame->header;
    7f94:	687b      	ldr	r3, [r7, #4]
    7f96:	3302      	adds	r3, #2
    7f98:	60fb      	str	r3, [r7, #12]

	frame->state = NWK_RX_STATE_FINISH;
    7f9a:	687b      	ldr	r3, [r7, #4]
    7f9c:	2224      	movs	r2, #36	; 0x24
    7f9e:	701a      	strb	r2, [r3, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    7fa0:	68fb      	ldr	r3, [r7, #12]
    7fa2:	7a5b      	ldrb	r3, [r3, #9]
    7fa4:	2208      	movs	r2, #8
    7fa6:	4013      	ands	r3, r2
    7fa8:	b2db      	uxtb	r3, r3
    7faa:	2b00      	cmp	r3, #0
    7fac:	d000      	beq.n	7fb0 <nwkRxHandleReceivedFrame+0x24>
    7fae:	e09e      	b.n	80ee <nwkRxHandleReceivedFrame+0x162>
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    7fb0:	68fb      	ldr	r3, [r7, #12]
    7fb2:	78da      	ldrb	r2, [r3, #3]
    7fb4:	791b      	ldrb	r3, [r3, #4]
    7fb6:	021b      	lsls	r3, r3, #8
    7fb8:	4313      	orrs	r3, r2
    7fba:	b29b      	uxth	r3, r3
    7fbc:	4a52      	ldr	r2, [pc, #328]	; (8108 <nwkRxHandleReceivedFrame+0x17c>)
    7fbe:	4293      	cmp	r3, r2
    7fc0:	d122      	bne.n	8008 <nwkRxHandleReceivedFrame+0x7c>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    7fc2:	4b52      	ldr	r3, [pc, #328]	; (810c <nwkRxHandleReceivedFrame+0x180>)
    7fc4:	881a      	ldrh	r2, [r3, #0]
    7fc6:	68fb      	ldr	r3, [r7, #12]
    7fc8:	7b59      	ldrb	r1, [r3, #13]
    7fca:	7b9b      	ldrb	r3, [r3, #14]
    7fcc:	021b      	lsls	r3, r3, #8
    7fce:	430b      	orrs	r3, r1
    7fd0:	b29b      	uxth	r3, r3
    7fd2:	429a      	cmp	r2, r3
    7fd4:	d009      	beq.n	7fea <nwkRxHandleReceivedFrame+0x5e>
				header->nwkDstAddr) {
    7fd6:	68fb      	ldr	r3, [r7, #12]
    7fd8:	7b5a      	ldrb	r2, [r3, #13]
    7fda:	7b9b      	ldrb	r3, [r3, #14]
    7fdc:	021b      	lsls	r3, r3, #8
    7fde:	4313      	orrs	r3, r2
    7fe0:	b29b      	uxth	r3, r3
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    7fe2:	4a49      	ldr	r2, [pc, #292]	; (8108 <nwkRxHandleReceivedFrame+0x17c>)
    7fe4:	4293      	cmp	r3, r2
    7fe6:	d000      	beq.n	7fea <nwkRxHandleReceivedFrame+0x5e>
    7fe8:	e083      	b.n	80f2 <nwkRxHandleReceivedFrame+0x166>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    7fea:	68fb      	ldr	r3, [r7, #12]
    7fec:	7a5b      	ldrb	r3, [r3, #9]
    7fee:	2202      	movs	r2, #2
    7ff0:	4013      	ands	r3, r2
    7ff2:	b2db      	uxtb	r3, r3
    7ff4:	2b00      	cmp	r3, #0
    7ff6:	d003      	beq.n	8000 <nwkRxHandleReceivedFrame+0x74>
				frame->state = NWK_RX_STATE_DECRYPT;
    7ff8:	687b      	ldr	r3, [r7, #4]
    7ffa:	2221      	movs	r2, #33	; 0x21
    7ffc:	701a      	strb	r2, [r3, #0]
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
		}

		return;
    7ffe:	e078      	b.n	80f2 <nwkRxHandleReceivedFrame+0x166>
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
				frame->state = NWK_RX_STATE_DECRYPT;
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    8000:	687b      	ldr	r3, [r7, #4]
    8002:	2222      	movs	r2, #34	; 0x22
    8004:	701a      	strb	r2, [r3, #0]
		}

		return;
    8006:	e074      	b.n	80f2 <nwkRxHandleReceivedFrame+0x166>
	if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi)) {
		return;
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    8008:	68fb      	ldr	r3, [r7, #12]
    800a:	7b5a      	ldrb	r2, [r3, #13]
    800c:	7b9b      	ldrb	r3, [r3, #14]
    800e:	021b      	lsls	r3, r3, #8
    8010:	4313      	orrs	r3, r2
    8012:	b29b      	uxth	r3, r3
    8014:	4a3c      	ldr	r2, [pc, #240]	; (8108 <nwkRxHandleReceivedFrame+0x17c>)
    8016:	4293      	cmp	r3, r2
    8018:	d107      	bne.n	802a <nwkRxHandleReceivedFrame+0x9e>
    801a:	68fb      	ldr	r3, [r7, #12]
    801c:	7a5b      	ldrb	r3, [r3, #9]
    801e:	2201      	movs	r2, #1
    8020:	4013      	ands	r3, r2
    8022:	b2db      	uxtb	r3, r3
    8024:	2b00      	cmp	r3, #0
    8026:	d000      	beq.n	802a <nwkRxHandleReceivedFrame+0x9e>
    8028:	e065      	b.n	80f6 <nwkRxHandleReceivedFrame+0x16a>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    802a:	4b38      	ldr	r3, [pc, #224]	; (810c <nwkRxHandleReceivedFrame+0x180>)
    802c:	881a      	ldrh	r2, [r3, #0]
    802e:	68fb      	ldr	r3, [r7, #12]
    8030:	7ad9      	ldrb	r1, [r3, #11]
    8032:	7b1b      	ldrb	r3, [r3, #12]
    8034:	021b      	lsls	r3, r3, #8
    8036:	430b      	orrs	r3, r1
    8038:	b29b      	uxth	r3, r3
    803a:	429a      	cmp	r2, r3
    803c:	d05d      	beq.n	80fa <nwkRxHandleReceivedFrame+0x16e>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    803e:	687b      	ldr	r3, [r7, #4]
    8040:	0018      	movs	r0, r3
    8042:	4b33      	ldr	r3, [pc, #204]	; (8110 <nwkRxHandleReceivedFrame+0x184>)
    8044:	4798      	blx	r3
#endif

	if (nwkRxRejectDuplicate(header)) {
    8046:	68fb      	ldr	r3, [r7, #12]
    8048:	0018      	movs	r0, r3
    804a:	4b32      	ldr	r3, [pc, #200]	; (8114 <nwkRxHandleReceivedFrame+0x188>)
    804c:	4798      	blx	r3
    804e:	1e03      	subs	r3, r0, #0
    8050:	d155      	bne.n	80fe <nwkRxHandleReceivedFrame+0x172>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    8052:	68fb      	ldr	r3, [r7, #12]
    8054:	795a      	ldrb	r2, [r3, #5]
    8056:	799b      	ldrb	r3, [r3, #6]
    8058:	021b      	lsls	r3, r3, #8
    805a:	4313      	orrs	r3, r2
    805c:	b29b      	uxth	r3, r3
    805e:	4a2a      	ldr	r2, [pc, #168]	; (8108 <nwkRxHandleReceivedFrame+0x17c>)
    8060:	4293      	cmp	r3, r2
    8062:	d114      	bne.n	808e <nwkRxHandleReceivedFrame+0x102>
    8064:	4b29      	ldr	r3, [pc, #164]	; (810c <nwkRxHandleReceivedFrame+0x180>)
    8066:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    8068:	68fb      	ldr	r3, [r7, #12]
    806a:	7b59      	ldrb	r1, [r3, #13]
    806c:	7b9b      	ldrb	r3, [r3, #14]
    806e:	021b      	lsls	r3, r3, #8
    8070:	430b      	orrs	r3, r1
    8072:	b29b      	uxth	r3, r3
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    8074:	429a      	cmp	r2, r3
    8076:	d00a      	beq.n	808e <nwkRxHandleReceivedFrame+0x102>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    8078:	68fb      	ldr	r3, [r7, #12]
    807a:	7a5b      	ldrb	r3, [r3, #9]
    807c:	2204      	movs	r2, #4
    807e:	4013      	ands	r3, r2
    8080:	b2db      	uxtb	r3, r3
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    8082:	2b00      	cmp	r3, #0
    8084:	d103      	bne.n	808e <nwkRxHandleReceivedFrame+0x102>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    8086:	687b      	ldr	r3, [r7, #4]
    8088:	0018      	movs	r0, r3
    808a:	4b23      	ldr	r3, [pc, #140]	; (8118 <nwkRxHandleReceivedFrame+0x18c>)
    808c:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    808e:	4b1f      	ldr	r3, [pc, #124]	; (810c <nwkRxHandleReceivedFrame+0x180>)
    8090:	881a      	ldrh	r2, [r3, #0]
    8092:	68fb      	ldr	r3, [r7, #12]
    8094:	7b59      	ldrb	r1, [r3, #13]
    8096:	7b9b      	ldrb	r3, [r3, #14]
    8098:	021b      	lsls	r3, r3, #8
    809a:	430b      	orrs	r3, r1
    809c:	b29b      	uxth	r3, r3
    809e:	429a      	cmp	r2, r3
    80a0:	d008      	beq.n	80b4 <nwkRxHandleReceivedFrame+0x128>
				header->nwkDstAddr) {
    80a2:	68fb      	ldr	r3, [r7, #12]
    80a4:	7b5a      	ldrb	r2, [r3, #13]
    80a6:	7b9b      	ldrb	r3, [r3, #14]
    80a8:	021b      	lsls	r3, r3, #8
    80aa:	4313      	orrs	r3, r2
    80ac:	b29b      	uxth	r3, r3
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    80ae:	4a16      	ldr	r2, [pc, #88]	; (8108 <nwkRxHandleReceivedFrame+0x17c>)
    80b0:	4293      	cmp	r3, r2
    80b2:	d10e      	bne.n	80d2 <nwkRxHandleReceivedFrame+0x146>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    80b4:	68fb      	ldr	r3, [r7, #12]
    80b6:	7a5b      	ldrb	r3, [r3, #9]
    80b8:	2202      	movs	r2, #2
    80ba:	4013      	ands	r3, r2
    80bc:	b2db      	uxtb	r3, r3
    80be:	2b00      	cmp	r3, #0
    80c0:	d003      	beq.n	80ca <nwkRxHandleReceivedFrame+0x13e>
				frame->state = NWK_RX_STATE_DECRYPT;
    80c2:	687b      	ldr	r3, [r7, #4]
    80c4:	2221      	movs	r2, #33	; 0x21
    80c6:	701a      	strb	r2, [r3, #0]
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    80c8:	e01a      	b.n	8100 <nwkRxHandleReceivedFrame+0x174>
				frame->state = NWK_RX_STATE_DECRYPT;
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    80ca:	687b      	ldr	r3, [r7, #4]
    80cc:	2222      	movs	r2, #34	; 0x22
    80ce:	701a      	strb	r2, [r3, #0]
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    80d0:	e016      	b.n	8100 <nwkRxHandleReceivedFrame+0x174>
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    80d2:	4b0e      	ldr	r3, [pc, #56]	; (810c <nwkRxHandleReceivedFrame+0x180>)
    80d4:	881a      	ldrh	r2, [r3, #0]
    80d6:	68fb      	ldr	r3, [r7, #12]
    80d8:	7959      	ldrb	r1, [r3, #5]
    80da:	799b      	ldrb	r3, [r3, #6]
    80dc:	021b      	lsls	r3, r3, #8
    80de:	430b      	orrs	r3, r1
    80e0:	b29b      	uxth	r3, r3
    80e2:	429a      	cmp	r2, r3
    80e4:	d10c      	bne.n	8100 <nwkRxHandleReceivedFrame+0x174>
			frame->state = NWK_RX_STATE_ROUTE;
    80e6:	687b      	ldr	r3, [r7, #4]
    80e8:	2223      	movs	r2, #35	; 0x23
    80ea:	701a      	strb	r2, [r3, #0]
    80ec:	e008      	b.n	8100 <nwkRxHandleReceivedFrame+0x174>
		return;
	}

#else
	if (header->nwkFcf.multicast) {
		return;
    80ee:	46c0      	nop			; (mov r8, r8)
    80f0:	e006      	b.n	8100 <nwkRxHandleReceivedFrame+0x174>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
		}

		return;
    80f2:	46c0      	nop			; (mov r8, r8)
    80f4:	e004      	b.n	8100 <nwkRxHandleReceivedFrame+0x174>
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
			header->nwkFcf.ackRequest) {
		return;
    80f6:	46c0      	nop			; (mov r8, r8)
    80f8:	e002      	b.n	8100 <nwkRxHandleReceivedFrame+0x174>
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
		return;
    80fa:	46c0      	nop			; (mov r8, r8)
    80fc:	e000      	b.n	8100 <nwkRxHandleReceivedFrame+0x174>
#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
#endif

	if (nwkRxRejectDuplicate(header)) {
		return;
    80fe:	46c0      	nop			; (mov r8, r8)
		else if (nwkIb.addr == header->macDstAddr) {
			frame->state = NWK_RX_STATE_ROUTE;
		}
  #endif
	}
}
    8100:	46bd      	mov	sp, r7
    8102:	b004      	add	sp, #16
    8104:	bd80      	pop	{r7, pc}
    8106:	46c0      	nop			; (mov r8, r8)
    8108:	0000ffff 	.word	0x0000ffff
    810c:	2000104c 	.word	0x2000104c
    8110:	00006d01 	.word	0x00006d01
    8114:	00007d89 	.word	0x00007d89
    8118:	00008b31 	.word	0x00008b31

0000811c <nwkRxIndicateFrame>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
    811c:	b580      	push	{r7, lr}
    811e:	b088      	sub	sp, #32
    8120:	af00      	add	r7, sp, #0
    8122:	6078      	str	r0, [r7, #4]
	NwkFrameHeader_t *header = &frame->header;
    8124:	687b      	ldr	r3, [r7, #4]
    8126:	3302      	adds	r3, #2
    8128:	61fb      	str	r3, [r7, #28]
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    812a:	69fb      	ldr	r3, [r7, #28]
    812c:	7bdb      	ldrb	r3, [r3, #15]
    812e:	061b      	lsls	r3, r3, #24
    8130:	0f1b      	lsrs	r3, r3, #28
    8132:	b2db      	uxtb	r3, r3
    8134:	001a      	movs	r2, r3
    8136:	4b79      	ldr	r3, [pc, #484]	; (831c <nwkRxIndicateFrame+0x200>)
    8138:	3202      	adds	r2, #2
    813a:	0092      	lsls	r2, r2, #2
    813c:	58d3      	ldr	r3, [r2, r3]
    813e:	2b00      	cmp	r3, #0
    8140:	d101      	bne.n	8146 <nwkRxIndicateFrame+0x2a>
		return false;
    8142:	2300      	movs	r3, #0
    8144:	e0e5      	b.n	8312 <nwkRxIndicateFrame+0x1f6>
	}

	ind.srcAddr = header->nwkSrcAddr;
    8146:	69fb      	ldr	r3, [r7, #28]
    8148:	7ada      	ldrb	r2, [r3, #11]
    814a:	7b1b      	ldrb	r3, [r3, #12]
    814c:	021b      	lsls	r3, r3, #8
    814e:	4313      	orrs	r3, r2
    8150:	b29a      	uxth	r2, r3
    8152:	230c      	movs	r3, #12
    8154:	18fb      	adds	r3, r7, r3
    8156:	801a      	strh	r2, [r3, #0]
	ind.dstAddr = header->nwkDstAddr;
    8158:	69fb      	ldr	r3, [r7, #28]
    815a:	7b5a      	ldrb	r2, [r3, #13]
    815c:	7b9b      	ldrb	r3, [r3, #14]
    815e:	021b      	lsls	r3, r3, #8
    8160:	4313      	orrs	r3, r2
    8162:	b29a      	uxth	r2, r3
    8164:	230c      	movs	r3, #12
    8166:	18fb      	adds	r3, r7, r3
    8168:	805a      	strh	r2, [r3, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    816a:	69fb      	ldr	r3, [r7, #28]
    816c:	7bdb      	ldrb	r3, [r3, #15]
    816e:	071b      	lsls	r3, r3, #28
    8170:	0f1b      	lsrs	r3, r3, #28
    8172:	b2db      	uxtb	r3, r3
    8174:	001a      	movs	r2, r3
    8176:	230c      	movs	r3, #12
    8178:	18fb      	adds	r3, r7, r3
    817a:	711a      	strb	r2, [r3, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    817c:	69fb      	ldr	r3, [r7, #28]
    817e:	7bdb      	ldrb	r3, [r3, #15]
    8180:	061b      	lsls	r3, r3, #24
    8182:	0f1b      	lsrs	r3, r3, #28
    8184:	b2db      	uxtb	r3, r3
    8186:	001a      	movs	r2, r3
    8188:	230c      	movs	r3, #12
    818a:	18fb      	adds	r3, r7, r3
    818c:	715a      	strb	r2, [r3, #5]
	ind.data = frame->payload;
    818e:	687b      	ldr	r3, [r7, #4]
    8190:	2281      	movs	r2, #129	; 0x81
    8192:	5c9a      	ldrb	r2, [r3, r2]
    8194:	2182      	movs	r1, #130	; 0x82
    8196:	5c59      	ldrb	r1, [r3, r1]
    8198:	0209      	lsls	r1, r1, #8
    819a:	430a      	orrs	r2, r1
    819c:	2183      	movs	r1, #131	; 0x83
    819e:	5c59      	ldrb	r1, [r3, r1]
    81a0:	0409      	lsls	r1, r1, #16
    81a2:	430a      	orrs	r2, r1
    81a4:	2184      	movs	r1, #132	; 0x84
    81a6:	5c5b      	ldrb	r3, [r3, r1]
    81a8:	061b      	lsls	r3, r3, #24
    81aa:	4313      	orrs	r3, r2
    81ac:	001a      	movs	r2, r3
    81ae:	230c      	movs	r3, #12
    81b0:	18fb      	adds	r3, r7, r3
    81b2:	609a      	str	r2, [r3, #8]
	ind.size = nwkFramePayloadSize(frame);
    81b4:	687b      	ldr	r3, [r7, #4]
    81b6:	0018      	movs	r0, r3
    81b8:	4b59      	ldr	r3, [pc, #356]	; (8320 <nwkRxIndicateFrame+0x204>)
    81ba:	4798      	blx	r3
    81bc:	0003      	movs	r3, r0
    81be:	001a      	movs	r2, r3
    81c0:	230c      	movs	r3, #12
    81c2:	18fb      	adds	r3, r7, r3
    81c4:	731a      	strb	r2, [r3, #12]
	ind.lqi = frame->rx.lqi;
    81c6:	687b      	ldr	r3, [r7, #4]
    81c8:	2285      	movs	r2, #133	; 0x85
    81ca:	5c9a      	ldrb	r2, [r3, r2]
    81cc:	230c      	movs	r3, #12
    81ce:	18fb      	adds	r3, r7, r3
    81d0:	735a      	strb	r2, [r3, #13]
	ind.rssi = frame->rx.rssi;
    81d2:	687b      	ldr	r3, [r7, #4]
    81d4:	2286      	movs	r2, #134	; 0x86
    81d6:	569a      	ldrsb	r2, [r3, r2]
    81d8:	230c      	movs	r3, #12
    81da:	18fb      	adds	r3, r7, r3
    81dc:	739a      	strb	r2, [r3, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    81de:	69fb      	ldr	r3, [r7, #28]
    81e0:	7a5b      	ldrb	r3, [r3, #9]
    81e2:	2201      	movs	r2, #1
    81e4:	4013      	ands	r3, r2
    81e6:	b2db      	uxtb	r3, r3
    81e8:	1e5a      	subs	r2, r3, #1
    81ea:	4193      	sbcs	r3, r2
    81ec:	b2db      	uxtb	r3, r3
    81ee:	001a      	movs	r2, r3
    81f0:	230c      	movs	r3, #12
    81f2:	18fb      	adds	r3, r7, r3
    81f4:	719a      	strb	r2, [r3, #6]
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    81f6:	230c      	movs	r3, #12
    81f8:	18fb      	adds	r3, r7, r3
    81fa:	799b      	ldrb	r3, [r3, #6]
    81fc:	b25a      	sxtb	r2, r3
    81fe:	69fb      	ldr	r3, [r7, #28]
    8200:	7a5b      	ldrb	r3, [r3, #9]
    8202:	b25b      	sxtb	r3, r3
    8204:	2102      	movs	r1, #2
    8206:	400b      	ands	r3, r1
    8208:	b25b      	sxtb	r3, r3
    820a:	4313      	orrs	r3, r2
    820c:	b25b      	sxtb	r3, r3
    820e:	b2da      	uxtb	r2, r3
    8210:	230c      	movs	r3, #12
    8212:	18fb      	adds	r3, r7, r3
    8214:	719a      	strb	r2, [r3, #6]
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    8216:	230c      	movs	r3, #12
    8218:	18fb      	adds	r3, r7, r3
    821a:	799b      	ldrb	r3, [r3, #6]
    821c:	b25a      	sxtb	r2, r3
    821e:	69fb      	ldr	r3, [r7, #28]
    8220:	7a5b      	ldrb	r3, [r3, #9]
    8222:	2104      	movs	r1, #4
    8224:	400b      	ands	r3, r1
    8226:	b2db      	uxtb	r3, r3
    8228:	2b00      	cmp	r3, #0
    822a:	d001      	beq.n	8230 <nwkRxIndicateFrame+0x114>
    822c:	2320      	movs	r3, #32
    822e:	e000      	b.n	8232 <nwkRxIndicateFrame+0x116>
    8230:	2300      	movs	r3, #0
    8232:	4313      	orrs	r3, r2
    8234:	b25b      	sxtb	r3, r3
    8236:	b2da      	uxtb	r2, r3
    8238:	230c      	movs	r3, #12
    823a:	18fb      	adds	r3, r7, r3
    823c:	719a      	strb	r2, [r3, #6]
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    823e:	230c      	movs	r3, #12
    8240:	18fb      	adds	r3, r7, r3
    8242:	799b      	ldrb	r3, [r3, #6]
    8244:	b25a      	sxtb	r2, r3
    8246:	69fb      	ldr	r3, [r7, #28]
    8248:	7a5b      	ldrb	r3, [r3, #9]
    824a:	2108      	movs	r1, #8
    824c:	400b      	ands	r3, r1
    824e:	b2db      	uxtb	r3, r3
    8250:	2b00      	cmp	r3, #0
    8252:	d001      	beq.n	8258 <nwkRxIndicateFrame+0x13c>
    8254:	2340      	movs	r3, #64	; 0x40
    8256:	e000      	b.n	825a <nwkRxIndicateFrame+0x13e>
    8258:	2300      	movs	r3, #0
    825a:	4313      	orrs	r3, r2
    825c:	b25b      	sxtb	r3, r3
    825e:	b2da      	uxtb	r2, r3
    8260:	230c      	movs	r3, #12
    8262:	18fb      	adds	r3, r7, r3
    8264:	719a      	strb	r2, [r3, #6]
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    8266:	230c      	movs	r3, #12
    8268:	18fb      	adds	r3, r7, r3
    826a:	799b      	ldrb	r3, [r3, #6]
    826c:	b25a      	sxtb	r2, r3
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    826e:	69fb      	ldr	r3, [r7, #28]
    8270:	7b59      	ldrb	r1, [r3, #13]
    8272:	7b9b      	ldrb	r3, [r3, #14]
    8274:	021b      	lsls	r3, r3, #8
    8276:	430b      	orrs	r3, r1
    8278:	b29b      	uxth	r3, r3
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    827a:	492a      	ldr	r1, [pc, #168]	; (8324 <nwkRxIndicateFrame+0x208>)
    827c:	428b      	cmp	r3, r1
    827e:	d101      	bne.n	8284 <nwkRxIndicateFrame+0x168>
    8280:	2304      	movs	r3, #4
    8282:	e000      	b.n	8286 <nwkRxIndicateFrame+0x16a>
    8284:	2300      	movs	r3, #0
    8286:	4313      	orrs	r3, r2
    8288:	b25b      	sxtb	r3, r3
    828a:	b2da      	uxtb	r2, r3
    828c:	230c      	movs	r3, #12
    828e:	18fb      	adds	r3, r7, r3
    8290:	719a      	strb	r2, [r3, #6]
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    8292:	230c      	movs	r3, #12
    8294:	18fb      	adds	r3, r7, r3
    8296:	799b      	ldrb	r3, [r3, #6]
    8298:	b25a      	sxtb	r2, r3
    829a:	69fb      	ldr	r3, [r7, #28]
    829c:	7ad9      	ldrb	r1, [r3, #11]
    829e:	7b1b      	ldrb	r3, [r3, #12]
    82a0:	021b      	lsls	r3, r3, #8
    82a2:	430b      	orrs	r3, r1
    82a4:	b299      	uxth	r1, r3
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    82a6:	69fb      	ldr	r3, [r7, #28]
    82a8:	79d8      	ldrb	r0, [r3, #7]
    82aa:	7a1b      	ldrb	r3, [r3, #8]
    82ac:	021b      	lsls	r3, r3, #8
    82ae:	4303      	orrs	r3, r0
    82b0:	b29b      	uxth	r3, r3
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    82b2:	4299      	cmp	r1, r3
    82b4:	d101      	bne.n	82ba <nwkRxIndicateFrame+0x19e>
    82b6:	2308      	movs	r3, #8
    82b8:	e000      	b.n	82bc <nwkRxIndicateFrame+0x1a0>
    82ba:	2300      	movs	r3, #0
    82bc:	4313      	orrs	r3, r2
    82be:	b25b      	sxtb	r3, r3
    82c0:	b2da      	uxtb	r2, r3
    82c2:	230c      	movs	r3, #12
    82c4:	18fb      	adds	r3, r7, r3
    82c6:	719a      	strb	r2, [r3, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    82c8:	230c      	movs	r3, #12
    82ca:	18fb      	adds	r3, r7, r3
    82cc:	799b      	ldrb	r3, [r3, #6]
    82ce:	b25a      	sxtb	r2, r3
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    82d0:	69fb      	ldr	r3, [r7, #28]
    82d2:	78d9      	ldrb	r1, [r3, #3]
    82d4:	791b      	ldrb	r3, [r3, #4]
    82d6:	021b      	lsls	r3, r3, #8
    82d8:	430b      	orrs	r3, r1
    82da:	b29b      	uxth	r3, r3
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    82dc:	4911      	ldr	r1, [pc, #68]	; (8324 <nwkRxIndicateFrame+0x208>)
    82de:	428b      	cmp	r3, r1
    82e0:	d101      	bne.n	82e6 <nwkRxIndicateFrame+0x1ca>
    82e2:	2310      	movs	r3, #16
    82e4:	e000      	b.n	82e8 <nwkRxIndicateFrame+0x1cc>
    82e6:	2300      	movs	r3, #0
    82e8:	4313      	orrs	r3, r2
    82ea:	b25b      	sxtb	r3, r3
    82ec:	b2da      	uxtb	r2, r3
    82ee:	230c      	movs	r3, #12
    82f0:	18fb      	adds	r3, r7, r3
    82f2:	719a      	strb	r2, [r3, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    82f4:	69fb      	ldr	r3, [r7, #28]
    82f6:	7bdb      	ldrb	r3, [r3, #15]
    82f8:	061b      	lsls	r3, r3, #24
    82fa:	0f1b      	lsrs	r3, r3, #28
    82fc:	b2db      	uxtb	r3, r3
    82fe:	001a      	movs	r2, r3
    8300:	4b06      	ldr	r3, [pc, #24]	; (831c <nwkRxIndicateFrame+0x200>)
    8302:	3202      	adds	r2, #2
    8304:	0092      	lsls	r2, r2, #2
    8306:	58d3      	ldr	r3, [r2, r3]
    8308:	220c      	movs	r2, #12
    830a:	18ba      	adds	r2, r7, r2
    830c:	0010      	movs	r0, r2
    830e:	4798      	blx	r3
    8310:	0003      	movs	r3, r0
}
    8312:	0018      	movs	r0, r3
    8314:	46bd      	mov	sp, r7
    8316:	b008      	add	sp, #32
    8318:	bd80      	pop	{r7, pc}
    831a:	46c0      	nop			; (mov r8, r8)
    831c:	2000104c 	.word	0x2000104c
    8320:	00007a59 	.word	0x00007a59
    8324:	0000ffff 	.word	0x0000ffff

00008328 <nwkRxHandleIndication>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
    8328:	b590      	push	{r4, r7, lr}
    832a:	b085      	sub	sp, #20
    832c:	af00      	add	r7, sp, #0
    832e:	6078      	str	r0, [r7, #4]
	bool ack;

	nwkRxAckControl = 0;
    8330:	4b2c      	ldr	r3, [pc, #176]	; (83e4 <nwkRxHandleIndication+0xbc>)
    8332:	2200      	movs	r2, #0
    8334:	701a      	strb	r2, [r3, #0]
	ack = nwkRxIndicateFrame(frame);
    8336:	230f      	movs	r3, #15
    8338:	18fc      	adds	r4, r7, r3
    833a:	687b      	ldr	r3, [r7, #4]
    833c:	0018      	movs	r0, r3
    833e:	4b2a      	ldr	r3, [pc, #168]	; (83e8 <nwkRxHandleIndication+0xc0>)
    8340:	4798      	blx	r3
    8342:	0003      	movs	r3, r0
    8344:	7023      	strb	r3, [r4, #0]

	if (0 == frame->header.nwkFcf.ackRequest) {
    8346:	687b      	ldr	r3, [r7, #4]
    8348:	7adb      	ldrb	r3, [r3, #11]
    834a:	2201      	movs	r2, #1
    834c:	4013      	ands	r3, r2
    834e:	b2db      	uxtb	r3, r3
    8350:	2b00      	cmp	r3, #0
    8352:	d103      	bne.n	835c <nwkRxHandleIndication+0x34>
		ack = false;
    8354:	230f      	movs	r3, #15
    8356:	18fb      	adds	r3, r7, r3
    8358:	2200      	movs	r2, #0
    835a:	701a      	strb	r2, [r3, #0]
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    835c:	687b      	ldr	r3, [r7, #4]
    835e:	79da      	ldrb	r2, [r3, #7]
    8360:	7a1b      	ldrb	r3, [r3, #8]
    8362:	021b      	lsls	r3, r3, #8
    8364:	4313      	orrs	r3, r2
    8366:	b29b      	uxth	r3, r3
    8368:	4a20      	ldr	r2, [pc, #128]	; (83ec <nwkRxHandleIndication+0xc4>)
    836a:	4293      	cmp	r3, r2
    836c:	d114      	bne.n	8398 <nwkRxHandleIndication+0x70>
			nwkIb.addr == frame->header.nwkDstAddr &&
    836e:	4b20      	ldr	r3, [pc, #128]	; (83f0 <nwkRxHandleIndication+0xc8>)
    8370:	881a      	ldrh	r2, [r3, #0]
    8372:	687b      	ldr	r3, [r7, #4]
    8374:	7bd9      	ldrb	r1, [r3, #15]
    8376:	7c1b      	ldrb	r3, [r3, #16]
    8378:	021b      	lsls	r3, r3, #8
    837a:	430b      	orrs	r3, r1
    837c:	b29b      	uxth	r3, r3

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    837e:	429a      	cmp	r2, r3
    8380:	d10a      	bne.n	8398 <nwkRxHandleIndication+0x70>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    8382:	687b      	ldr	r3, [r7, #4]
    8384:	7adb      	ldrb	r3, [r3, #11]
    8386:	2208      	movs	r2, #8
    8388:	4013      	ands	r3, r2
    838a:	b2db      	uxtb	r3, r3
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    838c:	2b00      	cmp	r3, #0
    838e:	d103      	bne.n	8398 <nwkRxHandleIndication+0x70>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    8390:	230f      	movs	r3, #15
    8392:	18fb      	adds	r3, r7, r3
    8394:	2201      	movs	r2, #1
    8396:	701a      	strb	r2, [r3, #0]
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    8398:	687b      	ldr	r3, [r7, #4]
    839a:	795a      	ldrb	r2, [r3, #5]
    839c:	799b      	ldrb	r3, [r3, #6]
    839e:	021b      	lsls	r3, r3, #8
    83a0:	4313      	orrs	r3, r2
    83a2:	b29b      	uxth	r3, r3
    83a4:	4a11      	ldr	r2, [pc, #68]	; (83ec <nwkRxHandleIndication+0xc4>)
    83a6:	4293      	cmp	r3, r2
    83a8:	d103      	bne.n	83b2 <nwkRxHandleIndication+0x8a>
		ack = false;
    83aa:	230f      	movs	r3, #15
    83ac:	18fb      	adds	r3, r7, r3
    83ae:	2200      	movs	r2, #0
    83b0:	701a      	strb	r2, [r3, #0]
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    83b2:	4b0f      	ldr	r3, [pc, #60]	; (83f0 <nwkRxHandleIndication+0xc8>)
    83b4:	881b      	ldrh	r3, [r3, #0]
    83b6:	4a0d      	ldr	r2, [pc, #52]	; (83ec <nwkRxHandleIndication+0xc4>)
    83b8:	4293      	cmp	r3, r2
    83ba:	d103      	bne.n	83c4 <nwkRxHandleIndication+0x9c>
		ack = false;
    83bc:	230f      	movs	r3, #15
    83be:	18fb      	adds	r3, r7, r3
    83c0:	2200      	movs	r2, #0
    83c2:	701a      	strb	r2, [r3, #0]
	}

	if (ack) {
    83c4:	230f      	movs	r3, #15
    83c6:	18fb      	adds	r3, r7, r3
    83c8:	781b      	ldrb	r3, [r3, #0]
    83ca:	2b00      	cmp	r3, #0
    83cc:	d003      	beq.n	83d6 <nwkRxHandleIndication+0xae>
		nwkRxSendAck(frame);
    83ce:	687b      	ldr	r3, [r7, #4]
    83d0:	0018      	movs	r0, r3
    83d2:	4b08      	ldr	r3, [pc, #32]	; (83f4 <nwkRxHandleIndication+0xcc>)
    83d4:	4798      	blx	r3
	}

	frame->state = NWK_RX_STATE_FINISH;
    83d6:	687b      	ldr	r3, [r7, #4]
    83d8:	2224      	movs	r2, #36	; 0x24
    83da:	701a      	strb	r2, [r3, #0]
}
    83dc:	46c0      	nop			; (mov r8, r8)
    83de:	46bd      	mov	sp, r7
    83e0:	b005      	add	sp, #20
    83e2:	bd90      	pop	{r4, r7, pc}
    83e4:	20000d6c 	.word	0x20000d6c
    83e8:	0000811d 	.word	0x0000811d
    83ec:	0000ffff 	.word	0x0000ffff
    83f0:	2000104c 	.word	0x2000104c
    83f4:	00007b95 	.word	0x00007b95

000083f8 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    83f8:	b580      	push	{r7, lr}
    83fa:	b082      	sub	sp, #8
    83fc:	af00      	add	r7, sp, #0
	NwkFrame_t *frame = NULL;
    83fe:	2300      	movs	r3, #0
    8400:	607b      	str	r3, [r7, #4]

	while (NULL != (frame = nwkFrameNext(frame))) {
    8402:	e023      	b.n	844c <nwkRxTaskHandler+0x54>
		switch (frame->state) {
    8404:	687b      	ldr	r3, [r7, #4]
    8406:	781b      	ldrb	r3, [r3, #0]
    8408:	3b20      	subs	r3, #32
    840a:	2b04      	cmp	r3, #4
    840c:	d81e      	bhi.n	844c <nwkRxTaskHandler+0x54>
    840e:	009a      	lsls	r2, r3, #2
    8410:	4b15      	ldr	r3, [pc, #84]	; (8468 <nwkRxTaskHandler+0x70>)
    8412:	18d3      	adds	r3, r2, r3
    8414:	681b      	ldr	r3, [r3, #0]
    8416:	469f      	mov	pc, r3
		case NWK_RX_STATE_RECEIVED:
		{
			nwkRxHandleReceivedFrame(frame);
    8418:	687b      	ldr	r3, [r7, #4]
    841a:	0018      	movs	r0, r3
    841c:	4b13      	ldr	r3, [pc, #76]	; (846c <nwkRxTaskHandler+0x74>)
    841e:	4798      	blx	r3
		}
		break;
    8420:	e014      	b.n	844c <nwkRxTaskHandler+0x54>

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    8422:	687b      	ldr	r3, [r7, #4]
    8424:	2100      	movs	r1, #0
    8426:	0018      	movs	r0, r3
    8428:	4b11      	ldr	r3, [pc, #68]	; (8470 <nwkRxTaskHandler+0x78>)
    842a:	4798      	blx	r3
		}
		break;
    842c:	e00e      	b.n	844c <nwkRxTaskHandler+0x54>
#endif

		case NWK_RX_STATE_INDICATE:
		{
			nwkRxHandleIndication(frame);
    842e:	687b      	ldr	r3, [r7, #4]
    8430:	0018      	movs	r0, r3
    8432:	4b10      	ldr	r3, [pc, #64]	; (8474 <nwkRxTaskHandler+0x7c>)
    8434:	4798      	blx	r3
		}
		break;
    8436:	e009      	b.n	844c <nwkRxTaskHandler+0x54>

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    8438:	687b      	ldr	r3, [r7, #4]
    843a:	0018      	movs	r0, r3
    843c:	4b0e      	ldr	r3, [pc, #56]	; (8478 <nwkRxTaskHandler+0x80>)
    843e:	4798      	blx	r3
		}
		break;
    8440:	e004      	b.n	844c <nwkRxTaskHandler+0x54>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    8442:	687b      	ldr	r3, [r7, #4]
    8444:	0018      	movs	r0, r3
    8446:	4b0d      	ldr	r3, [pc, #52]	; (847c <nwkRxTaskHandler+0x84>)
    8448:	4798      	blx	r3
		}
		break;
    844a:	46c0      	nop			; (mov r8, r8)
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    844c:	687b      	ldr	r3, [r7, #4]
    844e:	0018      	movs	r0, r3
    8450:	4b0b      	ldr	r3, [pc, #44]	; (8480 <nwkRxTaskHandler+0x88>)
    8452:	4798      	blx	r3
    8454:	0003      	movs	r3, r0
    8456:	607b      	str	r3, [r7, #4]
    8458:	687b      	ldr	r3, [r7, #4]
    845a:	2b00      	cmp	r3, #0
    845c:	d1d2      	bne.n	8404 <nwkRxTaskHandler+0xc>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    845e:	46c0      	nop			; (mov r8, r8)
    8460:	46bd      	mov	sp, r7
    8462:	b002      	add	sp, #8
    8464:	bd80      	pop	{r7, pc}
    8466:	46c0      	nop			; (mov r8, r8)
    8468:	0000cb0c 	.word	0x0000cb0c
    846c:	00007f8d 	.word	0x00007f8d
    8470:	00008509 	.word	0x00008509
    8474:	00008329 	.word	0x00008329
    8478:	00006eed 	.word	0x00006eed
    847c:	00006955 	.word	0x00006955
    8480:	00006981 	.word	0x00006981

00008484 <nwkFramePayloadSize>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
    8484:	b580      	push	{r7, lr}
    8486:	b082      	sub	sp, #8
    8488:	af00      	add	r7, sp, #0
    848a:	6078      	str	r0, [r7, #4]
	return frame->size - (frame->payload - frame->data);
    848c:	687b      	ldr	r3, [r7, #4]
    848e:	785a      	ldrb	r2, [r3, #1]
    8490:	687b      	ldr	r3, [r7, #4]
    8492:	2181      	movs	r1, #129	; 0x81
    8494:	5c59      	ldrb	r1, [r3, r1]
    8496:	2082      	movs	r0, #130	; 0x82
    8498:	5c18      	ldrb	r0, [r3, r0]
    849a:	0200      	lsls	r0, r0, #8
    849c:	4301      	orrs	r1, r0
    849e:	2083      	movs	r0, #131	; 0x83
    84a0:	5c18      	ldrb	r0, [r3, r0]
    84a2:	0400      	lsls	r0, r0, #16
    84a4:	4301      	orrs	r1, r0
    84a6:	2084      	movs	r0, #132	; 0x84
    84a8:	5c1b      	ldrb	r3, [r3, r0]
    84aa:	061b      	lsls	r3, r3, #24
    84ac:	430b      	orrs	r3, r1
    84ae:	0019      	movs	r1, r3
    84b0:	687b      	ldr	r3, [r7, #4]
    84b2:	3302      	adds	r3, #2
    84b4:	1acb      	subs	r3, r1, r3
    84b6:	b2db      	uxtb	r3, r3
    84b8:	1ad3      	subs	r3, r2, r3
    84ba:	b2db      	uxtb	r3, r3
}
    84bc:	0018      	movs	r0, r3
    84be:	46bd      	mov	sp, r7
    84c0:	b002      	add	sp, #8
    84c2:	bd80      	pop	{r7, pc}

000084c4 <nwkSecurityInit>:

/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
    84c4:	b580      	push	{r7, lr}
    84c6:	af00      	add	r7, sp, #0
	nwkSecurityActiveFrames = 0;
    84c8:	4b04      	ldr	r3, [pc, #16]	; (84dc <nwkSecurityInit+0x18>)
    84ca:	2200      	movs	r2, #0
    84cc:	701a      	strb	r2, [r3, #0]
	nwkSecurityActiveFrame = NULL;
    84ce:	4b04      	ldr	r3, [pc, #16]	; (84e0 <nwkSecurityInit+0x1c>)
    84d0:	2200      	movs	r2, #0
    84d2:	601a      	str	r2, [r3, #0]
}
    84d4:	46c0      	nop			; (mov r8, r8)
    84d6:	46bd      	mov	sp, r7
    84d8:	bd80      	pop	{r7, pc}
    84da:	46c0      	nop			; (mov r8, r8)
    84dc:	20000d84 	.word	0x20000d84
    84e0:	20000d88 	.word	0x20000d88

000084e4 <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    84e4:	b580      	push	{r7, lr}
    84e6:	b082      	sub	sp, #8
    84e8:	af00      	add	r7, sp, #0
    84ea:	6078      	str	r0, [r7, #4]
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    84ec:	6879      	ldr	r1, [r7, #4]
    84ee:	4b04      	ldr	r3, [pc, #16]	; (8500 <NWK_SetSecurityKey+0x1c>)
    84f0:	2210      	movs	r2, #16
    84f2:	0018      	movs	r0, r3
    84f4:	4b03      	ldr	r3, [pc, #12]	; (8504 <NWK_SetSecurityKey+0x20>)
    84f6:	4798      	blx	r3
}
    84f8:	46c0      	nop			; (mov r8, r8)
    84fa:	46bd      	mov	sp, r7
    84fc:	b002      	add	sp, #8
    84fe:	bd80      	pop	{r7, pc}
    8500:	20001094 	.word	0x20001094
    8504:	0000c209 	.word	0x0000c209

00008508 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
    8508:	b580      	push	{r7, lr}
    850a:	b082      	sub	sp, #8
    850c:	af00      	add	r7, sp, #0
    850e:	6078      	str	r0, [r7, #4]
    8510:	000a      	movs	r2, r1
    8512:	1cfb      	adds	r3, r7, #3
    8514:	701a      	strb	r2, [r3, #0]
	if (encrypt) {
    8516:	1cfb      	adds	r3, r7, #3
    8518:	781b      	ldrb	r3, [r3, #0]
    851a:	2b00      	cmp	r3, #0
    851c:	d003      	beq.n	8526 <nwkSecurityProcess+0x1e>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    851e:	687b      	ldr	r3, [r7, #4]
    8520:	2230      	movs	r2, #48	; 0x30
    8522:	701a      	strb	r2, [r3, #0]
    8524:	e002      	b.n	852c <nwkSecurityProcess+0x24>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    8526:	687b      	ldr	r3, [r7, #4]
    8528:	2231      	movs	r2, #49	; 0x31
    852a:	701a      	strb	r2, [r3, #0]
	}

	++nwkSecurityActiveFrames;
    852c:	4b04      	ldr	r3, [pc, #16]	; (8540 <nwkSecurityProcess+0x38>)
    852e:	781b      	ldrb	r3, [r3, #0]
    8530:	3301      	adds	r3, #1
    8532:	b2da      	uxtb	r2, r3
    8534:	4b02      	ldr	r3, [pc, #8]	; (8540 <nwkSecurityProcess+0x38>)
    8536:	701a      	strb	r2, [r3, #0]
}
    8538:	46c0      	nop			; (mov r8, r8)
    853a:	46bd      	mov	sp, r7
    853c:	b002      	add	sp, #8
    853e:	bd80      	pop	{r7, pc}
    8540:	20000d84 	.word	0x20000d84

00008544 <nwkSecurityStart>:

/*************************************************************************//**
*****************************************************************************/
static void nwkSecurityStart(void)
{
    8544:	b580      	push	{r7, lr}
    8546:	b082      	sub	sp, #8
    8548:	af00      	add	r7, sp, #0
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;
    854a:	4b2f      	ldr	r3, [pc, #188]	; (8608 <nwkSecurityStart+0xc4>)
    854c:	681b      	ldr	r3, [r3, #0]
    854e:	3302      	adds	r3, #2
    8550:	607b      	str	r3, [r7, #4]

	nwkSecurityVector[0] = header->nwkSeq;
    8552:	687b      	ldr	r3, [r7, #4]
    8554:	7a9b      	ldrb	r3, [r3, #10]
    8556:	001a      	movs	r2, r3
    8558:	4b2c      	ldr	r3, [pc, #176]	; (860c <nwkSecurityStart+0xc8>)
    855a:	601a      	str	r2, [r3, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    855c:	687b      	ldr	r3, [r7, #4]
    855e:	7b5a      	ldrb	r2, [r3, #13]
    8560:	7b9b      	ldrb	r3, [r3, #14]
    8562:	021b      	lsls	r3, r3, #8
    8564:	4313      	orrs	r3, r2
    8566:	b29b      	uxth	r3, r3
    8568:	041b      	lsls	r3, r3, #16
			16) | header->nwkDstEndpoint;
    856a:	687a      	ldr	r2, [r7, #4]
    856c:	7bd2      	ldrb	r2, [r2, #15]
    856e:	0612      	lsls	r2, r2, #24
    8570:	0f12      	lsrs	r2, r2, #28
    8572:	b2d2      	uxtb	r2, r2
    8574:	431a      	orrs	r2, r3
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    8576:	4b25      	ldr	r3, [pc, #148]	; (860c <nwkSecurityStart+0xc8>)
    8578:	605a      	str	r2, [r3, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    857a:	687b      	ldr	r3, [r7, #4]
    857c:	7ada      	ldrb	r2, [r3, #11]
    857e:	7b1b      	ldrb	r3, [r3, #12]
    8580:	021b      	lsls	r3, r3, #8
    8582:	4313      	orrs	r3, r2
    8584:	b29b      	uxth	r3, r3
    8586:	041b      	lsls	r3, r3, #16
			16) | header->nwkSrcEndpoint;
    8588:	687a      	ldr	r2, [r7, #4]
    858a:	7bd2      	ldrb	r2, [r2, #15]
    858c:	0712      	lsls	r2, r2, #28
    858e:	0f12      	lsrs	r2, r2, #28
    8590:	b2d2      	uxtb	r2, r2
    8592:	431a      	orrs	r2, r3
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    8594:	4b1d      	ldr	r3, [pc, #116]	; (860c <nwkSecurityStart+0xc8>)
    8596:	609a      	str	r2, [r3, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    8598:	687b      	ldr	r3, [r7, #4]
    859a:	78da      	ldrb	r2, [r3, #3]
    859c:	791b      	ldrb	r3, [r3, #4]
    859e:	021b      	lsls	r3, r3, #8
    85a0:	4313      	orrs	r3, r2
    85a2:	b29b      	uxth	r3, r3
    85a4:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    85a6:	687a      	ldr	r2, [r7, #4]
    85a8:	3209      	adds	r2, #9
    85aa:	7812      	ldrb	r2, [r2, #0]
    85ac:	431a      	orrs	r2, r3
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    85ae:	4b17      	ldr	r3, [pc, #92]	; (860c <nwkSecurityStart+0xc8>)
    85b0:	60da      	str	r2, [r3, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
			nwkSecurityActiveFrame->state) {
    85b2:	4b15      	ldr	r3, [pc, #84]	; (8608 <nwkSecurityStart+0xc4>)
    85b4:	681b      	ldr	r3, [r3, #0]
    85b6:	781b      	ldrb	r3, [r3, #0]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    85b8:	2b31      	cmp	r3, #49	; 0x31
    85ba:	d107      	bne.n	85cc <nwkSecurityStart+0x88>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    85bc:	4b12      	ldr	r3, [pc, #72]	; (8608 <nwkSecurityStart+0xc4>)
    85be:	681a      	ldr	r2, [r3, #0]
    85c0:	4b11      	ldr	r3, [pc, #68]	; (8608 <nwkSecurityStart+0xc4>)
    85c2:	681b      	ldr	r3, [r3, #0]
    85c4:	785b      	ldrb	r3, [r3, #1]
    85c6:	3b04      	subs	r3, #4
    85c8:	b2db      	uxtb	r3, r3
    85ca:	7053      	strb	r3, [r2, #1]
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    85cc:	4b0e      	ldr	r3, [pc, #56]	; (8608 <nwkSecurityStart+0xc4>)
    85ce:	681b      	ldr	r3, [r3, #0]
    85d0:	0018      	movs	r0, r3
    85d2:	4b0f      	ldr	r3, [pc, #60]	; (8610 <nwkSecurityStart+0xcc>)
    85d4:	4798      	blx	r3
    85d6:	0003      	movs	r3, r0
    85d8:	001a      	movs	r2, r3
    85da:	4b0e      	ldr	r3, [pc, #56]	; (8614 <nwkSecurityStart+0xd0>)
    85dc:	701a      	strb	r2, [r3, #0]
	nwkSecurityOffset = 0;
    85de:	4b0e      	ldr	r3, [pc, #56]	; (8618 <nwkSecurityStart+0xd4>)
    85e0:	2200      	movs	r2, #0
    85e2:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
			nwkSecurityActiveFrame->state);
    85e4:	4b08      	ldr	r3, [pc, #32]	; (8608 <nwkSecurityStart+0xc4>)
    85e6:	681b      	ldr	r3, [r3, #0]
    85e8:	781b      	ldrb	r3, [r3, #0]
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
	nwkSecurityOffset = 0;
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    85ea:	3b30      	subs	r3, #48	; 0x30
    85ec:	425a      	negs	r2, r3
    85ee:	4153      	adcs	r3, r2
    85f0:	b2da      	uxtb	r2, r3
    85f2:	4b0a      	ldr	r3, [pc, #40]	; (861c <nwkSecurityStart+0xd8>)
    85f4:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    85f6:	4b04      	ldr	r3, [pc, #16]	; (8608 <nwkSecurityStart+0xc4>)
    85f8:	681b      	ldr	r3, [r3, #0]
    85fa:	2232      	movs	r2, #50	; 0x32
    85fc:	701a      	strb	r2, [r3, #0]
}
    85fe:	46c0      	nop			; (mov r8, r8)
    8600:	46bd      	mov	sp, r7
    8602:	b002      	add	sp, #8
    8604:	bd80      	pop	{r7, pc}
    8606:	46c0      	nop			; (mov r8, r8)
    8608:	20000d88 	.word	0x20000d88
    860c:	20000d90 	.word	0x20000d90
    8610:	00008485 	.word	0x00008485
    8614:	20000d8c 	.word	0x20000d8c
    8618:	20000d8d 	.word	0x20000d8d
    861c:	20000d8e 	.word	0x20000d8e

00008620 <SYS_EncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    8620:	b580      	push	{r7, lr}
    8622:	b084      	sub	sp, #16
    8624:	af00      	add	r7, sp, #0
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
    8626:	4b46      	ldr	r3, [pc, #280]	; (8740 <SYS_EncryptConf+0x120>)
    8628:	60bb      	str	r3, [r7, #8]
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    862a:	4b46      	ldr	r3, [pc, #280]	; (8744 <SYS_EncryptConf+0x124>)
    862c:	681b      	ldr	r3, [r3, #0]
    862e:	2281      	movs	r2, #129	; 0x81
    8630:	5c9a      	ldrb	r2, [r3, r2]
    8632:	2182      	movs	r1, #130	; 0x82
    8634:	5c59      	ldrb	r1, [r3, r1]
    8636:	0209      	lsls	r1, r1, #8
    8638:	430a      	orrs	r2, r1
    863a:	2183      	movs	r1, #131	; 0x83
    863c:	5c59      	ldrb	r1, [r3, r1]
    863e:	0409      	lsls	r1, r1, #16
    8640:	430a      	orrs	r2, r1
    8642:	2184      	movs	r1, #132	; 0x84
    8644:	5c5b      	ldrb	r3, [r3, r1]
    8646:	061b      	lsls	r3, r3, #24
    8648:	4313      	orrs	r3, r2
    864a:	001a      	movs	r2, r3
    864c:	4b3e      	ldr	r3, [pc, #248]	; (8748 <SYS_EncryptConf+0x128>)
    864e:	781b      	ldrb	r3, [r3, #0]
    8650:	18d3      	adds	r3, r2, r3
    8652:	607b      	str	r3, [r7, #4]
	uint8_t block;

	block
		= (nwkSecuritySize <
    8654:	4b3d      	ldr	r3, [pc, #244]	; (874c <SYS_EncryptConf+0x12c>)
    8656:	781b      	ldrb	r3, [r3, #0]
    8658:	1cfa      	adds	r2, r7, #3
    865a:	b2d9      	uxtb	r1, r3
    865c:	2910      	cmp	r1, #16
    865e:	d900      	bls.n	8662 <SYS_EncryptConf+0x42>
    8660:	2310      	movs	r3, #16
    8662:	7013      	strb	r3, [r2, #0]
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    8664:	230f      	movs	r3, #15
    8666:	18fb      	adds	r3, r7, r3
    8668:	2200      	movs	r2, #0
    866a:	701a      	strb	r2, [r3, #0]
    866c:	e03f      	b.n	86ee <SYS_EncryptConf+0xce>
		text[i] ^= vector[i];
    866e:	230f      	movs	r3, #15
    8670:	18fb      	adds	r3, r7, r3
    8672:	781b      	ldrb	r3, [r3, #0]
    8674:	687a      	ldr	r2, [r7, #4]
    8676:	18d3      	adds	r3, r2, r3
    8678:	220f      	movs	r2, #15
    867a:	18ba      	adds	r2, r7, r2
    867c:	7812      	ldrb	r2, [r2, #0]
    867e:	6879      	ldr	r1, [r7, #4]
    8680:	188a      	adds	r2, r1, r2
    8682:	7811      	ldrb	r1, [r2, #0]
    8684:	220f      	movs	r2, #15
    8686:	18ba      	adds	r2, r7, r2
    8688:	7812      	ldrb	r2, [r2, #0]
    868a:	68b8      	ldr	r0, [r7, #8]
    868c:	1882      	adds	r2, r0, r2
    868e:	7812      	ldrb	r2, [r2, #0]
    8690:	404a      	eors	r2, r1
    8692:	b2d2      	uxtb	r2, r2
    8694:	701a      	strb	r2, [r3, #0]

		if (nwkSecurityEncrypt) {
    8696:	4b2e      	ldr	r3, [pc, #184]	; (8750 <SYS_EncryptConf+0x130>)
    8698:	781b      	ldrb	r3, [r3, #0]
    869a:	2b00      	cmp	r3, #0
    869c:	d00c      	beq.n	86b8 <SYS_EncryptConf+0x98>
			vector[i] = text[i];
    869e:	230f      	movs	r3, #15
    86a0:	18fb      	adds	r3, r7, r3
    86a2:	781b      	ldrb	r3, [r3, #0]
    86a4:	68ba      	ldr	r2, [r7, #8]
    86a6:	18d3      	adds	r3, r2, r3
    86a8:	220f      	movs	r2, #15
    86aa:	18ba      	adds	r2, r7, r2
    86ac:	7812      	ldrb	r2, [r2, #0]
    86ae:	6879      	ldr	r1, [r7, #4]
    86b0:	188a      	adds	r2, r1, r2
    86b2:	7812      	ldrb	r2, [r2, #0]
    86b4:	701a      	strb	r2, [r3, #0]
    86b6:	e013      	b.n	86e0 <SYS_EncryptConf+0xc0>
		} else {
			vector[i] ^= text[i];
    86b8:	230f      	movs	r3, #15
    86ba:	18fb      	adds	r3, r7, r3
    86bc:	781b      	ldrb	r3, [r3, #0]
    86be:	68ba      	ldr	r2, [r7, #8]
    86c0:	18d3      	adds	r3, r2, r3
    86c2:	220f      	movs	r2, #15
    86c4:	18ba      	adds	r2, r7, r2
    86c6:	7812      	ldrb	r2, [r2, #0]
    86c8:	68b9      	ldr	r1, [r7, #8]
    86ca:	188a      	adds	r2, r1, r2
    86cc:	7811      	ldrb	r1, [r2, #0]
    86ce:	220f      	movs	r2, #15
    86d0:	18ba      	adds	r2, r7, r2
    86d2:	7812      	ldrb	r2, [r2, #0]
    86d4:	6878      	ldr	r0, [r7, #4]
    86d6:	1882      	adds	r2, r0, r2
    86d8:	7812      	ldrb	r2, [r2, #0]
    86da:	404a      	eors	r2, r1
    86dc:	b2d2      	uxtb	r2, r2
    86de:	701a      	strb	r2, [r3, #0]
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    86e0:	230f      	movs	r3, #15
    86e2:	18fb      	adds	r3, r7, r3
    86e4:	781a      	ldrb	r2, [r3, #0]
    86e6:	230f      	movs	r3, #15
    86e8:	18fb      	adds	r3, r7, r3
    86ea:	3201      	adds	r2, #1
    86ec:	701a      	strb	r2, [r3, #0]
    86ee:	230f      	movs	r3, #15
    86f0:	18fa      	adds	r2, r7, r3
    86f2:	1cfb      	adds	r3, r7, #3
    86f4:	7812      	ldrb	r2, [r2, #0]
    86f6:	781b      	ldrb	r3, [r3, #0]
    86f8:	429a      	cmp	r2, r3
    86fa:	d3b8      	bcc.n	866e <SYS_EncryptConf+0x4e>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    86fc:	4b12      	ldr	r3, [pc, #72]	; (8748 <SYS_EncryptConf+0x128>)
    86fe:	781a      	ldrb	r2, [r3, #0]
    8700:	1cfb      	adds	r3, r7, #3
    8702:	781b      	ldrb	r3, [r3, #0]
    8704:	18d3      	adds	r3, r2, r3
    8706:	b2da      	uxtb	r2, r3
    8708:	4b0f      	ldr	r3, [pc, #60]	; (8748 <SYS_EncryptConf+0x128>)
    870a:	701a      	strb	r2, [r3, #0]
	nwkSecuritySize -= block;
    870c:	4b0f      	ldr	r3, [pc, #60]	; (874c <SYS_EncryptConf+0x12c>)
    870e:	781a      	ldrb	r2, [r3, #0]
    8710:	1cfb      	adds	r3, r7, #3
    8712:	781b      	ldrb	r3, [r3, #0]
    8714:	1ad3      	subs	r3, r2, r3
    8716:	b2da      	uxtb	r2, r3
    8718:	4b0c      	ldr	r3, [pc, #48]	; (874c <SYS_EncryptConf+0x12c>)
    871a:	701a      	strb	r2, [r3, #0]

	if (nwkSecuritySize > 0) {
    871c:	4b0b      	ldr	r3, [pc, #44]	; (874c <SYS_EncryptConf+0x12c>)
    871e:	781b      	ldrb	r3, [r3, #0]
    8720:	2b00      	cmp	r3, #0
    8722:	d004      	beq.n	872e <SYS_EncryptConf+0x10e>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    8724:	4b07      	ldr	r3, [pc, #28]	; (8744 <SYS_EncryptConf+0x124>)
    8726:	681b      	ldr	r3, [r3, #0]
    8728:	2232      	movs	r2, #50	; 0x32
    872a:	701a      	strb	r2, [r3, #0]
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
	}
}
    872c:	e003      	b.n	8736 <SYS_EncryptConf+0x116>
	nwkSecuritySize -= block;

	if (nwkSecuritySize > 0) {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    872e:	4b05      	ldr	r3, [pc, #20]	; (8744 <SYS_EncryptConf+0x124>)
    8730:	681b      	ldr	r3, [r3, #0]
    8732:	2234      	movs	r2, #52	; 0x34
    8734:	701a      	strb	r2, [r3, #0]
	}
}
    8736:	46c0      	nop			; (mov r8, r8)
    8738:	46bd      	mov	sp, r7
    873a:	b004      	add	sp, #16
    873c:	bd80      	pop	{r7, pc}
    873e:	46c0      	nop			; (mov r8, r8)
    8740:	20000d90 	.word	0x20000d90
    8744:	20000d88 	.word	0x20000d88
    8748:	20000d8d 	.word	0x20000d8d
    874c:	20000d8c 	.word	0x20000d8c
    8750:	20000d8e 	.word	0x20000d8e

00008754 <nwkSecurityProcessMic>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
    8754:	b580      	push	{r7, lr}
    8756:	b084      	sub	sp, #16
    8758:	af00      	add	r7, sp, #0
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    875a:	4b23      	ldr	r3, [pc, #140]	; (87e8 <nwkSecurityProcessMic+0x94>)
    875c:	681b      	ldr	r3, [r3, #0]
    875e:	2281      	movs	r2, #129	; 0x81
    8760:	5c9a      	ldrb	r2, [r3, r2]
    8762:	2182      	movs	r1, #130	; 0x82
    8764:	5c59      	ldrb	r1, [r3, r1]
    8766:	0209      	lsls	r1, r1, #8
    8768:	430a      	orrs	r2, r1
    876a:	2183      	movs	r1, #131	; 0x83
    876c:	5c59      	ldrb	r1, [r3, r1]
    876e:	0409      	lsls	r1, r1, #16
    8770:	430a      	orrs	r2, r1
    8772:	2184      	movs	r1, #132	; 0x84
    8774:	5c5b      	ldrb	r3, [r3, r1]
    8776:	061b      	lsls	r3, r3, #24
    8778:	4313      	orrs	r3, r2
    877a:	001a      	movs	r2, r3
    877c:	4b1b      	ldr	r3, [pc, #108]	; (87ec <nwkSecurityProcessMic+0x98>)
    877e:	781b      	ldrb	r3, [r3, #0]
    8780:	18d3      	adds	r3, r2, r3
    8782:	60fb      	str	r3, [r7, #12]
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    8784:	4b1a      	ldr	r3, [pc, #104]	; (87f0 <nwkSecurityProcessMic+0x9c>)
    8786:	681a      	ldr	r2, [r3, #0]
    8788:	4b19      	ldr	r3, [pc, #100]	; (87f0 <nwkSecurityProcessMic+0x9c>)
    878a:	685b      	ldr	r3, [r3, #4]
    878c:	405a      	eors	r2, r3
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    878e:	4b18      	ldr	r3, [pc, #96]	; (87f0 <nwkSecurityProcessMic+0x9c>)
    8790:	689b      	ldr	r3, [r3, #8]
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    8792:	405a      	eors	r2, r3
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    8794:	4b16      	ldr	r3, [pc, #88]	; (87f0 <nwkSecurityProcessMic+0x9c>)
    8796:	68db      	ldr	r3, [r3, #12]
    8798:	4053      	eors	r3, r2
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    879a:	60bb      	str	r3, [r7, #8]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    879c:	4b15      	ldr	r3, [pc, #84]	; (87f4 <nwkSecurityProcessMic+0xa0>)
    879e:	781b      	ldrb	r3, [r3, #0]
    87a0:	2b00      	cmp	r3, #0
    87a2:	d010      	beq.n	87c6 <nwkSecurityProcessMic+0x72>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    87a4:	2308      	movs	r3, #8
    87a6:	18f9      	adds	r1, r7, r3
    87a8:	68fb      	ldr	r3, [r7, #12]
    87aa:	2204      	movs	r2, #4
    87ac:	0018      	movs	r0, r3
    87ae:	4b12      	ldr	r3, [pc, #72]	; (87f8 <nwkSecurityProcessMic+0xa4>)
    87b0:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    87b2:	4b0d      	ldr	r3, [pc, #52]	; (87e8 <nwkSecurityProcessMic+0x94>)
    87b4:	681a      	ldr	r2, [r3, #0]
    87b6:	4b0c      	ldr	r3, [pc, #48]	; (87e8 <nwkSecurityProcessMic+0x94>)
    87b8:	681b      	ldr	r3, [r3, #0]
    87ba:	785b      	ldrb	r3, [r3, #1]
    87bc:	3304      	adds	r3, #4
    87be:	b2db      	uxtb	r3, r3
    87c0:	7053      	strb	r3, [r2, #1]
		return true;
    87c2:	2301      	movs	r3, #1
    87c4:	e00b      	b.n	87de <nwkSecurityProcessMic+0x8a>
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    87c6:	68f9      	ldr	r1, [r7, #12]
    87c8:	1d3b      	adds	r3, r7, #4
    87ca:	2204      	movs	r2, #4
    87cc:	0018      	movs	r0, r3
    87ce:	4b0a      	ldr	r3, [pc, #40]	; (87f8 <nwkSecurityProcessMic+0xa4>)
    87d0:	4798      	blx	r3
		return vmic == tmic;
    87d2:	68ba      	ldr	r2, [r7, #8]
    87d4:	687b      	ldr	r3, [r7, #4]
    87d6:	1ad3      	subs	r3, r2, r3
    87d8:	425a      	negs	r2, r3
    87da:	4153      	adcs	r3, r2
    87dc:	b2db      	uxtb	r3, r3
	}
}
    87de:	0018      	movs	r0, r3
    87e0:	46bd      	mov	sp, r7
    87e2:	b004      	add	sp, #16
    87e4:	bd80      	pop	{r7, pc}
    87e6:	46c0      	nop			; (mov r8, r8)
    87e8:	20000d88 	.word	0x20000d88
    87ec:	20000d8d 	.word	0x20000d8d
    87f0:	20000d90 	.word	0x20000d90
    87f4:	20000d8e 	.word	0x20000d8e
    87f8:	0000c209 	.word	0x0000c209

000087fc <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    87fc:	b590      	push	{r4, r7, lr}
    87fe:	b083      	sub	sp, #12
    8800:	af00      	add	r7, sp, #0
	NwkFrame_t *frame = NULL;
    8802:	2300      	movs	r3, #0
    8804:	607b      	str	r3, [r7, #4]

	if (0 == nwkSecurityActiveFrames) {
    8806:	4b2e      	ldr	r3, [pc, #184]	; (88c0 <nwkSecurityTaskHandler+0xc4>)
    8808:	781b      	ldrb	r3, [r3, #0]
    880a:	2b00      	cmp	r3, #0
    880c:	d051      	beq.n	88b2 <nwkSecurityTaskHandler+0xb6>
		return;
	}

	if (nwkSecurityActiveFrame) {
    880e:	4b2d      	ldr	r3, [pc, #180]	; (88c4 <nwkSecurityTaskHandler+0xc8>)
    8810:	681b      	ldr	r3, [r3, #0]
    8812:	2b00      	cmp	r3, #0
    8814:	d043      	beq.n	889e <nwkSecurityTaskHandler+0xa2>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    8816:	4b2b      	ldr	r3, [pc, #172]	; (88c4 <nwkSecurityTaskHandler+0xc8>)
    8818:	681b      	ldr	r3, [r3, #0]
    881a:	781b      	ldrb	r3, [r3, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    881c:	2b34      	cmp	r3, #52	; 0x34
    881e:	d120      	bne.n	8862 <nwkSecurityTaskHandler+0x66>
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();
    8820:	1cfc      	adds	r4, r7, #3
    8822:	4b29      	ldr	r3, [pc, #164]	; (88c8 <nwkSecurityTaskHandler+0xcc>)
    8824:	4798      	blx	r3
    8826:	0003      	movs	r3, r0
    8828:	7023      	strb	r3, [r4, #0]

			if (nwkSecurityEncrypt) {
    882a:	4b28      	ldr	r3, [pc, #160]	; (88cc <nwkSecurityTaskHandler+0xd0>)
    882c:	781b      	ldrb	r3, [r3, #0]
    882e:	2b00      	cmp	r3, #0
    8830:	d005      	beq.n	883e <nwkSecurityTaskHandler+0x42>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    8832:	4b24      	ldr	r3, [pc, #144]	; (88c4 <nwkSecurityTaskHandler+0xc8>)
    8834:	681b      	ldr	r3, [r3, #0]
    8836:	0018      	movs	r0, r3
    8838:	4b25      	ldr	r3, [pc, #148]	; (88d0 <nwkSecurityTaskHandler+0xd4>)
    883a:	4798      	blx	r3
    883c:	e007      	b.n	884e <nwkSecurityTaskHandler+0x52>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    883e:	4b21      	ldr	r3, [pc, #132]	; (88c4 <nwkSecurityTaskHandler+0xc8>)
    8840:	681a      	ldr	r2, [r3, #0]
    8842:	1cfb      	adds	r3, r7, #3
    8844:	781b      	ldrb	r3, [r3, #0]
    8846:	0019      	movs	r1, r3
    8848:	0010      	movs	r0, r2
    884a:	4b22      	ldr	r3, [pc, #136]	; (88d4 <nwkSecurityTaskHandler+0xd8>)
    884c:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    884e:	4b1d      	ldr	r3, [pc, #116]	; (88c4 <nwkSecurityTaskHandler+0xc8>)
    8850:	2200      	movs	r2, #0
    8852:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    8854:	4b1a      	ldr	r3, [pc, #104]	; (88c0 <nwkSecurityTaskHandler+0xc4>)
    8856:	781b      	ldrb	r3, [r3, #0]
    8858:	3b01      	subs	r3, #1
    885a:	b2da      	uxtb	r2, r3
    885c:	4b18      	ldr	r3, [pc, #96]	; (88c0 <nwkSecurityTaskHandler+0xc4>)
    885e:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
					(uint32_t *)nwkIb.key);
		}

		return;
    8860:	e029      	b.n	88b6 <nwkSecurityTaskHandler+0xba>
			}

			nwkSecurityActiveFrame = NULL;
			--nwkSecurityActiveFrames;
		} else if (NWK_SECURITY_STATE_PROCESS ==
				nwkSecurityActiveFrame->state) {
    8862:	4b18      	ldr	r3, [pc, #96]	; (88c4 <nwkSecurityTaskHandler+0xc8>)
    8864:	681b      	ldr	r3, [r3, #0]
    8866:	781b      	ldrb	r3, [r3, #0]
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
			--nwkSecurityActiveFrames;
		} else if (NWK_SECURITY_STATE_PROCESS ==
    8868:	2b32      	cmp	r3, #50	; 0x32
    886a:	d124      	bne.n	88b6 <nwkSecurityTaskHandler+0xba>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    886c:	4b15      	ldr	r3, [pc, #84]	; (88c4 <nwkSecurityTaskHandler+0xc8>)
    886e:	681b      	ldr	r3, [r3, #0]
    8870:	2233      	movs	r2, #51	; 0x33
    8872:	701a      	strb	r2, [r3, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    8874:	4a18      	ldr	r2, [pc, #96]	; (88d8 <nwkSecurityTaskHandler+0xdc>)
    8876:	4b19      	ldr	r3, [pc, #100]	; (88dc <nwkSecurityTaskHandler+0xe0>)
    8878:	0011      	movs	r1, r2
    887a:	0018      	movs	r0, r3
    887c:	4b18      	ldr	r3, [pc, #96]	; (88e0 <nwkSecurityTaskHandler+0xe4>)
    887e:	4798      	blx	r3
					(uint32_t *)nwkIb.key);
		}

		return;
    8880:	e019      	b.n	88b6 <nwkSecurityTaskHandler+0xba>
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    8882:	687b      	ldr	r3, [r7, #4]
    8884:	781b      	ldrb	r3, [r3, #0]
    8886:	2b30      	cmp	r3, #48	; 0x30
    8888:	d003      	beq.n	8892 <nwkSecurityTaskHandler+0x96>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
    888a:	687b      	ldr	r3, [r7, #4]
    888c:	781b      	ldrb	r3, [r3, #0]

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    888e:	2b31      	cmp	r3, #49	; 0x31
    8890:	d105      	bne.n	889e <nwkSecurityTaskHandler+0xa2>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    8892:	4b0c      	ldr	r3, [pc, #48]	; (88c4 <nwkSecurityTaskHandler+0xc8>)
    8894:	687a      	ldr	r2, [r7, #4]
    8896:	601a      	str	r2, [r3, #0]
			nwkSecurityStart();
    8898:	4b12      	ldr	r3, [pc, #72]	; (88e4 <nwkSecurityTaskHandler+0xe8>)
    889a:	4798      	blx	r3
			return;
    889c:	e00c      	b.n	88b8 <nwkSecurityTaskHandler+0xbc>
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    889e:	687b      	ldr	r3, [r7, #4]
    88a0:	0018      	movs	r0, r3
    88a2:	4b11      	ldr	r3, [pc, #68]	; (88e8 <nwkSecurityTaskHandler+0xec>)
    88a4:	4798      	blx	r3
    88a6:	0003      	movs	r3, r0
    88a8:	607b      	str	r3, [r7, #4]
    88aa:	687b      	ldr	r3, [r7, #4]
    88ac:	2b00      	cmp	r3, #0
    88ae:	d1e8      	bne.n	8882 <nwkSecurityTaskHandler+0x86>
    88b0:	e002      	b.n	88b8 <nwkSecurityTaskHandler+0xbc>
void nwkSecurityTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
		return;
    88b2:	46c0      	nop			; (mov r8, r8)
    88b4:	e000      	b.n	88b8 <nwkSecurityTaskHandler+0xbc>
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
					(uint32_t *)nwkIb.key);
		}

		return;
    88b6:	46c0      	nop			; (mov r8, r8)
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    88b8:	46bd      	mov	sp, r7
    88ba:	b003      	add	sp, #12
    88bc:	bd90      	pop	{r4, r7, pc}
    88be:	46c0      	nop			; (mov r8, r8)
    88c0:	20000d84 	.word	0x20000d84
    88c4:	20000d88 	.word	0x20000d88
    88c8:	00008755 	.word	0x00008755
    88cc:	20000d8e 	.word	0x20000d8e
    88d0:	00008dfd 	.word	0x00008dfd
    88d4:	00007cb9 	.word	0x00007cb9
    88d8:	20001094 	.word	0x20001094
    88dc:	20000d90 	.word	0x20000d90
    88e0:	000059b9 	.word	0x000059b9
    88e4:	00008545 	.word	0x00008545
    88e8:	00006981 	.word	0x00006981

000088ec <nwkTxInit>:

/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
    88ec:	b580      	push	{r7, lr}
    88ee:	af00      	add	r7, sp, #0
	nwkTxPhyActiveFrame = NULL;
    88f0:	4b0b      	ldr	r3, [pc, #44]	; (8920 <nwkTxInit+0x34>)
    88f2:	2200      	movs	r2, #0
    88f4:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    88f6:	4b0b      	ldr	r3, [pc, #44]	; (8924 <nwkTxInit+0x38>)
    88f8:	2232      	movs	r2, #50	; 0x32
    88fa:	609a      	str	r2, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    88fc:	4b09      	ldr	r3, [pc, #36]	; (8924 <nwkTxInit+0x38>)
    88fe:	2200      	movs	r2, #0
    8900:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    8902:	4b08      	ldr	r3, [pc, #32]	; (8924 <nwkTxInit+0x38>)
    8904:	4a08      	ldr	r2, [pc, #32]	; (8928 <nwkTxInit+0x3c>)
    8906:	611a      	str	r2, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    8908:	4b08      	ldr	r3, [pc, #32]	; (892c <nwkTxInit+0x40>)
    890a:	220a      	movs	r2, #10
    890c:	609a      	str	r2, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    890e:	4b07      	ldr	r3, [pc, #28]	; (892c <nwkTxInit+0x40>)
    8910:	2200      	movs	r2, #0
    8912:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    8914:	4b05      	ldr	r3, [pc, #20]	; (892c <nwkTxInit+0x40>)
    8916:	4a06      	ldr	r2, [pc, #24]	; (8930 <nwkTxInit+0x44>)
    8918:	611a      	str	r2, [r3, #16]
}
    891a:	46c0      	nop			; (mov r8, r8)
    891c:	46bd      	mov	sp, r7
    891e:	bd80      	pop	{r7, pc}
    8920:	20000da0 	.word	0x20000da0
    8924:	20000da4 	.word	0x20000da4
    8928:	00008d0d 	.word	0x00008d0d
    892c:	20000db8 	.word	0x20000db8
    8930:	00008e15 	.word	0x00008e15

00008934 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    8934:	b5b0      	push	{r4, r5, r7, lr}
    8936:	b084      	sub	sp, #16
    8938:	af00      	add	r7, sp, #0
    893a:	6078      	str	r0, [r7, #4]
	NwkFrameHeader_t *header = &frame->header;
    893c:	687b      	ldr	r3, [r7, #4]
    893e:	3302      	adds	r3, #2
    8940:	60fb      	str	r3, [r7, #12]

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    8942:	687b      	ldr	r3, [r7, #4]
    8944:	2288      	movs	r2, #136	; 0x88
    8946:	5c9b      	ldrb	r3, [r3, r2]
    8948:	001a      	movs	r2, r3
    894a:	2302      	movs	r3, #2
    894c:	4013      	ands	r3, r2
    894e:	d003      	beq.n	8958 <nwkTxFrame+0x24>
		frame->state = NWK_TX_STATE_DELAY;
    8950:	687b      	ldr	r3, [r7, #4]
    8952:	2212      	movs	r2, #18
    8954:	701a      	strb	r2, [r3, #0]
    8956:	e00d      	b.n	8974 <nwkTxFrame+0x40>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    8958:	68fb      	ldr	r3, [r7, #12]
    895a:	7a5b      	ldrb	r3, [r3, #9]
    895c:	2202      	movs	r2, #2
    895e:	4013      	ands	r3, r2
    8960:	b2db      	uxtb	r3, r3
    8962:	2b00      	cmp	r3, #0
    8964:	d003      	beq.n	896e <nwkTxFrame+0x3a>
			frame->state = NWK_TX_STATE_ENCRYPT;
    8966:	687b      	ldr	r3, [r7, #4]
    8968:	2210      	movs	r2, #16
    896a:	701a      	strb	r2, [r3, #0]
    896c:	e002      	b.n	8974 <nwkTxFrame+0x40>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    896e:	687b      	ldr	r3, [r7, #4]
    8970:	2212      	movs	r2, #18
    8972:	701a      	strb	r2, [r3, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    8974:	687b      	ldr	r3, [r7, #4]
    8976:	2285      	movs	r2, #133	; 0x85
    8978:	2100      	movs	r1, #0
    897a:	5499      	strb	r1, [r3, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    897c:	687b      	ldr	r3, [r7, #4]
    897e:	2288      	movs	r2, #136	; 0x88
    8980:	5c9b      	ldrb	r3, [r3, r2]
    8982:	001a      	movs	r2, r3
    8984:	2301      	movs	r3, #1
    8986:	4013      	ands	r3, r2
    8988:	d00c      	beq.n	89a4 <nwkTxFrame+0x70>
		header->macDstPanId = NWK_BROADCAST_PANID;
    898a:	68fb      	ldr	r3, [r7, #12]
    898c:	3303      	adds	r3, #3
    898e:	781a      	ldrb	r2, [r3, #0]
    8990:	2101      	movs	r1, #1
    8992:	4249      	negs	r1, r1
    8994:	430a      	orrs	r2, r1
    8996:	701a      	strb	r2, [r3, #0]
    8998:	785a      	ldrb	r2, [r3, #1]
    899a:	2101      	movs	r1, #1
    899c:	4249      	negs	r1, r1
    899e:	430a      	orrs	r2, r1
    89a0:	705a      	strb	r2, [r3, #1]
    89a2:	e016      	b.n	89d2 <nwkTxFrame+0x9e>
	} else {
		header->macDstPanId = nwkIb.panId;
    89a4:	4b5e      	ldr	r3, [pc, #376]	; (8b20 <nwkTxFrame+0x1ec>)
    89a6:	885a      	ldrh	r2, [r3, #2]
    89a8:	68fb      	ldr	r3, [r7, #12]
    89aa:	3303      	adds	r3, #3
    89ac:	21ff      	movs	r1, #255	; 0xff
    89ae:	4011      	ands	r1, r2
    89b0:	000c      	movs	r4, r1
    89b2:	7819      	ldrb	r1, [r3, #0]
    89b4:	2000      	movs	r0, #0
    89b6:	4001      	ands	r1, r0
    89b8:	1c08      	adds	r0, r1, #0
    89ba:	1c21      	adds	r1, r4, #0
    89bc:	4301      	orrs	r1, r0
    89be:	7019      	strb	r1, [r3, #0]
    89c0:	0a12      	lsrs	r2, r2, #8
    89c2:	b290      	uxth	r0, r2
    89c4:	785a      	ldrb	r2, [r3, #1]
    89c6:	2100      	movs	r1, #0
    89c8:	400a      	ands	r2, r1
    89ca:	1c11      	adds	r1, r2, #0
    89cc:	1c02      	adds	r2, r0, #0
    89ce:	430a      	orrs	r2, r1
    89d0:	705a      	strb	r2, [r3, #1]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    89d2:	687b      	ldr	r3, [r7, #4]
    89d4:	2288      	movs	r2, #136	; 0x88
    89d6:	5c9b      	ldrb	r3, [r3, r2]
    89d8:	001a      	movs	r2, r3
    89da:	2304      	movs	r3, #4
    89dc:	4013      	ands	r3, r2
    89de:	d10b      	bne.n	89f8 <nwkTxFrame+0xc4>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
    89e0:	687b      	ldr	r3, [r7, #4]
    89e2:	2288      	movs	r2, #136	; 0x88
    89e4:	5c9b      	ldrb	r3, [r3, r2]
    89e6:	001a      	movs	r2, r3
    89e8:	2301      	movs	r3, #1
    89ea:	4013      	ands	r3, r2
	} else {
		header->macDstPanId = nwkIb.panId;
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    89ec:	d104      	bne.n	89f8 <nwkTxFrame+0xc4>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    89ee:	687b      	ldr	r3, [r7, #4]
    89f0:	0018      	movs	r0, r3
    89f2:	4b4c      	ldr	r3, [pc, #304]	; (8b24 <nwkTxFrame+0x1f0>)
    89f4:	4798      	blx	r3
    89f6:	e01a      	b.n	8a2e <nwkTxFrame+0xfa>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    89f8:	68fb      	ldr	r3, [r7, #12]
    89fa:	7b5a      	ldrb	r2, [r3, #13]
    89fc:	7b9b      	ldrb	r3, [r3, #14]
    89fe:	021b      	lsls	r3, r3, #8
    8a00:	4313      	orrs	r3, r2
    8a02:	b29a      	uxth	r2, r3
    8a04:	68fb      	ldr	r3, [r7, #12]
    8a06:	3305      	adds	r3, #5
    8a08:	21ff      	movs	r1, #255	; 0xff
    8a0a:	4011      	ands	r1, r2
    8a0c:	000c      	movs	r4, r1
    8a0e:	7819      	ldrb	r1, [r3, #0]
    8a10:	2000      	movs	r0, #0
    8a12:	4001      	ands	r1, r0
    8a14:	1c08      	adds	r0, r1, #0
    8a16:	1c21      	adds	r1, r4, #0
    8a18:	4301      	orrs	r1, r0
    8a1a:	7019      	strb	r1, [r3, #0]
    8a1c:	0a12      	lsrs	r2, r2, #8
    8a1e:	b290      	uxth	r0, r2
    8a20:	785a      	ldrb	r2, [r3, #1]
    8a22:	2100      	movs	r1, #0
    8a24:	400a      	ands	r2, r1
    8a26:	1c11      	adds	r1, r2, #0
    8a28:	1c02      	adds	r2, r0, #0
    8a2a:	430a      	orrs	r2, r1
    8a2c:	705a      	strb	r2, [r3, #1]

	header->macSrcAddr = nwkIb.addr;
    8a2e:	4b3c      	ldr	r3, [pc, #240]	; (8b20 <nwkTxFrame+0x1ec>)
    8a30:	881a      	ldrh	r2, [r3, #0]
    8a32:	68fb      	ldr	r3, [r7, #12]
    8a34:	3307      	adds	r3, #7
    8a36:	21ff      	movs	r1, #255	; 0xff
    8a38:	4011      	ands	r1, r2
    8a3a:	000c      	movs	r4, r1
    8a3c:	7819      	ldrb	r1, [r3, #0]
    8a3e:	2000      	movs	r0, #0
    8a40:	4001      	ands	r1, r0
    8a42:	1c08      	adds	r0, r1, #0
    8a44:	1c21      	adds	r1, r4, #0
    8a46:	4301      	orrs	r1, r0
    8a48:	7019      	strb	r1, [r3, #0]
    8a4a:	0a12      	lsrs	r2, r2, #8
    8a4c:	b290      	uxth	r0, r2
    8a4e:	785a      	ldrb	r2, [r3, #1]
    8a50:	2100      	movs	r1, #0
    8a52:	400a      	ands	r2, r1
    8a54:	1c11      	adds	r1, r2, #0
    8a56:	1c02      	adds	r2, r0, #0
    8a58:	430a      	orrs	r2, r1
    8a5a:	705a      	strb	r2, [r3, #1]
	header->macSeq = ++nwkIb.macSeqNum;
    8a5c:	4b30      	ldr	r3, [pc, #192]	; (8b20 <nwkTxFrame+0x1ec>)
    8a5e:	795b      	ldrb	r3, [r3, #5]
    8a60:	3301      	adds	r3, #1
    8a62:	b2da      	uxtb	r2, r3
    8a64:	4b2e      	ldr	r3, [pc, #184]	; (8b20 <nwkTxFrame+0x1ec>)
    8a66:	715a      	strb	r2, [r3, #5]
    8a68:	4b2d      	ldr	r3, [pc, #180]	; (8b20 <nwkTxFrame+0x1ec>)
    8a6a:	795a      	ldrb	r2, [r3, #5]
    8a6c:	68fb      	ldr	r3, [r7, #12]
    8a6e:	709a      	strb	r2, [r3, #2]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    8a70:	68fb      	ldr	r3, [r7, #12]
    8a72:	795a      	ldrb	r2, [r3, #5]
    8a74:	799b      	ldrb	r3, [r3, #6]
    8a76:	021b      	lsls	r3, r3, #8
    8a78:	4313      	orrs	r3, r2
    8a7a:	b29b      	uxth	r3, r3
    8a7c:	4a2a      	ldr	r2, [pc, #168]	; (8b28 <nwkTxFrame+0x1f4>)
    8a7e:	4293      	cmp	r3, r2
    8a80:	d12f      	bne.n	8ae2 <nwkTxFrame+0x1ae>
		header->macFcf = 0x8841;
    8a82:	68fb      	ldr	r3, [r7, #12]
    8a84:	781a      	ldrb	r2, [r3, #0]
    8a86:	2100      	movs	r1, #0
    8a88:	400a      	ands	r2, r1
    8a8a:	1c11      	adds	r1, r2, #0
    8a8c:	2241      	movs	r2, #65	; 0x41
    8a8e:	430a      	orrs	r2, r1
    8a90:	701a      	strb	r2, [r3, #0]
    8a92:	785a      	ldrb	r2, [r3, #1]
    8a94:	2100      	movs	r1, #0
    8a96:	400a      	ands	r2, r1
    8a98:	1c11      	adds	r1, r2, #0
    8a9a:	2278      	movs	r2, #120	; 0x78
    8a9c:	4252      	negs	r2, r2
    8a9e:	430a      	orrs	r2, r1
    8aa0:	705a      	strb	r2, [r3, #1]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    8aa2:	4b22      	ldr	r3, [pc, #136]	; (8b2c <nwkTxFrame+0x1f8>)
    8aa4:	4798      	blx	r3
    8aa6:	0003      	movs	r3, r0
    8aa8:	b29b      	uxth	r3, r3
    8aaa:	2207      	movs	r2, #7
    8aac:	4013      	ands	r3, r2
    8aae:	b29b      	uxth	r3, r3
    8ab0:	3301      	adds	r3, #1
    8ab2:	b299      	uxth	r1, r3
    8ab4:	687b      	ldr	r3, [r7, #4]
    8ab6:	2286      	movs	r2, #134	; 0x86
    8ab8:	20ff      	movs	r0, #255	; 0xff
    8aba:	4008      	ands	r0, r1
    8abc:	0005      	movs	r5, r0
    8abe:	5c98      	ldrb	r0, [r3, r2]
    8ac0:	2400      	movs	r4, #0
    8ac2:	4020      	ands	r0, r4
    8ac4:	1c04      	adds	r4, r0, #0
    8ac6:	1c28      	adds	r0, r5, #0
    8ac8:	4320      	orrs	r0, r4
    8aca:	5498      	strb	r0, [r3, r2]
    8acc:	0a09      	lsrs	r1, r1, #8
    8ace:	b288      	uxth	r0, r1
    8ad0:	189b      	adds	r3, r3, r2
    8ad2:	785a      	ldrb	r2, [r3, #1]
    8ad4:	2100      	movs	r1, #0
    8ad6:	400a      	ands	r2, r1
    8ad8:	1c11      	adds	r1, r2, #0
    8ada:	1c02      	adds	r2, r0, #0
    8adc:	430a      	orrs	r2, r1
    8ade:	705a      	strb	r2, [r3, #1]
	} else {
		header->macFcf = 0x8861;
		frame->tx.timeout = 0;
	}
}
    8ae0:	e01a      	b.n	8b18 <nwkTxFrame+0x1e4>

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
		header->macFcf = 0x8841;
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
	} else {
		header->macFcf = 0x8861;
    8ae2:	68fb      	ldr	r3, [r7, #12]
    8ae4:	781a      	ldrb	r2, [r3, #0]
    8ae6:	2100      	movs	r1, #0
    8ae8:	400a      	ands	r2, r1
    8aea:	1c11      	adds	r1, r2, #0
    8aec:	2261      	movs	r2, #97	; 0x61
    8aee:	430a      	orrs	r2, r1
    8af0:	701a      	strb	r2, [r3, #0]
    8af2:	785a      	ldrb	r2, [r3, #1]
    8af4:	2100      	movs	r1, #0
    8af6:	400a      	ands	r2, r1
    8af8:	1c11      	adds	r1, r2, #0
    8afa:	2278      	movs	r2, #120	; 0x78
    8afc:	4252      	negs	r2, r2
    8afe:	430a      	orrs	r2, r1
    8b00:	705a      	strb	r2, [r3, #1]
		frame->tx.timeout = 0;
    8b02:	687b      	ldr	r3, [r7, #4]
    8b04:	2286      	movs	r2, #134	; 0x86
    8b06:	5c99      	ldrb	r1, [r3, r2]
    8b08:	2000      	movs	r0, #0
    8b0a:	4001      	ands	r1, r0
    8b0c:	5499      	strb	r1, [r3, r2]
    8b0e:	189b      	adds	r3, r3, r2
    8b10:	785a      	ldrb	r2, [r3, #1]
    8b12:	2100      	movs	r1, #0
    8b14:	400a      	ands	r2, r1
    8b16:	705a      	strb	r2, [r3, #1]
	}
}
    8b18:	46c0      	nop			; (mov r8, r8)
    8b1a:	46bd      	mov	sp, r7
    8b1c:	b004      	add	sp, #16
    8b1e:	bdb0      	pop	{r4, r5, r7, pc}
    8b20:	2000104c 	.word	0x2000104c
    8b24:	00006df1 	.word	0x00006df1
    8b28:	0000ffff 	.word	0x0000ffff
    8b2c:	0000c289 	.word	0x0000c289

00008b30 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    8b30:	b5b0      	push	{r4, r5, r7, lr}
    8b32:	b084      	sub	sp, #16
    8b34:	af00      	add	r7, sp, #0
    8b36:	6078      	str	r0, [r7, #4]
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    8b38:	4b56      	ldr	r3, [pc, #344]	; (8c94 <nwkTxBroadcastFrame+0x164>)
    8b3a:	4798      	blx	r3
    8b3c:	0003      	movs	r3, r0
    8b3e:	60fb      	str	r3, [r7, #12]
    8b40:	68fb      	ldr	r3, [r7, #12]
    8b42:	2b00      	cmp	r3, #0
    8b44:	d100      	bne.n	8b48 <nwkTxBroadcastFrame+0x18>
    8b46:	e0a0      	b.n	8c8a <nwkTxBroadcastFrame+0x15a>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    8b48:	68fb      	ldr	r3, [r7, #12]
    8b4a:	2212      	movs	r2, #18
    8b4c:	701a      	strb	r2, [r3, #0]
	newFrame->size = frame->size;
    8b4e:	687b      	ldr	r3, [r7, #4]
    8b50:	785a      	ldrb	r2, [r3, #1]
    8b52:	68fb      	ldr	r3, [r7, #12]
    8b54:	705a      	strb	r2, [r3, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    8b56:	68fb      	ldr	r3, [r7, #12]
    8b58:	2285      	movs	r2, #133	; 0x85
    8b5a:	2100      	movs	r1, #0
    8b5c:	5499      	strb	r1, [r3, r2]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    8b5e:	4b4e      	ldr	r3, [pc, #312]	; (8c98 <nwkTxBroadcastFrame+0x168>)
    8b60:	4798      	blx	r3
    8b62:	0003      	movs	r3, r0
    8b64:	b29b      	uxth	r3, r3
    8b66:	2207      	movs	r2, #7
    8b68:	4013      	ands	r3, r2
    8b6a:	b29b      	uxth	r3, r3
    8b6c:	3301      	adds	r3, #1
    8b6e:	b299      	uxth	r1, r3
    8b70:	68fb      	ldr	r3, [r7, #12]
    8b72:	2286      	movs	r2, #134	; 0x86
    8b74:	20ff      	movs	r0, #255	; 0xff
    8b76:	4008      	ands	r0, r1
    8b78:	0005      	movs	r5, r0
    8b7a:	5c98      	ldrb	r0, [r3, r2]
    8b7c:	2400      	movs	r4, #0
    8b7e:	4020      	ands	r0, r4
    8b80:	1c04      	adds	r4, r0, #0
    8b82:	1c28      	adds	r0, r5, #0
    8b84:	4320      	orrs	r0, r4
    8b86:	5498      	strb	r0, [r3, r2]
    8b88:	0a09      	lsrs	r1, r1, #8
    8b8a:	b288      	uxth	r0, r1
    8b8c:	189b      	adds	r3, r3, r2
    8b8e:	785a      	ldrb	r2, [r3, #1]
    8b90:	2100      	movs	r1, #0
    8b92:	400a      	ands	r2, r1
    8b94:	1c11      	adds	r1, r2, #0
    8b96:	1c02      	adds	r2, r0, #0
    8b98:	430a      	orrs	r2, r1
    8b9a:	705a      	strb	r2, [r3, #1]
	newFrame->tx.confirm = NULL;
    8b9c:	68fb      	ldr	r3, [r7, #12]
    8b9e:	2289      	movs	r2, #137	; 0x89
    8ba0:	5c99      	ldrb	r1, [r3, r2]
    8ba2:	2000      	movs	r0, #0
    8ba4:	4001      	ands	r1, r0
    8ba6:	5499      	strb	r1, [r3, r2]
    8ba8:	1899      	adds	r1, r3, r2
    8baa:	7848      	ldrb	r0, [r1, #1]
    8bac:	2400      	movs	r4, #0
    8bae:	4020      	ands	r0, r4
    8bb0:	7048      	strb	r0, [r1, #1]
    8bb2:	1899      	adds	r1, r3, r2
    8bb4:	7888      	ldrb	r0, [r1, #2]
    8bb6:	2400      	movs	r4, #0
    8bb8:	4020      	ands	r0, r4
    8bba:	7088      	strb	r0, [r1, #2]
    8bbc:	189b      	adds	r3, r3, r2
    8bbe:	78da      	ldrb	r2, [r3, #3]
    8bc0:	2100      	movs	r1, #0
    8bc2:	400a      	ands	r2, r1
    8bc4:	70da      	strb	r2, [r3, #3]
	memcpy(newFrame->data, frame->data, frame->size);
    8bc6:	68fb      	ldr	r3, [r7, #12]
    8bc8:	1c98      	adds	r0, r3, #2
    8bca:	687b      	ldr	r3, [r7, #4]
    8bcc:	1c99      	adds	r1, r3, #2
    8bce:	687b      	ldr	r3, [r7, #4]
    8bd0:	785b      	ldrb	r3, [r3, #1]
    8bd2:	001a      	movs	r2, r3
    8bd4:	4b31      	ldr	r3, [pc, #196]	; (8c9c <nwkTxBroadcastFrame+0x16c>)
    8bd6:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    8bd8:	68fb      	ldr	r3, [r7, #12]
    8bda:	789a      	ldrb	r2, [r3, #2]
    8bdc:	2100      	movs	r1, #0
    8bde:	400a      	ands	r2, r1
    8be0:	1c11      	adds	r1, r2, #0
    8be2:	2241      	movs	r2, #65	; 0x41
    8be4:	430a      	orrs	r2, r1
    8be6:	709a      	strb	r2, [r3, #2]
    8be8:	78da      	ldrb	r2, [r3, #3]
    8bea:	2100      	movs	r1, #0
    8bec:	400a      	ands	r2, r1
    8bee:	1c11      	adds	r1, r2, #0
    8bf0:	2278      	movs	r2, #120	; 0x78
    8bf2:	4252      	negs	r2, r2
    8bf4:	430a      	orrs	r2, r1
    8bf6:	70da      	strb	r2, [r3, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    8bf8:	68fb      	ldr	r3, [r7, #12]
    8bfa:	3307      	adds	r3, #7
    8bfc:	781a      	ldrb	r2, [r3, #0]
    8bfe:	2101      	movs	r1, #1
    8c00:	4249      	negs	r1, r1
    8c02:	430a      	orrs	r2, r1
    8c04:	701a      	strb	r2, [r3, #0]
    8c06:	785a      	ldrb	r2, [r3, #1]
    8c08:	2101      	movs	r1, #1
    8c0a:	4249      	negs	r1, r1
    8c0c:	430a      	orrs	r2, r1
    8c0e:	705a      	strb	r2, [r3, #1]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    8c10:	687b      	ldr	r3, [r7, #4]
    8c12:	795a      	ldrb	r2, [r3, #5]
    8c14:	799b      	ldrb	r3, [r3, #6]
    8c16:	021b      	lsls	r3, r3, #8
    8c18:	4313      	orrs	r3, r2
    8c1a:	b29a      	uxth	r2, r3
    8c1c:	68fb      	ldr	r3, [r7, #12]
    8c1e:	3305      	adds	r3, #5
    8c20:	21ff      	movs	r1, #255	; 0xff
    8c22:	4011      	ands	r1, r2
    8c24:	000c      	movs	r4, r1
    8c26:	7819      	ldrb	r1, [r3, #0]
    8c28:	2000      	movs	r0, #0
    8c2a:	4001      	ands	r1, r0
    8c2c:	1c08      	adds	r0, r1, #0
    8c2e:	1c21      	adds	r1, r4, #0
    8c30:	4301      	orrs	r1, r0
    8c32:	7019      	strb	r1, [r3, #0]
    8c34:	0a12      	lsrs	r2, r2, #8
    8c36:	b290      	uxth	r0, r2
    8c38:	785a      	ldrb	r2, [r3, #1]
    8c3a:	2100      	movs	r1, #0
    8c3c:	400a      	ands	r2, r1
    8c3e:	1c11      	adds	r1, r2, #0
    8c40:	1c02      	adds	r2, r0, #0
    8c42:	430a      	orrs	r2, r1
    8c44:	705a      	strb	r2, [r3, #1]
	newFrame->header.macSrcAddr = nwkIb.addr;
    8c46:	4b16      	ldr	r3, [pc, #88]	; (8ca0 <nwkTxBroadcastFrame+0x170>)
    8c48:	881a      	ldrh	r2, [r3, #0]
    8c4a:	68fb      	ldr	r3, [r7, #12]
    8c4c:	3309      	adds	r3, #9
    8c4e:	21ff      	movs	r1, #255	; 0xff
    8c50:	4011      	ands	r1, r2
    8c52:	000c      	movs	r4, r1
    8c54:	7819      	ldrb	r1, [r3, #0]
    8c56:	2000      	movs	r0, #0
    8c58:	4001      	ands	r1, r0
    8c5a:	1c08      	adds	r0, r1, #0
    8c5c:	1c21      	adds	r1, r4, #0
    8c5e:	4301      	orrs	r1, r0
    8c60:	7019      	strb	r1, [r3, #0]
    8c62:	0a12      	lsrs	r2, r2, #8
    8c64:	b290      	uxth	r0, r2
    8c66:	785a      	ldrb	r2, [r3, #1]
    8c68:	2100      	movs	r1, #0
    8c6a:	400a      	ands	r2, r1
    8c6c:	1c11      	adds	r1, r2, #0
    8c6e:	1c02      	adds	r2, r0, #0
    8c70:	430a      	orrs	r2, r1
    8c72:	705a      	strb	r2, [r3, #1]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    8c74:	4b0a      	ldr	r3, [pc, #40]	; (8ca0 <nwkTxBroadcastFrame+0x170>)
    8c76:	795b      	ldrb	r3, [r3, #5]
    8c78:	3301      	adds	r3, #1
    8c7a:	b2da      	uxtb	r2, r3
    8c7c:	4b08      	ldr	r3, [pc, #32]	; (8ca0 <nwkTxBroadcastFrame+0x170>)
    8c7e:	715a      	strb	r2, [r3, #5]
    8c80:	4b07      	ldr	r3, [pc, #28]	; (8ca0 <nwkTxBroadcastFrame+0x170>)
    8c82:	795a      	ldrb	r2, [r3, #5]
    8c84:	68fb      	ldr	r3, [r7, #12]
    8c86:	711a      	strb	r2, [r3, #4]
    8c88:	e000      	b.n	8c8c <nwkTxBroadcastFrame+0x15c>
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
		return;
    8c8a:	46c0      	nop			; (mov r8, r8)
	newFrame->header.macFcf = 0x8841;
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
	newFrame->header.macDstPanId = frame->header.macDstPanId;
	newFrame->header.macSrcAddr = nwkIb.addr;
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
}
    8c8c:	46bd      	mov	sp, r7
    8c8e:	b004      	add	sp, #16
    8c90:	bdb0      	pop	{r4, r5, r7, pc}
    8c92:	46c0      	nop			; (mov r8, r8)
    8c94:	00006855 	.word	0x00006855
    8c98:	0000c289 	.word	0x0000c289
    8c9c:	0000c209 	.word	0x0000c209
    8ca0:	2000104c 	.word	0x2000104c

00008ca4 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    8ca4:	b580      	push	{r7, lr}
    8ca6:	b084      	sub	sp, #16
    8ca8:	af00      	add	r7, sp, #0
    8caa:	6078      	str	r0, [r7, #4]
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	689b      	ldr	r3, [r3, #8]
    8cb0:	60bb      	str	r3, [r7, #8]
	NwkFrame_t *frame = NULL;
    8cb2:	2300      	movs	r3, #0
    8cb4:	60fb      	str	r3, [r7, #12]

	if (sizeof(NwkCommandAck_t) != ind->size) {
    8cb6:	687b      	ldr	r3, [r7, #4]
    8cb8:	7b1b      	ldrb	r3, [r3, #12]
    8cba:	2b03      	cmp	r3, #3
    8cbc:	d015      	beq.n	8cea <nwkTxAckReceived+0x46>
		return false;
    8cbe:	2300      	movs	r3, #0
    8cc0:	e01d      	b.n	8cfe <nwkTxAckReceived+0x5a>
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    8cc2:	68fb      	ldr	r3, [r7, #12]
    8cc4:	781b      	ldrb	r3, [r3, #0]
    8cc6:	2b16      	cmp	r3, #22
    8cc8:	d10f      	bne.n	8cea <nwkTxAckReceived+0x46>
				frame->header.nwkSeq == command->seq) {
    8cca:	68fb      	ldr	r3, [r7, #12]
    8ccc:	7b1a      	ldrb	r2, [r3, #12]
    8cce:	68bb      	ldr	r3, [r7, #8]
    8cd0:	785b      	ldrb	r3, [r3, #1]
	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    8cd2:	429a      	cmp	r2, r3
    8cd4:	d109      	bne.n	8cea <nwkTxAckReceived+0x46>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    8cd6:	68fb      	ldr	r3, [r7, #12]
    8cd8:	2217      	movs	r2, #23
    8cda:	701a      	strb	r2, [r3, #0]
			frame->tx.control = command->control;
    8cdc:	68bb      	ldr	r3, [r7, #8]
    8cde:	7899      	ldrb	r1, [r3, #2]
    8ce0:	68fb      	ldr	r3, [r7, #12]
    8ce2:	2288      	movs	r2, #136	; 0x88
    8ce4:	5499      	strb	r1, [r3, r2]
			return true;
    8ce6:	2301      	movs	r3, #1
    8ce8:	e009      	b.n	8cfe <nwkTxAckReceived+0x5a>

	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    8cea:	68fb      	ldr	r3, [r7, #12]
    8cec:	0018      	movs	r0, r3
    8cee:	4b06      	ldr	r3, [pc, #24]	; (8d08 <nwkTxAckReceived+0x64>)
    8cf0:	4798      	blx	r3
    8cf2:	0003      	movs	r3, r0
    8cf4:	60fb      	str	r3, [r7, #12]
    8cf6:	68fb      	ldr	r3, [r7, #12]
    8cf8:	2b00      	cmp	r3, #0
    8cfa:	d1e2      	bne.n	8cc2 <nwkTxAckReceived+0x1e>
			frame->tx.control = command->control;
			return true;
		}
	}

	return false;
    8cfc:	2300      	movs	r3, #0
}
    8cfe:	0018      	movs	r0, r3
    8d00:	46bd      	mov	sp, r7
    8d02:	b004      	add	sp, #16
    8d04:	bd80      	pop	{r7, pc}
    8d06:	46c0      	nop			; (mov r8, r8)
    8d08:	00006981 	.word	0x00006981

00008d0c <nwkTxAckWaitTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    8d0c:	b5b0      	push	{r4, r5, r7, lr}
    8d0e:	b084      	sub	sp, #16
    8d10:	af00      	add	r7, sp, #0
    8d12:	6078      	str	r0, [r7, #4]
	NwkFrame_t *frame = NULL;
    8d14:	2300      	movs	r3, #0
    8d16:	60fb      	str	r3, [r7, #12]
	bool restart = false;
    8d18:	230b      	movs	r3, #11
    8d1a:	18fb      	adds	r3, r7, r3
    8d1c:	2200      	movs	r2, #0
    8d1e:	701a      	strb	r2, [r3, #0]

	while (NULL != (frame = nwkFrameNext(frame))) {
    8d20:	e03c      	b.n	8d9c <nwkTxAckWaitTimerHandler+0x90>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    8d22:	68fb      	ldr	r3, [r7, #12]
    8d24:	781b      	ldrb	r3, [r3, #0]
    8d26:	220b      	movs	r2, #11
    8d28:	18ba      	adds	r2, r7, r2
    8d2a:	210b      	movs	r1, #11
    8d2c:	1879      	adds	r1, r7, r1
    8d2e:	7809      	ldrb	r1, [r1, #0]
    8d30:	7011      	strb	r1, [r2, #0]
    8d32:	2b16      	cmp	r3, #22
    8d34:	d132      	bne.n	8d9c <nwkTxAckWaitTimerHandler+0x90>
			restart = true;
    8d36:	230b      	movs	r3, #11
    8d38:	18fb      	adds	r3, r7, r3
    8d3a:	2201      	movs	r2, #1
    8d3c:	701a      	strb	r2, [r3, #0]

			if (0 == --frame->tx.timeout) {
    8d3e:	68fb      	ldr	r3, [r7, #12]
    8d40:	2286      	movs	r2, #134	; 0x86
    8d42:	5c9a      	ldrb	r2, [r3, r2]
    8d44:	2187      	movs	r1, #135	; 0x87
    8d46:	5c5b      	ldrb	r3, [r3, r1]
    8d48:	021b      	lsls	r3, r3, #8
    8d4a:	4313      	orrs	r3, r2
    8d4c:	b29b      	uxth	r3, r3
    8d4e:	3b01      	subs	r3, #1
    8d50:	b299      	uxth	r1, r3
    8d52:	68fb      	ldr	r3, [r7, #12]
    8d54:	2286      	movs	r2, #134	; 0x86
    8d56:	20ff      	movs	r0, #255	; 0xff
    8d58:	4008      	ands	r0, r1
    8d5a:	0005      	movs	r5, r0
    8d5c:	5c98      	ldrb	r0, [r3, r2]
    8d5e:	2400      	movs	r4, #0
    8d60:	4020      	ands	r0, r4
    8d62:	1c04      	adds	r4, r0, #0
    8d64:	1c28      	adds	r0, r5, #0
    8d66:	4320      	orrs	r0, r4
    8d68:	5498      	strb	r0, [r3, r2]
    8d6a:	0a09      	lsrs	r1, r1, #8
    8d6c:	b288      	uxth	r0, r1
    8d6e:	189b      	adds	r3, r3, r2
    8d70:	785a      	ldrb	r2, [r3, #1]
    8d72:	2100      	movs	r1, #0
    8d74:	400a      	ands	r2, r1
    8d76:	1c11      	adds	r1, r2, #0
    8d78:	1c02      	adds	r2, r0, #0
    8d7a:	430a      	orrs	r2, r1
    8d7c:	705a      	strb	r2, [r3, #1]
    8d7e:	68fb      	ldr	r3, [r7, #12]
    8d80:	2286      	movs	r2, #134	; 0x86
    8d82:	5c9a      	ldrb	r2, [r3, r2]
    8d84:	2187      	movs	r1, #135	; 0x87
    8d86:	5c5b      	ldrb	r3, [r3, r1]
    8d88:	021b      	lsls	r3, r3, #8
    8d8a:	4313      	orrs	r3, r2
    8d8c:	b29b      	uxth	r3, r3
    8d8e:	2b00      	cmp	r3, #0
    8d90:	d104      	bne.n	8d9c <nwkTxAckWaitTimerHandler+0x90>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    8d92:	68fb      	ldr	r3, [r7, #12]
    8d94:	2110      	movs	r1, #16
    8d96:	0018      	movs	r0, r3
    8d98:	4b0b      	ldr	r3, [pc, #44]	; (8dc8 <nwkTxAckWaitTimerHandler+0xbc>)
    8d9a:	4798      	blx	r3
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    8d9c:	68fb      	ldr	r3, [r7, #12]
    8d9e:	0018      	movs	r0, r3
    8da0:	4b0a      	ldr	r3, [pc, #40]	; (8dcc <nwkTxAckWaitTimerHandler+0xc0>)
    8da2:	4798      	blx	r3
    8da4:	0003      	movs	r3, r0
    8da6:	60fb      	str	r3, [r7, #12]
    8da8:	68fb      	ldr	r3, [r7, #12]
    8daa:	2b00      	cmp	r3, #0
    8dac:	d1b9      	bne.n	8d22 <nwkTxAckWaitTimerHandler+0x16>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    8dae:	230b      	movs	r3, #11
    8db0:	18fb      	adds	r3, r7, r3
    8db2:	781b      	ldrb	r3, [r3, #0]
    8db4:	2b00      	cmp	r3, #0
    8db6:	d003      	beq.n	8dc0 <nwkTxAckWaitTimerHandler+0xb4>
		SYS_TimerStart(timer);
    8db8:	687b      	ldr	r3, [r7, #4]
    8dba:	0018      	movs	r0, r3
    8dbc:	4b04      	ldr	r3, [pc, #16]	; (8dd0 <nwkTxAckWaitTimerHandler+0xc4>)
    8dbe:	4798      	blx	r3
	}
}
    8dc0:	46c0      	nop			; (mov r8, r8)
    8dc2:	46bd      	mov	sp, r7
    8dc4:	b004      	add	sp, #16
    8dc6:	bdb0      	pop	{r4, r5, r7, pc}
    8dc8:	00008dd5 	.word	0x00008dd5
    8dcc:	00006981 	.word	0x00006981
    8dd0:	00005aa5 	.word	0x00005aa5

00008dd4 <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
    8dd4:	b580      	push	{r7, lr}
    8dd6:	b082      	sub	sp, #8
    8dd8:	af00      	add	r7, sp, #0
    8dda:	6078      	str	r0, [r7, #4]
    8ddc:	000a      	movs	r2, r1
    8dde:	1cfb      	adds	r3, r7, #3
    8de0:	701a      	strb	r2, [r3, #0]
	frame->state = NWK_TX_STATE_CONFIRM;
    8de2:	687b      	ldr	r3, [r7, #4]
    8de4:	2217      	movs	r2, #23
    8de6:	701a      	strb	r2, [r3, #0]
	frame->tx.status = status;
    8de8:	687b      	ldr	r3, [r7, #4]
    8dea:	1cfa      	adds	r2, r7, #3
    8dec:	2185      	movs	r1, #133	; 0x85
    8dee:	7812      	ldrb	r2, [r2, #0]
    8df0:	545a      	strb	r2, [r3, r1]
}
    8df2:	46c0      	nop			; (mov r8, r8)
    8df4:	46bd      	mov	sp, r7
    8df6:	b002      	add	sp, #8
    8df8:	bd80      	pop	{r7, pc}
    8dfa:	46c0      	nop			; (mov r8, r8)

00008dfc <nwkTxEncryptConf>:
#ifdef NWK_ENABLE_SECURITY

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
    8dfc:	b580      	push	{r7, lr}
    8dfe:	b082      	sub	sp, #8
    8e00:	af00      	add	r7, sp, #0
    8e02:	6078      	str	r0, [r7, #4]
	frame->state = NWK_TX_STATE_DELAY;
    8e04:	687b      	ldr	r3, [r7, #4]
    8e06:	2212      	movs	r2, #18
    8e08:	701a      	strb	r2, [r3, #0]
}
    8e0a:	46c0      	nop			; (mov r8, r8)
    8e0c:	46bd      	mov	sp, r7
    8e0e:	b002      	add	sp, #8
    8e10:	bd80      	pop	{r7, pc}
    8e12:	46c0      	nop			; (mov r8, r8)

00008e14 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    8e14:	b5b0      	push	{r4, r5, r7, lr}
    8e16:	b084      	sub	sp, #16
    8e18:	af00      	add	r7, sp, #0
    8e1a:	6078      	str	r0, [r7, #4]
	NwkFrame_t *frame = NULL;
    8e1c:	2300      	movs	r3, #0
    8e1e:	60fb      	str	r3, [r7, #12]
	bool restart = false;
    8e20:	230b      	movs	r3, #11
    8e22:	18fb      	adds	r3, r7, r3
    8e24:	2200      	movs	r2, #0
    8e26:	701a      	strb	r2, [r3, #0]

	while (NULL != (frame = nwkFrameNext(frame))) {
    8e28:	e03a      	b.n	8ea0 <nwkTxDelayTimerHandler+0x8c>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    8e2a:	68fb      	ldr	r3, [r7, #12]
    8e2c:	781b      	ldrb	r3, [r3, #0]
    8e2e:	220b      	movs	r2, #11
    8e30:	18ba      	adds	r2, r7, r2
    8e32:	210b      	movs	r1, #11
    8e34:	1879      	adds	r1, r7, r1
    8e36:	7809      	ldrb	r1, [r1, #0]
    8e38:	7011      	strb	r1, [r2, #0]
    8e3a:	2b11      	cmp	r3, #17
    8e3c:	d130      	bne.n	8ea0 <nwkTxDelayTimerHandler+0x8c>
			restart = true;
    8e3e:	230b      	movs	r3, #11
    8e40:	18fb      	adds	r3, r7, r3
    8e42:	2201      	movs	r2, #1
    8e44:	701a      	strb	r2, [r3, #0]

			if (0 == --frame->tx.timeout) {
    8e46:	68fb      	ldr	r3, [r7, #12]
    8e48:	2286      	movs	r2, #134	; 0x86
    8e4a:	5c9a      	ldrb	r2, [r3, r2]
    8e4c:	2187      	movs	r1, #135	; 0x87
    8e4e:	5c5b      	ldrb	r3, [r3, r1]
    8e50:	021b      	lsls	r3, r3, #8
    8e52:	4313      	orrs	r3, r2
    8e54:	b29b      	uxth	r3, r3
    8e56:	3b01      	subs	r3, #1
    8e58:	b299      	uxth	r1, r3
    8e5a:	68fb      	ldr	r3, [r7, #12]
    8e5c:	2286      	movs	r2, #134	; 0x86
    8e5e:	20ff      	movs	r0, #255	; 0xff
    8e60:	4008      	ands	r0, r1
    8e62:	0005      	movs	r5, r0
    8e64:	5c98      	ldrb	r0, [r3, r2]
    8e66:	2400      	movs	r4, #0
    8e68:	4020      	ands	r0, r4
    8e6a:	1c04      	adds	r4, r0, #0
    8e6c:	1c28      	adds	r0, r5, #0
    8e6e:	4320      	orrs	r0, r4
    8e70:	5498      	strb	r0, [r3, r2]
    8e72:	0a09      	lsrs	r1, r1, #8
    8e74:	b288      	uxth	r0, r1
    8e76:	189b      	adds	r3, r3, r2
    8e78:	785a      	ldrb	r2, [r3, #1]
    8e7a:	2100      	movs	r1, #0
    8e7c:	400a      	ands	r2, r1
    8e7e:	1c11      	adds	r1, r2, #0
    8e80:	1c02      	adds	r2, r0, #0
    8e82:	430a      	orrs	r2, r1
    8e84:	705a      	strb	r2, [r3, #1]
    8e86:	68fb      	ldr	r3, [r7, #12]
    8e88:	2286      	movs	r2, #134	; 0x86
    8e8a:	5c9a      	ldrb	r2, [r3, r2]
    8e8c:	2187      	movs	r1, #135	; 0x87
    8e8e:	5c5b      	ldrb	r3, [r3, r1]
    8e90:	021b      	lsls	r3, r3, #8
    8e92:	4313      	orrs	r3, r2
    8e94:	b29b      	uxth	r3, r3
    8e96:	2b00      	cmp	r3, #0
    8e98:	d102      	bne.n	8ea0 <nwkTxDelayTimerHandler+0x8c>
				frame->state = NWK_TX_STATE_SEND;
    8e9a:	68fb      	ldr	r3, [r7, #12]
    8e9c:	2213      	movs	r2, #19
    8e9e:	701a      	strb	r2, [r3, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    8ea0:	68fb      	ldr	r3, [r7, #12]
    8ea2:	0018      	movs	r0, r3
    8ea4:	4b09      	ldr	r3, [pc, #36]	; (8ecc <nwkTxDelayTimerHandler+0xb8>)
    8ea6:	4798      	blx	r3
    8ea8:	0003      	movs	r3, r0
    8eaa:	60fb      	str	r3, [r7, #12]
    8eac:	68fb      	ldr	r3, [r7, #12]
    8eae:	2b00      	cmp	r3, #0
    8eb0:	d1bb      	bne.n	8e2a <nwkTxDelayTimerHandler+0x16>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    8eb2:	230b      	movs	r3, #11
    8eb4:	18fb      	adds	r3, r7, r3
    8eb6:	781b      	ldrb	r3, [r3, #0]
    8eb8:	2b00      	cmp	r3, #0
    8eba:	d003      	beq.n	8ec4 <nwkTxDelayTimerHandler+0xb0>
		SYS_TimerStart(timer);
    8ebc:	687b      	ldr	r3, [r7, #4]
    8ebe:	0018      	movs	r0, r3
    8ec0:	4b03      	ldr	r3, [pc, #12]	; (8ed0 <nwkTxDelayTimerHandler+0xbc>)
    8ec2:	4798      	blx	r3
	}
}
    8ec4:	46c0      	nop			; (mov r8, r8)
    8ec6:	46bd      	mov	sp, r7
    8ec8:	b004      	add	sp, #16
    8eca:	bdb0      	pop	{r4, r5, r7, pc}
    8ecc:	00006981 	.word	0x00006981
    8ed0:	00005aa5 	.word	0x00005aa5

00008ed4 <nwkTxConvertPhyStatus>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
    8ed4:	b580      	push	{r7, lr}
    8ed6:	b082      	sub	sp, #8
    8ed8:	af00      	add	r7, sp, #0
    8eda:	0002      	movs	r2, r0
    8edc:	1dfb      	adds	r3, r7, #7
    8ede:	701a      	strb	r2, [r3, #0]
	switch (status) {
    8ee0:	1dfb      	adds	r3, r7, #7
    8ee2:	781b      	ldrb	r3, [r3, #0]
    8ee4:	2b01      	cmp	r3, #1
    8ee6:	d005      	beq.n	8ef4 <nwkTxConvertPhyStatus+0x20>
    8ee8:	2b02      	cmp	r3, #2
    8eea:	d005      	beq.n	8ef8 <nwkTxConvertPhyStatus+0x24>
    8eec:	2b00      	cmp	r3, #0
    8eee:	d105      	bne.n	8efc <nwkTxConvertPhyStatus+0x28>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    8ef0:	2300      	movs	r3, #0
    8ef2:	e004      	b.n	8efe <nwkTxConvertPhyStatus+0x2a>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    8ef4:	2320      	movs	r3, #32
    8ef6:	e002      	b.n	8efe <nwkTxConvertPhyStatus+0x2a>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    8ef8:	2321      	movs	r3, #33	; 0x21
    8efa:	e000      	b.n	8efe <nwkTxConvertPhyStatus+0x2a>

	default:
		return NWK_ERROR_STATUS;
    8efc:	2301      	movs	r3, #1
	}
}
    8efe:	0018      	movs	r0, r3
    8f00:	46bd      	mov	sp, r7
    8f02:	b002      	add	sp, #8
    8f04:	bd80      	pop	{r7, pc}
    8f06:	46c0      	nop			; (mov r8, r8)

00008f08 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    8f08:	b590      	push	{r4, r7, lr}
    8f0a:	b083      	sub	sp, #12
    8f0c:	af00      	add	r7, sp, #0
    8f0e:	0002      	movs	r2, r0
    8f10:	1dfb      	adds	r3, r7, #7
    8f12:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    8f14:	4b0e      	ldr	r3, [pc, #56]	; (8f50 <PHY_DataConf+0x48>)
    8f16:	681c      	ldr	r4, [r3, #0]
    8f18:	1dfb      	adds	r3, r7, #7
    8f1a:	781b      	ldrb	r3, [r3, #0]
    8f1c:	0018      	movs	r0, r3
    8f1e:	4b0d      	ldr	r3, [pc, #52]	; (8f54 <PHY_DataConf+0x4c>)
    8f20:	4798      	blx	r3
    8f22:	0003      	movs	r3, r0
    8f24:	001a      	movs	r2, r3
    8f26:	2385      	movs	r3, #133	; 0x85
    8f28:	54e2      	strb	r2, [r4, r3]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    8f2a:	4b09      	ldr	r3, [pc, #36]	; (8f50 <PHY_DataConf+0x48>)
    8f2c:	681b      	ldr	r3, [r3, #0]
    8f2e:	2215      	movs	r2, #21
    8f30:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    8f32:	4b07      	ldr	r3, [pc, #28]	; (8f50 <PHY_DataConf+0x48>)
    8f34:	2200      	movs	r2, #0
    8f36:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    8f38:	4b07      	ldr	r3, [pc, #28]	; (8f58 <PHY_DataConf+0x50>)
    8f3a:	2258      	movs	r2, #88	; 0x58
    8f3c:	5a9b      	ldrh	r3, [r3, r2]
    8f3e:	3b01      	subs	r3, #1
    8f40:	b299      	uxth	r1, r3
    8f42:	4b05      	ldr	r3, [pc, #20]	; (8f58 <PHY_DataConf+0x50>)
    8f44:	2258      	movs	r2, #88	; 0x58
    8f46:	5299      	strh	r1, [r3, r2]
}
    8f48:	46c0      	nop			; (mov r8, r8)
    8f4a:	46bd      	mov	sp, r7
    8f4c:	b003      	add	sp, #12
    8f4e:	bd90      	pop	{r4, r7, pc}
    8f50:	20000da0 	.word	0x20000da0
    8f54:	00008ed5 	.word	0x00008ed5
    8f58:	2000104c 	.word	0x2000104c

00008f5c <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    8f5c:	b580      	push	{r7, lr}
    8f5e:	b082      	sub	sp, #8
    8f60:	af00      	add	r7, sp, #0
	NwkFrame_t *frame = NULL;
    8f62:	2300      	movs	r3, #0
    8f64:	607b      	str	r3, [r7, #4]

	while (NULL != (frame = nwkFrameNext(frame))) {
    8f66:	e0a0      	b.n	90aa <nwkTxTaskHandler+0x14e>
		switch (frame->state) {
    8f68:	687b      	ldr	r3, [r7, #4]
    8f6a:	781b      	ldrb	r3, [r3, #0]
    8f6c:	3b10      	subs	r3, #16
    8f6e:	2b07      	cmp	r3, #7
    8f70:	d900      	bls.n	8f74 <nwkTxTaskHandler+0x18>
    8f72:	e099      	b.n	90a8 <nwkTxTaskHandler+0x14c>
    8f74:	009a      	lsls	r2, r3, #2
    8f76:	4b54      	ldr	r3, [pc, #336]	; (90c8 <nwkTxTaskHandler+0x16c>)
    8f78:	18d3      	adds	r3, r2, r3
    8f7a:	681b      	ldr	r3, [r3, #0]
    8f7c:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    8f7e:	687b      	ldr	r3, [r7, #4]
    8f80:	2101      	movs	r1, #1
    8f82:	0018      	movs	r0, r3
    8f84:	4b51      	ldr	r3, [pc, #324]	; (90cc <nwkTxTaskHandler+0x170>)
    8f86:	4798      	blx	r3
		}
		break;
    8f88:	e08f      	b.n	90aa <nwkTxTaskHandler+0x14e>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    8f8a:	687b      	ldr	r3, [r7, #4]
    8f8c:	2286      	movs	r2, #134	; 0x86
    8f8e:	5c9a      	ldrb	r2, [r3, r2]
    8f90:	2187      	movs	r1, #135	; 0x87
    8f92:	5c5b      	ldrb	r3, [r3, r1]
    8f94:	021b      	lsls	r3, r3, #8
    8f96:	4313      	orrs	r3, r2
    8f98:	b29b      	uxth	r3, r3
    8f9a:	2b00      	cmp	r3, #0
    8f9c:	d007      	beq.n	8fae <nwkTxTaskHandler+0x52>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    8f9e:	687b      	ldr	r3, [r7, #4]
    8fa0:	2211      	movs	r2, #17
    8fa2:	701a      	strb	r2, [r3, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    8fa4:	4b4a      	ldr	r3, [pc, #296]	; (90d0 <nwkTxTaskHandler+0x174>)
    8fa6:	0018      	movs	r0, r3
    8fa8:	4b4a      	ldr	r3, [pc, #296]	; (90d4 <nwkTxTaskHandler+0x178>)
    8faa:	4798      	blx	r3
    8fac:	e07d      	b.n	90aa <nwkTxTaskHandler+0x14e>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    8fae:	687b      	ldr	r3, [r7, #4]
    8fb0:	2213      	movs	r2, #19
    8fb2:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
    8fb4:	e079      	b.n	90aa <nwkTxTaskHandler+0x14e>

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    8fb6:	4b48      	ldr	r3, [pc, #288]	; (90d8 <nwkTxTaskHandler+0x17c>)
    8fb8:	681b      	ldr	r3, [r3, #0]
    8fba:	2b00      	cmp	r3, #0
    8fbc:	d000      	beq.n	8fc0 <nwkTxTaskHandler+0x64>
    8fbe:	e074      	b.n	90aa <nwkTxTaskHandler+0x14e>
				nwkTxPhyActiveFrame = frame;
    8fc0:	4b45      	ldr	r3, [pc, #276]	; (90d8 <nwkTxTaskHandler+0x17c>)
    8fc2:	687a      	ldr	r2, [r7, #4]
    8fc4:	601a      	str	r2, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    8fc6:	687b      	ldr	r3, [r7, #4]
    8fc8:	2214      	movs	r2, #20
    8fca:	701a      	strb	r2, [r3, #0]
				PHY_DataReq(&(frame->size));
    8fcc:	687b      	ldr	r3, [r7, #4]
    8fce:	3301      	adds	r3, #1
    8fd0:	0018      	movs	r0, r3
    8fd2:	4b42      	ldr	r3, [pc, #264]	; (90dc <nwkTxTaskHandler+0x180>)
    8fd4:	4798      	blx	r3
				nwkIb.lock++;
    8fd6:	4b42      	ldr	r3, [pc, #264]	; (90e0 <nwkTxTaskHandler+0x184>)
    8fd8:	2258      	movs	r2, #88	; 0x58
    8fda:	5a9b      	ldrh	r3, [r3, r2]
    8fdc:	3301      	adds	r3, #1
    8fde:	b299      	uxth	r1, r3
    8fe0:	4b3f      	ldr	r3, [pc, #252]	; (90e0 <nwkTxTaskHandler+0x184>)
    8fe2:	2258      	movs	r2, #88	; 0x58
    8fe4:	5299      	strh	r1, [r3, r2]
			}
		}
		break;
    8fe6:	e060      	b.n	90aa <nwkTxTaskHandler+0x14e>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    8fe8:	687b      	ldr	r3, [r7, #4]
    8fea:	2285      	movs	r2, #133	; 0x85
    8fec:	5c9b      	ldrb	r3, [r3, r2]
    8fee:	2b00      	cmp	r3, #0
    8ff0:	d12a      	bne.n	9048 <nwkTxTaskHandler+0xec>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    8ff2:	687b      	ldr	r3, [r7, #4]
    8ff4:	7b5a      	ldrb	r2, [r3, #13]
    8ff6:	7b9b      	ldrb	r3, [r3, #14]
    8ff8:	021b      	lsls	r3, r3, #8
    8ffa:	4313      	orrs	r3, r2
    8ffc:	b29a      	uxth	r2, r3
    8ffe:	4b38      	ldr	r3, [pc, #224]	; (90e0 <nwkTxTaskHandler+0x184>)
    9000:	881b      	ldrh	r3, [r3, #0]
    9002:	429a      	cmp	r2, r3
    9004:	d11c      	bne.n	9040 <nwkTxTaskHandler+0xe4>
    9006:	687b      	ldr	r3, [r7, #4]
    9008:	7adb      	ldrb	r3, [r3, #11]
    900a:	2201      	movs	r2, #1
    900c:	4013      	ands	r3, r2
    900e:	b2db      	uxtb	r3, r3
    9010:	2b00      	cmp	r3, #0
    9012:	d015      	beq.n	9040 <nwkTxTaskHandler+0xe4>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    9014:	687b      	ldr	r3, [r7, #4]
    9016:	2216      	movs	r2, #22
    9018:	701a      	strb	r2, [r3, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    901a:	687b      	ldr	r3, [r7, #4]
    901c:	2286      	movs	r2, #134	; 0x86
    901e:	5c99      	ldrb	r1, [r3, r2]
    9020:	2000      	movs	r0, #0
    9022:	4001      	ands	r1, r0
    9024:	1c08      	adds	r0, r1, #0
    9026:	2115      	movs	r1, #21
    9028:	4301      	orrs	r1, r0
    902a:	5499      	strb	r1, [r3, r2]
    902c:	189b      	adds	r3, r3, r2
    902e:	785a      	ldrb	r2, [r3, #1]
    9030:	2100      	movs	r1, #0
    9032:	400a      	ands	r2, r1
    9034:	705a      	strb	r2, [r3, #1]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    9036:	4b2b      	ldr	r3, [pc, #172]	; (90e4 <nwkTxTaskHandler+0x188>)
    9038:	0018      	movs	r0, r3
    903a:	4b26      	ldr	r3, [pc, #152]	; (90d4 <nwkTxTaskHandler+0x178>)
    903c:	4798      	blx	r3
    903e:	e006      	b.n	904e <nwkTxTaskHandler+0xf2>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    9040:	687b      	ldr	r3, [r7, #4]
    9042:	2217      	movs	r2, #23
    9044:	701a      	strb	r2, [r3, #0]
    9046:	e030      	b.n	90aa <nwkTxTaskHandler+0x14e>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    9048:	687b      	ldr	r3, [r7, #4]
    904a:	2217      	movs	r2, #23
    904c:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
    904e:	e02c      	b.n	90aa <nwkTxTaskHandler+0x14e>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    9050:	687b      	ldr	r3, [r7, #4]
    9052:	0018      	movs	r0, r3
    9054:	4b24      	ldr	r3, [pc, #144]	; (90e8 <nwkTxTaskHandler+0x18c>)
    9056:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    9058:	687b      	ldr	r3, [r7, #4]
    905a:	2289      	movs	r2, #137	; 0x89
    905c:	5c9a      	ldrb	r2, [r3, r2]
    905e:	218a      	movs	r1, #138	; 0x8a
    9060:	5c59      	ldrb	r1, [r3, r1]
    9062:	0209      	lsls	r1, r1, #8
    9064:	430a      	orrs	r2, r1
    9066:	218b      	movs	r1, #139	; 0x8b
    9068:	5c59      	ldrb	r1, [r3, r1]
    906a:	0409      	lsls	r1, r1, #16
    906c:	430a      	orrs	r2, r1
    906e:	218c      	movs	r1, #140	; 0x8c
    9070:	5c5b      	ldrb	r3, [r3, r1]
    9072:	061b      	lsls	r3, r3, #24
    9074:	4313      	orrs	r3, r2
    9076:	d104      	bne.n	9082 <nwkTxTaskHandler+0x126>
				nwkFrameFree(frame);
    9078:	687b      	ldr	r3, [r7, #4]
    907a:	0018      	movs	r0, r3
    907c:	4b1b      	ldr	r3, [pc, #108]	; (90ec <nwkTxTaskHandler+0x190>)
    907e:	4798      	blx	r3
    9080:	e013      	b.n	90aa <nwkTxTaskHandler+0x14e>
			} else {
				frame->tx.confirm(frame);
    9082:	687b      	ldr	r3, [r7, #4]
    9084:	2289      	movs	r2, #137	; 0x89
    9086:	5c9a      	ldrb	r2, [r3, r2]
    9088:	218a      	movs	r1, #138	; 0x8a
    908a:	5c59      	ldrb	r1, [r3, r1]
    908c:	0209      	lsls	r1, r1, #8
    908e:	430a      	orrs	r2, r1
    9090:	218b      	movs	r1, #139	; 0x8b
    9092:	5c59      	ldrb	r1, [r3, r1]
    9094:	0409      	lsls	r1, r1, #16
    9096:	430a      	orrs	r2, r1
    9098:	218c      	movs	r1, #140	; 0x8c
    909a:	5c5b      	ldrb	r3, [r3, r1]
    909c:	061b      	lsls	r3, r3, #24
    909e:	4313      	orrs	r3, r2
    90a0:	687a      	ldr	r2, [r7, #4]
    90a2:	0010      	movs	r0, r2
    90a4:	4798      	blx	r3
			}
		}
		break;
    90a6:	e000      	b.n	90aa <nwkTxTaskHandler+0x14e>

		default:
			break;
    90a8:	46c0      	nop			; (mov r8, r8)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    90aa:	687b      	ldr	r3, [r7, #4]
    90ac:	0018      	movs	r0, r3
    90ae:	4b10      	ldr	r3, [pc, #64]	; (90f0 <nwkTxTaskHandler+0x194>)
    90b0:	4798      	blx	r3
    90b2:	0003      	movs	r3, r0
    90b4:	607b      	str	r3, [r7, #4]
    90b6:	687b      	ldr	r3, [r7, #4]
    90b8:	2b00      	cmp	r3, #0
    90ba:	d000      	beq.n	90be <nwkTxTaskHandler+0x162>
    90bc:	e754      	b.n	8f68 <nwkTxTaskHandler+0xc>

		default:
			break;
		}
	}
}
    90be:	46c0      	nop			; (mov r8, r8)
    90c0:	46bd      	mov	sp, r7
    90c2:	b002      	add	sp, #8
    90c4:	bd80      	pop	{r7, pc}
    90c6:	46c0      	nop			; (mov r8, r8)
    90c8:	0000cb20 	.word	0x0000cb20
    90cc:	00008509 	.word	0x00008509
    90d0:	20000db8 	.word	0x20000db8
    90d4:	00005aa5 	.word	0x00005aa5
    90d8:	20000da0 	.word	0x20000da0
    90dc:	00005f69 	.word	0x00005f69
    90e0:	2000104c 	.word	0x2000104c
    90e4:	20000da4 	.word	0x20000da4
    90e8:	00006d11 	.word	0x00006d11
    90ec:	00006955 	.word	0x00006955
    90f0:	00006981 	.word	0x00006981

000090f4 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    90f4:	b580      	push	{r7, lr}
    90f6:	b084      	sub	sp, #16
    90f8:	af00      	add	r7, sp, #0
    90fa:	60f8      	str	r0, [r7, #12]
    90fc:	60b9      	str	r1, [r7, #8]
    90fe:	1dfb      	adds	r3, r7, #7
    9100:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    9102:	1dfb      	adds	r3, r7, #7
    9104:	781a      	ldrb	r2, [r3, #0]
    9106:	68fb      	ldr	r3, [r7, #12]
    9108:	3202      	adds	r2, #2
    910a:	0092      	lsls	r2, r2, #2
    910c:	68b9      	ldr	r1, [r7, #8]
    910e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    9110:	1dfb      	adds	r3, r7, #7
    9112:	781b      	ldrb	r3, [r3, #0]
    9114:	2b02      	cmp	r3, #2
    9116:	d107      	bne.n	9128 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    9118:	68fb      	ldr	r3, [r7, #12]
    911a:	7e1b      	ldrb	r3, [r3, #24]
    911c:	2210      	movs	r2, #16
    911e:	4313      	orrs	r3, r2
    9120:	b2da      	uxtb	r2, r3
    9122:	68fb      	ldr	r3, [r7, #12]
    9124:	761a      	strb	r2, [r3, #24]
    9126:	e019      	b.n	915c <tc_register_callback+0x68>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    9128:	1dfb      	adds	r3, r7, #7
    912a:	781b      	ldrb	r3, [r3, #0]
    912c:	2b03      	cmp	r3, #3
    912e:	d107      	bne.n	9140 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    9130:	68fb      	ldr	r3, [r7, #12]
    9132:	7e1b      	ldrb	r3, [r3, #24]
    9134:	2220      	movs	r2, #32
    9136:	4313      	orrs	r3, r2
    9138:	b2da      	uxtb	r2, r3
    913a:	68fb      	ldr	r3, [r7, #12]
    913c:	761a      	strb	r2, [r3, #24]
    913e:	e00d      	b.n	915c <tc_register_callback+0x68>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    9140:	68fb      	ldr	r3, [r7, #12]
    9142:	7e1b      	ldrb	r3, [r3, #24]
    9144:	b25a      	sxtb	r2, r3
    9146:	1dfb      	adds	r3, r7, #7
    9148:	781b      	ldrb	r3, [r3, #0]
    914a:	2101      	movs	r1, #1
    914c:	4099      	lsls	r1, r3
    914e:	000b      	movs	r3, r1
    9150:	b25b      	sxtb	r3, r3
    9152:	4313      	orrs	r3, r2
    9154:	b25b      	sxtb	r3, r3
    9156:	b2da      	uxtb	r2, r3
    9158:	68fb      	ldr	r3, [r7, #12]
    915a:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    915c:	2300      	movs	r3, #0
}
    915e:	0018      	movs	r0, r3
    9160:	46bd      	mov	sp, r7
    9162:	b004      	add	sp, #16
    9164:	bd80      	pop	{r7, pc}
    9166:	46c0      	nop			; (mov r8, r8)

00009168 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    9168:	b580      	push	{r7, lr}
    916a:	af00      	add	r7, sp, #0
    916c:	2000      	movs	r0, #0
    916e:	4b02      	ldr	r3, [pc, #8]	; (9178 <TC3_Handler+0x10>)
    9170:	4798      	blx	r3
    9172:	46c0      	nop			; (mov r8, r8)
    9174:	46bd      	mov	sp, r7
    9176:	bd80      	pop	{r7, pc}
    9178:	000091a5 	.word	0x000091a5

0000917c <TC4_Handler>:
    917c:	b580      	push	{r7, lr}
    917e:	af00      	add	r7, sp, #0
    9180:	2001      	movs	r0, #1
    9182:	4b02      	ldr	r3, [pc, #8]	; (918c <TC4_Handler+0x10>)
    9184:	4798      	blx	r3
    9186:	46c0      	nop			; (mov r8, r8)
    9188:	46bd      	mov	sp, r7
    918a:	bd80      	pop	{r7, pc}
    918c:	000091a5 	.word	0x000091a5

00009190 <TC5_Handler>:
    9190:	b580      	push	{r7, lr}
    9192:	af00      	add	r7, sp, #0
    9194:	2002      	movs	r0, #2
    9196:	4b02      	ldr	r3, [pc, #8]	; (91a0 <TC5_Handler+0x10>)
    9198:	4798      	blx	r3
    919a:	46c0      	nop			; (mov r8, r8)
    919c:	46bd      	mov	sp, r7
    919e:	bd80      	pop	{r7, pc}
    91a0:	000091a5 	.word	0x000091a5

000091a4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    91a4:	b580      	push	{r7, lr}
    91a6:	b084      	sub	sp, #16
    91a8:	af00      	add	r7, sp, #0
    91aa:	0002      	movs	r2, r0
    91ac:	1dfb      	adds	r3, r7, #7
    91ae:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    91b0:	1dfb      	adds	r3, r7, #7
    91b2:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    91b4:	4b28      	ldr	r3, [pc, #160]	; (9258 <_tc_interrupt_handler+0xb4>)
    91b6:	0092      	lsls	r2, r2, #2
    91b8:	58d3      	ldr	r3, [r2, r3]
    91ba:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    91bc:	68fb      	ldr	r3, [r7, #12]
    91be:	681b      	ldr	r3, [r3, #0]
    91c0:	7b9b      	ldrb	r3, [r3, #14]
    91c2:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    91c4:	68fa      	ldr	r2, [r7, #12]
    91c6:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    91c8:	4013      	ands	r3, r2
    91ca:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    91cc:	68fb      	ldr	r3, [r7, #12]
    91ce:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    91d0:	230b      	movs	r3, #11
    91d2:	18fb      	adds	r3, r7, r3
    91d4:	400a      	ands	r2, r1
    91d6:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    91d8:	230b      	movs	r3, #11
    91da:	18fb      	adds	r3, r7, r3
    91dc:	781b      	ldrb	r3, [r3, #0]
    91de:	2201      	movs	r2, #1
    91e0:	4013      	ands	r3, r2
    91e2:	d008      	beq.n	91f6 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    91e4:	68fb      	ldr	r3, [r7, #12]
    91e6:	689b      	ldr	r3, [r3, #8]
    91e8:	68fa      	ldr	r2, [r7, #12]
    91ea:	0010      	movs	r0, r2
    91ec:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    91ee:	68fb      	ldr	r3, [r7, #12]
    91f0:	681b      	ldr	r3, [r3, #0]
    91f2:	2201      	movs	r2, #1
    91f4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    91f6:	230b      	movs	r3, #11
    91f8:	18fb      	adds	r3, r7, r3
    91fa:	781b      	ldrb	r3, [r3, #0]
    91fc:	2202      	movs	r2, #2
    91fe:	4013      	ands	r3, r2
    9200:	d008      	beq.n	9214 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    9202:	68fb      	ldr	r3, [r7, #12]
    9204:	68db      	ldr	r3, [r3, #12]
    9206:	68fa      	ldr	r2, [r7, #12]
    9208:	0010      	movs	r0, r2
    920a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    920c:	68fb      	ldr	r3, [r7, #12]
    920e:	681b      	ldr	r3, [r3, #0]
    9210:	2202      	movs	r2, #2
    9212:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    9214:	230b      	movs	r3, #11
    9216:	18fb      	adds	r3, r7, r3
    9218:	781b      	ldrb	r3, [r3, #0]
    921a:	2210      	movs	r2, #16
    921c:	4013      	ands	r3, r2
    921e:	d008      	beq.n	9232 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    9220:	68fb      	ldr	r3, [r7, #12]
    9222:	691b      	ldr	r3, [r3, #16]
    9224:	68fa      	ldr	r2, [r7, #12]
    9226:	0010      	movs	r0, r2
    9228:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    922a:	68fb      	ldr	r3, [r7, #12]
    922c:	681b      	ldr	r3, [r3, #0]
    922e:	2210      	movs	r2, #16
    9230:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    9232:	230b      	movs	r3, #11
    9234:	18fb      	adds	r3, r7, r3
    9236:	781b      	ldrb	r3, [r3, #0]
    9238:	2220      	movs	r2, #32
    923a:	4013      	ands	r3, r2
    923c:	d008      	beq.n	9250 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    923e:	68fb      	ldr	r3, [r7, #12]
    9240:	695b      	ldr	r3, [r3, #20]
    9242:	68fa      	ldr	r2, [r7, #12]
    9244:	0010      	movs	r0, r2
    9246:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    9248:	68fb      	ldr	r3, [r7, #12]
    924a:	681b      	ldr	r3, [r3, #0]
    924c:	2220      	movs	r2, #32
    924e:	739a      	strb	r2, [r3, #14]
	}
}
    9250:	46c0      	nop			; (mov r8, r8)
    9252:	46bd      	mov	sp, r7
    9254:	b004      	add	sp, #16
    9256:	bd80      	pop	{r7, pc}
    9258:	200010a8 	.word	0x200010a8

0000925c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    925c:	b580      	push	{r7, lr}
    925e:	b082      	sub	sp, #8
    9260:	af00      	add	r7, sp, #0
    9262:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9264:	687b      	ldr	r3, [r7, #4]
    9266:	2280      	movs	r2, #128	; 0x80
    9268:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    926a:	687b      	ldr	r3, [r7, #4]
    926c:	2200      	movs	r2, #0
    926e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9270:	687b      	ldr	r3, [r7, #4]
    9272:	2201      	movs	r2, #1
    9274:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    9276:	687b      	ldr	r3, [r7, #4]
    9278:	2200      	movs	r2, #0
    927a:	70da      	strb	r2, [r3, #3]
}
    927c:	46c0      	nop			; (mov r8, r8)
    927e:	46bd      	mov	sp, r7
    9280:	b002      	add	sp, #8
    9282:	bd80      	pop	{r7, pc}

00009284 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    9284:	b580      	push	{r7, lr}
    9286:	b084      	sub	sp, #16
    9288:	af00      	add	r7, sp, #0
    928a:	0002      	movs	r2, r0
    928c:	1dfb      	adds	r3, r7, #7
    928e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9290:	230f      	movs	r3, #15
    9292:	18fb      	adds	r3, r7, r3
    9294:	1dfa      	adds	r2, r7, #7
    9296:	7812      	ldrb	r2, [r2, #0]
    9298:	09d2      	lsrs	r2, r2, #7
    929a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    929c:	230e      	movs	r3, #14
    929e:	18fb      	adds	r3, r7, r3
    92a0:	1dfa      	adds	r2, r7, #7
    92a2:	7812      	ldrb	r2, [r2, #0]
    92a4:	0952      	lsrs	r2, r2, #5
    92a6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    92a8:	4b0d      	ldr	r3, [pc, #52]	; (92e0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    92aa:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    92ac:	230f      	movs	r3, #15
    92ae:	18fb      	adds	r3, r7, r3
    92b0:	781b      	ldrb	r3, [r3, #0]
    92b2:	2b00      	cmp	r3, #0
    92b4:	d10f      	bne.n	92d6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    92b6:	230f      	movs	r3, #15
    92b8:	18fb      	adds	r3, r7, r3
    92ba:	781b      	ldrb	r3, [r3, #0]
    92bc:	009b      	lsls	r3, r3, #2
    92be:	2210      	movs	r2, #16
    92c0:	4694      	mov	ip, r2
    92c2:	44bc      	add	ip, r7
    92c4:	4463      	add	r3, ip
    92c6:	3b08      	subs	r3, #8
    92c8:	681a      	ldr	r2, [r3, #0]
    92ca:	230e      	movs	r3, #14
    92cc:	18fb      	adds	r3, r7, r3
    92ce:	781b      	ldrb	r3, [r3, #0]
    92d0:	01db      	lsls	r3, r3, #7
    92d2:	18d3      	adds	r3, r2, r3
    92d4:	e000      	b.n	92d8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    92d6:	2300      	movs	r3, #0
	}
}
    92d8:	0018      	movs	r0, r3
    92da:	46bd      	mov	sp, r7
    92dc:	b004      	add	sp, #16
    92de:	bd80      	pop	{r7, pc}
    92e0:	41004400 	.word	0x41004400

000092e4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    92e4:	b580      	push	{r7, lr}
    92e6:	b082      	sub	sp, #8
    92e8:	af00      	add	r7, sp, #0
    92ea:	0002      	movs	r2, r0
    92ec:	1dfb      	adds	r3, r7, #7
    92ee:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    92f0:	1dfb      	adds	r3, r7, #7
    92f2:	781b      	ldrb	r3, [r3, #0]
    92f4:	0018      	movs	r0, r3
    92f6:	4b03      	ldr	r3, [pc, #12]	; (9304 <port_get_group_from_gpio_pin+0x20>)
    92f8:	4798      	blx	r3
    92fa:	0003      	movs	r3, r0
}
    92fc:	0018      	movs	r0, r3
    92fe:	46bd      	mov	sp, r7
    9300:	b002      	add	sp, #8
    9302:	bd80      	pop	{r7, pc}
    9304:	00009285 	.word	0x00009285

00009308 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    9308:	b580      	push	{r7, lr}
    930a:	b084      	sub	sp, #16
    930c:	af00      	add	r7, sp, #0
    930e:	0002      	movs	r2, r0
    9310:	1dfb      	adds	r3, r7, #7
    9312:	701a      	strb	r2, [r3, #0]
    9314:	1dbb      	adds	r3, r7, #6
    9316:	1c0a      	adds	r2, r1, #0
    9318:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    931a:	1dfb      	adds	r3, r7, #7
    931c:	781b      	ldrb	r3, [r3, #0]
    931e:	0018      	movs	r0, r3
    9320:	4b0d      	ldr	r3, [pc, #52]	; (9358 <port_pin_set_output_level+0x50>)
    9322:	4798      	blx	r3
    9324:	0003      	movs	r3, r0
    9326:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9328:	1dfb      	adds	r3, r7, #7
    932a:	781b      	ldrb	r3, [r3, #0]
    932c:	221f      	movs	r2, #31
    932e:	4013      	ands	r3, r2
    9330:	2201      	movs	r2, #1
    9332:	409a      	lsls	r2, r3
    9334:	0013      	movs	r3, r2
    9336:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    9338:	1dbb      	adds	r3, r7, #6
    933a:	781b      	ldrb	r3, [r3, #0]
    933c:	2b00      	cmp	r3, #0
    933e:	d003      	beq.n	9348 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    9340:	68fb      	ldr	r3, [r7, #12]
    9342:	68ba      	ldr	r2, [r7, #8]
    9344:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    9346:	e002      	b.n	934e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    9348:	68fb      	ldr	r3, [r7, #12]
    934a:	68ba      	ldr	r2, [r7, #8]
    934c:	615a      	str	r2, [r3, #20]
	}
}
    934e:	46c0      	nop			; (mov r8, r8)
    9350:	46bd      	mov	sp, r7
    9352:	b004      	add	sp, #16
    9354:	bd80      	pop	{r7, pc}
    9356:	46c0      	nop			; (mov r8, r8)
    9358:	000092e5 	.word	0x000092e5

0000935c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    935c:	b580      	push	{r7, lr}
    935e:	b082      	sub	sp, #8
    9360:	af00      	add	r7, sp, #0
    9362:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    9364:	687b      	ldr	r3, [r7, #4]
    9366:	2200      	movs	r2, #0
    9368:	701a      	strb	r2, [r3, #0]
}
    936a:	46c0      	nop			; (mov r8, r8)
    936c:	46bd      	mov	sp, r7
    936e:	b002      	add	sp, #8
    9370:	bd80      	pop	{r7, pc}
    9372:	46c0      	nop			; (mov r8, r8)

00009374 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    9374:	b580      	push	{r7, lr}
    9376:	b082      	sub	sp, #8
    9378:	af00      	add	r7, sp, #0
    937a:	0002      	movs	r2, r0
    937c:	6039      	str	r1, [r7, #0]
    937e:	1dfb      	adds	r3, r7, #7
    9380:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    9382:	1dfb      	adds	r3, r7, #7
    9384:	781b      	ldrb	r3, [r3, #0]
    9386:	2b01      	cmp	r3, #1
    9388:	d00a      	beq.n	93a0 <system_apb_clock_set_mask+0x2c>
    938a:	2b02      	cmp	r3, #2
    938c:	d00f      	beq.n	93ae <system_apb_clock_set_mask+0x3a>
    938e:	2b00      	cmp	r3, #0
    9390:	d114      	bne.n	93bc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    9392:	4b0e      	ldr	r3, [pc, #56]	; (93cc <system_apb_clock_set_mask+0x58>)
    9394:	4a0d      	ldr	r2, [pc, #52]	; (93cc <system_apb_clock_set_mask+0x58>)
    9396:	6991      	ldr	r1, [r2, #24]
    9398:	683a      	ldr	r2, [r7, #0]
    939a:	430a      	orrs	r2, r1
    939c:	619a      	str	r2, [r3, #24]
			break;
    939e:	e00f      	b.n	93c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    93a0:	4b0a      	ldr	r3, [pc, #40]	; (93cc <system_apb_clock_set_mask+0x58>)
    93a2:	4a0a      	ldr	r2, [pc, #40]	; (93cc <system_apb_clock_set_mask+0x58>)
    93a4:	69d1      	ldr	r1, [r2, #28]
    93a6:	683a      	ldr	r2, [r7, #0]
    93a8:	430a      	orrs	r2, r1
    93aa:	61da      	str	r2, [r3, #28]
			break;
    93ac:	e008      	b.n	93c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    93ae:	4b07      	ldr	r3, [pc, #28]	; (93cc <system_apb_clock_set_mask+0x58>)
    93b0:	4a06      	ldr	r2, [pc, #24]	; (93cc <system_apb_clock_set_mask+0x58>)
    93b2:	6a11      	ldr	r1, [r2, #32]
    93b4:	683a      	ldr	r2, [r7, #0]
    93b6:	430a      	orrs	r2, r1
    93b8:	621a      	str	r2, [r3, #32]
			break;
    93ba:	e001      	b.n	93c0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    93bc:	2317      	movs	r3, #23
    93be:	e000      	b.n	93c2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    93c0:	2300      	movs	r3, #0
}
    93c2:	0018      	movs	r0, r3
    93c4:	46bd      	mov	sp, r7
    93c6:	b002      	add	sp, #8
    93c8:	bd80      	pop	{r7, pc}
    93ca:	46c0      	nop			; (mov r8, r8)
    93cc:	40000400 	.word	0x40000400

000093d0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    93d0:	b580      	push	{r7, lr}
    93d2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    93d4:	4b05      	ldr	r3, [pc, #20]	; (93ec <system_is_debugger_present+0x1c>)
    93d6:	789b      	ldrb	r3, [r3, #2]
    93d8:	b2db      	uxtb	r3, r3
    93da:	001a      	movs	r2, r3
    93dc:	2302      	movs	r3, #2
    93de:	4013      	ands	r3, r2
    93e0:	1e5a      	subs	r2, r3, #1
    93e2:	4193      	sbcs	r3, r2
    93e4:	b2db      	uxtb	r3, r3
}
    93e6:	0018      	movs	r0, r3
    93e8:	46bd      	mov	sp, r7
    93ea:	bd80      	pop	{r7, pc}
    93ec:	41002000 	.word	0x41002000

000093f0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    93f0:	b580      	push	{r7, lr}
    93f2:	b084      	sub	sp, #16
    93f4:	af00      	add	r7, sp, #0
    93f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    93f8:	687b      	ldr	r3, [r7, #4]
    93fa:	681b      	ldr	r3, [r3, #0]
    93fc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    93fe:	68fb      	ldr	r3, [r7, #12]
    9400:	7e1b      	ldrb	r3, [r3, #24]
    9402:	b2db      	uxtb	r3, r3
    9404:	001a      	movs	r2, r3
    9406:	2301      	movs	r3, #1
    9408:	4013      	ands	r3, r2
    940a:	1e5a      	subs	r2, r3, #1
    940c:	4193      	sbcs	r3, r2
    940e:	b2db      	uxtb	r3, r3
}
    9410:	0018      	movs	r0, r3
    9412:	46bd      	mov	sp, r7
    9414:	b004      	add	sp, #16
    9416:	bd80      	pop	{r7, pc}

00009418 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    9418:	b580      	push	{r7, lr}
    941a:	b084      	sub	sp, #16
    941c:	af00      	add	r7, sp, #0
    941e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9420:	687b      	ldr	r3, [r7, #4]
    9422:	681b      	ldr	r3, [r3, #0]
    9424:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    9426:	68fb      	ldr	r3, [r7, #12]
    9428:	7e1b      	ldrb	r3, [r3, #24]
    942a:	b2db      	uxtb	r3, r3
    942c:	001a      	movs	r2, r3
    942e:	2304      	movs	r3, #4
    9430:	4013      	ands	r3, r2
    9432:	1e5a      	subs	r2, r3, #1
    9434:	4193      	sbcs	r3, r2
    9436:	b2db      	uxtb	r3, r3
}
    9438:	0018      	movs	r0, r3
    943a:	46bd      	mov	sp, r7
    943c:	b004      	add	sp, #16
    943e:	bd80      	pop	{r7, pc}

00009440 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    9440:	b580      	push	{r7, lr}
    9442:	b084      	sub	sp, #16
    9444:	af00      	add	r7, sp, #0
    9446:	6078      	str	r0, [r7, #4]
    9448:	000a      	movs	r2, r1
    944a:	1cbb      	adds	r3, r7, #2
    944c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    944e:	687b      	ldr	r3, [r7, #4]
    9450:	681b      	ldr	r3, [r3, #0]
    9452:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    9454:	687b      	ldr	r3, [r7, #4]
    9456:	0018      	movs	r0, r3
    9458:	4b0a      	ldr	r3, [pc, #40]	; (9484 <spi_write+0x44>)
    945a:	4798      	blx	r3
    945c:	0003      	movs	r3, r0
    945e:	001a      	movs	r2, r3
    9460:	2301      	movs	r3, #1
    9462:	4053      	eors	r3, r2
    9464:	b2db      	uxtb	r3, r3
    9466:	2b00      	cmp	r3, #0
    9468:	d001      	beq.n	946e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    946a:	2305      	movs	r3, #5
    946c:	e006      	b.n	947c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    946e:	1cbb      	adds	r3, r7, #2
    9470:	881b      	ldrh	r3, [r3, #0]
    9472:	05db      	lsls	r3, r3, #23
    9474:	0dda      	lsrs	r2, r3, #23
    9476:	68fb      	ldr	r3, [r7, #12]
    9478:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    947a:	2300      	movs	r3, #0
}
    947c:	0018      	movs	r0, r3
    947e:	46bd      	mov	sp, r7
    9480:	b004      	add	sp, #16
    9482:	bd80      	pop	{r7, pc}
    9484:	000093f1 	.word	0x000093f1

00009488 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    9488:	b580      	push	{r7, lr}
    948a:	b084      	sub	sp, #16
    948c:	af00      	add	r7, sp, #0
    948e:	6078      	str	r0, [r7, #4]
    9490:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9492:	687b      	ldr	r3, [r7, #4]
    9494:	681b      	ldr	r3, [r3, #0]
    9496:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    9498:	687b      	ldr	r3, [r7, #4]
    949a:	0018      	movs	r0, r3
    949c:	4b1b      	ldr	r3, [pc, #108]	; (950c <spi_read+0x84>)
    949e:	4798      	blx	r3
    94a0:	0003      	movs	r3, r0
    94a2:	001a      	movs	r2, r3
    94a4:	2301      	movs	r3, #1
    94a6:	4053      	eors	r3, r2
    94a8:	b2db      	uxtb	r3, r3
    94aa:	2b00      	cmp	r3, #0
    94ac:	d001      	beq.n	94b2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    94ae:	2310      	movs	r3, #16
    94b0:	e027      	b.n	9502 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    94b2:	230f      	movs	r3, #15
    94b4:	18fb      	adds	r3, r7, r3
    94b6:	2200      	movs	r2, #0
    94b8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    94ba:	68bb      	ldr	r3, [r7, #8]
    94bc:	8b5b      	ldrh	r3, [r3, #26]
    94be:	b29b      	uxth	r3, r3
    94c0:	001a      	movs	r2, r3
    94c2:	2304      	movs	r3, #4
    94c4:	4013      	ands	r3, r2
    94c6:	d006      	beq.n	94d6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    94c8:	230f      	movs	r3, #15
    94ca:	18fb      	adds	r3, r7, r3
    94cc:	221e      	movs	r2, #30
    94ce:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    94d0:	68bb      	ldr	r3, [r7, #8]
    94d2:	2204      	movs	r2, #4
    94d4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    94d6:	687b      	ldr	r3, [r7, #4]
    94d8:	799b      	ldrb	r3, [r3, #6]
    94da:	2b01      	cmp	r3, #1
    94dc:	d108      	bne.n	94f0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    94de:	68bb      	ldr	r3, [r7, #8]
    94e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    94e2:	b29b      	uxth	r3, r3
    94e4:	05db      	lsls	r3, r3, #23
    94e6:	0ddb      	lsrs	r3, r3, #23
    94e8:	b29a      	uxth	r2, r3
    94ea:	683b      	ldr	r3, [r7, #0]
    94ec:	801a      	strh	r2, [r3, #0]
    94ee:	e005      	b.n	94fc <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    94f0:	68bb      	ldr	r3, [r7, #8]
    94f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    94f4:	b2db      	uxtb	r3, r3
    94f6:	b29a      	uxth	r2, r3
    94f8:	683b      	ldr	r3, [r7, #0]
    94fa:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    94fc:	230f      	movs	r3, #15
    94fe:	18fb      	adds	r3, r7, r3
    9500:	781b      	ldrb	r3, [r3, #0]
}
    9502:	0018      	movs	r0, r3
    9504:	46bd      	mov	sp, r7
    9506:	b004      	add	sp, #16
    9508:	bd80      	pop	{r7, pc}
    950a:	46c0      	nop			; (mov r8, r8)
    950c:	00009419 	.word	0x00009419

00009510 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    9510:	b590      	push	{r4, r7, lr}
    9512:	b093      	sub	sp, #76	; 0x4c
    9514:	af00      	add	r7, sp, #0
    9516:	6078      	str	r0, [r7, #4]
    9518:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    951a:	687b      	ldr	r3, [r7, #4]
    951c:	681b      	ldr	r3, [r3, #0]
    951e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    9520:	687b      	ldr	r3, [r7, #4]
    9522:	681b      	ldr	r3, [r3, #0]
    9524:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    9526:	231c      	movs	r3, #28
    9528:	18fb      	adds	r3, r7, r3
    952a:	0018      	movs	r0, r3
    952c:	4b85      	ldr	r3, [pc, #532]	; (9744 <_spi_set_config+0x234>)
    952e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9530:	231c      	movs	r3, #28
    9532:	18fb      	adds	r3, r7, r3
    9534:	2200      	movs	r2, #0
    9536:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    9538:	683b      	ldr	r3, [r7, #0]
    953a:	781b      	ldrb	r3, [r3, #0]
    953c:	2b00      	cmp	r3, #0
    953e:	d103      	bne.n	9548 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    9540:	231c      	movs	r3, #28
    9542:	18fb      	adds	r3, r7, r3
    9544:	2200      	movs	r2, #0
    9546:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    9548:	683b      	ldr	r3, [r7, #0]
    954a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    954c:	230c      	movs	r3, #12
    954e:	18fb      	adds	r3, r7, r3
    9550:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    9552:	683b      	ldr	r3, [r7, #0]
    9554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    9556:	230c      	movs	r3, #12
    9558:	18fb      	adds	r3, r7, r3
    955a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    955c:	683b      	ldr	r3, [r7, #0]
    955e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    9560:	230c      	movs	r3, #12
    9562:	18fb      	adds	r3, r7, r3
    9564:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    9566:	683b      	ldr	r3, [r7, #0]
    9568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    956a:	230c      	movs	r3, #12
    956c:	18fb      	adds	r3, r7, r3
    956e:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    9570:	2347      	movs	r3, #71	; 0x47
    9572:	18fb      	adds	r3, r7, r3
    9574:	2200      	movs	r2, #0
    9576:	701a      	strb	r2, [r3, #0]
    9578:	e02c      	b.n	95d4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    957a:	2347      	movs	r3, #71	; 0x47
    957c:	18fb      	adds	r3, r7, r3
    957e:	781a      	ldrb	r2, [r3, #0]
    9580:	230c      	movs	r3, #12
    9582:	18fb      	adds	r3, r7, r3
    9584:	0092      	lsls	r2, r2, #2
    9586:	58d3      	ldr	r3, [r2, r3]
    9588:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    958a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    958c:	2b00      	cmp	r3, #0
    958e:	d109      	bne.n	95a4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    9590:	2347      	movs	r3, #71	; 0x47
    9592:	18fb      	adds	r3, r7, r3
    9594:	781a      	ldrb	r2, [r3, #0]
    9596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9598:	0011      	movs	r1, r2
    959a:	0018      	movs	r0, r3
    959c:	4b6a      	ldr	r3, [pc, #424]	; (9748 <_spi_set_config+0x238>)
    959e:	4798      	blx	r3
    95a0:	0003      	movs	r3, r0
    95a2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    95a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    95a6:	3301      	adds	r3, #1
    95a8:	d00d      	beq.n	95c6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    95aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    95ac:	b2da      	uxtb	r2, r3
    95ae:	231c      	movs	r3, #28
    95b0:	18fb      	adds	r3, r7, r3
    95b2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    95b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    95b6:	0c1b      	lsrs	r3, r3, #16
    95b8:	b2db      	uxtb	r3, r3
    95ba:	221c      	movs	r2, #28
    95bc:	18ba      	adds	r2, r7, r2
    95be:	0011      	movs	r1, r2
    95c0:	0018      	movs	r0, r3
    95c2:	4b62      	ldr	r3, [pc, #392]	; (974c <_spi_set_config+0x23c>)
    95c4:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    95c6:	2347      	movs	r3, #71	; 0x47
    95c8:	18fb      	adds	r3, r7, r3
    95ca:	781a      	ldrb	r2, [r3, #0]
    95cc:	2347      	movs	r3, #71	; 0x47
    95ce:	18fb      	adds	r3, r7, r3
    95d0:	3201      	adds	r2, #1
    95d2:	701a      	strb	r2, [r3, #0]
    95d4:	2347      	movs	r3, #71	; 0x47
    95d6:	18fb      	adds	r3, r7, r3
    95d8:	781b      	ldrb	r3, [r3, #0]
    95da:	2b03      	cmp	r3, #3
    95dc:	d9cd      	bls.n	957a <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    95de:	683b      	ldr	r3, [r7, #0]
    95e0:	781a      	ldrb	r2, [r3, #0]
    95e2:	687b      	ldr	r3, [r7, #4]
    95e4:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    95e6:	683b      	ldr	r3, [r7, #0]
    95e8:	7c1a      	ldrb	r2, [r3, #16]
    95ea:	687b      	ldr	r3, [r7, #4]
    95ec:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    95ee:	683b      	ldr	r3, [r7, #0]
    95f0:	7c9a      	ldrb	r2, [r3, #18]
    95f2:	687b      	ldr	r3, [r7, #4]
    95f4:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    95f6:	683b      	ldr	r3, [r7, #0]
    95f8:	7d1a      	ldrb	r2, [r3, #20]
    95fa:	687b      	ldr	r3, [r7, #4]
    95fc:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    95fe:	230a      	movs	r3, #10
    9600:	18fb      	adds	r3, r7, r3
    9602:	2200      	movs	r2, #0
    9604:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    9606:	2300      	movs	r3, #0
    9608:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    960a:	2300      	movs	r3, #0
    960c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    960e:	683b      	ldr	r3, [r7, #0]
    9610:	781b      	ldrb	r3, [r3, #0]
    9612:	2b01      	cmp	r3, #1
    9614:	d129      	bne.n	966a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9616:	687b      	ldr	r3, [r7, #4]
    9618:	681b      	ldr	r3, [r3, #0]
    961a:	0018      	movs	r0, r3
    961c:	4b4c      	ldr	r3, [pc, #304]	; (9750 <_spi_set_config+0x240>)
    961e:	4798      	blx	r3
    9620:	0003      	movs	r3, r0
    9622:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    9624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9626:	3314      	adds	r3, #20
    9628:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    962a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    962c:	b2db      	uxtb	r3, r3
    962e:	0018      	movs	r0, r3
    9630:	4b48      	ldr	r3, [pc, #288]	; (9754 <_spi_set_config+0x244>)
    9632:	4798      	blx	r3
    9634:	0003      	movs	r3, r0
    9636:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    9638:	683b      	ldr	r3, [r7, #0]
    963a:	699b      	ldr	r3, [r3, #24]
    963c:	2223      	movs	r2, #35	; 0x23
    963e:	18bc      	adds	r4, r7, r2
    9640:	220a      	movs	r2, #10
    9642:	18ba      	adds	r2, r7, r2
    9644:	6a79      	ldr	r1, [r7, #36]	; 0x24
    9646:	0018      	movs	r0, r3
    9648:	4b43      	ldr	r3, [pc, #268]	; (9758 <_spi_set_config+0x248>)
    964a:	4798      	blx	r3
    964c:	0003      	movs	r3, r0
    964e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    9650:	2323      	movs	r3, #35	; 0x23
    9652:	18fb      	adds	r3, r7, r3
    9654:	781b      	ldrb	r3, [r3, #0]
    9656:	2b00      	cmp	r3, #0
    9658:	d001      	beq.n	965e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    965a:	2317      	movs	r3, #23
    965c:	e06d      	b.n	973a <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    965e:	230a      	movs	r3, #10
    9660:	18fb      	adds	r3, r7, r3
    9662:	881b      	ldrh	r3, [r3, #0]
    9664:	b2da      	uxtb	r2, r3
    9666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9668:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    966a:	683b      	ldr	r3, [r7, #0]
    966c:	781b      	ldrb	r3, [r3, #0]
    966e:	2b00      	cmp	r3, #0
    9670:	d11a      	bne.n	96a8 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    9672:	683b      	ldr	r3, [r7, #0]
    9674:	699b      	ldr	r3, [r3, #24]
    9676:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    9678:	683b      	ldr	r3, [r7, #0]
    967a:	8b9b      	ldrh	r3, [r3, #28]
    967c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    967e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    9682:	683a      	ldr	r2, [r7, #0]
    9684:	7f92      	ldrb	r2, [r2, #30]
    9686:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    9688:	683a      	ldr	r2, [r7, #0]
    968a:	7fd2      	ldrb	r2, [r2, #31]
    968c:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    968e:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    9690:	431a      	orrs	r2, r3
    9692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9694:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    9696:	683b      	ldr	r3, [r7, #0]
    9698:	2220      	movs	r2, #32
    969a:	5c9b      	ldrb	r3, [r3, r2]
    969c:	2b00      	cmp	r3, #0
    969e:	d003      	beq.n	96a8 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    96a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    96a2:	2240      	movs	r2, #64	; 0x40
    96a4:	4313      	orrs	r3, r2
    96a6:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    96a8:	683b      	ldr	r3, [r7, #0]
    96aa:	685b      	ldr	r3, [r3, #4]
    96ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    96ae:	4313      	orrs	r3, r2
    96b0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    96b2:	683b      	ldr	r3, [r7, #0]
    96b4:	689b      	ldr	r3, [r3, #8]
    96b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    96b8:	4313      	orrs	r3, r2
    96ba:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    96bc:	683b      	ldr	r3, [r7, #0]
    96be:	68db      	ldr	r3, [r3, #12]
    96c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    96c2:	4313      	orrs	r3, r2
    96c4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    96c6:	683b      	ldr	r3, [r7, #0]
    96c8:	7c1b      	ldrb	r3, [r3, #16]
    96ca:	001a      	movs	r2, r3
    96cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    96ce:	4313      	orrs	r3, r2
    96d0:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    96d2:	683b      	ldr	r3, [r7, #0]
    96d4:	7c5b      	ldrb	r3, [r3, #17]
    96d6:	2b00      	cmp	r3, #0
    96d8:	d103      	bne.n	96e2 <_spi_set_config+0x1d2>
    96da:	4b20      	ldr	r3, [pc, #128]	; (975c <_spi_set_config+0x24c>)
    96dc:	4798      	blx	r3
    96de:	1e03      	subs	r3, r0, #0
    96e0:	d003      	beq.n	96ea <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    96e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96e4:	2280      	movs	r2, #128	; 0x80
    96e6:	4313      	orrs	r3, r2
    96e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    96ea:	683b      	ldr	r3, [r7, #0]
    96ec:	7c9b      	ldrb	r3, [r3, #18]
    96ee:	2b00      	cmp	r3, #0
    96f0:	d004      	beq.n	96fc <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    96f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    96f4:	2280      	movs	r2, #128	; 0x80
    96f6:	0292      	lsls	r2, r2, #10
    96f8:	4313      	orrs	r3, r2
    96fa:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    96fc:	683b      	ldr	r3, [r7, #0]
    96fe:	7cdb      	ldrb	r3, [r3, #19]
    9700:	2b00      	cmp	r3, #0
    9702:	d004      	beq.n	970e <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    9704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9706:	2280      	movs	r2, #128	; 0x80
    9708:	0092      	lsls	r2, r2, #2
    970a:	4313      	orrs	r3, r2
    970c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    970e:	683b      	ldr	r3, [r7, #0]
    9710:	7d1b      	ldrb	r3, [r3, #20]
    9712:	2b00      	cmp	r3, #0
    9714:	d004      	beq.n	9720 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    9716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9718:	2280      	movs	r2, #128	; 0x80
    971a:	0192      	lsls	r2, r2, #6
    971c:	4313      	orrs	r3, r2
    971e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    9720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9722:	681a      	ldr	r2, [r3, #0]
    9724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9726:	431a      	orrs	r2, r3
    9728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    972a:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    972c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    972e:	685a      	ldr	r2, [r3, #4]
    9730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9732:	431a      	orrs	r2, r3
    9734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9736:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    9738:	2300      	movs	r3, #0
}
    973a:	0018      	movs	r0, r3
    973c:	46bd      	mov	sp, r7
    973e:	b013      	add	sp, #76	; 0x4c
    9740:	bd90      	pop	{r4, r7, pc}
    9742:	46c0      	nop			; (mov r8, r8)
    9744:	0000925d 	.word	0x0000925d
    9748:	0000298d 	.word	0x0000298d
    974c:	0000b1b1 	.word	0x0000b1b1
    9750:	00002b4d 	.word	0x00002b4d
    9754:	0000afe9 	.word	0x0000afe9
    9758:	000026c5 	.word	0x000026c5
    975c:	000093d1 	.word	0x000093d1

00009760 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    9760:	b590      	push	{r4, r7, lr}
    9762:	b08b      	sub	sp, #44	; 0x2c
    9764:	af00      	add	r7, sp, #0
    9766:	60f8      	str	r0, [r7, #12]
    9768:	60b9      	str	r1, [r7, #8]
    976a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    976c:	68fb      	ldr	r3, [r7, #12]
    976e:	68ba      	ldr	r2, [r7, #8]
    9770:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    9772:	68fb      	ldr	r3, [r7, #12]
    9774:	681b      	ldr	r3, [r3, #0]
    9776:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    9778:	6a3b      	ldr	r3, [r7, #32]
    977a:	681b      	ldr	r3, [r3, #0]
    977c:	2202      	movs	r2, #2
    977e:	4013      	ands	r3, r2
    9780:	d001      	beq.n	9786 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    9782:	231c      	movs	r3, #28
    9784:	e0a6      	b.n	98d4 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    9786:	6a3b      	ldr	r3, [r7, #32]
    9788:	681b      	ldr	r3, [r3, #0]
    978a:	2201      	movs	r2, #1
    978c:	4013      	ands	r3, r2
    978e:	d001      	beq.n	9794 <spi_init+0x34>
		return STATUS_BUSY;
    9790:	2305      	movs	r3, #5
    9792:	e09f      	b.n	98d4 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9794:	68fb      	ldr	r3, [r7, #12]
    9796:	681b      	ldr	r3, [r3, #0]
    9798:	0018      	movs	r0, r3
    979a:	4b50      	ldr	r3, [pc, #320]	; (98dc <spi_init+0x17c>)
    979c:	4798      	blx	r3
    979e:	0003      	movs	r3, r0
    97a0:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    97a2:	69fb      	ldr	r3, [r7, #28]
    97a4:	3302      	adds	r3, #2
    97a6:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    97a8:	69fb      	ldr	r3, [r7, #28]
    97aa:	3314      	adds	r3, #20
    97ac:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    97ae:	2201      	movs	r2, #1
    97b0:	69bb      	ldr	r3, [r7, #24]
    97b2:	409a      	lsls	r2, r3
    97b4:	0013      	movs	r3, r2
    97b6:	0019      	movs	r1, r3
    97b8:	2002      	movs	r0, #2
    97ba:	4b49      	ldr	r3, [pc, #292]	; (98e0 <spi_init+0x180>)
    97bc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    97be:	2310      	movs	r3, #16
    97c0:	18fb      	adds	r3, r7, r3
    97c2:	0018      	movs	r0, r3
    97c4:	4b47      	ldr	r3, [pc, #284]	; (98e4 <spi_init+0x184>)
    97c6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    97c8:	687b      	ldr	r3, [r7, #4]
    97ca:	2224      	movs	r2, #36	; 0x24
    97cc:	5c9a      	ldrb	r2, [r3, r2]
    97ce:	2310      	movs	r3, #16
    97d0:	18fb      	adds	r3, r7, r3
    97d2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    97d4:	697b      	ldr	r3, [r7, #20]
    97d6:	b2db      	uxtb	r3, r3
    97d8:	2210      	movs	r2, #16
    97da:	18ba      	adds	r2, r7, r2
    97dc:	0011      	movs	r1, r2
    97de:	0018      	movs	r0, r3
    97e0:	4b41      	ldr	r3, [pc, #260]	; (98e8 <spi_init+0x188>)
    97e2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    97e4:	697b      	ldr	r3, [r7, #20]
    97e6:	b2db      	uxtb	r3, r3
    97e8:	0018      	movs	r0, r3
    97ea:	4b40      	ldr	r3, [pc, #256]	; (98ec <spi_init+0x18c>)
    97ec:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    97ee:	687b      	ldr	r3, [r7, #4]
    97f0:	2224      	movs	r2, #36	; 0x24
    97f2:	5c9b      	ldrb	r3, [r3, r2]
    97f4:	2100      	movs	r1, #0
    97f6:	0018      	movs	r0, r3
    97f8:	4b3d      	ldr	r3, [pc, #244]	; (98f0 <spi_init+0x190>)
    97fa:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    97fc:	687b      	ldr	r3, [r7, #4]
    97fe:	781b      	ldrb	r3, [r3, #0]
    9800:	2b01      	cmp	r3, #1
    9802:	d105      	bne.n	9810 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    9804:	6a3b      	ldr	r3, [r7, #32]
    9806:	681b      	ldr	r3, [r3, #0]
    9808:	220c      	movs	r2, #12
    980a:	431a      	orrs	r2, r3
    980c:	6a3b      	ldr	r3, [r7, #32]
    980e:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    9810:	687b      	ldr	r3, [r7, #4]
    9812:	781b      	ldrb	r3, [r3, #0]
    9814:	2b00      	cmp	r3, #0
    9816:	d105      	bne.n	9824 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    9818:	6a3b      	ldr	r3, [r7, #32]
    981a:	681b      	ldr	r3, [r3, #0]
    981c:	2208      	movs	r2, #8
    981e:	431a      	orrs	r2, r3
    9820:	6a3b      	ldr	r3, [r7, #32]
    9822:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    9824:	2327      	movs	r3, #39	; 0x27
    9826:	18fb      	adds	r3, r7, r3
    9828:	2200      	movs	r2, #0
    982a:	701a      	strb	r2, [r3, #0]
    982c:	e010      	b.n	9850 <spi_init+0xf0>
		module->callback[i]        = NULL;
    982e:	2327      	movs	r3, #39	; 0x27
    9830:	18fb      	adds	r3, r7, r3
    9832:	781b      	ldrb	r3, [r3, #0]
    9834:	68fa      	ldr	r2, [r7, #12]
    9836:	3302      	adds	r3, #2
    9838:	009b      	lsls	r3, r3, #2
    983a:	18d3      	adds	r3, r2, r3
    983c:	3304      	adds	r3, #4
    983e:	2200      	movs	r2, #0
    9840:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    9842:	2327      	movs	r3, #39	; 0x27
    9844:	18fb      	adds	r3, r7, r3
    9846:	781a      	ldrb	r2, [r3, #0]
    9848:	2327      	movs	r3, #39	; 0x27
    984a:	18fb      	adds	r3, r7, r3
    984c:	3201      	adds	r2, #1
    984e:	701a      	strb	r2, [r3, #0]
    9850:	2327      	movs	r3, #39	; 0x27
    9852:	18fb      	adds	r3, r7, r3
    9854:	781b      	ldrb	r3, [r3, #0]
    9856:	2b06      	cmp	r3, #6
    9858:	d9e9      	bls.n	982e <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    985a:	68fb      	ldr	r3, [r7, #12]
    985c:	2200      	movs	r2, #0
    985e:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    9860:	68fb      	ldr	r3, [r7, #12]
    9862:	2200      	movs	r2, #0
    9864:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    9866:	68fb      	ldr	r3, [r7, #12]
    9868:	2200      	movs	r2, #0
    986a:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    986c:	68fb      	ldr	r3, [r7, #12]
    986e:	2200      	movs	r2, #0
    9870:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    9872:	68fb      	ldr	r3, [r7, #12]
    9874:	2236      	movs	r2, #54	; 0x36
    9876:	2100      	movs	r1, #0
    9878:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    987a:	68fb      	ldr	r3, [r7, #12]
    987c:	2237      	movs	r2, #55	; 0x37
    987e:	2100      	movs	r1, #0
    9880:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    9882:	68fb      	ldr	r3, [r7, #12]
    9884:	2238      	movs	r2, #56	; 0x38
    9886:	2100      	movs	r1, #0
    9888:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    988a:	68fb      	ldr	r3, [r7, #12]
    988c:	2203      	movs	r2, #3
    988e:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    9890:	68fb      	ldr	r3, [r7, #12]
    9892:	2200      	movs	r2, #0
    9894:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    9896:	68fb      	ldr	r3, [r7, #12]
    9898:	681b      	ldr	r3, [r3, #0]
    989a:	2213      	movs	r2, #19
    989c:	18bc      	adds	r4, r7, r2
    989e:	0018      	movs	r0, r3
    98a0:	4b0e      	ldr	r3, [pc, #56]	; (98dc <spi_init+0x17c>)
    98a2:	4798      	blx	r3
    98a4:	0003      	movs	r3, r0
    98a6:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    98a8:	4a12      	ldr	r2, [pc, #72]	; (98f4 <spi_init+0x194>)
    98aa:	2313      	movs	r3, #19
    98ac:	18fb      	adds	r3, r7, r3
    98ae:	781b      	ldrb	r3, [r3, #0]
    98b0:	0011      	movs	r1, r2
    98b2:	0018      	movs	r0, r3
    98b4:	4b10      	ldr	r3, [pc, #64]	; (98f8 <spi_init+0x198>)
    98b6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    98b8:	2313      	movs	r3, #19
    98ba:	18fb      	adds	r3, r7, r3
    98bc:	781a      	ldrb	r2, [r3, #0]
    98be:	4b0f      	ldr	r3, [pc, #60]	; (98fc <spi_init+0x19c>)
    98c0:	0092      	lsls	r2, r2, #2
    98c2:	68f9      	ldr	r1, [r7, #12]
    98c4:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    98c6:	687a      	ldr	r2, [r7, #4]
    98c8:	68fb      	ldr	r3, [r7, #12]
    98ca:	0011      	movs	r1, r2
    98cc:	0018      	movs	r0, r3
    98ce:	4b0c      	ldr	r3, [pc, #48]	; (9900 <spi_init+0x1a0>)
    98d0:	4798      	blx	r3
    98d2:	0003      	movs	r3, r0
}
    98d4:	0018      	movs	r0, r3
    98d6:	46bd      	mov	sp, r7
    98d8:	b00b      	add	sp, #44	; 0x2c
    98da:	bd90      	pop	{r4, r7, pc}
    98dc:	00002b4d 	.word	0x00002b4d
    98e0:	00009375 	.word	0x00009375
    98e4:	0000935d 	.word	0x0000935d
    98e8:	0000aec5 	.word	0x0000aec5
    98ec:	0000af09 	.word	0x0000af09
    98f0:	00002901 	.word	0x00002901
    98f4:	00009b4d 	.word	0x00009b4d
    98f8:	00009e6d 	.word	0x00009e6d
    98fc:	200010b8 	.word	0x200010b8
    9900:	00009511 	.word	0x00009511

00009904 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    9904:	b580      	push	{r7, lr}
    9906:	b086      	sub	sp, #24
    9908:	af00      	add	r7, sp, #0
    990a:	60f8      	str	r0, [r7, #12]
    990c:	60b9      	str	r1, [r7, #8]
    990e:	1dfb      	adds	r3, r7, #7
    9910:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    9912:	68fb      	ldr	r3, [r7, #12]
    9914:	795b      	ldrb	r3, [r3, #5]
    9916:	2b01      	cmp	r3, #1
    9918:	d001      	beq.n	991e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    991a:	2315      	movs	r3, #21
    991c:	e05c      	b.n	99d8 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    991e:	68fb      	ldr	r3, [r7, #12]
    9920:	7a1b      	ldrb	r3, [r3, #8]
    9922:	2201      	movs	r2, #1
    9924:	4053      	eors	r3, r2
    9926:	b2db      	uxtb	r3, r3
    9928:	2b00      	cmp	r3, #0
    992a:	d054      	beq.n	99d6 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    992c:	1dfb      	adds	r3, r7, #7
    992e:	781b      	ldrb	r3, [r3, #0]
    9930:	2b00      	cmp	r3, #0
    9932:	d04a      	beq.n	99ca <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    9934:	68bb      	ldr	r3, [r7, #8]
    9936:	785b      	ldrb	r3, [r3, #1]
    9938:	2b00      	cmp	r3, #0
    993a:	d03f      	beq.n	99bc <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    993c:	68fb      	ldr	r3, [r7, #12]
    993e:	0018      	movs	r0, r3
    9940:	4b27      	ldr	r3, [pc, #156]	; (99e0 <spi_select_slave+0xdc>)
    9942:	4798      	blx	r3
    9944:	0003      	movs	r3, r0
    9946:	001a      	movs	r2, r3
    9948:	2301      	movs	r3, #1
    994a:	4053      	eors	r3, r2
    994c:	b2db      	uxtb	r3, r3
    994e:	2b00      	cmp	r3, #0
    9950:	d007      	beq.n	9962 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    9952:	68bb      	ldr	r3, [r7, #8]
    9954:	781b      	ldrb	r3, [r3, #0]
    9956:	2101      	movs	r1, #1
    9958:	0018      	movs	r0, r3
    995a:	4b22      	ldr	r3, [pc, #136]	; (99e4 <spi_select_slave+0xe0>)
    995c:	4798      	blx	r3
					return STATUS_BUSY;
    995e:	2305      	movs	r3, #5
    9960:	e03a      	b.n	99d8 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    9962:	68bb      	ldr	r3, [r7, #8]
    9964:	781b      	ldrb	r3, [r3, #0]
    9966:	2100      	movs	r1, #0
    9968:	0018      	movs	r0, r3
    996a:	4b1e      	ldr	r3, [pc, #120]	; (99e4 <spi_select_slave+0xe0>)
    996c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    996e:	68bb      	ldr	r3, [r7, #8]
    9970:	789b      	ldrb	r3, [r3, #2]
    9972:	b29a      	uxth	r2, r3
    9974:	68fb      	ldr	r3, [r7, #12]
    9976:	0011      	movs	r1, r2
    9978:	0018      	movs	r0, r3
    997a:	4b1b      	ldr	r3, [pc, #108]	; (99e8 <spi_select_slave+0xe4>)
    997c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    997e:	68fb      	ldr	r3, [r7, #12]
    9980:	79db      	ldrb	r3, [r3, #7]
    9982:	2201      	movs	r2, #1
    9984:	4053      	eors	r3, r2
    9986:	b2db      	uxtb	r3, r3
    9988:	2b00      	cmp	r3, #0
    998a:	d024      	beq.n	99d6 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    998c:	46c0      	nop			; (mov r8, r8)
    998e:	68fb      	ldr	r3, [r7, #12]
    9990:	0018      	movs	r0, r3
    9992:	4b16      	ldr	r3, [pc, #88]	; (99ec <spi_select_slave+0xe8>)
    9994:	4798      	blx	r3
    9996:	0003      	movs	r3, r0
    9998:	001a      	movs	r2, r3
    999a:	2301      	movs	r3, #1
    999c:	4053      	eors	r3, r2
    999e:	b2db      	uxtb	r3, r3
    99a0:	2b00      	cmp	r3, #0
    99a2:	d1f4      	bne.n	998e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    99a4:	2316      	movs	r3, #22
    99a6:	18fb      	adds	r3, r7, r3
    99a8:	2200      	movs	r2, #0
    99aa:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    99ac:	2316      	movs	r3, #22
    99ae:	18fa      	adds	r2, r7, r3
    99b0:	68fb      	ldr	r3, [r7, #12]
    99b2:	0011      	movs	r1, r2
    99b4:	0018      	movs	r0, r3
    99b6:	4b0e      	ldr	r3, [pc, #56]	; (99f0 <spi_select_slave+0xec>)
    99b8:	4798      	blx	r3
    99ba:	e00c      	b.n	99d6 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    99bc:	68bb      	ldr	r3, [r7, #8]
    99be:	781b      	ldrb	r3, [r3, #0]
    99c0:	2100      	movs	r1, #0
    99c2:	0018      	movs	r0, r3
    99c4:	4b07      	ldr	r3, [pc, #28]	; (99e4 <spi_select_slave+0xe0>)
    99c6:	4798      	blx	r3
    99c8:	e005      	b.n	99d6 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    99ca:	68bb      	ldr	r3, [r7, #8]
    99cc:	781b      	ldrb	r3, [r3, #0]
    99ce:	2101      	movs	r1, #1
    99d0:	0018      	movs	r0, r3
    99d2:	4b04      	ldr	r3, [pc, #16]	; (99e4 <spi_select_slave+0xe0>)
    99d4:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    99d6:	2300      	movs	r3, #0
}
    99d8:	0018      	movs	r0, r3
    99da:	46bd      	mov	sp, r7
    99dc:	b006      	add	sp, #24
    99de:	bd80      	pop	{r7, pc}
    99e0:	000093f1 	.word	0x000093f1
    99e4:	00009309 	.word	0x00009309
    99e8:	00009441 	.word	0x00009441
    99ec:	00009419 	.word	0x00009419
    99f0:	00009489 	.word	0x00009489

000099f4 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    99f4:	b580      	push	{r7, lr}
    99f6:	b084      	sub	sp, #16
    99f8:	af00      	add	r7, sp, #0
    99fa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    99fc:	687b      	ldr	r3, [r7, #4]
    99fe:	681b      	ldr	r3, [r3, #0]
    9a00:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    9a02:	687b      	ldr	r3, [r7, #4]
    9a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9a06:	781b      	ldrb	r3, [r3, #0]
    9a08:	b2da      	uxtb	r2, r3
    9a0a:	230e      	movs	r3, #14
    9a0c:	18fb      	adds	r3, r7, r3
    9a0e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    9a10:	687b      	ldr	r3, [r7, #4]
    9a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9a14:	1c5a      	adds	r2, r3, #1
    9a16:	687b      	ldr	r3, [r7, #4]
    9a18:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9a1a:	687b      	ldr	r3, [r7, #4]
    9a1c:	799b      	ldrb	r3, [r3, #6]
    9a1e:	2b01      	cmp	r3, #1
    9a20:	d113      	bne.n	9a4a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    9a22:	687b      	ldr	r3, [r7, #4]
    9a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9a26:	781b      	ldrb	r3, [r3, #0]
    9a28:	b2db      	uxtb	r3, r3
    9a2a:	021b      	lsls	r3, r3, #8
    9a2c:	b21a      	sxth	r2, r3
    9a2e:	230e      	movs	r3, #14
    9a30:	18fb      	adds	r3, r7, r3
    9a32:	2100      	movs	r1, #0
    9a34:	5e5b      	ldrsh	r3, [r3, r1]
    9a36:	4313      	orrs	r3, r2
    9a38:	b21a      	sxth	r2, r3
    9a3a:	230e      	movs	r3, #14
    9a3c:	18fb      	adds	r3, r7, r3
    9a3e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    9a40:	687b      	ldr	r3, [r7, #4]
    9a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9a44:	1c5a      	adds	r2, r3, #1
    9a46:	687b      	ldr	r3, [r7, #4]
    9a48:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    9a4a:	230e      	movs	r3, #14
    9a4c:	18fb      	adds	r3, r7, r3
    9a4e:	881b      	ldrh	r3, [r3, #0]
    9a50:	05db      	lsls	r3, r3, #23
    9a52:	0dda      	lsrs	r2, r3, #23
    9a54:	68bb      	ldr	r3, [r7, #8]
    9a56:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    9a58:	687b      	ldr	r3, [r7, #4]
    9a5a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    9a5c:	b29b      	uxth	r3, r3
    9a5e:	3b01      	subs	r3, #1
    9a60:	b29a      	uxth	r2, r3
    9a62:	687b      	ldr	r3, [r7, #4]
    9a64:	869a      	strh	r2, [r3, #52]	; 0x34
}
    9a66:	46c0      	nop			; (mov r8, r8)
    9a68:	46bd      	mov	sp, r7
    9a6a:	b004      	add	sp, #16
    9a6c:	bd80      	pop	{r7, pc}
    9a6e:	46c0      	nop			; (mov r8, r8)

00009a70 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    9a70:	b580      	push	{r7, lr}
    9a72:	b084      	sub	sp, #16
    9a74:	af00      	add	r7, sp, #0
    9a76:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9a78:	687b      	ldr	r3, [r7, #4]
    9a7a:	681b      	ldr	r3, [r3, #0]
    9a7c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    9a7e:	4b08      	ldr	r3, [pc, #32]	; (9aa0 <_spi_write_dummy+0x30>)
    9a80:	881b      	ldrh	r3, [r3, #0]
    9a82:	001a      	movs	r2, r3
    9a84:	68fb      	ldr	r3, [r7, #12]
    9a86:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    9a88:	687b      	ldr	r3, [r7, #4]
    9a8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    9a8c:	b29b      	uxth	r3, r3
    9a8e:	3b01      	subs	r3, #1
    9a90:	b29a      	uxth	r2, r3
    9a92:	687b      	ldr	r3, [r7, #4]
    9a94:	865a      	strh	r2, [r3, #50]	; 0x32
}
    9a96:	46c0      	nop			; (mov r8, r8)
    9a98:	46bd      	mov	sp, r7
    9a9a:	b004      	add	sp, #16
    9a9c:	bd80      	pop	{r7, pc}
    9a9e:	46c0      	nop			; (mov r8, r8)
    9aa0:	200010b4 	.word	0x200010b4

00009aa4 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    9aa4:	b580      	push	{r7, lr}
    9aa6:	b084      	sub	sp, #16
    9aa8:	af00      	add	r7, sp, #0
    9aaa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9aac:	687b      	ldr	r3, [r7, #4]
    9aae:	681b      	ldr	r3, [r3, #0]
    9ab0:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    9ab2:	230a      	movs	r3, #10
    9ab4:	18fb      	adds	r3, r7, r3
    9ab6:	2200      	movs	r2, #0
    9ab8:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    9aba:	68fb      	ldr	r3, [r7, #12]
    9abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9abe:	230a      	movs	r3, #10
    9ac0:	18fb      	adds	r3, r7, r3
    9ac2:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    9ac4:	687b      	ldr	r3, [r7, #4]
    9ac6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    9ac8:	b29b      	uxth	r3, r3
    9aca:	3b01      	subs	r3, #1
    9acc:	b29a      	uxth	r2, r3
    9ace:	687b      	ldr	r3, [r7, #4]
    9ad0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    9ad2:	46c0      	nop			; (mov r8, r8)
    9ad4:	46bd      	mov	sp, r7
    9ad6:	b004      	add	sp, #16
    9ad8:	bd80      	pop	{r7, pc}
    9ada:	46c0      	nop			; (mov r8, r8)

00009adc <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    9adc:	b580      	push	{r7, lr}
    9ade:	b084      	sub	sp, #16
    9ae0:	af00      	add	r7, sp, #0
    9ae2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9ae4:	687b      	ldr	r3, [r7, #4]
    9ae6:	681b      	ldr	r3, [r3, #0]
    9ae8:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    9aea:	68fb      	ldr	r3, [r7, #12]
    9aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9aee:	b29a      	uxth	r2, r3
    9af0:	230a      	movs	r3, #10
    9af2:	18fb      	adds	r3, r7, r3
    9af4:	05d2      	lsls	r2, r2, #23
    9af6:	0dd2      	lsrs	r2, r2, #23
    9af8:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    9afa:	687b      	ldr	r3, [r7, #4]
    9afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9afe:	220a      	movs	r2, #10
    9b00:	18ba      	adds	r2, r7, r2
    9b02:	8812      	ldrh	r2, [r2, #0]
    9b04:	b2d2      	uxtb	r2, r2
    9b06:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    9b08:	687b      	ldr	r3, [r7, #4]
    9b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9b0c:	1c5a      	adds	r2, r3, #1
    9b0e:	687b      	ldr	r3, [r7, #4]
    9b10:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9b12:	687b      	ldr	r3, [r7, #4]
    9b14:	799b      	ldrb	r3, [r3, #6]
    9b16:	2b01      	cmp	r3, #1
    9b18:	d10d      	bne.n	9b36 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    9b1a:	687b      	ldr	r3, [r7, #4]
    9b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9b1e:	220a      	movs	r2, #10
    9b20:	18ba      	adds	r2, r7, r2
    9b22:	8812      	ldrh	r2, [r2, #0]
    9b24:	0a12      	lsrs	r2, r2, #8
    9b26:	b292      	uxth	r2, r2
    9b28:	b2d2      	uxtb	r2, r2
    9b2a:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    9b2c:	687b      	ldr	r3, [r7, #4]
    9b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9b30:	1c5a      	adds	r2, r3, #1
    9b32:	687b      	ldr	r3, [r7, #4]
    9b34:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    9b36:	687b      	ldr	r3, [r7, #4]
    9b38:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    9b3a:	b29b      	uxth	r3, r3
    9b3c:	3b01      	subs	r3, #1
    9b3e:	b29a      	uxth	r2, r3
    9b40:	687b      	ldr	r3, [r7, #4]
    9b42:	861a      	strh	r2, [r3, #48]	; 0x30
}
    9b44:	46c0      	nop			; (mov r8, r8)
    9b46:	46bd      	mov	sp, r7
    9b48:	b004      	add	sp, #16
    9b4a:	bd80      	pop	{r7, pc}

00009b4c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    9b4c:	b580      	push	{r7, lr}
    9b4e:	b086      	sub	sp, #24
    9b50:	af00      	add	r7, sp, #0
    9b52:	0002      	movs	r2, r0
    9b54:	1dfb      	adds	r3, r7, #7
    9b56:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    9b58:	1dfb      	adds	r3, r7, #7
    9b5a:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    9b5c:	4bb9      	ldr	r3, [pc, #740]	; (9e44 <_spi_interrupt_handler+0x2f8>)
    9b5e:	0092      	lsls	r2, r2, #2
    9b60:	58d3      	ldr	r3, [r2, r3]
    9b62:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9b64:	697b      	ldr	r3, [r7, #20]
    9b66:	681b      	ldr	r3, [r3, #0]
    9b68:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    9b6a:	697b      	ldr	r3, [r7, #20]
    9b6c:	2237      	movs	r2, #55	; 0x37
    9b6e:	5c9a      	ldrb	r2, [r3, r2]
    9b70:	697b      	ldr	r3, [r7, #20]
    9b72:	2136      	movs	r1, #54	; 0x36
    9b74:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    9b76:	230f      	movs	r3, #15
    9b78:	18fb      	adds	r3, r7, r3
    9b7a:	400a      	ands	r2, r1
    9b7c:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    9b7e:	693b      	ldr	r3, [r7, #16]
    9b80:	7e1b      	ldrb	r3, [r3, #24]
    9b82:	b2da      	uxtb	r2, r3
    9b84:	230c      	movs	r3, #12
    9b86:	18fb      	adds	r3, r7, r3
    9b88:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    9b8a:	693b      	ldr	r3, [r7, #16]
    9b8c:	7d9b      	ldrb	r3, [r3, #22]
    9b8e:	b2db      	uxtb	r3, r3
    9b90:	b29a      	uxth	r2, r3
    9b92:	230c      	movs	r3, #12
    9b94:	18fb      	adds	r3, r7, r3
    9b96:	210c      	movs	r1, #12
    9b98:	1879      	adds	r1, r7, r1
    9b9a:	8809      	ldrh	r1, [r1, #0]
    9b9c:	400a      	ands	r2, r1
    9b9e:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    9ba0:	230c      	movs	r3, #12
    9ba2:	18fb      	adds	r3, r7, r3
    9ba4:	881b      	ldrh	r3, [r3, #0]
    9ba6:	2201      	movs	r2, #1
    9ba8:	4013      	ands	r3, r2
    9baa:	d041      	beq.n	9c30 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    9bac:	697b      	ldr	r3, [r7, #20]
    9bae:	795b      	ldrb	r3, [r3, #5]
    9bb0:	2b01      	cmp	r3, #1
    9bb2:	d110      	bne.n	9bd6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    9bb4:	697b      	ldr	r3, [r7, #20]
    9bb6:	7a5b      	ldrb	r3, [r3, #9]
    9bb8:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    9bba:	2b00      	cmp	r3, #0
    9bbc:	d10b      	bne.n	9bd6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    9bbe:	697b      	ldr	r3, [r7, #20]
    9bc0:	0018      	movs	r0, r3
    9bc2:	4ba1      	ldr	r3, [pc, #644]	; (9e48 <_spi_interrupt_handler+0x2fc>)
    9bc4:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    9bc6:	697b      	ldr	r3, [r7, #20]
    9bc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    9bca:	b29b      	uxth	r3, r3
    9bcc:	2b00      	cmp	r3, #0
    9bce:	d102      	bne.n	9bd6 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    9bd0:	693b      	ldr	r3, [r7, #16]
    9bd2:	2201      	movs	r2, #1
    9bd4:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    9bd6:	697b      	ldr	r3, [r7, #20]
    9bd8:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    9bda:	2b01      	cmp	r3, #1
    9bdc:	d104      	bne.n	9be8 <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    9bde:	697b      	ldr	r3, [r7, #20]
    9be0:	7a5b      	ldrb	r3, [r3, #9]
    9be2:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    9be4:	2b00      	cmp	r3, #0
    9be6:	d108      	bne.n	9bfa <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    9be8:	697b      	ldr	r3, [r7, #20]
    9bea:	795b      	ldrb	r3, [r3, #5]
    9bec:	2b00      	cmp	r3, #0
    9bee:	d11f      	bne.n	9c30 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    9bf0:	697b      	ldr	r3, [r7, #20]
    9bf2:	7a5b      	ldrb	r3, [r3, #9]
    9bf4:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    9bf6:	2b00      	cmp	r3, #0
    9bf8:	d01a      	beq.n	9c30 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    9bfa:	697b      	ldr	r3, [r7, #20]
    9bfc:	0018      	movs	r0, r3
    9bfe:	4b93      	ldr	r3, [pc, #588]	; (9e4c <_spi_interrupt_handler+0x300>)
    9c00:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    9c02:	697b      	ldr	r3, [r7, #20]
    9c04:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    9c06:	b29b      	uxth	r3, r3
    9c08:	2b00      	cmp	r3, #0
    9c0a:	d111      	bne.n	9c30 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    9c0c:	693b      	ldr	r3, [r7, #16]
    9c0e:	2201      	movs	r2, #1
    9c10:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    9c12:	697b      	ldr	r3, [r7, #20]
    9c14:	7a5b      	ldrb	r3, [r3, #9]
    9c16:	b2db      	uxtb	r3, r3
    9c18:	2b01      	cmp	r3, #1
    9c1a:	d109      	bne.n	9c30 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    9c1c:	697b      	ldr	r3, [r7, #20]
    9c1e:	79db      	ldrb	r3, [r3, #7]
    9c20:	2201      	movs	r2, #1
    9c22:	4053      	eors	r3, r2
    9c24:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    9c26:	2b00      	cmp	r3, #0
    9c28:	d002      	beq.n	9c30 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    9c2a:	693b      	ldr	r3, [r7, #16]
    9c2c:	2202      	movs	r2, #2
    9c2e:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    9c30:	230c      	movs	r3, #12
    9c32:	18fb      	adds	r3, r7, r3
    9c34:	881b      	ldrh	r3, [r3, #0]
    9c36:	2204      	movs	r2, #4
    9c38:	4013      	ands	r3, r2
    9c3a:	d100      	bne.n	9c3e <_spi_interrupt_handler+0xf2>
    9c3c:	e07e      	b.n	9d3c <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9c3e:	693b      	ldr	r3, [r7, #16]
    9c40:	8b5b      	ldrh	r3, [r3, #26]
    9c42:	b29b      	uxth	r3, r3
    9c44:	001a      	movs	r2, r3
    9c46:	2304      	movs	r3, #4
    9c48:	4013      	ands	r3, r2
    9c4a:	d022      	beq.n	9c92 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    9c4c:	697b      	ldr	r3, [r7, #20]
    9c4e:	7a5b      	ldrb	r3, [r3, #9]
    9c50:	b2db      	uxtb	r3, r3
    9c52:	2b01      	cmp	r3, #1
    9c54:	d014      	beq.n	9c80 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    9c56:	697b      	ldr	r3, [r7, #20]
    9c58:	2238      	movs	r2, #56	; 0x38
    9c5a:	211e      	movs	r1, #30
    9c5c:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    9c5e:	697b      	ldr	r3, [r7, #20]
    9c60:	2203      	movs	r2, #3
    9c62:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    9c64:	693b      	ldr	r3, [r7, #16]
    9c66:	2205      	movs	r2, #5
    9c68:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    9c6a:	230f      	movs	r3, #15
    9c6c:	18fb      	adds	r3, r7, r3
    9c6e:	781b      	ldrb	r3, [r3, #0]
    9c70:	2208      	movs	r2, #8
    9c72:	4013      	ands	r3, r2
    9c74:	d004      	beq.n	9c80 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    9c76:	697b      	ldr	r3, [r7, #20]
    9c78:	699b      	ldr	r3, [r3, #24]
    9c7a:	697a      	ldr	r2, [r7, #20]
    9c7c:	0010      	movs	r0, r2
    9c7e:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    9c80:	693b      	ldr	r3, [r7, #16]
    9c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9c84:	230a      	movs	r3, #10
    9c86:	18fb      	adds	r3, r7, r3
    9c88:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9c8a:	693b      	ldr	r3, [r7, #16]
    9c8c:	2204      	movs	r2, #4
    9c8e:	835a      	strh	r2, [r3, #26]
    9c90:	e054      	b.n	9d3c <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    9c92:	697b      	ldr	r3, [r7, #20]
    9c94:	7a5b      	ldrb	r3, [r3, #9]
    9c96:	b2db      	uxtb	r3, r3
    9c98:	2b01      	cmp	r3, #1
    9c9a:	d11e      	bne.n	9cda <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    9c9c:	697b      	ldr	r3, [r7, #20]
    9c9e:	0018      	movs	r0, r3
    9ca0:	4b6b      	ldr	r3, [pc, #428]	; (9e50 <_spi_interrupt_handler+0x304>)
    9ca2:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    9ca4:	697b      	ldr	r3, [r7, #20]
    9ca6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    9ca8:	b29b      	uxth	r3, r3
    9caa:	2b00      	cmp	r3, #0
    9cac:	d146      	bne.n	9d3c <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    9cae:	693b      	ldr	r3, [r7, #16]
    9cb0:	2204      	movs	r2, #4
    9cb2:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    9cb4:	697b      	ldr	r3, [r7, #20]
    9cb6:	2238      	movs	r2, #56	; 0x38
    9cb8:	2100      	movs	r1, #0
    9cba:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    9cbc:	697b      	ldr	r3, [r7, #20]
    9cbe:	2203      	movs	r2, #3
    9cc0:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    9cc2:	230f      	movs	r3, #15
    9cc4:	18fb      	adds	r3, r7, r3
    9cc6:	781b      	ldrb	r3, [r3, #0]
    9cc8:	2201      	movs	r2, #1
    9cca:	4013      	ands	r3, r2
    9ccc:	d036      	beq.n	9d3c <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    9cce:	697b      	ldr	r3, [r7, #20]
    9cd0:	68db      	ldr	r3, [r3, #12]
    9cd2:	697a      	ldr	r2, [r7, #20]
    9cd4:	0010      	movs	r0, r2
    9cd6:	4798      	blx	r3
    9cd8:	e030      	b.n	9d3c <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    9cda:	697b      	ldr	r3, [r7, #20]
    9cdc:	0018      	movs	r0, r3
    9cde:	4b5d      	ldr	r3, [pc, #372]	; (9e54 <_spi_interrupt_handler+0x308>)
    9ce0:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    9ce2:	697b      	ldr	r3, [r7, #20]
    9ce4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    9ce6:	b29b      	uxth	r3, r3
    9ce8:	2b00      	cmp	r3, #0
    9cea:	d127      	bne.n	9d3c <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    9cec:	697b      	ldr	r3, [r7, #20]
    9cee:	2238      	movs	r2, #56	; 0x38
    9cf0:	2100      	movs	r1, #0
    9cf2:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    9cf4:	693b      	ldr	r3, [r7, #16]
    9cf6:	2204      	movs	r2, #4
    9cf8:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    9cfa:	697b      	ldr	r3, [r7, #20]
    9cfc:	7a5b      	ldrb	r3, [r3, #9]
    9cfe:	b2db      	uxtb	r3, r3
    9d00:	2b02      	cmp	r3, #2
    9d02:	d10b      	bne.n	9d1c <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    9d04:	230f      	movs	r3, #15
    9d06:	18fb      	adds	r3, r7, r3
    9d08:	781b      	ldrb	r3, [r3, #0]
    9d0a:	2204      	movs	r2, #4
    9d0c:	4013      	ands	r3, r2
    9d0e:	d015      	beq.n	9d3c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    9d10:	697b      	ldr	r3, [r7, #20]
    9d12:	695b      	ldr	r3, [r3, #20]
    9d14:	697a      	ldr	r2, [r7, #20]
    9d16:	0010      	movs	r0, r2
    9d18:	4798      	blx	r3
    9d1a:	e00f      	b.n	9d3c <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    9d1c:	697b      	ldr	r3, [r7, #20]
    9d1e:	7a5b      	ldrb	r3, [r3, #9]
    9d20:	b2db      	uxtb	r3, r3
    9d22:	2b00      	cmp	r3, #0
    9d24:	d10a      	bne.n	9d3c <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    9d26:	230f      	movs	r3, #15
    9d28:	18fb      	adds	r3, r7, r3
    9d2a:	781b      	ldrb	r3, [r3, #0]
    9d2c:	2202      	movs	r2, #2
    9d2e:	4013      	ands	r3, r2
    9d30:	d004      	beq.n	9d3c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    9d32:	697b      	ldr	r3, [r7, #20]
    9d34:	691b      	ldr	r3, [r3, #16]
    9d36:	697a      	ldr	r2, [r7, #20]
    9d38:	0010      	movs	r0, r2
    9d3a:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    9d3c:	230c      	movs	r3, #12
    9d3e:	18fb      	adds	r3, r7, r3
    9d40:	881b      	ldrh	r3, [r3, #0]
    9d42:	2202      	movs	r2, #2
    9d44:	4013      	ands	r3, r2
    9d46:	d046      	beq.n	9dd6 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    9d48:	697b      	ldr	r3, [r7, #20]
    9d4a:	795b      	ldrb	r3, [r3, #5]
    9d4c:	2b00      	cmp	r3, #0
    9d4e:	d11d      	bne.n	9d8c <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    9d50:	693b      	ldr	r3, [r7, #16]
    9d52:	2207      	movs	r2, #7
    9d54:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    9d56:	693b      	ldr	r3, [r7, #16]
    9d58:	2202      	movs	r2, #2
    9d5a:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    9d5c:	697b      	ldr	r3, [r7, #20]
    9d5e:	2203      	movs	r2, #3
    9d60:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    9d62:	697b      	ldr	r3, [r7, #20]
    9d64:	2200      	movs	r2, #0
    9d66:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    9d68:	697b      	ldr	r3, [r7, #20]
    9d6a:	2200      	movs	r2, #0
    9d6c:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    9d6e:	697b      	ldr	r3, [r7, #20]
    9d70:	2238      	movs	r2, #56	; 0x38
    9d72:	2100      	movs	r1, #0
    9d74:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    9d76:	230f      	movs	r3, #15
    9d78:	18fb      	adds	r3, r7, r3
    9d7a:	781b      	ldrb	r3, [r3, #0]
    9d7c:	2210      	movs	r2, #16
    9d7e:	4013      	ands	r3, r2
    9d80:	d004      	beq.n	9d8c <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    9d82:	697b      	ldr	r3, [r7, #20]
    9d84:	69db      	ldr	r3, [r3, #28]
    9d86:	697a      	ldr	r2, [r7, #20]
    9d88:	0010      	movs	r0, r2
    9d8a:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    9d8c:	697b      	ldr	r3, [r7, #20]
    9d8e:	795b      	ldrb	r3, [r3, #5]
    9d90:	2b01      	cmp	r3, #1
    9d92:	d120      	bne.n	9dd6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    9d94:	697b      	ldr	r3, [r7, #20]
    9d96:	7a5b      	ldrb	r3, [r3, #9]
    9d98:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    9d9a:	2b01      	cmp	r3, #1
    9d9c:	d11b      	bne.n	9dd6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    9d9e:	697b      	ldr	r3, [r7, #20]
    9da0:	79db      	ldrb	r3, [r3, #7]
    9da2:	2201      	movs	r2, #1
    9da4:	4053      	eors	r3, r2
    9da6:	b2db      	uxtb	r3, r3
    9da8:	2b00      	cmp	r3, #0
    9daa:	d014      	beq.n	9dd6 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    9dac:	693b      	ldr	r3, [r7, #16]
    9dae:	2202      	movs	r2, #2
    9db0:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    9db2:	697b      	ldr	r3, [r7, #20]
    9db4:	2203      	movs	r2, #3
    9db6:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    9db8:	697b      	ldr	r3, [r7, #20]
    9dba:	2238      	movs	r2, #56	; 0x38
    9dbc:	2100      	movs	r1, #0
    9dbe:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    9dc0:	230f      	movs	r3, #15
    9dc2:	18fb      	adds	r3, r7, r3
    9dc4:	781b      	ldrb	r3, [r3, #0]
    9dc6:	2201      	movs	r2, #1
    9dc8:	4013      	ands	r3, r2
    9dca:	d004      	beq.n	9dd6 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    9dcc:	697b      	ldr	r3, [r7, #20]
    9dce:	68db      	ldr	r3, [r3, #12]
    9dd0:	697a      	ldr	r2, [r7, #20]
    9dd2:	0010      	movs	r0, r2
    9dd4:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    9dd6:	230c      	movs	r3, #12
    9dd8:	18fb      	adds	r3, r7, r3
    9dda:	881b      	ldrh	r3, [r3, #0]
    9ddc:	2208      	movs	r2, #8
    9dde:	4013      	ands	r3, r2
    9de0:	d014      	beq.n	9e0c <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    9de2:	697b      	ldr	r3, [r7, #20]
    9de4:	795b      	ldrb	r3, [r3, #5]
    9de6:	2b00      	cmp	r3, #0
    9de8:	d110      	bne.n	9e0c <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    9dea:	693b      	ldr	r3, [r7, #16]
    9dec:	2208      	movs	r2, #8
    9dee:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    9df0:	693b      	ldr	r3, [r7, #16]
    9df2:	2208      	movs	r2, #8
    9df4:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    9df6:	230f      	movs	r3, #15
    9df8:	18fb      	adds	r3, r7, r3
    9dfa:	781b      	ldrb	r3, [r3, #0]
    9dfc:	2220      	movs	r2, #32
    9dfe:	4013      	ands	r3, r2
    9e00:	d004      	beq.n	9e0c <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    9e02:	697b      	ldr	r3, [r7, #20]
    9e04:	6a1b      	ldr	r3, [r3, #32]
    9e06:	697a      	ldr	r2, [r7, #20]
    9e08:	0010      	movs	r0, r2
    9e0a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    9e0c:	230c      	movs	r3, #12
    9e0e:	18fb      	adds	r3, r7, r3
    9e10:	881b      	ldrh	r3, [r3, #0]
    9e12:	2280      	movs	r2, #128	; 0x80
    9e14:	4013      	ands	r3, r2
    9e16:	d010      	beq.n	9e3a <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    9e18:	693b      	ldr	r3, [r7, #16]
    9e1a:	2280      	movs	r2, #128	; 0x80
    9e1c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    9e1e:	693b      	ldr	r3, [r7, #16]
    9e20:	2280      	movs	r2, #128	; 0x80
    9e22:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    9e24:	230f      	movs	r3, #15
    9e26:	18fb      	adds	r3, r7, r3
    9e28:	781b      	ldrb	r3, [r3, #0]
    9e2a:	2240      	movs	r2, #64	; 0x40
    9e2c:	4013      	ands	r3, r2
    9e2e:	d004      	beq.n	9e3a <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    9e30:	697b      	ldr	r3, [r7, #20]
    9e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9e34:	697a      	ldr	r2, [r7, #20]
    9e36:	0010      	movs	r0, r2
    9e38:	4798      	blx	r3
		}
	}
#  endif
}
    9e3a:	46c0      	nop			; (mov r8, r8)
    9e3c:	46bd      	mov	sp, r7
    9e3e:	b006      	add	sp, #24
    9e40:	bd80      	pop	{r7, pc}
    9e42:	46c0      	nop			; (mov r8, r8)
    9e44:	200010b8 	.word	0x200010b8
    9e48:	00009a71 	.word	0x00009a71
    9e4c:	000099f5 	.word	0x000099f5
    9e50:	00009aa5 	.word	0x00009aa5
    9e54:	00009add 	.word	0x00009add

00009e58 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    9e58:	b580      	push	{r7, lr}
    9e5a:	b082      	sub	sp, #8
    9e5c:	af00      	add	r7, sp, #0
    9e5e:	0002      	movs	r2, r0
    9e60:	1dfb      	adds	r3, r7, #7
    9e62:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    9e64:	46c0      	nop			; (mov r8, r8)
    9e66:	46bd      	mov	sp, r7
    9e68:	b002      	add	sp, #8
    9e6a:	bd80      	pop	{r7, pc}

00009e6c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    9e6c:	b580      	push	{r7, lr}
    9e6e:	b084      	sub	sp, #16
    9e70:	af00      	add	r7, sp, #0
    9e72:	0002      	movs	r2, r0
    9e74:	6039      	str	r1, [r7, #0]
    9e76:	1dfb      	adds	r3, r7, #7
    9e78:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    9e7a:	4b13      	ldr	r3, [pc, #76]	; (9ec8 <_sercom_set_handler+0x5c>)
    9e7c:	781b      	ldrb	r3, [r3, #0]
    9e7e:	2201      	movs	r2, #1
    9e80:	4053      	eors	r3, r2
    9e82:	b2db      	uxtb	r3, r3
    9e84:	2b00      	cmp	r3, #0
    9e86:	d015      	beq.n	9eb4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9e88:	2300      	movs	r3, #0
    9e8a:	60fb      	str	r3, [r7, #12]
    9e8c:	e00c      	b.n	9ea8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    9e8e:	4b0f      	ldr	r3, [pc, #60]	; (9ecc <_sercom_set_handler+0x60>)
    9e90:	68fa      	ldr	r2, [r7, #12]
    9e92:	0092      	lsls	r2, r2, #2
    9e94:	490e      	ldr	r1, [pc, #56]	; (9ed0 <_sercom_set_handler+0x64>)
    9e96:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    9e98:	4b0e      	ldr	r3, [pc, #56]	; (9ed4 <_sercom_set_handler+0x68>)
    9e9a:	68fa      	ldr	r2, [r7, #12]
    9e9c:	0092      	lsls	r2, r2, #2
    9e9e:	2100      	movs	r1, #0
    9ea0:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9ea2:	68fb      	ldr	r3, [r7, #12]
    9ea4:	3301      	adds	r3, #1
    9ea6:	60fb      	str	r3, [r7, #12]
    9ea8:	68fb      	ldr	r3, [r7, #12]
    9eaa:	2b05      	cmp	r3, #5
    9eac:	d9ef      	bls.n	9e8e <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    9eae:	4b06      	ldr	r3, [pc, #24]	; (9ec8 <_sercom_set_handler+0x5c>)
    9eb0:	2201      	movs	r2, #1
    9eb2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    9eb4:	1dfb      	adds	r3, r7, #7
    9eb6:	781a      	ldrb	r2, [r3, #0]
    9eb8:	4b04      	ldr	r3, [pc, #16]	; (9ecc <_sercom_set_handler+0x60>)
    9eba:	0092      	lsls	r2, r2, #2
    9ebc:	6839      	ldr	r1, [r7, #0]
    9ebe:	50d1      	str	r1, [r2, r3]
}
    9ec0:	46c0      	nop			; (mov r8, r8)
    9ec2:	46bd      	mov	sp, r7
    9ec4:	b004      	add	sp, #16
    9ec6:	bd80      	pop	{r7, pc}
    9ec8:	20000dcc 	.word	0x20000dcc
    9ecc:	20000dd0 	.word	0x20000dd0
    9ed0:	00009e59 	.word	0x00009e59
    9ed4:	200010b8 	.word	0x200010b8

00009ed8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    9ed8:	b590      	push	{r4, r7, lr}
    9eda:	b085      	sub	sp, #20
    9edc:	af00      	add	r7, sp, #0
    9ede:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    9ee0:	2308      	movs	r3, #8
    9ee2:	18fa      	adds	r2, r7, r3
    9ee4:	4b0c      	ldr	r3, [pc, #48]	; (9f18 <_sercom_get_interrupt_vector+0x40>)
    9ee6:	0010      	movs	r0, r2
    9ee8:	0019      	movs	r1, r3
    9eea:	2306      	movs	r3, #6
    9eec:	001a      	movs	r2, r3
    9eee:	4b0b      	ldr	r3, [pc, #44]	; (9f1c <_sercom_get_interrupt_vector+0x44>)
    9ef0:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    9ef2:	230f      	movs	r3, #15
    9ef4:	18fc      	adds	r4, r7, r3
    9ef6:	687b      	ldr	r3, [r7, #4]
    9ef8:	0018      	movs	r0, r3
    9efa:	4b09      	ldr	r3, [pc, #36]	; (9f20 <_sercom_get_interrupt_vector+0x48>)
    9efc:	4798      	blx	r3
    9efe:	0003      	movs	r3, r0
    9f00:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    9f02:	230f      	movs	r3, #15
    9f04:	18fb      	adds	r3, r7, r3
    9f06:	781b      	ldrb	r3, [r3, #0]
    9f08:	2208      	movs	r2, #8
    9f0a:	18ba      	adds	r2, r7, r2
    9f0c:	5cd3      	ldrb	r3, [r2, r3]
    9f0e:	b25b      	sxtb	r3, r3
}
    9f10:	0018      	movs	r0, r3
    9f12:	46bd      	mov	sp, r7
    9f14:	b005      	add	sp, #20
    9f16:	bd90      	pop	{r4, r7, pc}
    9f18:	0000cb40 	.word	0x0000cb40
    9f1c:	0000c209 	.word	0x0000c209
    9f20:	00002b4d 	.word	0x00002b4d

00009f24 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    9f24:	b580      	push	{r7, lr}
    9f26:	af00      	add	r7, sp, #0
    9f28:	4b03      	ldr	r3, [pc, #12]	; (9f38 <SERCOM0_Handler+0x14>)
    9f2a:	681b      	ldr	r3, [r3, #0]
    9f2c:	2000      	movs	r0, #0
    9f2e:	4798      	blx	r3
    9f30:	46c0      	nop			; (mov r8, r8)
    9f32:	46bd      	mov	sp, r7
    9f34:	bd80      	pop	{r7, pc}
    9f36:	46c0      	nop			; (mov r8, r8)
    9f38:	20000dd0 	.word	0x20000dd0

00009f3c <SERCOM1_Handler>:
    9f3c:	b580      	push	{r7, lr}
    9f3e:	af00      	add	r7, sp, #0
    9f40:	4b03      	ldr	r3, [pc, #12]	; (9f50 <SERCOM1_Handler+0x14>)
    9f42:	685b      	ldr	r3, [r3, #4]
    9f44:	2001      	movs	r0, #1
    9f46:	4798      	blx	r3
    9f48:	46c0      	nop			; (mov r8, r8)
    9f4a:	46bd      	mov	sp, r7
    9f4c:	bd80      	pop	{r7, pc}
    9f4e:	46c0      	nop			; (mov r8, r8)
    9f50:	20000dd0 	.word	0x20000dd0

00009f54 <SERCOM2_Handler>:
    9f54:	b580      	push	{r7, lr}
    9f56:	af00      	add	r7, sp, #0
    9f58:	4b03      	ldr	r3, [pc, #12]	; (9f68 <SERCOM2_Handler+0x14>)
    9f5a:	689b      	ldr	r3, [r3, #8]
    9f5c:	2002      	movs	r0, #2
    9f5e:	4798      	blx	r3
    9f60:	46c0      	nop			; (mov r8, r8)
    9f62:	46bd      	mov	sp, r7
    9f64:	bd80      	pop	{r7, pc}
    9f66:	46c0      	nop			; (mov r8, r8)
    9f68:	20000dd0 	.word	0x20000dd0

00009f6c <SERCOM3_Handler>:
    9f6c:	b580      	push	{r7, lr}
    9f6e:	af00      	add	r7, sp, #0
    9f70:	4b03      	ldr	r3, [pc, #12]	; (9f80 <SERCOM3_Handler+0x14>)
    9f72:	68db      	ldr	r3, [r3, #12]
    9f74:	2003      	movs	r0, #3
    9f76:	4798      	blx	r3
    9f78:	46c0      	nop			; (mov r8, r8)
    9f7a:	46bd      	mov	sp, r7
    9f7c:	bd80      	pop	{r7, pc}
    9f7e:	46c0      	nop			; (mov r8, r8)
    9f80:	20000dd0 	.word	0x20000dd0

00009f84 <SERCOM4_Handler>:
    9f84:	b580      	push	{r7, lr}
    9f86:	af00      	add	r7, sp, #0
    9f88:	4b03      	ldr	r3, [pc, #12]	; (9f98 <SERCOM4_Handler+0x14>)
    9f8a:	691b      	ldr	r3, [r3, #16]
    9f8c:	2004      	movs	r0, #4
    9f8e:	4798      	blx	r3
    9f90:	46c0      	nop			; (mov r8, r8)
    9f92:	46bd      	mov	sp, r7
    9f94:	bd80      	pop	{r7, pc}
    9f96:	46c0      	nop			; (mov r8, r8)
    9f98:	20000dd0 	.word	0x20000dd0

00009f9c <SERCOM5_Handler>:
    9f9c:	b580      	push	{r7, lr}
    9f9e:	af00      	add	r7, sp, #0
    9fa0:	4b03      	ldr	r3, [pc, #12]	; (9fb0 <SERCOM5_Handler+0x14>)
    9fa2:	695b      	ldr	r3, [r3, #20]
    9fa4:	2005      	movs	r0, #5
    9fa6:	4798      	blx	r3
    9fa8:	46c0      	nop			; (mov r8, r8)
    9faa:	46bd      	mov	sp, r7
    9fac:	bd80      	pop	{r7, pc}
    9fae:	46c0      	nop			; (mov r8, r8)
    9fb0:	20000dd0 	.word	0x20000dd0

00009fb4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    9fb4:	b580      	push	{r7, lr}
    9fb6:	b084      	sub	sp, #16
    9fb8:	af00      	add	r7, sp, #0
    9fba:	0002      	movs	r2, r0
    9fbc:	1dfb      	adds	r3, r7, #7
    9fbe:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    9fc0:	230f      	movs	r3, #15
    9fc2:	18fb      	adds	r3, r7, r3
    9fc4:	1dfa      	adds	r2, r7, #7
    9fc6:	7812      	ldrb	r2, [r2, #0]
    9fc8:	0952      	lsrs	r2, r2, #5
    9fca:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    9fcc:	230f      	movs	r3, #15
    9fce:	18fb      	adds	r3, r7, r3
    9fd0:	781b      	ldrb	r3, [r3, #0]
    9fd2:	2b00      	cmp	r3, #0
    9fd4:	d10c      	bne.n	9ff0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    9fd6:	4b09      	ldr	r3, [pc, #36]	; (9ffc <_extint_get_eic_from_channel+0x48>)
    9fd8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    9fda:	230f      	movs	r3, #15
    9fdc:	18fb      	adds	r3, r7, r3
    9fde:	781b      	ldrb	r3, [r3, #0]
    9fe0:	009b      	lsls	r3, r3, #2
    9fe2:	2210      	movs	r2, #16
    9fe4:	4694      	mov	ip, r2
    9fe6:	44bc      	add	ip, r7
    9fe8:	4463      	add	r3, ip
    9fea:	3b08      	subs	r3, #8
    9fec:	681b      	ldr	r3, [r3, #0]
    9fee:	e000      	b.n	9ff2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    9ff0:	2300      	movs	r3, #0
	}
}
    9ff2:	0018      	movs	r0, r3
    9ff4:	46bd      	mov	sp, r7
    9ff6:	b004      	add	sp, #16
    9ff8:	bd80      	pop	{r7, pc}
    9ffa:	46c0      	nop			; (mov r8, r8)
    9ffc:	40001800 	.word	0x40001800

0000a000 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    a000:	b580      	push	{r7, lr}
    a002:	b084      	sub	sp, #16
    a004:	af00      	add	r7, sp, #0
    a006:	0002      	movs	r2, r0
    a008:	1dfb      	adds	r3, r7, #7
    a00a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    a00c:	1dfb      	adds	r3, r7, #7
    a00e:	781b      	ldrb	r3, [r3, #0]
    a010:	0018      	movs	r0, r3
    a012:	4b0b      	ldr	r3, [pc, #44]	; (a040 <extint_chan_is_detected+0x40>)
    a014:	4798      	blx	r3
    a016:	0003      	movs	r3, r0
    a018:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    a01a:	1dfb      	adds	r3, r7, #7
    a01c:	781b      	ldrb	r3, [r3, #0]
    a01e:	221f      	movs	r2, #31
    a020:	4013      	ands	r3, r2
    a022:	2201      	movs	r2, #1
    a024:	409a      	lsls	r2, r3
    a026:	0013      	movs	r3, r2
    a028:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    a02a:	68fb      	ldr	r3, [r7, #12]
    a02c:	691b      	ldr	r3, [r3, #16]
    a02e:	68ba      	ldr	r2, [r7, #8]
    a030:	4013      	ands	r3, r2
    a032:	1e5a      	subs	r2, r3, #1
    a034:	4193      	sbcs	r3, r2
    a036:	b2db      	uxtb	r3, r3
}
    a038:	0018      	movs	r0, r3
    a03a:	46bd      	mov	sp, r7
    a03c:	b004      	add	sp, #16
    a03e:	bd80      	pop	{r7, pc}
    a040:	00009fb5 	.word	0x00009fb5

0000a044 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    a044:	b580      	push	{r7, lr}
    a046:	b084      	sub	sp, #16
    a048:	af00      	add	r7, sp, #0
    a04a:	0002      	movs	r2, r0
    a04c:	1dfb      	adds	r3, r7, #7
    a04e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    a050:	1dfb      	adds	r3, r7, #7
    a052:	781b      	ldrb	r3, [r3, #0]
    a054:	0018      	movs	r0, r3
    a056:	4b09      	ldr	r3, [pc, #36]	; (a07c <extint_chan_clear_detected+0x38>)
    a058:	4798      	blx	r3
    a05a:	0003      	movs	r3, r0
    a05c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    a05e:	1dfb      	adds	r3, r7, #7
    a060:	781b      	ldrb	r3, [r3, #0]
    a062:	221f      	movs	r2, #31
    a064:	4013      	ands	r3, r2
    a066:	2201      	movs	r2, #1
    a068:	409a      	lsls	r2, r3
    a06a:	0013      	movs	r3, r2
    a06c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    a06e:	68fb      	ldr	r3, [r7, #12]
    a070:	68ba      	ldr	r2, [r7, #8]
    a072:	611a      	str	r2, [r3, #16]
}
    a074:	46c0      	nop			; (mov r8, r8)
    a076:	46bd      	mov	sp, r7
    a078:	b004      	add	sp, #16
    a07a:	bd80      	pop	{r7, pc}
    a07c:	00009fb5 	.word	0x00009fb5

0000a080 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    a080:	b580      	push	{r7, lr}
    a082:	b082      	sub	sp, #8
    a084:	af00      	add	r7, sp, #0
    a086:	6078      	str	r0, [r7, #4]
    a088:	0008      	movs	r0, r1
    a08a:	0011      	movs	r1, r2
    a08c:	1cfb      	adds	r3, r7, #3
    a08e:	1c02      	adds	r2, r0, #0
    a090:	701a      	strb	r2, [r3, #0]
    a092:	1cbb      	adds	r3, r7, #2
    a094:	1c0a      	adds	r2, r1, #0
    a096:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    a098:	1cbb      	adds	r3, r7, #2
    a09a:	781b      	ldrb	r3, [r3, #0]
    a09c:	2b00      	cmp	r3, #0
    a09e:	d001      	beq.n	a0a4 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    a0a0:	2317      	movs	r3, #23
    a0a2:	e019      	b.n	a0d8 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    a0a4:	1cfb      	adds	r3, r7, #3
    a0a6:	781a      	ldrb	r2, [r3, #0]
    a0a8:	4b0d      	ldr	r3, [pc, #52]	; (a0e0 <extint_register_callback+0x60>)
    a0aa:	0092      	lsls	r2, r2, #2
    a0ac:	58d3      	ldr	r3, [r2, r3]
    a0ae:	2b00      	cmp	r3, #0
    a0b0:	d107      	bne.n	a0c2 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    a0b2:	1cfb      	adds	r3, r7, #3
    a0b4:	781a      	ldrb	r2, [r3, #0]
    a0b6:	4b0a      	ldr	r3, [pc, #40]	; (a0e0 <extint_register_callback+0x60>)
    a0b8:	0092      	lsls	r2, r2, #2
    a0ba:	6879      	ldr	r1, [r7, #4]
    a0bc:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    a0be:	2300      	movs	r3, #0
    a0c0:	e00a      	b.n	a0d8 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    a0c2:	1cfb      	adds	r3, r7, #3
    a0c4:	781a      	ldrb	r2, [r3, #0]
    a0c6:	4b06      	ldr	r3, [pc, #24]	; (a0e0 <extint_register_callback+0x60>)
    a0c8:	0092      	lsls	r2, r2, #2
    a0ca:	58d2      	ldr	r2, [r2, r3]
    a0cc:	687b      	ldr	r3, [r7, #4]
    a0ce:	429a      	cmp	r2, r3
    a0d0:	d101      	bne.n	a0d6 <extint_register_callback+0x56>
		return STATUS_OK;
    a0d2:	2300      	movs	r3, #0
    a0d4:	e000      	b.n	a0d8 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    a0d6:	231d      	movs	r3, #29
}
    a0d8:	0018      	movs	r0, r3
    a0da:	46bd      	mov	sp, r7
    a0dc:	b002      	add	sp, #8
    a0de:	bd80      	pop	{r7, pc}
    a0e0:	20000f38 	.word	0x20000f38

0000a0e4 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    a0e4:	b580      	push	{r7, lr}
    a0e6:	b084      	sub	sp, #16
    a0e8:	af00      	add	r7, sp, #0
    a0ea:	0002      	movs	r2, r0
    a0ec:	1dfb      	adds	r3, r7, #7
    a0ee:	701a      	strb	r2, [r3, #0]
    a0f0:	1dbb      	adds	r3, r7, #6
    a0f2:	1c0a      	adds	r2, r1, #0
    a0f4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    a0f6:	1dbb      	adds	r3, r7, #6
    a0f8:	781b      	ldrb	r3, [r3, #0]
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	d10e      	bne.n	a11c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    a0fe:	1dfb      	adds	r3, r7, #7
    a100:	781b      	ldrb	r3, [r3, #0]
    a102:	0018      	movs	r0, r3
    a104:	4b08      	ldr	r3, [pc, #32]	; (a128 <extint_chan_enable_callback+0x44>)
    a106:	4798      	blx	r3
    a108:	0003      	movs	r3, r0
    a10a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    a10c:	1dfb      	adds	r3, r7, #7
    a10e:	781b      	ldrb	r3, [r3, #0]
    a110:	2201      	movs	r2, #1
    a112:	409a      	lsls	r2, r3
    a114:	68fb      	ldr	r3, [r7, #12]
    a116:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    a118:	2300      	movs	r3, #0
    a11a:	e000      	b.n	a11e <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    a11c:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    a11e:	0018      	movs	r0, r3
    a120:	46bd      	mov	sp, r7
    a122:	b004      	add	sp, #16
    a124:	bd80      	pop	{r7, pc}
    a126:	46c0      	nop			; (mov r8, r8)
    a128:	00009fb5 	.word	0x00009fb5

0000a12c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    a12c:	b580      	push	{r7, lr}
    a12e:	b084      	sub	sp, #16
    a130:	af00      	add	r7, sp, #0
    a132:	0002      	movs	r2, r0
    a134:	1dfb      	adds	r3, r7, #7
    a136:	701a      	strb	r2, [r3, #0]
    a138:	1dbb      	adds	r3, r7, #6
    a13a:	1c0a      	adds	r2, r1, #0
    a13c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    a13e:	1dbb      	adds	r3, r7, #6
    a140:	781b      	ldrb	r3, [r3, #0]
    a142:	2b00      	cmp	r3, #0
    a144:	d10e      	bne.n	a164 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    a146:	1dfb      	adds	r3, r7, #7
    a148:	781b      	ldrb	r3, [r3, #0]
    a14a:	0018      	movs	r0, r3
    a14c:	4b08      	ldr	r3, [pc, #32]	; (a170 <extint_chan_disable_callback+0x44>)
    a14e:	4798      	blx	r3
    a150:	0003      	movs	r3, r0
    a152:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    a154:	1dfb      	adds	r3, r7, #7
    a156:	781b      	ldrb	r3, [r3, #0]
    a158:	2201      	movs	r2, #1
    a15a:	409a      	lsls	r2, r3
    a15c:	68fb      	ldr	r3, [r7, #12]
    a15e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    a160:	2300      	movs	r3, #0
    a162:	e000      	b.n	a166 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    a164:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    a166:	0018      	movs	r0, r3
    a168:	46bd      	mov	sp, r7
    a16a:	b004      	add	sp, #16
    a16c:	bd80      	pop	{r7, pc}
    a16e:	46c0      	nop			; (mov r8, r8)
    a170:	00009fb5 	.word	0x00009fb5

0000a174 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    a174:	b580      	push	{r7, lr}
    a176:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    a178:	4b15      	ldr	r3, [pc, #84]	; (a1d0 <EIC_Handler+0x5c>)
    a17a:	2200      	movs	r2, #0
    a17c:	701a      	strb	r2, [r3, #0]
    a17e:	e020      	b.n	a1c2 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    a180:	4b13      	ldr	r3, [pc, #76]	; (a1d0 <EIC_Handler+0x5c>)
    a182:	781b      	ldrb	r3, [r3, #0]
    a184:	0018      	movs	r0, r3
    a186:	4b13      	ldr	r3, [pc, #76]	; (a1d4 <EIC_Handler+0x60>)
    a188:	4798      	blx	r3
    a18a:	1e03      	subs	r3, r0, #0
    a18c:	d013      	beq.n	a1b6 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    a18e:	4b10      	ldr	r3, [pc, #64]	; (a1d0 <EIC_Handler+0x5c>)
    a190:	781b      	ldrb	r3, [r3, #0]
    a192:	0018      	movs	r0, r3
    a194:	4b10      	ldr	r3, [pc, #64]	; (a1d8 <EIC_Handler+0x64>)
    a196:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    a198:	4b0d      	ldr	r3, [pc, #52]	; (a1d0 <EIC_Handler+0x5c>)
    a19a:	781b      	ldrb	r3, [r3, #0]
    a19c:	001a      	movs	r2, r3
    a19e:	4b0f      	ldr	r3, [pc, #60]	; (a1dc <EIC_Handler+0x68>)
    a1a0:	0092      	lsls	r2, r2, #2
    a1a2:	58d3      	ldr	r3, [r2, r3]
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	d006      	beq.n	a1b6 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    a1a8:	4b09      	ldr	r3, [pc, #36]	; (a1d0 <EIC_Handler+0x5c>)
    a1aa:	781b      	ldrb	r3, [r3, #0]
    a1ac:	001a      	movs	r2, r3
    a1ae:	4b0b      	ldr	r3, [pc, #44]	; (a1dc <EIC_Handler+0x68>)
    a1b0:	0092      	lsls	r2, r2, #2
    a1b2:	58d3      	ldr	r3, [r2, r3]
    a1b4:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    a1b6:	4b06      	ldr	r3, [pc, #24]	; (a1d0 <EIC_Handler+0x5c>)
    a1b8:	781b      	ldrb	r3, [r3, #0]
    a1ba:	3301      	adds	r3, #1
    a1bc:	b2da      	uxtb	r2, r3
    a1be:	4b04      	ldr	r3, [pc, #16]	; (a1d0 <EIC_Handler+0x5c>)
    a1c0:	701a      	strb	r2, [r3, #0]
    a1c2:	4b03      	ldr	r3, [pc, #12]	; (a1d0 <EIC_Handler+0x5c>)
    a1c4:	781b      	ldrb	r3, [r3, #0]
    a1c6:	2b0f      	cmp	r3, #15
    a1c8:	d9da      	bls.n	a180 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    a1ca:	46c0      	nop			; (mov r8, r8)
    a1cc:	46bd      	mov	sp, r7
    a1ce:	bd80      	pop	{r7, pc}
    a1d0:	200010d0 	.word	0x200010d0
    a1d4:	0000a001 	.word	0x0000a001
    a1d8:	0000a045 	.word	0x0000a045
    a1dc:	20000f38 	.word	0x20000f38

0000a1e0 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    a1e0:	b580      	push	{r7, lr}
    a1e2:	b082      	sub	sp, #8
    a1e4:	af00      	add	r7, sp, #0
    a1e6:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    a1e8:	687b      	ldr	r3, [r7, #4]
    a1ea:	2b00      	cmp	r3, #0
    a1ec:	d00c      	beq.n	a208 <delay_cycles+0x28>
		SysTick->LOAD = n;
    a1ee:	4b08      	ldr	r3, [pc, #32]	; (a210 <delay_cycles+0x30>)
    a1f0:	687a      	ldr	r2, [r7, #4]
    a1f2:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    a1f4:	4b06      	ldr	r3, [pc, #24]	; (a210 <delay_cycles+0x30>)
    a1f6:	2200      	movs	r2, #0
    a1f8:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    a1fa:	46c0      	nop			; (mov r8, r8)
    a1fc:	4b04      	ldr	r3, [pc, #16]	; (a210 <delay_cycles+0x30>)
    a1fe:	681a      	ldr	r2, [r3, #0]
    a200:	2380      	movs	r3, #128	; 0x80
    a202:	025b      	lsls	r3, r3, #9
    a204:	4013      	ands	r3, r2
    a206:	d0f9      	beq.n	a1fc <delay_cycles+0x1c>
		};
	}
}
    a208:	46c0      	nop			; (mov r8, r8)
    a20a:	46bd      	mov	sp, r7
    a20c:	b002      	add	sp, #8
    a20e:	bd80      	pop	{r7, pc}
    a210:	e000e010 	.word	0xe000e010

0000a214 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    a214:	b580      	push	{r7, lr}
    a216:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    a218:	2000      	movs	r0, #0
    a21a:	4b0f      	ldr	r3, [pc, #60]	; (a258 <delay_init+0x44>)
    a21c:	4798      	blx	r3
    a21e:	0002      	movs	r2, r0
    a220:	4b0e      	ldr	r3, [pc, #56]	; (a25c <delay_init+0x48>)
    a222:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    a224:	4b0d      	ldr	r3, [pc, #52]	; (a25c <delay_init+0x48>)
    a226:	6818      	ldr	r0, [r3, #0]
    a228:	4b0d      	ldr	r3, [pc, #52]	; (a260 <delay_init+0x4c>)
    a22a:	22fa      	movs	r2, #250	; 0xfa
    a22c:	0091      	lsls	r1, r2, #2
    a22e:	4798      	blx	r3
    a230:	0003      	movs	r3, r0
    a232:	001a      	movs	r2, r3
    a234:	4b09      	ldr	r3, [pc, #36]	; (a25c <delay_init+0x48>)
    a236:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    a238:	4b08      	ldr	r3, [pc, #32]	; (a25c <delay_init+0x48>)
    a23a:	6818      	ldr	r0, [r3, #0]
    a23c:	4b08      	ldr	r3, [pc, #32]	; (a260 <delay_init+0x4c>)
    a23e:	22fa      	movs	r2, #250	; 0xfa
    a240:	0091      	lsls	r1, r2, #2
    a242:	4798      	blx	r3
    a244:	0003      	movs	r3, r0
    a246:	001a      	movs	r2, r3
    a248:	4b06      	ldr	r3, [pc, #24]	; (a264 <delay_init+0x50>)
    a24a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    a24c:	4b06      	ldr	r3, [pc, #24]	; (a268 <delay_init+0x54>)
    a24e:	2205      	movs	r2, #5
    a250:	601a      	str	r2, [r3, #0]
}
    a252:	46c0      	nop			; (mov r8, r8)
    a254:	46bd      	mov	sp, r7
    a256:	bd80      	pop	{r7, pc}
    a258:	0000aded 	.word	0x0000aded
    a25c:	20000008 	.word	0x20000008
    a260:	0000b4e1 	.word	0x0000b4e1
    a264:	2000000c 	.word	0x2000000c
    a268:	e000e010 	.word	0xe000e010

0000a26c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    a26c:	b580      	push	{r7, lr}
    a26e:	b082      	sub	sp, #8
    a270:	af00      	add	r7, sp, #0
    a272:	6078      	str	r0, [r7, #4]
	while (n--) {
    a274:	e004      	b.n	a280 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    a276:	4b07      	ldr	r3, [pc, #28]	; (a294 <delay_cycles_us+0x28>)
    a278:	681b      	ldr	r3, [r3, #0]
    a27a:	0018      	movs	r0, r3
    a27c:	4b06      	ldr	r3, [pc, #24]	; (a298 <delay_cycles_us+0x2c>)
    a27e:	4798      	blx	r3
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
    a280:	687b      	ldr	r3, [r7, #4]
    a282:	1e5a      	subs	r2, r3, #1
    a284:	607a      	str	r2, [r7, #4]
    a286:	2b00      	cmp	r3, #0
    a288:	d1f5      	bne.n	a276 <delay_cycles_us+0xa>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
    a28a:	46c0      	nop			; (mov r8, r8)
    a28c:	46bd      	mov	sp, r7
    a28e:	b002      	add	sp, #8
    a290:	bd80      	pop	{r7, pc}
    a292:	46c0      	nop			; (mov r8, r8)
    a294:	2000000c 	.word	0x2000000c
    a298:	0000a1e1 	.word	0x0000a1e1

0000a29c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    a29c:	b580      	push	{r7, lr}
    a29e:	b082      	sub	sp, #8
    a2a0:	af00      	add	r7, sp, #0
    a2a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    a2a4:	687b      	ldr	r3, [r7, #4]
    a2a6:	2280      	movs	r2, #128	; 0x80
    a2a8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a2aa:	687b      	ldr	r3, [r7, #4]
    a2ac:	2200      	movs	r2, #0
    a2ae:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    a2b0:	687b      	ldr	r3, [r7, #4]
    a2b2:	2201      	movs	r2, #1
    a2b4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    a2b6:	687b      	ldr	r3, [r7, #4]
    a2b8:	2200      	movs	r2, #0
    a2ba:	70da      	strb	r2, [r3, #3]
}
    a2bc:	46c0      	nop			; (mov r8, r8)
    a2be:	46bd      	mov	sp, r7
    a2c0:	b002      	add	sp, #8
    a2c2:	bd80      	pop	{r7, pc}

0000a2c4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    a2c4:	b580      	push	{r7, lr}
    a2c6:	b084      	sub	sp, #16
    a2c8:	af00      	add	r7, sp, #0
    a2ca:	0002      	movs	r2, r0
    a2cc:	6039      	str	r1, [r7, #0]
    a2ce:	1dfb      	adds	r3, r7, #7
    a2d0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    a2d2:	230c      	movs	r3, #12
    a2d4:	18fb      	adds	r3, r7, r3
    a2d6:	0018      	movs	r0, r3
    a2d8:	4b10      	ldr	r3, [pc, #64]	; (a31c <port_pin_set_config+0x58>)
    a2da:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    a2dc:	230c      	movs	r3, #12
    a2de:	18fb      	adds	r3, r7, r3
    a2e0:	2280      	movs	r2, #128	; 0x80
    a2e2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    a2e4:	683b      	ldr	r3, [r7, #0]
    a2e6:	781a      	ldrb	r2, [r3, #0]
    a2e8:	230c      	movs	r3, #12
    a2ea:	18fb      	adds	r3, r7, r3
    a2ec:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    a2ee:	683b      	ldr	r3, [r7, #0]
    a2f0:	785a      	ldrb	r2, [r3, #1]
    a2f2:	230c      	movs	r3, #12
    a2f4:	18fb      	adds	r3, r7, r3
    a2f6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    a2f8:	683b      	ldr	r3, [r7, #0]
    a2fa:	789a      	ldrb	r2, [r3, #2]
    a2fc:	230c      	movs	r3, #12
    a2fe:	18fb      	adds	r3, r7, r3
    a300:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    a302:	230c      	movs	r3, #12
    a304:	18fa      	adds	r2, r7, r3
    a306:	1dfb      	adds	r3, r7, #7
    a308:	781b      	ldrb	r3, [r3, #0]
    a30a:	0011      	movs	r1, r2
    a30c:	0018      	movs	r0, r3
    a30e:	4b04      	ldr	r3, [pc, #16]	; (a320 <port_pin_set_config+0x5c>)
    a310:	4798      	blx	r3
}
    a312:	46c0      	nop			; (mov r8, r8)
    a314:	46bd      	mov	sp, r7
    a316:	b004      	add	sp, #16
    a318:	bd80      	pop	{r7, pc}
    a31a:	46c0      	nop			; (mov r8, r8)
    a31c:	0000a29d 	.word	0x0000a29d
    a320:	0000b1b1 	.word	0x0000b1b1

0000a324 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    a324:	b580      	push	{r7, lr}
    a326:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    a328:	46c0      	nop			; (mov r8, r8)
    a32a:	46bd      	mov	sp, r7
    a32c:	bd80      	pop	{r7, pc}
    a32e:	46c0      	nop			; (mov r8, r8)

0000a330 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    a330:	b580      	push	{r7, lr}
    a332:	b082      	sub	sp, #8
    a334:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    a336:	4b10      	ldr	r3, [pc, #64]	; (a378 <cpu_irq_enter_critical+0x48>)
    a338:	681b      	ldr	r3, [r3, #0]
    a33a:	2b00      	cmp	r3, #0
    a33c:	d112      	bne.n	a364 <cpu_irq_enter_critical+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a33e:	f3ef 8310 	mrs	r3, PRIMASK
    a342:	607b      	str	r3, [r7, #4]
  return(result);
    a344:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    a346:	2b00      	cmp	r3, #0
    a348:	d109      	bne.n	a35e <cpu_irq_enter_critical+0x2e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    a34a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    a34c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    a350:	4b0a      	ldr	r3, [pc, #40]	; (a37c <cpu_irq_enter_critical+0x4c>)
    a352:	2200      	movs	r2, #0
    a354:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    a356:	4b0a      	ldr	r3, [pc, #40]	; (a380 <cpu_irq_enter_critical+0x50>)
    a358:	2201      	movs	r2, #1
    a35a:	701a      	strb	r2, [r3, #0]
    a35c:	e002      	b.n	a364 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    a35e:	4b08      	ldr	r3, [pc, #32]	; (a380 <cpu_irq_enter_critical+0x50>)
    a360:	2200      	movs	r2, #0
    a362:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    a364:	4b04      	ldr	r3, [pc, #16]	; (a378 <cpu_irq_enter_critical+0x48>)
    a366:	681b      	ldr	r3, [r3, #0]
    a368:	1c5a      	adds	r2, r3, #1
    a36a:	4b03      	ldr	r3, [pc, #12]	; (a378 <cpu_irq_enter_critical+0x48>)
    a36c:	601a      	str	r2, [r3, #0]
}
    a36e:	46c0      	nop			; (mov r8, r8)
    a370:	46bd      	mov	sp, r7
    a372:	b002      	add	sp, #8
    a374:	bd80      	pop	{r7, pc}
    a376:	46c0      	nop			; (mov r8, r8)
    a378:	20000de8 	.word	0x20000de8
    a37c:	20000010 	.word	0x20000010
    a380:	20000dec 	.word	0x20000dec

0000a384 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    a384:	b580      	push	{r7, lr}
    a386:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    a388:	4b0b      	ldr	r3, [pc, #44]	; (a3b8 <cpu_irq_leave_critical+0x34>)
    a38a:	681b      	ldr	r3, [r3, #0]
    a38c:	1e5a      	subs	r2, r3, #1
    a38e:	4b0a      	ldr	r3, [pc, #40]	; (a3b8 <cpu_irq_leave_critical+0x34>)
    a390:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    a392:	4b09      	ldr	r3, [pc, #36]	; (a3b8 <cpu_irq_leave_critical+0x34>)
    a394:	681b      	ldr	r3, [r3, #0]
    a396:	2b00      	cmp	r3, #0
    a398:	d10a      	bne.n	a3b0 <cpu_irq_leave_critical+0x2c>
    a39a:	4b08      	ldr	r3, [pc, #32]	; (a3bc <cpu_irq_leave_critical+0x38>)
    a39c:	781b      	ldrb	r3, [r3, #0]
    a39e:	b2db      	uxtb	r3, r3
    a3a0:	2b00      	cmp	r3, #0
    a3a2:	d005      	beq.n	a3b0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    a3a4:	4b06      	ldr	r3, [pc, #24]	; (a3c0 <cpu_irq_leave_critical+0x3c>)
    a3a6:	2201      	movs	r2, #1
    a3a8:	701a      	strb	r2, [r3, #0]
    a3aa:	f3bf 8f5f 	dmb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    a3ae:	b662      	cpsie	i
	}
}
    a3b0:	46c0      	nop			; (mov r8, r8)
    a3b2:	46bd      	mov	sp, r7
    a3b4:	bd80      	pop	{r7, pc}
    a3b6:	46c0      	nop			; (mov r8, r8)
    a3b8:	20000de8 	.word	0x20000de8
    a3bc:	20000dec 	.word	0x20000dec
    a3c0:	20000010 	.word	0x20000010

0000a3c4 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    a3c4:	b580      	push	{r7, lr}
    a3c6:	b082      	sub	sp, #8
    a3c8:	af00      	add	r7, sp, #0
    a3ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    a3cc:	687b      	ldr	r3, [r7, #4]
    a3ce:	2201      	movs	r2, #1
    a3d0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    a3d2:	687b      	ldr	r3, [r7, #4]
    a3d4:	2200      	movs	r2, #0
    a3d6:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    a3d8:	687b      	ldr	r3, [r7, #4]
    a3da:	2206      	movs	r2, #6
    a3dc:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    a3de:	687b      	ldr	r3, [r7, #4]
    a3e0:	2200      	movs	r2, #0
    a3e2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    a3e4:	687b      	ldr	r3, [r7, #4]
    a3e6:	2200      	movs	r2, #0
    a3e8:	725a      	strb	r2, [r3, #9]
}
    a3ea:	46c0      	nop			; (mov r8, r8)
    a3ec:	46bd      	mov	sp, r7
    a3ee:	b002      	add	sp, #8
    a3f0:	bd80      	pop	{r7, pc}
    a3f2:	46c0      	nop			; (mov r8, r8)

0000a3f4 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    a3f4:	b580      	push	{r7, lr}
    a3f6:	b082      	sub	sp, #8
    a3f8:	af00      	add	r7, sp, #0
    a3fa:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    a3fc:	687b      	ldr	r3, [r7, #4]
    a3fe:	2203      	movs	r2, #3
    a400:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    a402:	687b      	ldr	r3, [r7, #4]
    a404:	2200      	movs	r2, #0
    a406:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    a408:	687b      	ldr	r3, [r7, #4]
    a40a:	2201      	movs	r2, #1
    a40c:	709a      	strb	r2, [r3, #2]
}
    a40e:	46c0      	nop			; (mov r8, r8)
    a410:	46bd      	mov	sp, r7
    a412:	b002      	add	sp, #8
    a414:	bd80      	pop	{r7, pc}
    a416:	46c0      	nop			; (mov r8, r8)

0000a418 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    a418:	b580      	push	{r7, lr}
    a41a:	b082      	sub	sp, #8
    a41c:	af00      	add	r7, sp, #0
    a41e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    a420:	687b      	ldr	r3, [r7, #4]
    a422:	2200      	movs	r2, #0
    a424:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    a426:	687b      	ldr	r3, [r7, #4]
    a428:	2200      	movs	r2, #0
    a42a:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    a42c:	687b      	ldr	r3, [r7, #4]
    a42e:	2200      	movs	r2, #0
    a430:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    a432:	687b      	ldr	r3, [r7, #4]
    a434:	2200      	movs	r2, #0
    a436:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    a438:	687b      	ldr	r3, [r7, #4]
    a43a:	2200      	movs	r2, #0
    a43c:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    a43e:	687b      	ldr	r3, [r7, #4]
    a440:	2201      	movs	r2, #1
    a442:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    a444:	687b      	ldr	r3, [r7, #4]
    a446:	2207      	movs	r2, #7
    a448:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    a44a:	687b      	ldr	r3, [r7, #4]
    a44c:	223f      	movs	r2, #63	; 0x3f
    a44e:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    a450:	687b      	ldr	r3, [r7, #4]
    a452:	2201      	movs	r2, #1
    a454:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    a456:	687b      	ldr	r3, [r7, #4]
    a458:	2201      	movs	r2, #1
    a45a:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    a45c:	687b      	ldr	r3, [r7, #4]
    a45e:	2206      	movs	r2, #6
    a460:	821a      	strh	r2, [r3, #16]
}
    a462:	46c0      	nop			; (mov r8, r8)
    a464:	46bd      	mov	sp, r7
    a466:	b002      	add	sp, #8
    a468:	bd80      	pop	{r7, pc}
    a46a:	46c0      	nop			; (mov r8, r8)

0000a46c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    a46c:	b580      	push	{r7, lr}
    a46e:	b082      	sub	sp, #8
    a470:	af00      	add	r7, sp, #0
    a472:	0002      	movs	r2, r0
    a474:	1dfb      	adds	r3, r7, #7
    a476:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    a478:	4a03      	ldr	r2, [pc, #12]	; (a488 <system_cpu_clock_set_divider+0x1c>)
    a47a:	1dfb      	adds	r3, r7, #7
    a47c:	781b      	ldrb	r3, [r3, #0]
    a47e:	7213      	strb	r3, [r2, #8]
}
    a480:	46c0      	nop			; (mov r8, r8)
    a482:	46bd      	mov	sp, r7
    a484:	b002      	add	sp, #8
    a486:	bd80      	pop	{r7, pc}
    a488:	40000400 	.word	0x40000400

0000a48c <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    a48c:	b580      	push	{r7, lr}
    a48e:	b082      	sub	sp, #8
    a490:	af00      	add	r7, sp, #0
    a492:	0002      	movs	r2, r0
    a494:	1dfb      	adds	r3, r7, #7
    a496:	701a      	strb	r2, [r3, #0]
    a498:	1dbb      	adds	r3, r7, #6
    a49a:	1c0a      	adds	r2, r1, #0
    a49c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a49e:	1dfb      	adds	r3, r7, #7
    a4a0:	781b      	ldrb	r3, [r3, #0]
    a4a2:	2b01      	cmp	r3, #1
    a4a4:	d008      	beq.n	a4b8 <system_apb_clock_set_divider+0x2c>
    a4a6:	2b02      	cmp	r3, #2
    a4a8:	d00b      	beq.n	a4c2 <system_apb_clock_set_divider+0x36>
    a4aa:	2b00      	cmp	r3, #0
    a4ac:	d10e      	bne.n	a4cc <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    a4ae:	4a0b      	ldr	r2, [pc, #44]	; (a4dc <system_apb_clock_set_divider+0x50>)
    a4b0:	1dbb      	adds	r3, r7, #6
    a4b2:	781b      	ldrb	r3, [r3, #0]
    a4b4:	7253      	strb	r3, [r2, #9]
			break;
    a4b6:	e00b      	b.n	a4d0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    a4b8:	4a08      	ldr	r2, [pc, #32]	; (a4dc <system_apb_clock_set_divider+0x50>)
    a4ba:	1dbb      	adds	r3, r7, #6
    a4bc:	781b      	ldrb	r3, [r3, #0]
    a4be:	7293      	strb	r3, [r2, #10]
			break;
    a4c0:	e006      	b.n	a4d0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    a4c2:	4a06      	ldr	r2, [pc, #24]	; (a4dc <system_apb_clock_set_divider+0x50>)
    a4c4:	1dbb      	adds	r3, r7, #6
    a4c6:	781b      	ldrb	r3, [r3, #0]
    a4c8:	72d3      	strb	r3, [r2, #11]
			break;
    a4ca:	e001      	b.n	a4d0 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    a4cc:	2317      	movs	r3, #23
    a4ce:	e000      	b.n	a4d2 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    a4d0:	2300      	movs	r3, #0
}
    a4d2:	0018      	movs	r0, r3
    a4d4:	46bd      	mov	sp, r7
    a4d6:	b002      	add	sp, #8
    a4d8:	bd80      	pop	{r7, pc}
    a4da:	46c0      	nop			; (mov r8, r8)
    a4dc:	40000400 	.word	0x40000400

0000a4e0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    a4e0:	b580      	push	{r7, lr}
    a4e2:	b082      	sub	sp, #8
    a4e4:	af00      	add	r7, sp, #0
    a4e6:	0002      	movs	r2, r0
    a4e8:	1dfb      	adds	r3, r7, #7
    a4ea:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    a4ec:	4a08      	ldr	r2, [pc, #32]	; (a510 <system_flash_set_waitstates+0x30>)
    a4ee:	1dfb      	adds	r3, r7, #7
    a4f0:	781b      	ldrb	r3, [r3, #0]
    a4f2:	210f      	movs	r1, #15
    a4f4:	400b      	ands	r3, r1
    a4f6:	b2d9      	uxtb	r1, r3
    a4f8:	6853      	ldr	r3, [r2, #4]
    a4fa:	200f      	movs	r0, #15
    a4fc:	4001      	ands	r1, r0
    a4fe:	0049      	lsls	r1, r1, #1
    a500:	201e      	movs	r0, #30
    a502:	4383      	bics	r3, r0
    a504:	430b      	orrs	r3, r1
    a506:	6053      	str	r3, [r2, #4]
}
    a508:	46c0      	nop			; (mov r8, r8)
    a50a:	46bd      	mov	sp, r7
    a50c:	b002      	add	sp, #8
    a50e:	bd80      	pop	{r7, pc}
    a510:	41004000 	.word	0x41004000

0000a514 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    a514:	b580      	push	{r7, lr}
    a516:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    a518:	46c0      	nop			; (mov r8, r8)
    a51a:	4b04      	ldr	r3, [pc, #16]	; (a52c <_system_dfll_wait_for_sync+0x18>)
    a51c:	68db      	ldr	r3, [r3, #12]
    a51e:	2210      	movs	r2, #16
    a520:	4013      	ands	r3, r2
    a522:	d0fa      	beq.n	a51a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    a524:	46c0      	nop			; (mov r8, r8)
    a526:	46bd      	mov	sp, r7
    a528:	bd80      	pop	{r7, pc}
    a52a:	46c0      	nop			; (mov r8, r8)
    a52c:	40000800 	.word	0x40000800

0000a530 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    a530:	b580      	push	{r7, lr}
    a532:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    a534:	4b0c      	ldr	r3, [pc, #48]	; (a568 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    a536:	2202      	movs	r2, #2
    a538:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    a53a:	4b0c      	ldr	r3, [pc, #48]	; (a56c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    a53c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    a53e:	4a0a      	ldr	r2, [pc, #40]	; (a568 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    a540:	4b0b      	ldr	r3, [pc, #44]	; (a570 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    a542:	689b      	ldr	r3, [r3, #8]
    a544:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    a546:	4a08      	ldr	r2, [pc, #32]	; (a568 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    a548:	4b09      	ldr	r3, [pc, #36]	; (a570 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    a54a:	685b      	ldr	r3, [r3, #4]
    a54c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    a54e:	4b06      	ldr	r3, [pc, #24]	; (a568 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    a550:	2200      	movs	r2, #0
    a552:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    a554:	4b05      	ldr	r3, [pc, #20]	; (a56c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    a556:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    a558:	4a03      	ldr	r2, [pc, #12]	; (a568 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    a55a:	4b05      	ldr	r3, [pc, #20]	; (a570 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    a55c:	681b      	ldr	r3, [r3, #0]
    a55e:	b29b      	uxth	r3, r3
    a560:	8493      	strh	r3, [r2, #36]	; 0x24
}
    a562:	46c0      	nop			; (mov r8, r8)
    a564:	46bd      	mov	sp, r7
    a566:	bd80      	pop	{r7, pc}
    a568:	40000800 	.word	0x40000800
    a56c:	0000a515 	.word	0x0000a515
    a570:	20000df0 	.word	0x20000df0

0000a574 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    a574:	b580      	push	{r7, lr}
    a576:	b082      	sub	sp, #8
    a578:	af00      	add	r7, sp, #0
    a57a:	0002      	movs	r2, r0
    a57c:	1dfb      	adds	r3, r7, #7
    a57e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    a580:	1dfb      	adds	r3, r7, #7
    a582:	781b      	ldrb	r3, [r3, #0]
    a584:	2b08      	cmp	r3, #8
    a586:	d841      	bhi.n	a60c <system_clock_source_get_hz+0x98>
    a588:	009a      	lsls	r2, r3, #2
    a58a:	4b23      	ldr	r3, [pc, #140]	; (a618 <system_clock_source_get_hz+0xa4>)
    a58c:	18d3      	adds	r3, r2, r3
    a58e:	681b      	ldr	r3, [r3, #0]
    a590:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    a592:	4b22      	ldr	r3, [pc, #136]	; (a61c <system_clock_source_get_hz+0xa8>)
    a594:	691b      	ldr	r3, [r3, #16]
    a596:	e03a      	b.n	a60e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    a598:	4b21      	ldr	r3, [pc, #132]	; (a620 <system_clock_source_get_hz+0xac>)
    a59a:	6a1b      	ldr	r3, [r3, #32]
    a59c:	059b      	lsls	r3, r3, #22
    a59e:	0f9b      	lsrs	r3, r3, #30
    a5a0:	b2db      	uxtb	r3, r3
    a5a2:	001a      	movs	r2, r3
    a5a4:	4b1f      	ldr	r3, [pc, #124]	; (a624 <system_clock_source_get_hz+0xb0>)
    a5a6:	40d3      	lsrs	r3, r2
    a5a8:	e031      	b.n	a60e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    a5aa:	2380      	movs	r3, #128	; 0x80
    a5ac:	021b      	lsls	r3, r3, #8
    a5ae:	e02e      	b.n	a60e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    a5b0:	2380      	movs	r3, #128	; 0x80
    a5b2:	021b      	lsls	r3, r3, #8
    a5b4:	e02b      	b.n	a60e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    a5b6:	4b19      	ldr	r3, [pc, #100]	; (a61c <system_clock_source_get_hz+0xa8>)
    a5b8:	695b      	ldr	r3, [r3, #20]
    a5ba:	e028      	b.n	a60e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    a5bc:	4b17      	ldr	r3, [pc, #92]	; (a61c <system_clock_source_get_hz+0xa8>)
    a5be:	681b      	ldr	r3, [r3, #0]
    a5c0:	2202      	movs	r2, #2
    a5c2:	4013      	ands	r3, r2
    a5c4:	d101      	bne.n	a5ca <system_clock_source_get_hz+0x56>
			return 0;
    a5c6:	2300      	movs	r3, #0
    a5c8:	e021      	b.n	a60e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    a5ca:	4b17      	ldr	r3, [pc, #92]	; (a628 <system_clock_source_get_hz+0xb4>)
    a5cc:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    a5ce:	4b13      	ldr	r3, [pc, #76]	; (a61c <system_clock_source_get_hz+0xa8>)
    a5d0:	681b      	ldr	r3, [r3, #0]
    a5d2:	2224      	movs	r2, #36	; 0x24
    a5d4:	4013      	ands	r3, r2
    a5d6:	2b04      	cmp	r3, #4
    a5d8:	d109      	bne.n	a5ee <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    a5da:	2000      	movs	r0, #0
    a5dc:	4b13      	ldr	r3, [pc, #76]	; (a62c <system_clock_source_get_hz+0xb8>)
    a5de:	4798      	blx	r3
    a5e0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    a5e2:	4b0e      	ldr	r3, [pc, #56]	; (a61c <system_clock_source_get_hz+0xa8>)
    a5e4:	689b      	ldr	r3, [r3, #8]
    a5e6:	041b      	lsls	r3, r3, #16
    a5e8:	0c1b      	lsrs	r3, r3, #16

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    a5ea:	4353      	muls	r3, r2
    a5ec:	e00f      	b.n	a60e <system_clock_source_get_hz+0x9a>
					(_system_clock_inst.dfll.mul & 0xffff);
		default:
			return 48000000UL;
    a5ee:	4b10      	ldr	r3, [pc, #64]	; (a630 <system_clock_source_get_hz+0xbc>)
    a5f0:	e00d      	b.n	a60e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    a5f2:	4a0b      	ldr	r2, [pc, #44]	; (a620 <system_clock_source_get_hz+0xac>)
    a5f4:	2350      	movs	r3, #80	; 0x50
    a5f6:	5cd3      	ldrb	r3, [r2, r3]
    a5f8:	b2db      	uxtb	r3, r3
    a5fa:	001a      	movs	r2, r3
    a5fc:	2304      	movs	r3, #4
    a5fe:	4013      	ands	r3, r2
    a600:	d101      	bne.n	a606 <system_clock_source_get_hz+0x92>
			return 0;
    a602:	2300      	movs	r3, #0
    a604:	e003      	b.n	a60e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    a606:	4b05      	ldr	r3, [pc, #20]	; (a61c <system_clock_source_get_hz+0xa8>)
    a608:	68db      	ldr	r3, [r3, #12]
    a60a:	e000      	b.n	a60e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    a60c:	2300      	movs	r3, #0
	}
}
    a60e:	0018      	movs	r0, r3
    a610:	46bd      	mov	sp, r7
    a612:	b002      	add	sp, #8
    a614:	bd80      	pop	{r7, pc}
    a616:	46c0      	nop			; (mov r8, r8)
    a618:	0000cb48 	.word	0x0000cb48
    a61c:	20000df0 	.word	0x20000df0
    a620:	40000800 	.word	0x40000800
    a624:	007a1200 	.word	0x007a1200
    a628:	0000a515 	.word	0x0000a515
    a62c:	0000afe9 	.word	0x0000afe9
    a630:	02dc6c00 	.word	0x02dc6c00

0000a634 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    a634:	b580      	push	{r7, lr}
    a636:	b084      	sub	sp, #16
    a638:	af00      	add	r7, sp, #0
    a63a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    a63c:	4b1a      	ldr	r3, [pc, #104]	; (a6a8 <system_clock_source_osc8m_set_config+0x74>)
    a63e:	6a1b      	ldr	r3, [r3, #32]
    a640:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    a642:	687b      	ldr	r3, [r7, #4]
    a644:	781b      	ldrb	r3, [r3, #0]
    a646:	1c1a      	adds	r2, r3, #0
    a648:	2303      	movs	r3, #3
    a64a:	4013      	ands	r3, r2
    a64c:	b2da      	uxtb	r2, r3
    a64e:	230d      	movs	r3, #13
    a650:	18fb      	adds	r3, r7, r3
    a652:	2103      	movs	r1, #3
    a654:	400a      	ands	r2, r1
    a656:	0010      	movs	r0, r2
    a658:	781a      	ldrb	r2, [r3, #0]
    a65a:	2103      	movs	r1, #3
    a65c:	438a      	bics	r2, r1
    a65e:	1c11      	adds	r1, r2, #0
    a660:	1c02      	adds	r2, r0, #0
    a662:	430a      	orrs	r2, r1
    a664:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    a666:	687b      	ldr	r3, [r7, #4]
    a668:	789a      	ldrb	r2, [r3, #2]
    a66a:	230c      	movs	r3, #12
    a66c:	18fb      	adds	r3, r7, r3
    a66e:	01d0      	lsls	r0, r2, #7
    a670:	781a      	ldrb	r2, [r3, #0]
    a672:	217f      	movs	r1, #127	; 0x7f
    a674:	400a      	ands	r2, r1
    a676:	1c11      	adds	r1, r2, #0
    a678:	1c02      	adds	r2, r0, #0
    a67a:	430a      	orrs	r2, r1
    a67c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    a67e:	687b      	ldr	r3, [r7, #4]
    a680:	785a      	ldrb	r2, [r3, #1]
    a682:	230c      	movs	r3, #12
    a684:	18fb      	adds	r3, r7, r3
    a686:	2101      	movs	r1, #1
    a688:	400a      	ands	r2, r1
    a68a:	0190      	lsls	r0, r2, #6
    a68c:	781a      	ldrb	r2, [r3, #0]
    a68e:	2140      	movs	r1, #64	; 0x40
    a690:	438a      	bics	r2, r1
    a692:	1c11      	adds	r1, r2, #0
    a694:	1c02      	adds	r2, r0, #0
    a696:	430a      	orrs	r2, r1
    a698:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    a69a:	4b03      	ldr	r3, [pc, #12]	; (a6a8 <system_clock_source_osc8m_set_config+0x74>)
    a69c:	68fa      	ldr	r2, [r7, #12]
    a69e:	621a      	str	r2, [r3, #32]
}
    a6a0:	46c0      	nop			; (mov r8, r8)
    a6a2:	46bd      	mov	sp, r7
    a6a4:	b004      	add	sp, #16
    a6a6:	bd80      	pop	{r7, pc}
    a6a8:	40000800 	.word	0x40000800

0000a6ac <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    a6ac:	b580      	push	{r7, lr}
    a6ae:	b082      	sub	sp, #8
    a6b0:	af00      	add	r7, sp, #0
    a6b2:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    a6b4:	687b      	ldr	r3, [r7, #4]
    a6b6:	7a1b      	ldrb	r3, [r3, #8]
    a6b8:	029b      	lsls	r3, r3, #10
    a6ba:	041b      	lsls	r3, r3, #16
    a6bc:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    a6be:	687b      	ldr	r3, [r7, #4]
    a6c0:	895b      	ldrh	r3, [r3, #10]
    a6c2:	059b      	lsls	r3, r3, #22
    a6c4:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    a6c6:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    a6c8:	4b2a      	ldr	r3, [pc, #168]	; (a774 <system_clock_source_dfll_set_config+0xc8>)
    a6ca:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    a6cc:	687b      	ldr	r3, [r7, #4]
    a6ce:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    a6d0:	687b      	ldr	r3, [r7, #4]
    a6d2:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    a6d4:	4313      	orrs	r3, r2
    a6d6:	b2db      	uxtb	r3, r3
    a6d8:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    a6da:	687b      	ldr	r3, [r7, #4]
    a6dc:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    a6de:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    a6e0:	687a      	ldr	r2, [r7, #4]
    a6e2:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    a6e4:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    a6e6:	687b      	ldr	r3, [r7, #4]
    a6e8:	785b      	ldrb	r3, [r3, #1]
    a6ea:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    a6ec:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    a6ee:	4b21      	ldr	r3, [pc, #132]	; (a774 <system_clock_source_dfll_set_config+0xc8>)
    a6f0:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    a6f2:	687b      	ldr	r3, [r7, #4]
    a6f4:	781b      	ldrb	r3, [r3, #0]
    a6f6:	2b04      	cmp	r3, #4
    a6f8:	d116      	bne.n	a728 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a6fa:	687b      	ldr	r3, [r7, #4]
    a6fc:	7b1b      	ldrb	r3, [r3, #12]
    a6fe:	069b      	lsls	r3, r3, #26
    a700:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a702:	687b      	ldr	r3, [r7, #4]
    a704:	89db      	ldrh	r3, [r3, #14]
    a706:	041b      	lsls	r3, r3, #16
    a708:	0019      	movs	r1, r3
    a70a:	4b1b      	ldr	r3, [pc, #108]	; (a778 <system_clock_source_dfll_set_config+0xcc>)
    a70c:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a70e:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    a710:	687a      	ldr	r2, [r7, #4]
    a712:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a714:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    a716:	4b17      	ldr	r3, [pc, #92]	; (a774 <system_clock_source_dfll_set_config+0xc8>)
    a718:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    a71a:	4b16      	ldr	r3, [pc, #88]	; (a774 <system_clock_source_dfll_set_config+0xc8>)
    a71c:	681b      	ldr	r3, [r3, #0]
    a71e:	687a      	ldr	r2, [r7, #4]
    a720:	7812      	ldrb	r2, [r2, #0]
    a722:	431a      	orrs	r2, r3
    a724:	4b13      	ldr	r3, [pc, #76]	; (a774 <system_clock_source_dfll_set_config+0xc8>)
    a726:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    a728:	687b      	ldr	r3, [r7, #4]
    a72a:	781b      	ldrb	r3, [r3, #0]
    a72c:	2b20      	cmp	r3, #32
    a72e:	d11c      	bne.n	a76a <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a730:	687b      	ldr	r3, [r7, #4]
    a732:	7b1b      	ldrb	r3, [r3, #12]
    a734:	069b      	lsls	r3, r3, #26
    a736:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a738:	687b      	ldr	r3, [r7, #4]
    a73a:	89db      	ldrh	r3, [r3, #14]
    a73c:	041b      	lsls	r3, r3, #16
    a73e:	0019      	movs	r1, r3
    a740:	4b0d      	ldr	r3, [pc, #52]	; (a778 <system_clock_source_dfll_set_config+0xcc>)
    a742:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a744:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    a746:	687a      	ldr	r2, [r7, #4]
    a748:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a74a:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    a74c:	4b09      	ldr	r3, [pc, #36]	; (a774 <system_clock_source_dfll_set_config+0xc8>)
    a74e:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    a750:	4b08      	ldr	r3, [pc, #32]	; (a774 <system_clock_source_dfll_set_config+0xc8>)
    a752:	681b      	ldr	r3, [r3, #0]
    a754:	687a      	ldr	r2, [r7, #4]
    a756:	7812      	ldrb	r2, [r2, #0]
    a758:	2104      	movs	r1, #4
    a75a:	430a      	orrs	r2, r1
    a75c:	b2d2      	uxtb	r2, r2
    a75e:	4313      	orrs	r3, r2
    a760:	2280      	movs	r2, #128	; 0x80
    a762:	00d2      	lsls	r2, r2, #3
    a764:	431a      	orrs	r2, r3
    a766:	4b03      	ldr	r3, [pc, #12]	; (a774 <system_clock_source_dfll_set_config+0xc8>)
    a768:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    a76a:	46c0      	nop			; (mov r8, r8)
    a76c:	46bd      	mov	sp, r7
    a76e:	b002      	add	sp, #8
    a770:	bd80      	pop	{r7, pc}
    a772:	46c0      	nop			; (mov r8, r8)
    a774:	20000df0 	.word	0x20000df0
    a778:	03ff0000 	.word	0x03ff0000

0000a77c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    a77c:	b580      	push	{r7, lr}
    a77e:	b082      	sub	sp, #8
    a780:	af00      	add	r7, sp, #0
    a782:	0002      	movs	r2, r0
    a784:	1dfb      	adds	r3, r7, #7
    a786:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    a788:	1dfb      	adds	r3, r7, #7
    a78a:	781b      	ldrb	r3, [r3, #0]
    a78c:	2b08      	cmp	r3, #8
    a78e:	d83b      	bhi.n	a808 <system_clock_source_enable+0x8c>
    a790:	009a      	lsls	r2, r3, #2
    a792:	4b21      	ldr	r3, [pc, #132]	; (a818 <system_clock_source_enable+0x9c>)
    a794:	18d3      	adds	r3, r2, r3
    a796:	681b      	ldr	r3, [r3, #0]
    a798:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    a79a:	4b20      	ldr	r3, [pc, #128]	; (a81c <system_clock_source_enable+0xa0>)
    a79c:	4a1f      	ldr	r2, [pc, #124]	; (a81c <system_clock_source_enable+0xa0>)
    a79e:	6a12      	ldr	r2, [r2, #32]
    a7a0:	2102      	movs	r1, #2
    a7a2:	430a      	orrs	r2, r1
    a7a4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    a7a6:	2300      	movs	r3, #0
    a7a8:	e031      	b.n	a80e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    a7aa:	4b1c      	ldr	r3, [pc, #112]	; (a81c <system_clock_source_enable+0xa0>)
    a7ac:	4a1b      	ldr	r2, [pc, #108]	; (a81c <system_clock_source_enable+0xa0>)
    a7ae:	6992      	ldr	r2, [r2, #24]
    a7b0:	2102      	movs	r1, #2
    a7b2:	430a      	orrs	r2, r1
    a7b4:	619a      	str	r2, [r3, #24]
		break;
    a7b6:	e029      	b.n	a80c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    a7b8:	4a18      	ldr	r2, [pc, #96]	; (a81c <system_clock_source_enable+0xa0>)
    a7ba:	4b18      	ldr	r3, [pc, #96]	; (a81c <system_clock_source_enable+0xa0>)
    a7bc:	8a1b      	ldrh	r3, [r3, #16]
    a7be:	b29b      	uxth	r3, r3
    a7c0:	2102      	movs	r1, #2
    a7c2:	430b      	orrs	r3, r1
    a7c4:	b29b      	uxth	r3, r3
    a7c6:	8213      	strh	r3, [r2, #16]
		break;
    a7c8:	e020      	b.n	a80c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    a7ca:	4a14      	ldr	r2, [pc, #80]	; (a81c <system_clock_source_enable+0xa0>)
    a7cc:	4b13      	ldr	r3, [pc, #76]	; (a81c <system_clock_source_enable+0xa0>)
    a7ce:	8a9b      	ldrh	r3, [r3, #20]
    a7d0:	b29b      	uxth	r3, r3
    a7d2:	2102      	movs	r1, #2
    a7d4:	430b      	orrs	r3, r1
    a7d6:	b29b      	uxth	r3, r3
    a7d8:	8293      	strh	r3, [r2, #20]
		break;
    a7da:	e017      	b.n	a80c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    a7dc:	4b10      	ldr	r3, [pc, #64]	; (a820 <system_clock_source_enable+0xa4>)
    a7de:	681b      	ldr	r3, [r3, #0]
    a7e0:	2202      	movs	r2, #2
    a7e2:	431a      	orrs	r2, r3
    a7e4:	4b0e      	ldr	r3, [pc, #56]	; (a820 <system_clock_source_enable+0xa4>)
    a7e6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    a7e8:	4b0e      	ldr	r3, [pc, #56]	; (a824 <system_clock_source_enable+0xa8>)
    a7ea:	4798      	blx	r3
		break;
    a7ec:	e00e      	b.n	a80c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    a7ee:	4a0b      	ldr	r2, [pc, #44]	; (a81c <system_clock_source_enable+0xa0>)
    a7f0:	490a      	ldr	r1, [pc, #40]	; (a81c <system_clock_source_enable+0xa0>)
    a7f2:	2344      	movs	r3, #68	; 0x44
    a7f4:	5ccb      	ldrb	r3, [r1, r3]
    a7f6:	b2db      	uxtb	r3, r3
    a7f8:	2102      	movs	r1, #2
    a7fa:	430b      	orrs	r3, r1
    a7fc:	b2d9      	uxtb	r1, r3
    a7fe:	2344      	movs	r3, #68	; 0x44
    a800:	54d1      	strb	r1, [r2, r3]
		break;
    a802:	e003      	b.n	a80c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    a804:	2300      	movs	r3, #0
    a806:	e002      	b.n	a80e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    a808:	2317      	movs	r3, #23
    a80a:	e000      	b.n	a80e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    a80c:	2300      	movs	r3, #0
}
    a80e:	0018      	movs	r0, r3
    a810:	46bd      	mov	sp, r7
    a812:	b002      	add	sp, #8
    a814:	bd80      	pop	{r7, pc}
    a816:	46c0      	nop			; (mov r8, r8)
    a818:	0000cb6c 	.word	0x0000cb6c
    a81c:	40000800 	.word	0x40000800
    a820:	20000df0 	.word	0x20000df0
    a824:	0000a531 	.word	0x0000a531

0000a828 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    a828:	b580      	push	{r7, lr}
    a82a:	b084      	sub	sp, #16
    a82c:	af00      	add	r7, sp, #0
    a82e:	0002      	movs	r2, r0
    a830:	1dfb      	adds	r3, r7, #7
    a832:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    a834:	2300      	movs	r3, #0
    a836:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    a838:	1dfb      	adds	r3, r7, #7
    a83a:	781b      	ldrb	r3, [r3, #0]
    a83c:	2b08      	cmp	r3, #8
    a83e:	d821      	bhi.n	a884 <system_clock_source_is_ready+0x5c>
    a840:	009a      	lsls	r2, r3, #2
    a842:	4b18      	ldr	r3, [pc, #96]	; (a8a4 <system_clock_source_is_ready+0x7c>)
    a844:	18d3      	adds	r3, r2, r3
    a846:	681b      	ldr	r3, [r3, #0]
    a848:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    a84a:	2308      	movs	r3, #8
    a84c:	60fb      	str	r3, [r7, #12]
		break;
    a84e:	e01b      	b.n	a888 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    a850:	2304      	movs	r3, #4
    a852:	60fb      	str	r3, [r7, #12]
		break;
    a854:	e018      	b.n	a888 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    a856:	2301      	movs	r3, #1
    a858:	60fb      	str	r3, [r7, #12]
		break;
    a85a:	e015      	b.n	a888 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    a85c:	2302      	movs	r3, #2
    a85e:	60fb      	str	r3, [r7, #12]
		break;
    a860:	e012      	b.n	a888 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    a862:	2310      	movs	r3, #16
    a864:	60fb      	str	r3, [r7, #12]
		}
		break;
    a866:	e00f      	b.n	a888 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:

		return ((SYSCTRL->DPLLSTATUS.reg &
    a868:	4a0f      	ldr	r2, [pc, #60]	; (a8a8 <system_clock_source_is_ready+0x80>)
    a86a:	2350      	movs	r3, #80	; 0x50
    a86c:	5cd3      	ldrb	r3, [r2, r3]
    a86e:	b2db      	uxtb	r3, r3
    a870:	001a      	movs	r2, r3
    a872:	2303      	movs	r3, #3
    a874:	4013      	ands	r3, r2
    a876:	3b03      	subs	r3, #3
    a878:	425a      	negs	r2, r3
    a87a:	4153      	adcs	r3, r2
    a87c:	b2db      	uxtb	r3, r3
    a87e:	e00c      	b.n	a89a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    a880:	2301      	movs	r3, #1
    a882:	e00a      	b.n	a89a <system_clock_source_is_ready+0x72>

	default:
		return false;
    a884:	2300      	movs	r3, #0
    a886:	e008      	b.n	a89a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    a888:	4b07      	ldr	r3, [pc, #28]	; (a8a8 <system_clock_source_is_ready+0x80>)
    a88a:	68db      	ldr	r3, [r3, #12]
    a88c:	68fa      	ldr	r2, [r7, #12]
    a88e:	401a      	ands	r2, r3
    a890:	68fb      	ldr	r3, [r7, #12]
    a892:	1ad3      	subs	r3, r2, r3
    a894:	425a      	negs	r2, r3
    a896:	4153      	adcs	r3, r2
    a898:	b2db      	uxtb	r3, r3
}
    a89a:	0018      	movs	r0, r3
    a89c:	46bd      	mov	sp, r7
    a89e:	b004      	add	sp, #16
    a8a0:	bd80      	pop	{r7, pc}
    a8a2:	46c0      	nop			; (mov r8, r8)
    a8a4:	0000cb90 	.word	0x0000cb90
    a8a8:	40000800 	.word	0x40000800

0000a8ac <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    a8ac:	b580      	push	{r7, lr}
    a8ae:	b082      	sub	sp, #8
    a8b0:	af00      	add	r7, sp, #0
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    a8b2:	003b      	movs	r3, r7
    a8b4:	2205      	movs	r2, #5
    a8b6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    a8b8:	2300      	movs	r3, #0
    a8ba:	607b      	str	r3, [r7, #4]
    a8bc:	e009      	b.n	a8d2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    a8be:	687b      	ldr	r3, [r7, #4]
    a8c0:	b2db      	uxtb	r3, r3
    a8c2:	003a      	movs	r2, r7
    a8c4:	0011      	movs	r1, r2
    a8c6:	0018      	movs	r0, r3
    a8c8:	4b05      	ldr	r3, [pc, #20]	; (a8e0 <_switch_peripheral_gclk+0x34>)
    a8ca:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    a8cc:	687b      	ldr	r3, [r7, #4]
    a8ce:	3301      	adds	r3, #1
    a8d0:	607b      	str	r3, [r7, #4]
    a8d2:	687b      	ldr	r3, [r7, #4]
    a8d4:	2b24      	cmp	r3, #36	; 0x24
    a8d6:	d9f2      	bls.n	a8be <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    a8d8:	46c0      	nop			; (mov r8, r8)
    a8da:	46bd      	mov	sp, r7
    a8dc:	b002      	add	sp, #8
    a8de:	bd80      	pop	{r7, pc}
    a8e0:	0000aec5 	.word	0x0000aec5

0000a8e4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    a8e4:	b580      	push	{r7, lr}
    a8e6:	b0a6      	sub	sp, #152	; 0x98
    a8e8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    a8ea:	4b99      	ldr	r3, [pc, #612]	; (ab50 <system_clock_init+0x26c>)
    a8ec:	22c2      	movs	r2, #194	; 0xc2
    a8ee:	00d2      	lsls	r2, r2, #3
    a8f0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    a8f2:	2001      	movs	r0, #1
    a8f4:	4b97      	ldr	r3, [pc, #604]	; (ab54 <system_clock_init+0x270>)
    a8f6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    a8f8:	4b97      	ldr	r3, [pc, #604]	; (ab58 <system_clock_init+0x274>)
    a8fa:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    a8fc:	2380      	movs	r3, #128	; 0x80
    a8fe:	18fb      	adds	r3, r7, r3
    a900:	0018      	movs	r0, r3
    a902:	4b96      	ldr	r3, [pc, #600]	; (ab5c <system_clock_init+0x278>)
    a904:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    a906:	2380      	movs	r3, #128	; 0x80
    a908:	18fb      	adds	r3, r7, r3
    a90a:	2220      	movs	r2, #32
    a90c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    a90e:	2380      	movs	r3, #128	; 0x80
    a910:	18fb      	adds	r3, r7, r3
    a912:	2200      	movs	r2, #0
    a914:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    a916:	4b92      	ldr	r3, [pc, #584]	; (ab60 <system_clock_init+0x27c>)
    a918:	681b      	ldr	r3, [r3, #0]
    a91a:	0e9b      	lsrs	r3, r3, #26
    a91c:	2294      	movs	r2, #148	; 0x94
    a91e:	18ba      	adds	r2, r7, r2
    a920:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    a922:	2394      	movs	r3, #148	; 0x94
    a924:	18fb      	adds	r3, r7, r3
    a926:	681b      	ldr	r3, [r3, #0]
    a928:	2b3f      	cmp	r3, #63	; 0x3f
    a92a:	d103      	bne.n	a934 <system_clock_init+0x50>
		coarse = 0x1f;
    a92c:	231f      	movs	r3, #31
    a92e:	2294      	movs	r2, #148	; 0x94
    a930:	18ba      	adds	r2, r7, r2
    a932:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    a934:	2394      	movs	r3, #148	; 0x94
    a936:	18fb      	adds	r3, r7, r3
    a938:	681b      	ldr	r3, [r3, #0]
    a93a:	b2da      	uxtb	r2, r3
    a93c:	2380      	movs	r3, #128	; 0x80
    a93e:	18fb      	adds	r3, r7, r3
    a940:	721a      	strb	r2, [r3, #8]
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
    a942:	2380      	movs	r3, #128	; 0x80
    a944:	18fb      	adds	r3, r7, r3
    a946:	2280      	movs	r2, #128	; 0x80
    a948:	0092      	lsls	r2, r2, #2
    a94a:	805a      	strh	r2, [r3, #2]
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    a94c:	2380      	movs	r3, #128	; 0x80
    a94e:	18fb      	adds	r3, r7, r3
    a950:	2200      	movs	r2, #0
    a952:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    a954:	2380      	movs	r3, #128	; 0x80
    a956:	18fb      	adds	r3, r7, r3
    a958:	2200      	movs	r2, #0
    a95a:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    a95c:	2380      	movs	r3, #128	; 0x80
    a95e:	18fb      	adds	r3, r7, r3
    a960:	2200      	movs	r2, #0
    a962:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    a964:	2380      	movs	r3, #128	; 0x80
    a966:	18fb      	adds	r3, r7, r3
    a968:	2207      	movs	r2, #7
    a96a:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    a96c:	2380      	movs	r3, #128	; 0x80
    a96e:	18fb      	adds	r3, r7, r3
    a970:	223f      	movs	r2, #63	; 0x3f
    a972:	81da      	strh	r2, [r3, #14]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
    a974:	2380      	movs	r3, #128	; 0x80
    a976:	18fb      	adds	r3, r7, r3
    a978:	220a      	movs	r2, #10
    a97a:	81da      	strh	r2, [r3, #14]
		dfll_conf.fine_value   = 0x1ff;
    a97c:	2380      	movs	r3, #128	; 0x80
    a97e:	18fb      	adds	r3, r7, r3
    a980:	4a78      	ldr	r2, [pc, #480]	; (ab64 <system_clock_init+0x280>)
    a982:	815a      	strh	r2, [r3, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    a984:	2380      	movs	r3, #128	; 0x80
    a986:	18fb      	adds	r3, r7, r3
    a988:	2200      	movs	r2, #0
    a98a:	805a      	strh	r2, [r3, #2]
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    a98c:	2380      	movs	r3, #128	; 0x80
    a98e:	18fb      	adds	r3, r7, r3
    a990:	2200      	movs	r2, #0
    a992:	71da      	strb	r2, [r3, #7]
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    a994:	2380      	movs	r3, #128	; 0x80
    a996:	18fb      	adds	r3, r7, r3
    a998:	2200      	movs	r2, #0
    a99a:	719a      	strb	r2, [r3, #6]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    a99c:	2380      	movs	r3, #128	; 0x80
    a99e:	18fb      	adds	r3, r7, r3
    a9a0:	2280      	movs	r2, #128	; 0x80
    a9a2:	0052      	lsls	r2, r2, #1
    a9a4:	809a      	strh	r2, [r3, #4]

		dfll_conf.multiply_factor = 48000;
    a9a6:	2380      	movs	r3, #128	; 0x80
    a9a8:	18fb      	adds	r3, r7, r3
    a9aa:	4a6f      	ldr	r2, [pc, #444]	; (ab68 <system_clock_init+0x284>)
    a9ac:	821a      	strh	r2, [r3, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    a9ae:	2380      	movs	r3, #128	; 0x80
    a9b0:	18fb      	adds	r3, r7, r3
    a9b2:	0018      	movs	r0, r3
    a9b4:	4b6d      	ldr	r3, [pc, #436]	; (ab6c <system_clock_init+0x288>)
    a9b6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    a9b8:	237c      	movs	r3, #124	; 0x7c
    a9ba:	18fb      	adds	r3, r7, r3
    a9bc:	0018      	movs	r0, r3
    a9be:	4b6c      	ldr	r3, [pc, #432]	; (ab70 <system_clock_init+0x28c>)
    a9c0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    a9c2:	237c      	movs	r3, #124	; 0x7c
    a9c4:	18fb      	adds	r3, r7, r3
    a9c6:	2200      	movs	r2, #0
    a9c8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    a9ca:	237c      	movs	r3, #124	; 0x7c
    a9cc:	18fb      	adds	r3, r7, r3
    a9ce:	2201      	movs	r2, #1
    a9d0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    a9d2:	237c      	movs	r3, #124	; 0x7c
    a9d4:	18fb      	adds	r3, r7, r3
    a9d6:	2201      	movs	r2, #1
    a9d8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    a9da:	237c      	movs	r3, #124	; 0x7c
    a9dc:	18fb      	adds	r3, r7, r3
    a9de:	0018      	movs	r0, r3
    a9e0:	4b64      	ldr	r3, [pc, #400]	; (ab74 <system_clock_init+0x290>)
    a9e2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    a9e4:	2006      	movs	r0, #6
    a9e6:	4b64      	ldr	r3, [pc, #400]	; (ab78 <system_clock_init+0x294>)
    a9e8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    a9ea:	4b64      	ldr	r3, [pc, #400]	; (ab7c <system_clock_init+0x298>)
    a9ec:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    a9ee:	2364      	movs	r3, #100	; 0x64
    a9f0:	18fb      	adds	r3, r7, r3
    a9f2:	0018      	movs	r0, r3
    a9f4:	4b62      	ldr	r3, [pc, #392]	; (ab80 <system_clock_init+0x29c>)
    a9f6:	4798      	blx	r3
    a9f8:	2364      	movs	r3, #100	; 0x64
    a9fa:	18fb      	adds	r3, r7, r3
    a9fc:	2203      	movs	r2, #3
    a9fe:	701a      	strb	r2, [r3, #0]
    aa00:	2364      	movs	r3, #100	; 0x64
    aa02:	18fb      	adds	r3, r7, r3
    aa04:	2201      	movs	r2, #1
    aa06:	605a      	str	r2, [r3, #4]
    aa08:	2364      	movs	r3, #100	; 0x64
    aa0a:	18fb      	adds	r3, r7, r3
    aa0c:	2200      	movs	r2, #0
    aa0e:	721a      	strb	r2, [r3, #8]
    aa10:	2364      	movs	r3, #100	; 0x64
    aa12:	18fb      	adds	r3, r7, r3
    aa14:	2200      	movs	r2, #0
    aa16:	725a      	strb	r2, [r3, #9]
    aa18:	2364      	movs	r3, #100	; 0x64
    aa1a:	18fb      	adds	r3, r7, r3
    aa1c:	0019      	movs	r1, r3
    aa1e:	2001      	movs	r0, #1
    aa20:	4b58      	ldr	r3, [pc, #352]	; (ab84 <system_clock_init+0x2a0>)
    aa22:	4798      	blx	r3
    aa24:	2001      	movs	r0, #1
    aa26:	4b58      	ldr	r3, [pc, #352]	; (ab88 <system_clock_init+0x2a4>)
    aa28:	4798      	blx	r3
    aa2a:	2358      	movs	r3, #88	; 0x58
    aa2c:	18fb      	adds	r3, r7, r3
    aa2e:	0018      	movs	r0, r3
    aa30:	4b53      	ldr	r3, [pc, #332]	; (ab80 <system_clock_init+0x29c>)
    aa32:	4798      	blx	r3
    aa34:	2358      	movs	r3, #88	; 0x58
    aa36:	18fb      	adds	r3, r7, r3
    aa38:	2206      	movs	r2, #6
    aa3a:	701a      	strb	r2, [r3, #0]
    aa3c:	2358      	movs	r3, #88	; 0x58
    aa3e:	18fb      	adds	r3, r7, r3
    aa40:	2201      	movs	r2, #1
    aa42:	605a      	str	r2, [r3, #4]
    aa44:	2358      	movs	r3, #88	; 0x58
    aa46:	18fb      	adds	r3, r7, r3
    aa48:	2200      	movs	r2, #0
    aa4a:	721a      	strb	r2, [r3, #8]
    aa4c:	2358      	movs	r3, #88	; 0x58
    aa4e:	18fb      	adds	r3, r7, r3
    aa50:	2201      	movs	r2, #1
    aa52:	725a      	strb	r2, [r3, #9]
    aa54:	2358      	movs	r3, #88	; 0x58
    aa56:	18fb      	adds	r3, r7, r3
    aa58:	0019      	movs	r1, r3
    aa5a:	2002      	movs	r0, #2
    aa5c:	4b49      	ldr	r3, [pc, #292]	; (ab84 <system_clock_init+0x2a0>)
    aa5e:	4798      	blx	r3
    aa60:	2002      	movs	r0, #2
    aa62:	4b49      	ldr	r3, [pc, #292]	; (ab88 <system_clock_init+0x2a4>)
    aa64:	4798      	blx	r3
    aa66:	234c      	movs	r3, #76	; 0x4c
    aa68:	18fb      	adds	r3, r7, r3
    aa6a:	0018      	movs	r0, r3
    aa6c:	4b44      	ldr	r3, [pc, #272]	; (ab80 <system_clock_init+0x29c>)
    aa6e:	4798      	blx	r3
    aa70:	234c      	movs	r3, #76	; 0x4c
    aa72:	18fb      	adds	r3, r7, r3
    aa74:	2206      	movs	r2, #6
    aa76:	701a      	strb	r2, [r3, #0]
    aa78:	234c      	movs	r3, #76	; 0x4c
    aa7a:	18fb      	adds	r3, r7, r3
    aa7c:	2201      	movs	r2, #1
    aa7e:	605a      	str	r2, [r3, #4]
    aa80:	234c      	movs	r3, #76	; 0x4c
    aa82:	18fb      	adds	r3, r7, r3
    aa84:	2200      	movs	r2, #0
    aa86:	721a      	strb	r2, [r3, #8]
    aa88:	234c      	movs	r3, #76	; 0x4c
    aa8a:	18fb      	adds	r3, r7, r3
    aa8c:	2200      	movs	r2, #0
    aa8e:	725a      	strb	r2, [r3, #9]
    aa90:	234c      	movs	r3, #76	; 0x4c
    aa92:	18fb      	adds	r3, r7, r3
    aa94:	0019      	movs	r1, r3
    aa96:	2003      	movs	r0, #3
    aa98:	4b3a      	ldr	r3, [pc, #232]	; (ab84 <system_clock_init+0x2a0>)
    aa9a:	4798      	blx	r3
    aa9c:	2003      	movs	r0, #3
    aa9e:	4b3a      	ldr	r3, [pc, #232]	; (ab88 <system_clock_init+0x2a4>)
    aaa0:	4798      	blx	r3
    aaa2:	2340      	movs	r3, #64	; 0x40
    aaa4:	18fb      	adds	r3, r7, r3
    aaa6:	0018      	movs	r0, r3
    aaa8:	4b35      	ldr	r3, [pc, #212]	; (ab80 <system_clock_init+0x29c>)
    aaaa:	4798      	blx	r3
    aaac:	2340      	movs	r3, #64	; 0x40
    aaae:	18fb      	adds	r3, r7, r3
    aab0:	2206      	movs	r2, #6
    aab2:	701a      	strb	r2, [r3, #0]
    aab4:	2340      	movs	r3, #64	; 0x40
    aab6:	18fb      	adds	r3, r7, r3
    aab8:	2201      	movs	r2, #1
    aaba:	605a      	str	r2, [r3, #4]
    aabc:	2340      	movs	r3, #64	; 0x40
    aabe:	18fb      	adds	r3, r7, r3
    aac0:	2200      	movs	r2, #0
    aac2:	721a      	strb	r2, [r3, #8]
    aac4:	2340      	movs	r3, #64	; 0x40
    aac6:	18fb      	adds	r3, r7, r3
    aac8:	2200      	movs	r2, #0
    aaca:	725a      	strb	r2, [r3, #9]
    aacc:	2340      	movs	r3, #64	; 0x40
    aace:	18fb      	adds	r3, r7, r3
    aad0:	0019      	movs	r1, r3
    aad2:	2004      	movs	r0, #4
    aad4:	4b2b      	ldr	r3, [pc, #172]	; (ab84 <system_clock_init+0x2a0>)
    aad6:	4798      	blx	r3
    aad8:	2004      	movs	r0, #4
    aada:	4b2b      	ldr	r3, [pc, #172]	; (ab88 <system_clock_init+0x2a4>)
    aadc:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    aade:	2007      	movs	r0, #7
    aae0:	4b25      	ldr	r3, [pc, #148]	; (ab78 <system_clock_init+0x294>)
    aae2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    aae4:	46c0      	nop			; (mov r8, r8)
    aae6:	2007      	movs	r0, #7
    aae8:	4b28      	ldr	r3, [pc, #160]	; (ab8c <system_clock_init+0x2a8>)
    aaea:	4798      	blx	r3
    aaec:	0003      	movs	r3, r0
    aaee:	001a      	movs	r2, r3
    aaf0:	2301      	movs	r3, #1
    aaf2:	4053      	eors	r3, r2
    aaf4:	b2db      	uxtb	r3, r3
    aaf6:	2b00      	cmp	r3, #0
    aaf8:	d1f5      	bne.n	aae6 <system_clock_init+0x202>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    aafa:	2000      	movs	r0, #0
    aafc:	4b24      	ldr	r3, [pc, #144]	; (ab90 <system_clock_init+0x2ac>)
    aafe:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    ab00:	2100      	movs	r1, #0
    ab02:	2000      	movs	r0, #0
    ab04:	4b23      	ldr	r3, [pc, #140]	; (ab94 <system_clock_init+0x2b0>)
    ab06:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    ab08:	2100      	movs	r1, #0
    ab0a:	2001      	movs	r0, #1
    ab0c:	4b21      	ldr	r3, [pc, #132]	; (ab94 <system_clock_init+0x2b0>)
    ab0e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    ab10:	2100      	movs	r1, #0
    ab12:	2002      	movs	r0, #2
    ab14:	4b1f      	ldr	r3, [pc, #124]	; (ab94 <system_clock_init+0x2b0>)
    ab16:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    ab18:	003b      	movs	r3, r7
    ab1a:	0018      	movs	r0, r3
    ab1c:	4b18      	ldr	r3, [pc, #96]	; (ab80 <system_clock_init+0x29c>)
    ab1e:	4798      	blx	r3
    ab20:	003b      	movs	r3, r7
    ab22:	2207      	movs	r2, #7
    ab24:	701a      	strb	r2, [r3, #0]
    ab26:	003b      	movs	r3, r7
    ab28:	2201      	movs	r2, #1
    ab2a:	605a      	str	r2, [r3, #4]
    ab2c:	003b      	movs	r3, r7
    ab2e:	2200      	movs	r2, #0
    ab30:	721a      	strb	r2, [r3, #8]
    ab32:	003b      	movs	r3, r7
    ab34:	2200      	movs	r2, #0
    ab36:	725a      	strb	r2, [r3, #9]
    ab38:	003b      	movs	r3, r7
    ab3a:	0019      	movs	r1, r3
    ab3c:	2000      	movs	r0, #0
    ab3e:	4b11      	ldr	r3, [pc, #68]	; (ab84 <system_clock_init+0x2a0>)
    ab40:	4798      	blx	r3
    ab42:	2000      	movs	r0, #0
    ab44:	4b10      	ldr	r3, [pc, #64]	; (ab88 <system_clock_init+0x2a4>)
    ab46:	4798      	blx	r3
#endif
}
    ab48:	46c0      	nop			; (mov r8, r8)
    ab4a:	46bd      	mov	sp, r7
    ab4c:	b026      	add	sp, #152	; 0x98
    ab4e:	bd80      	pop	{r7, pc}
    ab50:	40000800 	.word	0x40000800
    ab54:	0000a4e1 	.word	0x0000a4e1
    ab58:	0000a8ad 	.word	0x0000a8ad
    ab5c:	0000a419 	.word	0x0000a419
    ab60:	00806024 	.word	0x00806024
    ab64:	000001ff 	.word	0x000001ff
    ab68:	ffffbb80 	.word	0xffffbb80
    ab6c:	0000a6ad 	.word	0x0000a6ad
    ab70:	0000a3f5 	.word	0x0000a3f5
    ab74:	0000a635 	.word	0x0000a635
    ab78:	0000a77d 	.word	0x0000a77d
    ab7c:	0000ac3d 	.word	0x0000ac3d
    ab80:	0000a3c5 	.word	0x0000a3c5
    ab84:	0000ac6d 	.word	0x0000ac6d
    ab88:	0000ad91 	.word	0x0000ad91
    ab8c:	0000a829 	.word	0x0000a829
    ab90:	0000a46d 	.word	0x0000a46d
    ab94:	0000a48d 	.word	0x0000a48d

0000ab98 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    ab98:	b580      	push	{r7, lr}
    ab9a:	b082      	sub	sp, #8
    ab9c:	af00      	add	r7, sp, #0
    ab9e:	0002      	movs	r2, r0
    aba0:	6039      	str	r1, [r7, #0]
    aba2:	1dfb      	adds	r3, r7, #7
    aba4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    aba6:	1dfb      	adds	r3, r7, #7
    aba8:	781b      	ldrb	r3, [r3, #0]
    abaa:	2b01      	cmp	r3, #1
    abac:	d00a      	beq.n	abc4 <system_apb_clock_set_mask+0x2c>
    abae:	2b02      	cmp	r3, #2
    abb0:	d00f      	beq.n	abd2 <system_apb_clock_set_mask+0x3a>
    abb2:	2b00      	cmp	r3, #0
    abb4:	d114      	bne.n	abe0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    abb6:	4b0e      	ldr	r3, [pc, #56]	; (abf0 <system_apb_clock_set_mask+0x58>)
    abb8:	4a0d      	ldr	r2, [pc, #52]	; (abf0 <system_apb_clock_set_mask+0x58>)
    abba:	6991      	ldr	r1, [r2, #24]
    abbc:	683a      	ldr	r2, [r7, #0]
    abbe:	430a      	orrs	r2, r1
    abc0:	619a      	str	r2, [r3, #24]
			break;
    abc2:	e00f      	b.n	abe4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    abc4:	4b0a      	ldr	r3, [pc, #40]	; (abf0 <system_apb_clock_set_mask+0x58>)
    abc6:	4a0a      	ldr	r2, [pc, #40]	; (abf0 <system_apb_clock_set_mask+0x58>)
    abc8:	69d1      	ldr	r1, [r2, #28]
    abca:	683a      	ldr	r2, [r7, #0]
    abcc:	430a      	orrs	r2, r1
    abce:	61da      	str	r2, [r3, #28]
			break;
    abd0:	e008      	b.n	abe4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    abd2:	4b07      	ldr	r3, [pc, #28]	; (abf0 <system_apb_clock_set_mask+0x58>)
    abd4:	4a06      	ldr	r2, [pc, #24]	; (abf0 <system_apb_clock_set_mask+0x58>)
    abd6:	6a11      	ldr	r1, [r2, #32]
    abd8:	683a      	ldr	r2, [r7, #0]
    abda:	430a      	orrs	r2, r1
    abdc:	621a      	str	r2, [r3, #32]
			break;
    abde:	e001      	b.n	abe4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    abe0:	2317      	movs	r3, #23
    abe2:	e000      	b.n	abe6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    abe4:	2300      	movs	r3, #0
}
    abe6:	0018      	movs	r0, r3
    abe8:	46bd      	mov	sp, r7
    abea:	b002      	add	sp, #8
    abec:	bd80      	pop	{r7, pc}
    abee:	46c0      	nop			; (mov r8, r8)
    abf0:	40000400 	.word	0x40000400

0000abf4 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    abf4:	b580      	push	{r7, lr}
    abf6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    abf8:	4b02      	ldr	r3, [pc, #8]	; (ac04 <system_interrupt_enter_critical_section+0x10>)
    abfa:	4798      	blx	r3
}
    abfc:	46c0      	nop			; (mov r8, r8)
    abfe:	46bd      	mov	sp, r7
    ac00:	bd80      	pop	{r7, pc}
    ac02:	46c0      	nop			; (mov r8, r8)
    ac04:	0000a331 	.word	0x0000a331

0000ac08 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    ac08:	b580      	push	{r7, lr}
    ac0a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    ac0c:	4b02      	ldr	r3, [pc, #8]	; (ac18 <system_interrupt_leave_critical_section+0x10>)
    ac0e:	4798      	blx	r3
}
    ac10:	46c0      	nop			; (mov r8, r8)
    ac12:	46bd      	mov	sp, r7
    ac14:	bd80      	pop	{r7, pc}
    ac16:	46c0      	nop			; (mov r8, r8)
    ac18:	0000a385 	.word	0x0000a385

0000ac1c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    ac1c:	b580      	push	{r7, lr}
    ac1e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ac20:	4b05      	ldr	r3, [pc, #20]	; (ac38 <system_gclk_is_syncing+0x1c>)
    ac22:	785b      	ldrb	r3, [r3, #1]
    ac24:	b2db      	uxtb	r3, r3
    ac26:	b25b      	sxtb	r3, r3
    ac28:	2b00      	cmp	r3, #0
    ac2a:	da01      	bge.n	ac30 <system_gclk_is_syncing+0x14>
		return true;
    ac2c:	2301      	movs	r3, #1
    ac2e:	e000      	b.n	ac32 <system_gclk_is_syncing+0x16>
	}

	return false;
    ac30:	2300      	movs	r3, #0
}
    ac32:	0018      	movs	r0, r3
    ac34:	46bd      	mov	sp, r7
    ac36:	bd80      	pop	{r7, pc}
    ac38:	40000c00 	.word	0x40000c00

0000ac3c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    ac3c:	b580      	push	{r7, lr}
    ac3e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    ac40:	2108      	movs	r1, #8
    ac42:	2000      	movs	r0, #0
    ac44:	4b07      	ldr	r3, [pc, #28]	; (ac64 <system_gclk_init+0x28>)
    ac46:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    ac48:	4b07      	ldr	r3, [pc, #28]	; (ac68 <system_gclk_init+0x2c>)
    ac4a:	2201      	movs	r2, #1
    ac4c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    ac4e:	46c0      	nop			; (mov r8, r8)
    ac50:	4b05      	ldr	r3, [pc, #20]	; (ac68 <system_gclk_init+0x2c>)
    ac52:	781b      	ldrb	r3, [r3, #0]
    ac54:	b2db      	uxtb	r3, r3
    ac56:	001a      	movs	r2, r3
    ac58:	2301      	movs	r3, #1
    ac5a:	4013      	ands	r3, r2
    ac5c:	d1f8      	bne.n	ac50 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    ac5e:	46c0      	nop			; (mov r8, r8)
    ac60:	46bd      	mov	sp, r7
    ac62:	bd80      	pop	{r7, pc}
    ac64:	0000ab99 	.word	0x0000ab99
    ac68:	40000c00 	.word	0x40000c00

0000ac6c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    ac6c:	b580      	push	{r7, lr}
    ac6e:	b086      	sub	sp, #24
    ac70:	af00      	add	r7, sp, #0
    ac72:	0002      	movs	r2, r0
    ac74:	6039      	str	r1, [r7, #0]
    ac76:	1dfb      	adds	r3, r7, #7
    ac78:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    ac7a:	1dfb      	adds	r3, r7, #7
    ac7c:	781b      	ldrb	r3, [r3, #0]
    ac7e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    ac80:	1dfb      	adds	r3, r7, #7
    ac82:	781b      	ldrb	r3, [r3, #0]
    ac84:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    ac86:	683b      	ldr	r3, [r7, #0]
    ac88:	781b      	ldrb	r3, [r3, #0]
    ac8a:	021b      	lsls	r3, r3, #8
    ac8c:	001a      	movs	r2, r3
    ac8e:	697b      	ldr	r3, [r7, #20]
    ac90:	4313      	orrs	r3, r2
    ac92:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    ac94:	683b      	ldr	r3, [r7, #0]
    ac96:	785b      	ldrb	r3, [r3, #1]
    ac98:	2b00      	cmp	r3, #0
    ac9a:	d004      	beq.n	aca6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    ac9c:	697b      	ldr	r3, [r7, #20]
    ac9e:	2280      	movs	r2, #128	; 0x80
    aca0:	02d2      	lsls	r2, r2, #11
    aca2:	4313      	orrs	r3, r2
    aca4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    aca6:	683b      	ldr	r3, [r7, #0]
    aca8:	7a5b      	ldrb	r3, [r3, #9]
    acaa:	2b00      	cmp	r3, #0
    acac:	d004      	beq.n	acb8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    acae:	697b      	ldr	r3, [r7, #20]
    acb0:	2280      	movs	r2, #128	; 0x80
    acb2:	0312      	lsls	r2, r2, #12
    acb4:	4313      	orrs	r3, r2
    acb6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    acb8:	683b      	ldr	r3, [r7, #0]
    acba:	685b      	ldr	r3, [r3, #4]
    acbc:	2b01      	cmp	r3, #1
    acbe:	d92c      	bls.n	ad1a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    acc0:	683b      	ldr	r3, [r7, #0]
    acc2:	685a      	ldr	r2, [r3, #4]
    acc4:	683b      	ldr	r3, [r7, #0]
    acc6:	685b      	ldr	r3, [r3, #4]
    acc8:	3b01      	subs	r3, #1
    acca:	4013      	ands	r3, r2
    accc:	d11a      	bne.n	ad04 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    acce:	2300      	movs	r3, #0
    acd0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    acd2:	2302      	movs	r3, #2
    acd4:	60bb      	str	r3, [r7, #8]
    acd6:	e005      	b.n	ace4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    acd8:	68fb      	ldr	r3, [r7, #12]
    acda:	3301      	adds	r3, #1
    acdc:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    acde:	68bb      	ldr	r3, [r7, #8]
    ace0:	005b      	lsls	r3, r3, #1
    ace2:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    ace4:	683b      	ldr	r3, [r7, #0]
    ace6:	685a      	ldr	r2, [r3, #4]
    ace8:	68bb      	ldr	r3, [r7, #8]
    acea:	429a      	cmp	r2, r3
    acec:	d8f4      	bhi.n	acd8 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    acee:	68fb      	ldr	r3, [r7, #12]
    acf0:	021b      	lsls	r3, r3, #8
    acf2:	693a      	ldr	r2, [r7, #16]
    acf4:	4313      	orrs	r3, r2
    acf6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    acf8:	697b      	ldr	r3, [r7, #20]
    acfa:	2280      	movs	r2, #128	; 0x80
    acfc:	0352      	lsls	r2, r2, #13
    acfe:	4313      	orrs	r3, r2
    ad00:	617b      	str	r3, [r7, #20]
    ad02:	e00a      	b.n	ad1a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    ad04:	683b      	ldr	r3, [r7, #0]
    ad06:	685b      	ldr	r3, [r3, #4]
    ad08:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    ad0a:	693a      	ldr	r2, [r7, #16]
    ad0c:	4313      	orrs	r3, r2
    ad0e:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    ad10:	697b      	ldr	r3, [r7, #20]
    ad12:	2280      	movs	r2, #128	; 0x80
    ad14:	0292      	lsls	r2, r2, #10
    ad16:	4313      	orrs	r3, r2
    ad18:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    ad1a:	683b      	ldr	r3, [r7, #0]
    ad1c:	7a1b      	ldrb	r3, [r3, #8]
    ad1e:	2b00      	cmp	r3, #0
    ad20:	d004      	beq.n	ad2c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    ad22:	697b      	ldr	r3, [r7, #20]
    ad24:	2280      	movs	r2, #128	; 0x80
    ad26:	0392      	lsls	r2, r2, #14
    ad28:	4313      	orrs	r3, r2
    ad2a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    ad2c:	46c0      	nop			; (mov r8, r8)
    ad2e:	4b13      	ldr	r3, [pc, #76]	; (ad7c <system_gclk_gen_set_config+0x110>)
    ad30:	4798      	blx	r3
    ad32:	1e03      	subs	r3, r0, #0
    ad34:	d1fb      	bne.n	ad2e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    ad36:	4b12      	ldr	r3, [pc, #72]	; (ad80 <system_gclk_gen_set_config+0x114>)
    ad38:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    ad3a:	4a12      	ldr	r2, [pc, #72]	; (ad84 <system_gclk_gen_set_config+0x118>)
    ad3c:	1dfb      	adds	r3, r7, #7
    ad3e:	781b      	ldrb	r3, [r3, #0]
    ad40:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    ad42:	46c0      	nop			; (mov r8, r8)
    ad44:	4b0d      	ldr	r3, [pc, #52]	; (ad7c <system_gclk_gen_set_config+0x110>)
    ad46:	4798      	blx	r3
    ad48:	1e03      	subs	r3, r0, #0
    ad4a:	d1fb      	bne.n	ad44 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    ad4c:	4b0e      	ldr	r3, [pc, #56]	; (ad88 <system_gclk_gen_set_config+0x11c>)
    ad4e:	693a      	ldr	r2, [r7, #16]
    ad50:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    ad52:	46c0      	nop			; (mov r8, r8)
    ad54:	4b09      	ldr	r3, [pc, #36]	; (ad7c <system_gclk_gen_set_config+0x110>)
    ad56:	4798      	blx	r3
    ad58:	1e03      	subs	r3, r0, #0
    ad5a:	d1fb      	bne.n	ad54 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    ad5c:	4b0a      	ldr	r3, [pc, #40]	; (ad88 <system_gclk_gen_set_config+0x11c>)
    ad5e:	4a0a      	ldr	r2, [pc, #40]	; (ad88 <system_gclk_gen_set_config+0x11c>)
    ad60:	6851      	ldr	r1, [r2, #4]
    ad62:	2280      	movs	r2, #128	; 0x80
    ad64:	0252      	lsls	r2, r2, #9
    ad66:	4011      	ands	r1, r2
    ad68:	697a      	ldr	r2, [r7, #20]
    ad6a:	430a      	orrs	r2, r1
    ad6c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    ad6e:	4b07      	ldr	r3, [pc, #28]	; (ad8c <system_gclk_gen_set_config+0x120>)
    ad70:	4798      	blx	r3
}
    ad72:	46c0      	nop			; (mov r8, r8)
    ad74:	46bd      	mov	sp, r7
    ad76:	b006      	add	sp, #24
    ad78:	bd80      	pop	{r7, pc}
    ad7a:	46c0      	nop			; (mov r8, r8)
    ad7c:	0000ac1d 	.word	0x0000ac1d
    ad80:	0000abf5 	.word	0x0000abf5
    ad84:	40000c08 	.word	0x40000c08
    ad88:	40000c00 	.word	0x40000c00
    ad8c:	0000ac09 	.word	0x0000ac09

0000ad90 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    ad90:	b580      	push	{r7, lr}
    ad92:	b082      	sub	sp, #8
    ad94:	af00      	add	r7, sp, #0
    ad96:	0002      	movs	r2, r0
    ad98:	1dfb      	adds	r3, r7, #7
    ad9a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    ad9c:	46c0      	nop			; (mov r8, r8)
    ad9e:	4b0e      	ldr	r3, [pc, #56]	; (add8 <system_gclk_gen_enable+0x48>)
    ada0:	4798      	blx	r3
    ada2:	1e03      	subs	r3, r0, #0
    ada4:	d1fb      	bne.n	ad9e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    ada6:	4b0d      	ldr	r3, [pc, #52]	; (addc <system_gclk_gen_enable+0x4c>)
    ada8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    adaa:	4a0d      	ldr	r2, [pc, #52]	; (ade0 <system_gclk_gen_enable+0x50>)
    adac:	1dfb      	adds	r3, r7, #7
    adae:	781b      	ldrb	r3, [r3, #0]
    adb0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    adb2:	46c0      	nop			; (mov r8, r8)
    adb4:	4b08      	ldr	r3, [pc, #32]	; (add8 <system_gclk_gen_enable+0x48>)
    adb6:	4798      	blx	r3
    adb8:	1e03      	subs	r3, r0, #0
    adba:	d1fb      	bne.n	adb4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    adbc:	4b09      	ldr	r3, [pc, #36]	; (ade4 <system_gclk_gen_enable+0x54>)
    adbe:	4a09      	ldr	r2, [pc, #36]	; (ade4 <system_gclk_gen_enable+0x54>)
    adc0:	6852      	ldr	r2, [r2, #4]
    adc2:	2180      	movs	r1, #128	; 0x80
    adc4:	0249      	lsls	r1, r1, #9
    adc6:	430a      	orrs	r2, r1
    adc8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    adca:	4b07      	ldr	r3, [pc, #28]	; (ade8 <system_gclk_gen_enable+0x58>)
    adcc:	4798      	blx	r3
}
    adce:	46c0      	nop			; (mov r8, r8)
    add0:	46bd      	mov	sp, r7
    add2:	b002      	add	sp, #8
    add4:	bd80      	pop	{r7, pc}
    add6:	46c0      	nop			; (mov r8, r8)
    add8:	0000ac1d 	.word	0x0000ac1d
    addc:	0000abf5 	.word	0x0000abf5
    ade0:	40000c04 	.word	0x40000c04
    ade4:	40000c00 	.word	0x40000c00
    ade8:	0000ac09 	.word	0x0000ac09

0000adec <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    adec:	b580      	push	{r7, lr}
    adee:	b086      	sub	sp, #24
    adf0:	af00      	add	r7, sp, #0
    adf2:	0002      	movs	r2, r0
    adf4:	1dfb      	adds	r3, r7, #7
    adf6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    adf8:	46c0      	nop			; (mov r8, r8)
    adfa:	4b2a      	ldr	r3, [pc, #168]	; (aea4 <system_gclk_gen_get_hz+0xb8>)
    adfc:	4798      	blx	r3
    adfe:	1e03      	subs	r3, r0, #0
    ae00:	d1fb      	bne.n	adfa <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    ae02:	4b29      	ldr	r3, [pc, #164]	; (aea8 <system_gclk_gen_get_hz+0xbc>)
    ae04:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ae06:	4a29      	ldr	r2, [pc, #164]	; (aeac <system_gclk_gen_get_hz+0xc0>)
    ae08:	1dfb      	adds	r3, r7, #7
    ae0a:	781b      	ldrb	r3, [r3, #0]
    ae0c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    ae0e:	46c0      	nop			; (mov r8, r8)
    ae10:	4b24      	ldr	r3, [pc, #144]	; (aea4 <system_gclk_gen_get_hz+0xb8>)
    ae12:	4798      	blx	r3
    ae14:	1e03      	subs	r3, r0, #0
    ae16:	d1fb      	bne.n	ae10 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    ae18:	4b25      	ldr	r3, [pc, #148]	; (aeb0 <system_gclk_gen_get_hz+0xc4>)
    ae1a:	685b      	ldr	r3, [r3, #4]
    ae1c:	04db      	lsls	r3, r3, #19
    ae1e:	0edb      	lsrs	r3, r3, #27
    ae20:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    ae22:	0018      	movs	r0, r3
    ae24:	4b23      	ldr	r3, [pc, #140]	; (aeb4 <system_gclk_gen_get_hz+0xc8>)
    ae26:	4798      	blx	r3
    ae28:	0003      	movs	r3, r0
    ae2a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ae2c:	4a1f      	ldr	r2, [pc, #124]	; (aeac <system_gclk_gen_get_hz+0xc0>)
    ae2e:	1dfb      	adds	r3, r7, #7
    ae30:	781b      	ldrb	r3, [r3, #0]
    ae32:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    ae34:	4b1e      	ldr	r3, [pc, #120]	; (aeb0 <system_gclk_gen_get_hz+0xc4>)
    ae36:	685b      	ldr	r3, [r3, #4]
    ae38:	02db      	lsls	r3, r3, #11
    ae3a:	0fdb      	lsrs	r3, r3, #31
    ae3c:	b2da      	uxtb	r2, r3
    ae3e:	2313      	movs	r3, #19
    ae40:	18fb      	adds	r3, r7, r3
    ae42:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    ae44:	4a1c      	ldr	r2, [pc, #112]	; (aeb8 <system_gclk_gen_get_hz+0xcc>)
    ae46:	1dfb      	adds	r3, r7, #7
    ae48:	781b      	ldrb	r3, [r3, #0]
    ae4a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    ae4c:	46c0      	nop			; (mov r8, r8)
    ae4e:	4b15      	ldr	r3, [pc, #84]	; (aea4 <system_gclk_gen_get_hz+0xb8>)
    ae50:	4798      	blx	r3
    ae52:	1e03      	subs	r3, r0, #0
    ae54:	d1fb      	bne.n	ae4e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    ae56:	4b16      	ldr	r3, [pc, #88]	; (aeb0 <system_gclk_gen_get_hz+0xc4>)
    ae58:	689b      	ldr	r3, [r3, #8]
    ae5a:	021b      	lsls	r3, r3, #8
    ae5c:	0c1b      	lsrs	r3, r3, #16
    ae5e:	b29b      	uxth	r3, r3
    ae60:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    ae62:	4b16      	ldr	r3, [pc, #88]	; (aebc <system_gclk_gen_get_hz+0xd0>)
    ae64:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    ae66:	2313      	movs	r3, #19
    ae68:	18fb      	adds	r3, r7, r3
    ae6a:	781b      	ldrb	r3, [r3, #0]
    ae6c:	2b00      	cmp	r3, #0
    ae6e:	d109      	bne.n	ae84 <system_gclk_gen_get_hz+0x98>
    ae70:	68fb      	ldr	r3, [r7, #12]
    ae72:	2b01      	cmp	r3, #1
    ae74:	d906      	bls.n	ae84 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    ae76:	4b12      	ldr	r3, [pc, #72]	; (aec0 <system_gclk_gen_get_hz+0xd4>)
    ae78:	68f9      	ldr	r1, [r7, #12]
    ae7a:	6978      	ldr	r0, [r7, #20]
    ae7c:	4798      	blx	r3
    ae7e:	0003      	movs	r3, r0
    ae80:	617b      	str	r3, [r7, #20]
    ae82:	e00a      	b.n	ae9a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    ae84:	2313      	movs	r3, #19
    ae86:	18fb      	adds	r3, r7, r3
    ae88:	781b      	ldrb	r3, [r3, #0]
    ae8a:	2b00      	cmp	r3, #0
    ae8c:	d005      	beq.n	ae9a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    ae8e:	68fb      	ldr	r3, [r7, #12]
    ae90:	3301      	adds	r3, #1
    ae92:	697a      	ldr	r2, [r7, #20]
    ae94:	40da      	lsrs	r2, r3
    ae96:	0013      	movs	r3, r2
    ae98:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    ae9a:	697b      	ldr	r3, [r7, #20]
}
    ae9c:	0018      	movs	r0, r3
    ae9e:	46bd      	mov	sp, r7
    aea0:	b006      	add	sp, #24
    aea2:	bd80      	pop	{r7, pc}
    aea4:	0000ac1d 	.word	0x0000ac1d
    aea8:	0000abf5 	.word	0x0000abf5
    aeac:	40000c04 	.word	0x40000c04
    aeb0:	40000c00 	.word	0x40000c00
    aeb4:	0000a575 	.word	0x0000a575
    aeb8:	40000c08 	.word	0x40000c08
    aebc:	0000ac09 	.word	0x0000ac09
    aec0:	0000b4e1 	.word	0x0000b4e1

0000aec4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    aec4:	b580      	push	{r7, lr}
    aec6:	b084      	sub	sp, #16
    aec8:	af00      	add	r7, sp, #0
    aeca:	0002      	movs	r2, r0
    aecc:	6039      	str	r1, [r7, #0]
    aece:	1dfb      	adds	r3, r7, #7
    aed0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    aed2:	1dfb      	adds	r3, r7, #7
    aed4:	781b      	ldrb	r3, [r3, #0]
    aed6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    aed8:	683b      	ldr	r3, [r7, #0]
    aeda:	781b      	ldrb	r3, [r3, #0]
    aedc:	021b      	lsls	r3, r3, #8
    aede:	001a      	movs	r2, r3
    aee0:	68fb      	ldr	r3, [r7, #12]
    aee2:	4313      	orrs	r3, r2
    aee4:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    aee6:	1dfb      	adds	r3, r7, #7
    aee8:	781b      	ldrb	r3, [r3, #0]
    aeea:	0018      	movs	r0, r3
    aeec:	4b04      	ldr	r3, [pc, #16]	; (af00 <system_gclk_chan_set_config+0x3c>)
    aeee:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    aef0:	4b04      	ldr	r3, [pc, #16]	; (af04 <system_gclk_chan_set_config+0x40>)
    aef2:	68fa      	ldr	r2, [r7, #12]
    aef4:	b292      	uxth	r2, r2
    aef6:	805a      	strh	r2, [r3, #2]
}
    aef8:	46c0      	nop			; (mov r8, r8)
    aefa:	46bd      	mov	sp, r7
    aefc:	b004      	add	sp, #16
    aefe:	bd80      	pop	{r7, pc}
    af00:	0000af51 	.word	0x0000af51
    af04:	40000c00 	.word	0x40000c00

0000af08 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    af08:	b580      	push	{r7, lr}
    af0a:	b082      	sub	sp, #8
    af0c:	af00      	add	r7, sp, #0
    af0e:	0002      	movs	r2, r0
    af10:	1dfb      	adds	r3, r7, #7
    af12:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    af14:	4b0a      	ldr	r3, [pc, #40]	; (af40 <system_gclk_chan_enable+0x38>)
    af16:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    af18:	4a0a      	ldr	r2, [pc, #40]	; (af44 <system_gclk_chan_enable+0x3c>)
    af1a:	1dfb      	adds	r3, r7, #7
    af1c:	781b      	ldrb	r3, [r3, #0]
    af1e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    af20:	4909      	ldr	r1, [pc, #36]	; (af48 <system_gclk_chan_enable+0x40>)
    af22:	4b09      	ldr	r3, [pc, #36]	; (af48 <system_gclk_chan_enable+0x40>)
    af24:	885b      	ldrh	r3, [r3, #2]
    af26:	b29b      	uxth	r3, r3
    af28:	2280      	movs	r2, #128	; 0x80
    af2a:	01d2      	lsls	r2, r2, #7
    af2c:	4313      	orrs	r3, r2
    af2e:	b29b      	uxth	r3, r3
    af30:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    af32:	4b06      	ldr	r3, [pc, #24]	; (af4c <system_gclk_chan_enable+0x44>)
    af34:	4798      	blx	r3
}
    af36:	46c0      	nop			; (mov r8, r8)
    af38:	46bd      	mov	sp, r7
    af3a:	b002      	add	sp, #8
    af3c:	bd80      	pop	{r7, pc}
    af3e:	46c0      	nop			; (mov r8, r8)
    af40:	0000abf5 	.word	0x0000abf5
    af44:	40000c02 	.word	0x40000c02
    af48:	40000c00 	.word	0x40000c00
    af4c:	0000ac09 	.word	0x0000ac09

0000af50 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    af50:	b580      	push	{r7, lr}
    af52:	b084      	sub	sp, #16
    af54:	af00      	add	r7, sp, #0
    af56:	0002      	movs	r2, r0
    af58:	1dfb      	adds	r3, r7, #7
    af5a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    af5c:	4b1c      	ldr	r3, [pc, #112]	; (afd0 <system_gclk_chan_disable+0x80>)
    af5e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    af60:	4a1c      	ldr	r2, [pc, #112]	; (afd4 <system_gclk_chan_disable+0x84>)
    af62:	1dfb      	adds	r3, r7, #7
    af64:	781b      	ldrb	r3, [r3, #0]
    af66:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    af68:	4b1b      	ldr	r3, [pc, #108]	; (afd8 <system_gclk_chan_disable+0x88>)
    af6a:	885b      	ldrh	r3, [r3, #2]
    af6c:	051b      	lsls	r3, r3, #20
    af6e:	0f1b      	lsrs	r3, r3, #28
    af70:	b2db      	uxtb	r3, r3
    af72:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    af74:	4a18      	ldr	r2, [pc, #96]	; (afd8 <system_gclk_chan_disable+0x88>)
    af76:	8853      	ldrh	r3, [r2, #2]
    af78:	4918      	ldr	r1, [pc, #96]	; (afdc <system_gclk_chan_disable+0x8c>)
    af7a:	400b      	ands	r3, r1
    af7c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    af7e:	4a16      	ldr	r2, [pc, #88]	; (afd8 <system_gclk_chan_disable+0x88>)
    af80:	4b15      	ldr	r3, [pc, #84]	; (afd8 <system_gclk_chan_disable+0x88>)
    af82:	885b      	ldrh	r3, [r3, #2]
    af84:	b29b      	uxth	r3, r3
    af86:	4916      	ldr	r1, [pc, #88]	; (afe0 <system_gclk_chan_disable+0x90>)
    af88:	400b      	ands	r3, r1
    af8a:	b29b      	uxth	r3, r3
    af8c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    af8e:	46c0      	nop			; (mov r8, r8)
    af90:	4b11      	ldr	r3, [pc, #68]	; (afd8 <system_gclk_chan_disable+0x88>)
    af92:	885b      	ldrh	r3, [r3, #2]
    af94:	b29b      	uxth	r3, r3
    af96:	001a      	movs	r2, r3
    af98:	2380      	movs	r3, #128	; 0x80
    af9a:	01db      	lsls	r3, r3, #7
    af9c:	4013      	ands	r3, r2
    af9e:	d1f7      	bne.n	af90 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    afa0:	4a0d      	ldr	r2, [pc, #52]	; (afd8 <system_gclk_chan_disable+0x88>)
    afa2:	68fb      	ldr	r3, [r7, #12]
    afa4:	b2db      	uxtb	r3, r3
    afa6:	1c19      	adds	r1, r3, #0
    afa8:	230f      	movs	r3, #15
    afaa:	400b      	ands	r3, r1
    afac:	b2d9      	uxtb	r1, r3
    afae:	8853      	ldrh	r3, [r2, #2]
    afb0:	1c08      	adds	r0, r1, #0
    afb2:	210f      	movs	r1, #15
    afb4:	4001      	ands	r1, r0
    afb6:	0208      	lsls	r0, r1, #8
    afb8:	4908      	ldr	r1, [pc, #32]	; (afdc <system_gclk_chan_disable+0x8c>)
    afba:	400b      	ands	r3, r1
    afbc:	1c19      	adds	r1, r3, #0
    afbe:	1c03      	adds	r3, r0, #0
    afc0:	430b      	orrs	r3, r1
    afc2:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    afc4:	4b07      	ldr	r3, [pc, #28]	; (afe4 <system_gclk_chan_disable+0x94>)
    afc6:	4798      	blx	r3
}
    afc8:	46c0      	nop			; (mov r8, r8)
    afca:	46bd      	mov	sp, r7
    afcc:	b004      	add	sp, #16
    afce:	bd80      	pop	{r7, pc}
    afd0:	0000abf5 	.word	0x0000abf5
    afd4:	40000c02 	.word	0x40000c02
    afd8:	40000c00 	.word	0x40000c00
    afdc:	fffff0ff 	.word	0xfffff0ff
    afe0:	ffffbfff 	.word	0xffffbfff
    afe4:	0000ac09 	.word	0x0000ac09

0000afe8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    afe8:	b580      	push	{r7, lr}
    afea:	b084      	sub	sp, #16
    afec:	af00      	add	r7, sp, #0
    afee:	0002      	movs	r2, r0
    aff0:	1dfb      	adds	r3, r7, #7
    aff2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    aff4:	4b0d      	ldr	r3, [pc, #52]	; (b02c <system_gclk_chan_get_hz+0x44>)
    aff6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    aff8:	4a0d      	ldr	r2, [pc, #52]	; (b030 <system_gclk_chan_get_hz+0x48>)
    affa:	1dfb      	adds	r3, r7, #7
    affc:	781b      	ldrb	r3, [r3, #0]
    affe:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    b000:	4b0c      	ldr	r3, [pc, #48]	; (b034 <system_gclk_chan_get_hz+0x4c>)
    b002:	885b      	ldrh	r3, [r3, #2]
    b004:	051b      	lsls	r3, r3, #20
    b006:	0f1b      	lsrs	r3, r3, #28
    b008:	b2da      	uxtb	r2, r3
    b00a:	230f      	movs	r3, #15
    b00c:	18fb      	adds	r3, r7, r3
    b00e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    b010:	4b09      	ldr	r3, [pc, #36]	; (b038 <system_gclk_chan_get_hz+0x50>)
    b012:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    b014:	230f      	movs	r3, #15
    b016:	18fb      	adds	r3, r7, r3
    b018:	781b      	ldrb	r3, [r3, #0]
    b01a:	0018      	movs	r0, r3
    b01c:	4b07      	ldr	r3, [pc, #28]	; (b03c <system_gclk_chan_get_hz+0x54>)
    b01e:	4798      	blx	r3
    b020:	0003      	movs	r3, r0
}
    b022:	0018      	movs	r0, r3
    b024:	46bd      	mov	sp, r7
    b026:	b004      	add	sp, #16
    b028:	bd80      	pop	{r7, pc}
    b02a:	46c0      	nop			; (mov r8, r8)
    b02c:	0000abf5 	.word	0x0000abf5
    b030:	40000c02 	.word	0x40000c02
    b034:	40000c00 	.word	0x40000c00
    b038:	0000ac09 	.word	0x0000ac09
    b03c:	0000aded 	.word	0x0000aded

0000b040 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    b040:	b580      	push	{r7, lr}
    b042:	b084      	sub	sp, #16
    b044:	af00      	add	r7, sp, #0
    b046:	0002      	movs	r2, r0
    b048:	1dfb      	adds	r3, r7, #7
    b04a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    b04c:	230f      	movs	r3, #15
    b04e:	18fb      	adds	r3, r7, r3
    b050:	1dfa      	adds	r2, r7, #7
    b052:	7812      	ldrb	r2, [r2, #0]
    b054:	09d2      	lsrs	r2, r2, #7
    b056:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    b058:	230e      	movs	r3, #14
    b05a:	18fb      	adds	r3, r7, r3
    b05c:	1dfa      	adds	r2, r7, #7
    b05e:	7812      	ldrb	r2, [r2, #0]
    b060:	0952      	lsrs	r2, r2, #5
    b062:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    b064:	4b0d      	ldr	r3, [pc, #52]	; (b09c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    b066:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    b068:	230f      	movs	r3, #15
    b06a:	18fb      	adds	r3, r7, r3
    b06c:	781b      	ldrb	r3, [r3, #0]
    b06e:	2b00      	cmp	r3, #0
    b070:	d10f      	bne.n	b092 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    b072:	230f      	movs	r3, #15
    b074:	18fb      	adds	r3, r7, r3
    b076:	781b      	ldrb	r3, [r3, #0]
    b078:	009b      	lsls	r3, r3, #2
    b07a:	2210      	movs	r2, #16
    b07c:	4694      	mov	ip, r2
    b07e:	44bc      	add	ip, r7
    b080:	4463      	add	r3, ip
    b082:	3b08      	subs	r3, #8
    b084:	681a      	ldr	r2, [r3, #0]
    b086:	230e      	movs	r3, #14
    b088:	18fb      	adds	r3, r7, r3
    b08a:	781b      	ldrb	r3, [r3, #0]
    b08c:	01db      	lsls	r3, r3, #7
    b08e:	18d3      	adds	r3, r2, r3
    b090:	e000      	b.n	b094 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    b092:	2300      	movs	r3, #0
	}
}
    b094:	0018      	movs	r0, r3
    b096:	46bd      	mov	sp, r7
    b098:	b004      	add	sp, #16
    b09a:	bd80      	pop	{r7, pc}
    b09c:	41004400 	.word	0x41004400

0000b0a0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    b0a0:	b580      	push	{r7, lr}
    b0a2:	b088      	sub	sp, #32
    b0a4:	af00      	add	r7, sp, #0
    b0a6:	60f8      	str	r0, [r7, #12]
    b0a8:	60b9      	str	r1, [r7, #8]
    b0aa:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    b0ac:	2300      	movs	r3, #0
    b0ae:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    b0b0:	687b      	ldr	r3, [r7, #4]
    b0b2:	78db      	ldrb	r3, [r3, #3]
    b0b4:	2201      	movs	r2, #1
    b0b6:	4053      	eors	r3, r2
    b0b8:	b2db      	uxtb	r3, r3
    b0ba:	2b00      	cmp	r3, #0
    b0bc:	d035      	beq.n	b12a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    b0be:	687b      	ldr	r3, [r7, #4]
    b0c0:	781b      	ldrb	r3, [r3, #0]
    b0c2:	2b80      	cmp	r3, #128	; 0x80
    b0c4:	d00b      	beq.n	b0de <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    b0c6:	69fb      	ldr	r3, [r7, #28]
    b0c8:	2280      	movs	r2, #128	; 0x80
    b0ca:	0252      	lsls	r2, r2, #9
    b0cc:	4313      	orrs	r3, r2
    b0ce:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    b0d0:	687b      	ldr	r3, [r7, #4]
    b0d2:	781b      	ldrb	r3, [r3, #0]
    b0d4:	061b      	lsls	r3, r3, #24
    b0d6:	001a      	movs	r2, r3
    b0d8:	69fb      	ldr	r3, [r7, #28]
    b0da:	4313      	orrs	r3, r2
    b0dc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    b0de:	687b      	ldr	r3, [r7, #4]
    b0e0:	785b      	ldrb	r3, [r3, #1]
    b0e2:	2b00      	cmp	r3, #0
    b0e4:	d003      	beq.n	b0ee <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    b0e6:	687b      	ldr	r3, [r7, #4]
    b0e8:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    b0ea:	2b02      	cmp	r3, #2
    b0ec:	d110      	bne.n	b110 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    b0ee:	69fb      	ldr	r3, [r7, #28]
    b0f0:	2280      	movs	r2, #128	; 0x80
    b0f2:	0292      	lsls	r2, r2, #10
    b0f4:	4313      	orrs	r3, r2
    b0f6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    b0f8:	687b      	ldr	r3, [r7, #4]
    b0fa:	789b      	ldrb	r3, [r3, #2]
    b0fc:	2b00      	cmp	r3, #0
    b0fe:	d004      	beq.n	b10a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    b100:	69fb      	ldr	r3, [r7, #28]
    b102:	2280      	movs	r2, #128	; 0x80
    b104:	02d2      	lsls	r2, r2, #11
    b106:	4313      	orrs	r3, r2
    b108:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    b10a:	68fb      	ldr	r3, [r7, #12]
    b10c:	68ba      	ldr	r2, [r7, #8]
    b10e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    b110:	687b      	ldr	r3, [r7, #4]
    b112:	785b      	ldrb	r3, [r3, #1]
    b114:	2b01      	cmp	r3, #1
    b116:	d003      	beq.n	b120 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    b118:	687b      	ldr	r3, [r7, #4]
    b11a:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    b11c:	2b02      	cmp	r3, #2
    b11e:	d107      	bne.n	b130 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    b120:	69fb      	ldr	r3, [r7, #28]
    b122:	4a22      	ldr	r2, [pc, #136]	; (b1ac <_system_pinmux_config+0x10c>)
    b124:	4013      	ands	r3, r2
    b126:	61fb      	str	r3, [r7, #28]
    b128:	e002      	b.n	b130 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    b12a:	68fb      	ldr	r3, [r7, #12]
    b12c:	68ba      	ldr	r2, [r7, #8]
    b12e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    b130:	68bb      	ldr	r3, [r7, #8]
    b132:	041b      	lsls	r3, r3, #16
    b134:	0c1b      	lsrs	r3, r3, #16
    b136:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    b138:	68bb      	ldr	r3, [r7, #8]
    b13a:	0c1b      	lsrs	r3, r3, #16
    b13c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    b13e:	69ba      	ldr	r2, [r7, #24]
    b140:	69fb      	ldr	r3, [r7, #28]
    b142:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    b144:	22a0      	movs	r2, #160	; 0xa0
    b146:	05d2      	lsls	r2, r2, #23
    b148:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    b14a:	68fb      	ldr	r3, [r7, #12]
    b14c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    b14e:	697a      	ldr	r2, [r7, #20]
    b150:	69fb      	ldr	r3, [r7, #28]
    b152:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    b154:	22d0      	movs	r2, #208	; 0xd0
    b156:	0612      	lsls	r2, r2, #24
    b158:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    b15a:	68fb      	ldr	r3, [r7, #12]
    b15c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    b15e:	687b      	ldr	r3, [r7, #4]
    b160:	78db      	ldrb	r3, [r3, #3]
    b162:	2201      	movs	r2, #1
    b164:	4053      	eors	r3, r2
    b166:	b2db      	uxtb	r3, r3
    b168:	2b00      	cmp	r3, #0
    b16a:	d01a      	beq.n	b1a2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    b16c:	69fa      	ldr	r2, [r7, #28]
    b16e:	2380      	movs	r3, #128	; 0x80
    b170:	02db      	lsls	r3, r3, #11
    b172:	4013      	ands	r3, r2
    b174:	d00a      	beq.n	b18c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    b176:	687b      	ldr	r3, [r7, #4]
    b178:	789b      	ldrb	r3, [r3, #2]
    b17a:	2b01      	cmp	r3, #1
    b17c:	d103      	bne.n	b186 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    b17e:	68fb      	ldr	r3, [r7, #12]
    b180:	68ba      	ldr	r2, [r7, #8]
    b182:	619a      	str	r2, [r3, #24]
    b184:	e002      	b.n	b18c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    b186:	68fb      	ldr	r3, [r7, #12]
    b188:	68ba      	ldr	r2, [r7, #8]
    b18a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    b18c:	687b      	ldr	r3, [r7, #4]
    b18e:	785b      	ldrb	r3, [r3, #1]
    b190:	2b01      	cmp	r3, #1
    b192:	d003      	beq.n	b19c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    b194:	687b      	ldr	r3, [r7, #4]
    b196:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    b198:	2b02      	cmp	r3, #2
    b19a:	d102      	bne.n	b1a2 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    b19c:	68fb      	ldr	r3, [r7, #12]
    b19e:	68ba      	ldr	r2, [r7, #8]
    b1a0:	609a      	str	r2, [r3, #8]
		}
	}
}
    b1a2:	46c0      	nop			; (mov r8, r8)
    b1a4:	46bd      	mov	sp, r7
    b1a6:	b008      	add	sp, #32
    b1a8:	bd80      	pop	{r7, pc}
    b1aa:	46c0      	nop			; (mov r8, r8)
    b1ac:	fffbffff 	.word	0xfffbffff

0000b1b0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    b1b0:	b580      	push	{r7, lr}
    b1b2:	b084      	sub	sp, #16
    b1b4:	af00      	add	r7, sp, #0
    b1b6:	0002      	movs	r2, r0
    b1b8:	6039      	str	r1, [r7, #0]
    b1ba:	1dfb      	adds	r3, r7, #7
    b1bc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    b1be:	1dfb      	adds	r3, r7, #7
    b1c0:	781b      	ldrb	r3, [r3, #0]
    b1c2:	0018      	movs	r0, r3
    b1c4:	4b0a      	ldr	r3, [pc, #40]	; (b1f0 <system_pinmux_pin_set_config+0x40>)
    b1c6:	4798      	blx	r3
    b1c8:	0003      	movs	r3, r0
    b1ca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    b1cc:	1dfb      	adds	r3, r7, #7
    b1ce:	781b      	ldrb	r3, [r3, #0]
    b1d0:	221f      	movs	r2, #31
    b1d2:	4013      	ands	r3, r2
    b1d4:	2201      	movs	r2, #1
    b1d6:	409a      	lsls	r2, r3
    b1d8:	0013      	movs	r3, r2
    b1da:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    b1dc:	683a      	ldr	r2, [r7, #0]
    b1de:	68b9      	ldr	r1, [r7, #8]
    b1e0:	68fb      	ldr	r3, [r7, #12]
    b1e2:	0018      	movs	r0, r3
    b1e4:	4b03      	ldr	r3, [pc, #12]	; (b1f4 <system_pinmux_pin_set_config+0x44>)
    b1e6:	4798      	blx	r3
}
    b1e8:	46c0      	nop			; (mov r8, r8)
    b1ea:	46bd      	mov	sp, r7
    b1ec:	b004      	add	sp, #16
    b1ee:	bd80      	pop	{r7, pc}
    b1f0:	0000b041 	.word	0x0000b041
    b1f4:	0000b0a1 	.word	0x0000b0a1

0000b1f8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    b1f8:	b580      	push	{r7, lr}
    b1fa:	af00      	add	r7, sp, #0
	return;
    b1fc:	46c0      	nop			; (mov r8, r8)
}
    b1fe:	46bd      	mov	sp, r7
    b200:	bd80      	pop	{r7, pc}
    b202:	46c0      	nop			; (mov r8, r8)

0000b204 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    b204:	b580      	push	{r7, lr}
    b206:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    b208:	4b06      	ldr	r3, [pc, #24]	; (b224 <system_init+0x20>)
    b20a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    b20c:	4b06      	ldr	r3, [pc, #24]	; (b228 <system_init+0x24>)
    b20e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    b210:	4b06      	ldr	r3, [pc, #24]	; (b22c <system_init+0x28>)
    b212:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    b214:	4b06      	ldr	r3, [pc, #24]	; (b230 <system_init+0x2c>)
    b216:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    b218:	4b06      	ldr	r3, [pc, #24]	; (b234 <system_init+0x30>)
    b21a:	4798      	blx	r3
}
    b21c:	46c0      	nop			; (mov r8, r8)
    b21e:	46bd      	mov	sp, r7
    b220:	bd80      	pop	{r7, pc}
    b222:	46c0      	nop			; (mov r8, r8)
    b224:	0000a8e5 	.word	0x0000a8e5
    b228:	0000a325 	.word	0x0000a325
    b22c:	0000b1f9 	.word	0x0000b1f9
    b230:	00002359 	.word	0x00002359
    b234:	0000b1f9 	.word	0x0000b1f9

0000b238 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    b238:	b580      	push	{r7, lr}
    b23a:	b082      	sub	sp, #8
    b23c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    b23e:	4b2f      	ldr	r3, [pc, #188]	; (b2fc <Reset_Handler+0xc4>)
    b240:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    b242:	4b2f      	ldr	r3, [pc, #188]	; (b300 <Reset_Handler+0xc8>)
    b244:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    b246:	687a      	ldr	r2, [r7, #4]
    b248:	683b      	ldr	r3, [r7, #0]
    b24a:	429a      	cmp	r2, r3
    b24c:	d00c      	beq.n	b268 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    b24e:	e007      	b.n	b260 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    b250:	683b      	ldr	r3, [r7, #0]
    b252:	1d1a      	adds	r2, r3, #4
    b254:	603a      	str	r2, [r7, #0]
    b256:	687a      	ldr	r2, [r7, #4]
    b258:	1d11      	adds	r1, r2, #4
    b25a:	6079      	str	r1, [r7, #4]
    b25c:	6812      	ldr	r2, [r2, #0]
    b25e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    b260:	683a      	ldr	r2, [r7, #0]
    b262:	4b28      	ldr	r3, [pc, #160]	; (b304 <Reset_Handler+0xcc>)
    b264:	429a      	cmp	r2, r3
    b266:	d3f3      	bcc.n	b250 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    b268:	4b27      	ldr	r3, [pc, #156]	; (b308 <Reset_Handler+0xd0>)
    b26a:	603b      	str	r3, [r7, #0]
    b26c:	e004      	b.n	b278 <Reset_Handler+0x40>
                *pDest++ = 0;
    b26e:	683b      	ldr	r3, [r7, #0]
    b270:	1d1a      	adds	r2, r3, #4
    b272:	603a      	str	r2, [r7, #0]
    b274:	2200      	movs	r2, #0
    b276:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    b278:	683a      	ldr	r2, [r7, #0]
    b27a:	4b24      	ldr	r3, [pc, #144]	; (b30c <Reset_Handler+0xd4>)
    b27c:	429a      	cmp	r2, r3
    b27e:	d3f6      	bcc.n	b26e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    b280:	4b23      	ldr	r3, [pc, #140]	; (b310 <Reset_Handler+0xd8>)
    b282:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    b284:	4b23      	ldr	r3, [pc, #140]	; (b314 <Reset_Handler+0xdc>)
    b286:	687a      	ldr	r2, [r7, #4]
    b288:	21ff      	movs	r1, #255	; 0xff
    b28a:	438a      	bics	r2, r1
    b28c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    b28e:	4a22      	ldr	r2, [pc, #136]	; (b318 <Reset_Handler+0xe0>)
    b290:	2390      	movs	r3, #144	; 0x90
    b292:	005b      	lsls	r3, r3, #1
    b294:	2102      	movs	r1, #2
    b296:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    b298:	4a20      	ldr	r2, [pc, #128]	; (b31c <Reset_Handler+0xe4>)
    b29a:	78d3      	ldrb	r3, [r2, #3]
    b29c:	2103      	movs	r1, #3
    b29e:	438b      	bics	r3, r1
    b2a0:	1c19      	adds	r1, r3, #0
    b2a2:	2302      	movs	r3, #2
    b2a4:	430b      	orrs	r3, r1
    b2a6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    b2a8:	4a1c      	ldr	r2, [pc, #112]	; (b31c <Reset_Handler+0xe4>)
    b2aa:	78d3      	ldrb	r3, [r2, #3]
    b2ac:	210c      	movs	r1, #12
    b2ae:	438b      	bics	r3, r1
    b2b0:	1c19      	adds	r1, r3, #0
    b2b2:	2308      	movs	r3, #8
    b2b4:	430b      	orrs	r3, r1
    b2b6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    b2b8:	4a19      	ldr	r2, [pc, #100]	; (b320 <Reset_Handler+0xe8>)
    b2ba:	7b93      	ldrb	r3, [r2, #14]
    b2bc:	2130      	movs	r1, #48	; 0x30
    b2be:	438b      	bics	r3, r1
    b2c0:	1c19      	adds	r1, r3, #0
    b2c2:	2320      	movs	r3, #32
    b2c4:	430b      	orrs	r3, r1
    b2c6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    b2c8:	4a15      	ldr	r2, [pc, #84]	; (b320 <Reset_Handler+0xe8>)
    b2ca:	7b93      	ldrb	r3, [r2, #14]
    b2cc:	210c      	movs	r1, #12
    b2ce:	438b      	bics	r3, r1
    b2d0:	1c19      	adds	r1, r3, #0
    b2d2:	2308      	movs	r3, #8
    b2d4:	430b      	orrs	r3, r1
    b2d6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    b2d8:	4a11      	ldr	r2, [pc, #68]	; (b320 <Reset_Handler+0xe8>)
    b2da:	7b93      	ldrb	r3, [r2, #14]
    b2dc:	2103      	movs	r1, #3
    b2de:	438b      	bics	r3, r1
    b2e0:	1c19      	adds	r1, r3, #0
    b2e2:	2302      	movs	r3, #2
    b2e4:	430b      	orrs	r3, r1
    b2e6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    b2e8:	4a0e      	ldr	r2, [pc, #56]	; (b324 <Reset_Handler+0xec>)
    b2ea:	6853      	ldr	r3, [r2, #4]
    b2ec:	2180      	movs	r1, #128	; 0x80
    b2ee:	430b      	orrs	r3, r1
    b2f0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    b2f2:	4b0d      	ldr	r3, [pc, #52]	; (b328 <Reset_Handler+0xf0>)
    b2f4:	4798      	blx	r3

        /* Branch to main function */
        main();
    b2f6:	4b0d      	ldr	r3, [pc, #52]	; (b32c <Reset_Handler+0xf4>)
    b2f8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    b2fa:	e7fe      	b.n	b2fa <Reset_Handler+0xc2>
    b2fc:	0000ccbc 	.word	0x0000ccbc
    b300:	20000000 	.word	0x20000000
    b304:	20000078 	.word	0x20000078
    b308:	20000078 	.word	0x20000078
    b30c:	200010d8 	.word	0x200010d8
    b310:	00000000 	.word	0x00000000
    b314:	e000ed00 	.word	0xe000ed00
    b318:	41007000 	.word	0x41007000
    b31c:	41005000 	.word	0x41005000
    b320:	41004800 	.word	0x41004800
    b324:	41004000 	.word	0x41004000
    b328:	0000c1bd 	.word	0x0000c1bd
    b32c:	0000b3bd 	.word	0x0000b3bd

0000b330 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    b330:	b580      	push	{r7, lr}
    b332:	af00      	add	r7, sp, #0
        while (1) {
        }
    b334:	e7fe      	b.n	b334 <Dummy_Handler+0x4>
    b336:	46c0      	nop			; (mov r8, r8)

0000b338 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    b338:	b580      	push	{r7, lr}
    b33a:	b084      	sub	sp, #16
    b33c:	af00      	add	r7, sp, #0
    b33e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    b340:	4b0a      	ldr	r3, [pc, #40]	; (b36c <_sbrk+0x34>)
    b342:	681b      	ldr	r3, [r3, #0]
    b344:	2b00      	cmp	r3, #0
    b346:	d102      	bne.n	b34e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    b348:	4b08      	ldr	r3, [pc, #32]	; (b36c <_sbrk+0x34>)
    b34a:	4a09      	ldr	r2, [pc, #36]	; (b370 <_sbrk+0x38>)
    b34c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    b34e:	4b07      	ldr	r3, [pc, #28]	; (b36c <_sbrk+0x34>)
    b350:	681b      	ldr	r3, [r3, #0]
    b352:	60fb      	str	r3, [r7, #12]

	heap += incr;
    b354:	4b05      	ldr	r3, [pc, #20]	; (b36c <_sbrk+0x34>)
    b356:	681a      	ldr	r2, [r3, #0]
    b358:	687b      	ldr	r3, [r7, #4]
    b35a:	18d2      	adds	r2, r2, r3
    b35c:	4b03      	ldr	r3, [pc, #12]	; (b36c <_sbrk+0x34>)
    b35e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    b360:	68fb      	ldr	r3, [r7, #12]
}
    b362:	0018      	movs	r0, r3
    b364:	46bd      	mov	sp, r7
    b366:	b004      	add	sp, #16
    b368:	bd80      	pop	{r7, pc}
    b36a:	46c0      	nop			; (mov r8, r8)
    b36c:	20000e08 	.word	0x20000e08
    b370:	200020d8 	.word	0x200020d8

0000b374 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    b374:	b580      	push	{r7, lr}
    b376:	b082      	sub	sp, #8
    b378:	af00      	add	r7, sp, #0
    b37a:	6078      	str	r0, [r7, #4]
	return -1;
    b37c:	2301      	movs	r3, #1
    b37e:	425b      	negs	r3, r3
}
    b380:	0018      	movs	r0, r3
    b382:	46bd      	mov	sp, r7
    b384:	b002      	add	sp, #8
    b386:	bd80      	pop	{r7, pc}

0000b388 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    b388:	b580      	push	{r7, lr}
    b38a:	b082      	sub	sp, #8
    b38c:	af00      	add	r7, sp, #0
    b38e:	6078      	str	r0, [r7, #4]
    b390:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    b392:	683b      	ldr	r3, [r7, #0]
    b394:	2280      	movs	r2, #128	; 0x80
    b396:	0192      	lsls	r2, r2, #6
    b398:	605a      	str	r2, [r3, #4]

	return 0;
    b39a:	2300      	movs	r3, #0
}
    b39c:	0018      	movs	r0, r3
    b39e:	46bd      	mov	sp, r7
    b3a0:	b002      	add	sp, #8
    b3a2:	bd80      	pop	{r7, pc}

0000b3a4 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
    b3a4:	b580      	push	{r7, lr}
    b3a6:	b084      	sub	sp, #16
    b3a8:	af00      	add	r7, sp, #0
    b3aa:	60f8      	str	r0, [r7, #12]
    b3ac:	60b9      	str	r1, [r7, #8]
    b3ae:	607a      	str	r2, [r7, #4]
	return 0;
    b3b0:	2300      	movs	r3, #0
}
    b3b2:	0018      	movs	r0, r3
    b3b4:	46bd      	mov	sp, r7
    b3b6:	b004      	add	sp, #16
    b3b8:	bd80      	pop	{r7, pc}
    b3ba:	46c0      	nop			; (mov r8, r8)

0000b3bc <main>:
extern void wsndemo_task(void);



int main (void)
{
    b3bc:	b580      	push	{r7, lr}
    b3be:	af00      	add	r7, sp, #0

	/* Configure device and enable. */

	system_init();
    b3c0:	4b04      	ldr	r3, [pc, #16]	; (b3d4 <main+0x18>)
    b3c2:	4798      	blx	r3
	
	delay_init();	
    b3c4:	4b04      	ldr	r3, [pc, #16]	; (b3d8 <main+0x1c>)
    b3c6:	4798      	blx	r3
	
	wsndemo_init();
    b3c8:	4b04      	ldr	r3, [pc, #16]	; (b3dc <main+0x20>)
    b3ca:	4798      	blx	r3
	
	while (1)
	{
	
	wsndemo_task();
    b3cc:	4b04      	ldr	r3, [pc, #16]	; (b3e0 <main+0x24>)
    b3ce:	4798      	blx	r3
	}
    b3d0:	e7fc      	b.n	b3cc <main+0x10>
    b3d2:	46c0      	nop			; (mov r8, r8)
    b3d4:	0000b205 	.word	0x0000b205
    b3d8:	0000a215 	.word	0x0000a215
    b3dc:	00003fdd 	.word	0x00003fdd
    b3e0:	00003ff9 	.word	0x00003ff9

0000b3e4 <common_tc_delay>:
    b3e4:	b510      	push	{r4, lr}
    b3e6:	1c04      	adds	r4, r0, #0
    b3e8:	4b13      	ldr	r3, [pc, #76]	; (b438 <common_tc_delay+0x54>)
    b3ea:	4798      	blx	r3
    b3ec:	4b13      	ldr	r3, [pc, #76]	; (b43c <common_tc_delay+0x58>)
    b3ee:	781a      	ldrb	r2, [r3, #0]
    b3f0:	4362      	muls	r2, r4
    b3f2:	1881      	adds	r1, r0, r2
    b3f4:	4b12      	ldr	r3, [pc, #72]	; (b440 <common_tc_delay+0x5c>)
    b3f6:	6059      	str	r1, [r3, #4]
    b3f8:	6859      	ldr	r1, [r3, #4]
    b3fa:	0c09      	lsrs	r1, r1, #16
    b3fc:	6059      	str	r1, [r3, #4]
    b3fe:	685b      	ldr	r3, [r3, #4]
    b400:	2b00      	cmp	r3, #0
    b402:	d007      	beq.n	b414 <common_tc_delay+0x30>
    b404:	4b0e      	ldr	r3, [pc, #56]	; (b440 <common_tc_delay+0x5c>)
    b406:	6859      	ldr	r1, [r3, #4]
    b408:	3201      	adds	r2, #1
    b40a:	1880      	adds	r0, r0, r2
    b40c:	8118      	strh	r0, [r3, #8]
    b40e:	4b0d      	ldr	r3, [pc, #52]	; (b444 <common_tc_delay+0x60>)
    b410:	4798      	blx	r3
    b412:	e004      	b.n	b41e <common_tc_delay+0x3a>
    b414:	1882      	adds	r2, r0, r2
    b416:	4b0a      	ldr	r3, [pc, #40]	; (b440 <common_tc_delay+0x5c>)
    b418:	811a      	strh	r2, [r3, #8]
    b41a:	4b0b      	ldr	r3, [pc, #44]	; (b448 <common_tc_delay+0x64>)
    b41c:	4798      	blx	r3
    b41e:	4b08      	ldr	r3, [pc, #32]	; (b440 <common_tc_delay+0x5c>)
    b420:	891b      	ldrh	r3, [r3, #8]
    b422:	2b63      	cmp	r3, #99	; 0x63
    b424:	d802      	bhi.n	b42c <common_tc_delay+0x48>
    b426:	3364      	adds	r3, #100	; 0x64
    b428:	4a05      	ldr	r2, [pc, #20]	; (b440 <common_tc_delay+0x5c>)
    b42a:	8113      	strh	r3, [r2, #8]
    b42c:	4b04      	ldr	r3, [pc, #16]	; (b440 <common_tc_delay+0x5c>)
    b42e:	8918      	ldrh	r0, [r3, #8]
    b430:	4b06      	ldr	r3, [pc, #24]	; (b44c <common_tc_delay+0x68>)
    b432:	4798      	blx	r3
    b434:	bd10      	pop	{r4, pc}
    b436:	46c0      	nop			; (mov r8, r8)
    b438:	000057a9 	.word	0x000057a9
    b43c:	200010d1 	.word	0x200010d1
    b440:	20000e0c 	.word	0x20000e0c
    b444:	000057c9 	.word	0x000057c9
    b448:	000057e5 	.word	0x000057e5
    b44c:	00005811 	.word	0x00005811

0000b450 <common_tc_init>:
    b450:	b508      	push	{r3, lr}
    b452:	2200      	movs	r2, #0
    b454:	4b03      	ldr	r3, [pc, #12]	; (b464 <common_tc_init+0x14>)
    b456:	701a      	strb	r2, [r3, #0]
    b458:	4b03      	ldr	r3, [pc, #12]	; (b468 <common_tc_init+0x18>)
    b45a:	4798      	blx	r3
    b45c:	4b03      	ldr	r3, [pc, #12]	; (b46c <common_tc_init+0x1c>)
    b45e:	7018      	strb	r0, [r3, #0]
    b460:	bd08      	pop	{r3, pc}
    b462:	46c0      	nop			; (mov r8, r8)
    b464:	20000e0c 	.word	0x20000e0c
    b468:	0000586d 	.word	0x0000586d
    b46c:	200010d1 	.word	0x200010d1

0000b470 <tmr_ovf_callback>:
    b470:	b508      	push	{r3, lr}
    b472:	4b0e      	ldr	r3, [pc, #56]	; (b4ac <tmr_ovf_callback+0x3c>)
    b474:	685b      	ldr	r3, [r3, #4]
    b476:	2b00      	cmp	r3, #0
    b478:	d007      	beq.n	b48a <tmr_ovf_callback+0x1a>
    b47a:	4a0c      	ldr	r2, [pc, #48]	; (b4ac <tmr_ovf_callback+0x3c>)
    b47c:	6853      	ldr	r3, [r2, #4]
    b47e:	3b01      	subs	r3, #1
    b480:	6053      	str	r3, [r2, #4]
    b482:	2b00      	cmp	r3, #0
    b484:	d101      	bne.n	b48a <tmr_ovf_callback+0x1a>
    b486:	4b0a      	ldr	r3, [pc, #40]	; (b4b0 <tmr_ovf_callback+0x40>)
    b488:	4798      	blx	r3
    b48a:	4a08      	ldr	r2, [pc, #32]	; (b4ac <tmr_ovf_callback+0x3c>)
    b48c:	7813      	ldrb	r3, [r2, #0]
    b48e:	3301      	adds	r3, #1
    b490:	b2db      	uxtb	r3, r3
    b492:	7013      	strb	r3, [r2, #0]
    b494:	4a07      	ldr	r2, [pc, #28]	; (b4b4 <tmr_ovf_callback+0x44>)
    b496:	7812      	ldrb	r2, [r2, #0]
    b498:	429a      	cmp	r2, r3
    b49a:	d806      	bhi.n	b4aa <tmr_ovf_callback+0x3a>
    b49c:	4b03      	ldr	r3, [pc, #12]	; (b4ac <tmr_ovf_callback+0x3c>)
    b49e:	2200      	movs	r2, #0
    b4a0:	701a      	strb	r2, [r3, #0]
    b4a2:	68db      	ldr	r3, [r3, #12]
    b4a4:	2b00      	cmp	r3, #0
    b4a6:	d000      	beq.n	b4aa <tmr_ovf_callback+0x3a>
    b4a8:	4798      	blx	r3
    b4aa:	bd08      	pop	{r3, pc}
    b4ac:	20000e0c 	.word	0x20000e0c
    b4b0:	000057e5 	.word	0x000057e5
    b4b4:	200010d1 	.word	0x200010d1

0000b4b8 <tmr_cca_callback>:
    b4b8:	b508      	push	{r3, lr}
    b4ba:	4b04      	ldr	r3, [pc, #16]	; (b4cc <tmr_cca_callback+0x14>)
    b4bc:	4798      	blx	r3
    b4be:	4b04      	ldr	r3, [pc, #16]	; (b4d0 <tmr_cca_callback+0x18>)
    b4c0:	691b      	ldr	r3, [r3, #16]
    b4c2:	2b00      	cmp	r3, #0
    b4c4:	d000      	beq.n	b4c8 <tmr_cca_callback+0x10>
    b4c6:	4798      	blx	r3
    b4c8:	bd08      	pop	{r3, pc}
    b4ca:	46c0      	nop			; (mov r8, r8)
    b4cc:	000057c9 	.word	0x000057c9
    b4d0:	20000e0c 	.word	0x20000e0c

0000b4d4 <set_common_tc_expiry_callback>:
    b4d4:	4b01      	ldr	r3, [pc, #4]	; (b4dc <set_common_tc_expiry_callback+0x8>)
    b4d6:	6118      	str	r0, [r3, #16]
    b4d8:	4770      	bx	lr
    b4da:	46c0      	nop			; (mov r8, r8)
    b4dc:	20000e0c 	.word	0x20000e0c

0000b4e0 <__aeabi_uidiv>:
    b4e0:	2200      	movs	r2, #0
    b4e2:	0843      	lsrs	r3, r0, #1
    b4e4:	428b      	cmp	r3, r1
    b4e6:	d374      	bcc.n	b5d2 <__aeabi_uidiv+0xf2>
    b4e8:	0903      	lsrs	r3, r0, #4
    b4ea:	428b      	cmp	r3, r1
    b4ec:	d35f      	bcc.n	b5ae <__aeabi_uidiv+0xce>
    b4ee:	0a03      	lsrs	r3, r0, #8
    b4f0:	428b      	cmp	r3, r1
    b4f2:	d344      	bcc.n	b57e <__aeabi_uidiv+0x9e>
    b4f4:	0b03      	lsrs	r3, r0, #12
    b4f6:	428b      	cmp	r3, r1
    b4f8:	d328      	bcc.n	b54c <__aeabi_uidiv+0x6c>
    b4fa:	0c03      	lsrs	r3, r0, #16
    b4fc:	428b      	cmp	r3, r1
    b4fe:	d30d      	bcc.n	b51c <__aeabi_uidiv+0x3c>
    b500:	22ff      	movs	r2, #255	; 0xff
    b502:	0209      	lsls	r1, r1, #8
    b504:	ba12      	rev	r2, r2
    b506:	0c03      	lsrs	r3, r0, #16
    b508:	428b      	cmp	r3, r1
    b50a:	d302      	bcc.n	b512 <__aeabi_uidiv+0x32>
    b50c:	1212      	asrs	r2, r2, #8
    b50e:	0209      	lsls	r1, r1, #8
    b510:	d065      	beq.n	b5de <__aeabi_uidiv+0xfe>
    b512:	0b03      	lsrs	r3, r0, #12
    b514:	428b      	cmp	r3, r1
    b516:	d319      	bcc.n	b54c <__aeabi_uidiv+0x6c>
    b518:	e000      	b.n	b51c <__aeabi_uidiv+0x3c>
    b51a:	0a09      	lsrs	r1, r1, #8
    b51c:	0bc3      	lsrs	r3, r0, #15
    b51e:	428b      	cmp	r3, r1
    b520:	d301      	bcc.n	b526 <__aeabi_uidiv+0x46>
    b522:	03cb      	lsls	r3, r1, #15
    b524:	1ac0      	subs	r0, r0, r3
    b526:	4152      	adcs	r2, r2
    b528:	0b83      	lsrs	r3, r0, #14
    b52a:	428b      	cmp	r3, r1
    b52c:	d301      	bcc.n	b532 <__aeabi_uidiv+0x52>
    b52e:	038b      	lsls	r3, r1, #14
    b530:	1ac0      	subs	r0, r0, r3
    b532:	4152      	adcs	r2, r2
    b534:	0b43      	lsrs	r3, r0, #13
    b536:	428b      	cmp	r3, r1
    b538:	d301      	bcc.n	b53e <__aeabi_uidiv+0x5e>
    b53a:	034b      	lsls	r3, r1, #13
    b53c:	1ac0      	subs	r0, r0, r3
    b53e:	4152      	adcs	r2, r2
    b540:	0b03      	lsrs	r3, r0, #12
    b542:	428b      	cmp	r3, r1
    b544:	d301      	bcc.n	b54a <__aeabi_uidiv+0x6a>
    b546:	030b      	lsls	r3, r1, #12
    b548:	1ac0      	subs	r0, r0, r3
    b54a:	4152      	adcs	r2, r2
    b54c:	0ac3      	lsrs	r3, r0, #11
    b54e:	428b      	cmp	r3, r1
    b550:	d301      	bcc.n	b556 <__aeabi_uidiv+0x76>
    b552:	02cb      	lsls	r3, r1, #11
    b554:	1ac0      	subs	r0, r0, r3
    b556:	4152      	adcs	r2, r2
    b558:	0a83      	lsrs	r3, r0, #10
    b55a:	428b      	cmp	r3, r1
    b55c:	d301      	bcc.n	b562 <__aeabi_uidiv+0x82>
    b55e:	028b      	lsls	r3, r1, #10
    b560:	1ac0      	subs	r0, r0, r3
    b562:	4152      	adcs	r2, r2
    b564:	0a43      	lsrs	r3, r0, #9
    b566:	428b      	cmp	r3, r1
    b568:	d301      	bcc.n	b56e <__aeabi_uidiv+0x8e>
    b56a:	024b      	lsls	r3, r1, #9
    b56c:	1ac0      	subs	r0, r0, r3
    b56e:	4152      	adcs	r2, r2
    b570:	0a03      	lsrs	r3, r0, #8
    b572:	428b      	cmp	r3, r1
    b574:	d301      	bcc.n	b57a <__aeabi_uidiv+0x9a>
    b576:	020b      	lsls	r3, r1, #8
    b578:	1ac0      	subs	r0, r0, r3
    b57a:	4152      	adcs	r2, r2
    b57c:	d2cd      	bcs.n	b51a <__aeabi_uidiv+0x3a>
    b57e:	09c3      	lsrs	r3, r0, #7
    b580:	428b      	cmp	r3, r1
    b582:	d301      	bcc.n	b588 <__aeabi_uidiv+0xa8>
    b584:	01cb      	lsls	r3, r1, #7
    b586:	1ac0      	subs	r0, r0, r3
    b588:	4152      	adcs	r2, r2
    b58a:	0983      	lsrs	r3, r0, #6
    b58c:	428b      	cmp	r3, r1
    b58e:	d301      	bcc.n	b594 <__aeabi_uidiv+0xb4>
    b590:	018b      	lsls	r3, r1, #6
    b592:	1ac0      	subs	r0, r0, r3
    b594:	4152      	adcs	r2, r2
    b596:	0943      	lsrs	r3, r0, #5
    b598:	428b      	cmp	r3, r1
    b59a:	d301      	bcc.n	b5a0 <__aeabi_uidiv+0xc0>
    b59c:	014b      	lsls	r3, r1, #5
    b59e:	1ac0      	subs	r0, r0, r3
    b5a0:	4152      	adcs	r2, r2
    b5a2:	0903      	lsrs	r3, r0, #4
    b5a4:	428b      	cmp	r3, r1
    b5a6:	d301      	bcc.n	b5ac <__aeabi_uidiv+0xcc>
    b5a8:	010b      	lsls	r3, r1, #4
    b5aa:	1ac0      	subs	r0, r0, r3
    b5ac:	4152      	adcs	r2, r2
    b5ae:	08c3      	lsrs	r3, r0, #3
    b5b0:	428b      	cmp	r3, r1
    b5b2:	d301      	bcc.n	b5b8 <__aeabi_uidiv+0xd8>
    b5b4:	00cb      	lsls	r3, r1, #3
    b5b6:	1ac0      	subs	r0, r0, r3
    b5b8:	4152      	adcs	r2, r2
    b5ba:	0883      	lsrs	r3, r0, #2
    b5bc:	428b      	cmp	r3, r1
    b5be:	d301      	bcc.n	b5c4 <__aeabi_uidiv+0xe4>
    b5c0:	008b      	lsls	r3, r1, #2
    b5c2:	1ac0      	subs	r0, r0, r3
    b5c4:	4152      	adcs	r2, r2
    b5c6:	0843      	lsrs	r3, r0, #1
    b5c8:	428b      	cmp	r3, r1
    b5ca:	d301      	bcc.n	b5d0 <__aeabi_uidiv+0xf0>
    b5cc:	004b      	lsls	r3, r1, #1
    b5ce:	1ac0      	subs	r0, r0, r3
    b5d0:	4152      	adcs	r2, r2
    b5d2:	1a41      	subs	r1, r0, r1
    b5d4:	d200      	bcs.n	b5d8 <__aeabi_uidiv+0xf8>
    b5d6:	4601      	mov	r1, r0
    b5d8:	4152      	adcs	r2, r2
    b5da:	4610      	mov	r0, r2
    b5dc:	4770      	bx	lr
    b5de:	e7ff      	b.n	b5e0 <__aeabi_uidiv+0x100>
    b5e0:	b501      	push	{r0, lr}
    b5e2:	2000      	movs	r0, #0
    b5e4:	f000 f806 	bl	b5f4 <__aeabi_idiv0>
    b5e8:	bd02      	pop	{r1, pc}
    b5ea:	46c0      	nop			; (mov r8, r8)

0000b5ec <__aeabi_uidivmod>:
    b5ec:	2900      	cmp	r1, #0
    b5ee:	d0f7      	beq.n	b5e0 <__aeabi_uidiv+0x100>
    b5f0:	e776      	b.n	b4e0 <__aeabi_uidiv>
    b5f2:	4770      	bx	lr

0000b5f4 <__aeabi_idiv0>:
    b5f4:	4770      	bx	lr
    b5f6:	46c0      	nop			; (mov r8, r8)

0000b5f8 <__aeabi_cfrcmple>:
    b5f8:	4684      	mov	ip, r0
    b5fa:	1c08      	adds	r0, r1, #0
    b5fc:	4661      	mov	r1, ip
    b5fe:	e7ff      	b.n	b600 <__aeabi_cfcmpeq>

0000b600 <__aeabi_cfcmpeq>:
    b600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    b602:	f000 fbb1 	bl	bd68 <__lesf2>
    b606:	2800      	cmp	r0, #0
    b608:	d401      	bmi.n	b60e <__aeabi_cfcmpeq+0xe>
    b60a:	2100      	movs	r1, #0
    b60c:	42c8      	cmn	r0, r1
    b60e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000b610 <__aeabi_fcmpeq>:
    b610:	b510      	push	{r4, lr}
    b612:	f000 fb3d 	bl	bc90 <__eqsf2>
    b616:	4240      	negs	r0, r0
    b618:	3001      	adds	r0, #1
    b61a:	bd10      	pop	{r4, pc}

0000b61c <__aeabi_fcmplt>:
    b61c:	b510      	push	{r4, lr}
    b61e:	f000 fba3 	bl	bd68 <__lesf2>
    b622:	2800      	cmp	r0, #0
    b624:	db01      	blt.n	b62a <__aeabi_fcmplt+0xe>
    b626:	2000      	movs	r0, #0
    b628:	bd10      	pop	{r4, pc}
    b62a:	2001      	movs	r0, #1
    b62c:	bd10      	pop	{r4, pc}
    b62e:	46c0      	nop			; (mov r8, r8)

0000b630 <__aeabi_fcmple>:
    b630:	b510      	push	{r4, lr}
    b632:	f000 fb99 	bl	bd68 <__lesf2>
    b636:	2800      	cmp	r0, #0
    b638:	dd01      	ble.n	b63e <__aeabi_fcmple+0xe>
    b63a:	2000      	movs	r0, #0
    b63c:	bd10      	pop	{r4, pc}
    b63e:	2001      	movs	r0, #1
    b640:	bd10      	pop	{r4, pc}
    b642:	46c0      	nop			; (mov r8, r8)

0000b644 <__aeabi_fcmpgt>:
    b644:	b510      	push	{r4, lr}
    b646:	f000 fb4b 	bl	bce0 <__gesf2>
    b64a:	2800      	cmp	r0, #0
    b64c:	dc01      	bgt.n	b652 <__aeabi_fcmpgt+0xe>
    b64e:	2000      	movs	r0, #0
    b650:	bd10      	pop	{r4, pc}
    b652:	2001      	movs	r0, #1
    b654:	bd10      	pop	{r4, pc}
    b656:	46c0      	nop			; (mov r8, r8)

0000b658 <__aeabi_fcmpge>:
    b658:	b510      	push	{r4, lr}
    b65a:	f000 fb41 	bl	bce0 <__gesf2>
    b65e:	2800      	cmp	r0, #0
    b660:	da01      	bge.n	b666 <__aeabi_fcmpge+0xe>
    b662:	2000      	movs	r0, #0
    b664:	bd10      	pop	{r4, pc}
    b666:	2001      	movs	r0, #1
    b668:	bd10      	pop	{r4, pc}
    b66a:	46c0      	nop			; (mov r8, r8)

0000b66c <__clzsi2>:
    b66c:	211c      	movs	r1, #28
    b66e:	2301      	movs	r3, #1
    b670:	041b      	lsls	r3, r3, #16
    b672:	4298      	cmp	r0, r3
    b674:	d301      	bcc.n	b67a <__clzsi2+0xe>
    b676:	0c00      	lsrs	r0, r0, #16
    b678:	3910      	subs	r1, #16
    b67a:	0a1b      	lsrs	r3, r3, #8
    b67c:	4298      	cmp	r0, r3
    b67e:	d301      	bcc.n	b684 <__clzsi2+0x18>
    b680:	0a00      	lsrs	r0, r0, #8
    b682:	3908      	subs	r1, #8
    b684:	091b      	lsrs	r3, r3, #4
    b686:	4298      	cmp	r0, r3
    b688:	d301      	bcc.n	b68e <__clzsi2+0x22>
    b68a:	0900      	lsrs	r0, r0, #4
    b68c:	3904      	subs	r1, #4
    b68e:	a202      	add	r2, pc, #8	; (adr r2, b698 <__clzsi2+0x2c>)
    b690:	5c10      	ldrb	r0, [r2, r0]
    b692:	1840      	adds	r0, r0, r1
    b694:	4770      	bx	lr
    b696:	46c0      	nop			; (mov r8, r8)
    b698:	02020304 	.word	0x02020304
    b69c:	01010101 	.word	0x01010101
	...

0000b6a8 <__ctzsi2>:
    b6a8:	4241      	negs	r1, r0
    b6aa:	4008      	ands	r0, r1
    b6ac:	211c      	movs	r1, #28
    b6ae:	2301      	movs	r3, #1
    b6b0:	041b      	lsls	r3, r3, #16
    b6b2:	4298      	cmp	r0, r3
    b6b4:	d301      	bcc.n	b6ba <__ctzsi2+0x12>
    b6b6:	0c00      	lsrs	r0, r0, #16
    b6b8:	3910      	subs	r1, #16
    b6ba:	0a1b      	lsrs	r3, r3, #8
    b6bc:	4298      	cmp	r0, r3
    b6be:	d301      	bcc.n	b6c4 <__ctzsi2+0x1c>
    b6c0:	0a00      	lsrs	r0, r0, #8
    b6c2:	3908      	subs	r1, #8
    b6c4:	091b      	lsrs	r3, r3, #4
    b6c6:	4298      	cmp	r0, r3
    b6c8:	d301      	bcc.n	b6ce <__ctzsi2+0x26>
    b6ca:	0900      	lsrs	r0, r0, #4
    b6cc:	3904      	subs	r1, #4
    b6ce:	a202      	add	r2, pc, #8	; (adr r2, b6d8 <__ctzsi2+0x30>)
    b6d0:	5c10      	ldrb	r0, [r2, r0]
    b6d2:	1a40      	subs	r0, r0, r1
    b6d4:	4770      	bx	lr
    b6d6:	46c0      	nop			; (mov r8, r8)
    b6d8:	1d1d1c1b 	.word	0x1d1d1c1b
    b6dc:	1e1e1e1e 	.word	0x1e1e1e1e
    b6e0:	1f1f1f1f 	.word	0x1f1f1f1f
    b6e4:	1f1f1f1f 	.word	0x1f1f1f1f

0000b6e8 <__aeabi_lmul>:
    b6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6ea:	464f      	mov	r7, r9
    b6ec:	4646      	mov	r6, r8
    b6ee:	b4c0      	push	{r6, r7}
    b6f0:	0416      	lsls	r6, r2, #16
    b6f2:	0c36      	lsrs	r6, r6, #16
    b6f4:	4699      	mov	r9, r3
    b6f6:	0033      	movs	r3, r6
    b6f8:	0405      	lsls	r5, r0, #16
    b6fa:	0c2c      	lsrs	r4, r5, #16
    b6fc:	0c07      	lsrs	r7, r0, #16
    b6fe:	0c15      	lsrs	r5, r2, #16
    b700:	4363      	muls	r3, r4
    b702:	437e      	muls	r6, r7
    b704:	436f      	muls	r7, r5
    b706:	4365      	muls	r5, r4
    b708:	0c1c      	lsrs	r4, r3, #16
    b70a:	19ad      	adds	r5, r5, r6
    b70c:	1964      	adds	r4, r4, r5
    b70e:	469c      	mov	ip, r3
    b710:	42a6      	cmp	r6, r4
    b712:	d903      	bls.n	b71c <__aeabi_lmul+0x34>
    b714:	2380      	movs	r3, #128	; 0x80
    b716:	025b      	lsls	r3, r3, #9
    b718:	4698      	mov	r8, r3
    b71a:	4447      	add	r7, r8
    b71c:	4663      	mov	r3, ip
    b71e:	0c25      	lsrs	r5, r4, #16
    b720:	19ef      	adds	r7, r5, r7
    b722:	041d      	lsls	r5, r3, #16
    b724:	464b      	mov	r3, r9
    b726:	434a      	muls	r2, r1
    b728:	4343      	muls	r3, r0
    b72a:	0c2d      	lsrs	r5, r5, #16
    b72c:	0424      	lsls	r4, r4, #16
    b72e:	1964      	adds	r4, r4, r5
    b730:	1899      	adds	r1, r3, r2
    b732:	19c9      	adds	r1, r1, r7
    b734:	0020      	movs	r0, r4
    b736:	bc0c      	pop	{r2, r3}
    b738:	4690      	mov	r8, r2
    b73a:	4699      	mov	r9, r3
    b73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b73e:	46c0      	nop			; (mov r8, r8)

0000b740 <__aeabi_f2uiz>:
    b740:	219e      	movs	r1, #158	; 0x9e
    b742:	b510      	push	{r4, lr}
    b744:	05c9      	lsls	r1, r1, #23
    b746:	1c04      	adds	r4, r0, #0
    b748:	f7ff ff86 	bl	b658 <__aeabi_fcmpge>
    b74c:	2800      	cmp	r0, #0
    b74e:	d103      	bne.n	b758 <__aeabi_f2uiz+0x18>
    b750:	1c20      	adds	r0, r4, #0
    b752:	f000 fcd3 	bl	c0fc <__aeabi_f2iz>
    b756:	bd10      	pop	{r4, pc}
    b758:	219e      	movs	r1, #158	; 0x9e
    b75a:	1c20      	adds	r0, r4, #0
    b75c:	05c9      	lsls	r1, r1, #23
    b75e:	f000 fb47 	bl	bdf0 <__aeabi_fsub>
    b762:	f000 fccb 	bl	c0fc <__aeabi_f2iz>
    b766:	2380      	movs	r3, #128	; 0x80
    b768:	061b      	lsls	r3, r3, #24
    b76a:	469c      	mov	ip, r3
    b76c:	4460      	add	r0, ip
    b76e:	e7f2      	b.n	b756 <__aeabi_f2uiz+0x16>

0000b770 <__aeabi_fadd>:
    b770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b772:	024a      	lsls	r2, r1, #9
    b774:	0243      	lsls	r3, r0, #9
    b776:	0044      	lsls	r4, r0, #1
    b778:	004e      	lsls	r6, r1, #1
    b77a:	0fc5      	lsrs	r5, r0, #31
    b77c:	0e24      	lsrs	r4, r4, #24
    b77e:	0028      	movs	r0, r5
    b780:	099b      	lsrs	r3, r3, #6
    b782:	0e36      	lsrs	r6, r6, #24
    b784:	0fc9      	lsrs	r1, r1, #31
    b786:	0992      	lsrs	r2, r2, #6
    b788:	428d      	cmp	r5, r1
    b78a:	d059      	beq.n	b840 <__aeabi_fadd+0xd0>
    b78c:	1ba0      	subs	r0, r4, r6
    b78e:	2800      	cmp	r0, #0
    b790:	dc00      	bgt.n	b794 <__aeabi_fadd+0x24>
    b792:	e08d      	b.n	b8b0 <__aeabi_fadd+0x140>
    b794:	2e00      	cmp	r6, #0
    b796:	d11a      	bne.n	b7ce <__aeabi_fadd+0x5e>
    b798:	2a00      	cmp	r2, #0
    b79a:	d000      	beq.n	b79e <__aeabi_fadd+0x2e>
    b79c:	e079      	b.n	b892 <__aeabi_fadd+0x122>
    b79e:	075a      	lsls	r2, r3, #29
    b7a0:	d004      	beq.n	b7ac <__aeabi_fadd+0x3c>
    b7a2:	220f      	movs	r2, #15
    b7a4:	401a      	ands	r2, r3
    b7a6:	2a04      	cmp	r2, #4
    b7a8:	d000      	beq.n	b7ac <__aeabi_fadd+0x3c>
    b7aa:	3304      	adds	r3, #4
    b7ac:	015a      	lsls	r2, r3, #5
    b7ae:	d538      	bpl.n	b822 <__aeabi_fadd+0xb2>
    b7b0:	3401      	adds	r4, #1
    b7b2:	2cff      	cmp	r4, #255	; 0xff
    b7b4:	d100      	bne.n	b7b8 <__aeabi_fadd+0x48>
    b7b6:	e089      	b.n	b8cc <__aeabi_fadd+0x15c>
    b7b8:	0028      	movs	r0, r5
    b7ba:	019b      	lsls	r3, r3, #6
    b7bc:	0a5b      	lsrs	r3, r3, #9
    b7be:	b2e4      	uxtb	r4, r4
    b7c0:	025b      	lsls	r3, r3, #9
    b7c2:	05e4      	lsls	r4, r4, #23
    b7c4:	0a5b      	lsrs	r3, r3, #9
    b7c6:	4323      	orrs	r3, r4
    b7c8:	07c0      	lsls	r0, r0, #31
    b7ca:	4318      	orrs	r0, r3
    b7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b7ce:	2cff      	cmp	r4, #255	; 0xff
    b7d0:	d0e5      	beq.n	b79e <__aeabi_fadd+0x2e>
    b7d2:	2180      	movs	r1, #128	; 0x80
    b7d4:	04c9      	lsls	r1, r1, #19
    b7d6:	430a      	orrs	r2, r1
    b7d8:	281b      	cmp	r0, #27
    b7da:	dd00      	ble.n	b7de <__aeabi_fadd+0x6e>
    b7dc:	e089      	b.n	b8f2 <__aeabi_fadd+0x182>
    b7de:	0016      	movs	r6, r2
    b7e0:	2120      	movs	r1, #32
    b7e2:	40c6      	lsrs	r6, r0
    b7e4:	1a08      	subs	r0, r1, r0
    b7e6:	4082      	lsls	r2, r0
    b7e8:	1e51      	subs	r1, r2, #1
    b7ea:	418a      	sbcs	r2, r1
    b7ec:	4332      	orrs	r2, r6
    b7ee:	1a9b      	subs	r3, r3, r2
    b7f0:	015a      	lsls	r2, r3, #5
    b7f2:	d514      	bpl.n	b81e <__aeabi_fadd+0xae>
    b7f4:	019b      	lsls	r3, r3, #6
    b7f6:	099e      	lsrs	r6, r3, #6
    b7f8:	0030      	movs	r0, r6
    b7fa:	f7ff ff37 	bl	b66c <__clzsi2>
    b7fe:	3805      	subs	r0, #5
    b800:	4086      	lsls	r6, r0
    b802:	4284      	cmp	r4, r0
    b804:	dc65      	bgt.n	b8d2 <__aeabi_fadd+0x162>
    b806:	1b04      	subs	r4, r0, r4
    b808:	0033      	movs	r3, r6
    b80a:	2020      	movs	r0, #32
    b80c:	3401      	adds	r4, #1
    b80e:	40e3      	lsrs	r3, r4
    b810:	1b04      	subs	r4, r0, r4
    b812:	40a6      	lsls	r6, r4
    b814:	1e72      	subs	r2, r6, #1
    b816:	4196      	sbcs	r6, r2
    b818:	2400      	movs	r4, #0
    b81a:	4333      	orrs	r3, r6
    b81c:	e7bf      	b.n	b79e <__aeabi_fadd+0x2e>
    b81e:	075a      	lsls	r2, r3, #29
    b820:	d1bf      	bne.n	b7a2 <__aeabi_fadd+0x32>
    b822:	08df      	lsrs	r7, r3, #3
    b824:	0028      	movs	r0, r5
    b826:	2cff      	cmp	r4, #255	; 0xff
    b828:	d12f      	bne.n	b88a <__aeabi_fadd+0x11a>
    b82a:	2f00      	cmp	r7, #0
    b82c:	d100      	bne.n	b830 <__aeabi_fadd+0xc0>
    b82e:	e087      	b.n	b940 <__aeabi_fadd+0x1d0>
    b830:	2280      	movs	r2, #128	; 0x80
    b832:	03d2      	lsls	r2, r2, #15
    b834:	0013      	movs	r3, r2
    b836:	433b      	orrs	r3, r7
    b838:	025b      	lsls	r3, r3, #9
    b83a:	0a5b      	lsrs	r3, r3, #9
    b83c:	24ff      	movs	r4, #255	; 0xff
    b83e:	e7bf      	b.n	b7c0 <__aeabi_fadd+0x50>
    b840:	1ba1      	subs	r1, r4, r6
    b842:	2900      	cmp	r1, #0
    b844:	dd49      	ble.n	b8da <__aeabi_fadd+0x16a>
    b846:	2e00      	cmp	r6, #0
    b848:	d029      	beq.n	b89e <__aeabi_fadd+0x12e>
    b84a:	2cff      	cmp	r4, #255	; 0xff
    b84c:	d0a7      	beq.n	b79e <__aeabi_fadd+0x2e>
    b84e:	2680      	movs	r6, #128	; 0x80
    b850:	04f6      	lsls	r6, r6, #19
    b852:	4332      	orrs	r2, r6
    b854:	291b      	cmp	r1, #27
    b856:	dd00      	ble.n	b85a <__aeabi_fadd+0xea>
    b858:	e08d      	b.n	b976 <__aeabi_fadd+0x206>
    b85a:	0017      	movs	r7, r2
    b85c:	2620      	movs	r6, #32
    b85e:	40cf      	lsrs	r7, r1
    b860:	1a71      	subs	r1, r6, r1
    b862:	408a      	lsls	r2, r1
    b864:	1e51      	subs	r1, r2, #1
    b866:	418a      	sbcs	r2, r1
    b868:	433a      	orrs	r2, r7
    b86a:	189b      	adds	r3, r3, r2
    b86c:	015a      	lsls	r2, r3, #5
    b86e:	d5d6      	bpl.n	b81e <__aeabi_fadd+0xae>
    b870:	3401      	adds	r4, #1
    b872:	2cff      	cmp	r4, #255	; 0xff
    b874:	d064      	beq.n	b940 <__aeabi_fadd+0x1d0>
    b876:	2201      	movs	r2, #1
    b878:	4976      	ldr	r1, [pc, #472]	; (ba54 <__aeabi_fadd+0x2e4>)
    b87a:	401a      	ands	r2, r3
    b87c:	085b      	lsrs	r3, r3, #1
    b87e:	400b      	ands	r3, r1
    b880:	4313      	orrs	r3, r2
    b882:	e78c      	b.n	b79e <__aeabi_fadd+0x2e>
    b884:	1e03      	subs	r3, r0, #0
    b886:	d1ca      	bne.n	b81e <__aeabi_fadd+0xae>
    b888:	2000      	movs	r0, #0
    b88a:	027b      	lsls	r3, r7, #9
    b88c:	0a5b      	lsrs	r3, r3, #9
    b88e:	b2e4      	uxtb	r4, r4
    b890:	e796      	b.n	b7c0 <__aeabi_fadd+0x50>
    b892:	3801      	subs	r0, #1
    b894:	2800      	cmp	r0, #0
    b896:	d0aa      	beq.n	b7ee <__aeabi_fadd+0x7e>
    b898:	2cff      	cmp	r4, #255	; 0xff
    b89a:	d19d      	bne.n	b7d8 <__aeabi_fadd+0x68>
    b89c:	e77f      	b.n	b79e <__aeabi_fadd+0x2e>
    b89e:	2a00      	cmp	r2, #0
    b8a0:	d100      	bne.n	b8a4 <__aeabi_fadd+0x134>
    b8a2:	e77c      	b.n	b79e <__aeabi_fadd+0x2e>
    b8a4:	3901      	subs	r1, #1
    b8a6:	2900      	cmp	r1, #0
    b8a8:	d0df      	beq.n	b86a <__aeabi_fadd+0xfa>
    b8aa:	2cff      	cmp	r4, #255	; 0xff
    b8ac:	d1d2      	bne.n	b854 <__aeabi_fadd+0xe4>
    b8ae:	e776      	b.n	b79e <__aeabi_fadd+0x2e>
    b8b0:	2800      	cmp	r0, #0
    b8b2:	d120      	bne.n	b8f6 <__aeabi_fadd+0x186>
    b8b4:	1c60      	adds	r0, r4, #1
    b8b6:	b2c0      	uxtb	r0, r0
    b8b8:	2801      	cmp	r0, #1
    b8ba:	dd53      	ble.n	b964 <__aeabi_fadd+0x1f4>
    b8bc:	2780      	movs	r7, #128	; 0x80
    b8be:	1a9e      	subs	r6, r3, r2
    b8c0:	04ff      	lsls	r7, r7, #19
    b8c2:	4037      	ands	r7, r6
    b8c4:	d02f      	beq.n	b926 <__aeabi_fadd+0x1b6>
    b8c6:	1ad6      	subs	r6, r2, r3
    b8c8:	000d      	movs	r5, r1
    b8ca:	e795      	b.n	b7f8 <__aeabi_fadd+0x88>
    b8cc:	0028      	movs	r0, r5
    b8ce:	2300      	movs	r3, #0
    b8d0:	e776      	b.n	b7c0 <__aeabi_fadd+0x50>
    b8d2:	4b61      	ldr	r3, [pc, #388]	; (ba58 <__aeabi_fadd+0x2e8>)
    b8d4:	1a24      	subs	r4, r4, r0
    b8d6:	4033      	ands	r3, r6
    b8d8:	e761      	b.n	b79e <__aeabi_fadd+0x2e>
    b8da:	2900      	cmp	r1, #0
    b8dc:	d14d      	bne.n	b97a <__aeabi_fadd+0x20a>
    b8de:	1c61      	adds	r1, r4, #1
    b8e0:	b2ce      	uxtb	r6, r1
    b8e2:	2e01      	cmp	r6, #1
    b8e4:	dd2f      	ble.n	b946 <__aeabi_fadd+0x1d6>
    b8e6:	29ff      	cmp	r1, #255	; 0xff
    b8e8:	d02a      	beq.n	b940 <__aeabi_fadd+0x1d0>
    b8ea:	189b      	adds	r3, r3, r2
    b8ec:	085b      	lsrs	r3, r3, #1
    b8ee:	000c      	movs	r4, r1
    b8f0:	e755      	b.n	b79e <__aeabi_fadd+0x2e>
    b8f2:	2201      	movs	r2, #1
    b8f4:	e77b      	b.n	b7ee <__aeabi_fadd+0x7e>
    b8f6:	2c00      	cmp	r4, #0
    b8f8:	d11b      	bne.n	b932 <__aeabi_fadd+0x1c2>
    b8fa:	2b00      	cmp	r3, #0
    b8fc:	d05b      	beq.n	b9b6 <__aeabi_fadd+0x246>
    b8fe:	43c0      	mvns	r0, r0
    b900:	2800      	cmp	r0, #0
    b902:	d00c      	beq.n	b91e <__aeabi_fadd+0x1ae>
    b904:	2eff      	cmp	r6, #255	; 0xff
    b906:	d07e      	beq.n	ba06 <__aeabi_fadd+0x296>
    b908:	281b      	cmp	r0, #27
    b90a:	dd00      	ble.n	b90e <__aeabi_fadd+0x19e>
    b90c:	e092      	b.n	ba34 <__aeabi_fadd+0x2c4>
    b90e:	001d      	movs	r5, r3
    b910:	2420      	movs	r4, #32
    b912:	40c5      	lsrs	r5, r0
    b914:	1a20      	subs	r0, r4, r0
    b916:	4083      	lsls	r3, r0
    b918:	1e58      	subs	r0, r3, #1
    b91a:	4183      	sbcs	r3, r0
    b91c:	432b      	orrs	r3, r5
    b91e:	1ad3      	subs	r3, r2, r3
    b920:	0034      	movs	r4, r6
    b922:	000d      	movs	r5, r1
    b924:	e764      	b.n	b7f0 <__aeabi_fadd+0x80>
    b926:	2e00      	cmp	r6, #0
    b928:	d000      	beq.n	b92c <__aeabi_fadd+0x1bc>
    b92a:	e765      	b.n	b7f8 <__aeabi_fadd+0x88>
    b92c:	2000      	movs	r0, #0
    b92e:	2400      	movs	r4, #0
    b930:	e7ab      	b.n	b88a <__aeabi_fadd+0x11a>
    b932:	2eff      	cmp	r6, #255	; 0xff
    b934:	d067      	beq.n	ba06 <__aeabi_fadd+0x296>
    b936:	2480      	movs	r4, #128	; 0x80
    b938:	04e4      	lsls	r4, r4, #19
    b93a:	4240      	negs	r0, r0
    b93c:	4323      	orrs	r3, r4
    b93e:	e7e3      	b.n	b908 <__aeabi_fadd+0x198>
    b940:	24ff      	movs	r4, #255	; 0xff
    b942:	2300      	movs	r3, #0
    b944:	e73c      	b.n	b7c0 <__aeabi_fadd+0x50>
    b946:	2c00      	cmp	r4, #0
    b948:	d161      	bne.n	ba0e <__aeabi_fadd+0x29e>
    b94a:	2b00      	cmp	r3, #0
    b94c:	d07e      	beq.n	ba4c <__aeabi_fadd+0x2dc>
    b94e:	2a00      	cmp	r2, #0
    b950:	d100      	bne.n	b954 <__aeabi_fadd+0x1e4>
    b952:	e724      	b.n	b79e <__aeabi_fadd+0x2e>
    b954:	189b      	adds	r3, r3, r2
    b956:	015a      	lsls	r2, r3, #5
    b958:	d400      	bmi.n	b95c <__aeabi_fadd+0x1ec>
    b95a:	e760      	b.n	b81e <__aeabi_fadd+0xae>
    b95c:	4a3e      	ldr	r2, [pc, #248]	; (ba58 <__aeabi_fadd+0x2e8>)
    b95e:	000c      	movs	r4, r1
    b960:	4013      	ands	r3, r2
    b962:	e71c      	b.n	b79e <__aeabi_fadd+0x2e>
    b964:	2c00      	cmp	r4, #0
    b966:	d11e      	bne.n	b9a6 <__aeabi_fadd+0x236>
    b968:	2b00      	cmp	r3, #0
    b96a:	d12f      	bne.n	b9cc <__aeabi_fadd+0x25c>
    b96c:	2a00      	cmp	r2, #0
    b96e:	d066      	beq.n	ba3e <__aeabi_fadd+0x2ce>
    b970:	0013      	movs	r3, r2
    b972:	000d      	movs	r5, r1
    b974:	e713      	b.n	b79e <__aeabi_fadd+0x2e>
    b976:	2201      	movs	r2, #1
    b978:	e777      	b.n	b86a <__aeabi_fadd+0xfa>
    b97a:	2c00      	cmp	r4, #0
    b97c:	d11f      	bne.n	b9be <__aeabi_fadd+0x24e>
    b97e:	2b00      	cmp	r3, #0
    b980:	d05a      	beq.n	ba38 <__aeabi_fadd+0x2c8>
    b982:	43c9      	mvns	r1, r1
    b984:	2900      	cmp	r1, #0
    b986:	d00b      	beq.n	b9a0 <__aeabi_fadd+0x230>
    b988:	2eff      	cmp	r6, #255	; 0xff
    b98a:	d050      	beq.n	ba2e <__aeabi_fadd+0x2be>
    b98c:	291b      	cmp	r1, #27
    b98e:	dc5f      	bgt.n	ba50 <__aeabi_fadd+0x2e0>
    b990:	001f      	movs	r7, r3
    b992:	2420      	movs	r4, #32
    b994:	40cf      	lsrs	r7, r1
    b996:	1a61      	subs	r1, r4, r1
    b998:	408b      	lsls	r3, r1
    b99a:	1e59      	subs	r1, r3, #1
    b99c:	418b      	sbcs	r3, r1
    b99e:	433b      	orrs	r3, r7
    b9a0:	189b      	adds	r3, r3, r2
    b9a2:	0034      	movs	r4, r6
    b9a4:	e762      	b.n	b86c <__aeabi_fadd+0xfc>
    b9a6:	2b00      	cmp	r3, #0
    b9a8:	d11c      	bne.n	b9e4 <__aeabi_fadd+0x274>
    b9aa:	2a00      	cmp	r2, #0
    b9ac:	d04a      	beq.n	ba44 <__aeabi_fadd+0x2d4>
    b9ae:	0013      	movs	r3, r2
    b9b0:	000d      	movs	r5, r1
    b9b2:	24ff      	movs	r4, #255	; 0xff
    b9b4:	e6f3      	b.n	b79e <__aeabi_fadd+0x2e>
    b9b6:	0013      	movs	r3, r2
    b9b8:	0034      	movs	r4, r6
    b9ba:	000d      	movs	r5, r1
    b9bc:	e6ef      	b.n	b79e <__aeabi_fadd+0x2e>
    b9be:	2eff      	cmp	r6, #255	; 0xff
    b9c0:	d035      	beq.n	ba2e <__aeabi_fadd+0x2be>
    b9c2:	2480      	movs	r4, #128	; 0x80
    b9c4:	04e4      	lsls	r4, r4, #19
    b9c6:	4249      	negs	r1, r1
    b9c8:	4323      	orrs	r3, r4
    b9ca:	e7df      	b.n	b98c <__aeabi_fadd+0x21c>
    b9cc:	2a00      	cmp	r2, #0
    b9ce:	d100      	bne.n	b9d2 <__aeabi_fadd+0x262>
    b9d0:	e6e5      	b.n	b79e <__aeabi_fadd+0x2e>
    b9d2:	2780      	movs	r7, #128	; 0x80
    b9d4:	1a98      	subs	r0, r3, r2
    b9d6:	04ff      	lsls	r7, r7, #19
    b9d8:	4007      	ands	r7, r0
    b9da:	d100      	bne.n	b9de <__aeabi_fadd+0x26e>
    b9dc:	e752      	b.n	b884 <__aeabi_fadd+0x114>
    b9de:	1ad3      	subs	r3, r2, r3
    b9e0:	000d      	movs	r5, r1
    b9e2:	e6dc      	b.n	b79e <__aeabi_fadd+0x2e>
    b9e4:	24ff      	movs	r4, #255	; 0xff
    b9e6:	2a00      	cmp	r2, #0
    b9e8:	d100      	bne.n	b9ec <__aeabi_fadd+0x27c>
    b9ea:	e6d8      	b.n	b79e <__aeabi_fadd+0x2e>
    b9ec:	2080      	movs	r0, #128	; 0x80
    b9ee:	08db      	lsrs	r3, r3, #3
    b9f0:	03c0      	lsls	r0, r0, #15
    b9f2:	4203      	tst	r3, r0
    b9f4:	d004      	beq.n	ba00 <__aeabi_fadd+0x290>
    b9f6:	08d2      	lsrs	r2, r2, #3
    b9f8:	4202      	tst	r2, r0
    b9fa:	d101      	bne.n	ba00 <__aeabi_fadd+0x290>
    b9fc:	0013      	movs	r3, r2
    b9fe:	000d      	movs	r5, r1
    ba00:	00db      	lsls	r3, r3, #3
    ba02:	24ff      	movs	r4, #255	; 0xff
    ba04:	e6cb      	b.n	b79e <__aeabi_fadd+0x2e>
    ba06:	0013      	movs	r3, r2
    ba08:	24ff      	movs	r4, #255	; 0xff
    ba0a:	000d      	movs	r5, r1
    ba0c:	e6c7      	b.n	b79e <__aeabi_fadd+0x2e>
    ba0e:	2b00      	cmp	r3, #0
    ba10:	d00d      	beq.n	ba2e <__aeabi_fadd+0x2be>
    ba12:	24ff      	movs	r4, #255	; 0xff
    ba14:	2a00      	cmp	r2, #0
    ba16:	d100      	bne.n	ba1a <__aeabi_fadd+0x2aa>
    ba18:	e6c1      	b.n	b79e <__aeabi_fadd+0x2e>
    ba1a:	2180      	movs	r1, #128	; 0x80
    ba1c:	08db      	lsrs	r3, r3, #3
    ba1e:	03c9      	lsls	r1, r1, #15
    ba20:	420b      	tst	r3, r1
    ba22:	d0ed      	beq.n	ba00 <__aeabi_fadd+0x290>
    ba24:	08d2      	lsrs	r2, r2, #3
    ba26:	420a      	tst	r2, r1
    ba28:	d1ea      	bne.n	ba00 <__aeabi_fadd+0x290>
    ba2a:	0013      	movs	r3, r2
    ba2c:	e7e8      	b.n	ba00 <__aeabi_fadd+0x290>
    ba2e:	0013      	movs	r3, r2
    ba30:	24ff      	movs	r4, #255	; 0xff
    ba32:	e6b4      	b.n	b79e <__aeabi_fadd+0x2e>
    ba34:	2301      	movs	r3, #1
    ba36:	e772      	b.n	b91e <__aeabi_fadd+0x1ae>
    ba38:	0013      	movs	r3, r2
    ba3a:	0034      	movs	r4, r6
    ba3c:	e6af      	b.n	b79e <__aeabi_fadd+0x2e>
    ba3e:	2700      	movs	r7, #0
    ba40:	2000      	movs	r0, #0
    ba42:	e722      	b.n	b88a <__aeabi_fadd+0x11a>
    ba44:	2780      	movs	r7, #128	; 0x80
    ba46:	2000      	movs	r0, #0
    ba48:	03ff      	lsls	r7, r7, #15
    ba4a:	e6f1      	b.n	b830 <__aeabi_fadd+0xc0>
    ba4c:	0013      	movs	r3, r2
    ba4e:	e6a6      	b.n	b79e <__aeabi_fadd+0x2e>
    ba50:	2301      	movs	r3, #1
    ba52:	e7a5      	b.n	b9a0 <__aeabi_fadd+0x230>
    ba54:	7dffffff 	.word	0x7dffffff
    ba58:	fbffffff 	.word	0xfbffffff

0000ba5c <__aeabi_fdiv>:
    ba5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba5e:	4656      	mov	r6, sl
    ba60:	4644      	mov	r4, r8
    ba62:	465f      	mov	r7, fp
    ba64:	464d      	mov	r5, r9
    ba66:	b4f0      	push	{r4, r5, r6, r7}
    ba68:	0244      	lsls	r4, r0, #9
    ba6a:	0046      	lsls	r6, r0, #1
    ba6c:	0fc7      	lsrs	r7, r0, #31
    ba6e:	b083      	sub	sp, #12
    ba70:	4688      	mov	r8, r1
    ba72:	0a65      	lsrs	r5, r4, #9
    ba74:	0e36      	lsrs	r6, r6, #24
    ba76:	46ba      	mov	sl, r7
    ba78:	d03d      	beq.n	baf6 <__aeabi_fdiv+0x9a>
    ba7a:	2eff      	cmp	r6, #255	; 0xff
    ba7c:	d022      	beq.n	bac4 <__aeabi_fdiv+0x68>
    ba7e:	2300      	movs	r3, #0
    ba80:	00ec      	lsls	r4, r5, #3
    ba82:	2580      	movs	r5, #128	; 0x80
    ba84:	4699      	mov	r9, r3
    ba86:	469b      	mov	fp, r3
    ba88:	04ed      	lsls	r5, r5, #19
    ba8a:	4325      	orrs	r5, r4
    ba8c:	3e7f      	subs	r6, #127	; 0x7f
    ba8e:	4643      	mov	r3, r8
    ba90:	025c      	lsls	r4, r3, #9
    ba92:	0058      	lsls	r0, r3, #1
    ba94:	0fdb      	lsrs	r3, r3, #31
    ba96:	0a64      	lsrs	r4, r4, #9
    ba98:	0e00      	lsrs	r0, r0, #24
    ba9a:	4698      	mov	r8, r3
    ba9c:	d036      	beq.n	bb0c <__aeabi_fdiv+0xb0>
    ba9e:	28ff      	cmp	r0, #255	; 0xff
    baa0:	d030      	beq.n	bb04 <__aeabi_fdiv+0xa8>
    baa2:	2380      	movs	r3, #128	; 0x80
    baa4:	2100      	movs	r1, #0
    baa6:	00e4      	lsls	r4, r4, #3
    baa8:	04db      	lsls	r3, r3, #19
    baaa:	431c      	orrs	r4, r3
    baac:	387f      	subs	r0, #127	; 0x7f
    baae:	1a30      	subs	r0, r6, r0
    bab0:	9001      	str	r0, [sp, #4]
    bab2:	4648      	mov	r0, r9
    bab4:	4642      	mov	r2, r8
    bab6:	4308      	orrs	r0, r1
    bab8:	4e72      	ldr	r6, [pc, #456]	; (bc84 <__aeabi_fdiv+0x228>)
    baba:	0080      	lsls	r0, r0, #2
    babc:	5830      	ldr	r0, [r6, r0]
    babe:	407a      	eors	r2, r7
    bac0:	0013      	movs	r3, r2
    bac2:	4687      	mov	pc, r0
    bac4:	2d00      	cmp	r5, #0
    bac6:	d144      	bne.n	bb52 <__aeabi_fdiv+0xf6>
    bac8:	2308      	movs	r3, #8
    baca:	4699      	mov	r9, r3
    bacc:	3b06      	subs	r3, #6
    bace:	469b      	mov	fp, r3
    bad0:	e7dd      	b.n	ba8e <__aeabi_fdiv+0x32>
    bad2:	2201      	movs	r2, #1
    bad4:	20ff      	movs	r0, #255	; 0xff
    bad6:	2400      	movs	r4, #0
    bad8:	401a      	ands	r2, r3
    bada:	0264      	lsls	r4, r4, #9
    badc:	05c3      	lsls	r3, r0, #23
    bade:	0a64      	lsrs	r4, r4, #9
    bae0:	07d2      	lsls	r2, r2, #31
    bae2:	431c      	orrs	r4, r3
    bae4:	4314      	orrs	r4, r2
    bae6:	0020      	movs	r0, r4
    bae8:	b003      	add	sp, #12
    baea:	bc3c      	pop	{r2, r3, r4, r5}
    baec:	4690      	mov	r8, r2
    baee:	4699      	mov	r9, r3
    baf0:	46a2      	mov	sl, r4
    baf2:	46ab      	mov	fp, r5
    baf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    baf6:	2d00      	cmp	r5, #0
    baf8:	d120      	bne.n	bb3c <__aeabi_fdiv+0xe0>
    bafa:	2304      	movs	r3, #4
    bafc:	4699      	mov	r9, r3
    bafe:	3b03      	subs	r3, #3
    bb00:	469b      	mov	fp, r3
    bb02:	e7c4      	b.n	ba8e <__aeabi_fdiv+0x32>
    bb04:	2c00      	cmp	r4, #0
    bb06:	d117      	bne.n	bb38 <__aeabi_fdiv+0xdc>
    bb08:	2102      	movs	r1, #2
    bb0a:	e002      	b.n	bb12 <__aeabi_fdiv+0xb6>
    bb0c:	2c00      	cmp	r4, #0
    bb0e:	d10a      	bne.n	bb26 <__aeabi_fdiv+0xca>
    bb10:	2101      	movs	r1, #1
    bb12:	1a32      	subs	r2, r6, r0
    bb14:	9201      	str	r2, [sp, #4]
    bb16:	464a      	mov	r2, r9
    bb18:	4643      	mov	r3, r8
    bb1a:	430a      	orrs	r2, r1
    bb1c:	485a      	ldr	r0, [pc, #360]	; (bc88 <__aeabi_fdiv+0x22c>)
    bb1e:	0092      	lsls	r2, r2, #2
    bb20:	5882      	ldr	r2, [r0, r2]
    bb22:	407b      	eors	r3, r7
    bb24:	4697      	mov	pc, r2
    bb26:	0020      	movs	r0, r4
    bb28:	f7ff fda0 	bl	b66c <__clzsi2>
    bb2c:	1f43      	subs	r3, r0, #5
    bb2e:	3076      	adds	r0, #118	; 0x76
    bb30:	409c      	lsls	r4, r3
    bb32:	4240      	negs	r0, r0
    bb34:	2100      	movs	r1, #0
    bb36:	e7ba      	b.n	baae <__aeabi_fdiv+0x52>
    bb38:	2103      	movs	r1, #3
    bb3a:	e7b8      	b.n	baae <__aeabi_fdiv+0x52>
    bb3c:	0028      	movs	r0, r5
    bb3e:	f7ff fd95 	bl	b66c <__clzsi2>
    bb42:	1f43      	subs	r3, r0, #5
    bb44:	409d      	lsls	r5, r3
    bb46:	2300      	movs	r3, #0
    bb48:	3076      	adds	r0, #118	; 0x76
    bb4a:	4246      	negs	r6, r0
    bb4c:	4699      	mov	r9, r3
    bb4e:	469b      	mov	fp, r3
    bb50:	e79d      	b.n	ba8e <__aeabi_fdiv+0x32>
    bb52:	230c      	movs	r3, #12
    bb54:	4699      	mov	r9, r3
    bb56:	3b09      	subs	r3, #9
    bb58:	469b      	mov	fp, r3
    bb5a:	e798      	b.n	ba8e <__aeabi_fdiv+0x32>
    bb5c:	2480      	movs	r4, #128	; 0x80
    bb5e:	2200      	movs	r2, #0
    bb60:	03e4      	lsls	r4, r4, #15
    bb62:	20ff      	movs	r0, #255	; 0xff
    bb64:	e7b9      	b.n	bada <__aeabi_fdiv+0x7e>
    bb66:	2400      	movs	r4, #0
    bb68:	46c2      	mov	sl, r8
    bb6a:	468b      	mov	fp, r1
    bb6c:	465a      	mov	r2, fp
    bb6e:	4653      	mov	r3, sl
    bb70:	2a02      	cmp	r2, #2
    bb72:	d0ae      	beq.n	bad2 <__aeabi_fdiv+0x76>
    bb74:	2a03      	cmp	r2, #3
    bb76:	d07d      	beq.n	bc74 <__aeabi_fdiv+0x218>
    bb78:	2a01      	cmp	r2, #1
    bb7a:	d131      	bne.n	bbe0 <__aeabi_fdiv+0x184>
    bb7c:	2201      	movs	r2, #1
    bb7e:	2000      	movs	r0, #0
    bb80:	401a      	ands	r2, r3
    bb82:	2400      	movs	r4, #0
    bb84:	e7a9      	b.n	bada <__aeabi_fdiv+0x7e>
    bb86:	2201      	movs	r2, #1
    bb88:	1a10      	subs	r0, r2, r0
    bb8a:	281b      	cmp	r0, #27
    bb8c:	dd56      	ble.n	bc3c <__aeabi_fdiv+0x1e0>
    bb8e:	401a      	ands	r2, r3
    bb90:	2000      	movs	r0, #0
    bb92:	2400      	movs	r4, #0
    bb94:	e7a1      	b.n	bada <__aeabi_fdiv+0x7e>
    bb96:	2380      	movs	r3, #128	; 0x80
    bb98:	03db      	lsls	r3, r3, #15
    bb9a:	421d      	tst	r5, r3
    bb9c:	d14b      	bne.n	bc36 <__aeabi_fdiv+0x1da>
    bb9e:	2380      	movs	r3, #128	; 0x80
    bba0:	03db      	lsls	r3, r3, #15
    bba2:	432b      	orrs	r3, r5
    bba4:	025c      	lsls	r4, r3, #9
    bba6:	0a64      	lsrs	r4, r4, #9
    bba8:	003a      	movs	r2, r7
    bbaa:	20ff      	movs	r0, #255	; 0xff
    bbac:	e795      	b.n	bada <__aeabi_fdiv+0x7e>
    bbae:	016d      	lsls	r5, r5, #5
    bbb0:	0160      	lsls	r0, r4, #5
    bbb2:	4285      	cmp	r5, r0
    bbb4:	d230      	bcs.n	bc18 <__aeabi_fdiv+0x1bc>
    bbb6:	9a01      	ldr	r2, [sp, #4]
    bbb8:	2400      	movs	r4, #0
    bbba:	3a01      	subs	r2, #1
    bbbc:	9201      	str	r2, [sp, #4]
    bbbe:	221b      	movs	r2, #27
    bbc0:	2701      	movs	r7, #1
    bbc2:	0029      	movs	r1, r5
    bbc4:	0064      	lsls	r4, r4, #1
    bbc6:	006d      	lsls	r5, r5, #1
    bbc8:	2900      	cmp	r1, #0
    bbca:	db01      	blt.n	bbd0 <__aeabi_fdiv+0x174>
    bbcc:	42a8      	cmp	r0, r5
    bbce:	d801      	bhi.n	bbd4 <__aeabi_fdiv+0x178>
    bbd0:	1a2d      	subs	r5, r5, r0
    bbd2:	433c      	orrs	r4, r7
    bbd4:	3a01      	subs	r2, #1
    bbd6:	2a00      	cmp	r2, #0
    bbd8:	d1f3      	bne.n	bbc2 <__aeabi_fdiv+0x166>
    bbda:	1e6a      	subs	r2, r5, #1
    bbdc:	4195      	sbcs	r5, r2
    bbde:	432c      	orrs	r4, r5
    bbe0:	9801      	ldr	r0, [sp, #4]
    bbe2:	307f      	adds	r0, #127	; 0x7f
    bbe4:	2800      	cmp	r0, #0
    bbe6:	ddce      	ble.n	bb86 <__aeabi_fdiv+0x12a>
    bbe8:	0762      	lsls	r2, r4, #29
    bbea:	d004      	beq.n	bbf6 <__aeabi_fdiv+0x19a>
    bbec:	220f      	movs	r2, #15
    bbee:	4022      	ands	r2, r4
    bbf0:	2a04      	cmp	r2, #4
    bbf2:	d000      	beq.n	bbf6 <__aeabi_fdiv+0x19a>
    bbf4:	3404      	adds	r4, #4
    bbf6:	0122      	lsls	r2, r4, #4
    bbf8:	d503      	bpl.n	bc02 <__aeabi_fdiv+0x1a6>
    bbfa:	4a24      	ldr	r2, [pc, #144]	; (bc8c <__aeabi_fdiv+0x230>)
    bbfc:	9801      	ldr	r0, [sp, #4]
    bbfe:	4014      	ands	r4, r2
    bc00:	3080      	adds	r0, #128	; 0x80
    bc02:	28fe      	cmp	r0, #254	; 0xfe
    bc04:	dd00      	ble.n	bc08 <__aeabi_fdiv+0x1ac>
    bc06:	e764      	b.n	bad2 <__aeabi_fdiv+0x76>
    bc08:	2201      	movs	r2, #1
    bc0a:	01a4      	lsls	r4, r4, #6
    bc0c:	0a64      	lsrs	r4, r4, #9
    bc0e:	b2c0      	uxtb	r0, r0
    bc10:	401a      	ands	r2, r3
    bc12:	e762      	b.n	bada <__aeabi_fdiv+0x7e>
    bc14:	002c      	movs	r4, r5
    bc16:	e7a9      	b.n	bb6c <__aeabi_fdiv+0x110>
    bc18:	1a2d      	subs	r5, r5, r0
    bc1a:	221a      	movs	r2, #26
    bc1c:	2401      	movs	r4, #1
    bc1e:	e7cf      	b.n	bbc0 <__aeabi_fdiv+0x164>
    bc20:	026b      	lsls	r3, r5, #9
    bc22:	d5bc      	bpl.n	bb9e <__aeabi_fdiv+0x142>
    bc24:	2400      	movs	r4, #0
    bc26:	2380      	movs	r3, #128	; 0x80
    bc28:	03db      	lsls	r3, r3, #15
    bc2a:	431c      	orrs	r4, r3
    bc2c:	0264      	lsls	r4, r4, #9
    bc2e:	0a64      	lsrs	r4, r4, #9
    bc30:	4642      	mov	r2, r8
    bc32:	20ff      	movs	r0, #255	; 0xff
    bc34:	e751      	b.n	bada <__aeabi_fdiv+0x7e>
    bc36:	421c      	tst	r4, r3
    bc38:	d1b3      	bne.n	bba2 <__aeabi_fdiv+0x146>
    bc3a:	e7f4      	b.n	bc26 <__aeabi_fdiv+0x1ca>
    bc3c:	0021      	movs	r1, r4
    bc3e:	2220      	movs	r2, #32
    bc40:	40c1      	lsrs	r1, r0
    bc42:	1a10      	subs	r0, r2, r0
    bc44:	4084      	lsls	r4, r0
    bc46:	1e62      	subs	r2, r4, #1
    bc48:	4194      	sbcs	r4, r2
    bc4a:	430c      	orrs	r4, r1
    bc4c:	0762      	lsls	r2, r4, #29
    bc4e:	d004      	beq.n	bc5a <__aeabi_fdiv+0x1fe>
    bc50:	220f      	movs	r2, #15
    bc52:	4022      	ands	r2, r4
    bc54:	2a04      	cmp	r2, #4
    bc56:	d000      	beq.n	bc5a <__aeabi_fdiv+0x1fe>
    bc58:	3404      	adds	r4, #4
    bc5a:	0162      	lsls	r2, r4, #5
    bc5c:	d504      	bpl.n	bc68 <__aeabi_fdiv+0x20c>
    bc5e:	2201      	movs	r2, #1
    bc60:	2001      	movs	r0, #1
    bc62:	401a      	ands	r2, r3
    bc64:	2400      	movs	r4, #0
    bc66:	e738      	b.n	bada <__aeabi_fdiv+0x7e>
    bc68:	2201      	movs	r2, #1
    bc6a:	01a4      	lsls	r4, r4, #6
    bc6c:	0a64      	lsrs	r4, r4, #9
    bc6e:	401a      	ands	r2, r3
    bc70:	2000      	movs	r0, #0
    bc72:	e732      	b.n	bada <__aeabi_fdiv+0x7e>
    bc74:	2380      	movs	r3, #128	; 0x80
    bc76:	03db      	lsls	r3, r3, #15
    bc78:	431c      	orrs	r4, r3
    bc7a:	0264      	lsls	r4, r4, #9
    bc7c:	0a64      	lsrs	r4, r4, #9
    bc7e:	4652      	mov	r2, sl
    bc80:	20ff      	movs	r0, #255	; 0xff
    bc82:	e72a      	b.n	bada <__aeabi_fdiv+0x7e>
    bc84:	0000cbb4 	.word	0x0000cbb4
    bc88:	0000cbf4 	.word	0x0000cbf4
    bc8c:	f7ffffff 	.word	0xf7ffffff

0000bc90 <__eqsf2>:
    bc90:	0243      	lsls	r3, r0, #9
    bc92:	b570      	push	{r4, r5, r6, lr}
    bc94:	0042      	lsls	r2, r0, #1
    bc96:	004c      	lsls	r4, r1, #1
    bc98:	0a5d      	lsrs	r5, r3, #9
    bc9a:	0fc3      	lsrs	r3, r0, #31
    bc9c:	0248      	lsls	r0, r1, #9
    bc9e:	0e12      	lsrs	r2, r2, #24
    bca0:	0a46      	lsrs	r6, r0, #9
    bca2:	0e24      	lsrs	r4, r4, #24
    bca4:	0fc9      	lsrs	r1, r1, #31
    bca6:	2aff      	cmp	r2, #255	; 0xff
    bca8:	d00f      	beq.n	bcca <__eqsf2+0x3a>
    bcaa:	2cff      	cmp	r4, #255	; 0xff
    bcac:	d011      	beq.n	bcd2 <__eqsf2+0x42>
    bcae:	2001      	movs	r0, #1
    bcb0:	42a2      	cmp	r2, r4
    bcb2:	d000      	beq.n	bcb6 <__eqsf2+0x26>
    bcb4:	bd70      	pop	{r4, r5, r6, pc}
    bcb6:	42b5      	cmp	r5, r6
    bcb8:	d1fc      	bne.n	bcb4 <__eqsf2+0x24>
    bcba:	428b      	cmp	r3, r1
    bcbc:	d00d      	beq.n	bcda <__eqsf2+0x4a>
    bcbe:	2a00      	cmp	r2, #0
    bcc0:	d1f8      	bne.n	bcb4 <__eqsf2+0x24>
    bcc2:	0028      	movs	r0, r5
    bcc4:	1e43      	subs	r3, r0, #1
    bcc6:	4198      	sbcs	r0, r3
    bcc8:	e7f4      	b.n	bcb4 <__eqsf2+0x24>
    bcca:	2001      	movs	r0, #1
    bccc:	2d00      	cmp	r5, #0
    bcce:	d1f1      	bne.n	bcb4 <__eqsf2+0x24>
    bcd0:	e7eb      	b.n	bcaa <__eqsf2+0x1a>
    bcd2:	2001      	movs	r0, #1
    bcd4:	2e00      	cmp	r6, #0
    bcd6:	d1ed      	bne.n	bcb4 <__eqsf2+0x24>
    bcd8:	e7e9      	b.n	bcae <__eqsf2+0x1e>
    bcda:	2000      	movs	r0, #0
    bcdc:	e7ea      	b.n	bcb4 <__eqsf2+0x24>
    bcde:	46c0      	nop			; (mov r8, r8)

0000bce0 <__gesf2>:
    bce0:	0243      	lsls	r3, r0, #9
    bce2:	b5f0      	push	{r4, r5, r6, r7, lr}
    bce4:	0042      	lsls	r2, r0, #1
    bce6:	0a5d      	lsrs	r5, r3, #9
    bce8:	0fc3      	lsrs	r3, r0, #31
    bcea:	0248      	lsls	r0, r1, #9
    bcec:	0a44      	lsrs	r4, r0, #9
    bcee:	0048      	lsls	r0, r1, #1
    bcf0:	0e12      	lsrs	r2, r2, #24
    bcf2:	0e00      	lsrs	r0, r0, #24
    bcf4:	0fc9      	lsrs	r1, r1, #31
    bcf6:	2aff      	cmp	r2, #255	; 0xff
    bcf8:	d01f      	beq.n	bd3a <__gesf2+0x5a>
    bcfa:	28ff      	cmp	r0, #255	; 0xff
    bcfc:	d022      	beq.n	bd44 <__gesf2+0x64>
    bcfe:	2a00      	cmp	r2, #0
    bd00:	d109      	bne.n	bd16 <__gesf2+0x36>
    bd02:	426e      	negs	r6, r5
    bd04:	416e      	adcs	r6, r5
    bd06:	2800      	cmp	r0, #0
    bd08:	d10f      	bne.n	bd2a <__gesf2+0x4a>
    bd0a:	2c00      	cmp	r4, #0
    bd0c:	d10d      	bne.n	bd2a <__gesf2+0x4a>
    bd0e:	2000      	movs	r0, #0
    bd10:	2d00      	cmp	r5, #0
    bd12:	d009      	beq.n	bd28 <__gesf2+0x48>
    bd14:	e005      	b.n	bd22 <__gesf2+0x42>
    bd16:	2800      	cmp	r0, #0
    bd18:	d101      	bne.n	bd1e <__gesf2+0x3e>
    bd1a:	2c00      	cmp	r4, #0
    bd1c:	d001      	beq.n	bd22 <__gesf2+0x42>
    bd1e:	428b      	cmp	r3, r1
    bd20:	d013      	beq.n	bd4a <__gesf2+0x6a>
    bd22:	4258      	negs	r0, r3
    bd24:	2301      	movs	r3, #1
    bd26:	4318      	orrs	r0, r3
    bd28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd2a:	2e00      	cmp	r6, #0
    bd2c:	d0f7      	beq.n	bd1e <__gesf2+0x3e>
    bd2e:	4248      	negs	r0, r1
    bd30:	4141      	adcs	r1, r0
    bd32:	2001      	movs	r0, #1
    bd34:	4249      	negs	r1, r1
    bd36:	4308      	orrs	r0, r1
    bd38:	e7f6      	b.n	bd28 <__gesf2+0x48>
    bd3a:	2d00      	cmp	r5, #0
    bd3c:	d0dd      	beq.n	bcfa <__gesf2+0x1a>
    bd3e:	2002      	movs	r0, #2
    bd40:	4240      	negs	r0, r0
    bd42:	e7f1      	b.n	bd28 <__gesf2+0x48>
    bd44:	2c00      	cmp	r4, #0
    bd46:	d0da      	beq.n	bcfe <__gesf2+0x1e>
    bd48:	e7f9      	b.n	bd3e <__gesf2+0x5e>
    bd4a:	4282      	cmp	r2, r0
    bd4c:	dce9      	bgt.n	bd22 <__gesf2+0x42>
    bd4e:	db04      	blt.n	bd5a <__gesf2+0x7a>
    bd50:	42a5      	cmp	r5, r4
    bd52:	d8e6      	bhi.n	bd22 <__gesf2+0x42>
    bd54:	2000      	movs	r0, #0
    bd56:	42a5      	cmp	r5, r4
    bd58:	d2e6      	bcs.n	bd28 <__gesf2+0x48>
    bd5a:	4258      	negs	r0, r3
    bd5c:	4143      	adcs	r3, r0
    bd5e:	2001      	movs	r0, #1
    bd60:	425b      	negs	r3, r3
    bd62:	4318      	orrs	r0, r3
    bd64:	e7e0      	b.n	bd28 <__gesf2+0x48>
    bd66:	46c0      	nop			; (mov r8, r8)

0000bd68 <__lesf2>:
    bd68:	0243      	lsls	r3, r0, #9
    bd6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd6c:	0042      	lsls	r2, r0, #1
    bd6e:	004c      	lsls	r4, r1, #1
    bd70:	0a5e      	lsrs	r6, r3, #9
    bd72:	0fc3      	lsrs	r3, r0, #31
    bd74:	0248      	lsls	r0, r1, #9
    bd76:	0e12      	lsrs	r2, r2, #24
    bd78:	0a45      	lsrs	r5, r0, #9
    bd7a:	0e24      	lsrs	r4, r4, #24
    bd7c:	0fc9      	lsrs	r1, r1, #31
    bd7e:	2aff      	cmp	r2, #255	; 0xff
    bd80:	d017      	beq.n	bdb2 <__lesf2+0x4a>
    bd82:	2cff      	cmp	r4, #255	; 0xff
    bd84:	d019      	beq.n	bdba <__lesf2+0x52>
    bd86:	2a00      	cmp	r2, #0
    bd88:	d10b      	bne.n	bda2 <__lesf2+0x3a>
    bd8a:	4270      	negs	r0, r6
    bd8c:	4170      	adcs	r0, r6
    bd8e:	2c00      	cmp	r4, #0
    bd90:	d017      	beq.n	bdc2 <__lesf2+0x5a>
    bd92:	2800      	cmp	r0, #0
    bd94:	d007      	beq.n	bda6 <__lesf2+0x3e>
    bd96:	4248      	negs	r0, r1
    bd98:	4141      	adcs	r1, r0
    bd9a:	2001      	movs	r0, #1
    bd9c:	4249      	negs	r1, r1
    bd9e:	4308      	orrs	r0, r1
    bda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bda2:	2c00      	cmp	r4, #0
    bda4:	d013      	beq.n	bdce <__lesf2+0x66>
    bda6:	428b      	cmp	r3, r1
    bda8:	d014      	beq.n	bdd4 <__lesf2+0x6c>
    bdaa:	4258      	negs	r0, r3
    bdac:	2301      	movs	r3, #1
    bdae:	4318      	orrs	r0, r3
    bdb0:	e7f6      	b.n	bda0 <__lesf2+0x38>
    bdb2:	2002      	movs	r0, #2
    bdb4:	2e00      	cmp	r6, #0
    bdb6:	d1f3      	bne.n	bda0 <__lesf2+0x38>
    bdb8:	e7e3      	b.n	bd82 <__lesf2+0x1a>
    bdba:	2002      	movs	r0, #2
    bdbc:	2d00      	cmp	r5, #0
    bdbe:	d1ef      	bne.n	bda0 <__lesf2+0x38>
    bdc0:	e7e1      	b.n	bd86 <__lesf2+0x1e>
    bdc2:	2d00      	cmp	r5, #0
    bdc4:	d1e5      	bne.n	bd92 <__lesf2+0x2a>
    bdc6:	2000      	movs	r0, #0
    bdc8:	2e00      	cmp	r6, #0
    bdca:	d0e9      	beq.n	bda0 <__lesf2+0x38>
    bdcc:	e7ed      	b.n	bdaa <__lesf2+0x42>
    bdce:	2d00      	cmp	r5, #0
    bdd0:	d1e9      	bne.n	bda6 <__lesf2+0x3e>
    bdd2:	e7ea      	b.n	bdaa <__lesf2+0x42>
    bdd4:	42a2      	cmp	r2, r4
    bdd6:	dce8      	bgt.n	bdaa <__lesf2+0x42>
    bdd8:	db04      	blt.n	bde4 <__lesf2+0x7c>
    bdda:	42ae      	cmp	r6, r5
    bddc:	d8e5      	bhi.n	bdaa <__lesf2+0x42>
    bdde:	2000      	movs	r0, #0
    bde0:	42ae      	cmp	r6, r5
    bde2:	d2dd      	bcs.n	bda0 <__lesf2+0x38>
    bde4:	4258      	negs	r0, r3
    bde6:	4143      	adcs	r3, r0
    bde8:	2001      	movs	r0, #1
    bdea:	425b      	negs	r3, r3
    bdec:	4318      	orrs	r0, r3
    bdee:	e7d7      	b.n	bda0 <__lesf2+0x38>

0000bdf0 <__aeabi_fsub>:
    bdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdf2:	024a      	lsls	r2, r1, #9
    bdf4:	004e      	lsls	r6, r1, #1
    bdf6:	0243      	lsls	r3, r0, #9
    bdf8:	0044      	lsls	r4, r0, #1
    bdfa:	0e24      	lsrs	r4, r4, #24
    bdfc:	0fc5      	lsrs	r5, r0, #31
    bdfe:	099b      	lsrs	r3, r3, #6
    be00:	0e36      	lsrs	r6, r6, #24
    be02:	0fc9      	lsrs	r1, r1, #31
    be04:	0992      	lsrs	r2, r2, #6
    be06:	2eff      	cmp	r6, #255	; 0xff
    be08:	d100      	bne.n	be0c <__aeabi_fsub+0x1c>
    be0a:	e083      	b.n	bf14 <__aeabi_fsub+0x124>
    be0c:	2001      	movs	r0, #1
    be0e:	4041      	eors	r1, r0
    be10:	1ba0      	subs	r0, r4, r6
    be12:	42a9      	cmp	r1, r5
    be14:	d05c      	beq.n	bed0 <__aeabi_fsub+0xe0>
    be16:	2800      	cmp	r0, #0
    be18:	dc00      	bgt.n	be1c <__aeabi_fsub+0x2c>
    be1a:	e095      	b.n	bf48 <__aeabi_fsub+0x158>
    be1c:	2e00      	cmp	r6, #0
    be1e:	d11c      	bne.n	be5a <__aeabi_fsub+0x6a>
    be20:	2a00      	cmp	r2, #0
    be22:	d000      	beq.n	be26 <__aeabi_fsub+0x36>
    be24:	e081      	b.n	bf2a <__aeabi_fsub+0x13a>
    be26:	075a      	lsls	r2, r3, #29
    be28:	d004      	beq.n	be34 <__aeabi_fsub+0x44>
    be2a:	220f      	movs	r2, #15
    be2c:	401a      	ands	r2, r3
    be2e:	2a04      	cmp	r2, #4
    be30:	d000      	beq.n	be34 <__aeabi_fsub+0x44>
    be32:	3304      	adds	r3, #4
    be34:	015a      	lsls	r2, r3, #5
    be36:	d53b      	bpl.n	beb0 <__aeabi_fsub+0xc0>
    be38:	3401      	adds	r4, #1
    be3a:	2cff      	cmp	r4, #255	; 0xff
    be3c:	d100      	bne.n	be40 <__aeabi_fsub+0x50>
    be3e:	e091      	b.n	bf64 <__aeabi_fsub+0x174>
    be40:	2001      	movs	r0, #1
    be42:	019b      	lsls	r3, r3, #6
    be44:	0a5b      	lsrs	r3, r3, #9
    be46:	b2e4      	uxtb	r4, r4
    be48:	4005      	ands	r5, r0
    be4a:	025b      	lsls	r3, r3, #9
    be4c:	05e4      	lsls	r4, r4, #23
    be4e:	0a5b      	lsrs	r3, r3, #9
    be50:	07ed      	lsls	r5, r5, #31
    be52:	4323      	orrs	r3, r4
    be54:	432b      	orrs	r3, r5
    be56:	0018      	movs	r0, r3
    be58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be5a:	2cff      	cmp	r4, #255	; 0xff
    be5c:	d0e3      	beq.n	be26 <__aeabi_fsub+0x36>
    be5e:	2180      	movs	r1, #128	; 0x80
    be60:	04c9      	lsls	r1, r1, #19
    be62:	430a      	orrs	r2, r1
    be64:	281b      	cmp	r0, #27
    be66:	dd00      	ble.n	be6a <__aeabi_fsub+0x7a>
    be68:	e090      	b.n	bf8c <__aeabi_fsub+0x19c>
    be6a:	0016      	movs	r6, r2
    be6c:	2120      	movs	r1, #32
    be6e:	40c6      	lsrs	r6, r0
    be70:	1a08      	subs	r0, r1, r0
    be72:	4082      	lsls	r2, r0
    be74:	1e51      	subs	r1, r2, #1
    be76:	418a      	sbcs	r2, r1
    be78:	4332      	orrs	r2, r6
    be7a:	1a9b      	subs	r3, r3, r2
    be7c:	015a      	lsls	r2, r3, #5
    be7e:	d515      	bpl.n	beac <__aeabi_fsub+0xbc>
    be80:	019b      	lsls	r3, r3, #6
    be82:	099e      	lsrs	r6, r3, #6
    be84:	0030      	movs	r0, r6
    be86:	f7ff fbf1 	bl	b66c <__clzsi2>
    be8a:	3805      	subs	r0, #5
    be8c:	4086      	lsls	r6, r0
    be8e:	4284      	cmp	r4, r0
    be90:	dc6c      	bgt.n	bf6c <__aeabi_fsub+0x17c>
    be92:	1b04      	subs	r4, r0, r4
    be94:	0033      	movs	r3, r6
    be96:	2020      	movs	r0, #32
    be98:	3401      	adds	r4, #1
    be9a:	40e3      	lsrs	r3, r4
    be9c:	1b04      	subs	r4, r0, r4
    be9e:	40a6      	lsls	r6, r4
    bea0:	1e72      	subs	r2, r6, #1
    bea2:	4196      	sbcs	r6, r2
    bea4:	2400      	movs	r4, #0
    bea6:	4333      	orrs	r3, r6
    bea8:	e7bd      	b.n	be26 <__aeabi_fsub+0x36>
    beaa:	000d      	movs	r5, r1
    beac:	075a      	lsls	r2, r3, #29
    beae:	d1bc      	bne.n	be2a <__aeabi_fsub+0x3a>
    beb0:	08df      	lsrs	r7, r3, #3
    beb2:	2301      	movs	r3, #1
    beb4:	401d      	ands	r5, r3
    beb6:	2cff      	cmp	r4, #255	; 0xff
    beb8:	d133      	bne.n	bf22 <__aeabi_fsub+0x132>
    beba:	2f00      	cmp	r7, #0
    bebc:	d100      	bne.n	bec0 <__aeabi_fsub+0xd0>
    bebe:	e090      	b.n	bfe2 <__aeabi_fsub+0x1f2>
    bec0:	2280      	movs	r2, #128	; 0x80
    bec2:	03d2      	lsls	r2, r2, #15
    bec4:	0013      	movs	r3, r2
    bec6:	433b      	orrs	r3, r7
    bec8:	025b      	lsls	r3, r3, #9
    beca:	0a5b      	lsrs	r3, r3, #9
    becc:	24ff      	movs	r4, #255	; 0xff
    bece:	e7bc      	b.n	be4a <__aeabi_fsub+0x5a>
    bed0:	2800      	cmp	r0, #0
    bed2:	dd4f      	ble.n	bf74 <__aeabi_fsub+0x184>
    bed4:	2e00      	cmp	r6, #0
    bed6:	d02e      	beq.n	bf36 <__aeabi_fsub+0x146>
    bed8:	2cff      	cmp	r4, #255	; 0xff
    beda:	d0a4      	beq.n	be26 <__aeabi_fsub+0x36>
    bedc:	2580      	movs	r5, #128	; 0x80
    bede:	04ed      	lsls	r5, r5, #19
    bee0:	432a      	orrs	r2, r5
    bee2:	281b      	cmp	r0, #27
    bee4:	dd00      	ble.n	bee8 <__aeabi_fsub+0xf8>
    bee6:	e097      	b.n	c018 <__aeabi_fsub+0x228>
    bee8:	0016      	movs	r6, r2
    beea:	2520      	movs	r5, #32
    beec:	40c6      	lsrs	r6, r0
    beee:	1a28      	subs	r0, r5, r0
    bef0:	4082      	lsls	r2, r0
    bef2:	1e50      	subs	r0, r2, #1
    bef4:	4182      	sbcs	r2, r0
    bef6:	4332      	orrs	r2, r6
    bef8:	189b      	adds	r3, r3, r2
    befa:	015a      	lsls	r2, r3, #5
    befc:	d5d5      	bpl.n	beaa <__aeabi_fsub+0xba>
    befe:	3401      	adds	r4, #1
    bf00:	2cff      	cmp	r4, #255	; 0xff
    bf02:	d06d      	beq.n	bfe0 <__aeabi_fsub+0x1f0>
    bf04:	2201      	movs	r2, #1
    bf06:	487b      	ldr	r0, [pc, #492]	; (c0f4 <__aeabi_fsub+0x304>)
    bf08:	401a      	ands	r2, r3
    bf0a:	085b      	lsrs	r3, r3, #1
    bf0c:	4003      	ands	r3, r0
    bf0e:	4313      	orrs	r3, r2
    bf10:	000d      	movs	r5, r1
    bf12:	e788      	b.n	be26 <__aeabi_fsub+0x36>
    bf14:	2a00      	cmp	r2, #0
    bf16:	d000      	beq.n	bf1a <__aeabi_fsub+0x12a>
    bf18:	e77a      	b.n	be10 <__aeabi_fsub+0x20>
    bf1a:	e777      	b.n	be0c <__aeabi_fsub+0x1c>
    bf1c:	1e03      	subs	r3, r0, #0
    bf1e:	d1c5      	bne.n	beac <__aeabi_fsub+0xbc>
    bf20:	2500      	movs	r5, #0
    bf22:	027b      	lsls	r3, r7, #9
    bf24:	0a5b      	lsrs	r3, r3, #9
    bf26:	b2e4      	uxtb	r4, r4
    bf28:	e78f      	b.n	be4a <__aeabi_fsub+0x5a>
    bf2a:	3801      	subs	r0, #1
    bf2c:	2800      	cmp	r0, #0
    bf2e:	d0a4      	beq.n	be7a <__aeabi_fsub+0x8a>
    bf30:	2cff      	cmp	r4, #255	; 0xff
    bf32:	d197      	bne.n	be64 <__aeabi_fsub+0x74>
    bf34:	e777      	b.n	be26 <__aeabi_fsub+0x36>
    bf36:	2a00      	cmp	r2, #0
    bf38:	d100      	bne.n	bf3c <__aeabi_fsub+0x14c>
    bf3a:	e774      	b.n	be26 <__aeabi_fsub+0x36>
    bf3c:	3801      	subs	r0, #1
    bf3e:	2800      	cmp	r0, #0
    bf40:	d0da      	beq.n	bef8 <__aeabi_fsub+0x108>
    bf42:	2cff      	cmp	r4, #255	; 0xff
    bf44:	d1cd      	bne.n	bee2 <__aeabi_fsub+0xf2>
    bf46:	e76e      	b.n	be26 <__aeabi_fsub+0x36>
    bf48:	2800      	cmp	r0, #0
    bf4a:	d121      	bne.n	bf90 <__aeabi_fsub+0x1a0>
    bf4c:	1c60      	adds	r0, r4, #1
    bf4e:	b2c0      	uxtb	r0, r0
    bf50:	2801      	cmp	r0, #1
    bf52:	dd58      	ble.n	c006 <__aeabi_fsub+0x216>
    bf54:	2780      	movs	r7, #128	; 0x80
    bf56:	1a9e      	subs	r6, r3, r2
    bf58:	04ff      	lsls	r7, r7, #19
    bf5a:	4037      	ands	r7, r6
    bf5c:	d02f      	beq.n	bfbe <__aeabi_fsub+0x1ce>
    bf5e:	1ad6      	subs	r6, r2, r3
    bf60:	000d      	movs	r5, r1
    bf62:	e78f      	b.n	be84 <__aeabi_fsub+0x94>
    bf64:	2301      	movs	r3, #1
    bf66:	401d      	ands	r5, r3
    bf68:	2300      	movs	r3, #0
    bf6a:	e76e      	b.n	be4a <__aeabi_fsub+0x5a>
    bf6c:	4b62      	ldr	r3, [pc, #392]	; (c0f8 <__aeabi_fsub+0x308>)
    bf6e:	1a24      	subs	r4, r4, r0
    bf70:	4033      	ands	r3, r6
    bf72:	e758      	b.n	be26 <__aeabi_fsub+0x36>
    bf74:	2800      	cmp	r0, #0
    bf76:	d151      	bne.n	c01c <__aeabi_fsub+0x22c>
    bf78:	1c60      	adds	r0, r4, #1
    bf7a:	b2c6      	uxtb	r6, r0
    bf7c:	2e01      	cmp	r6, #1
    bf7e:	dd33      	ble.n	bfe8 <__aeabi_fsub+0x1f8>
    bf80:	28ff      	cmp	r0, #255	; 0xff
    bf82:	d02d      	beq.n	bfe0 <__aeabi_fsub+0x1f0>
    bf84:	189b      	adds	r3, r3, r2
    bf86:	085b      	lsrs	r3, r3, #1
    bf88:	0004      	movs	r4, r0
    bf8a:	e74c      	b.n	be26 <__aeabi_fsub+0x36>
    bf8c:	2201      	movs	r2, #1
    bf8e:	e774      	b.n	be7a <__aeabi_fsub+0x8a>
    bf90:	2c00      	cmp	r4, #0
    bf92:	d01a      	beq.n	bfca <__aeabi_fsub+0x1da>
    bf94:	2eff      	cmp	r6, #255	; 0xff
    bf96:	d01f      	beq.n	bfd8 <__aeabi_fsub+0x1e8>
    bf98:	2480      	movs	r4, #128	; 0x80
    bf9a:	04e4      	lsls	r4, r4, #19
    bf9c:	4240      	negs	r0, r0
    bf9e:	4323      	orrs	r3, r4
    bfa0:	281b      	cmp	r0, #27
    bfa2:	dd00      	ble.n	bfa6 <__aeabi_fsub+0x1b6>
    bfa4:	e096      	b.n	c0d4 <__aeabi_fsub+0x2e4>
    bfa6:	001d      	movs	r5, r3
    bfa8:	2420      	movs	r4, #32
    bfaa:	40c5      	lsrs	r5, r0
    bfac:	1a20      	subs	r0, r4, r0
    bfae:	4083      	lsls	r3, r0
    bfb0:	1e58      	subs	r0, r3, #1
    bfb2:	4183      	sbcs	r3, r0
    bfb4:	432b      	orrs	r3, r5
    bfb6:	1ad3      	subs	r3, r2, r3
    bfb8:	0034      	movs	r4, r6
    bfba:	000d      	movs	r5, r1
    bfbc:	e75e      	b.n	be7c <__aeabi_fsub+0x8c>
    bfbe:	2e00      	cmp	r6, #0
    bfc0:	d000      	beq.n	bfc4 <__aeabi_fsub+0x1d4>
    bfc2:	e75f      	b.n	be84 <__aeabi_fsub+0x94>
    bfc4:	2500      	movs	r5, #0
    bfc6:	2400      	movs	r4, #0
    bfc8:	e7ab      	b.n	bf22 <__aeabi_fsub+0x132>
    bfca:	2b00      	cmp	r3, #0
    bfcc:	d044      	beq.n	c058 <__aeabi_fsub+0x268>
    bfce:	43c0      	mvns	r0, r0
    bfd0:	2800      	cmp	r0, #0
    bfd2:	d0f0      	beq.n	bfb6 <__aeabi_fsub+0x1c6>
    bfd4:	2eff      	cmp	r6, #255	; 0xff
    bfd6:	d1e3      	bne.n	bfa0 <__aeabi_fsub+0x1b0>
    bfd8:	0013      	movs	r3, r2
    bfda:	24ff      	movs	r4, #255	; 0xff
    bfdc:	000d      	movs	r5, r1
    bfde:	e722      	b.n	be26 <__aeabi_fsub+0x36>
    bfe0:	000d      	movs	r5, r1
    bfe2:	24ff      	movs	r4, #255	; 0xff
    bfe4:	2300      	movs	r3, #0
    bfe6:	e730      	b.n	be4a <__aeabi_fsub+0x5a>
    bfe8:	2c00      	cmp	r4, #0
    bfea:	d15d      	bne.n	c0a8 <__aeabi_fsub+0x2b8>
    bfec:	2b00      	cmp	r3, #0
    bfee:	d07d      	beq.n	c0ec <__aeabi_fsub+0x2fc>
    bff0:	2a00      	cmp	r2, #0
    bff2:	d100      	bne.n	bff6 <__aeabi_fsub+0x206>
    bff4:	e717      	b.n	be26 <__aeabi_fsub+0x36>
    bff6:	189b      	adds	r3, r3, r2
    bff8:	015a      	lsls	r2, r3, #5
    bffa:	d400      	bmi.n	bffe <__aeabi_fsub+0x20e>
    bffc:	e756      	b.n	beac <__aeabi_fsub+0xbc>
    bffe:	4a3e      	ldr	r2, [pc, #248]	; (c0f8 <__aeabi_fsub+0x308>)
    c000:	0004      	movs	r4, r0
    c002:	4013      	ands	r3, r2
    c004:	e70f      	b.n	be26 <__aeabi_fsub+0x36>
    c006:	2c00      	cmp	r4, #0
    c008:	d11e      	bne.n	c048 <__aeabi_fsub+0x258>
    c00a:	2b00      	cmp	r3, #0
    c00c:	d12f      	bne.n	c06e <__aeabi_fsub+0x27e>
    c00e:	2a00      	cmp	r2, #0
    c010:	d065      	beq.n	c0de <__aeabi_fsub+0x2ee>
    c012:	0013      	movs	r3, r2
    c014:	000d      	movs	r5, r1
    c016:	e706      	b.n	be26 <__aeabi_fsub+0x36>
    c018:	2201      	movs	r2, #1
    c01a:	e76d      	b.n	bef8 <__aeabi_fsub+0x108>
    c01c:	2c00      	cmp	r4, #0
    c01e:	d11f      	bne.n	c060 <__aeabi_fsub+0x270>
    c020:	2b00      	cmp	r3, #0
    c022:	d059      	beq.n	c0d8 <__aeabi_fsub+0x2e8>
    c024:	43c0      	mvns	r0, r0
    c026:	2800      	cmp	r0, #0
    c028:	d00b      	beq.n	c042 <__aeabi_fsub+0x252>
    c02a:	2eff      	cmp	r6, #255	; 0xff
    c02c:	d04f      	beq.n	c0ce <__aeabi_fsub+0x2de>
    c02e:	281b      	cmp	r0, #27
    c030:	dc5e      	bgt.n	c0f0 <__aeabi_fsub+0x300>
    c032:	001d      	movs	r5, r3
    c034:	2420      	movs	r4, #32
    c036:	40c5      	lsrs	r5, r0
    c038:	1a20      	subs	r0, r4, r0
    c03a:	4083      	lsls	r3, r0
    c03c:	1e58      	subs	r0, r3, #1
    c03e:	4183      	sbcs	r3, r0
    c040:	432b      	orrs	r3, r5
    c042:	189b      	adds	r3, r3, r2
    c044:	0034      	movs	r4, r6
    c046:	e758      	b.n	befa <__aeabi_fsub+0x10a>
    c048:	2b00      	cmp	r3, #0
    c04a:	d11c      	bne.n	c086 <__aeabi_fsub+0x296>
    c04c:	2a00      	cmp	r2, #0
    c04e:	d049      	beq.n	c0e4 <__aeabi_fsub+0x2f4>
    c050:	0013      	movs	r3, r2
    c052:	000d      	movs	r5, r1
    c054:	24ff      	movs	r4, #255	; 0xff
    c056:	e6e6      	b.n	be26 <__aeabi_fsub+0x36>
    c058:	0013      	movs	r3, r2
    c05a:	0034      	movs	r4, r6
    c05c:	000d      	movs	r5, r1
    c05e:	e6e2      	b.n	be26 <__aeabi_fsub+0x36>
    c060:	2eff      	cmp	r6, #255	; 0xff
    c062:	d034      	beq.n	c0ce <__aeabi_fsub+0x2de>
    c064:	2480      	movs	r4, #128	; 0x80
    c066:	04e4      	lsls	r4, r4, #19
    c068:	4240      	negs	r0, r0
    c06a:	4323      	orrs	r3, r4
    c06c:	e7df      	b.n	c02e <__aeabi_fsub+0x23e>
    c06e:	2a00      	cmp	r2, #0
    c070:	d100      	bne.n	c074 <__aeabi_fsub+0x284>
    c072:	e6d8      	b.n	be26 <__aeabi_fsub+0x36>
    c074:	2780      	movs	r7, #128	; 0x80
    c076:	1a98      	subs	r0, r3, r2
    c078:	04ff      	lsls	r7, r7, #19
    c07a:	4007      	ands	r7, r0
    c07c:	d100      	bne.n	c080 <__aeabi_fsub+0x290>
    c07e:	e74d      	b.n	bf1c <__aeabi_fsub+0x12c>
    c080:	1ad3      	subs	r3, r2, r3
    c082:	000d      	movs	r5, r1
    c084:	e6cf      	b.n	be26 <__aeabi_fsub+0x36>
    c086:	24ff      	movs	r4, #255	; 0xff
    c088:	2a00      	cmp	r2, #0
    c08a:	d100      	bne.n	c08e <__aeabi_fsub+0x29e>
    c08c:	e6cb      	b.n	be26 <__aeabi_fsub+0x36>
    c08e:	2080      	movs	r0, #128	; 0x80
    c090:	08db      	lsrs	r3, r3, #3
    c092:	03c0      	lsls	r0, r0, #15
    c094:	4203      	tst	r3, r0
    c096:	d004      	beq.n	c0a2 <__aeabi_fsub+0x2b2>
    c098:	08d2      	lsrs	r2, r2, #3
    c09a:	4202      	tst	r2, r0
    c09c:	d101      	bne.n	c0a2 <__aeabi_fsub+0x2b2>
    c09e:	0013      	movs	r3, r2
    c0a0:	000d      	movs	r5, r1
    c0a2:	00db      	lsls	r3, r3, #3
    c0a4:	24ff      	movs	r4, #255	; 0xff
    c0a6:	e6be      	b.n	be26 <__aeabi_fsub+0x36>
    c0a8:	2b00      	cmp	r3, #0
    c0aa:	d010      	beq.n	c0ce <__aeabi_fsub+0x2de>
    c0ac:	24ff      	movs	r4, #255	; 0xff
    c0ae:	2a00      	cmp	r2, #0
    c0b0:	d100      	bne.n	c0b4 <__aeabi_fsub+0x2c4>
    c0b2:	e6b8      	b.n	be26 <__aeabi_fsub+0x36>
    c0b4:	2080      	movs	r0, #128	; 0x80
    c0b6:	08db      	lsrs	r3, r3, #3
    c0b8:	03c0      	lsls	r0, r0, #15
    c0ba:	4203      	tst	r3, r0
    c0bc:	d003      	beq.n	c0c6 <__aeabi_fsub+0x2d6>
    c0be:	08d2      	lsrs	r2, r2, #3
    c0c0:	4202      	tst	r2, r0
    c0c2:	d100      	bne.n	c0c6 <__aeabi_fsub+0x2d6>
    c0c4:	0013      	movs	r3, r2
    c0c6:	00db      	lsls	r3, r3, #3
    c0c8:	000d      	movs	r5, r1
    c0ca:	24ff      	movs	r4, #255	; 0xff
    c0cc:	e6ab      	b.n	be26 <__aeabi_fsub+0x36>
    c0ce:	0013      	movs	r3, r2
    c0d0:	24ff      	movs	r4, #255	; 0xff
    c0d2:	e6a8      	b.n	be26 <__aeabi_fsub+0x36>
    c0d4:	2301      	movs	r3, #1
    c0d6:	e76e      	b.n	bfb6 <__aeabi_fsub+0x1c6>
    c0d8:	0013      	movs	r3, r2
    c0da:	0034      	movs	r4, r6
    c0dc:	e6a3      	b.n	be26 <__aeabi_fsub+0x36>
    c0de:	2700      	movs	r7, #0
    c0e0:	2500      	movs	r5, #0
    c0e2:	e71e      	b.n	bf22 <__aeabi_fsub+0x132>
    c0e4:	2780      	movs	r7, #128	; 0x80
    c0e6:	2500      	movs	r5, #0
    c0e8:	03ff      	lsls	r7, r7, #15
    c0ea:	e6e9      	b.n	bec0 <__aeabi_fsub+0xd0>
    c0ec:	0013      	movs	r3, r2
    c0ee:	e69a      	b.n	be26 <__aeabi_fsub+0x36>
    c0f0:	2301      	movs	r3, #1
    c0f2:	e7a6      	b.n	c042 <__aeabi_fsub+0x252>
    c0f4:	7dffffff 	.word	0x7dffffff
    c0f8:	fbffffff 	.word	0xfbffffff

0000c0fc <__aeabi_f2iz>:
    c0fc:	0243      	lsls	r3, r0, #9
    c0fe:	0a59      	lsrs	r1, r3, #9
    c100:	0043      	lsls	r3, r0, #1
    c102:	0fc2      	lsrs	r2, r0, #31
    c104:	0e1b      	lsrs	r3, r3, #24
    c106:	2000      	movs	r0, #0
    c108:	2b7e      	cmp	r3, #126	; 0x7e
    c10a:	dd0e      	ble.n	c12a <__aeabi_f2iz+0x2e>
    c10c:	2b9d      	cmp	r3, #157	; 0x9d
    c10e:	dc0d      	bgt.n	c12c <__aeabi_f2iz+0x30>
    c110:	2080      	movs	r0, #128	; 0x80
    c112:	0400      	lsls	r0, r0, #16
    c114:	4301      	orrs	r1, r0
    c116:	2b95      	cmp	r3, #149	; 0x95
    c118:	dc0b      	bgt.n	c132 <__aeabi_f2iz+0x36>
    c11a:	2096      	movs	r0, #150	; 0x96
    c11c:	1ac3      	subs	r3, r0, r3
    c11e:	40d9      	lsrs	r1, r3
    c120:	000b      	movs	r3, r1
    c122:	4258      	negs	r0, r3
    c124:	2a00      	cmp	r2, #0
    c126:	d100      	bne.n	c12a <__aeabi_f2iz+0x2e>
    c128:	0018      	movs	r0, r3
    c12a:	4770      	bx	lr
    c12c:	4b03      	ldr	r3, [pc, #12]	; (c13c <__aeabi_f2iz+0x40>)
    c12e:	18d0      	adds	r0, r2, r3
    c130:	e7fb      	b.n	c12a <__aeabi_f2iz+0x2e>
    c132:	3b96      	subs	r3, #150	; 0x96
    c134:	4099      	lsls	r1, r3
    c136:	000b      	movs	r3, r1
    c138:	e7f3      	b.n	c122 <__aeabi_f2iz+0x26>
    c13a:	46c0      	nop			; (mov r8, r8)
    c13c:	7fffffff 	.word	0x7fffffff

0000c140 <__aeabi_ui2f>:
    c140:	b570      	push	{r4, r5, r6, lr}
    c142:	1e04      	subs	r4, r0, #0
    c144:	d028      	beq.n	c198 <__aeabi_ui2f+0x58>
    c146:	f7ff fa91 	bl	b66c <__clzsi2>
    c14a:	239e      	movs	r3, #158	; 0x9e
    c14c:	1a1b      	subs	r3, r3, r0
    c14e:	2b96      	cmp	r3, #150	; 0x96
    c150:	dc0a      	bgt.n	c168 <__aeabi_ui2f+0x28>
    c152:	2296      	movs	r2, #150	; 0x96
    c154:	1ad2      	subs	r2, r2, r3
    c156:	4094      	lsls	r4, r2
    c158:	0262      	lsls	r2, r4, #9
    c15a:	0a52      	lsrs	r2, r2, #9
    c15c:	b2d8      	uxtb	r0, r3
    c15e:	0252      	lsls	r2, r2, #9
    c160:	0a52      	lsrs	r2, r2, #9
    c162:	05c0      	lsls	r0, r0, #23
    c164:	4310      	orrs	r0, r2
    c166:	bd70      	pop	{r4, r5, r6, pc}
    c168:	2b99      	cmp	r3, #153	; 0x99
    c16a:	dc18      	bgt.n	c19e <__aeabi_ui2f+0x5e>
    c16c:	2299      	movs	r2, #153	; 0x99
    c16e:	1ad2      	subs	r2, r2, r3
    c170:	4094      	lsls	r4, r2
    c172:	4a11      	ldr	r2, [pc, #68]	; (c1b8 <__aeabi_ui2f+0x78>)
    c174:	4022      	ands	r2, r4
    c176:	0761      	lsls	r1, r4, #29
    c178:	d004      	beq.n	c184 <__aeabi_ui2f+0x44>
    c17a:	210f      	movs	r1, #15
    c17c:	400c      	ands	r4, r1
    c17e:	2c04      	cmp	r4, #4
    c180:	d000      	beq.n	c184 <__aeabi_ui2f+0x44>
    c182:	3204      	adds	r2, #4
    c184:	0151      	lsls	r1, r2, #5
    c186:	d503      	bpl.n	c190 <__aeabi_ui2f+0x50>
    c188:	4b0b      	ldr	r3, [pc, #44]	; (c1b8 <__aeabi_ui2f+0x78>)
    c18a:	401a      	ands	r2, r3
    c18c:	239f      	movs	r3, #159	; 0x9f
    c18e:	1a1b      	subs	r3, r3, r0
    c190:	0192      	lsls	r2, r2, #6
    c192:	0a52      	lsrs	r2, r2, #9
    c194:	b2d8      	uxtb	r0, r3
    c196:	e7e2      	b.n	c15e <__aeabi_ui2f+0x1e>
    c198:	2000      	movs	r0, #0
    c19a:	2200      	movs	r2, #0
    c19c:	e7df      	b.n	c15e <__aeabi_ui2f+0x1e>
    c19e:	2205      	movs	r2, #5
    c1a0:	0025      	movs	r5, r4
    c1a2:	1a12      	subs	r2, r2, r0
    c1a4:	21b9      	movs	r1, #185	; 0xb9
    c1a6:	40d5      	lsrs	r5, r2
    c1a8:	0022      	movs	r2, r4
    c1aa:	1ac9      	subs	r1, r1, r3
    c1ac:	408a      	lsls	r2, r1
    c1ae:	1e54      	subs	r4, r2, #1
    c1b0:	41a2      	sbcs	r2, r4
    c1b2:	002c      	movs	r4, r5
    c1b4:	4314      	orrs	r4, r2
    c1b6:	e7dc      	b.n	c172 <__aeabi_ui2f+0x32>
    c1b8:	fbffffff 	.word	0xfbffffff

0000c1bc <__libc_init_array>:
    c1bc:	4b0e      	ldr	r3, [pc, #56]	; (c1f8 <__libc_init_array+0x3c>)
    c1be:	b570      	push	{r4, r5, r6, lr}
    c1c0:	2500      	movs	r5, #0
    c1c2:	001e      	movs	r6, r3
    c1c4:	4c0d      	ldr	r4, [pc, #52]	; (c1fc <__libc_init_array+0x40>)
    c1c6:	1ae4      	subs	r4, r4, r3
    c1c8:	10a4      	asrs	r4, r4, #2
    c1ca:	42a5      	cmp	r5, r4
    c1cc:	d004      	beq.n	c1d8 <__libc_init_array+0x1c>
    c1ce:	00ab      	lsls	r3, r5, #2
    c1d0:	58f3      	ldr	r3, [r6, r3]
    c1d2:	4798      	blx	r3
    c1d4:	3501      	adds	r5, #1
    c1d6:	e7f8      	b.n	c1ca <__libc_init_array+0xe>
    c1d8:	f000 fd60 	bl	cc9c <_init>
    c1dc:	4b08      	ldr	r3, [pc, #32]	; (c200 <__libc_init_array+0x44>)
    c1de:	2500      	movs	r5, #0
    c1e0:	001e      	movs	r6, r3
    c1e2:	4c08      	ldr	r4, [pc, #32]	; (c204 <__libc_init_array+0x48>)
    c1e4:	1ae4      	subs	r4, r4, r3
    c1e6:	10a4      	asrs	r4, r4, #2
    c1e8:	42a5      	cmp	r5, r4
    c1ea:	d004      	beq.n	c1f6 <__libc_init_array+0x3a>
    c1ec:	00ab      	lsls	r3, r5, #2
    c1ee:	58f3      	ldr	r3, [r6, r3]
    c1f0:	4798      	blx	r3
    c1f2:	3501      	adds	r5, #1
    c1f4:	e7f8      	b.n	c1e8 <__libc_init_array+0x2c>
    c1f6:	bd70      	pop	{r4, r5, r6, pc}
    c1f8:	0000cca8 	.word	0x0000cca8
    c1fc:	0000cca8 	.word	0x0000cca8
    c200:	0000cca8 	.word	0x0000cca8
    c204:	0000ccac 	.word	0x0000ccac

0000c208 <memcpy>:
    c208:	2300      	movs	r3, #0
    c20a:	b510      	push	{r4, lr}
    c20c:	429a      	cmp	r2, r3
    c20e:	d003      	beq.n	c218 <memcpy+0x10>
    c210:	5ccc      	ldrb	r4, [r1, r3]
    c212:	54c4      	strb	r4, [r0, r3]
    c214:	3301      	adds	r3, #1
    c216:	e7f9      	b.n	c20c <memcpy+0x4>
    c218:	bd10      	pop	{r4, pc}

0000c21a <memset>:
    c21a:	0003      	movs	r3, r0
    c21c:	1882      	adds	r2, r0, r2
    c21e:	4293      	cmp	r3, r2
    c220:	d002      	beq.n	c228 <memset+0xe>
    c222:	7019      	strb	r1, [r3, #0]
    c224:	3301      	adds	r3, #1
    c226:	e7fa      	b.n	c21e <memset+0x4>
    c228:	4770      	bx	lr
	...

0000c22c <srand>:
    c22c:	4b10      	ldr	r3, [pc, #64]	; (c270 <srand+0x44>)
    c22e:	b570      	push	{r4, r5, r6, lr}
    c230:	681c      	ldr	r4, [r3, #0]
    c232:	0005      	movs	r5, r0
    c234:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c236:	2b00      	cmp	r3, #0
    c238:	d115      	bne.n	c266 <srand+0x3a>
    c23a:	2018      	movs	r0, #24
    c23c:	f000 fac8 	bl	c7d0 <malloc>
    c240:	4b0c      	ldr	r3, [pc, #48]	; (c274 <srand+0x48>)
    c242:	63a0      	str	r0, [r4, #56]	; 0x38
    c244:	8003      	strh	r3, [r0, #0]
    c246:	4b0c      	ldr	r3, [pc, #48]	; (c278 <srand+0x4c>)
    c248:	2201      	movs	r2, #1
    c24a:	8043      	strh	r3, [r0, #2]
    c24c:	4b0b      	ldr	r3, [pc, #44]	; (c27c <srand+0x50>)
    c24e:	8083      	strh	r3, [r0, #4]
    c250:	4b0b      	ldr	r3, [pc, #44]	; (c280 <srand+0x54>)
    c252:	80c3      	strh	r3, [r0, #6]
    c254:	4b0b      	ldr	r3, [pc, #44]	; (c284 <srand+0x58>)
    c256:	8103      	strh	r3, [r0, #8]
    c258:	2305      	movs	r3, #5
    c25a:	8143      	strh	r3, [r0, #10]
    c25c:	3306      	adds	r3, #6
    c25e:	8183      	strh	r3, [r0, #12]
    c260:	2300      	movs	r3, #0
    c262:	6102      	str	r2, [r0, #16]
    c264:	6143      	str	r3, [r0, #20]
    c266:	2200      	movs	r2, #0
    c268:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c26a:	611d      	str	r5, [r3, #16]
    c26c:	615a      	str	r2, [r3, #20]
    c26e:	bd70      	pop	{r4, r5, r6, pc}
    c270:	20000074 	.word	0x20000074
    c274:	0000330e 	.word	0x0000330e
    c278:	ffffabcd 	.word	0xffffabcd
    c27c:	00001234 	.word	0x00001234
    c280:	ffffe66d 	.word	0xffffe66d
    c284:	ffffdeec 	.word	0xffffdeec

0000c288 <rand>:
    c288:	4b15      	ldr	r3, [pc, #84]	; (c2e0 <rand+0x58>)
    c28a:	b510      	push	{r4, lr}
    c28c:	681c      	ldr	r4, [r3, #0]
    c28e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c290:	2b00      	cmp	r3, #0
    c292:	d115      	bne.n	c2c0 <rand+0x38>
    c294:	2018      	movs	r0, #24
    c296:	f000 fa9b 	bl	c7d0 <malloc>
    c29a:	4b12      	ldr	r3, [pc, #72]	; (c2e4 <rand+0x5c>)
    c29c:	63a0      	str	r0, [r4, #56]	; 0x38
    c29e:	8003      	strh	r3, [r0, #0]
    c2a0:	4b11      	ldr	r3, [pc, #68]	; (c2e8 <rand+0x60>)
    c2a2:	2201      	movs	r2, #1
    c2a4:	8043      	strh	r3, [r0, #2]
    c2a6:	4b11      	ldr	r3, [pc, #68]	; (c2ec <rand+0x64>)
    c2a8:	8083      	strh	r3, [r0, #4]
    c2aa:	4b11      	ldr	r3, [pc, #68]	; (c2f0 <rand+0x68>)
    c2ac:	80c3      	strh	r3, [r0, #6]
    c2ae:	4b11      	ldr	r3, [pc, #68]	; (c2f4 <rand+0x6c>)
    c2b0:	8103      	strh	r3, [r0, #8]
    c2b2:	2305      	movs	r3, #5
    c2b4:	8143      	strh	r3, [r0, #10]
    c2b6:	3306      	adds	r3, #6
    c2b8:	8183      	strh	r3, [r0, #12]
    c2ba:	2300      	movs	r3, #0
    c2bc:	6102      	str	r2, [r0, #16]
    c2be:	6143      	str	r3, [r0, #20]
    c2c0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    c2c2:	4a0d      	ldr	r2, [pc, #52]	; (c2f8 <rand+0x70>)
    c2c4:	6920      	ldr	r0, [r4, #16]
    c2c6:	6961      	ldr	r1, [r4, #20]
    c2c8:	4b0c      	ldr	r3, [pc, #48]	; (c2fc <rand+0x74>)
    c2ca:	f7ff fa0d 	bl	b6e8 <__aeabi_lmul>
    c2ce:	2201      	movs	r2, #1
    c2d0:	2300      	movs	r3, #0
    c2d2:	1880      	adds	r0, r0, r2
    c2d4:	4159      	adcs	r1, r3
    c2d6:	6120      	str	r0, [r4, #16]
    c2d8:	6161      	str	r1, [r4, #20]
    c2da:	0048      	lsls	r0, r1, #1
    c2dc:	0840      	lsrs	r0, r0, #1
    c2de:	bd10      	pop	{r4, pc}
    c2e0:	20000074 	.word	0x20000074
    c2e4:	0000330e 	.word	0x0000330e
    c2e8:	ffffabcd 	.word	0xffffabcd
    c2ec:	00001234 	.word	0x00001234
    c2f0:	ffffe66d 	.word	0xffffe66d
    c2f4:	ffffdeec 	.word	0xffffdeec
    c2f8:	4c957f2d 	.word	0x4c957f2d
    c2fc:	5851f42d 	.word	0x5851f42d

0000c300 <setbuf>:
    c300:	424a      	negs	r2, r1
    c302:	414a      	adcs	r2, r1
    c304:	2380      	movs	r3, #128	; 0x80
    c306:	b510      	push	{r4, lr}
    c308:	0052      	lsls	r2, r2, #1
    c30a:	00db      	lsls	r3, r3, #3
    c30c:	f000 f802 	bl	c314 <setvbuf>
    c310:	bd10      	pop	{r4, pc}
	...

0000c314 <setvbuf>:
    c314:	b5f0      	push	{r4, r5, r6, r7, lr}
    c316:	001d      	movs	r5, r3
    c318:	4b51      	ldr	r3, [pc, #324]	; (c460 <setvbuf+0x14c>)
    c31a:	b085      	sub	sp, #20
    c31c:	681e      	ldr	r6, [r3, #0]
    c31e:	0004      	movs	r4, r0
    c320:	000f      	movs	r7, r1
    c322:	9200      	str	r2, [sp, #0]
    c324:	2e00      	cmp	r6, #0
    c326:	d005      	beq.n	c334 <setvbuf+0x20>
    c328:	69b3      	ldr	r3, [r6, #24]
    c32a:	2b00      	cmp	r3, #0
    c32c:	d102      	bne.n	c334 <setvbuf+0x20>
    c32e:	0030      	movs	r0, r6
    c330:	f000 f994 	bl	c65c <__sinit>
    c334:	4b4b      	ldr	r3, [pc, #300]	; (c464 <setvbuf+0x150>)
    c336:	429c      	cmp	r4, r3
    c338:	d101      	bne.n	c33e <setvbuf+0x2a>
    c33a:	6874      	ldr	r4, [r6, #4]
    c33c:	e008      	b.n	c350 <setvbuf+0x3c>
    c33e:	4b4a      	ldr	r3, [pc, #296]	; (c468 <setvbuf+0x154>)
    c340:	429c      	cmp	r4, r3
    c342:	d101      	bne.n	c348 <setvbuf+0x34>
    c344:	68b4      	ldr	r4, [r6, #8]
    c346:	e003      	b.n	c350 <setvbuf+0x3c>
    c348:	4b48      	ldr	r3, [pc, #288]	; (c46c <setvbuf+0x158>)
    c34a:	429c      	cmp	r4, r3
    c34c:	d100      	bne.n	c350 <setvbuf+0x3c>
    c34e:	68f4      	ldr	r4, [r6, #12]
    c350:	9b00      	ldr	r3, [sp, #0]
    c352:	2b02      	cmp	r3, #2
    c354:	d005      	beq.n	c362 <setvbuf+0x4e>
    c356:	2b01      	cmp	r3, #1
    c358:	d900      	bls.n	c35c <setvbuf+0x48>
    c35a:	e07c      	b.n	c456 <setvbuf+0x142>
    c35c:	2d00      	cmp	r5, #0
    c35e:	da00      	bge.n	c362 <setvbuf+0x4e>
    c360:	e079      	b.n	c456 <setvbuf+0x142>
    c362:	0021      	movs	r1, r4
    c364:	0030      	movs	r0, r6
    c366:	f000 f90b 	bl	c580 <_fflush_r>
    c36a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c36c:	2900      	cmp	r1, #0
    c36e:	d008      	beq.n	c382 <setvbuf+0x6e>
    c370:	0023      	movs	r3, r4
    c372:	3344      	adds	r3, #68	; 0x44
    c374:	4299      	cmp	r1, r3
    c376:	d002      	beq.n	c37e <setvbuf+0x6a>
    c378:	0030      	movs	r0, r6
    c37a:	f000 fa33 	bl	c7e4 <_free_r>
    c37e:	2300      	movs	r3, #0
    c380:	6363      	str	r3, [r4, #52]	; 0x34
    c382:	2300      	movs	r3, #0
    c384:	61a3      	str	r3, [r4, #24]
    c386:	6063      	str	r3, [r4, #4]
    c388:	89a3      	ldrh	r3, [r4, #12]
    c38a:	061b      	lsls	r3, r3, #24
    c38c:	d503      	bpl.n	c396 <setvbuf+0x82>
    c38e:	6921      	ldr	r1, [r4, #16]
    c390:	0030      	movs	r0, r6
    c392:	f000 fa27 	bl	c7e4 <_free_r>
    c396:	89a2      	ldrh	r2, [r4, #12]
    c398:	4b35      	ldr	r3, [pc, #212]	; (c470 <setvbuf+0x15c>)
    c39a:	4013      	ands	r3, r2
    c39c:	81a3      	strh	r3, [r4, #12]
    c39e:	9b00      	ldr	r3, [sp, #0]
    c3a0:	2b02      	cmp	r3, #2
    c3a2:	d021      	beq.n	c3e8 <setvbuf+0xd4>
    c3a4:	ab03      	add	r3, sp, #12
    c3a6:	aa02      	add	r2, sp, #8
    c3a8:	0021      	movs	r1, r4
    c3aa:	0030      	movs	r0, r6
    c3ac:	f000 f9ea 	bl	c784 <__swhatbuf_r>
    c3b0:	89a3      	ldrh	r3, [r4, #12]
    c3b2:	4318      	orrs	r0, r3
    c3b4:	81a0      	strh	r0, [r4, #12]
    c3b6:	2d00      	cmp	r5, #0
    c3b8:	d101      	bne.n	c3be <setvbuf+0xaa>
    c3ba:	9d02      	ldr	r5, [sp, #8]
    c3bc:	e001      	b.n	c3c2 <setvbuf+0xae>
    c3be:	2f00      	cmp	r7, #0
    c3c0:	d125      	bne.n	c40e <setvbuf+0xfa>
    c3c2:	0028      	movs	r0, r5
    c3c4:	f000 fa04 	bl	c7d0 <malloc>
    c3c8:	9501      	str	r5, [sp, #4]
    c3ca:	1e07      	subs	r7, r0, #0
    c3cc:	d11a      	bne.n	c404 <setvbuf+0xf0>
    c3ce:	9b02      	ldr	r3, [sp, #8]
    c3d0:	9301      	str	r3, [sp, #4]
    c3d2:	42ab      	cmp	r3, r5
    c3d4:	d102      	bne.n	c3dc <setvbuf+0xc8>
    c3d6:	2001      	movs	r0, #1
    c3d8:	4240      	negs	r0, r0
    c3da:	e006      	b.n	c3ea <setvbuf+0xd6>
    c3dc:	9801      	ldr	r0, [sp, #4]
    c3de:	f000 f9f7 	bl	c7d0 <malloc>
    c3e2:	1e07      	subs	r7, r0, #0
    c3e4:	d10e      	bne.n	c404 <setvbuf+0xf0>
    c3e6:	e7f6      	b.n	c3d6 <setvbuf+0xc2>
    c3e8:	2000      	movs	r0, #0
    c3ea:	2202      	movs	r2, #2
    c3ec:	89a3      	ldrh	r3, [r4, #12]
    c3ee:	4313      	orrs	r3, r2
    c3f0:	81a3      	strh	r3, [r4, #12]
    c3f2:	2300      	movs	r3, #0
    c3f4:	60a3      	str	r3, [r4, #8]
    c3f6:	0023      	movs	r3, r4
    c3f8:	3347      	adds	r3, #71	; 0x47
    c3fa:	6023      	str	r3, [r4, #0]
    c3fc:	6123      	str	r3, [r4, #16]
    c3fe:	2301      	movs	r3, #1
    c400:	6163      	str	r3, [r4, #20]
    c402:	e02a      	b.n	c45a <setvbuf+0x146>
    c404:	2280      	movs	r2, #128	; 0x80
    c406:	89a3      	ldrh	r3, [r4, #12]
    c408:	9d01      	ldr	r5, [sp, #4]
    c40a:	4313      	orrs	r3, r2
    c40c:	81a3      	strh	r3, [r4, #12]
    c40e:	69b3      	ldr	r3, [r6, #24]
    c410:	2b00      	cmp	r3, #0
    c412:	d102      	bne.n	c41a <setvbuf+0x106>
    c414:	0030      	movs	r0, r6
    c416:	f000 f921 	bl	c65c <__sinit>
    c41a:	9b00      	ldr	r3, [sp, #0]
    c41c:	2b01      	cmp	r3, #1
    c41e:	d103      	bne.n	c428 <setvbuf+0x114>
    c420:	89a3      	ldrh	r3, [r4, #12]
    c422:	9a00      	ldr	r2, [sp, #0]
    c424:	431a      	orrs	r2, r3
    c426:	81a2      	strh	r2, [r4, #12]
    c428:	2308      	movs	r3, #8
    c42a:	89a2      	ldrh	r2, [r4, #12]
    c42c:	6027      	str	r7, [r4, #0]
    c42e:	4013      	ands	r3, r2
    c430:	6127      	str	r7, [r4, #16]
    c432:	6165      	str	r5, [r4, #20]
    c434:	1e18      	subs	r0, r3, #0
    c436:	d00c      	beq.n	c452 <setvbuf+0x13e>
    c438:	2301      	movs	r3, #1
    c43a:	401a      	ands	r2, r3
    c43c:	2300      	movs	r3, #0
    c43e:	1e10      	subs	r0, r2, #0
    c440:	4298      	cmp	r0, r3
    c442:	d004      	beq.n	c44e <setvbuf+0x13a>
    c444:	426d      	negs	r5, r5
    c446:	60a3      	str	r3, [r4, #8]
    c448:	61a5      	str	r5, [r4, #24]
    c44a:	0018      	movs	r0, r3
    c44c:	e005      	b.n	c45a <setvbuf+0x146>
    c44e:	60a5      	str	r5, [r4, #8]
    c450:	e003      	b.n	c45a <setvbuf+0x146>
    c452:	60a3      	str	r3, [r4, #8]
    c454:	e001      	b.n	c45a <setvbuf+0x146>
    c456:	2001      	movs	r0, #1
    c458:	4240      	negs	r0, r0
    c45a:	b005      	add	sp, #20
    c45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c45e:	46c0      	nop			; (mov r8, r8)
    c460:	20000074 	.word	0x20000074
    c464:	0000cc3c 	.word	0x0000cc3c
    c468:	0000cc5c 	.word	0x0000cc5c
    c46c:	0000cc7c 	.word	0x0000cc7c
    c470:	fffff35c 	.word	0xfffff35c

0000c474 <__sflush_r>:
    c474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c476:	898a      	ldrh	r2, [r1, #12]
    c478:	0005      	movs	r5, r0
    c47a:	000c      	movs	r4, r1
    c47c:	0713      	lsls	r3, r2, #28
    c47e:	d45a      	bmi.n	c536 <__sflush_r+0xc2>
    c480:	684b      	ldr	r3, [r1, #4]
    c482:	2b00      	cmp	r3, #0
    c484:	dc02      	bgt.n	c48c <__sflush_r+0x18>
    c486:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c488:	2b00      	cmp	r3, #0
    c48a:	dd19      	ble.n	c4c0 <__sflush_r+0x4c>
    c48c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c48e:	2f00      	cmp	r7, #0
    c490:	d016      	beq.n	c4c0 <__sflush_r+0x4c>
    c492:	2300      	movs	r3, #0
    c494:	682e      	ldr	r6, [r5, #0]
    c496:	602b      	str	r3, [r5, #0]
    c498:	2380      	movs	r3, #128	; 0x80
    c49a:	015b      	lsls	r3, r3, #5
    c49c:	401a      	ands	r2, r3
    c49e:	d001      	beq.n	c4a4 <__sflush_r+0x30>
    c4a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c4a2:	e014      	b.n	c4ce <__sflush_r+0x5a>
    c4a4:	2301      	movs	r3, #1
    c4a6:	6a21      	ldr	r1, [r4, #32]
    c4a8:	0028      	movs	r0, r5
    c4aa:	47b8      	blx	r7
    c4ac:	1c43      	adds	r3, r0, #1
    c4ae:	d10e      	bne.n	c4ce <__sflush_r+0x5a>
    c4b0:	682b      	ldr	r3, [r5, #0]
    c4b2:	2b00      	cmp	r3, #0
    c4b4:	d00b      	beq.n	c4ce <__sflush_r+0x5a>
    c4b6:	2b1d      	cmp	r3, #29
    c4b8:	d001      	beq.n	c4be <__sflush_r+0x4a>
    c4ba:	2b16      	cmp	r3, #22
    c4bc:	d102      	bne.n	c4c4 <__sflush_r+0x50>
    c4be:	602e      	str	r6, [r5, #0]
    c4c0:	2000      	movs	r0, #0
    c4c2:	e05a      	b.n	c57a <__sflush_r+0x106>
    c4c4:	2240      	movs	r2, #64	; 0x40
    c4c6:	89a3      	ldrh	r3, [r4, #12]
    c4c8:	4313      	orrs	r3, r2
    c4ca:	81a3      	strh	r3, [r4, #12]
    c4cc:	e055      	b.n	c57a <__sflush_r+0x106>
    c4ce:	89a3      	ldrh	r3, [r4, #12]
    c4d0:	075b      	lsls	r3, r3, #29
    c4d2:	d506      	bpl.n	c4e2 <__sflush_r+0x6e>
    c4d4:	6863      	ldr	r3, [r4, #4]
    c4d6:	1ac0      	subs	r0, r0, r3
    c4d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c4da:	2b00      	cmp	r3, #0
    c4dc:	d001      	beq.n	c4e2 <__sflush_r+0x6e>
    c4de:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c4e0:	1ac0      	subs	r0, r0, r3
    c4e2:	2300      	movs	r3, #0
    c4e4:	0002      	movs	r2, r0
    c4e6:	6a21      	ldr	r1, [r4, #32]
    c4e8:	0028      	movs	r0, r5
    c4ea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c4ec:	47b8      	blx	r7
    c4ee:	89a3      	ldrh	r3, [r4, #12]
    c4f0:	1c42      	adds	r2, r0, #1
    c4f2:	d106      	bne.n	c502 <__sflush_r+0x8e>
    c4f4:	6829      	ldr	r1, [r5, #0]
    c4f6:	291d      	cmp	r1, #29
    c4f8:	d83a      	bhi.n	c570 <__sflush_r+0xfc>
    c4fa:	4a20      	ldr	r2, [pc, #128]	; (c57c <__sflush_r+0x108>)
    c4fc:	40ca      	lsrs	r2, r1
    c4fe:	07d2      	lsls	r2, r2, #31
    c500:	d536      	bpl.n	c570 <__sflush_r+0xfc>
    c502:	2200      	movs	r2, #0
    c504:	6062      	str	r2, [r4, #4]
    c506:	6922      	ldr	r2, [r4, #16]
    c508:	6022      	str	r2, [r4, #0]
    c50a:	04db      	lsls	r3, r3, #19
    c50c:	d505      	bpl.n	c51a <__sflush_r+0xa6>
    c50e:	1c43      	adds	r3, r0, #1
    c510:	d102      	bne.n	c518 <__sflush_r+0xa4>
    c512:	682b      	ldr	r3, [r5, #0]
    c514:	2b00      	cmp	r3, #0
    c516:	d100      	bne.n	c51a <__sflush_r+0xa6>
    c518:	6560      	str	r0, [r4, #84]	; 0x54
    c51a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c51c:	602e      	str	r6, [r5, #0]
    c51e:	2900      	cmp	r1, #0
    c520:	d0ce      	beq.n	c4c0 <__sflush_r+0x4c>
    c522:	0023      	movs	r3, r4
    c524:	3344      	adds	r3, #68	; 0x44
    c526:	4299      	cmp	r1, r3
    c528:	d002      	beq.n	c530 <__sflush_r+0xbc>
    c52a:	0028      	movs	r0, r5
    c52c:	f000 f95a 	bl	c7e4 <_free_r>
    c530:	2000      	movs	r0, #0
    c532:	6360      	str	r0, [r4, #52]	; 0x34
    c534:	e021      	b.n	c57a <__sflush_r+0x106>
    c536:	690f      	ldr	r7, [r1, #16]
    c538:	2f00      	cmp	r7, #0
    c53a:	d0c1      	beq.n	c4c0 <__sflush_r+0x4c>
    c53c:	680b      	ldr	r3, [r1, #0]
    c53e:	600f      	str	r7, [r1, #0]
    c540:	1bdb      	subs	r3, r3, r7
    c542:	9301      	str	r3, [sp, #4]
    c544:	2300      	movs	r3, #0
    c546:	0792      	lsls	r2, r2, #30
    c548:	d100      	bne.n	c54c <__sflush_r+0xd8>
    c54a:	694b      	ldr	r3, [r1, #20]
    c54c:	60a3      	str	r3, [r4, #8]
    c54e:	e003      	b.n	c558 <__sflush_r+0xe4>
    c550:	9b01      	ldr	r3, [sp, #4]
    c552:	183f      	adds	r7, r7, r0
    c554:	1a1b      	subs	r3, r3, r0
    c556:	9301      	str	r3, [sp, #4]
    c558:	9b01      	ldr	r3, [sp, #4]
    c55a:	2b00      	cmp	r3, #0
    c55c:	ddb0      	ble.n	c4c0 <__sflush_r+0x4c>
    c55e:	9b01      	ldr	r3, [sp, #4]
    c560:	003a      	movs	r2, r7
    c562:	6a21      	ldr	r1, [r4, #32]
    c564:	0028      	movs	r0, r5
    c566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c568:	47b0      	blx	r6
    c56a:	2800      	cmp	r0, #0
    c56c:	dcf0      	bgt.n	c550 <__sflush_r+0xdc>
    c56e:	89a3      	ldrh	r3, [r4, #12]
    c570:	2240      	movs	r2, #64	; 0x40
    c572:	2001      	movs	r0, #1
    c574:	4313      	orrs	r3, r2
    c576:	81a3      	strh	r3, [r4, #12]
    c578:	4240      	negs	r0, r0
    c57a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c57c:	20400001 	.word	0x20400001

0000c580 <_fflush_r>:
    c580:	690b      	ldr	r3, [r1, #16]
    c582:	b570      	push	{r4, r5, r6, lr}
    c584:	0005      	movs	r5, r0
    c586:	000c      	movs	r4, r1
    c588:	2b00      	cmp	r3, #0
    c58a:	d101      	bne.n	c590 <_fflush_r+0x10>
    c58c:	2000      	movs	r0, #0
    c58e:	e01c      	b.n	c5ca <_fflush_r+0x4a>
    c590:	2800      	cmp	r0, #0
    c592:	d004      	beq.n	c59e <_fflush_r+0x1e>
    c594:	6983      	ldr	r3, [r0, #24]
    c596:	2b00      	cmp	r3, #0
    c598:	d101      	bne.n	c59e <_fflush_r+0x1e>
    c59a:	f000 f85f 	bl	c65c <__sinit>
    c59e:	4b0b      	ldr	r3, [pc, #44]	; (c5cc <_fflush_r+0x4c>)
    c5a0:	429c      	cmp	r4, r3
    c5a2:	d101      	bne.n	c5a8 <_fflush_r+0x28>
    c5a4:	686c      	ldr	r4, [r5, #4]
    c5a6:	e008      	b.n	c5ba <_fflush_r+0x3a>
    c5a8:	4b09      	ldr	r3, [pc, #36]	; (c5d0 <_fflush_r+0x50>)
    c5aa:	429c      	cmp	r4, r3
    c5ac:	d101      	bne.n	c5b2 <_fflush_r+0x32>
    c5ae:	68ac      	ldr	r4, [r5, #8]
    c5b0:	e003      	b.n	c5ba <_fflush_r+0x3a>
    c5b2:	4b08      	ldr	r3, [pc, #32]	; (c5d4 <_fflush_r+0x54>)
    c5b4:	429c      	cmp	r4, r3
    c5b6:	d100      	bne.n	c5ba <_fflush_r+0x3a>
    c5b8:	68ec      	ldr	r4, [r5, #12]
    c5ba:	220c      	movs	r2, #12
    c5bc:	5ea3      	ldrsh	r3, [r4, r2]
    c5be:	2b00      	cmp	r3, #0
    c5c0:	d0e4      	beq.n	c58c <_fflush_r+0xc>
    c5c2:	0021      	movs	r1, r4
    c5c4:	0028      	movs	r0, r5
    c5c6:	f7ff ff55 	bl	c474 <__sflush_r>
    c5ca:	bd70      	pop	{r4, r5, r6, pc}
    c5cc:	0000cc3c 	.word	0x0000cc3c
    c5d0:	0000cc5c 	.word	0x0000cc5c
    c5d4:	0000cc7c 	.word	0x0000cc7c

0000c5d8 <_cleanup_r>:
    c5d8:	b510      	push	{r4, lr}
    c5da:	4902      	ldr	r1, [pc, #8]	; (c5e4 <_cleanup_r+0xc>)
    c5dc:	f000 f8b0 	bl	c740 <_fwalk_reent>
    c5e0:	bd10      	pop	{r4, pc}
    c5e2:	46c0      	nop			; (mov r8, r8)
    c5e4:	0000c581 	.word	0x0000c581

0000c5e8 <std.isra.0>:
    c5e8:	2300      	movs	r3, #0
    c5ea:	b510      	push	{r4, lr}
    c5ec:	0004      	movs	r4, r0
    c5ee:	6003      	str	r3, [r0, #0]
    c5f0:	6043      	str	r3, [r0, #4]
    c5f2:	6083      	str	r3, [r0, #8]
    c5f4:	8181      	strh	r1, [r0, #12]
    c5f6:	6643      	str	r3, [r0, #100]	; 0x64
    c5f8:	81c2      	strh	r2, [r0, #14]
    c5fa:	6103      	str	r3, [r0, #16]
    c5fc:	6143      	str	r3, [r0, #20]
    c5fe:	6183      	str	r3, [r0, #24]
    c600:	0019      	movs	r1, r3
    c602:	2208      	movs	r2, #8
    c604:	305c      	adds	r0, #92	; 0x5c
    c606:	f7ff fe08 	bl	c21a <memset>
    c60a:	4b05      	ldr	r3, [pc, #20]	; (c620 <std.isra.0+0x38>)
    c60c:	6224      	str	r4, [r4, #32]
    c60e:	6263      	str	r3, [r4, #36]	; 0x24
    c610:	4b04      	ldr	r3, [pc, #16]	; (c624 <std.isra.0+0x3c>)
    c612:	62a3      	str	r3, [r4, #40]	; 0x28
    c614:	4b04      	ldr	r3, [pc, #16]	; (c628 <std.isra.0+0x40>)
    c616:	62e3      	str	r3, [r4, #44]	; 0x2c
    c618:	4b04      	ldr	r3, [pc, #16]	; (c62c <std.isra.0+0x44>)
    c61a:	6323      	str	r3, [r4, #48]	; 0x30
    c61c:	bd10      	pop	{r4, pc}
    c61e:	46c0      	nop			; (mov r8, r8)
    c620:	0000c941 	.word	0x0000c941
    c624:	0000c969 	.word	0x0000c969
    c628:	0000c9a1 	.word	0x0000c9a1
    c62c:	0000c9cd 	.word	0x0000c9cd

0000c630 <__sfmoreglue>:
    c630:	b570      	push	{r4, r5, r6, lr}
    c632:	2568      	movs	r5, #104	; 0x68
    c634:	1e4b      	subs	r3, r1, #1
    c636:	435d      	muls	r5, r3
    c638:	000e      	movs	r6, r1
    c63a:	0029      	movs	r1, r5
    c63c:	3174      	adds	r1, #116	; 0x74
    c63e:	f000 f917 	bl	c870 <_malloc_r>
    c642:	1e04      	subs	r4, r0, #0
    c644:	d008      	beq.n	c658 <__sfmoreglue+0x28>
    c646:	2100      	movs	r1, #0
    c648:	002a      	movs	r2, r5
    c64a:	6001      	str	r1, [r0, #0]
    c64c:	6046      	str	r6, [r0, #4]
    c64e:	300c      	adds	r0, #12
    c650:	60a0      	str	r0, [r4, #8]
    c652:	3268      	adds	r2, #104	; 0x68
    c654:	f7ff fde1 	bl	c21a <memset>
    c658:	0020      	movs	r0, r4
    c65a:	bd70      	pop	{r4, r5, r6, pc}

0000c65c <__sinit>:
    c65c:	6983      	ldr	r3, [r0, #24]
    c65e:	b513      	push	{r0, r1, r4, lr}
    c660:	0004      	movs	r4, r0
    c662:	2b00      	cmp	r3, #0
    c664:	d128      	bne.n	c6b8 <__sinit+0x5c>
    c666:	6483      	str	r3, [r0, #72]	; 0x48
    c668:	64c3      	str	r3, [r0, #76]	; 0x4c
    c66a:	6503      	str	r3, [r0, #80]	; 0x50
    c66c:	4b13      	ldr	r3, [pc, #76]	; (c6bc <__sinit+0x60>)
    c66e:	4a14      	ldr	r2, [pc, #80]	; (c6c0 <__sinit+0x64>)
    c670:	681b      	ldr	r3, [r3, #0]
    c672:	6282      	str	r2, [r0, #40]	; 0x28
    c674:	9301      	str	r3, [sp, #4]
    c676:	4298      	cmp	r0, r3
    c678:	d101      	bne.n	c67e <__sinit+0x22>
    c67a:	2301      	movs	r3, #1
    c67c:	6183      	str	r3, [r0, #24]
    c67e:	0020      	movs	r0, r4
    c680:	f000 f820 	bl	c6c4 <__sfp>
    c684:	6060      	str	r0, [r4, #4]
    c686:	0020      	movs	r0, r4
    c688:	f000 f81c 	bl	c6c4 <__sfp>
    c68c:	60a0      	str	r0, [r4, #8]
    c68e:	0020      	movs	r0, r4
    c690:	f000 f818 	bl	c6c4 <__sfp>
    c694:	2200      	movs	r2, #0
    c696:	60e0      	str	r0, [r4, #12]
    c698:	2104      	movs	r1, #4
    c69a:	6860      	ldr	r0, [r4, #4]
    c69c:	f7ff ffa4 	bl	c5e8 <std.isra.0>
    c6a0:	2201      	movs	r2, #1
    c6a2:	2109      	movs	r1, #9
    c6a4:	68a0      	ldr	r0, [r4, #8]
    c6a6:	f7ff ff9f 	bl	c5e8 <std.isra.0>
    c6aa:	2202      	movs	r2, #2
    c6ac:	2112      	movs	r1, #18
    c6ae:	68e0      	ldr	r0, [r4, #12]
    c6b0:	f7ff ff9a 	bl	c5e8 <std.isra.0>
    c6b4:	2301      	movs	r3, #1
    c6b6:	61a3      	str	r3, [r4, #24]
    c6b8:	bd13      	pop	{r0, r1, r4, pc}
    c6ba:	46c0      	nop			; (mov r8, r8)
    c6bc:	0000cc38 	.word	0x0000cc38
    c6c0:	0000c5d9 	.word	0x0000c5d9

0000c6c4 <__sfp>:
    c6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6c6:	4b1d      	ldr	r3, [pc, #116]	; (c73c <__sfp+0x78>)
    c6c8:	0006      	movs	r6, r0
    c6ca:	681d      	ldr	r5, [r3, #0]
    c6cc:	69ab      	ldr	r3, [r5, #24]
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d102      	bne.n	c6d8 <__sfp+0x14>
    c6d2:	0028      	movs	r0, r5
    c6d4:	f7ff ffc2 	bl	c65c <__sinit>
    c6d8:	3548      	adds	r5, #72	; 0x48
    c6da:	68ac      	ldr	r4, [r5, #8]
    c6dc:	686b      	ldr	r3, [r5, #4]
    c6de:	3b01      	subs	r3, #1
    c6e0:	d405      	bmi.n	c6ee <__sfp+0x2a>
    c6e2:	220c      	movs	r2, #12
    c6e4:	5ea7      	ldrsh	r7, [r4, r2]
    c6e6:	2f00      	cmp	r7, #0
    c6e8:	d010      	beq.n	c70c <__sfp+0x48>
    c6ea:	3468      	adds	r4, #104	; 0x68
    c6ec:	e7f7      	b.n	c6de <__sfp+0x1a>
    c6ee:	682b      	ldr	r3, [r5, #0]
    c6f0:	2b00      	cmp	r3, #0
    c6f2:	d001      	beq.n	c6f8 <__sfp+0x34>
    c6f4:	682d      	ldr	r5, [r5, #0]
    c6f6:	e7f0      	b.n	c6da <__sfp+0x16>
    c6f8:	2104      	movs	r1, #4
    c6fa:	0030      	movs	r0, r6
    c6fc:	f7ff ff98 	bl	c630 <__sfmoreglue>
    c700:	6028      	str	r0, [r5, #0]
    c702:	2800      	cmp	r0, #0
    c704:	d1f6      	bne.n	c6f4 <__sfp+0x30>
    c706:	230c      	movs	r3, #12
    c708:	6033      	str	r3, [r6, #0]
    c70a:	e016      	b.n	c73a <__sfp+0x76>
    c70c:	2301      	movs	r3, #1
    c70e:	0020      	movs	r0, r4
    c710:	425b      	negs	r3, r3
    c712:	81e3      	strh	r3, [r4, #14]
    c714:	3302      	adds	r3, #2
    c716:	81a3      	strh	r3, [r4, #12]
    c718:	6667      	str	r7, [r4, #100]	; 0x64
    c71a:	6027      	str	r7, [r4, #0]
    c71c:	60a7      	str	r7, [r4, #8]
    c71e:	6067      	str	r7, [r4, #4]
    c720:	6127      	str	r7, [r4, #16]
    c722:	6167      	str	r7, [r4, #20]
    c724:	61a7      	str	r7, [r4, #24]
    c726:	305c      	adds	r0, #92	; 0x5c
    c728:	2208      	movs	r2, #8
    c72a:	0039      	movs	r1, r7
    c72c:	f7ff fd75 	bl	c21a <memset>
    c730:	0020      	movs	r0, r4
    c732:	6367      	str	r7, [r4, #52]	; 0x34
    c734:	63a7      	str	r7, [r4, #56]	; 0x38
    c736:	64a7      	str	r7, [r4, #72]	; 0x48
    c738:	64e7      	str	r7, [r4, #76]	; 0x4c
    c73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c73c:	0000cc38 	.word	0x0000cc38

0000c740 <_fwalk_reent>:
    c740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c742:	0004      	movs	r4, r0
    c744:	0007      	movs	r7, r0
    c746:	2600      	movs	r6, #0
    c748:	9101      	str	r1, [sp, #4]
    c74a:	3448      	adds	r4, #72	; 0x48
    c74c:	2c00      	cmp	r4, #0
    c74e:	d016      	beq.n	c77e <_fwalk_reent+0x3e>
    c750:	6863      	ldr	r3, [r4, #4]
    c752:	68a5      	ldr	r5, [r4, #8]
    c754:	9300      	str	r3, [sp, #0]
    c756:	9b00      	ldr	r3, [sp, #0]
    c758:	3b01      	subs	r3, #1
    c75a:	9300      	str	r3, [sp, #0]
    c75c:	d40d      	bmi.n	c77a <_fwalk_reent+0x3a>
    c75e:	89ab      	ldrh	r3, [r5, #12]
    c760:	2b01      	cmp	r3, #1
    c762:	d908      	bls.n	c776 <_fwalk_reent+0x36>
    c764:	220e      	movs	r2, #14
    c766:	5eab      	ldrsh	r3, [r5, r2]
    c768:	3301      	adds	r3, #1
    c76a:	d004      	beq.n	c776 <_fwalk_reent+0x36>
    c76c:	0029      	movs	r1, r5
    c76e:	0038      	movs	r0, r7
    c770:	9b01      	ldr	r3, [sp, #4]
    c772:	4798      	blx	r3
    c774:	4306      	orrs	r6, r0
    c776:	3568      	adds	r5, #104	; 0x68
    c778:	e7ed      	b.n	c756 <_fwalk_reent+0x16>
    c77a:	6824      	ldr	r4, [r4, #0]
    c77c:	e7e6      	b.n	c74c <_fwalk_reent+0xc>
    c77e:	0030      	movs	r0, r6
    c780:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000c784 <__swhatbuf_r>:
    c784:	b570      	push	{r4, r5, r6, lr}
    c786:	000e      	movs	r6, r1
    c788:	001d      	movs	r5, r3
    c78a:	230e      	movs	r3, #14
    c78c:	5ec9      	ldrsh	r1, [r1, r3]
    c78e:	b090      	sub	sp, #64	; 0x40
    c790:	0014      	movs	r4, r2
    c792:	2900      	cmp	r1, #0
    c794:	da06      	bge.n	c7a4 <__swhatbuf_r+0x20>
    c796:	2300      	movs	r3, #0
    c798:	602b      	str	r3, [r5, #0]
    c79a:	89b3      	ldrh	r3, [r6, #12]
    c79c:	061b      	lsls	r3, r3, #24
    c79e:	d50f      	bpl.n	c7c0 <__swhatbuf_r+0x3c>
    c7a0:	2340      	movs	r3, #64	; 0x40
    c7a2:	e00f      	b.n	c7c4 <__swhatbuf_r+0x40>
    c7a4:	aa01      	add	r2, sp, #4
    c7a6:	f000 f93d 	bl	ca24 <_fstat_r>
    c7aa:	2800      	cmp	r0, #0
    c7ac:	dbf3      	blt.n	c796 <__swhatbuf_r+0x12>
    c7ae:	23f0      	movs	r3, #240	; 0xf0
    c7b0:	9a02      	ldr	r2, [sp, #8]
    c7b2:	021b      	lsls	r3, r3, #8
    c7b4:	4013      	ands	r3, r2
    c7b6:	4a05      	ldr	r2, [pc, #20]	; (c7cc <__swhatbuf_r+0x48>)
    c7b8:	189b      	adds	r3, r3, r2
    c7ba:	425a      	negs	r2, r3
    c7bc:	4153      	adcs	r3, r2
    c7be:	602b      	str	r3, [r5, #0]
    c7c0:	2380      	movs	r3, #128	; 0x80
    c7c2:	00db      	lsls	r3, r3, #3
    c7c4:	2000      	movs	r0, #0
    c7c6:	6023      	str	r3, [r4, #0]
    c7c8:	b010      	add	sp, #64	; 0x40
    c7ca:	bd70      	pop	{r4, r5, r6, pc}
    c7cc:	ffffe000 	.word	0xffffe000

0000c7d0 <malloc>:
    c7d0:	b510      	push	{r4, lr}
    c7d2:	4b03      	ldr	r3, [pc, #12]	; (c7e0 <malloc+0x10>)
    c7d4:	0001      	movs	r1, r0
    c7d6:	6818      	ldr	r0, [r3, #0]
    c7d8:	f000 f84a 	bl	c870 <_malloc_r>
    c7dc:	bd10      	pop	{r4, pc}
    c7de:	46c0      	nop			; (mov r8, r8)
    c7e0:	20000074 	.word	0x20000074

0000c7e4 <_free_r>:
    c7e4:	b530      	push	{r4, r5, lr}
    c7e6:	2900      	cmp	r1, #0
    c7e8:	d03e      	beq.n	c868 <_free_r+0x84>
    c7ea:	3904      	subs	r1, #4
    c7ec:	680b      	ldr	r3, [r1, #0]
    c7ee:	2b00      	cmp	r3, #0
    c7f0:	da00      	bge.n	c7f4 <_free_r+0x10>
    c7f2:	18c9      	adds	r1, r1, r3
    c7f4:	4a1d      	ldr	r2, [pc, #116]	; (c86c <_free_r+0x88>)
    c7f6:	6813      	ldr	r3, [r2, #0]
    c7f8:	0014      	movs	r4, r2
    c7fa:	2b00      	cmp	r3, #0
    c7fc:	d102      	bne.n	c804 <_free_r+0x20>
    c7fe:	604b      	str	r3, [r1, #4]
    c800:	6011      	str	r1, [r2, #0]
    c802:	e031      	b.n	c868 <_free_r+0x84>
    c804:	428b      	cmp	r3, r1
    c806:	d90d      	bls.n	c824 <_free_r+0x40>
    c808:	680a      	ldr	r2, [r1, #0]
    c80a:	1888      	adds	r0, r1, r2
    c80c:	4283      	cmp	r3, r0
    c80e:	d103      	bne.n	c818 <_free_r+0x34>
    c810:	6818      	ldr	r0, [r3, #0]
    c812:	685b      	ldr	r3, [r3, #4]
    c814:	1882      	adds	r2, r0, r2
    c816:	600a      	str	r2, [r1, #0]
    c818:	604b      	str	r3, [r1, #4]
    c81a:	6021      	str	r1, [r4, #0]
    c81c:	e024      	b.n	c868 <_free_r+0x84>
    c81e:	428a      	cmp	r2, r1
    c820:	d803      	bhi.n	c82a <_free_r+0x46>
    c822:	0013      	movs	r3, r2
    c824:	685a      	ldr	r2, [r3, #4]
    c826:	2a00      	cmp	r2, #0
    c828:	d1f9      	bne.n	c81e <_free_r+0x3a>
    c82a:	681d      	ldr	r5, [r3, #0]
    c82c:	195c      	adds	r4, r3, r5
    c82e:	428c      	cmp	r4, r1
    c830:	d10b      	bne.n	c84a <_free_r+0x66>
    c832:	6809      	ldr	r1, [r1, #0]
    c834:	1869      	adds	r1, r5, r1
    c836:	1858      	adds	r0, r3, r1
    c838:	6019      	str	r1, [r3, #0]
    c83a:	4282      	cmp	r2, r0
    c83c:	d114      	bne.n	c868 <_free_r+0x84>
    c83e:	6810      	ldr	r0, [r2, #0]
    c840:	6852      	ldr	r2, [r2, #4]
    c842:	1841      	adds	r1, r0, r1
    c844:	6019      	str	r1, [r3, #0]
    c846:	605a      	str	r2, [r3, #4]
    c848:	e00e      	b.n	c868 <_free_r+0x84>
    c84a:	428c      	cmp	r4, r1
    c84c:	d902      	bls.n	c854 <_free_r+0x70>
    c84e:	230c      	movs	r3, #12
    c850:	6003      	str	r3, [r0, #0]
    c852:	e009      	b.n	c868 <_free_r+0x84>
    c854:	6808      	ldr	r0, [r1, #0]
    c856:	180c      	adds	r4, r1, r0
    c858:	42a2      	cmp	r2, r4
    c85a:	d103      	bne.n	c864 <_free_r+0x80>
    c85c:	6814      	ldr	r4, [r2, #0]
    c85e:	6852      	ldr	r2, [r2, #4]
    c860:	1820      	adds	r0, r4, r0
    c862:	6008      	str	r0, [r1, #0]
    c864:	604a      	str	r2, [r1, #4]
    c866:	6059      	str	r1, [r3, #4]
    c868:	bd30      	pop	{r4, r5, pc}
    c86a:	46c0      	nop			; (mov r8, r8)
    c86c:	20000e24 	.word	0x20000e24

0000c870 <_malloc_r>:
    c870:	2303      	movs	r3, #3
    c872:	b570      	push	{r4, r5, r6, lr}
    c874:	1ccd      	adds	r5, r1, #3
    c876:	439d      	bics	r5, r3
    c878:	3508      	adds	r5, #8
    c87a:	0006      	movs	r6, r0
    c87c:	2d0c      	cmp	r5, #12
    c87e:	d201      	bcs.n	c884 <_malloc_r+0x14>
    c880:	250c      	movs	r5, #12
    c882:	e005      	b.n	c890 <_malloc_r+0x20>
    c884:	2d00      	cmp	r5, #0
    c886:	da03      	bge.n	c890 <_malloc_r+0x20>
    c888:	230c      	movs	r3, #12
    c88a:	2000      	movs	r0, #0
    c88c:	6033      	str	r3, [r6, #0]
    c88e:	e040      	b.n	c912 <_malloc_r+0xa2>
    c890:	42a9      	cmp	r1, r5
    c892:	d8f9      	bhi.n	c888 <_malloc_r+0x18>
    c894:	4b1f      	ldr	r3, [pc, #124]	; (c914 <_malloc_r+0xa4>)
    c896:	681c      	ldr	r4, [r3, #0]
    c898:	001a      	movs	r2, r3
    c89a:	0021      	movs	r1, r4
    c89c:	2900      	cmp	r1, #0
    c89e:	d013      	beq.n	c8c8 <_malloc_r+0x58>
    c8a0:	680b      	ldr	r3, [r1, #0]
    c8a2:	1b5b      	subs	r3, r3, r5
    c8a4:	d40d      	bmi.n	c8c2 <_malloc_r+0x52>
    c8a6:	2b0b      	cmp	r3, #11
    c8a8:	d902      	bls.n	c8b0 <_malloc_r+0x40>
    c8aa:	600b      	str	r3, [r1, #0]
    c8ac:	18cc      	adds	r4, r1, r3
    c8ae:	e01e      	b.n	c8ee <_malloc_r+0x7e>
    c8b0:	428c      	cmp	r4, r1
    c8b2:	d102      	bne.n	c8ba <_malloc_r+0x4a>
    c8b4:	6863      	ldr	r3, [r4, #4]
    c8b6:	6013      	str	r3, [r2, #0]
    c8b8:	e01a      	b.n	c8f0 <_malloc_r+0x80>
    c8ba:	684b      	ldr	r3, [r1, #4]
    c8bc:	6063      	str	r3, [r4, #4]
    c8be:	000c      	movs	r4, r1
    c8c0:	e016      	b.n	c8f0 <_malloc_r+0x80>
    c8c2:	000c      	movs	r4, r1
    c8c4:	6849      	ldr	r1, [r1, #4]
    c8c6:	e7e9      	b.n	c89c <_malloc_r+0x2c>
    c8c8:	4c13      	ldr	r4, [pc, #76]	; (c918 <_malloc_r+0xa8>)
    c8ca:	6823      	ldr	r3, [r4, #0]
    c8cc:	2b00      	cmp	r3, #0
    c8ce:	d103      	bne.n	c8d8 <_malloc_r+0x68>
    c8d0:	0030      	movs	r0, r6
    c8d2:	f000 f823 	bl	c91c <_sbrk_r>
    c8d6:	6020      	str	r0, [r4, #0]
    c8d8:	0029      	movs	r1, r5
    c8da:	0030      	movs	r0, r6
    c8dc:	f000 f81e 	bl	c91c <_sbrk_r>
    c8e0:	1c43      	adds	r3, r0, #1
    c8e2:	d0d1      	beq.n	c888 <_malloc_r+0x18>
    c8e4:	2303      	movs	r3, #3
    c8e6:	1cc4      	adds	r4, r0, #3
    c8e8:	439c      	bics	r4, r3
    c8ea:	42a0      	cmp	r0, r4
    c8ec:	d10a      	bne.n	c904 <_malloc_r+0x94>
    c8ee:	6025      	str	r5, [r4, #0]
    c8f0:	0020      	movs	r0, r4
    c8f2:	2207      	movs	r2, #7
    c8f4:	300b      	adds	r0, #11
    c8f6:	1d23      	adds	r3, r4, #4
    c8f8:	4390      	bics	r0, r2
    c8fa:	1ac3      	subs	r3, r0, r3
    c8fc:	d009      	beq.n	c912 <_malloc_r+0xa2>
    c8fe:	425a      	negs	r2, r3
    c900:	50e2      	str	r2, [r4, r3]
    c902:	e006      	b.n	c912 <_malloc_r+0xa2>
    c904:	1a21      	subs	r1, r4, r0
    c906:	0030      	movs	r0, r6
    c908:	f000 f808 	bl	c91c <_sbrk_r>
    c90c:	1c43      	adds	r3, r0, #1
    c90e:	d1ee      	bne.n	c8ee <_malloc_r+0x7e>
    c910:	e7ba      	b.n	c888 <_malloc_r+0x18>
    c912:	bd70      	pop	{r4, r5, r6, pc}
    c914:	20000e24 	.word	0x20000e24
    c918:	20000e20 	.word	0x20000e20

0000c91c <_sbrk_r>:
    c91c:	2300      	movs	r3, #0
    c91e:	b570      	push	{r4, r5, r6, lr}
    c920:	4c06      	ldr	r4, [pc, #24]	; (c93c <_sbrk_r+0x20>)
    c922:	0005      	movs	r5, r0
    c924:	0008      	movs	r0, r1
    c926:	6023      	str	r3, [r4, #0]
    c928:	f7fe fd06 	bl	b338 <_sbrk>
    c92c:	1c43      	adds	r3, r0, #1
    c92e:	d103      	bne.n	c938 <_sbrk_r+0x1c>
    c930:	6823      	ldr	r3, [r4, #0]
    c932:	2b00      	cmp	r3, #0
    c934:	d000      	beq.n	c938 <_sbrk_r+0x1c>
    c936:	602b      	str	r3, [r5, #0]
    c938:	bd70      	pop	{r4, r5, r6, pc}
    c93a:	46c0      	nop			; (mov r8, r8)
    c93c:	200010d4 	.word	0x200010d4

0000c940 <__sread>:
    c940:	b570      	push	{r4, r5, r6, lr}
    c942:	000c      	movs	r4, r1
    c944:	250e      	movs	r5, #14
    c946:	5f49      	ldrsh	r1, [r1, r5]
    c948:	f000 f892 	bl	ca70 <_read_r>
    c94c:	2800      	cmp	r0, #0
    c94e:	db03      	blt.n	c958 <__sread+0x18>
    c950:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c952:	181b      	adds	r3, r3, r0
    c954:	6563      	str	r3, [r4, #84]	; 0x54
    c956:	e003      	b.n	c960 <__sread+0x20>
    c958:	89a2      	ldrh	r2, [r4, #12]
    c95a:	4b02      	ldr	r3, [pc, #8]	; (c964 <__sread+0x24>)
    c95c:	4013      	ands	r3, r2
    c95e:	81a3      	strh	r3, [r4, #12]
    c960:	bd70      	pop	{r4, r5, r6, pc}
    c962:	46c0      	nop			; (mov r8, r8)
    c964:	ffffefff 	.word	0xffffefff

0000c968 <__swrite>:
    c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c96a:	001f      	movs	r7, r3
    c96c:	898b      	ldrh	r3, [r1, #12]
    c96e:	0005      	movs	r5, r0
    c970:	000c      	movs	r4, r1
    c972:	0016      	movs	r6, r2
    c974:	05db      	lsls	r3, r3, #23
    c976:	d505      	bpl.n	c984 <__swrite+0x1c>
    c978:	230e      	movs	r3, #14
    c97a:	5ec9      	ldrsh	r1, [r1, r3]
    c97c:	2200      	movs	r2, #0
    c97e:	2302      	movs	r3, #2
    c980:	f000 f862 	bl	ca48 <_lseek_r>
    c984:	89a2      	ldrh	r2, [r4, #12]
    c986:	4b05      	ldr	r3, [pc, #20]	; (c99c <__swrite+0x34>)
    c988:	0028      	movs	r0, r5
    c98a:	4013      	ands	r3, r2
    c98c:	81a3      	strh	r3, [r4, #12]
    c98e:	0032      	movs	r2, r6
    c990:	230e      	movs	r3, #14
    c992:	5ee1      	ldrsh	r1, [r4, r3]
    c994:	003b      	movs	r3, r7
    c996:	f000 f81f 	bl	c9d8 <_write_r>
    c99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c99c:	ffffefff 	.word	0xffffefff

0000c9a0 <__sseek>:
    c9a0:	b570      	push	{r4, r5, r6, lr}
    c9a2:	000c      	movs	r4, r1
    c9a4:	250e      	movs	r5, #14
    c9a6:	5f49      	ldrsh	r1, [r1, r5]
    c9a8:	f000 f84e 	bl	ca48 <_lseek_r>
    c9ac:	89a3      	ldrh	r3, [r4, #12]
    c9ae:	1c42      	adds	r2, r0, #1
    c9b0:	d103      	bne.n	c9ba <__sseek+0x1a>
    c9b2:	4a05      	ldr	r2, [pc, #20]	; (c9c8 <__sseek+0x28>)
    c9b4:	4013      	ands	r3, r2
    c9b6:	81a3      	strh	r3, [r4, #12]
    c9b8:	e004      	b.n	c9c4 <__sseek+0x24>
    c9ba:	2280      	movs	r2, #128	; 0x80
    c9bc:	0152      	lsls	r2, r2, #5
    c9be:	4313      	orrs	r3, r2
    c9c0:	81a3      	strh	r3, [r4, #12]
    c9c2:	6560      	str	r0, [r4, #84]	; 0x54
    c9c4:	bd70      	pop	{r4, r5, r6, pc}
    c9c6:	46c0      	nop			; (mov r8, r8)
    c9c8:	ffffefff 	.word	0xffffefff

0000c9cc <__sclose>:
    c9cc:	b510      	push	{r4, lr}
    c9ce:	230e      	movs	r3, #14
    c9d0:	5ec9      	ldrsh	r1, [r1, r3]
    c9d2:	f000 f815 	bl	ca00 <_close_r>
    c9d6:	bd10      	pop	{r4, pc}

0000c9d8 <_write_r>:
    c9d8:	b570      	push	{r4, r5, r6, lr}
    c9da:	0005      	movs	r5, r0
    c9dc:	0008      	movs	r0, r1
    c9de:	0011      	movs	r1, r2
    c9e0:	2200      	movs	r2, #0
    c9e2:	4c06      	ldr	r4, [pc, #24]	; (c9fc <_write_r+0x24>)
    c9e4:	6022      	str	r2, [r4, #0]
    c9e6:	001a      	movs	r2, r3
    c9e8:	f7f5 f8e0 	bl	1bac <_write>
    c9ec:	1c43      	adds	r3, r0, #1
    c9ee:	d103      	bne.n	c9f8 <_write_r+0x20>
    c9f0:	6823      	ldr	r3, [r4, #0]
    c9f2:	2b00      	cmp	r3, #0
    c9f4:	d000      	beq.n	c9f8 <_write_r+0x20>
    c9f6:	602b      	str	r3, [r5, #0]
    c9f8:	bd70      	pop	{r4, r5, r6, pc}
    c9fa:	46c0      	nop			; (mov r8, r8)
    c9fc:	200010d4 	.word	0x200010d4

0000ca00 <_close_r>:
    ca00:	2300      	movs	r3, #0
    ca02:	b570      	push	{r4, r5, r6, lr}
    ca04:	4c06      	ldr	r4, [pc, #24]	; (ca20 <_close_r+0x20>)
    ca06:	0005      	movs	r5, r0
    ca08:	0008      	movs	r0, r1
    ca0a:	6023      	str	r3, [r4, #0]
    ca0c:	f7fe fcb2 	bl	b374 <_close>
    ca10:	1c43      	adds	r3, r0, #1
    ca12:	d103      	bne.n	ca1c <_close_r+0x1c>
    ca14:	6823      	ldr	r3, [r4, #0]
    ca16:	2b00      	cmp	r3, #0
    ca18:	d000      	beq.n	ca1c <_close_r+0x1c>
    ca1a:	602b      	str	r3, [r5, #0]
    ca1c:	bd70      	pop	{r4, r5, r6, pc}
    ca1e:	46c0      	nop			; (mov r8, r8)
    ca20:	200010d4 	.word	0x200010d4

0000ca24 <_fstat_r>:
    ca24:	2300      	movs	r3, #0
    ca26:	b570      	push	{r4, r5, r6, lr}
    ca28:	4c06      	ldr	r4, [pc, #24]	; (ca44 <_fstat_r+0x20>)
    ca2a:	0005      	movs	r5, r0
    ca2c:	0008      	movs	r0, r1
    ca2e:	0011      	movs	r1, r2
    ca30:	6023      	str	r3, [r4, #0]
    ca32:	f7fe fca9 	bl	b388 <_fstat>
    ca36:	1c43      	adds	r3, r0, #1
    ca38:	d103      	bne.n	ca42 <_fstat_r+0x1e>
    ca3a:	6823      	ldr	r3, [r4, #0]
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d000      	beq.n	ca42 <_fstat_r+0x1e>
    ca40:	602b      	str	r3, [r5, #0]
    ca42:	bd70      	pop	{r4, r5, r6, pc}
    ca44:	200010d4 	.word	0x200010d4

0000ca48 <_lseek_r>:
    ca48:	b570      	push	{r4, r5, r6, lr}
    ca4a:	0005      	movs	r5, r0
    ca4c:	0008      	movs	r0, r1
    ca4e:	0011      	movs	r1, r2
    ca50:	2200      	movs	r2, #0
    ca52:	4c06      	ldr	r4, [pc, #24]	; (ca6c <_lseek_r+0x24>)
    ca54:	6022      	str	r2, [r4, #0]
    ca56:	001a      	movs	r2, r3
    ca58:	f7fe fca4 	bl	b3a4 <_lseek>
    ca5c:	1c43      	adds	r3, r0, #1
    ca5e:	d103      	bne.n	ca68 <_lseek_r+0x20>
    ca60:	6823      	ldr	r3, [r4, #0]
    ca62:	2b00      	cmp	r3, #0
    ca64:	d000      	beq.n	ca68 <_lseek_r+0x20>
    ca66:	602b      	str	r3, [r5, #0]
    ca68:	bd70      	pop	{r4, r5, r6, pc}
    ca6a:	46c0      	nop			; (mov r8, r8)
    ca6c:	200010d4 	.word	0x200010d4

0000ca70 <_read_r>:
    ca70:	b570      	push	{r4, r5, r6, lr}
    ca72:	0005      	movs	r5, r0
    ca74:	0008      	movs	r0, r1
    ca76:	0011      	movs	r1, r2
    ca78:	2200      	movs	r2, #0
    ca7a:	4c06      	ldr	r4, [pc, #24]	; (ca94 <_read_r+0x24>)
    ca7c:	6022      	str	r2, [r4, #0]
    ca7e:	001a      	movs	r2, r3
    ca80:	f7f5 f86a 	bl	1b58 <_read>
    ca84:	1c43      	adds	r3, r0, #1
    ca86:	d103      	bne.n	ca90 <_read_r+0x20>
    ca88:	6823      	ldr	r3, [r4, #0]
    ca8a:	2b00      	cmp	r3, #0
    ca8c:	d000      	beq.n	ca90 <_read_r+0x20>
    ca8e:	602b      	str	r3, [r5, #0]
    ca90:	bd70      	pop	{r4, r5, r6, pc}
    ca92:	46c0      	nop			; (mov r8, r8)
    ca94:	200010d4 	.word	0x200010d4

0000ca98 <_usb_device_irq_bits>:
    ca98:	00080004 00800070 01000001 00000200     ....p...........
    caa8:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    cab8:	42001800 42001c00 42002c00 42003000     ...B...B.,.B.0.B
    cac8:	42003400 001c1c1b 10000800 00002000     .4.B......... ..
    cad8:	0000347c 0000349c 000034c4 0000350a     |4...4...4...5..
    cae8:	00003568 726f6f43 616e6964 00726f74     h5..Coordinator.
    caf8:	74736554 75636553 79746972 3079654b     TestSecurityKey0
    cb08:	00000000 00008418 00008422 0000842e     ........".......
    cb18:	00008438 00008442 00008f7e 000090a8     8...B...~.......
    cb28:	00008f8a 00008fb6 000090aa 00008fe8     ................
    cb38:	000090aa 00009050 0c0b0a09 00000e0d     ....P...........
    cb48:	0000a592 0000a60c 0000a60c 0000a5b0     ................
    cb58:	0000a5aa 0000a5b6 0000a598 0000a5bc     ................
    cb68:	0000a5f2 0000a7b8 0000a808 0000a808     ................
    cb78:	0000a804 0000a7aa 0000a7ca 0000a79a     ................
    cb88:	0000a7dc 0000a7ee 0000a856 0000a884     ........V.......
    cb98:	0000a884 0000a880 0000a850 0000a85c     ........P...\...
    cba8:	0000a84a 0000a862 0000a868 0000bbae     J...b...h.......
    cbb8:	0000bad2 0000bb90 0000bb68 0000bb90     ........h.......
    cbc8:	0000bb5c 0000bb90 0000bb68 0000bad2     \.......h.......
    cbd8:	0000bad2 0000bb5c 0000bb68 0000bc14     ....\...h.......
    cbe8:	0000bc14 0000bc14 0000bb96 0000bad2     ................
    cbf8:	0000bad2 0000bb7c 0000bb66 0000bb7c     ....|...f...|...
    cc08:	0000bb5c 0000bb7c 0000bb66 0000bad2     \...|...f.......
    cc18:	0000bad2 0000bb5c 0000bb66 0000bc14     ....\...f.......
    cc28:	0000bc14 0000bc14 0000bc20 00000043     ........ ...C...

0000cc38 <_global_impure_ptr>:
    cc38:	20000014                                ... 

0000cc3c <__sf_fake_stdin>:
	...

0000cc5c <__sf_fake_stdout>:
	...

0000cc7c <__sf_fake_stderr>:
	...

0000cc9c <_init>:
    cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc9e:	46c0      	nop			; (mov r8, r8)
    cca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cca2:	bc08      	pop	{r3}
    cca4:	469e      	mov	lr, r3
    cca6:	4770      	bx	lr

0000cca8 <__init_array_start>:
    cca8:	000000dd 	.word	0x000000dd

0000ccac <_fini>:
    ccac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ccae:	46c0      	nop			; (mov r8, r8)
    ccb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ccb2:	bc08      	pop	{r3}
    ccb4:	469e      	mov	lr, r3
    ccb6:	4770      	bx	lr

0000ccb8 <__fini_array_start>:
    ccb8:	000000b5 	.word	0x000000b5

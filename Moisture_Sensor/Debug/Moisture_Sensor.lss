
Moisture_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fd54  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000008c  20000000  0000fd54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001024  2000008c  0000fde0  0002008c  2**2
                  ALLOC
  3 .stack        00001000  200010b0  00010e04  0002008c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00055049  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000725e  00000000  00000000  00075189  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000762d  00000000  00000000  0007c3e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000015e0  00000000  00000000  00083a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001328  00000000  00000000  00084ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000122a3  00000000  00000000  0008631c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00024b1c  00000000  00000000  000985bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e3c0  00000000  00000000  000bd0db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005238  00000000  00000000  0014b49c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200020b0 	.word	0x200020b0
       4:	0000bea5 	.word	0x0000bea5
       8:	0000bf9d 	.word	0x0000bf9d
       c:	0000bf9d 	.word	0x0000bf9d
	...
      2c:	0000bf9d 	.word	0x0000bf9d
	...
      38:	0000bf9d 	.word	0x0000bf9d
      3c:	0000bf9d 	.word	0x0000bf9d
      40:	0000bf9d 	.word	0x0000bf9d
      44:	0000bf9d 	.word	0x0000bf9d
      48:	0000bf9d 	.word	0x0000bf9d
      4c:	00000f45 	.word	0x00000f45
      50:	0000acb5 	.word	0x0000acb5
      54:	0000bf9d 	.word	0x0000bf9d
      58:	0000bf9d 	.word	0x0000bf9d
      5c:	00002699 	.word	0x00002699
      60:	0000bf9d 	.word	0x0000bf9d
      64:	0000aa65 	.word	0x0000aa65
      68:	0000aa7d 	.word	0x0000aa7d
      6c:	0000aa95 	.word	0x0000aa95
      70:	0000aaad 	.word	0x0000aaad
      74:	0000aac5 	.word	0x0000aac5
      78:	0000aadd 	.word	0x0000aadd
      7c:	0000bf9d 	.word	0x0000bf9d
      80:	0000bf9d 	.word	0x0000bf9d
      84:	0000bf9d 	.word	0x0000bf9d
      88:	00009ca9 	.word	0x00009ca9
      8c:	00009cbd 	.word	0x00009cbd
      90:	00009cd1 	.word	0x00009cd1
	...
      9c:	0000bf9d 	.word	0x0000bf9d
      a0:	0000bf9d 	.word	0x0000bf9d
      a4:	00000000 	.word	0x00000000
      a8:	0000bf9d 	.word	0x0000bf9d
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000008c 	.word	0x2000008c
      d4:	00000000 	.word	0x00000000
      d8:	0000fd54 	.word	0x0000fd54

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000090 	.word	0x20000090
     108:	0000fd54 	.word	0x0000fd54
     10c:	0000fd54 	.word	0x0000fd54
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}
     12a:	46c0      	nop			; (mov r8, r8)

0000012c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     12c:	b580      	push	{r7, lr}
     12e:	b082      	sub	sp, #8
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     13a:	1dfb      	adds	r3, r7, #7
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b01      	cmp	r3, #1
     140:	d00a      	beq.n	158 <system_apb_clock_set_mask+0x2c>
     142:	2b02      	cmp	r3, #2
     144:	d00f      	beq.n	166 <system_apb_clock_set_mask+0x3a>
     146:	2b00      	cmp	r3, #0
     148:	d114      	bne.n	174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     14a:	4b0e      	ldr	r3, [pc, #56]	; (184 <system_apb_clock_set_mask+0x58>)
     14c:	4a0d      	ldr	r2, [pc, #52]	; (184 <system_apb_clock_set_mask+0x58>)
     14e:	6991      	ldr	r1, [r2, #24]
     150:	683a      	ldr	r2, [r7, #0]
     152:	430a      	orrs	r2, r1
     154:	619a      	str	r2, [r3, #24]
			break;
     156:	e00f      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     158:	4b0a      	ldr	r3, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15c:	69d1      	ldr	r1, [r2, #28]
     15e:	683a      	ldr	r2, [r7, #0]
     160:	430a      	orrs	r2, r1
     162:	61da      	str	r2, [r3, #28]
			break;
     164:	e008      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     166:	4b07      	ldr	r3, [pc, #28]	; (184 <system_apb_clock_set_mask+0x58>)
     168:	4a06      	ldr	r2, [pc, #24]	; (184 <system_apb_clock_set_mask+0x58>)
     16a:	6a11      	ldr	r1, [r2, #32]
     16c:	683a      	ldr	r2, [r7, #0]
     16e:	430a      	orrs	r2, r1
     170:	621a      	str	r2, [r3, #32]
			break;
     172:	e001      	b.n	178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     174:	2317      	movs	r3, #23
     176:	e000      	b.n	17a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     178:	2300      	movs	r3, #0
}
     17a:	0018      	movs	r0, r3
     17c:	46bd      	mov	sp, r7
     17e:	b002      	add	sp, #8
     180:	bd80      	pop	{r7, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	40000400 	.word	0x40000400

00000188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     188:	b580      	push	{r7, lr}
     18a:	b082      	sub	sp, #8
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     190:	687b      	ldr	r3, [r7, #4]
     192:	2280      	movs	r2, #128	; 0x80
     194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     196:	687b      	ldr	r3, [r7, #4]
     198:	2200      	movs	r2, #0
     19a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	2201      	movs	r2, #1
     1a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1a2:	687b      	ldr	r3, [r7, #4]
     1a4:	2200      	movs	r2, #0
     1a6:	70da      	strb	r2, [r3, #3]
}
     1a8:	46c0      	nop			; (mov r8, r8)
     1aa:	46bd      	mov	sp, r7
     1ac:	b002      	add	sp, #8
     1ae:	bd80      	pop	{r7, pc}

000001b0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b082      	sub	sp, #8
     1b4:	af00      	add	r7, sp, #0
     1b6:	0002      	movs	r2, r0
     1b8:	1dfb      	adds	r3, r7, #7
     1ba:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     1bc:	1dfb      	adds	r3, r7, #7
     1be:	781b      	ldrb	r3, [r3, #0]
     1c0:	2b00      	cmp	r3, #0
     1c2:	d002      	beq.n	1ca <system_voltage_reference_enable+0x1a>
     1c4:	2b01      	cmp	r3, #1
     1c6:	d007      	beq.n	1d8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     1c8:	e00d      	b.n	1e6 <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     1ca:	4b08      	ldr	r3, [pc, #32]	; (1ec <system_voltage_reference_enable+0x3c>)
     1cc:	4a07      	ldr	r2, [pc, #28]	; (1ec <system_voltage_reference_enable+0x3c>)
     1ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
     1d0:	2102      	movs	r1, #2
     1d2:	430a      	orrs	r2, r1
     1d4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     1d6:	e006      	b.n	1e6 <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <system_voltage_reference_enable+0x3c>)
     1da:	4a04      	ldr	r2, [pc, #16]	; (1ec <system_voltage_reference_enable+0x3c>)
     1dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
     1de:	2104      	movs	r1, #4
     1e0:	430a      	orrs	r2, r1
     1e2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     1e4:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
     1e6:	46bd      	mov	sp, r7
     1e8:	b002      	add	sp, #8
     1ea:	bd80      	pop	{r7, pc}
     1ec:	40000800 	.word	0x40000800

000001f0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     1f0:	b580      	push	{r7, lr}
     1f2:	b084      	sub	sp, #16
     1f4:	af00      	add	r7, sp, #0
     1f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	681b      	ldr	r3, [r3, #0]
     1fc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     1fe:	68fb      	ldr	r3, [r7, #12]
     200:	7e5b      	ldrb	r3, [r3, #25]
     202:	b2db      	uxtb	r3, r3
     204:	b25b      	sxtb	r3, r3
     206:	2b00      	cmp	r3, #0
     208:	da01      	bge.n	20e <adc_is_syncing+0x1e>
		return true;
     20a:	2301      	movs	r3, #1
     20c:	e000      	b.n	210 <adc_is_syncing+0x20>
	}

	return false;
     20e:	2300      	movs	r3, #0
}
     210:	0018      	movs	r0, r3
     212:	46bd      	mov	sp, r7
     214:	b004      	add	sp, #16
     216:	bd80      	pop	{r7, pc}

00000218 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     218:	b580      	push	{r7, lr}
     21a:	b082      	sub	sp, #8
     21c:	af00      	add	r7, sp, #0
     21e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     220:	687b      	ldr	r3, [r7, #4]
     222:	2200      	movs	r2, #0
     224:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     226:	687b      	ldr	r3, [r7, #4]
     228:	2200      	movs	r2, #0
     22a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     22c:	687b      	ldr	r3, [r7, #4]
     22e:	2200      	movs	r2, #0
     230:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     232:	687b      	ldr	r3, [r7, #4]
     234:	2200      	movs	r2, #0
     236:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     238:	687b      	ldr	r3, [r7, #4]
     23a:	2200      	movs	r2, #0
     23c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     23e:	687b      	ldr	r3, [r7, #4]
     240:	2200      	movs	r2, #0
     242:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     244:	687b      	ldr	r3, [r7, #4]
     246:	2200      	movs	r2, #0
     248:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	2200      	movs	r2, #0
     24e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
     250:	687b      	ldr	r3, [r7, #4]
     252:	2206      	movs	r2, #6
     254:	731a      	strb	r2, [r3, #12]
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     256:	687b      	ldr	r3, [r7, #4]
     258:	22c0      	movs	r2, #192	; 0xc0
     25a:	0152      	lsls	r2, r2, #5
     25c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     25e:	687b      	ldr	r3, [r7, #4]
     260:	2200      	movs	r2, #0
     262:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     264:	687b      	ldr	r3, [r7, #4]
     266:	2200      	movs	r2, #0
     268:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	2200      	movs	r2, #0
     26e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     270:	687b      	ldr	r3, [r7, #4]
     272:	2200      	movs	r2, #0
     274:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     276:	687b      	ldr	r3, [r7, #4]
     278:	2200      	movs	r2, #0
     27a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	222a      	movs	r2, #42	; 0x2a
     280:	2100      	movs	r1, #0
     282:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     284:	687b      	ldr	r3, [r7, #4]
     286:	2200      	movs	r2, #0
     288:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	2200      	movs	r2, #0
     28e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2224      	movs	r2, #36	; 0x24
     294:	2100      	movs	r1, #0
     296:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     298:	687b      	ldr	r3, [r7, #4]
     29a:	2200      	movs	r2, #0
     29c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	2200      	movs	r2, #0
     2a2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	2200      	movs	r2, #0
     2a8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	222b      	movs	r2, #43	; 0x2b
     2ae:	2100      	movs	r1, #0
     2b0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	222c      	movs	r2, #44	; 0x2c
     2b6:	2100      	movs	r1, #0
     2b8:	5499      	strb	r1, [r3, r2]
}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	46bd      	mov	sp, r7
     2be:	b002      	add	sp, #8
     2c0:	bd80      	pop	{r7, pc}
     2c2:	46c0      	nop			; (mov r8, r8)

000002c4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b098      	sub	sp, #96	; 0x60
     2c8:	af00      	add	r7, sp, #0
     2ca:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     2cc:	230c      	movs	r3, #12
     2ce:	18fa      	adds	r2, r7, r3
     2d0:	4b15      	ldr	r3, [pc, #84]	; (328 <_adc_configure_ain_pin+0x64>)
     2d2:	0010      	movs	r0, r2
     2d4:	0019      	movs	r1, r3
     2d6:	2350      	movs	r3, #80	; 0x50
     2d8:	001a      	movs	r2, r3
     2da:	4b14      	ldr	r3, [pc, #80]	; (32c <_adc_configure_ain_pin+0x68>)
     2dc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     2de:	4b14      	ldr	r3, [pc, #80]	; (330 <_adc_configure_ain_pin+0x6c>)
     2e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	2b13      	cmp	r3, #19
     2e6:	d81a      	bhi.n	31e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2e8:	230c      	movs	r3, #12
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	687a      	ldr	r2, [r7, #4]
     2ee:	0092      	lsls	r2, r2, #2
     2f0:	58d3      	ldr	r3, [r2, r3]
     2f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     2f4:	2308      	movs	r3, #8
     2f6:	18fb      	adds	r3, r7, r3
     2f8:	0018      	movs	r0, r3
     2fa:	4b0e      	ldr	r3, [pc, #56]	; (334 <_adc_configure_ain_pin+0x70>)
     2fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2fe:	2308      	movs	r3, #8
     300:	18fb      	adds	r3, r7, r3
     302:	2200      	movs	r2, #0
     304:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     306:	2308      	movs	r3, #8
     308:	18fb      	adds	r3, r7, r3
     30a:	2201      	movs	r2, #1
     30c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     30e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     310:	b2db      	uxtb	r3, r3
     312:	2208      	movs	r2, #8
     314:	18ba      	adds	r2, r7, r2
     316:	0011      	movs	r1, r2
     318:	0018      	movs	r0, r3
     31a:	4b07      	ldr	r3, [pc, #28]	; (338 <_adc_configure_ain_pin+0x74>)
     31c:	4798      	blx	r3
	}
}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	46bd      	mov	sp, r7
     322:	b018      	add	sp, #96	; 0x60
     324:	bd80      	pop	{r7, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	0000f8f8 	.word	0x0000f8f8
     32c:	0000e9ad 	.word	0x0000e9ad
     330:	0000ffff 	.word	0x0000ffff
     334:	00000189 	.word	0x00000189
     338:	0000be1d 	.word	0x0000be1d

0000033c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     33c:	b5f0      	push	{r4, r5, r6, r7, lr}
     33e:	b089      	sub	sp, #36	; 0x24
     340:	af00      	add	r7, sp, #0
     342:	6078      	str	r0, [r7, #4]
     344:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     346:	231f      	movs	r3, #31
     348:	18fb      	adds	r3, r7, r3
     34a:	2200      	movs	r2, #0
     34c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     34e:	2310      	movs	r3, #16
     350:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     352:	2317      	movs	r3, #23
     354:	18fb      	adds	r3, r7, r3
     356:	2200      	movs	r2, #0
     358:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     360:	230c      	movs	r3, #12
     362:	18fb      	adds	r3, r7, r3
     364:	0018      	movs	r0, r3
     366:	4bce      	ldr	r3, [pc, #824]	; (6a0 <_adc_set_config+0x364>)
     368:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     36a:	683b      	ldr	r3, [r7, #0]
     36c:	781a      	ldrb	r2, [r3, #0]
     36e:	230c      	movs	r3, #12
     370:	18fb      	adds	r3, r7, r3
     372:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     374:	230c      	movs	r3, #12
     376:	18fb      	adds	r3, r7, r3
     378:	0019      	movs	r1, r3
     37a:	201e      	movs	r0, #30
     37c:	4bc9      	ldr	r3, [pc, #804]	; (6a4 <_adc_set_config+0x368>)
     37e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     380:	201e      	movs	r0, #30
     382:	4bc9      	ldr	r3, [pc, #804]	; (6a8 <_adc_set_config+0x36c>)
     384:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     386:	683b      	ldr	r3, [r7, #0]
     388:	222c      	movs	r2, #44	; 0x2c
     38a:	5c9b      	ldrb	r3, [r3, r2]
     38c:	2b00      	cmp	r3, #0
     38e:	d040      	beq.n	412 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     390:	2316      	movs	r3, #22
     392:	18fb      	adds	r3, r7, r3
     394:	683a      	ldr	r2, [r7, #0]
     396:	212b      	movs	r1, #43	; 0x2b
     398:	5c52      	ldrb	r2, [r2, r1]
     39a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     39c:	683b      	ldr	r3, [r7, #0]
     39e:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     3a0:	2315      	movs	r3, #21
     3a2:	18fb      	adds	r3, r7, r3
     3a4:	2216      	movs	r2, #22
     3a6:	18ba      	adds	r2, r7, r2
     3a8:	7812      	ldrb	r2, [r2, #0]
     3aa:	188a      	adds	r2, r1, r2
     3ac:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     3ae:	683b      	ldr	r3, [r7, #0]
     3b0:	222c      	movs	r2, #44	; 0x2c
     3b2:	5c99      	ldrb	r1, [r3, r2]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     3b4:	230f      	movs	r3, #15
     3b6:	18fb      	adds	r3, r7, r3
     3b8:	2215      	movs	r2, #21
     3ba:	18ba      	adds	r2, r7, r2
     3bc:	7812      	ldrb	r2, [r2, #0]
     3be:	188a      	adds	r2, r1, r2
     3c0:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     3c2:	e018      	b.n	3f6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     3c4:	2316      	movs	r3, #22
     3c6:	18fb      	adds	r3, r7, r3
     3c8:	781b      	ldrb	r3, [r3, #0]
     3ca:	220f      	movs	r2, #15
     3cc:	4013      	ands	r3, r2
     3ce:	683a      	ldr	r2, [r7, #0]
     3d0:	7b12      	ldrb	r2, [r2, #12]
     3d2:	189b      	adds	r3, r3, r2
     3d4:	0018      	movs	r0, r3
     3d6:	4bb5      	ldr	r3, [pc, #724]	; (6ac <_adc_set_config+0x370>)
     3d8:	4798      	blx	r3
			start_pin++;
     3da:	2315      	movs	r3, #21
     3dc:	18fb      	adds	r3, r7, r3
     3de:	781a      	ldrb	r2, [r3, #0]
     3e0:	2315      	movs	r3, #21
     3e2:	18fb      	adds	r3, r7, r3
     3e4:	3201      	adds	r2, #1
     3e6:	701a      	strb	r2, [r3, #0]
			offset++;
     3e8:	2316      	movs	r3, #22
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	781a      	ldrb	r2, [r3, #0]
     3ee:	2316      	movs	r3, #22
     3f0:	18fb      	adds	r3, r7, r3
     3f2:	3201      	adds	r2, #1
     3f4:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     3f6:	2315      	movs	r3, #21
     3f8:	18fa      	adds	r2, r7, r3
     3fa:	230f      	movs	r3, #15
     3fc:	18fb      	adds	r3, r7, r3
     3fe:	7812      	ldrb	r2, [r2, #0]
     400:	781b      	ldrb	r3, [r3, #0]
     402:	429a      	cmp	r2, r3
     404:	d3de      	bcc.n	3c4 <_adc_set_config+0x88>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     406:	683b      	ldr	r3, [r7, #0]
     408:	89db      	ldrh	r3, [r3, #14]
     40a:	0018      	movs	r0, r3
     40c:	4ba7      	ldr	r3, [pc, #668]	; (6ac <_adc_set_config+0x370>)
     40e:	4798      	blx	r3
     410:	e009      	b.n	426 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     412:	683b      	ldr	r3, [r7, #0]
     414:	7b1b      	ldrb	r3, [r3, #12]
     416:	0018      	movs	r0, r3
     418:	4ba4      	ldr	r3, [pc, #656]	; (6ac <_adc_set_config+0x370>)
     41a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     41c:	683b      	ldr	r3, [r7, #0]
     41e:	89db      	ldrh	r3, [r3, #14]
     420:	0018      	movs	r0, r3
     422:	4ba2      	ldr	r3, [pc, #648]	; (6ac <_adc_set_config+0x370>)
     424:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     426:	683b      	ldr	r3, [r7, #0]
     428:	7d5b      	ldrb	r3, [r3, #21]
     42a:	009b      	lsls	r3, r3, #2
     42c:	b2da      	uxtb	r2, r3
     42e:	693b      	ldr	r3, [r7, #16]
     430:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     432:	683b      	ldr	r3, [r7, #0]
     434:	7d9b      	ldrb	r3, [r3, #22]
     436:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     438:	b25a      	sxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
     43a:	683b      	ldr	r3, [r7, #0]
     43c:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     43e:	b25b      	sxtb	r3, r3
     440:	4313      	orrs	r3, r2
     442:	b25b      	sxtb	r3, r3
     444:	b2da      	uxtb	r2, r3
     446:	693b      	ldr	r3, [r7, #16]
     448:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     44a:	683b      	ldr	r3, [r7, #0]
     44c:	791b      	ldrb	r3, [r3, #4]
     44e:	2b34      	cmp	r3, #52	; 0x34
     450:	d846      	bhi.n	4e0 <_adc_set_config+0x1a4>
     452:	009a      	lsls	r2, r3, #2
     454:	4b96      	ldr	r3, [pc, #600]	; (6b0 <_adc_set_config+0x374>)
     456:	18d3      	adds	r3, r2, r3
     458:	681b      	ldr	r3, [r3, #0]
     45a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     45c:	231f      	movs	r3, #31
     45e:	18fb      	adds	r3, r7, r3
     460:	683a      	ldr	r2, [r7, #0]
     462:	7c52      	ldrb	r2, [r2, #17]
     464:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     466:	2317      	movs	r3, #23
     468:	18fb      	adds	r3, r7, r3
     46a:	683a      	ldr	r2, [r7, #0]
     46c:	7c12      	ldrb	r2, [r2, #16]
     46e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     470:	2310      	movs	r3, #16
     472:	61bb      	str	r3, [r7, #24]
		break;
     474:	e036      	b.n	4e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     476:	231f      	movs	r3, #31
     478:	18fb      	adds	r3, r7, r3
     47a:	2201      	movs	r2, #1
     47c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     47e:	2317      	movs	r3, #23
     480:	18fb      	adds	r3, r7, r3
     482:	2202      	movs	r2, #2
     484:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     486:	2310      	movs	r3, #16
     488:	61bb      	str	r3, [r7, #24]
		break;
     48a:	e02b      	b.n	4e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     48c:	231f      	movs	r3, #31
     48e:	18fb      	adds	r3, r7, r3
     490:	2202      	movs	r2, #2
     492:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     494:	2317      	movs	r3, #23
     496:	18fb      	adds	r3, r7, r3
     498:	2204      	movs	r2, #4
     49a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     49c:	2310      	movs	r3, #16
     49e:	61bb      	str	r3, [r7, #24]
		break;
     4a0:	e020      	b.n	4e4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     4a2:	231f      	movs	r3, #31
     4a4:	18fb      	adds	r3, r7, r3
     4a6:	2201      	movs	r2, #1
     4a8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     4aa:	2317      	movs	r3, #23
     4ac:	18fb      	adds	r3, r7, r3
     4ae:	2206      	movs	r2, #6
     4b0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4b2:	2310      	movs	r3, #16
     4b4:	61bb      	str	r3, [r7, #24]
		break;
     4b6:	e015      	b.n	4e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     4b8:	231f      	movs	r3, #31
     4ba:	18fb      	adds	r3, r7, r3
     4bc:	2200      	movs	r2, #0
     4be:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     4c0:	2317      	movs	r3, #23
     4c2:	18fb      	adds	r3, r7, r3
     4c4:	2208      	movs	r2, #8
     4c6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4c8:	2310      	movs	r3, #16
     4ca:	61bb      	str	r3, [r7, #24]
		break;
     4cc:	e00a      	b.n	4e4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     4ce:	2330      	movs	r3, #48	; 0x30
     4d0:	61bb      	str	r3, [r7, #24]
		break;
     4d2:	e007      	b.n	4e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     4d4:	2320      	movs	r3, #32
     4d6:	61bb      	str	r3, [r7, #24]
		break;
     4d8:	e004      	b.n	4e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     4da:	2300      	movs	r3, #0
     4dc:	61bb      	str	r3, [r7, #24]
		break;
     4de:	e001      	b.n	4e4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     4e0:	2317      	movs	r3, #23
     4e2:	e1ae      	b.n	842 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     4e4:	231f      	movs	r3, #31
     4e6:	18fb      	adds	r3, r7, r3
     4e8:	781b      	ldrb	r3, [r3, #0]
     4ea:	011b      	lsls	r3, r3, #4
     4ec:	b2db      	uxtb	r3, r3
     4ee:	2270      	movs	r2, #112	; 0x70
     4f0:	4013      	ands	r3, r2
     4f2:	b2da      	uxtb	r2, r3
     4f4:	2317      	movs	r3, #23
     4f6:	18fb      	adds	r3, r7, r3
     4f8:	781b      	ldrb	r3, [r3, #0]
     4fa:	4313      	orrs	r3, r2
     4fc:	b2da      	uxtb	r2, r3
     4fe:	693b      	ldr	r3, [r7, #16]
     500:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     502:	683b      	ldr	r3, [r7, #0]
     504:	7ddb      	ldrb	r3, [r3, #23]
     506:	2b3f      	cmp	r3, #63	; 0x3f
     508:	d901      	bls.n	50e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     50a:	2317      	movs	r3, #23
     50c:	e199      	b.n	842 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     50e:	683b      	ldr	r3, [r7, #0]
     510:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     512:	693b      	ldr	r3, [r7, #16]
     514:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     516:	46c0      	nop			; (mov r8, r8)
     518:	687b      	ldr	r3, [r7, #4]
     51a:	0018      	movs	r0, r3
     51c:	4b65      	ldr	r3, [pc, #404]	; (6b4 <_adc_set_config+0x378>)
     51e:	4798      	blx	r3
     520:	1e03      	subs	r3, r0, #0
     522:	d1f9      	bne.n	518 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     524:	683b      	ldr	r3, [r7, #0]
     526:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     528:	69bb      	ldr	r3, [r7, #24]
     52a:	b29b      	uxth	r3, r3
     52c:	4313      	orrs	r3, r2
     52e:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     530:	683b      	ldr	r3, [r7, #0]
     532:	2124      	movs	r1, #36	; 0x24
     534:	5c5b      	ldrb	r3, [r3, r1]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     536:	b29b      	uxth	r3, r3
     538:	00db      	lsls	r3, r3, #3
     53a:	b29b      	uxth	r3, r3
     53c:	4313      	orrs	r3, r2
     53e:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     540:	683b      	ldr	r3, [r7, #0]
     542:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     544:	b29b      	uxth	r3, r3
     546:	009b      	lsls	r3, r3, #2
     548:	b29b      	uxth	r3, r3
     54a:	4313      	orrs	r3, r2
     54c:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     54e:	683b      	ldr	r3, [r7, #0]
     550:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     552:	b29b      	uxth	r3, r3
     554:	18db      	adds	r3, r3, r3
     556:	b29b      	uxth	r3, r3
     558:	4313      	orrs	r3, r2
     55a:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     55c:	683b      	ldr	r3, [r7, #0]
     55e:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     560:	b29b      	uxth	r3, r3
     562:	4313      	orrs	r3, r2
     564:	b29a      	uxth	r2, r3
     566:	693b      	ldr	r3, [r7, #16]
     568:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     56a:	683b      	ldr	r3, [r7, #0]
     56c:	7e1b      	ldrb	r3, [r3, #24]
     56e:	2b00      	cmp	r3, #0
     570:	d100      	bne.n	574 <_adc_set_config+0x238>
     572:	e0c4      	b.n	6fe <_adc_set_config+0x3c2>
		switch (resolution) {
     574:	69bb      	ldr	r3, [r7, #24]
     576:	2b10      	cmp	r3, #16
     578:	d100      	bne.n	57c <_adc_set_config+0x240>
     57a:	e076      	b.n	66a <_adc_set_config+0x32e>
     57c:	d802      	bhi.n	584 <_adc_set_config+0x248>
     57e:	2b00      	cmp	r3, #0
     580:	d04d      	beq.n	61e <_adc_set_config+0x2e2>
     582:	e0bc      	b.n	6fe <_adc_set_config+0x3c2>
     584:	2b20      	cmp	r3, #32
     586:	d023      	beq.n	5d0 <_adc_set_config+0x294>
     588:	2b30      	cmp	r3, #48	; 0x30
     58a:	d000      	beq.n	58e <_adc_set_config+0x252>
     58c:	e0b7      	b.n	6fe <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     58e:	683b      	ldr	r3, [r7, #0]
     590:	7cdb      	ldrb	r3, [r3, #19]
     592:	2b00      	cmp	r3, #0
     594:	d011      	beq.n	5ba <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     596:	683b      	ldr	r3, [r7, #0]
     598:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     59a:	2b7f      	cmp	r3, #127	; 0x7f
     59c:	dc0b      	bgt.n	5b6 <_adc_set_config+0x27a>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     59e:	683b      	ldr	r3, [r7, #0]
     5a0:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
     5a2:	3380      	adds	r3, #128	; 0x80
     5a4:	db07      	blt.n	5b6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     5a6:	683b      	ldr	r3, [r7, #0]
     5a8:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     5aa:	2b7f      	cmp	r3, #127	; 0x7f
     5ac:	dc03      	bgt.n	5b6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
     5ae:	683b      	ldr	r3, [r7, #0]
     5b0:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     5b2:	3380      	adds	r3, #128	; 0x80
     5b4:	da01      	bge.n	5ba <_adc_set_config+0x27e>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5b6:	2317      	movs	r3, #23
     5b8:	e143      	b.n	842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
     5ba:	683b      	ldr	r3, [r7, #0]
     5bc:	69db      	ldr	r3, [r3, #28]
     5be:	2bff      	cmp	r3, #255	; 0xff
     5c0:	dc04      	bgt.n	5cc <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
     5c2:	683b      	ldr	r3, [r7, #0]
     5c4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     5c6:	2bff      	cmp	r3, #255	; 0xff
     5c8:	dc00      	bgt.n	5cc <_adc_set_config+0x290>
     5ca:	e091      	b.n	6f0 <_adc_set_config+0x3b4>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5cc:	2317      	movs	r3, #23
     5ce:	e138      	b.n	842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     5d0:	683b      	ldr	r3, [r7, #0]
     5d2:	7cdb      	ldrb	r3, [r3, #19]
     5d4:	2b00      	cmp	r3, #0
     5d6:	d015      	beq.n	604 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     5d8:	683b      	ldr	r3, [r7, #0]
     5da:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     5dc:	4a36      	ldr	r2, [pc, #216]	; (6b8 <_adc_set_config+0x37c>)
     5de:	4293      	cmp	r3, r2
     5e0:	dc0e      	bgt.n	600 <_adc_set_config+0x2c4>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     5e2:	683b      	ldr	r3, [r7, #0]
     5e4:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
     5e6:	4a35      	ldr	r2, [pc, #212]	; (6bc <_adc_set_config+0x380>)
     5e8:	4293      	cmp	r3, r2
     5ea:	db09      	blt.n	600 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     5ec:	683b      	ldr	r3, [r7, #0]
     5ee:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     5f0:	4a31      	ldr	r2, [pc, #196]	; (6b8 <_adc_set_config+0x37c>)
     5f2:	4293      	cmp	r3, r2
     5f4:	dc04      	bgt.n	600 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
     5f6:	683b      	ldr	r3, [r7, #0]
     5f8:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     5fa:	4a30      	ldr	r2, [pc, #192]	; (6bc <_adc_set_config+0x380>)
     5fc:	4293      	cmp	r3, r2
     5fe:	da01      	bge.n	604 <_adc_set_config+0x2c8>
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     600:	2317      	movs	r3, #23
     602:	e11e      	b.n	842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
     604:	683b      	ldr	r3, [r7, #0]
     606:	69db      	ldr	r3, [r3, #28]
     608:	4a2d      	ldr	r2, [pc, #180]	; (6c0 <_adc_set_config+0x384>)
     60a:	4293      	cmp	r3, r2
     60c:	dc05      	bgt.n	61a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
     60e:	683b      	ldr	r3, [r7, #0]
     610:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     612:	4a2b      	ldr	r2, [pc, #172]	; (6c0 <_adc_set_config+0x384>)
     614:	4293      	cmp	r3, r2
     616:	dc00      	bgt.n	61a <_adc_set_config+0x2de>
     618:	e06c      	b.n	6f4 <_adc_set_config+0x3b8>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     61a:	2317      	movs	r3, #23
     61c:	e111      	b.n	842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     61e:	683b      	ldr	r3, [r7, #0]
     620:	7cdb      	ldrb	r3, [r3, #19]
     622:	2b00      	cmp	r3, #0
     624:	d015      	beq.n	652 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     626:	683b      	ldr	r3, [r7, #0]
     628:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     62a:	4a26      	ldr	r2, [pc, #152]	; (6c4 <_adc_set_config+0x388>)
     62c:	4293      	cmp	r3, r2
     62e:	dc0e      	bgt.n	64e <_adc_set_config+0x312>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     630:	683b      	ldr	r3, [r7, #0]
     632:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
     634:	4a24      	ldr	r2, [pc, #144]	; (6c8 <_adc_set_config+0x38c>)
     636:	4293      	cmp	r3, r2
     638:	db09      	blt.n	64e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     63a:	683b      	ldr	r3, [r7, #0]
     63c:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     63e:	4a21      	ldr	r2, [pc, #132]	; (6c4 <_adc_set_config+0x388>)
     640:	4293      	cmp	r3, r2
     642:	dc04      	bgt.n	64e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
     644:	683b      	ldr	r3, [r7, #0]
     646:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     648:	4a1f      	ldr	r2, [pc, #124]	; (6c8 <_adc_set_config+0x38c>)
     64a:	4293      	cmp	r3, r2
     64c:	da01      	bge.n	652 <_adc_set_config+0x316>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     64e:	2317      	movs	r3, #23
     650:	e0f7      	b.n	842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
     652:	683b      	ldr	r3, [r7, #0]
     654:	69db      	ldr	r3, [r3, #28]
     656:	4a1d      	ldr	r2, [pc, #116]	; (6cc <_adc_set_config+0x390>)
     658:	4293      	cmp	r3, r2
     65a:	dc04      	bgt.n	666 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
     65c:	683b      	ldr	r3, [r7, #0]
     65e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     660:	4a1a      	ldr	r2, [pc, #104]	; (6cc <_adc_set_config+0x390>)
     662:	4293      	cmp	r3, r2
     664:	dd48      	ble.n	6f8 <_adc_set_config+0x3bc>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     666:	2317      	movs	r3, #23
     668:	e0eb      	b.n	842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     66a:	683b      	ldr	r3, [r7, #0]
     66c:	7cdb      	ldrb	r3, [r3, #19]
     66e:	2b00      	cmp	r3, #0
     670:	d032      	beq.n	6d8 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
     672:	683b      	ldr	r3, [r7, #0]
     674:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     676:	4a16      	ldr	r2, [pc, #88]	; (6d0 <_adc_set_config+0x394>)
     678:	4293      	cmp	r3, r2
     67a:	dc0e      	bgt.n	69a <_adc_set_config+0x35e>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     67c:	683b      	ldr	r3, [r7, #0]
     67e:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
     680:	4a14      	ldr	r2, [pc, #80]	; (6d4 <_adc_set_config+0x398>)
     682:	4293      	cmp	r3, r2
     684:	db09      	blt.n	69a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     686:	683b      	ldr	r3, [r7, #0]
     688:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     68a:	4a11      	ldr	r2, [pc, #68]	; (6d0 <_adc_set_config+0x394>)
     68c:	4293      	cmp	r3, r2
     68e:	dc04      	bgt.n	69a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
     690:	683b      	ldr	r3, [r7, #0]
     692:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     694:	4a0f      	ldr	r2, [pc, #60]	; (6d4 <_adc_set_config+0x398>)
     696:	4293      	cmp	r3, r2
     698:	da1e      	bge.n	6d8 <_adc_set_config+0x39c>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     69a:	2317      	movs	r3, #23
     69c:	e0d1      	b.n	842 <_adc_set_config+0x506>
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	00000115 	.word	0x00000115
     6a4:	0000bb31 	.word	0x0000bb31
     6a8:	0000bb75 	.word	0x0000bb75
     6ac:	000002c5 	.word	0x000002c5
     6b0:	0000f948 	.word	0x0000f948
     6b4:	000001f1 	.word	0x000001f1
     6b8:	000001ff 	.word	0x000001ff
     6bc:	fffffe00 	.word	0xfffffe00
     6c0:	000003ff 	.word	0x000003ff
     6c4:	000007ff 	.word	0x000007ff
     6c8:	fffff800 	.word	0xfffff800
     6cc:	00000fff 	.word	0x00000fff
     6d0:	00007fff 	.word	0x00007fff
     6d4:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
     6d8:	683b      	ldr	r3, [r7, #0]
     6da:	69db      	ldr	r3, [r3, #28]
     6dc:	4a5b      	ldr	r2, [pc, #364]	; (84c <_adc_set_config+0x510>)
     6de:	4293      	cmp	r3, r2
     6e0:	dc04      	bgt.n	6ec <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
     6e2:	683b      	ldr	r3, [r7, #0]
     6e4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     6e6:	4a59      	ldr	r2, [pc, #356]	; (84c <_adc_set_config+0x510>)
     6e8:	4293      	cmp	r3, r2
     6ea:	dd07      	ble.n	6fc <_adc_set_config+0x3c0>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6ec:	2317      	movs	r3, #23
     6ee:	e0a8      	b.n	842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     6f0:	46c0      	nop			; (mov r8, r8)
     6f2:	e004      	b.n	6fe <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     6f4:	46c0      	nop			; (mov r8, r8)
     6f6:	e002      	b.n	6fe <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     6f8:	46c0      	nop			; (mov r8, r8)
     6fa:	e000      	b.n	6fe <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
     6fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	687b      	ldr	r3, [r7, #4]
     702:	0018      	movs	r0, r3
     704:	4b52      	ldr	r3, [pc, #328]	; (850 <_adc_set_config+0x514>)
     706:	4798      	blx	r3
     708:	1e03      	subs	r3, r0, #0
     70a:	d1f9      	bne.n	700 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     70c:	683b      	ldr	r3, [r7, #0]
     70e:	7e1a      	ldrb	r2, [r3, #24]
     710:	693b      	ldr	r3, [r7, #16]
     712:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     714:	46c0      	nop			; (mov r8, r8)
     716:	687b      	ldr	r3, [r7, #4]
     718:	0018      	movs	r0, r3
     71a:	4b4d      	ldr	r3, [pc, #308]	; (850 <_adc_set_config+0x514>)
     71c:	4798      	blx	r3
     71e:	1e03      	subs	r3, r0, #0
     720:	d1f9      	bne.n	716 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     722:	683b      	ldr	r3, [r7, #0]
     724:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     726:	b29a      	uxth	r2, r3
     728:	693b      	ldr	r3, [r7, #16]
     72a:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     72c:	46c0      	nop			; (mov r8, r8)
     72e:	687b      	ldr	r3, [r7, #4]
     730:	0018      	movs	r0, r3
     732:	4b47      	ldr	r3, [pc, #284]	; (850 <_adc_set_config+0x514>)
     734:	4798      	blx	r3
     736:	1e03      	subs	r3, r0, #0
     738:	d1f9      	bne.n	72e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     73a:	683b      	ldr	r3, [r7, #0]
     73c:	6a1b      	ldr	r3, [r3, #32]
     73e:	b29a      	uxth	r2, r3
     740:	693b      	ldr	r3, [r7, #16]
     742:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     744:	2314      	movs	r3, #20
     746:	18fb      	adds	r3, r7, r3
     748:	683a      	ldr	r2, [r7, #0]
     74a:	212c      	movs	r1, #44	; 0x2c
     74c:	5c52      	ldrb	r2, [r2, r1]
     74e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     750:	2314      	movs	r3, #20
     752:	18fb      	adds	r3, r7, r3
     754:	781b      	ldrb	r3, [r3, #0]
     756:	2b00      	cmp	r3, #0
     758:	d006      	beq.n	768 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     75a:	2314      	movs	r3, #20
     75c:	18fb      	adds	r3, r7, r3
     75e:	781a      	ldrb	r2, [r3, #0]
     760:	2314      	movs	r3, #20
     762:	18fb      	adds	r3, r7, r3
     764:	3a01      	subs	r2, #1
     766:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     768:	2314      	movs	r3, #20
     76a:	18fb      	adds	r3, r7, r3
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	2b0f      	cmp	r3, #15
     770:	d804      	bhi.n	77c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     772:	683b      	ldr	r3, [r7, #0]
     774:	222b      	movs	r2, #43	; 0x2b
     776:	5c9b      	ldrb	r3, [r3, r2]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     778:	2b0f      	cmp	r3, #15
     77a:	d901      	bls.n	780 <_adc_set_config+0x444>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     77c:	2317      	movs	r3, #23
     77e:	e060      	b.n	842 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
     780:	46c0      	nop			; (mov r8, r8)
     782:	687b      	ldr	r3, [r7, #4]
     784:	0018      	movs	r0, r3
     786:	4b32      	ldr	r3, [pc, #200]	; (850 <_adc_set_config+0x514>)
     788:	4798      	blx	r3
     78a:	1e03      	subs	r3, r0, #0
     78c:	d1f9      	bne.n	782 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     78e:	683b      	ldr	r3, [r7, #0]
     790:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     792:	683a      	ldr	r2, [r7, #0]
     794:	212b      	movs	r1, #43	; 0x2b
     796:	5c52      	ldrb	r2, [r2, r1]
     798:	0512      	lsls	r2, r2, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     79a:	4313      	orrs	r3, r2
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     79c:	2214      	movs	r2, #20
     79e:	18ba      	adds	r2, r7, r2
     7a0:	7812      	ldrb	r2, [r2, #0]
     7a2:	0412      	lsls	r2, r2, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     7a4:	4313      	orrs	r3, r2
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     7a6:	683a      	ldr	r2, [r7, #0]
     7a8:	89d2      	ldrh	r2, [r2, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     7aa:	4313      	orrs	r3, r2
			config->negative_input |
			config->positive_input;
     7ac:	683a      	ldr	r2, [r7, #0]
     7ae:	7b12      	ldrb	r2, [r2, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     7b0:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     7b2:	693b      	ldr	r3, [r7, #16]
     7b4:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     7b6:	683b      	ldr	r3, [r7, #0]
     7b8:	222a      	movs	r2, #42	; 0x2a
     7ba:	5c9a      	ldrb	r2, [r3, r2]
     7bc:	693b      	ldr	r3, [r7, #16]
     7be:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     7c0:	693b      	ldr	r3, [r7, #16]
     7c2:	220f      	movs	r2, #15
     7c4:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     7c6:	683b      	ldr	r3, [r7, #0]
     7c8:	2224      	movs	r2, #36	; 0x24
     7ca:	5c9b      	ldrb	r3, [r3, r2]
     7cc:	2b00      	cmp	r3, #0
     7ce:	d01e      	beq.n	80e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     7d0:	683b      	ldr	r3, [r7, #0]
     7d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     7d4:	4a1f      	ldr	r2, [pc, #124]	; (854 <_adc_set_config+0x518>)
     7d6:	4293      	cmp	r3, r2
     7d8:	d901      	bls.n	7de <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
     7da:	2317      	movs	r3, #23
     7dc:	e031      	b.n	842 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     7de:	683b      	ldr	r3, [r7, #0]
     7e0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     7e2:	693b      	ldr	r3, [r7, #16]
     7e4:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     7e6:	683b      	ldr	r3, [r7, #0]
     7e8:	2228      	movs	r2, #40	; 0x28
     7ea:	5e9b      	ldrsh	r3, [r3, r2]
     7ec:	4a1a      	ldr	r2, [pc, #104]	; (858 <_adc_set_config+0x51c>)
     7ee:	4293      	cmp	r3, r2
     7f0:	dc05      	bgt.n	7fe <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
     7f2:	683b      	ldr	r3, [r7, #0]
     7f4:	2228      	movs	r2, #40	; 0x28
     7f6:	5e9b      	ldrsh	r3, [r3, r2]
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     7f8:	4a18      	ldr	r2, [pc, #96]	; (85c <_adc_set_config+0x520>)
     7fa:	4293      	cmp	r3, r2
     7fc:	da01      	bge.n	802 <_adc_set_config+0x4c6>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     7fe:	2317      	movs	r3, #23
     800:	e01f      	b.n	842 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     802:	683b      	ldr	r3, [r7, #0]
     804:	2228      	movs	r2, #40	; 0x28
     806:	5e9b      	ldrsh	r3, [r3, r2]
     808:	b29a      	uxth	r2, r3
     80a:	693b      	ldr	r3, [r7, #16]
     80c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     80e:	4b14      	ldr	r3, [pc, #80]	; (860 <_adc_set_config+0x524>)
     810:	681b      	ldr	r3, [r3, #0]
     812:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     814:	b29b      	uxth	r3, r3
     816:	021b      	lsls	r3, r3, #8
     818:	b29a      	uxth	r2, r3
     81a:	23e0      	movs	r3, #224	; 0xe0
     81c:	00db      	lsls	r3, r3, #3
     81e:	4013      	ands	r3, r2
     820:	b29a      	uxth	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     822:	4b10      	ldr	r3, [pc, #64]	; (864 <_adc_set_config+0x528>)
     824:	685c      	ldr	r4, [r3, #4]
     826:	681b      	ldr	r3, [r3, #0]
     828:	0161      	lsls	r1, r4, #5
     82a:	0edd      	lsrs	r5, r3, #27
     82c:	430d      	orrs	r5, r1
     82e:	0ee6      	lsrs	r6, r4, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     830:	b2ab      	uxth	r3, r5
     832:	21ff      	movs	r1, #255	; 0xff
     834:	400b      	ands	r3, r1
     836:	b29b      	uxth	r3, r3
     838:	4313      	orrs	r3, r2
     83a:	b29a      	uxth	r2, r3
     83c:	693b      	ldr	r3, [r7, #16]
     83e:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     840:	2300      	movs	r3, #0
}
     842:	0018      	movs	r0, r3
     844:	46bd      	mov	sp, r7
     846:	b009      	add	sp, #36	; 0x24
     848:	bdf0      	pop	{r4, r5, r6, r7, pc}
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	0000ffff 	.word	0x0000ffff
     850:	000001f1 	.word	0x000001f1
     854:	00000fff 	.word	0x00000fff
     858:	000007ff 	.word	0x000007ff
     85c:	fffff800 	.word	0xfffff800
     860:	00806024 	.word	0x00806024
     864:	00806020 	.word	0x00806020

00000868 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     868:	b580      	push	{r7, lr}
     86a:	b084      	sub	sp, #16
     86c:	af00      	add	r7, sp, #0
     86e:	60f8      	str	r0, [r7, #12]
     870:	60b9      	str	r1, [r7, #8]
     872:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     874:	68fb      	ldr	r3, [r7, #12]
     876:	68ba      	ldr	r2, [r7, #8]
     878:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     87a:	2380      	movs	r3, #128	; 0x80
     87c:	025b      	lsls	r3, r3, #9
     87e:	0019      	movs	r1, r3
     880:	2002      	movs	r0, #2
     882:	4b15      	ldr	r3, [pc, #84]	; (8d8 <adc_init+0x70>)
     884:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     886:	68bb      	ldr	r3, [r7, #8]
     888:	781b      	ldrb	r3, [r3, #0]
     88a:	b2db      	uxtb	r3, r3
     88c:	001a      	movs	r2, r3
     88e:	2301      	movs	r3, #1
     890:	4013      	ands	r3, r2
     892:	d001      	beq.n	898 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     894:	2305      	movs	r3, #5
     896:	e01a      	b.n	8ce <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     898:	68bb      	ldr	r3, [r7, #8]
     89a:	781b      	ldrb	r3, [r3, #0]
     89c:	b2db      	uxtb	r3, r3
     89e:	001a      	movs	r2, r3
     8a0:	2302      	movs	r3, #2
     8a2:	4013      	ands	r3, r2
     8a4:	d001      	beq.n	8aa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     8a6:	231c      	movs	r3, #28
     8a8:	e011      	b.n	8ce <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	785a      	ldrb	r2, [r3, #1]
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	791b      	ldrb	r3, [r3, #4]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d102      	bne.n	8c0 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     8ba:	2001      	movs	r0, #1
     8bc:	4b07      	ldr	r3, [pc, #28]	; (8dc <adc_init+0x74>)
     8be:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     8c0:	687a      	ldr	r2, [r7, #4]
     8c2:	68fb      	ldr	r3, [r7, #12]
     8c4:	0011      	movs	r1, r2
     8c6:	0018      	movs	r0, r3
     8c8:	4b05      	ldr	r3, [pc, #20]	; (8e0 <adc_init+0x78>)
     8ca:	4798      	blx	r3
     8cc:	0003      	movs	r3, r0
}
     8ce:	0018      	movs	r0, r3
     8d0:	46bd      	mov	sp, r7
     8d2:	b004      	add	sp, #16
     8d4:	bd80      	pop	{r7, pc}
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	0000012d 	.word	0x0000012d
     8dc:	000001b1 	.word	0x000001b1
     8e0:	0000033d 	.word	0x0000033d

000008e4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     8e4:	b580      	push	{r7, lr}
     8e6:	b082      	sub	sp, #8
     8e8:	af00      	add	r7, sp, #0
     8ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	2200      	movs	r2, #0
     8f0:	701a      	strb	r2, [r3, #0]
}
     8f2:	46c0      	nop			; (mov r8, r8)
     8f4:	46bd      	mov	sp, r7
     8f6:	b002      	add	sp, #8
     8f8:	bd80      	pop	{r7, pc}
     8fa:	46c0      	nop			; (mov r8, r8)

000008fc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     8fc:	b580      	push	{r7, lr}
     8fe:	b082      	sub	sp, #8
     900:	af00      	add	r7, sp, #0
     902:	0002      	movs	r2, r0
     904:	6039      	str	r1, [r7, #0]
     906:	1dfb      	adds	r3, r7, #7
     908:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     90a:	1dfb      	adds	r3, r7, #7
     90c:	781b      	ldrb	r3, [r3, #0]
     90e:	2b01      	cmp	r3, #1
     910:	d00a      	beq.n	928 <system_apb_clock_set_mask+0x2c>
     912:	2b02      	cmp	r3, #2
     914:	d00f      	beq.n	936 <system_apb_clock_set_mask+0x3a>
     916:	2b00      	cmp	r3, #0
     918:	d114      	bne.n	944 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     91a:	4b0e      	ldr	r3, [pc, #56]	; (954 <system_apb_clock_set_mask+0x58>)
     91c:	4a0d      	ldr	r2, [pc, #52]	; (954 <system_apb_clock_set_mask+0x58>)
     91e:	6991      	ldr	r1, [r2, #24]
     920:	683a      	ldr	r2, [r7, #0]
     922:	430a      	orrs	r2, r1
     924:	619a      	str	r2, [r3, #24]
			break;
     926:	e00f      	b.n	948 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     928:	4b0a      	ldr	r3, [pc, #40]	; (954 <system_apb_clock_set_mask+0x58>)
     92a:	4a0a      	ldr	r2, [pc, #40]	; (954 <system_apb_clock_set_mask+0x58>)
     92c:	69d1      	ldr	r1, [r2, #28]
     92e:	683a      	ldr	r2, [r7, #0]
     930:	430a      	orrs	r2, r1
     932:	61da      	str	r2, [r3, #28]
			break;
     934:	e008      	b.n	948 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     936:	4b07      	ldr	r3, [pc, #28]	; (954 <system_apb_clock_set_mask+0x58>)
     938:	4a06      	ldr	r2, [pc, #24]	; (954 <system_apb_clock_set_mask+0x58>)
     93a:	6a11      	ldr	r1, [r2, #32]
     93c:	683a      	ldr	r2, [r7, #0]
     93e:	430a      	orrs	r2, r1
     940:	621a      	str	r2, [r3, #32]
			break;
     942:	e001      	b.n	948 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     944:	2317      	movs	r3, #23
     946:	e000      	b.n	94a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     948:	2300      	movs	r3, #0
}
     94a:	0018      	movs	r0, r3
     94c:	46bd      	mov	sp, r7
     94e:	b002      	add	sp, #8
     950:	bd80      	pop	{r7, pc}
     952:	46c0      	nop			; (mov r8, r8)
     954:	40000400 	.word	0x40000400

00000958 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     958:	b580      	push	{r7, lr}
     95a:	b082      	sub	sp, #8
     95c:	af00      	add	r7, sp, #0
     95e:	0002      	movs	r2, r0
     960:	1dfb      	adds	r3, r7, #7
     962:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     964:	4b06      	ldr	r3, [pc, #24]	; (980 <system_interrupt_enable+0x28>)
     966:	1dfa      	adds	r2, r7, #7
     968:	7812      	ldrb	r2, [r2, #0]
     96a:	0011      	movs	r1, r2
     96c:	221f      	movs	r2, #31
     96e:	400a      	ands	r2, r1
     970:	2101      	movs	r1, #1
     972:	4091      	lsls	r1, r2
     974:	000a      	movs	r2, r1
     976:	601a      	str	r2, [r3, #0]
}
     978:	46c0      	nop			; (mov r8, r8)
     97a:	46bd      	mov	sp, r7
     97c:	b002      	add	sp, #8
     97e:	bd80      	pop	{r7, pc}
     980:	e000e100 	.word	0xe000e100

00000984 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     984:	b580      	push	{r7, lr}
     986:	b082      	sub	sp, #8
     988:	af00      	add	r7, sp, #0
     98a:	0002      	movs	r2, r0
     98c:	1dfb      	adds	r3, r7, #7
     98e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     990:	4a07      	ldr	r2, [pc, #28]	; (9b0 <system_interrupt_disable+0x2c>)
     992:	1dfb      	adds	r3, r7, #7
     994:	781b      	ldrb	r3, [r3, #0]
     996:	0019      	movs	r1, r3
     998:	231f      	movs	r3, #31
     99a:	400b      	ands	r3, r1
     99c:	2101      	movs	r1, #1
     99e:	4099      	lsls	r1, r3
     9a0:	000b      	movs	r3, r1
     9a2:	0019      	movs	r1, r3
     9a4:	2380      	movs	r3, #128	; 0x80
     9a6:	50d1      	str	r1, [r2, r3]
}
     9a8:	46c0      	nop			; (mov r8, r8)
     9aa:	46bd      	mov	sp, r7
     9ac:	b002      	add	sp, #8
     9ae:	bd80      	pop	{r7, pc}
     9b0:	e000e100 	.word	0xe000e100

000009b4 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     9b4:	b580      	push	{r7, lr}
     9b6:	b084      	sub	sp, #16
     9b8:	af00      	add	r7, sp, #0
     9ba:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9bc:	687b      	ldr	r3, [r7, #4]
     9be:	681b      	ldr	r3, [r3, #0]
     9c0:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     9c2:	68fb      	ldr	r3, [r7, #12]
     9c4:	7a9b      	ldrb	r3, [r3, #10]
     9c6:	b2db      	uxtb	r3, r3
     9c8:	b25b      	sxtb	r3, r3
     9ca:	2b00      	cmp	r3, #0
     9cc:	da01      	bge.n	9d2 <rtc_count_is_syncing+0x1e>
                return true;
     9ce:	2301      	movs	r3, #1
     9d0:	e000      	b.n	9d4 <rtc_count_is_syncing+0x20>
        }

        return false;
     9d2:	2300      	movs	r3, #0
}
     9d4:	0018      	movs	r0, r3
     9d6:	46bd      	mov	sp, r7
     9d8:	b004      	add	sp, #16
     9da:	bd80      	pop	{r7, pc}

000009dc <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     9dc:	b580      	push	{r7, lr}
     9de:	b084      	sub	sp, #16
     9e0:	af00      	add	r7, sp, #0
     9e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9e4:	687b      	ldr	r3, [r7, #4]
     9e6:	681b      	ldr	r3, [r3, #0]
     9e8:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
     9ea:	2003      	movs	r0, #3
     9ec:	4b0a      	ldr	r3, [pc, #40]	; (a18 <rtc_count_enable+0x3c>)
     9ee:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     9f0:	46c0      	nop			; (mov r8, r8)
     9f2:	687b      	ldr	r3, [r7, #4]
     9f4:	0018      	movs	r0, r3
     9f6:	4b09      	ldr	r3, [pc, #36]	; (a1c <rtc_count_enable+0x40>)
     9f8:	4798      	blx	r3
     9fa:	1e03      	subs	r3, r0, #0
     9fc:	d1f9      	bne.n	9f2 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     9fe:	68fb      	ldr	r3, [r7, #12]
     a00:	881b      	ldrh	r3, [r3, #0]
     a02:	b29b      	uxth	r3, r3
     a04:	2202      	movs	r2, #2
     a06:	4313      	orrs	r3, r2
     a08:	b29a      	uxth	r2, r3
     a0a:	68fb      	ldr	r3, [r7, #12]
     a0c:	801a      	strh	r2, [r3, #0]
}
     a0e:	46c0      	nop			; (mov r8, r8)
     a10:	46bd      	mov	sp, r7
     a12:	b004      	add	sp, #16
     a14:	bd80      	pop	{r7, pc}
     a16:	46c0      	nop			; (mov r8, r8)
     a18:	00000959 	.word	0x00000959
     a1c:	000009b5 	.word	0x000009b5

00000a20 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     a20:	b580      	push	{r7, lr}
     a22:	b084      	sub	sp, #16
     a24:	af00      	add	r7, sp, #0
     a26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a28:	687b      	ldr	r3, [r7, #4]
     a2a:	681b      	ldr	r3, [r3, #0]
     a2c:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
     a2e:	2003      	movs	r0, #3
     a30:	4b0d      	ldr	r3, [pc, #52]	; (a68 <rtc_count_disable+0x48>)
     a32:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     a34:	46c0      	nop			; (mov r8, r8)
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	0018      	movs	r0, r3
     a3a:	4b0c      	ldr	r3, [pc, #48]	; (a6c <rtc_count_disable+0x4c>)
     a3c:	4798      	blx	r3
     a3e:	1e03      	subs	r3, r0, #0
     a40:	d1f9      	bne.n	a36 <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     a42:	68fb      	ldr	r3, [r7, #12]
     a44:	22c1      	movs	r2, #193	; 0xc1
     a46:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     a48:	68fb      	ldr	r3, [r7, #12]
     a4a:	22c1      	movs	r2, #193	; 0xc1
     a4c:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     a4e:	68fb      	ldr	r3, [r7, #12]
     a50:	881b      	ldrh	r3, [r3, #0]
     a52:	b29b      	uxth	r3, r3
     a54:	2202      	movs	r2, #2
     a56:	4393      	bics	r3, r2
     a58:	b29a      	uxth	r2, r3
     a5a:	68fb      	ldr	r3, [r7, #12]
     a5c:	801a      	strh	r2, [r3, #0]
}
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	46bd      	mov	sp, r7
     a62:	b004      	add	sp, #16
     a64:	bd80      	pop	{r7, pc}
     a66:	46c0      	nop			; (mov r8, r8)
     a68:	00000985 	.word	0x00000985
     a6c:	000009b5 	.word	0x000009b5

00000a70 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     a70:	b580      	push	{r7, lr}
     a72:	b084      	sub	sp, #16
     a74:	af00      	add	r7, sp, #0
     a76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	681b      	ldr	r3, [r3, #0]
     a7c:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	0018      	movs	r0, r3
     a82:	4b0d      	ldr	r3, [pc, #52]	; (ab8 <rtc_count_reset+0x48>)
     a84:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	2200      	movs	r2, #0
     a8a:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
     a8c:	687b      	ldr	r3, [r7, #4]
     a8e:	2200      	movs	r2, #0
     a90:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	0018      	movs	r0, r3
     a98:	4b08      	ldr	r3, [pc, #32]	; (abc <rtc_count_reset+0x4c>)
     a9a:	4798      	blx	r3
     a9c:	1e03      	subs	r3, r0, #0
     a9e:	d1f9      	bne.n	a94 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     aa0:	68fb      	ldr	r3, [r7, #12]
     aa2:	881b      	ldrh	r3, [r3, #0]
     aa4:	b29b      	uxth	r3, r3
     aa6:	2201      	movs	r2, #1
     aa8:	4313      	orrs	r3, r2
     aaa:	b29a      	uxth	r2, r3
     aac:	68fb      	ldr	r3, [r7, #12]
     aae:	801a      	strh	r2, [r3, #0]
}
     ab0:	46c0      	nop			; (mov r8, r8)
     ab2:	46bd      	mov	sp, r7
     ab4:	b004      	add	sp, #16
     ab6:	bd80      	pop	{r7, pc}
     ab8:	00000a21 	.word	0x00000a21
     abc:	000009b5 	.word	0x000009b5

00000ac0 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     ac0:	b580      	push	{r7, lr}
     ac2:	b084      	sub	sp, #16
     ac4:	af00      	add	r7, sp, #0
     ac6:	6078      	str	r0, [r7, #4]
     ac8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     aca:	687b      	ldr	r3, [r7, #4]
     acc:	681b      	ldr	r3, [r3, #0]
     ace:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     ad0:	683b      	ldr	r3, [r7, #0]
     ad2:	881a      	ldrh	r2, [r3, #0]
     ad4:	68bb      	ldr	r3, [r7, #8]
     ad6:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     ad8:	683b      	ldr	r3, [r7, #0]
     ada:	789b      	ldrb	r3, [r3, #2]
     adc:	2b00      	cmp	r3, #0
     ade:	d03a      	beq.n	b56 <_rtc_count_set_config+0x96>
     ae0:	2b01      	cmp	r3, #1
     ae2:	d000      	beq.n	ae6 <_rtc_count_set_config+0x26>
     ae4:	e06c      	b.n	bc0 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     ae6:	68bb      	ldr	r3, [r7, #8]
     ae8:	881b      	ldrh	r3, [r3, #0]
     aea:	b29a      	uxth	r2, r3
     aec:	68bb      	ldr	r3, [r7, #8]
     aee:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     af0:	683b      	ldr	r3, [r7, #0]
     af2:	78db      	ldrb	r3, [r3, #3]
     af4:	2b00      	cmp	r3, #0
     af6:	d007      	beq.n	b08 <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     af8:	68bb      	ldr	r3, [r7, #8]
     afa:	881b      	ldrh	r3, [r3, #0]
     afc:	b29b      	uxth	r3, r3
     afe:	2280      	movs	r2, #128	; 0x80
     b00:	4313      	orrs	r3, r2
     b02:	b29a      	uxth	r2, r3
     b04:	68bb      	ldr	r3, [r7, #8]
     b06:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     b08:	230f      	movs	r3, #15
     b0a:	18fb      	adds	r3, r7, r3
     b0c:	2200      	movs	r2, #0
     b0e:	701a      	strb	r2, [r3, #0]
     b10:	e01b      	b.n	b4a <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	687b      	ldr	r3, [r7, #4]
     b16:	0018      	movs	r0, r3
     b18:	4b37      	ldr	r3, [pc, #220]	; (bf8 <_rtc_count_set_config+0x138>)
     b1a:	4798      	blx	r3
     b1c:	1e03      	subs	r3, r0, #0
     b1e:	d1f9      	bne.n	b14 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     b20:	230f      	movs	r3, #15
     b22:	18fb      	adds	r3, r7, r3
     b24:	781a      	ldrb	r2, [r3, #0]
     b26:	683b      	ldr	r3, [r7, #0]
     b28:	3202      	adds	r2, #2
     b2a:	0092      	lsls	r2, r2, #2
     b2c:	58d1      	ldr	r1, [r2, r3]
     b2e:	230f      	movs	r3, #15
     b30:	18fb      	adds	r3, r7, r3
     b32:	781a      	ldrb	r2, [r3, #0]
     b34:	687b      	ldr	r3, [r7, #4]
     b36:	0018      	movs	r0, r3
     b38:	4b30      	ldr	r3, [pc, #192]	; (bfc <_rtc_count_set_config+0x13c>)
     b3a:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     b3c:	230f      	movs	r3, #15
     b3e:	18fb      	adds	r3, r7, r3
     b40:	781a      	ldrb	r2, [r3, #0]
     b42:	230f      	movs	r3, #15
     b44:	18fb      	adds	r3, r7, r3
     b46:	3201      	adds	r2, #1
     b48:	701a      	strb	r2, [r3, #0]
     b4a:	230f      	movs	r3, #15
     b4c:	18fb      	adds	r3, r7, r3
     b4e:	781b      	ldrb	r3, [r3, #0]
     b50:	2b00      	cmp	r3, #0
     b52:	d0de      	beq.n	b12 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     b54:	e036      	b.n	bc4 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     b56:	68bb      	ldr	r3, [r7, #8]
     b58:	881b      	ldrh	r3, [r3, #0]
     b5a:	b29b      	uxth	r3, r3
     b5c:	2204      	movs	r2, #4
     b5e:	4313      	orrs	r3, r2
     b60:	b29a      	uxth	r2, r3
     b62:	68bb      	ldr	r3, [r7, #8]
     b64:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     b66:	683b      	ldr	r3, [r7, #0]
     b68:	78db      	ldrb	r3, [r3, #3]
     b6a:	2b00      	cmp	r3, #0
     b6c:	d001      	beq.n	b72 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     b6e:	2317      	movs	r3, #23
     b70:	e03e      	b.n	bf0 <_rtc_count_set_config+0x130>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     b72:	230e      	movs	r3, #14
     b74:	18fb      	adds	r3, r7, r3
     b76:	2200      	movs	r2, #0
     b78:	701a      	strb	r2, [r3, #0]
     b7a:	e01b      	b.n	bb4 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
     b7c:	46c0      	nop			; (mov r8, r8)
     b7e:	687b      	ldr	r3, [r7, #4]
     b80:	0018      	movs	r0, r3
     b82:	4b1d      	ldr	r3, [pc, #116]	; (bf8 <_rtc_count_set_config+0x138>)
     b84:	4798      	blx	r3
     b86:	1e03      	subs	r3, r0, #0
     b88:	d1f9      	bne.n	b7e <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     b8a:	230e      	movs	r3, #14
     b8c:	18fb      	adds	r3, r7, r3
     b8e:	781a      	ldrb	r2, [r3, #0]
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	3202      	adds	r2, #2
     b94:	0092      	lsls	r2, r2, #2
     b96:	58d1      	ldr	r1, [r2, r3]
     b98:	230e      	movs	r3, #14
     b9a:	18fb      	adds	r3, r7, r3
     b9c:	781a      	ldrb	r2, [r3, #0]
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	0018      	movs	r0, r3
     ba2:	4b16      	ldr	r3, [pc, #88]	; (bfc <_rtc_count_set_config+0x13c>)
     ba4:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     ba6:	230e      	movs	r3, #14
     ba8:	18fb      	adds	r3, r7, r3
     baa:	781a      	ldrb	r2, [r3, #0]
     bac:	230e      	movs	r3, #14
     bae:	18fb      	adds	r3, r7, r3
     bb0:	3201      	adds	r2, #1
     bb2:	701a      	strb	r2, [r3, #0]
     bb4:	230e      	movs	r3, #14
     bb6:	18fb      	adds	r3, r7, r3
     bb8:	781b      	ldrb	r3, [r3, #0]
     bba:	2b01      	cmp	r3, #1
     bbc:	d9de      	bls.n	b7c <_rtc_count_set_config+0xbc>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     bbe:	e001      	b.n	bc4 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     bc0:	2317      	movs	r3, #23
     bc2:	e015      	b.n	bf0 <_rtc_count_set_config+0x130>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     bc4:	683b      	ldr	r3, [r7, #0]
     bc6:	791b      	ldrb	r3, [r3, #4]
     bc8:	2b00      	cmp	r3, #0
     bca:	d010      	beq.n	bee <_rtc_count_set_config+0x12e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     bcc:	68bb      	ldr	r3, [r7, #8]
     bce:	885b      	ldrh	r3, [r3, #2]
     bd0:	b29b      	uxth	r3, r3
     bd2:	2280      	movs	r2, #128	; 0x80
     bd4:	01d2      	lsls	r2, r2, #7
     bd6:	4313      	orrs	r3, r2
     bd8:	b29a      	uxth	r2, r3
     bda:	68bb      	ldr	r3, [r7, #8]
     bdc:	805a      	strh	r2, [r3, #2]
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
     bde:	68bb      	ldr	r3, [r7, #8]
     be0:	885b      	ldrh	r3, [r3, #2]
     be2:	b29b      	uxth	r3, r3
     be4:	4a06      	ldr	r2, [pc, #24]	; (c00 <_rtc_count_set_config+0x140>)
     be6:	4313      	orrs	r3, r2
     be8:	b29a      	uxth	r2, r3
     bea:	68bb      	ldr	r3, [r7, #8]
     bec:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     bee:	2300      	movs	r3, #0
}
     bf0:	0018      	movs	r0, r3
     bf2:	46bd      	mov	sp, r7
     bf4:	b004      	add	sp, #16
     bf6:	bd80      	pop	{r7, pc}
     bf8:	000009b5 	.word	0x000009b5
     bfc:	00000c95 	.word	0x00000c95
     c00:	ffff8000 	.word	0xffff8000

00000c04 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     c04:	b580      	push	{r7, lr}
     c06:	b086      	sub	sp, #24
     c08:	af00      	add	r7, sp, #0
     c0a:	60f8      	str	r0, [r7, #12]
     c0c:	60b9      	str	r1, [r7, #8]
     c0e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     c10:	68fb      	ldr	r3, [r7, #12]
     c12:	68ba      	ldr	r2, [r7, #8]
     c14:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     c16:	2120      	movs	r1, #32
     c18:	2000      	movs	r0, #0
     c1a:	4b17      	ldr	r3, [pc, #92]	; (c78 <rtc_count_init+0x74>)
     c1c:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     c1e:	2314      	movs	r3, #20
     c20:	18fb      	adds	r3, r7, r3
     c22:	0018      	movs	r0, r3
     c24:	4b15      	ldr	r3, [pc, #84]	; (c7c <rtc_count_init+0x78>)
     c26:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     c28:	2314      	movs	r3, #20
     c2a:	18fb      	adds	r3, r7, r3
     c2c:	2202      	movs	r2, #2
     c2e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     c30:	2314      	movs	r3, #20
     c32:	18fb      	adds	r3, r7, r3
     c34:	0019      	movs	r1, r3
     c36:	2004      	movs	r0, #4
     c38:	4b11      	ldr	r3, [pc, #68]	; (c80 <rtc_count_init+0x7c>)
     c3a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     c3c:	2004      	movs	r0, #4
     c3e:	4b11      	ldr	r3, [pc, #68]	; (c84 <rtc_count_init+0x80>)
     c40:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     c42:	68fb      	ldr	r3, [r7, #12]
     c44:	0018      	movs	r0, r3
     c46:	4b10      	ldr	r3, [pc, #64]	; (c88 <rtc_count_init+0x84>)
     c48:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     c4a:	687b      	ldr	r3, [r7, #4]
     c4c:	789a      	ldrb	r2, [r3, #2]
     c4e:	68fb      	ldr	r3, [r7, #12]
     c50:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     c52:	687b      	ldr	r3, [r7, #4]
     c54:	791a      	ldrb	r2, [r3, #4]
     c56:	68fb      	ldr	r3, [r7, #12]
     c58:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     c5a:	4b0c      	ldr	r3, [pc, #48]	; (c8c <rtc_count_init+0x88>)
     c5c:	68fa      	ldr	r2, [r7, #12]
     c5e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     c60:	687a      	ldr	r2, [r7, #4]
     c62:	68fb      	ldr	r3, [r7, #12]
     c64:	0011      	movs	r1, r2
     c66:	0018      	movs	r0, r3
     c68:	4b09      	ldr	r3, [pc, #36]	; (c90 <rtc_count_init+0x8c>)
     c6a:	4798      	blx	r3
     c6c:	0003      	movs	r3, r0
}
     c6e:	0018      	movs	r0, r3
     c70:	46bd      	mov	sp, r7
     c72:	b006      	add	sp, #24
     c74:	bd80      	pop	{r7, pc}
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	000008fd 	.word	0x000008fd
     c7c:	000008e5 	.word	0x000008e5
     c80:	0000bb31 	.word	0x0000bb31
     c84:	0000bb75 	.word	0x0000bb75
     c88:	00000a71 	.word	0x00000a71
     c8c:	20000d9c 	.word	0x20000d9c
     c90:	00000ac1 	.word	0x00000ac1

00000c94 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     c94:	b580      	push	{r7, lr}
     c96:	b086      	sub	sp, #24
     c98:	af00      	add	r7, sp, #0
     c9a:	60f8      	str	r0, [r7, #12]
     c9c:	60b9      	str	r1, [r7, #8]
     c9e:	1dfb      	adds	r3, r7, #7
     ca0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	681b      	ldr	r3, [r3, #0]
     ca6:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     ca8:	46c0      	nop			; (mov r8, r8)
     caa:	68fb      	ldr	r3, [r7, #12]
     cac:	0018      	movs	r0, r3
     cae:	4b1a      	ldr	r3, [pc, #104]	; (d18 <rtc_count_set_compare+0x84>)
     cb0:	4798      	blx	r3
     cb2:	1e03      	subs	r3, r0, #0
     cb4:	d1f9      	bne.n	caa <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     cb6:	68fb      	ldr	r3, [r7, #12]
     cb8:	791b      	ldrb	r3, [r3, #4]
     cba:	2b00      	cmp	r3, #0
     cbc:	d00f      	beq.n	cde <rtc_count_set_compare+0x4a>
     cbe:	2b01      	cmp	r3, #1
     cc0:	d122      	bne.n	d08 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     cc2:	1dfb      	adds	r3, r7, #7
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	2b01      	cmp	r3, #1
     cc8:	d901      	bls.n	cce <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     cca:	2317      	movs	r3, #23
     ccc:	e01f      	b.n	d0e <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     cce:	1dfb      	adds	r3, r7, #7
     cd0:	781a      	ldrb	r2, [r3, #0]
     cd2:	697b      	ldr	r3, [r7, #20]
     cd4:	3206      	adds	r2, #6
     cd6:	0092      	lsls	r2, r2, #2
     cd8:	68b9      	ldr	r1, [r7, #8]
     cda:	50d1      	str	r1, [r2, r3]

			break;
     cdc:	e016      	b.n	d0c <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     cde:	1dfb      	adds	r3, r7, #7
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	2b02      	cmp	r3, #2
     ce4:	d901      	bls.n	cea <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     ce6:	2317      	movs	r3, #23
     ce8:	e011      	b.n	d0e <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     cea:	68bb      	ldr	r3, [r7, #8]
     cec:	4a0b      	ldr	r2, [pc, #44]	; (d1c <rtc_count_set_compare+0x88>)
     cee:	4293      	cmp	r3, r2
     cf0:	d901      	bls.n	cf6 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     cf2:	2317      	movs	r3, #23
     cf4:	e00b      	b.n	d0e <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     cf6:	1dfb      	adds	r3, r7, #7
     cf8:	781a      	ldrb	r2, [r3, #0]
     cfa:	68bb      	ldr	r3, [r7, #8]
     cfc:	b299      	uxth	r1, r3
     cfe:	697b      	ldr	r3, [r7, #20]
     d00:	320c      	adds	r2, #12
     d02:	0052      	lsls	r2, r2, #1
     d04:	52d1      	strh	r1, [r2, r3]

			break;
     d06:	e001      	b.n	d0c <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     d08:	231a      	movs	r3, #26
     d0a:	e000      	b.n	d0e <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     d0c:	2300      	movs	r3, #0
}
     d0e:	0018      	movs	r0, r3
     d10:	46bd      	mov	sp, r7
     d12:	b006      	add	sp, #24
     d14:	bd80      	pop	{r7, pc}
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	000009b5 	.word	0x000009b5
     d1c:	0000ffff 	.word	0x0000ffff

00000d20 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     d20:	b580      	push	{r7, lr}
     d22:	b084      	sub	sp, #16
     d24:	af00      	add	r7, sp, #0
     d26:	6078      	str	r0, [r7, #4]
     d28:	000a      	movs	r2, r1
     d2a:	1cbb      	adds	r3, r7, #2
     d2c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d2e:	687b      	ldr	r3, [r7, #4]
     d30:	681b      	ldr	r3, [r3, #0]
     d32:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     d34:	687b      	ldr	r3, [r7, #4]
     d36:	791b      	ldrb	r3, [r3, #4]
     d38:	2b00      	cmp	r3, #0
     d3a:	d001      	beq.n	d40 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     d3c:	2315      	movs	r3, #21
     d3e:	e00b      	b.n	d58 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     d40:	46c0      	nop			; (mov r8, r8)
     d42:	687b      	ldr	r3, [r7, #4]
     d44:	0018      	movs	r0, r3
     d46:	4b06      	ldr	r3, [pc, #24]	; (d60 <rtc_count_set_period+0x40>)
     d48:	4798      	blx	r3
     d4a:	1e03      	subs	r3, r0, #0
     d4c:	d1f9      	bne.n	d42 <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     d4e:	68fb      	ldr	r3, [r7, #12]
     d50:	1cba      	adds	r2, r7, #2
     d52:	8812      	ldrh	r2, [r2, #0]
     d54:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     d56:	2300      	movs	r3, #0
}
     d58:	0018      	movs	r0, r3
     d5a:	46bd      	mov	sp, r7
     d5c:	b004      	add	sp, #16
     d5e:	bd80      	pop	{r7, pc}
     d60:	000009b5 	.word	0x000009b5

00000d64 <rtc_count_register_callback>:
 */
enum status_code rtc_count_register_callback(
		struct rtc_module *const module,
		rtc_count_callback_t callback,
		enum rtc_count_callback callback_type)
{
     d64:	b580      	push	{r7, lr}
     d66:	b086      	sub	sp, #24
     d68:	af00      	add	r7, sp, #0
     d6a:	60f8      	str	r0, [r7, #12]
     d6c:	60b9      	str	r1, [r7, #8]
     d6e:	1dfb      	adds	r3, r7, #7
     d70:	701a      	strb	r2, [r3, #0]

	enum status_code status = STATUS_OK;
     d72:	2317      	movs	r3, #23
     d74:	18fb      	adds	r3, r7, r3
     d76:	2200      	movs	r2, #0
     d78:	701a      	strb	r2, [r3, #0]

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     d7a:	1dfb      	adds	r3, r7, #7
     d7c:	781b      	ldrb	r3, [r3, #0]
     d7e:	2b02      	cmp	r3, #2
     d80:	d104      	bne.n	d8c <rtc_count_register_callback+0x28>
		status = STATUS_OK;
     d82:	2317      	movs	r3, #23
     d84:	18fb      	adds	r3, r7, r3
     d86:	2200      	movs	r2, #0
     d88:	701a      	strb	r2, [r3, #0]
     d8a:	e01f      	b.n	dcc <rtc_count_register_callback+0x68>
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     d8c:	68fb      	ldr	r3, [r7, #12]
     d8e:	791b      	ldrb	r3, [r3, #4]
     d90:	2b00      	cmp	r3, #0
     d92:	d00a      	beq.n	daa <rtc_count_register_callback+0x46>
     d94:	2b01      	cmp	r3, #1
     d96:	d111      	bne.n	dbc <rtc_count_register_callback+0x58>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
     d98:	1dfb      	adds	r3, r7, #7
     d9a:	781b      	ldrb	r3, [r3, #0]
     d9c:	2b01      	cmp	r3, #1
     d9e:	d912      	bls.n	dc6 <rtc_count_register_callback+0x62>
				status = STATUS_ERR_INVALID_ARG;
     da0:	2317      	movs	r3, #23
     da2:	18fb      	adds	r3, r7, r3
     da4:	2217      	movs	r2, #23
     da6:	701a      	strb	r2, [r3, #0]
			}

			break;
     da8:	e00d      	b.n	dc6 <rtc_count_register_callback+0x62>
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
     daa:	1dfb      	adds	r3, r7, #7
     dac:	781b      	ldrb	r3, [r3, #0]
     dae:	2b02      	cmp	r3, #2
     db0:	d90b      	bls.n	dca <rtc_count_register_callback+0x66>
				status = STATUS_ERR_INVALID_ARG;
     db2:	2317      	movs	r3, #23
     db4:	18fb      	adds	r3, r7, r3
     db6:	2217      	movs	r2, #23
     db8:	701a      	strb	r2, [r3, #0]
			}
			break;
     dba:	e006      	b.n	dca <rtc_count_register_callback+0x66>
		default:
			status = STATUS_ERR_INVALID_ARG;
     dbc:	2317      	movs	r3, #23
     dbe:	18fb      	adds	r3, r7, r3
     dc0:	2217      	movs	r2, #23
     dc2:	701a      	strb	r2, [r3, #0]
     dc4:	e002      	b.n	dcc <rtc_count_register_callback+0x68>
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
				status = STATUS_ERR_INVALID_ARG;
			}

			break;
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	e000      	b.n	dcc <rtc_count_register_callback+0x68>
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
				status = STATUS_ERR_INVALID_ARG;
			}
			break;
     dca:	46c0      	nop			; (mov r8, r8)
		default:
			status = STATUS_ERR_INVALID_ARG;
		}
	}

	if (status == STATUS_OK) {
     dcc:	2317      	movs	r3, #23
     dce:	18fb      	adds	r3, r7, r3
     dd0:	781b      	ldrb	r3, [r3, #0]
     dd2:	2b00      	cmp	r3, #0
     dd4:	d115      	bne.n	e02 <rtc_count_register_callback+0x9e>
		/* Register callback */
		module->callbacks[callback_type] = callback;
     dd6:	1dfb      	adds	r3, r7, #7
     dd8:	781a      	ldrb	r2, [r3, #0]
     dda:	68fb      	ldr	r3, [r7, #12]
     ddc:	3202      	adds	r2, #2
     dde:	0092      	lsls	r2, r2, #2
     de0:	68b9      	ldr	r1, [r7, #8]
     de2:	50d1      	str	r1, [r2, r3]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     de4:	68fb      	ldr	r3, [r7, #12]
     de6:	8a9b      	ldrh	r3, [r3, #20]
     de8:	b29b      	uxth	r3, r3
     dea:	b21a      	sxth	r2, r3
     dec:	1dfb      	adds	r3, r7, #7
     dee:	781b      	ldrb	r3, [r3, #0]
     df0:	2101      	movs	r1, #1
     df2:	4099      	lsls	r1, r3
     df4:	000b      	movs	r3, r1
     df6:	b21b      	sxth	r3, r3
     df8:	4313      	orrs	r3, r2
     dfa:	b21b      	sxth	r3, r3
     dfc:	b29a      	uxth	r2, r3
     dfe:	68fb      	ldr	r3, [r7, #12]
     e00:	829a      	strh	r2, [r3, #20]
	}

	return status;
     e02:	2317      	movs	r3, #23
     e04:	18fb      	adds	r3, r7, r3
     e06:	781b      	ldrb	r3, [r3, #0]
}
     e08:	0018      	movs	r0, r3
     e0a:	46bd      	mov	sp, r7
     e0c:	b006      	add	sp, #24
     e0e:	bd80      	pop	{r7, pc}

00000e10 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     e10:	b580      	push	{r7, lr}
     e12:	b084      	sub	sp, #16
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	000a      	movs	r2, r1
     e1a:	1cfb      	adds	r3, r7, #3
     e1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	681b      	ldr	r3, [r3, #0]
     e22:	60fb      	str	r3, [r7, #12]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     e24:	1cfb      	adds	r3, r7, #3
     e26:	781b      	ldrb	r3, [r3, #0]
     e28:	2b02      	cmp	r3, #2
     e2a:	d103      	bne.n	e34 <rtc_count_enable_callback+0x24>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     e2c:	68fb      	ldr	r3, [r7, #12]
     e2e:	2280      	movs	r2, #128	; 0x80
     e30:	71da      	strb	r2, [r3, #7]
     e32:	e00a      	b.n	e4a <rtc_count_enable_callback+0x3a>
	} else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
     e34:	1cfb      	adds	r3, r7, #3
     e36:	781b      	ldrb	r3, [r3, #0]
     e38:	2201      	movs	r2, #1
     e3a:	409a      	lsls	r2, r3
     e3c:	0013      	movs	r3, r2
     e3e:	b2db      	uxtb	r3, r3
     e40:	2203      	movs	r2, #3
     e42:	4013      	ands	r3, r2
     e44:	b2da      	uxtb	r2, r3
     e46:	68fb      	ldr	r3, [r7, #12]
     e48:	71da      	strb	r2, [r3, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	8adb      	ldrh	r3, [r3, #22]
     e4e:	b29b      	uxth	r3, r3
     e50:	b21a      	sxth	r2, r3
     e52:	1cfb      	adds	r3, r7, #3
     e54:	781b      	ldrb	r3, [r3, #0]
     e56:	2101      	movs	r1, #1
     e58:	4099      	lsls	r1, r3
     e5a:	000b      	movs	r3, r1
     e5c:	b21b      	sxth	r3, r3
     e5e:	4313      	orrs	r3, r2
     e60:	b21b      	sxth	r3, r3
     e62:	b29a      	uxth	r2, r3
     e64:	687b      	ldr	r3, [r7, #4]
     e66:	82da      	strh	r2, [r3, #22]
}
     e68:	46c0      	nop			; (mov r8, r8)
     e6a:	46bd      	mov	sp, r7
     e6c:	b004      	add	sp, #16
     e6e:	bd80      	pop	{r7, pc}

00000e70 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
     e70:	b580      	push	{r7, lr}
     e72:	b086      	sub	sp, #24
     e74:	af00      	add	r7, sp, #0
     e76:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
     e78:	4b31      	ldr	r3, [pc, #196]	; (f40 <_rtc_interrupt_handler+0xd0>)
     e7a:	687a      	ldr	r2, [r7, #4]
     e7c:	0092      	lsls	r2, r2, #2
     e7e:	58d3      	ldr	r3, [r2, r3]
     e80:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
     e82:	697b      	ldr	r3, [r7, #20]
     e84:	681b      	ldr	r3, [r3, #0]
     e86:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     e88:	230e      	movs	r3, #14
     e8a:	18fb      	adds	r3, r7, r3
     e8c:	697a      	ldr	r2, [r7, #20]
     e8e:	8ad2      	ldrh	r2, [r2, #22]
     e90:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     e92:	697b      	ldr	r3, [r7, #20]
     e94:	8a9b      	ldrh	r3, [r3, #20]
     e96:	b29a      	uxth	r2, r3
     e98:	230e      	movs	r3, #14
     e9a:	18fb      	adds	r3, r7, r3
     e9c:	210e      	movs	r1, #14
     e9e:	1879      	adds	r1, r7, r1
     ea0:	8809      	ldrh	r1, [r1, #0]
     ea2:	400a      	ands	r2, r1
     ea4:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     ea6:	693b      	ldr	r3, [r7, #16]
     ea8:	7a1b      	ldrb	r3, [r3, #8]
     eaa:	b2da      	uxtb	r2, r3
     eac:	230c      	movs	r3, #12
     eae:	18fb      	adds	r3, r7, r3
     eb0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     eb2:	693b      	ldr	r3, [r7, #16]
     eb4:	79db      	ldrb	r3, [r3, #7]
     eb6:	b2db      	uxtb	r3, r3
     eb8:	b29a      	uxth	r2, r3
     eba:	230c      	movs	r3, #12
     ebc:	18fb      	adds	r3, r7, r3
     ebe:	210c      	movs	r1, #12
     ec0:	1879      	adds	r1, r7, r1
     ec2:	8809      	ldrh	r1, [r1, #0]
     ec4:	400a      	ands	r2, r1
     ec6:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     ec8:	230c      	movs	r3, #12
     eca:	18fb      	adds	r3, r7, r3
     ecc:	881b      	ldrh	r3, [r3, #0]
     ece:	2280      	movs	r2, #128	; 0x80
     ed0:	4013      	ands	r3, r2
     ed2:	d00c      	beq.n	eee <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     ed4:	230e      	movs	r3, #14
     ed6:	18fb      	adds	r3, r7, r3
     ed8:	881b      	ldrh	r3, [r3, #0]
     eda:	2204      	movs	r2, #4
     edc:	4013      	ands	r3, r2
     ede:	d002      	beq.n	ee6 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     ee0:	697b      	ldr	r3, [r7, #20]
     ee2:	691b      	ldr	r3, [r3, #16]
     ee4:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     ee6:	693b      	ldr	r3, [r7, #16]
     ee8:	2280      	movs	r2, #128	; 0x80
     eea:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     eec:	e024      	b.n	f38 <_rtc_interrupt_handler+0xc8>
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     eee:	230c      	movs	r3, #12
     ef0:	18fb      	adds	r3, r7, r3
     ef2:	881b      	ldrh	r3, [r3, #0]
     ef4:	2201      	movs	r2, #1
     ef6:	4013      	ands	r3, r2
     ef8:	d00c      	beq.n	f14 <_rtc_interrupt_handler+0xa4>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     efa:	230e      	movs	r3, #14
     efc:	18fb      	adds	r3, r7, r3
     efe:	881b      	ldrh	r3, [r3, #0]
     f00:	2201      	movs	r2, #1
     f02:	4013      	ands	r3, r2
     f04:	d002      	beq.n	f0c <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     f06:	697b      	ldr	r3, [r7, #20]
     f08:	689b      	ldr	r3, [r3, #8]
     f0a:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     f0c:	693b      	ldr	r3, [r7, #16]
     f0e:	2201      	movs	r2, #1
     f10:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     f12:	e011      	b.n	f38 <_rtc_interrupt_handler+0xc8>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     f14:	230c      	movs	r3, #12
     f16:	18fb      	adds	r3, r7, r3
     f18:	881b      	ldrh	r3, [r3, #0]
     f1a:	2202      	movs	r2, #2
     f1c:	4013      	ands	r3, r2
     f1e:	d00b      	beq.n	f38 <_rtc_interrupt_handler+0xc8>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     f20:	230e      	movs	r3, #14
     f22:	18fb      	adds	r3, r7, r3
     f24:	881b      	ldrh	r3, [r3, #0]
     f26:	2202      	movs	r2, #2
     f28:	4013      	ands	r3, r2
     f2a:	d002      	beq.n	f32 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     f2c:	697b      	ldr	r3, [r7, #20]
     f2e:	68db      	ldr	r3, [r3, #12]
     f30:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     f32:	693b      	ldr	r3, [r7, #16]
     f34:	2202      	movs	r2, #2
     f36:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     f38:	46c0      	nop			; (mov r8, r8)
     f3a:	46bd      	mov	sp, r7
     f3c:	b006      	add	sp, #24
     f3e:	bd80      	pop	{r7, pc}
     f40:	20000d9c 	.word	0x20000d9c

00000f44 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     f44:	b580      	push	{r7, lr}
     f46:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
     f48:	2000      	movs	r0, #0
     f4a:	4b02      	ldr	r3, [pc, #8]	; (f54 <RTC_Handler+0x10>)
     f4c:	4798      	blx	r3
}
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	46bd      	mov	sp, r7
     f52:	bd80      	pop	{r7, pc}
     f54:	00000e71 	.word	0x00000e71

00000f58 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     f58:	b580      	push	{r7, lr}
     f5a:	b082      	sub	sp, #8
     f5c:	af00      	add	r7, sp, #0
     f5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     f60:	687b      	ldr	r3, [r7, #4]
     f62:	2200      	movs	r2, #0
     f64:	701a      	strb	r2, [r3, #0]
}
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	46bd      	mov	sp, r7
     f6a:	b002      	add	sp, #8
     f6c:	bd80      	pop	{r7, pc}
     f6e:	46c0      	nop			; (mov r8, r8)

00000f70 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     f70:	b580      	push	{r7, lr}
     f72:	b082      	sub	sp, #8
     f74:	af00      	add	r7, sp, #0
     f76:	0002      	movs	r2, r0
     f78:	6039      	str	r1, [r7, #0]
     f7a:	1dfb      	adds	r3, r7, #7
     f7c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     f7e:	1dfb      	adds	r3, r7, #7
     f80:	781b      	ldrb	r3, [r3, #0]
     f82:	2b01      	cmp	r3, #1
     f84:	d00a      	beq.n	f9c <system_apb_clock_set_mask+0x2c>
     f86:	2b02      	cmp	r3, #2
     f88:	d00f      	beq.n	faa <system_apb_clock_set_mask+0x3a>
     f8a:	2b00      	cmp	r3, #0
     f8c:	d114      	bne.n	fb8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     f8e:	4b0e      	ldr	r3, [pc, #56]	; (fc8 <system_apb_clock_set_mask+0x58>)
     f90:	4a0d      	ldr	r2, [pc, #52]	; (fc8 <system_apb_clock_set_mask+0x58>)
     f92:	6991      	ldr	r1, [r2, #24]
     f94:	683a      	ldr	r2, [r7, #0]
     f96:	430a      	orrs	r2, r1
     f98:	619a      	str	r2, [r3, #24]
			break;
     f9a:	e00f      	b.n	fbc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     f9c:	4b0a      	ldr	r3, [pc, #40]	; (fc8 <system_apb_clock_set_mask+0x58>)
     f9e:	4a0a      	ldr	r2, [pc, #40]	; (fc8 <system_apb_clock_set_mask+0x58>)
     fa0:	69d1      	ldr	r1, [r2, #28]
     fa2:	683a      	ldr	r2, [r7, #0]
     fa4:	430a      	orrs	r2, r1
     fa6:	61da      	str	r2, [r3, #28]
			break;
     fa8:	e008      	b.n	fbc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     faa:	4b07      	ldr	r3, [pc, #28]	; (fc8 <system_apb_clock_set_mask+0x58>)
     fac:	4a06      	ldr	r2, [pc, #24]	; (fc8 <system_apb_clock_set_mask+0x58>)
     fae:	6a11      	ldr	r1, [r2, #32]
     fb0:	683a      	ldr	r2, [r7, #0]
     fb2:	430a      	orrs	r2, r1
     fb4:	621a      	str	r2, [r3, #32]
			break;
     fb6:	e001      	b.n	fbc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     fb8:	2317      	movs	r3, #23
     fba:	e000      	b.n	fbe <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     fbc:	2300      	movs	r3, #0
}
     fbe:	0018      	movs	r0, r3
     fc0:	46bd      	mov	sp, r7
     fc2:	b002      	add	sp, #8
     fc4:	bd80      	pop	{r7, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	40000400 	.word	0x40000400

00000fcc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     fcc:	b580      	push	{r7, lr}
     fce:	b082      	sub	sp, #8
     fd0:	af00      	add	r7, sp, #0
     fd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     fd4:	687b      	ldr	r3, [r7, #4]
     fd6:	2280      	movs	r2, #128	; 0x80
     fd8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     fda:	687b      	ldr	r3, [r7, #4]
     fdc:	2200      	movs	r2, #0
     fde:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	2201      	movs	r2, #1
     fe4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     fe6:	687b      	ldr	r3, [r7, #4]
     fe8:	2200      	movs	r2, #0
     fea:	70da      	strb	r2, [r3, #3]
}
     fec:	46c0      	nop			; (mov r8, r8)
     fee:	46bd      	mov	sp, r7
     ff0:	b002      	add	sp, #8
     ff2:	bd80      	pop	{r7, pc}

00000ff4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     ff4:	b580      	push	{r7, lr}
     ff6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ff8:	4b05      	ldr	r3, [pc, #20]	; (1010 <STACK_SIZE+0x10>)
     ffa:	789b      	ldrb	r3, [r3, #2]
     ffc:	b2db      	uxtb	r3, r3
     ffe:	001a      	movs	r2, r3
    1000:	2302      	movs	r3, #2
    1002:	4013      	ands	r3, r2
    1004:	1e5a      	subs	r2, r3, #1
    1006:	4193      	sbcs	r3, r2
    1008:	b2db      	uxtb	r3, r3
}
    100a:	0018      	movs	r0, r3
    100c:	46bd      	mov	sp, r7
    100e:	bd80      	pop	{r7, pc}
    1010:	41002000 	.word	0x41002000

00001014 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    1014:	b580      	push	{r7, lr}
    1016:	b084      	sub	sp, #16
    1018:	af00      	add	r7, sp, #0
    101a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    101c:	687b      	ldr	r3, [r7, #4]
    101e:	681b      	ldr	r3, [r3, #0]
    1020:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1022:	68fb      	ldr	r3, [r7, #12]
    1024:	69db      	ldr	r3, [r3, #28]
    1026:	2207      	movs	r2, #7
    1028:	4013      	ands	r3, r2
    102a:	1e5a      	subs	r2, r3, #1
    102c:	4193      	sbcs	r3, r2
    102e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    1030:	0018      	movs	r0, r3
    1032:	46bd      	mov	sp, r7
    1034:	b004      	add	sp, #16
    1036:	bd80      	pop	{r7, pc}

00001038 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    1038:	b580      	push	{r7, lr}
    103a:	b082      	sub	sp, #8
    103c:	af00      	add	r7, sp, #0
    103e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1040:	46c0      	nop			; (mov r8, r8)
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	0018      	movs	r0, r3
    1046:	4b04      	ldr	r3, [pc, #16]	; (1058 <_i2c_master_wait_for_sync+0x20>)
    1048:	4798      	blx	r3
    104a:	1e03      	subs	r3, r0, #0
    104c:	d1f9      	bne.n	1042 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	46bd      	mov	sp, r7
    1052:	b002      	add	sp, #8
    1054:	bd80      	pop	{r7, pc}
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	00001015 	.word	0x00001015

0000105c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    105c:	b5f0      	push	{r4, r5, r6, r7, lr}
    105e:	b097      	sub	sp, #92	; 0x5c
    1060:	af00      	add	r7, sp, #0
    1062:	6178      	str	r0, [r7, #20]
    1064:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    1066:	2300      	movs	r3, #0
    1068:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    106a:	2300      	movs	r3, #0
    106c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    106e:	2300      	movs	r3, #0
    1070:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    1072:	233b      	movs	r3, #59	; 0x3b
    1074:	2210      	movs	r2, #16
    1076:	4694      	mov	ip, r2
    1078:	44bc      	add	ip, r7
    107a:	4463      	add	r3, ip
    107c:	2200      	movs	r2, #0
    107e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1080:	697b      	ldr	r3, [r7, #20]
    1082:	681b      	ldr	r3, [r3, #0]
    1084:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    1086:	697b      	ldr	r3, [r7, #20]
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    108c:	2323      	movs	r3, #35	; 0x23
    108e:	2210      	movs	r2, #16
    1090:	18ba      	adds	r2, r7, r2
    1092:	18d4      	adds	r4, r2, r3
    1094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1096:	0018      	movs	r0, r3
    1098:	4bc0      	ldr	r3, [pc, #768]	; (139c <_i2c_master_set_config+0x340>)
    109a:	4798      	blx	r3
    109c:	0003      	movs	r3, r0
    109e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    10a0:	230c      	movs	r3, #12
    10a2:	2210      	movs	r2, #16
    10a4:	4694      	mov	ip, r2
    10a6:	44bc      	add	ip, r7
    10a8:	4463      	add	r3, ip
    10aa:	0018      	movs	r0, r3
    10ac:	4bbc      	ldr	r3, [pc, #752]	; (13a0 <_i2c_master_set_config+0x344>)
    10ae:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    10b0:	693b      	ldr	r3, [r7, #16]
    10b2:	69db      	ldr	r3, [r3, #28]
    10b4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    10b6:	693b      	ldr	r3, [r7, #16]
    10b8:	6a1b      	ldr	r3, [r3, #32]
    10ba:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    10bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    10be:	2b00      	cmp	r3, #0
    10c0:	d106      	bne.n	10d0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    10c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10c4:	2100      	movs	r1, #0
    10c6:	0018      	movs	r0, r3
    10c8:	4bb6      	ldr	r3, [pc, #728]	; (13a4 <_i2c_master_set_config+0x348>)
    10ca:	4798      	blx	r3
    10cc:	0003      	movs	r3, r0
    10ce:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    10d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    10d2:	b2da      	uxtb	r2, r3
    10d4:	230c      	movs	r3, #12
    10d6:	2110      	movs	r1, #16
    10d8:	468c      	mov	ip, r1
    10da:	44bc      	add	ip, r7
    10dc:	4463      	add	r3, ip
    10de:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    10e0:	230c      	movs	r3, #12
    10e2:	2210      	movs	r2, #16
    10e4:	4694      	mov	ip, r2
    10e6:	44bc      	add	ip, r7
    10e8:	4463      	add	r3, ip
    10ea:	2202      	movs	r2, #2
    10ec:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    10ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    10f0:	0c1b      	lsrs	r3, r3, #16
    10f2:	b2db      	uxtb	r3, r3
    10f4:	220c      	movs	r2, #12
    10f6:	2110      	movs	r1, #16
    10f8:	468c      	mov	ip, r1
    10fa:	44bc      	add	ip, r7
    10fc:	4462      	add	r2, ip
    10fe:	0011      	movs	r1, r2
    1100:	0018      	movs	r0, r3
    1102:	4ba9      	ldr	r3, [pc, #676]	; (13a8 <_i2c_master_set_config+0x34c>)
    1104:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    1106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1108:	2b00      	cmp	r3, #0
    110a:	d106      	bne.n	111a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    110c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    110e:	2101      	movs	r1, #1
    1110:	0018      	movs	r0, r3
    1112:	4ba4      	ldr	r3, [pc, #656]	; (13a4 <_i2c_master_set_config+0x348>)
    1114:	4798      	blx	r3
    1116:	0003      	movs	r3, r0
    1118:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    111a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    111c:	b2da      	uxtb	r2, r3
    111e:	230c      	movs	r3, #12
    1120:	2110      	movs	r1, #16
    1122:	468c      	mov	ip, r1
    1124:	44bc      	add	ip, r7
    1126:	4463      	add	r3, ip
    1128:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    112a:	230c      	movs	r3, #12
    112c:	2210      	movs	r2, #16
    112e:	4694      	mov	ip, r2
    1130:	44bc      	add	ip, r7
    1132:	4463      	add	r3, ip
    1134:	2202      	movs	r2, #2
    1136:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    113a:	0c1b      	lsrs	r3, r3, #16
    113c:	b2db      	uxtb	r3, r3
    113e:	220c      	movs	r2, #12
    1140:	2110      	movs	r1, #16
    1142:	468c      	mov	ip, r1
    1144:	44bc      	add	ip, r7
    1146:	4462      	add	r2, ip
    1148:	0011      	movs	r1, r2
    114a:	0018      	movs	r0, r3
    114c:	4b96      	ldr	r3, [pc, #600]	; (13a8 <_i2c_master_set_config+0x34c>)
    114e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1150:	693b      	ldr	r3, [r7, #16]
    1152:	8a9a      	ldrh	r2, [r3, #20]
    1154:	697b      	ldr	r3, [r7, #20]
    1156:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    1158:	693b      	ldr	r3, [r7, #16]
    115a:	8ada      	ldrh	r2, [r3, #22]
    115c:	697b      	ldr	r3, [r7, #20]
    115e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1160:	693b      	ldr	r3, [r7, #16]
    1162:	7e1b      	ldrb	r3, [r3, #24]
    1164:	2b00      	cmp	r3, #0
    1166:	d103      	bne.n	1170 <_i2c_master_set_config+0x114>
    1168:	4b90      	ldr	r3, [pc, #576]	; (13ac <_i2c_master_set_config+0x350>)
    116a:	4798      	blx	r3
    116c:	1e03      	subs	r3, r0, #0
    116e:	d002      	beq.n	1176 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1170:	2380      	movs	r3, #128	; 0x80
    1172:	657b      	str	r3, [r7, #84]	; 0x54
    1174:	e001      	b.n	117a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    1176:	2300      	movs	r3, #0
    1178:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    117a:	693b      	ldr	r3, [r7, #16]
    117c:	691b      	ldr	r3, [r3, #16]
    117e:	2b00      	cmp	r3, #0
    1180:	d004      	beq.n	118c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    1182:	693b      	ldr	r3, [r7, #16]
    1184:	691b      	ldr	r3, [r3, #16]
    1186:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1188:	4313      	orrs	r3, r2
    118a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    118c:	693b      	ldr	r3, [r7, #16]
    118e:	689b      	ldr	r3, [r3, #8]
    1190:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1192:	4313      	orrs	r3, r2
    1194:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    1196:	693b      	ldr	r3, [r7, #16]
    1198:	2224      	movs	r2, #36	; 0x24
    119a:	5c9b      	ldrb	r3, [r3, r2]
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    11a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    11a2:	2280      	movs	r2, #128	; 0x80
    11a4:	05d2      	lsls	r2, r2, #23
    11a6:	4313      	orrs	r3, r2
    11a8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    11aa:	693b      	ldr	r3, [r7, #16]
    11ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    11ae:	2b00      	cmp	r3, #0
    11b0:	d004      	beq.n	11bc <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    11b2:	693b      	ldr	r3, [r7, #16]
    11b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    11b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    11b8:	4313      	orrs	r3, r2
    11ba:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    11bc:	693b      	ldr	r3, [r7, #16]
    11be:	222c      	movs	r2, #44	; 0x2c
    11c0:	5c9b      	ldrb	r3, [r3, r2]
    11c2:	2b00      	cmp	r3, #0
    11c4:	d105      	bne.n	11d2 <_i2c_master_set_config+0x176>
    11c6:	693b      	ldr	r3, [r7, #16]
    11c8:	689a      	ldr	r2, [r3, #8]
    11ca:	2380      	movs	r3, #128	; 0x80
    11cc:	049b      	lsls	r3, r3, #18
    11ce:	429a      	cmp	r2, r3
    11d0:	d104      	bne.n	11dc <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    11d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    11d4:	2280      	movs	r2, #128	; 0x80
    11d6:	0512      	lsls	r2, r2, #20
    11d8:	4313      	orrs	r3, r2
    11da:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    11dc:	693b      	ldr	r3, [r7, #16]
    11de:	222d      	movs	r2, #45	; 0x2d
    11e0:	5c9b      	ldrb	r3, [r3, r2]
    11e2:	2b00      	cmp	r3, #0
    11e4:	d004      	beq.n	11f0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    11e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    11e8:	2280      	movs	r2, #128	; 0x80
    11ea:	0412      	lsls	r2, r2, #16
    11ec:	4313      	orrs	r3, r2
    11ee:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    11f0:	693b      	ldr	r3, [r7, #16]
    11f2:	222e      	movs	r2, #46	; 0x2e
    11f4:	5c9b      	ldrb	r3, [r3, r2]
    11f6:	2b00      	cmp	r3, #0
    11f8:	d004      	beq.n	1204 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    11fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    11fc:	2280      	movs	r2, #128	; 0x80
    11fe:	03d2      	lsls	r2, r2, #15
    1200:	4313      	orrs	r3, r2
    1202:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1206:	681a      	ldr	r2, [r3, #0]
    1208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    120a:	431a      	orrs	r2, r3
    120c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    120e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    1210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1212:	2280      	movs	r2, #128	; 0x80
    1214:	0052      	lsls	r2, r2, #1
    1216:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1218:	2323      	movs	r3, #35	; 0x23
    121a:	2210      	movs	r2, #16
    121c:	4694      	mov	ip, r2
    121e:	44bc      	add	ip, r7
    1220:	4463      	add	r3, ip
    1222:	781b      	ldrb	r3, [r3, #0]
    1224:	3314      	adds	r3, #20
    1226:	b2db      	uxtb	r3, r3
    1228:	0018      	movs	r0, r3
    122a:	4b61      	ldr	r3, [pc, #388]	; (13b0 <_i2c_master_set_config+0x354>)
    122c:	4798      	blx	r3
    122e:	0003      	movs	r3, r0
    1230:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    1232:	693b      	ldr	r3, [r7, #16]
    1234:	681b      	ldr	r3, [r3, #0]
    1236:	22fa      	movs	r2, #250	; 0xfa
    1238:	0092      	lsls	r2, r2, #2
    123a:	4353      	muls	r3, r2
    123c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    123e:	693b      	ldr	r3, [r7, #16]
    1240:	685b      	ldr	r3, [r3, #4]
    1242:	22fa      	movs	r2, #250	; 0xfa
    1244:	0092      	lsls	r2, r2, #2
    1246:	4353      	muls	r3, r2
    1248:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    124a:	693b      	ldr	r3, [r7, #16]
    124c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    124e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    1250:	4b58      	ldr	r3, [pc, #352]	; (13b4 <_i2c_master_set_config+0x358>)
    1252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1254:	4798      	blx	r3
    1256:	0005      	movs	r5, r0
    1258:	000e      	movs	r6, r1
    125a:	4b56      	ldr	r3, [pc, #344]	; (13b4 <_i2c_master_set_config+0x358>)
    125c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    125e:	4798      	blx	r3
    1260:	60b8      	str	r0, [r7, #8]
    1262:	60f9      	str	r1, [r7, #12]
    1264:	4b53      	ldr	r3, [pc, #332]	; (13b4 <_i2c_master_set_config+0x358>)
    1266:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1268:	4798      	blx	r3
    126a:	4c53      	ldr	r4, [pc, #332]	; (13b8 <_i2c_master_set_config+0x35c>)
    126c:	4a53      	ldr	r2, [pc, #332]	; (13bc <_i2c_master_set_config+0x360>)
    126e:	4b54      	ldr	r3, [pc, #336]	; (13c0 <_i2c_master_set_config+0x364>)
    1270:	47a0      	blx	r4
    1272:	0003      	movs	r3, r0
    1274:	000c      	movs	r4, r1
    1276:	603b      	str	r3, [r7, #0]
    1278:	607c      	str	r4, [r7, #4]
    127a:	4b4e      	ldr	r3, [pc, #312]	; (13b4 <_i2c_master_set_config+0x358>)
    127c:	6a38      	ldr	r0, [r7, #32]
    127e:	4798      	blx	r3
    1280:	0002      	movs	r2, r0
    1282:	000b      	movs	r3, r1
    1284:	4c4c      	ldr	r4, [pc, #304]	; (13b8 <_i2c_master_set_config+0x35c>)
    1286:	6838      	ldr	r0, [r7, #0]
    1288:	6879      	ldr	r1, [r7, #4]
    128a:	47a0      	blx	r4
    128c:	0003      	movs	r3, r0
    128e:	000c      	movs	r4, r1
    1290:	0018      	movs	r0, r3
    1292:	0021      	movs	r1, r4
    1294:	4c4b      	ldr	r4, [pc, #300]	; (13c4 <_i2c_master_set_config+0x368>)
    1296:	2200      	movs	r2, #0
    1298:	4b4b      	ldr	r3, [pc, #300]	; (13c8 <_i2c_master_set_config+0x36c>)
    129a:	47a0      	blx	r4
    129c:	0003      	movs	r3, r0
    129e:	000c      	movs	r4, r1
    12a0:	001a      	movs	r2, r3
    12a2:	0023      	movs	r3, r4
    12a4:	4c44      	ldr	r4, [pc, #272]	; (13b8 <_i2c_master_set_config+0x35c>)
    12a6:	68b8      	ldr	r0, [r7, #8]
    12a8:	68f9      	ldr	r1, [r7, #12]
    12aa:	47a0      	blx	r4
    12ac:	0003      	movs	r3, r0
    12ae:	000c      	movs	r4, r1
    12b0:	001a      	movs	r2, r3
    12b2:	0023      	movs	r3, r4
    12b4:	4c45      	ldr	r4, [pc, #276]	; (13cc <_i2c_master_set_config+0x370>)
    12b6:	0028      	movs	r0, r5
    12b8:	0031      	movs	r1, r6
    12ba:	47a0      	blx	r4
    12bc:	0003      	movs	r3, r0
    12be:	000c      	movs	r4, r1
    12c0:	001d      	movs	r5, r3
    12c2:	0026      	movs	r6, r4
    12c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    12c6:	005a      	lsls	r2, r3, #1
    12c8:	4b3a      	ldr	r3, [pc, #232]	; (13b4 <_i2c_master_set_config+0x358>)
    12ca:	0010      	movs	r0, r2
    12cc:	4798      	blx	r3
    12ce:	0002      	movs	r2, r0
    12d0:	000b      	movs	r3, r1
    12d2:	4c3c      	ldr	r4, [pc, #240]	; (13c4 <_i2c_master_set_config+0x368>)
    12d4:	0028      	movs	r0, r5
    12d6:	0031      	movs	r1, r6
    12d8:	47a0      	blx	r4
    12da:	0003      	movs	r3, r0
    12dc:	000c      	movs	r4, r1
    12de:	0018      	movs	r0, r3
    12e0:	0021      	movs	r1, r4
    12e2:	4c3a      	ldr	r4, [pc, #232]	; (13cc <_i2c_master_set_config+0x370>)
    12e4:	2200      	movs	r2, #0
    12e6:	4b3a      	ldr	r3, [pc, #232]	; (13d0 <_i2c_master_set_config+0x374>)
    12e8:	47a0      	blx	r4
    12ea:	0003      	movs	r3, r0
    12ec:	000c      	movs	r4, r1
    12ee:	001d      	movs	r5, r3
    12f0:	0026      	movs	r6, r4
    12f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    12f4:	005a      	lsls	r2, r3, #1
    12f6:	4b2f      	ldr	r3, [pc, #188]	; (13b4 <_i2c_master_set_config+0x358>)
    12f8:	0010      	movs	r0, r2
    12fa:	4798      	blx	r3
    12fc:	0002      	movs	r2, r0
    12fe:	000b      	movs	r3, r1
    1300:	4c34      	ldr	r4, [pc, #208]	; (13d4 <_i2c_master_set_config+0x378>)
    1302:	0028      	movs	r0, r5
    1304:	0031      	movs	r1, r6
    1306:	47a0      	blx	r4
    1308:	0003      	movs	r3, r0
    130a:	000c      	movs	r4, r1
    130c:	0019      	movs	r1, r3
    130e:	0022      	movs	r2, r4
    1310:	4b31      	ldr	r3, [pc, #196]	; (13d8 <_i2c_master_set_config+0x37c>)
    1312:	0008      	movs	r0, r1
    1314:	0011      	movs	r1, r2
    1316:	4798      	blx	r3
    1318:	0003      	movs	r3, r0
    131a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    131c:	693b      	ldr	r3, [r7, #16]
    131e:	689a      	ldr	r2, [r3, #8]
    1320:	2380      	movs	r3, #128	; 0x80
    1322:	049b      	lsls	r3, r3, #18
    1324:	429a      	cmp	r2, r3
    1326:	d16a      	bne.n	13fe <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1328:	4b22      	ldr	r3, [pc, #136]	; (13b4 <_i2c_master_set_config+0x358>)
    132a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    132c:	4798      	blx	r3
    132e:	4c25      	ldr	r4, [pc, #148]	; (13c4 <_i2c_master_set_config+0x368>)
    1330:	0002      	movs	r2, r0
    1332:	000b      	movs	r3, r1
    1334:	47a0      	blx	r4
    1336:	0003      	movs	r3, r0
    1338:	000c      	movs	r4, r1
    133a:	001d      	movs	r5, r3
    133c:	0026      	movs	r6, r4
    133e:	4b1d      	ldr	r3, [pc, #116]	; (13b4 <_i2c_master_set_config+0x358>)
    1340:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1342:	4798      	blx	r3
    1344:	4c1c      	ldr	r4, [pc, #112]	; (13b8 <_i2c_master_set_config+0x35c>)
    1346:	2200      	movs	r2, #0
    1348:	4b24      	ldr	r3, [pc, #144]	; (13dc <_i2c_master_set_config+0x380>)
    134a:	47a0      	blx	r4
    134c:	0003      	movs	r3, r0
    134e:	000c      	movs	r4, r1
    1350:	001a      	movs	r2, r3
    1352:	0023      	movs	r3, r4
    1354:	4c1f      	ldr	r4, [pc, #124]	; (13d4 <_i2c_master_set_config+0x378>)
    1356:	0028      	movs	r0, r5
    1358:	0031      	movs	r1, r6
    135a:	47a0      	blx	r4
    135c:	0003      	movs	r3, r0
    135e:	000c      	movs	r4, r1
    1360:	0018      	movs	r0, r3
    1362:	0021      	movs	r1, r4
    1364:	4c19      	ldr	r4, [pc, #100]	; (13cc <_i2c_master_set_config+0x370>)
    1366:	2200      	movs	r2, #0
    1368:	4b19      	ldr	r3, [pc, #100]	; (13d0 <_i2c_master_set_config+0x374>)
    136a:	47a0      	blx	r4
    136c:	0003      	movs	r3, r0
    136e:	000c      	movs	r4, r1
    1370:	0019      	movs	r1, r3
    1372:	0022      	movs	r2, r4
    1374:	4b18      	ldr	r3, [pc, #96]	; (13d8 <_i2c_master_set_config+0x37c>)
    1376:	0008      	movs	r0, r1
    1378:	0011      	movs	r1, r2
    137a:	4798      	blx	r3
    137c:	0003      	movs	r3, r0
    137e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    1380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1382:	2b00      	cmp	r3, #0
    1384:	d02e      	beq.n	13e4 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1386:	4b16      	ldr	r3, [pc, #88]	; (13e0 <_i2c_master_set_config+0x384>)
    1388:	6a79      	ldr	r1, [r7, #36]	; 0x24
    138a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    138c:	4798      	blx	r3
    138e:	0003      	movs	r3, r0
    1390:	1e9a      	subs	r2, r3, #2
    1392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1394:	1ad3      	subs	r3, r2, r3
    1396:	653b      	str	r3, [r7, #80]	; 0x50
    1398:	e031      	b.n	13fe <_i2c_master_set_config+0x3a2>
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	000037cd 	.word	0x000037cd
    13a0:	00000fcd 	.word	0x00000fcd
    13a4:	0000360d 	.word	0x0000360d
    13a8:	0000be1d 	.word	0x0000be1d
    13ac:	00000ff5 	.word	0x00000ff5
    13b0:	0000bc55 	.word	0x0000bc55
    13b4:	0000e8f1 	.word	0x0000e8f1
    13b8:	0000dce9 	.word	0x0000dce9
    13bc:	e826d695 	.word	0xe826d695
    13c0:	3e112e0b 	.word	0x3e112e0b
    13c4:	0000d065 	.word	0x0000d065
    13c8:	40240000 	.word	0x40240000
    13cc:	0000e1dd 	.word	0x0000e1dd
    13d0:	3ff00000 	.word	0x3ff00000
    13d4:	0000d6bd 	.word	0x0000d6bd
    13d8:	0000e885 	.word	0x0000e885
    13dc:	40080000 	.word	0x40080000
    13e0:	0000c161 	.word	0x0000c161
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    13e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    13e6:	005a      	lsls	r2, r3, #1
    13e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    13ea:	18d3      	adds	r3, r2, r3
    13ec:	1e5a      	subs	r2, r3, #1
    13ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    13f0:	0059      	lsls	r1, r3, #1
    13f2:	4b1d      	ldr	r3, [pc, #116]	; (1468 <_i2c_master_set_config+0x40c>)
    13f4:	0010      	movs	r0, r2
    13f6:	4798      	blx	r3
    13f8:	0003      	movs	r3, r0
    13fa:	3b01      	subs	r3, #1
    13fc:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    13fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1400:	2bff      	cmp	r3, #255	; 0xff
    1402:	dc08      	bgt.n	1416 <_i2c_master_set_config+0x3ba>
    1404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1406:	2b00      	cmp	r3, #0
    1408:	db05      	blt.n	1416 <_i2c_master_set_config+0x3ba>
    140a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    140c:	2bff      	cmp	r3, #255	; 0xff
    140e:	dc02      	bgt.n	1416 <_i2c_master_set_config+0x3ba>
    1410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1412:	2b00      	cmp	r3, #0
    1414:	da06      	bge.n	1424 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1416:	233b      	movs	r3, #59	; 0x3b
    1418:	2210      	movs	r2, #16
    141a:	4694      	mov	ip, r2
    141c:	44bc      	add	ip, r7
    141e:	4463      	add	r3, ip
    1420:	2240      	movs	r2, #64	; 0x40
    1422:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    1424:	233b      	movs	r3, #59	; 0x3b
    1426:	2210      	movs	r2, #16
    1428:	4694      	mov	ip, r2
    142a:	44bc      	add	ip, r7
    142c:	4463      	add	r3, ip
    142e:	781b      	ldrb	r3, [r3, #0]
    1430:	2b40      	cmp	r3, #64	; 0x40
    1432:	d00e      	beq.n	1452 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1436:	22ff      	movs	r2, #255	; 0xff
    1438:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    143a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    143c:	041b      	lsls	r3, r3, #16
    143e:	0019      	movs	r1, r3
    1440:	23ff      	movs	r3, #255	; 0xff
    1442:	041b      	lsls	r3, r3, #16
    1444:	400b      	ands	r3, r1
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1446:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    144a:	0612      	lsls	r2, r2, #24
    144c:	431a      	orrs	r2, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    144e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1450:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
	}

	return tmp_status_code;
    1452:	233b      	movs	r3, #59	; 0x3b
    1454:	2210      	movs	r2, #16
    1456:	4694      	mov	ip, r2
    1458:	44bc      	add	ip, r7
    145a:	4463      	add	r3, ip
    145c:	781b      	ldrb	r3, [r3, #0]
}
    145e:	0018      	movs	r0, r3
    1460:	46bd      	mov	sp, r7
    1462:	b017      	add	sp, #92	; 0x5c
    1464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	0000c161 	.word	0x0000c161

0000146c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    146c:	b580      	push	{r7, lr}
    146e:	b08a      	sub	sp, #40	; 0x28
    1470:	af00      	add	r7, sp, #0
    1472:	60f8      	str	r0, [r7, #12]
    1474:	60b9      	str	r1, [r7, #8]
    1476:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1478:	68fb      	ldr	r3, [r7, #12]
    147a:	68ba      	ldr	r2, [r7, #8]
    147c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    147e:	68fb      	ldr	r3, [r7, #12]
    1480:	681b      	ldr	r3, [r3, #0]
    1482:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1484:	68fb      	ldr	r3, [r7, #12]
    1486:	681b      	ldr	r3, [r3, #0]
    1488:	0018      	movs	r0, r3
    148a:	4b25      	ldr	r3, [pc, #148]	; (1520 <i2c_master_init+0xb4>)
    148c:	4798      	blx	r3
    148e:	0003      	movs	r3, r0
    1490:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1492:	6a3b      	ldr	r3, [r7, #32]
    1494:	3302      	adds	r3, #2
    1496:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1498:	6a3b      	ldr	r3, [r7, #32]
    149a:	3314      	adds	r3, #20
    149c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    149e:	2201      	movs	r2, #1
    14a0:	69fb      	ldr	r3, [r7, #28]
    14a2:	409a      	lsls	r2, r3
    14a4:	0013      	movs	r3, r2
    14a6:	0019      	movs	r1, r3
    14a8:	2002      	movs	r0, #2
    14aa:	4b1e      	ldr	r3, [pc, #120]	; (1524 <i2c_master_init+0xb8>)
    14ac:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    14ae:	2314      	movs	r3, #20
    14b0:	18fb      	adds	r3, r7, r3
    14b2:	0018      	movs	r0, r3
    14b4:	4b1c      	ldr	r3, [pc, #112]	; (1528 <i2c_master_init+0xbc>)
    14b6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    14b8:	687b      	ldr	r3, [r7, #4]
    14ba:	7b1a      	ldrb	r2, [r3, #12]
    14bc:	2314      	movs	r3, #20
    14be:	18fb      	adds	r3, r7, r3
    14c0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    14c2:	69bb      	ldr	r3, [r7, #24]
    14c4:	b2db      	uxtb	r3, r3
    14c6:	2214      	movs	r2, #20
    14c8:	18ba      	adds	r2, r7, r2
    14ca:	0011      	movs	r1, r2
    14cc:	0018      	movs	r0, r3
    14ce:	4b17      	ldr	r3, [pc, #92]	; (152c <i2c_master_init+0xc0>)
    14d0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    14d2:	69bb      	ldr	r3, [r7, #24]
    14d4:	b2db      	uxtb	r3, r3
    14d6:	0018      	movs	r0, r3
    14d8:	4b15      	ldr	r3, [pc, #84]	; (1530 <i2c_master_init+0xc4>)
    14da:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    14dc:	687b      	ldr	r3, [r7, #4]
    14de:	7b1b      	ldrb	r3, [r3, #12]
    14e0:	2100      	movs	r1, #0
    14e2:	0018      	movs	r0, r3
    14e4:	4b13      	ldr	r3, [pc, #76]	; (1534 <i2c_master_init+0xc8>)
    14e6:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    14e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	2202      	movs	r2, #2
    14ee:	4013      	ands	r3, r2
    14f0:	d001      	beq.n	14f6 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    14f2:	231c      	movs	r3, #28
    14f4:	e010      	b.n	1518 <i2c_master_init+0xac>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    14f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14f8:	681b      	ldr	r3, [r3, #0]
    14fa:	2201      	movs	r2, #1
    14fc:	4013      	ands	r3, r2
    14fe:	d001      	beq.n	1504 <i2c_master_init+0x98>
		return STATUS_BUSY;
    1500:	2305      	movs	r3, #5
    1502:	e009      	b.n	1518 <i2c_master_init+0xac>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    1504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1506:	2214      	movs	r2, #20
    1508:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    150a:	687a      	ldr	r2, [r7, #4]
    150c:	68fb      	ldr	r3, [r7, #12]
    150e:	0011      	movs	r1, r2
    1510:	0018      	movs	r0, r3
    1512:	4b09      	ldr	r3, [pc, #36]	; (1538 <i2c_master_init+0xcc>)
    1514:	4798      	blx	r3
    1516:	0003      	movs	r3, r0
}
    1518:	0018      	movs	r0, r3
    151a:	46bd      	mov	sp, r7
    151c:	b00a      	add	sp, #40	; 0x28
    151e:	bd80      	pop	{r7, pc}
    1520:	000037cd 	.word	0x000037cd
    1524:	00000f71 	.word	0x00000f71
    1528:	00000f59 	.word	0x00000f59
    152c:	0000bb31 	.word	0x0000bb31
    1530:	0000bb75 	.word	0x0000bb75
    1534:	00003581 	.word	0x00003581
    1538:	0000105d 	.word	0x0000105d

0000153c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    153c:	b580      	push	{r7, lr}
    153e:	b084      	sub	sp, #16
    1540:	af00      	add	r7, sp, #0
    1542:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1544:	687b      	ldr	r3, [r7, #4]
    1546:	681b      	ldr	r3, [r3, #0]
    1548:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    154a:	68fb      	ldr	r3, [r7, #12]
    154c:	7e1b      	ldrb	r3, [r3, #24]
    154e:	b2db      	uxtb	r3, r3
    1550:	001a      	movs	r2, r3
    1552:	2302      	movs	r3, #2
    1554:	4013      	ands	r3, r2
    1556:	d00b      	beq.n	1570 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1558:	68fb      	ldr	r3, [r7, #12]
    155a:	2202      	movs	r2, #2
    155c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    155e:	68fb      	ldr	r3, [r7, #12]
    1560:	8b5b      	ldrh	r3, [r3, #26]
    1562:	b29b      	uxth	r3, r3
    1564:	001a      	movs	r2, r3
    1566:	2302      	movs	r3, #2
    1568:	4013      	ands	r3, r2
    156a:	d011      	beq.n	1590 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    156c:	2341      	movs	r3, #65	; 0x41
    156e:	e010      	b.n	1592 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1570:	68fb      	ldr	r3, [r7, #12]
    1572:	8b5b      	ldrh	r3, [r3, #26]
    1574:	b29b      	uxth	r3, r3
    1576:	001a      	movs	r2, r3
    1578:	2304      	movs	r3, #4
    157a:	4013      	ands	r3, r2
    157c:	d008      	beq.n	1590 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    157e:	68fb      	ldr	r3, [r7, #12]
    1580:	685b      	ldr	r3, [r3, #4]
    1582:	22c0      	movs	r2, #192	; 0xc0
    1584:	0292      	lsls	r2, r2, #10
    1586:	431a      	orrs	r2, r3
    1588:	68fb      	ldr	r3, [r7, #12]
    158a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    158c:	2318      	movs	r3, #24
    158e:	e000      	b.n	1592 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1590:	2300      	movs	r3, #0
}
    1592:	0018      	movs	r0, r3
    1594:	46bd      	mov	sp, r7
    1596:	b004      	add	sp, #16
    1598:	bd80      	pop	{r7, pc}
    159a:	46c0      	nop			; (mov r8, r8)

0000159c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    159c:	b580      	push	{r7, lr}
    159e:	b084      	sub	sp, #16
    15a0:	af00      	add	r7, sp, #0
    15a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    15a4:	687b      	ldr	r3, [r7, #4]
    15a6:	681b      	ldr	r3, [r3, #0]
    15a8:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    15aa:	230e      	movs	r3, #14
    15ac:	18fb      	adds	r3, r7, r3
    15ae:	2200      	movs	r2, #0
    15b0:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    15b2:	e00f      	b.n	15d4 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    15b4:	230e      	movs	r3, #14
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	220e      	movs	r2, #14
    15ba:	18ba      	adds	r2, r7, r2
    15bc:	8812      	ldrh	r2, [r2, #0]
    15be:	3201      	adds	r2, #1
    15c0:	801a      	strh	r2, [r3, #0]
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	891b      	ldrh	r3, [r3, #8]
    15c6:	220e      	movs	r2, #14
    15c8:	18ba      	adds	r2, r7, r2
    15ca:	8812      	ldrh	r2, [r2, #0]
    15cc:	429a      	cmp	r2, r3
    15ce:	d301      	bcc.n	15d4 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    15d0:	2312      	movs	r3, #18
    15d2:	e00e      	b.n	15f2 <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    15d4:	68bb      	ldr	r3, [r7, #8]
    15d6:	7e1b      	ldrb	r3, [r3, #24]
    15d8:	b2db      	uxtb	r3, r3
    15da:	001a      	movs	r2, r3
    15dc:	2301      	movs	r3, #1
    15de:	4013      	ands	r3, r2
    15e0:	d106      	bne.n	15f0 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    15e2:	68bb      	ldr	r3, [r7, #8]
    15e4:	7e1b      	ldrb	r3, [r3, #24]
    15e6:	b2db      	uxtb	r3, r3
    15e8:	001a      	movs	r2, r3
    15ea:	2302      	movs	r3, #2
    15ec:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    15ee:	d0e1      	beq.n	15b4 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    15f0:	2300      	movs	r3, #0
}
    15f2:	0018      	movs	r0, r3
    15f4:	46bd      	mov	sp, r7
    15f6:	b004      	add	sp, #16
    15f8:	bd80      	pop	{r7, pc}
    15fa:	46c0      	nop			; (mov r8, r8)

000015fc <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    15fc:	b590      	push	{r4, r7, lr}
    15fe:	b085      	sub	sp, #20
    1600:	af00      	add	r7, sp, #0
    1602:	6078      	str	r0, [r7, #4]
    1604:	000a      	movs	r2, r1
    1606:	1cfb      	adds	r3, r7, #3
    1608:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    160a:	687b      	ldr	r3, [r7, #4]
    160c:	681b      	ldr	r3, [r3, #0]
    160e:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1610:	68fb      	ldr	r3, [r7, #12]
    1612:	685b      	ldr	r3, [r3, #4]
    1614:	2280      	movs	r2, #128	; 0x80
    1616:	02d2      	lsls	r2, r2, #11
    1618:	431a      	orrs	r2, r3
    161a:	68fb      	ldr	r3, [r7, #12]
    161c:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    161e:	1cfb      	adds	r3, r7, #3
    1620:	781a      	ldrb	r2, [r3, #0]
    1622:	68fb      	ldr	r3, [r7, #12]
    1624:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1626:	230b      	movs	r3, #11
    1628:	18fc      	adds	r4, r7, r3
    162a:	687b      	ldr	r3, [r7, #4]
    162c:	0018      	movs	r0, r3
    162e:	4b07      	ldr	r3, [pc, #28]	; (164c <_i2c_master_send_hs_master_code+0x50>)
    1630:	4798      	blx	r3
    1632:	0003      	movs	r3, r0
    1634:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1636:	68fb      	ldr	r3, [r7, #12]
    1638:	2201      	movs	r2, #1
    163a:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    163c:	230b      	movs	r3, #11
    163e:	18fb      	adds	r3, r7, r3
    1640:	781b      	ldrb	r3, [r3, #0]
}
    1642:	0018      	movs	r0, r3
    1644:	46bd      	mov	sp, r7
    1646:	b005      	add	sp, #20
    1648:	bd90      	pop	{r4, r7, pc}
    164a:	46c0      	nop			; (mov r8, r8)
    164c:	0000159d 	.word	0x0000159d

00001650 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1650:	b590      	push	{r4, r7, lr}
    1652:	b087      	sub	sp, #28
    1654:	af00      	add	r7, sp, #0
    1656:	6078      	str	r0, [r7, #4]
    1658:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    165a:	687b      	ldr	r3, [r7, #4]
    165c:	681b      	ldr	r3, [r3, #0]
    165e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1660:	2314      	movs	r3, #20
    1662:	18fb      	adds	r3, r7, r3
    1664:	683a      	ldr	r2, [r7, #0]
    1666:	8852      	ldrh	r2, [r2, #2]
    1668:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    166a:	2312      	movs	r3, #18
    166c:	18fb      	adds	r3, r7, r3
    166e:	2200      	movs	r2, #0
    1670:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1672:	68fb      	ldr	r3, [r7, #12]
    1674:	681b      	ldr	r3, [r3, #0]
    1676:	011b      	lsls	r3, r3, #4
    1678:	0fdb      	lsrs	r3, r3, #31
    167a:	b2db      	uxtb	r3, r3
    167c:	001a      	movs	r2, r3
    167e:	230b      	movs	r3, #11
    1680:	18fb      	adds	r3, r7, r3
    1682:	1e51      	subs	r1, r2, #1
    1684:	418a      	sbcs	r2, r1
    1686:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1688:	683b      	ldr	r3, [r7, #0]
    168a:	7a5b      	ldrb	r3, [r3, #9]
    168c:	2b00      	cmp	r3, #0
    168e:	d006      	beq.n	169e <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1690:	683b      	ldr	r3, [r7, #0]
    1692:	7a9a      	ldrb	r2, [r3, #10]
    1694:	687b      	ldr	r3, [r7, #4]
    1696:	0011      	movs	r1, r2
    1698:	0018      	movs	r0, r3
    169a:	4b85      	ldr	r3, [pc, #532]	; (18b0 <_i2c_master_read_packet+0x260>)
    169c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    169e:	68fb      	ldr	r3, [r7, #12]
    16a0:	685b      	ldr	r3, [r3, #4]
    16a2:	4a84      	ldr	r2, [pc, #528]	; (18b4 <_i2c_master_read_packet+0x264>)
    16a4:	401a      	ands	r2, r3
    16a6:	68fb      	ldr	r3, [r7, #12]
    16a8:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    16aa:	683b      	ldr	r3, [r7, #0]
    16ac:	7a1b      	ldrb	r3, [r3, #8]
    16ae:	2b00      	cmp	r3, #0
    16b0:	d042      	beq.n	1738 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    16b2:	683b      	ldr	r3, [r7, #0]
    16b4:	881b      	ldrh	r3, [r3, #0]
    16b6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    16b8:	683b      	ldr	r3, [r7, #0]
    16ba:	7a5b      	ldrb	r3, [r3, #9]
    16bc:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    16be:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    16c0:	001a      	movs	r2, r3
    16c2:	2380      	movs	r3, #128	; 0x80
    16c4:	021b      	lsls	r3, r3, #8
    16c6:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    16c8:	68fb      	ldr	r3, [r7, #12]
    16ca:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    16cc:	2317      	movs	r3, #23
    16ce:	18fc      	adds	r4, r7, r3
    16d0:	687b      	ldr	r3, [r7, #4]
    16d2:	0018      	movs	r0, r3
    16d4:	4b78      	ldr	r3, [pc, #480]	; (18b8 <_i2c_master_read_packet+0x268>)
    16d6:	4798      	blx	r3
    16d8:	0003      	movs	r3, r0
    16da:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    16dc:	68fb      	ldr	r3, [r7, #12]
    16de:	685b      	ldr	r3, [r3, #4]
    16e0:	4a74      	ldr	r2, [pc, #464]	; (18b4 <_i2c_master_read_packet+0x264>)
    16e2:	401a      	ands	r2, r3
    16e4:	68fb      	ldr	r3, [r7, #12]
    16e6:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    16e8:	2317      	movs	r3, #23
    16ea:	18fb      	adds	r3, r7, r3
    16ec:	781b      	ldrb	r3, [r3, #0]
    16ee:	2b00      	cmp	r3, #0
    16f0:	d107      	bne.n	1702 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    16f2:	2317      	movs	r3, #23
    16f4:	18fc      	adds	r4, r7, r3
    16f6:	687b      	ldr	r3, [r7, #4]
    16f8:	0018      	movs	r0, r3
    16fa:	4b70      	ldr	r3, [pc, #448]	; (18bc <_i2c_master_read_packet+0x26c>)
    16fc:	4798      	blx	r3
    16fe:	0003      	movs	r3, r0
    1700:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    1702:	2317      	movs	r3, #23
    1704:	18fb      	adds	r3, r7, r3
    1706:	781b      	ldrb	r3, [r3, #0]
    1708:	2b00      	cmp	r3, #0
    170a:	d111      	bne.n	1730 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    170c:	683b      	ldr	r3, [r7, #0]
    170e:	881b      	ldrh	r3, [r3, #0]
    1710:	0a1b      	lsrs	r3, r3, #8
    1712:	b29b      	uxth	r3, r3
    1714:	2278      	movs	r2, #120	; 0x78
    1716:	4313      	orrs	r3, r2
    1718:	b29b      	uxth	r3, r3
    171a:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    171c:	683b      	ldr	r3, [r7, #0]
    171e:	7a5b      	ldrb	r3, [r3, #9]
    1720:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1722:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1724:	2201      	movs	r2, #1
    1726:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1728:	001a      	movs	r2, r3
    172a:	68fb      	ldr	r3, [r7, #12]
    172c:	625a      	str	r2, [r3, #36]	; 0x24
    172e:	e00f      	b.n	1750 <_i2c_master_read_packet+0x100>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    1730:	2317      	movs	r3, #23
    1732:	18fb      	adds	r3, r7, r3
    1734:	781b      	ldrb	r3, [r3, #0]
    1736:	e0b6      	b.n	18a6 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1738:	683b      	ldr	r3, [r7, #0]
    173a:	881b      	ldrh	r3, [r3, #0]
    173c:	005b      	lsls	r3, r3, #1
    173e:	2201      	movs	r2, #1
    1740:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1742:	683b      	ldr	r3, [r7, #0]
    1744:	7a5b      	ldrb	r3, [r3, #9]
    1746:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1748:	4313      	orrs	r3, r2
    174a:	001a      	movs	r2, r3
    174c:	68fb      	ldr	r3, [r7, #12]
    174e:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1750:	2317      	movs	r3, #23
    1752:	18fc      	adds	r4, r7, r3
    1754:	687b      	ldr	r3, [r7, #4]
    1756:	0018      	movs	r0, r3
    1758:	4b57      	ldr	r3, [pc, #348]	; (18b8 <_i2c_master_read_packet+0x268>)
    175a:	4798      	blx	r3
    175c:	0003      	movs	r3, r0
    175e:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1760:	230b      	movs	r3, #11
    1762:	18fb      	adds	r3, r7, r3
    1764:	781b      	ldrb	r3, [r3, #0]
    1766:	2b00      	cmp	r3, #0
    1768:	d00b      	beq.n	1782 <_i2c_master_read_packet+0x132>
    176a:	683b      	ldr	r3, [r7, #0]
    176c:	885b      	ldrh	r3, [r3, #2]
    176e:	2b01      	cmp	r3, #1
    1770:	d107      	bne.n	1782 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1772:	68fb      	ldr	r3, [r7, #12]
    1774:	685b      	ldr	r3, [r3, #4]
    1776:	2280      	movs	r2, #128	; 0x80
    1778:	02d2      	lsls	r2, r2, #11
    177a:	431a      	orrs	r2, r3
    177c:	68fb      	ldr	r3, [r7, #12]
    177e:	605a      	str	r2, [r3, #4]
    1780:	e005      	b.n	178e <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    1782:	68fb      	ldr	r3, [r7, #12]
    1784:	685b      	ldr	r3, [r3, #4]
    1786:	4a4b      	ldr	r2, [pc, #300]	; (18b4 <_i2c_master_read_packet+0x264>)
    1788:	401a      	ands	r2, r3
    178a:	68fb      	ldr	r3, [r7, #12]
    178c:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    178e:	2317      	movs	r3, #23
    1790:	18fb      	adds	r3, r7, r3
    1792:	781b      	ldrb	r3, [r3, #0]
    1794:	2b00      	cmp	r3, #0
    1796:	d107      	bne.n	17a8 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    1798:	2317      	movs	r3, #23
    179a:	18fc      	adds	r4, r7, r3
    179c:	687b      	ldr	r3, [r7, #4]
    179e:	0018      	movs	r0, r3
    17a0:	4b46      	ldr	r3, [pc, #280]	; (18bc <_i2c_master_read_packet+0x26c>)
    17a2:	4798      	blx	r3
    17a4:	0003      	movs	r3, r0
    17a6:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    17a8:	2317      	movs	r3, #23
    17aa:	18fb      	adds	r3, r7, r3
    17ac:	781b      	ldrb	r3, [r3, #0]
    17ae:	2b00      	cmp	r3, #0
    17b0:	d000      	beq.n	17b4 <_i2c_master_read_packet+0x164>
    17b2:	e075      	b.n	18a0 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    17b4:	e04b      	b.n	184e <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    17b6:	68fb      	ldr	r3, [r7, #12]
    17b8:	8b5b      	ldrh	r3, [r3, #26]
    17ba:	b29b      	uxth	r3, r3
    17bc:	001a      	movs	r2, r3
    17be:	2320      	movs	r3, #32
    17c0:	4013      	ands	r3, r2
    17c2:	d101      	bne.n	17c8 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    17c4:	2341      	movs	r3, #65	; 0x41
    17c6:	e06e      	b.n	18a6 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    17c8:	687b      	ldr	r3, [r7, #4]
    17ca:	7adb      	ldrb	r3, [r3, #11]
    17cc:	2b00      	cmp	r3, #0
    17ce:	d01e      	beq.n	180e <_i2c_master_read_packet+0x1be>
    17d0:	230b      	movs	r3, #11
    17d2:	18fb      	adds	r3, r7, r3
    17d4:	781b      	ldrb	r3, [r3, #0]
    17d6:	2201      	movs	r2, #1
    17d8:	4053      	eors	r3, r2
    17da:	b2db      	uxtb	r3, r3
    17dc:	2b00      	cmp	r3, #0
    17de:	d004      	beq.n	17ea <_i2c_master_read_packet+0x19a>
    17e0:	2314      	movs	r3, #20
    17e2:	18fb      	adds	r3, r7, r3
    17e4:	881b      	ldrh	r3, [r3, #0]
    17e6:	2b00      	cmp	r3, #0
    17e8:	d009      	beq.n	17fe <_i2c_master_read_packet+0x1ae>
    17ea:	230b      	movs	r3, #11
    17ec:	18fb      	adds	r3, r7, r3
    17ee:	781b      	ldrb	r3, [r3, #0]
    17f0:	2b00      	cmp	r3, #0
    17f2:	d00c      	beq.n	180e <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    17f4:	2314      	movs	r3, #20
    17f6:	18fb      	adds	r3, r7, r3
    17f8:	881b      	ldrh	r3, [r3, #0]
    17fa:	2b01      	cmp	r3, #1
    17fc:	d107      	bne.n	180e <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    17fe:	68fb      	ldr	r3, [r7, #12]
    1800:	685b      	ldr	r3, [r3, #4]
    1802:	2280      	movs	r2, #128	; 0x80
    1804:	02d2      	lsls	r2, r2, #11
    1806:	431a      	orrs	r2, r3
    1808:	68fb      	ldr	r3, [r7, #12]
    180a:	605a      	str	r2, [r3, #4]
    180c:	e01a      	b.n	1844 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    180e:	687b      	ldr	r3, [r7, #4]
    1810:	0018      	movs	r0, r3
    1812:	4b2b      	ldr	r3, [pc, #172]	; (18c0 <_i2c_master_read_packet+0x270>)
    1814:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    1816:	683b      	ldr	r3, [r7, #0]
    1818:	685a      	ldr	r2, [r3, #4]
    181a:	2312      	movs	r3, #18
    181c:	18fb      	adds	r3, r7, r3
    181e:	881b      	ldrh	r3, [r3, #0]
    1820:	2112      	movs	r1, #18
    1822:	1879      	adds	r1, r7, r1
    1824:	1c58      	adds	r0, r3, #1
    1826:	8008      	strh	r0, [r1, #0]
    1828:	18d3      	adds	r3, r2, r3
    182a:	68fa      	ldr	r2, [r7, #12]
    182c:	2128      	movs	r1, #40	; 0x28
    182e:	5c52      	ldrb	r2, [r2, r1]
    1830:	b2d2      	uxtb	r2, r2
    1832:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    1834:	2317      	movs	r3, #23
    1836:	18fc      	adds	r4, r7, r3
    1838:	687b      	ldr	r3, [r7, #4]
    183a:	0018      	movs	r0, r3
    183c:	4b1e      	ldr	r3, [pc, #120]	; (18b8 <_i2c_master_read_packet+0x268>)
    183e:	4798      	blx	r3
    1840:	0003      	movs	r3, r0
    1842:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1844:	2317      	movs	r3, #23
    1846:	18fb      	adds	r3, r7, r3
    1848:	781b      	ldrb	r3, [r3, #0]
    184a:	2b00      	cmp	r3, #0
    184c:	d109      	bne.n	1862 <_i2c_master_read_packet+0x212>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    184e:	2314      	movs	r3, #20
    1850:	18fb      	adds	r3, r7, r3
    1852:	881b      	ldrh	r3, [r3, #0]
    1854:	2214      	movs	r2, #20
    1856:	18ba      	adds	r2, r7, r2
    1858:	1e59      	subs	r1, r3, #1
    185a:	8011      	strh	r1, [r2, #0]
    185c:	2b00      	cmp	r3, #0
    185e:	d1aa      	bne.n	17b6 <_i2c_master_read_packet+0x166>
    1860:	e000      	b.n	1864 <_i2c_master_read_packet+0x214>
				tmp_status = _i2c_master_wait_for_bus(module);
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    1862:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1864:	687b      	ldr	r3, [r7, #4]
    1866:	7a9b      	ldrb	r3, [r3, #10]
    1868:	2b00      	cmp	r3, #0
    186a:	d00a      	beq.n	1882 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    186c:	687b      	ldr	r3, [r7, #4]
    186e:	0018      	movs	r0, r3
    1870:	4b13      	ldr	r3, [pc, #76]	; (18c0 <_i2c_master_read_packet+0x270>)
    1872:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1874:	68fb      	ldr	r3, [r7, #12]
    1876:	685b      	ldr	r3, [r3, #4]
    1878:	22c0      	movs	r2, #192	; 0xc0
    187a:	0292      	lsls	r2, r2, #10
    187c:	431a      	orrs	r2, r3
    187e:	68fb      	ldr	r3, [r7, #12]
    1880:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    1882:	687b      	ldr	r3, [r7, #4]
    1884:	0018      	movs	r0, r3
    1886:	4b0e      	ldr	r3, [pc, #56]	; (18c0 <_i2c_master_read_packet+0x270>)
    1888:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    188a:	683b      	ldr	r3, [r7, #0]
    188c:	685a      	ldr	r2, [r3, #4]
    188e:	2312      	movs	r3, #18
    1890:	18fb      	adds	r3, r7, r3
    1892:	881b      	ldrh	r3, [r3, #0]
    1894:	18d3      	adds	r3, r2, r3
    1896:	68fa      	ldr	r2, [r7, #12]
    1898:	2128      	movs	r1, #40	; 0x28
    189a:	5c52      	ldrb	r2, [r2, r1]
    189c:	b2d2      	uxtb	r2, r2
    189e:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    18a0:	2317      	movs	r3, #23
    18a2:	18fb      	adds	r3, r7, r3
    18a4:	781b      	ldrb	r3, [r3, #0]
}
    18a6:	0018      	movs	r0, r3
    18a8:	46bd      	mov	sp, r7
    18aa:	b007      	add	sp, #28
    18ac:	bd90      	pop	{r4, r7, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	000015fd 	.word	0x000015fd
    18b4:	fffbffff 	.word	0xfffbffff
    18b8:	0000159d 	.word	0x0000159d
    18bc:	0000153d 	.word	0x0000153d
    18c0:	00001039 	.word	0x00001039

000018c4 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    18c4:	b580      	push	{r7, lr}
    18c6:	b082      	sub	sp, #8
    18c8:	af00      	add	r7, sp, #0
    18ca:	6078      	str	r0, [r7, #4]
    18cc:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    18ce:	687b      	ldr	r3, [r7, #4]
    18d0:	2201      	movs	r2, #1
    18d2:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    18d4:	687b      	ldr	r3, [r7, #4]
    18d6:	2201      	movs	r2, #1
    18d8:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    18da:	683a      	ldr	r2, [r7, #0]
    18dc:	687b      	ldr	r3, [r7, #4]
    18de:	0011      	movs	r1, r2
    18e0:	0018      	movs	r0, r3
    18e2:	4b03      	ldr	r3, [pc, #12]	; (18f0 <i2c_master_read_packet_wait+0x2c>)
    18e4:	4798      	blx	r3
    18e6:	0003      	movs	r3, r0
}
    18e8:	0018      	movs	r0, r3
    18ea:	46bd      	mov	sp, r7
    18ec:	b002      	add	sp, #8
    18ee:	bd80      	pop	{r7, pc}
    18f0:	00001651 	.word	0x00001651

000018f4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    18f4:	b590      	push	{r4, r7, lr}
    18f6:	b087      	sub	sp, #28
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    18fe:	687b      	ldr	r3, [r7, #4]
    1900:	681b      	ldr	r3, [r3, #0]
    1902:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1904:	2314      	movs	r3, #20
    1906:	18fb      	adds	r3, r7, r3
    1908:	683a      	ldr	r2, [r7, #0]
    190a:	8852      	ldrh	r2, [r2, #2]
    190c:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	0018      	movs	r0, r3
    1912:	4b51      	ldr	r3, [pc, #324]	; (1a58 <_i2c_master_write_packet+0x164>)
    1914:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1916:	683b      	ldr	r3, [r7, #0]
    1918:	7a5b      	ldrb	r3, [r3, #9]
    191a:	2b00      	cmp	r3, #0
    191c:	d006      	beq.n	192c <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    191e:	683b      	ldr	r3, [r7, #0]
    1920:	7a9a      	ldrb	r2, [r3, #10]
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	0011      	movs	r1, r2
    1926:	0018      	movs	r0, r3
    1928:	4b4c      	ldr	r3, [pc, #304]	; (1a5c <_i2c_master_write_packet+0x168>)
    192a:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    192c:	68fb      	ldr	r3, [r7, #12]
    192e:	685b      	ldr	r3, [r3, #4]
    1930:	4a4b      	ldr	r2, [pc, #300]	; (1a60 <_i2c_master_write_packet+0x16c>)
    1932:	401a      	ands	r2, r3
    1934:	68fb      	ldr	r3, [r7, #12]
    1936:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1938:	683b      	ldr	r3, [r7, #0]
    193a:	7a1b      	ldrb	r3, [r3, #8]
    193c:	2b00      	cmp	r3, #0
    193e:	d00d      	beq.n	195c <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1940:	683b      	ldr	r3, [r7, #0]
    1942:	881b      	ldrh	r3, [r3, #0]
    1944:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1946:	683b      	ldr	r3, [r7, #0]
    1948:	7a5b      	ldrb	r3, [r3, #9]
    194a:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    194c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    194e:	001a      	movs	r2, r3
    1950:	2380      	movs	r3, #128	; 0x80
    1952:	021b      	lsls	r3, r3, #8
    1954:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1956:	68fb      	ldr	r3, [r7, #12]
    1958:	625a      	str	r2, [r3, #36]	; 0x24
    195a:	e009      	b.n	1970 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    195c:	683b      	ldr	r3, [r7, #0]
    195e:	881b      	ldrh	r3, [r3, #0]
    1960:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1962:	683b      	ldr	r3, [r7, #0]
    1964:	7a5b      	ldrb	r3, [r3, #9]
    1966:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1968:	4313      	orrs	r3, r2
    196a:	001a      	movs	r2, r3
    196c:	68fb      	ldr	r3, [r7, #12]
    196e:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1970:	2317      	movs	r3, #23
    1972:	18fc      	adds	r4, r7, r3
    1974:	687b      	ldr	r3, [r7, #4]
    1976:	0018      	movs	r0, r3
    1978:	4b3a      	ldr	r3, [pc, #232]	; (1a64 <_i2c_master_write_packet+0x170>)
    197a:	4798      	blx	r3
    197c:	0003      	movs	r3, r0
    197e:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1980:	2317      	movs	r3, #23
    1982:	18fb      	adds	r3, r7, r3
    1984:	781b      	ldrb	r3, [r3, #0]
    1986:	2b00      	cmp	r3, #0
    1988:	d107      	bne.n	199a <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    198a:	2317      	movs	r3, #23
    198c:	18fc      	adds	r4, r7, r3
    198e:	687b      	ldr	r3, [r7, #4]
    1990:	0018      	movs	r0, r3
    1992:	4b35      	ldr	r3, [pc, #212]	; (1a68 <_i2c_master_write_packet+0x174>)
    1994:	4798      	blx	r3
    1996:	0003      	movs	r3, r0
    1998:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    199a:	2317      	movs	r3, #23
    199c:	18fb      	adds	r3, r7, r3
    199e:	781b      	ldrb	r3, [r3, #0]
    19a0:	2b00      	cmp	r3, #0
    19a2:	d152      	bne.n	1a4a <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    19a4:	2312      	movs	r3, #18
    19a6:	18fb      	adds	r3, r7, r3
    19a8:	2200      	movs	r2, #0
    19aa:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    19ac:	e033      	b.n	1a16 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    19ae:	68fb      	ldr	r3, [r7, #12]
    19b0:	8b5b      	ldrh	r3, [r3, #26]
    19b2:	b29b      	uxth	r3, r3
    19b4:	001a      	movs	r2, r3
    19b6:	2320      	movs	r3, #32
    19b8:	4013      	ands	r3, r2
    19ba:	d101      	bne.n	19c0 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    19bc:	2341      	movs	r3, #65	; 0x41
    19be:	e047      	b.n	1a50 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    19c0:	687b      	ldr	r3, [r7, #4]
    19c2:	0018      	movs	r0, r3
    19c4:	4b24      	ldr	r3, [pc, #144]	; (1a58 <_i2c_master_write_packet+0x164>)
    19c6:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    19c8:	683b      	ldr	r3, [r7, #0]
    19ca:	685a      	ldr	r2, [r3, #4]
    19cc:	2312      	movs	r3, #18
    19ce:	18fb      	adds	r3, r7, r3
    19d0:	881b      	ldrh	r3, [r3, #0]
    19d2:	2112      	movs	r1, #18
    19d4:	1879      	adds	r1, r7, r1
    19d6:	1c58      	adds	r0, r3, #1
    19d8:	8008      	strh	r0, [r1, #0]
    19da:	18d3      	adds	r3, r2, r3
    19dc:	7819      	ldrb	r1, [r3, #0]
    19de:	68fb      	ldr	r3, [r7, #12]
    19e0:	2228      	movs	r2, #40	; 0x28
    19e2:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    19e4:	2317      	movs	r3, #23
    19e6:	18fc      	adds	r4, r7, r3
    19e8:	687b      	ldr	r3, [r7, #4]
    19ea:	0018      	movs	r0, r3
    19ec:	4b1d      	ldr	r3, [pc, #116]	; (1a64 <_i2c_master_write_packet+0x170>)
    19ee:	4798      	blx	r3
    19f0:	0003      	movs	r3, r0
    19f2:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    19f4:	2317      	movs	r3, #23
    19f6:	18fb      	adds	r3, r7, r3
    19f8:	781b      	ldrb	r3, [r3, #0]
    19fa:	2b00      	cmp	r3, #0
    19fc:	d115      	bne.n	1a2a <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    19fe:	68fb      	ldr	r3, [r7, #12]
    1a00:	8b5b      	ldrh	r3, [r3, #26]
    1a02:	b29b      	uxth	r3, r3
    1a04:	001a      	movs	r2, r3
    1a06:	2304      	movs	r3, #4
    1a08:	4013      	ands	r3, r2
    1a0a:	d004      	beq.n	1a16 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1a0c:	2317      	movs	r3, #23
    1a0e:	18fb      	adds	r3, r7, r3
    1a10:	221e      	movs	r2, #30
    1a12:	701a      	strb	r2, [r3, #0]
				break;
    1a14:	e00a      	b.n	1a2c <_i2c_master_write_packet+0x138>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    1a16:	2314      	movs	r3, #20
    1a18:	18fb      	adds	r3, r7, r3
    1a1a:	881b      	ldrh	r3, [r3, #0]
    1a1c:	2214      	movs	r2, #20
    1a1e:	18ba      	adds	r2, r7, r2
    1a20:	1e59      	subs	r1, r3, #1
    1a22:	8011      	strh	r1, [r2, #0]
    1a24:	2b00      	cmp	r3, #0
    1a26:	d1c2      	bne.n	19ae <_i2c_master_write_packet+0xba>
    1a28:	e000      	b.n	1a2c <_i2c_master_write_packet+0x138>
			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    1a2a:	46c0      	nop			; (mov r8, r8)
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	7a9b      	ldrb	r3, [r3, #10]
    1a30:	2b00      	cmp	r3, #0
    1a32:	d00a      	beq.n	1a4a <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1a34:	687b      	ldr	r3, [r7, #4]
    1a36:	0018      	movs	r0, r3
    1a38:	4b07      	ldr	r3, [pc, #28]	; (1a58 <_i2c_master_write_packet+0x164>)
    1a3a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a3c:	68fb      	ldr	r3, [r7, #12]
    1a3e:	685b      	ldr	r3, [r3, #4]
    1a40:	22c0      	movs	r2, #192	; 0xc0
    1a42:	0292      	lsls	r2, r2, #10
    1a44:	431a      	orrs	r2, r3
    1a46:	68fb      	ldr	r3, [r7, #12]
    1a48:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    1a4a:	2317      	movs	r3, #23
    1a4c:	18fb      	adds	r3, r7, r3
    1a4e:	781b      	ldrb	r3, [r3, #0]
}
    1a50:	0018      	movs	r0, r3
    1a52:	46bd      	mov	sp, r7
    1a54:	b007      	add	sp, #28
    1a56:	bd90      	pop	{r4, r7, pc}
    1a58:	00001039 	.word	0x00001039
    1a5c:	000015fd 	.word	0x000015fd
    1a60:	fffbffff 	.word	0xfffbffff
    1a64:	0000159d 	.word	0x0000159d
    1a68:	0000153d 	.word	0x0000153d

00001a6c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1a6c:	b580      	push	{r7, lr}
    1a6e:	b082      	sub	sp, #8
    1a70:	af00      	add	r7, sp, #0
    1a72:	6078      	str	r0, [r7, #4]
    1a74:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    1a76:	687b      	ldr	r3, [r7, #4]
    1a78:	2201      	movs	r2, #1
    1a7a:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	2201      	movs	r2, #1
    1a80:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1a82:	683a      	ldr	r2, [r7, #0]
    1a84:	687b      	ldr	r3, [r7, #4]
    1a86:	0011      	movs	r1, r2
    1a88:	0018      	movs	r0, r3
    1a8a:	4b03      	ldr	r3, [pc, #12]	; (1a98 <i2c_master_write_packet_wait+0x2c>)
    1a8c:	4798      	blx	r3
    1a8e:	0003      	movs	r3, r0
}
    1a90:	0018      	movs	r0, r3
    1a92:	46bd      	mov	sp, r7
    1a94:	b002      	add	sp, #8
    1a96:	bd80      	pop	{r7, pc}
    1a98:	000018f5 	.word	0x000018f5

00001a9c <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    1a9c:	b580      	push	{r7, lr}
    1a9e:	b082      	sub	sp, #8
    1aa0:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    1aa2:	4ba4      	ldr	r3, [pc, #656]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1aa4:	681b      	ldr	r3, [r3, #0]
    1aa6:	681b      	ldr	r3, [r3, #0]
    1aa8:	8c1b      	ldrh	r3, [r3, #32]
    1aaa:	b29b      	uxth	r3, r3
    1aac:	2b00      	cmp	r3, #0
    1aae:	d00a      	beq.n	1ac6 <_usb_host_interrupt_handler+0x2a>
    1ab0:	4ba0      	ldr	r3, [pc, #640]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1ab2:	681b      	ldr	r3, [r3, #0]
    1ab4:	681b      	ldr	r3, [r3, #0]
    1ab6:	8c1b      	ldrh	r3, [r3, #32]
    1ab8:	b29b      	uxth	r3, r3
    1aba:	001a      	movs	r2, r3
    1abc:	4b9e      	ldr	r3, [pc, #632]	; (1d38 <_usb_host_interrupt_handler+0x29c>)
    1abe:	0010      	movs	r0, r2
    1ac0:	4798      	blx	r3
    1ac2:	0003      	movs	r3, r0
    1ac4:	e000      	b.n	1ac8 <_usb_host_interrupt_handler+0x2c>
    1ac6:	2320      	movs	r3, #32
    1ac8:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    1aca:	687b      	ldr	r3, [r7, #4]
    1acc:	2b1f      	cmp	r3, #31
    1ace:	d900      	bls.n	1ad2 <_usb_host_interrupt_handler+0x36>
    1ad0:	e204      	b.n	1edc <_usb_host_interrupt_handler+0x440>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    1ad2:	4b98      	ldr	r3, [pc, #608]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1ad4:	681b      	ldr	r3, [r3, #0]
    1ad6:	681a      	ldr	r2, [r3, #0]
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	3308      	adds	r3, #8
    1adc:	015b      	lsls	r3, r3, #5
    1ade:	18d3      	adds	r3, r2, r3
    1ae0:	3307      	adds	r3, #7
    1ae2:	781b      	ldrb	r3, [r3, #0]
    1ae4:	b2db      	uxtb	r3, r3
    1ae6:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    1ae8:	683b      	ldr	r3, [r7, #0]
    1aea:	2203      	movs	r2, #3
    1aec:	4013      	ands	r3, r2
    1aee:	d100      	bne.n	1af2 <_usb_host_interrupt_handler+0x56>
    1af0:	e088      	b.n	1c04 <_usb_host_interrupt_handler+0x168>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1af2:	2201      	movs	r2, #1
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	409a      	lsls	r2, r3
    1af8:	0013      	movs	r3, r2
    1afa:	43db      	mvns	r3, r3
    1afc:	001a      	movs	r2, r3
    1afe:	4b8f      	ldr	r3, [pc, #572]	; (1d3c <_usb_host_interrupt_handler+0x2a0>)
    1b00:	681b      	ldr	r3, [r3, #0]
    1b02:	401a      	ands	r2, r3
    1b04:	4b8d      	ldr	r3, [pc, #564]	; (1d3c <_usb_host_interrupt_handler+0x2a0>)
    1b06:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1b08:	4b8a      	ldr	r3, [pc, #552]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1b0a:	681b      	ldr	r3, [r3, #0]
    1b0c:	681a      	ldr	r2, [r3, #0]
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	3308      	adds	r3, #8
    1b12:	015b      	lsls	r3, r3, #5
    1b14:	18d3      	adds	r3, r2, r3
    1b16:	3307      	adds	r3, #7
    1b18:	2203      	movs	r2, #3
    1b1a:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1b1c:	4b85      	ldr	r3, [pc, #532]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1b1e:	681a      	ldr	r2, [r3, #0]
    1b20:	21ae      	movs	r1, #174	; 0xae
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	18d3      	adds	r3, r2, r3
    1b26:	185b      	adds	r3, r3, r1
    1b28:	781b      	ldrb	r3, [r3, #0]
    1b2a:	001a      	movs	r2, r3
    1b2c:	2301      	movs	r3, #1
    1b2e:	4013      	ands	r3, r2
    1b30:	d068      	beq.n	1c04 <_usb_host_interrupt_handler+0x168>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    1b32:	687b      	ldr	r3, [r7, #4]
    1b34:	b2da      	uxtb	r2, r3
    1b36:	4b82      	ldr	r3, [pc, #520]	; (1d40 <_usb_host_interrupt_handler+0x2a4>)
    1b38:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    1b3a:	4b7e      	ldr	r3, [pc, #504]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1b3c:	681b      	ldr	r3, [r3, #0]
    1b3e:	681b      	ldr	r3, [r3, #0]
    1b40:	687a      	ldr	r2, [r7, #4]
    1b42:	3208      	adds	r2, #8
    1b44:	0152      	lsls	r2, r2, #5
    1b46:	5cd3      	ldrb	r3, [r2, r3]
    1b48:	079b      	lsls	r3, r3, #30
    1b4a:	0f9b      	lsrs	r3, r3, #30
    1b4c:	b2db      	uxtb	r3, r3
    1b4e:	2b01      	cmp	r3, #1
    1b50:	d11e      	bne.n	1b90 <_usb_host_interrupt_handler+0xf4>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    1b52:	4a7c      	ldr	r2, [pc, #496]	; (1d44 <_usb_host_interrupt_handler+0x2a8>)
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	015b      	lsls	r3, r3, #5
    1b58:	18d3      	adds	r3, r2, r3
    1b5a:	685b      	ldr	r3, [r3, #4]
    1b5c:	049b      	lsls	r3, r3, #18
    1b5e:	0c9b      	lsrs	r3, r3, #18
    1b60:	b29b      	uxth	r3, r3
    1b62:	001a      	movs	r2, r3
    1b64:	4b76      	ldr	r3, [pc, #472]	; (1d40 <_usb_host_interrupt_handler+0x2a4>)
    1b66:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    1b68:	4a76      	ldr	r2, [pc, #472]	; (1d44 <_usb_host_interrupt_handler+0x2a8>)
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	015b      	lsls	r3, r3, #5
    1b6e:	18d3      	adds	r3, r2, r3
    1b70:	685b      	ldr	r3, [r3, #4]
    1b72:	011b      	lsls	r3, r3, #4
    1b74:	0c9b      	lsrs	r3, r3, #18
    1b76:	b29b      	uxth	r3, r3
    1b78:	001a      	movs	r2, r3
    1b7a:	4b71      	ldr	r3, [pc, #452]	; (1d40 <_usb_host_interrupt_handler+0x2a4>)
    1b7c:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    1b7e:	4a71      	ldr	r2, [pc, #452]	; (1d44 <_usb_host_interrupt_handler+0x2a8>)
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	015b      	lsls	r3, r3, #5
    1b84:	18d3      	adds	r3, r2, r3
    1b86:	685a      	ldr	r2, [r3, #4]
    1b88:	0b92      	lsrs	r2, r2, #14
    1b8a:	0392      	lsls	r2, r2, #14
    1b8c:	605a      	str	r2, [r3, #4]
    1b8e:	e02c      	b.n	1bea <_usb_host_interrupt_handler+0x14e>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    1b90:	4a6c      	ldr	r2, [pc, #432]	; (1d44 <_usb_host_interrupt_handler+0x2a8>)
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	015b      	lsls	r3, r3, #5
    1b96:	18d3      	adds	r3, r2, r3
    1b98:	685b      	ldr	r3, [r3, #4]
    1b9a:	011b      	lsls	r3, r3, #4
    1b9c:	0c9b      	lsrs	r3, r3, #18
    1b9e:	b29b      	uxth	r3, r3
    1ba0:	001a      	movs	r2, r3
    1ba2:	4b67      	ldr	r3, [pc, #412]	; (1d40 <_usb_host_interrupt_handler+0x2a4>)
    1ba4:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    1ba6:	4a67      	ldr	r2, [pc, #412]	; (1d44 <_usb_host_interrupt_handler+0x2a8>)
    1ba8:	687b      	ldr	r3, [r7, #4]
    1baa:	015b      	lsls	r3, r3, #5
    1bac:	18d3      	adds	r3, r2, r3
    1bae:	685b      	ldr	r3, [r3, #4]
    1bb0:	049b      	lsls	r3, r3, #18
    1bb2:	0c9b      	lsrs	r3, r3, #18
    1bb4:	b29b      	uxth	r3, r3
    1bb6:	001a      	movs	r2, r3
    1bb8:	4b61      	ldr	r3, [pc, #388]	; (1d40 <_usb_host_interrupt_handler+0x2a4>)
    1bba:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    1bbc:	4a61      	ldr	r2, [pc, #388]	; (1d44 <_usb_host_interrupt_handler+0x2a8>)
    1bbe:	687b      	ldr	r3, [r7, #4]
    1bc0:	015b      	lsls	r3, r3, #5
    1bc2:	18d3      	adds	r3, r2, r3
    1bc4:	685a      	ldr	r2, [r3, #4]
    1bc6:	4960      	ldr	r1, [pc, #384]	; (1d48 <_usb_host_interrupt_handler+0x2ac>)
    1bc8:	400a      	ands	r2, r1
    1bca:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    1bcc:	4b5c      	ldr	r3, [pc, #368]	; (1d40 <_usb_host_interrupt_handler+0x2a4>)
    1bce:	885b      	ldrh	r3, [r3, #2]
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	d10a      	bne.n	1bea <_usb_host_interrupt_handler+0x14e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    1bd4:	4a5b      	ldr	r2, [pc, #364]	; (1d44 <_usb_host_interrupt_handler+0x2a8>)
    1bd6:	687b      	ldr	r3, [r7, #4]
    1bd8:	015b      	lsls	r3, r3, #5
    1bda:	18d3      	adds	r3, r2, r3
    1bdc:	685b      	ldr	r3, [r3, #4]
    1bde:	049b      	lsls	r3, r3, #18
    1be0:	0c9b      	lsrs	r3, r3, #18
    1be2:	b29b      	uxth	r3, r3
    1be4:	001a      	movs	r2, r3
    1be6:	4b56      	ldr	r3, [pc, #344]	; (1d40 <_usb_host_interrupt_handler+0x2a4>)
    1be8:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    1bea:	4b52      	ldr	r3, [pc, #328]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1bec:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    1bee:	687b      	ldr	r3, [r7, #4]
    1bf0:	3302      	adds	r3, #2
    1bf2:	011b      	lsls	r3, r3, #4
    1bf4:	18d3      	adds	r3, r2, r3
    1bf6:	3304      	adds	r3, #4
    1bf8:	681a      	ldr	r2, [r3, #0]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    1bfa:	4b4e      	ldr	r3, [pc, #312]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1bfc:	681b      	ldr	r3, [r3, #0]
    1bfe:	4950      	ldr	r1, [pc, #320]	; (1d40 <_usb_host_interrupt_handler+0x2a4>)
    1c00:	0018      	movs	r0, r3
    1c02:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    1c04:	683b      	ldr	r3, [r7, #0]
    1c06:	2204      	movs	r2, #4
    1c08:	4013      	ands	r3, r2
    1c0a:	d100      	bne.n	1c0e <_usb_host_interrupt_handler+0x172>
    1c0c:	e0af      	b.n	1d6e <_usb_host_interrupt_handler+0x2d2>
			/* For ISO IN, check CRC error */
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    1c0e:	4b49      	ldr	r3, [pc, #292]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1c10:	681b      	ldr	r3, [r3, #0]
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	687a      	ldr	r2, [r7, #4]
    1c16:	3208      	adds	r2, #8
    1c18:	0152      	lsls	r2, r2, #5
    1c1a:	5cd3      	ldrb	r3, [r2, r3]
    1c1c:	069b      	lsls	r3, r3, #26
    1c1e:	0f5b      	lsrs	r3, r3, #29
    1c20:	b2db      	uxtb	r3, r3
    1c22:	2b02      	cmp	r3, #2
    1c24:	d151      	bne.n	1cca <_usb_host_interrupt_handler+0x22e>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    1c26:	4b43      	ldr	r3, [pc, #268]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1c28:	681b      	ldr	r3, [r3, #0]
    1c2a:	681b      	ldr	r3, [r3, #0]
    1c2c:	687a      	ldr	r2, [r7, #4]
    1c2e:	3208      	adds	r2, #8
    1c30:	0152      	lsls	r2, r2, #5
    1c32:	5cd3      	ldrb	r3, [r2, r3]
    1c34:	079b      	lsls	r3, r3, #30
    1c36:	0f9b      	lsrs	r3, r3, #30
    1c38:	b2db      	uxtb	r3, r3
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
			/* For ISO IN, check CRC error */
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    1c3a:	2b01      	cmp	r3, #1
    1c3c:	d145      	bne.n	1cca <_usb_host_interrupt_handler+0x22e>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    1c3e:	4a41      	ldr	r2, [pc, #260]	; (1d44 <_usb_host_interrupt_handler+0x2a8>)
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	015b      	lsls	r3, r3, #5
    1c44:	18d3      	adds	r3, r2, r3
    1c46:	3308      	adds	r3, #8
    1c48:	789b      	ldrb	r3, [r3, #2]
    1c4a:	07db      	lsls	r3, r3, #31
    1c4c:	0fdb      	lsrs	r3, r3, #31
    1c4e:	b2db      	uxtb	r3, r3

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
			/* For ISO IN, check CRC error */
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    1c50:	2b00      	cmp	r3, #0
    1c52:	d03a      	beq.n	1cca <_usb_host_interrupt_handler+0x22e>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
				/* Clear busy status */
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    1c54:	2201      	movs	r2, #1
    1c56:	687b      	ldr	r3, [r7, #4]
    1c58:	409a      	lsls	r2, r3
    1c5a:	0013      	movs	r3, r2
    1c5c:	43db      	mvns	r3, r3
    1c5e:	001a      	movs	r2, r3
    1c60:	4b36      	ldr	r3, [pc, #216]	; (1d3c <_usb_host_interrupt_handler+0x2a0>)
    1c62:	681b      	ldr	r3, [r3, #0]
    1c64:	401a      	ands	r2, r3
    1c66:	4b35      	ldr	r3, [pc, #212]	; (1d3c <_usb_host_interrupt_handler+0x2a0>)
    1c68:	601a      	str	r2, [r3, #0]
				/* clear the flag */
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    1c6a:	4a36      	ldr	r2, [pc, #216]	; (1d44 <_usb_host_interrupt_handler+0x2a8>)
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	015b      	lsls	r3, r3, #5
    1c70:	18d3      	adds	r3, r2, r3
    1c72:	330a      	adds	r3, #10
    1c74:	2200      	movs	r2, #0
    1c76:	701a      	strb	r2, [r3, #0]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1c78:	4b2e      	ldr	r3, [pc, #184]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1c7a:	681b      	ldr	r3, [r3, #0]
    1c7c:	681a      	ldr	r2, [r3, #0]
    1c7e:	687b      	ldr	r3, [r7, #4]
    1c80:	3308      	adds	r3, #8
    1c82:	015b      	lsls	r3, r3, #5
    1c84:	18d3      	adds	r3, r2, r3
    1c86:	3307      	adds	r3, #7
    1c88:	2204      	movs	r2, #4
    1c8a:	701a      	strb	r2, [r3, #0]
						USB_HOST_PINTFLAG_TRFAIL;
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1c8c:	4b29      	ldr	r3, [pc, #164]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1c8e:	681a      	ldr	r2, [r3, #0]
    1c90:	21ae      	movs	r1, #174	; 0xae
    1c92:	687b      	ldr	r3, [r7, #4]
    1c94:	18d3      	adds	r3, r2, r3
    1c96:	185b      	adds	r3, r3, r1
    1c98:	781b      	ldrb	r3, [r3, #0]
    1c9a:	001a      	movs	r2, r3
    1c9c:	2302      	movs	r3, #2
    1c9e:	4013      	ands	r3, r2
    1ca0:	d065      	beq.n	1d6e <_usb_host_interrupt_handler+0x2d2>
						(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
					pipe_callback_para.pipe_num = pipe_int;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	b2da      	uxtb	r2, r3
    1ca6:	4b26      	ldr	r3, [pc, #152]	; (1d40 <_usb_host_interrupt_handler+0x2a4>)
    1ca8:	701a      	strb	r2, [r3, #0]
					#define USB_STATUS_PIPE_CRC16ER   (1 << 4)
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    1caa:	4b25      	ldr	r3, [pc, #148]	; (1d40 <_usb_host_interrupt_handler+0x2a4>)
    1cac:	2210      	movs	r2, #16
    1cae:	705a      	strb	r2, [r3, #1]
					(_usb_instances->host_pipe_callback[pipe_int]
    1cb0:	4b20      	ldr	r3, [pc, #128]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1cb2:	681a      	ldr	r2, [r3, #0]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	011b      	lsls	r3, r3, #4
    1cb8:	18d3      	adds	r3, r2, r3
    1cba:	3328      	adds	r3, #40	; 0x28
    1cbc:	681a      	ldr	r2, [r3, #0]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
						(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
					pipe_callback_para.pipe_num = pipe_int;
					#define USB_STATUS_PIPE_CRC16ER   (1 << 4)
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
					(_usb_instances->host_pipe_callback[pipe_int]
    1cbe:	4b1d      	ldr	r3, [pc, #116]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1cc0:	681b      	ldr	r3, [r3, #0]
    1cc2:	491f      	ldr	r1, [pc, #124]	; (1d40 <_usb_host_interrupt_handler+0x2a4>)
    1cc4:	0018      	movs	r0, r3
    1cc6:	4790      	blx	r2
				host_pipe_job_busy_status &= ~(1 << pipe_int);
				/* clear the flag */
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
						USB_HOST_PINTFLAG_TRFAIL;
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1cc8:	e051      	b.n	1d6e <_usb_host_interrupt_handler+0x2d2>
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
				}
			}
#if UHD_BULK_INTERVAL_MIN
			/* For Bulk IN, check flow error */
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    1cca:	4b1a      	ldr	r3, [pc, #104]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1ccc:	681b      	ldr	r3, [r3, #0]
    1cce:	681b      	ldr	r3, [r3, #0]
    1cd0:	687a      	ldr	r2, [r7, #4]
    1cd2:	3208      	adds	r2, #8
    1cd4:	0152      	lsls	r2, r2, #5
    1cd6:	5cd3      	ldrb	r3, [r2, r3]
    1cd8:	069b      	lsls	r3, r3, #26
    1cda:	0f5b      	lsrs	r3, r3, #29
    1cdc:	b2db      	uxtb	r3, r3
    1cde:	2b03      	cmp	r3, #3
    1ce0:	d134      	bne.n	1d4c <_usb_host_interrupt_handler+0x2b0>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    1ce2:	4b14      	ldr	r3, [pc, #80]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1ce4:	681b      	ldr	r3, [r3, #0]
    1ce6:	681b      	ldr	r3, [r3, #0]
    1ce8:	687a      	ldr	r2, [r7, #4]
    1cea:	3208      	adds	r2, #8
    1cec:	0152      	lsls	r2, r2, #5
    1cee:	5cd3      	ldrb	r3, [r2, r3]
    1cf0:	079b      	lsls	r3, r3, #30
    1cf2:	0f9b      	lsrs	r3, r3, #30
    1cf4:	b2db      	uxtb	r3, r3
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
				}
			}
#if UHD_BULK_INTERVAL_MIN
			/* For Bulk IN, check flow error */
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    1cf6:	2b01      	cmp	r3, #1
    1cf8:	d128      	bne.n	1d4c <_usb_host_interrupt_handler+0x2b0>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
				/* clear the flag */
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    1cfa:	4a12      	ldr	r2, [pc, #72]	; (1d44 <_usb_host_interrupt_handler+0x2a8>)
    1cfc:	687b      	ldr	r3, [r7, #4]
    1cfe:	015b      	lsls	r3, r3, #5
    1d00:	18d3      	adds	r3, r2, r3
    1d02:	330a      	adds	r3, #10
    1d04:	2200      	movs	r2, #0
    1d06:	701a      	strb	r2, [r3, #0]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1d08:	4b0a      	ldr	r3, [pc, #40]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1d0a:	681b      	ldr	r3, [r3, #0]
    1d0c:	681a      	ldr	r2, [r3, #0]
    1d0e:	687b      	ldr	r3, [r7, #4]
    1d10:	3308      	adds	r3, #8
    1d12:	015b      	lsls	r3, r3, #5
    1d14:	18d3      	adds	r3, r2, r3
    1d16:	3307      	adds	r3, #7
    1d18:	2204      	movs	r2, #4
    1d1a:	701a      	strb	r2, [r3, #0]
						USB_HOST_PINTFLAG_TRFAIL;
				/* Freeze until next SOF */
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    1d1c:	4b05      	ldr	r3, [pc, #20]	; (1d34 <_usb_host_interrupt_handler+0x298>)
    1d1e:	681b      	ldr	r3, [r3, #0]
    1d20:	681a      	ldr	r2, [r3, #0]
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	3308      	adds	r3, #8
    1d26:	015b      	lsls	r3, r3, #5
    1d28:	18d3      	adds	r3, r2, r3
    1d2a:	3305      	adds	r3, #5
    1d2c:	2210      	movs	r2, #16
    1d2e:	701a      	strb	r2, [r3, #0]
    1d30:	e01d      	b.n	1d6e <_usb_host_interrupt_handler+0x2d2>
    1d32:	46c0      	nop			; (mov r8, r8)
    1d34:	200000a8 	.word	0x200000a8
    1d38:	0000c329 	.word	0x0000c329
    1d3c:	200000c0 	.word	0x200000c0
    1d40:	200000ac 	.word	0x200000ac
    1d44:	20000da0 	.word	0x20000da0
    1d48:	f0003fff 	.word	0xf0003fff
			}
#endif
			/* Clear flag anyway */
			else {
				/* clear the flag */
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    1d4c:	4a83      	ldr	r2, [pc, #524]	; (1f5c <_usb_host_interrupt_handler+0x4c0>)
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	015b      	lsls	r3, r3, #5
    1d52:	18d3      	adds	r3, r2, r3
    1d54:	330a      	adds	r3, #10
    1d56:	2200      	movs	r2, #0
    1d58:	701a      	strb	r2, [r3, #0]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1d5a:	4b81      	ldr	r3, [pc, #516]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1d5c:	681b      	ldr	r3, [r3, #0]
    1d5e:	681a      	ldr	r2, [r3, #0]
    1d60:	687b      	ldr	r3, [r7, #4]
    1d62:	3308      	adds	r3, #8
    1d64:	015b      	lsls	r3, r3, #5
    1d66:	18d3      	adds	r3, r2, r3
    1d68:	3307      	adds	r3, #7
    1d6a:	2204      	movs	r2, #4
    1d6c:	701a      	strb	r2, [r3, #0]
						USB_HOST_PINTFLAG_TRFAIL;
			}
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    1d6e:	683b      	ldr	r3, [r7, #0]
    1d70:	2208      	movs	r2, #8
    1d72:	4013      	ands	r3, r2
    1d74:	d03c      	beq.n	1df0 <_usb_host_interrupt_handler+0x354>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1d76:	2201      	movs	r2, #1
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	409a      	lsls	r2, r3
    1d7c:	0013      	movs	r3, r2
    1d7e:	43db      	mvns	r3, r3
    1d80:	001a      	movs	r2, r3
    1d82:	4b78      	ldr	r3, [pc, #480]	; (1f64 <_usb_host_interrupt_handler+0x4c8>)
    1d84:	681b      	ldr	r3, [r3, #0]
    1d86:	401a      	ands	r2, r3
    1d88:	4b76      	ldr	r3, [pc, #472]	; (1f64 <_usb_host_interrupt_handler+0x4c8>)
    1d8a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1d8c:	4b74      	ldr	r3, [pc, #464]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1d8e:	681b      	ldr	r3, [r3, #0]
    1d90:	681a      	ldr	r2, [r3, #0]
    1d92:	687b      	ldr	r3, [r7, #4]
    1d94:	3308      	adds	r3, #8
    1d96:	015b      	lsls	r3, r3, #5
    1d98:	18d3      	adds	r3, r2, r3
    1d9a:	3307      	adds	r3, #7
    1d9c:	2208      	movs	r2, #8
    1d9e:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1da0:	4b6f      	ldr	r3, [pc, #444]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1da2:	681a      	ldr	r2, [r3, #0]
    1da4:	21ae      	movs	r1, #174	; 0xae
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	18d3      	adds	r3, r2, r3
    1daa:	185b      	adds	r3, r3, r1
    1dac:	781b      	ldrb	r3, [r3, #0]
    1dae:	001a      	movs	r2, r3
    1db0:	2302      	movs	r3, #2
    1db2:	4013      	ands	r3, r2
    1db4:	d01c      	beq.n	1df0 <_usb_host_interrupt_handler+0x354>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    1db6:	687b      	ldr	r3, [r7, #4]
    1db8:	b2da      	uxtb	r2, r3
    1dba:	4b6b      	ldr	r3, [pc, #428]	; (1f68 <_usb_host_interrupt_handler+0x4cc>)
    1dbc:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    1dbe:	4a67      	ldr	r2, [pc, #412]	; (1f5c <_usb_host_interrupt_handler+0x4c0>)
    1dc0:	687b      	ldr	r3, [r7, #4]
    1dc2:	015b      	lsls	r3, r3, #5
    1dc4:	18d3      	adds	r3, r2, r3
    1dc6:	330e      	adds	r3, #14
    1dc8:	881b      	ldrh	r3, [r3, #0]
    1dca:	b29b      	uxth	r3, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    1dcc:	b2db      	uxtb	r3, r3
    1dce:	221f      	movs	r2, #31
    1dd0:	4013      	ands	r3, r2
    1dd2:	b2da      	uxtb	r2, r3
    1dd4:	4b64      	ldr	r3, [pc, #400]	; (1f68 <_usb_host_interrupt_handler+0x4cc>)
    1dd6:	705a      	strb	r2, [r3, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    1dd8:	4b61      	ldr	r3, [pc, #388]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1dda:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    1ddc:	687b      	ldr	r3, [r7, #4]
    1dde:	011b      	lsls	r3, r3, #4
    1de0:	18d3      	adds	r3, r2, r3
    1de2:	3328      	adds	r3, #40	; 0x28
    1de4:	681a      	ldr	r2, [r3, #0]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    1de6:	4b5e      	ldr	r3, [pc, #376]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1de8:	681b      	ldr	r3, [r3, #0]
    1dea:	495f      	ldr	r1, [pc, #380]	; (1f68 <_usb_host_interrupt_handler+0x4cc>)
    1dec:	0018      	movs	r0, r3
    1dee:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    1df0:	683b      	ldr	r3, [r7, #0]
    1df2:	2210      	movs	r2, #16
    1df4:	4013      	ands	r3, r2
    1df6:	d03a      	beq.n	1e6e <_usb_host_interrupt_handler+0x3d2>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1df8:	2201      	movs	r2, #1
    1dfa:	687b      	ldr	r3, [r7, #4]
    1dfc:	409a      	lsls	r2, r3
    1dfe:	0013      	movs	r3, r2
    1e00:	43db      	mvns	r3, r3
    1e02:	001a      	movs	r2, r3
    1e04:	4b57      	ldr	r3, [pc, #348]	; (1f64 <_usb_host_interrupt_handler+0x4c8>)
    1e06:	681b      	ldr	r3, [r3, #0]
    1e08:	401a      	ands	r2, r3
    1e0a:	4b56      	ldr	r3, [pc, #344]	; (1f64 <_usb_host_interrupt_handler+0x4c8>)
    1e0c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1e0e:	4b54      	ldr	r3, [pc, #336]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1e10:	681b      	ldr	r3, [r3, #0]
    1e12:	681a      	ldr	r2, [r3, #0]
    1e14:	687b      	ldr	r3, [r7, #4]
    1e16:	3308      	adds	r3, #8
    1e18:	015b      	lsls	r3, r3, #5
    1e1a:	18d3      	adds	r3, r2, r3
    1e1c:	3307      	adds	r3, #7
    1e1e:	2210      	movs	r2, #16
    1e20:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1e22:	4b4f      	ldr	r3, [pc, #316]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1e24:	681a      	ldr	r2, [r3, #0]
    1e26:	21ae      	movs	r1, #174	; 0xae
    1e28:	687b      	ldr	r3, [r7, #4]
    1e2a:	18d3      	adds	r3, r2, r3
    1e2c:	185b      	adds	r3, r3, r1
    1e2e:	781b      	ldrb	r3, [r3, #0]
    1e30:	001a      	movs	r2, r3
    1e32:	2304      	movs	r3, #4
    1e34:	4013      	ands	r3, r2
    1e36:	d01a      	beq.n	1e6e <_usb_host_interrupt_handler+0x3d2>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    1e38:	687b      	ldr	r3, [r7, #4]
    1e3a:	b2da      	uxtb	r2, r3
    1e3c:	4b4a      	ldr	r3, [pc, #296]	; (1f68 <_usb_host_interrupt_handler+0x4cc>)
    1e3e:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    1e40:	4a46      	ldr	r2, [pc, #280]	; (1f5c <_usb_host_interrupt_handler+0x4c0>)
    1e42:	687b      	ldr	r3, [r7, #4]
    1e44:	015b      	lsls	r3, r3, #5
    1e46:	18d3      	adds	r3, r2, r3
    1e48:	685b      	ldr	r3, [r3, #4]
    1e4a:	011b      	lsls	r3, r3, #4
    1e4c:	0c9b      	lsrs	r3, r3, #18
    1e4e:	b29b      	uxth	r3, r3
    1e50:	001a      	movs	r2, r3
    1e52:	4b45      	ldr	r3, [pc, #276]	; (1f68 <_usb_host_interrupt_handler+0x4cc>)
    1e54:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    1e56:	4b42      	ldr	r3, [pc, #264]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1e58:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	011b      	lsls	r3, r3, #4
    1e5e:	18d3      	adds	r3, r2, r3
    1e60:	332c      	adds	r3, #44	; 0x2c
    1e62:	681a      	ldr	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    1e64:	4b3e      	ldr	r3, [pc, #248]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1e66:	681b      	ldr	r3, [r3, #0]
    1e68:	2100      	movs	r1, #0
    1e6a:	0018      	movs	r0, r3
    1e6c:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    1e6e:	683b      	ldr	r3, [r7, #0]
    1e70:	2220      	movs	r2, #32
    1e72:	4013      	ands	r3, r2
    1e74:	d100      	bne.n	1e78 <_usb_host_interrupt_handler+0x3dc>
    1e76:	e146      	b.n	2106 <_usb_host_interrupt_handler+0x66a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1e78:	2201      	movs	r2, #1
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	409a      	lsls	r2, r3
    1e7e:	0013      	movs	r3, r2
    1e80:	43db      	mvns	r3, r3
    1e82:	001a      	movs	r2, r3
    1e84:	4b37      	ldr	r3, [pc, #220]	; (1f64 <_usb_host_interrupt_handler+0x4c8>)
    1e86:	681b      	ldr	r3, [r3, #0]
    1e88:	401a      	ands	r2, r3
    1e8a:	4b36      	ldr	r3, [pc, #216]	; (1f64 <_usb_host_interrupt_handler+0x4c8>)
    1e8c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1e8e:	4b34      	ldr	r3, [pc, #208]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1e90:	681b      	ldr	r3, [r3, #0]
    1e92:	681a      	ldr	r2, [r3, #0]
    1e94:	687b      	ldr	r3, [r7, #4]
    1e96:	3308      	adds	r3, #8
    1e98:	015b      	lsls	r3, r3, #5
    1e9a:	18d3      	adds	r3, r2, r3
    1e9c:	3307      	adds	r3, #7
    1e9e:	2220      	movs	r2, #32
    1ea0:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1ea2:	4b2f      	ldr	r3, [pc, #188]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1ea4:	681a      	ldr	r2, [r3, #0]
    1ea6:	21ae      	movs	r1, #174	; 0xae
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	18d3      	adds	r3, r2, r3
    1eac:	185b      	adds	r3, r3, r1
    1eae:	781b      	ldrb	r3, [r3, #0]
    1eb0:	001a      	movs	r2, r3
    1eb2:	2308      	movs	r3, #8
    1eb4:	4013      	ands	r3, r2
    1eb6:	d100      	bne.n	1eba <_usb_host_interrupt_handler+0x41e>
    1eb8:	e125      	b.n	2106 <_usb_host_interrupt_handler+0x66a>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    1eba:	687b      	ldr	r3, [r7, #4]
    1ebc:	b2da      	uxtb	r2, r3
    1ebe:	4b2a      	ldr	r3, [pc, #168]	; (1f68 <_usb_host_interrupt_handler+0x4cc>)
    1ec0:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    1ec2:	4b27      	ldr	r3, [pc, #156]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1ec4:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	011b      	lsls	r3, r3, #4
    1eca:	18d3      	adds	r3, r2, r3
    1ecc:	3330      	adds	r3, #48	; 0x30
    1ece:	681a      	ldr	r2, [r3, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    1ed0:	4b23      	ldr	r3, [pc, #140]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1ed2:	681b      	ldr	r3, [r3, #0]
    1ed4:	4924      	ldr	r1, [pc, #144]	; (1f68 <_usb_host_interrupt_handler+0x4cc>)
    1ed6:	0018      	movs	r0, r3
    1ed8:	4790      	blx	r2
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
			}
		}

	}
}
    1eda:	e114      	b.n	2106 <_usb_host_interrupt_handler+0x66a>

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    1edc:	4b20      	ldr	r3, [pc, #128]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1ede:	681b      	ldr	r3, [r3, #0]
    1ee0:	681b      	ldr	r3, [r3, #0]
    1ee2:	8b9b      	ldrh	r3, [r3, #28]
    1ee4:	b29b      	uxth	r3, r3
    1ee6:	603b      	str	r3, [r7, #0]

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    1ee8:	683b      	ldr	r3, [r7, #0]
    1eea:	2204      	movs	r2, #4
    1eec:	4013      	ands	r3, r2
    1eee:	d053      	beq.n	1f98 <_usb_host_interrupt_handler+0x4fc>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    1ef0:	4b1b      	ldr	r3, [pc, #108]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1ef2:	681b      	ldr	r3, [r3, #0]
    1ef4:	681b      	ldr	r3, [r3, #0]
    1ef6:	2204      	movs	r2, #4
    1ef8:	839a      	strh	r2, [r3, #28]
#if UHD_BULK_INTERVAL_MIN
			/* Start Bulk IN */
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    1efa:	2301      	movs	r3, #1
    1efc:	607b      	str	r3, [r7, #4]
    1efe:	e039      	b.n	1f74 <_usb_host_interrupt_handler+0x4d8>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    1f00:	2201      	movs	r2, #1
    1f02:	687b      	ldr	r3, [r7, #4]
    1f04:	409a      	lsls	r2, r3
    1f06:	0013      	movs	r3, r2
    1f08:	001a      	movs	r2, r3
    1f0a:	4b16      	ldr	r3, [pc, #88]	; (1f64 <_usb_host_interrupt_handler+0x4c8>)
    1f0c:	681b      	ldr	r3, [r3, #0]
    1f0e:	4013      	ands	r3, r2
    1f10:	d022      	beq.n	1f58 <_usb_host_interrupt_handler+0x4bc>
					continue;
				}
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    1f12:	4b13      	ldr	r3, [pc, #76]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1f14:	681b      	ldr	r3, [r3, #0]
    1f16:	681b      	ldr	r3, [r3, #0]
    1f18:	687a      	ldr	r2, [r7, #4]
    1f1a:	3208      	adds	r2, #8
    1f1c:	0152      	lsls	r2, r2, #5
    1f1e:	5cd3      	ldrb	r3, [r2, r3]
    1f20:	069b      	lsls	r3, r3, #26
    1f22:	0f5b      	lsrs	r3, r3, #29
    1f24:	b2db      	uxtb	r3, r3
    1f26:	2b03      	cmp	r3, #3
    1f28:	d120      	bne.n	1f6c <_usb_host_interrupt_handler+0x4d0>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    1f2a:	4b0d      	ldr	r3, [pc, #52]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1f2c:	681b      	ldr	r3, [r3, #0]
    1f2e:	681b      	ldr	r3, [r3, #0]
    1f30:	687a      	ldr	r2, [r7, #4]
    1f32:	3208      	adds	r2, #8
    1f34:	0152      	lsls	r2, r2, #5
    1f36:	5cd3      	ldrb	r3, [r2, r3]
    1f38:	079b      	lsls	r3, r3, #30
    1f3a:	0f9b      	lsrs	r3, r3, #30
    1f3c:	b2db      	uxtb	r3, r3
			/* Start Bulk IN */
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
					continue;
				}
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    1f3e:	2b01      	cmp	r3, #1
    1f40:	d114      	bne.n	1f6c <_usb_host_interrupt_handler+0x4d0>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
					continue;
				}
				/* Continue */
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    1f42:	4b07      	ldr	r3, [pc, #28]	; (1f60 <_usb_host_interrupt_handler+0x4c4>)
    1f44:	681b      	ldr	r3, [r3, #0]
    1f46:	681a      	ldr	r2, [r3, #0]
    1f48:	687b      	ldr	r3, [r7, #4]
    1f4a:	3308      	adds	r3, #8
    1f4c:	015b      	lsls	r3, r3, #5
    1f4e:	18d3      	adds	r3, r2, r3
    1f50:	3304      	adds	r3, #4
    1f52:	2210      	movs	r2, #16
    1f54:	701a      	strb	r2, [r3, #0]
    1f56:	e00a      	b.n	1f6e <_usb_host_interrupt_handler+0x4d2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
#if UHD_BULK_INTERVAL_MIN
			/* Start Bulk IN */
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
					continue;
    1f58:	46c0      	nop			; (mov r8, r8)
    1f5a:	e008      	b.n	1f6e <_usb_host_interrupt_handler+0x4d2>
    1f5c:	20000da0 	.word	0x20000da0
    1f60:	200000a8 	.word	0x200000a8
    1f64:	200000c0 	.word	0x200000c0
    1f68:	200000ac 	.word	0x200000ac
				}
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
					continue;
    1f6c:	46c0      	nop			; (mov r8, r8)
		if (flags & USB_HOST_INTFLAG_HSOF) {
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
#if UHD_BULK_INTERVAL_MIN
			/* Start Bulk IN */
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    1f6e:	687b      	ldr	r3, [r7, #4]
    1f70:	3301      	adds	r3, #1
    1f72:	607b      	str	r3, [r7, #4]
    1f74:	687b      	ldr	r3, [r7, #4]
    1f76:	2b07      	cmp	r3, #7
    1f78:	d9c2      	bls.n	1f00 <_usb_host_interrupt_handler+0x464>
				}
				/* Continue */
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
			}
#endif
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    1f7a:	4b65      	ldr	r3, [pc, #404]	; (2110 <_usb_host_interrupt_handler+0x674>)
    1f7c:	681b      	ldr	r3, [r3, #0]
    1f7e:	22a5      	movs	r2, #165	; 0xa5
    1f80:	5c9b      	ldrb	r3, [r3, r2]
    1f82:	001a      	movs	r2, r3
    1f84:	2301      	movs	r3, #1
    1f86:	4013      	ands	r3, r2
    1f88:	d006      	beq.n	1f98 <_usb_host_interrupt_handler+0x4fc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    1f8a:	4b61      	ldr	r3, [pc, #388]	; (2110 <_usb_host_interrupt_handler+0x674>)
    1f8c:	681b      	ldr	r3, [r3, #0]
    1f8e:	685a      	ldr	r2, [r3, #4]
    1f90:	4b5f      	ldr	r3, [pc, #380]	; (2110 <_usb_host_interrupt_handler+0x674>)
    1f92:	681b      	ldr	r3, [r3, #0]
    1f94:	0018      	movs	r0, r3
    1f96:	4790      	blx	r2
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    1f98:	683b      	ldr	r3, [r7, #0]
    1f9a:	2208      	movs	r2, #8
    1f9c:	4013      	ands	r3, r2
    1f9e:	d016      	beq.n	1fce <_usb_host_interrupt_handler+0x532>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    1fa0:	4b5c      	ldr	r3, [pc, #368]	; (2114 <_usb_host_interrupt_handler+0x678>)
    1fa2:	2200      	movs	r2, #0
    1fa4:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    1fa6:	4b5a      	ldr	r3, [pc, #360]	; (2110 <_usb_host_interrupt_handler+0x674>)
    1fa8:	681b      	ldr	r3, [r3, #0]
    1faa:	681b      	ldr	r3, [r3, #0]
    1fac:	2208      	movs	r2, #8
    1fae:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    1fb0:	4b57      	ldr	r3, [pc, #348]	; (2110 <_usb_host_interrupt_handler+0x674>)
    1fb2:	681b      	ldr	r3, [r3, #0]
    1fb4:	22a5      	movs	r2, #165	; 0xa5
    1fb6:	5c9b      	ldrb	r3, [r3, r2]
    1fb8:	001a      	movs	r2, r3
    1fba:	2302      	movs	r3, #2
    1fbc:	4013      	ands	r3, r2
    1fbe:	d006      	beq.n	1fce <_usb_host_interrupt_handler+0x532>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    1fc0:	4b53      	ldr	r3, [pc, #332]	; (2110 <_usb_host_interrupt_handler+0x674>)
    1fc2:	681b      	ldr	r3, [r3, #0]
    1fc4:	689a      	ldr	r2, [r3, #8]
    1fc6:	4b52      	ldr	r3, [pc, #328]	; (2110 <_usb_host_interrupt_handler+0x674>)
    1fc8:	681b      	ldr	r3, [r3, #0]
    1fca:	0018      	movs	r0, r3
    1fcc:	4790      	blx	r2
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    1fce:	683b      	ldr	r3, [r7, #0]
    1fd0:	2240      	movs	r2, #64	; 0x40
    1fd2:	4013      	ands	r3, r2
    1fd4:	d013      	beq.n	1ffe <_usb_host_interrupt_handler+0x562>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    1fd6:	4b4e      	ldr	r3, [pc, #312]	; (2110 <_usb_host_interrupt_handler+0x674>)
    1fd8:	681b      	ldr	r3, [r3, #0]
    1fda:	681b      	ldr	r3, [r3, #0]
    1fdc:	2240      	movs	r2, #64	; 0x40
    1fde:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    1fe0:	4b4b      	ldr	r3, [pc, #300]	; (2110 <_usb_host_interrupt_handler+0x674>)
    1fe2:	681b      	ldr	r3, [r3, #0]
    1fe4:	22a5      	movs	r2, #165	; 0xa5
    1fe6:	5c9b      	ldrb	r3, [r3, r2]
    1fe8:	001a      	movs	r2, r3
    1fea:	2310      	movs	r3, #16
    1fec:	4013      	ands	r3, r2
    1fee:	d006      	beq.n	1ffe <_usb_host_interrupt_handler+0x562>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    1ff0:	4b47      	ldr	r3, [pc, #284]	; (2110 <_usb_host_interrupt_handler+0x674>)
    1ff2:	681b      	ldr	r3, [r3, #0]
    1ff4:	695a      	ldr	r2, [r3, #20]
    1ff6:	4b46      	ldr	r3, [pc, #280]	; (2110 <_usb_host_interrupt_handler+0x674>)
    1ff8:	681b      	ldr	r3, [r3, #0]
    1ffa:	0018      	movs	r0, r3
    1ffc:	4790      	blx	r2
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    1ffe:	683b      	ldr	r3, [r7, #0]
    2000:	2220      	movs	r2, #32
    2002:	4013      	ands	r3, r2
    2004:	d013      	beq.n	202e <_usb_host_interrupt_handler+0x592>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    2006:	4b42      	ldr	r3, [pc, #264]	; (2110 <_usb_host_interrupt_handler+0x674>)
    2008:	681b      	ldr	r3, [r3, #0]
    200a:	681b      	ldr	r3, [r3, #0]
    200c:	2220      	movs	r2, #32
    200e:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    2010:	4b3f      	ldr	r3, [pc, #252]	; (2110 <_usb_host_interrupt_handler+0x674>)
    2012:	681b      	ldr	r3, [r3, #0]
    2014:	22a5      	movs	r2, #165	; 0xa5
    2016:	5c9b      	ldrb	r3, [r3, r2]
    2018:	001a      	movs	r2, r3
    201a:	2308      	movs	r3, #8
    201c:	4013      	ands	r3, r2
    201e:	d006      	beq.n	202e <_usb_host_interrupt_handler+0x592>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    2020:	4b3b      	ldr	r3, [pc, #236]	; (2110 <_usb_host_interrupt_handler+0x674>)
    2022:	681b      	ldr	r3, [r3, #0]
    2024:	691a      	ldr	r2, [r3, #16]
    2026:	4b3a      	ldr	r3, [pc, #232]	; (2110 <_usb_host_interrupt_handler+0x674>)
    2028:	681b      	ldr	r3, [r3, #0]
    202a:	0018      	movs	r0, r3
    202c:	4790      	blx	r2
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    202e:	683b      	ldr	r3, [r7, #0]
    2030:	2210      	movs	r2, #16
    2032:	4013      	ands	r3, r2
    2034:	d013      	beq.n	205e <_usb_host_interrupt_handler+0x5c2>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    2036:	4b36      	ldr	r3, [pc, #216]	; (2110 <_usb_host_interrupt_handler+0x674>)
    2038:	681b      	ldr	r3, [r3, #0]
    203a:	681b      	ldr	r3, [r3, #0]
    203c:	2210      	movs	r2, #16
    203e:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    2040:	4b33      	ldr	r3, [pc, #204]	; (2110 <_usb_host_interrupt_handler+0x674>)
    2042:	681b      	ldr	r3, [r3, #0]
    2044:	22a5      	movs	r2, #165	; 0xa5
    2046:	5c9b      	ldrb	r3, [r3, r2]
    2048:	001a      	movs	r2, r3
    204a:	2304      	movs	r3, #4
    204c:	4013      	ands	r3, r2
    204e:	d006      	beq.n	205e <_usb_host_interrupt_handler+0x5c2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    2050:	4b2f      	ldr	r3, [pc, #188]	; (2110 <_usb_host_interrupt_handler+0x674>)
    2052:	681b      	ldr	r3, [r3, #0]
    2054:	68da      	ldr	r2, [r3, #12]
    2056:	4b2e      	ldr	r3, [pc, #184]	; (2110 <_usb_host_interrupt_handler+0x674>)
    2058:	681b      	ldr	r3, [r3, #0]
    205a:	0018      	movs	r0, r3
    205c:	4790      	blx	r2
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    205e:	683b      	ldr	r3, [r7, #0]
    2060:	2280      	movs	r2, #128	; 0x80
    2062:	4013      	ands	r3, r2
    2064:	d016      	beq.n	2094 <_usb_host_interrupt_handler+0x5f8>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    2066:	4b2b      	ldr	r3, [pc, #172]	; (2114 <_usb_host_interrupt_handler+0x678>)
    2068:	2200      	movs	r2, #0
    206a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    206c:	4b28      	ldr	r3, [pc, #160]	; (2110 <_usb_host_interrupt_handler+0x674>)
    206e:	681b      	ldr	r3, [r3, #0]
    2070:	681b      	ldr	r3, [r3, #0]
    2072:	2280      	movs	r2, #128	; 0x80
    2074:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    2076:	4b26      	ldr	r3, [pc, #152]	; (2110 <_usb_host_interrupt_handler+0x674>)
    2078:	681b      	ldr	r3, [r3, #0]
    207a:	22a5      	movs	r2, #165	; 0xa5
    207c:	5c9b      	ldrb	r3, [r3, r2]
    207e:	001a      	movs	r2, r3
    2080:	2320      	movs	r3, #32
    2082:	4013      	ands	r3, r2
    2084:	d006      	beq.n	2094 <_usb_host_interrupt_handler+0x5f8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    2086:	4b22      	ldr	r3, [pc, #136]	; (2110 <_usb_host_interrupt_handler+0x674>)
    2088:	681b      	ldr	r3, [r3, #0]
    208a:	699a      	ldr	r2, [r3, #24]
    208c:	4b20      	ldr	r3, [pc, #128]	; (2110 <_usb_host_interrupt_handler+0x674>)
    208e:	681b      	ldr	r3, [r3, #0]
    2090:	0018      	movs	r0, r3
    2092:	4790      	blx	r2
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    2094:	683a      	ldr	r2, [r7, #0]
    2096:	2380      	movs	r3, #128	; 0x80
    2098:	005b      	lsls	r3, r3, #1
    209a:	4013      	ands	r3, r2
    209c:	d017      	beq.n	20ce <_usb_host_interrupt_handler+0x632>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    209e:	4b1d      	ldr	r3, [pc, #116]	; (2114 <_usb_host_interrupt_handler+0x678>)
    20a0:	2200      	movs	r2, #0
    20a2:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    20a4:	4b1a      	ldr	r3, [pc, #104]	; (2110 <_usb_host_interrupt_handler+0x674>)
    20a6:	681b      	ldr	r3, [r3, #0]
    20a8:	681b      	ldr	r3, [r3, #0]
    20aa:	2280      	movs	r2, #128	; 0x80
    20ac:	0052      	lsls	r2, r2, #1
    20ae:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    20b0:	4b17      	ldr	r3, [pc, #92]	; (2110 <_usb_host_interrupt_handler+0x674>)
    20b2:	681b      	ldr	r3, [r3, #0]
    20b4:	22a5      	movs	r2, #165	; 0xa5
    20b6:	5c9b      	ldrb	r3, [r3, r2]
    20b8:	001a      	movs	r2, r3
    20ba:	2340      	movs	r3, #64	; 0x40
    20bc:	4013      	ands	r3, r2
    20be:	d006      	beq.n	20ce <_usb_host_interrupt_handler+0x632>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    20c0:	4b13      	ldr	r3, [pc, #76]	; (2110 <_usb_host_interrupt_handler+0x674>)
    20c2:	681b      	ldr	r3, [r3, #0]
    20c4:	69da      	ldr	r2, [r3, #28]
    20c6:	4b12      	ldr	r3, [pc, #72]	; (2110 <_usb_host_interrupt_handler+0x674>)
    20c8:	681b      	ldr	r3, [r3, #0]
    20ca:	0018      	movs	r0, r3
    20cc:	4790      	blx	r2
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    20ce:	683a      	ldr	r2, [r7, #0]
    20d0:	2380      	movs	r3, #128	; 0x80
    20d2:	009b      	lsls	r3, r3, #2
    20d4:	4013      	ands	r3, r2
    20d6:	d016      	beq.n	2106 <_usb_host_interrupt_handler+0x66a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    20d8:	4b0e      	ldr	r3, [pc, #56]	; (2114 <_usb_host_interrupt_handler+0x678>)
    20da:	2200      	movs	r2, #0
    20dc:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    20de:	4b0c      	ldr	r3, [pc, #48]	; (2110 <_usb_host_interrupt_handler+0x674>)
    20e0:	681b      	ldr	r3, [r3, #0]
    20e2:	681b      	ldr	r3, [r3, #0]
    20e4:	2280      	movs	r2, #128	; 0x80
    20e6:	0092      	lsls	r2, r2, #2
    20e8:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    20ea:	4b09      	ldr	r3, [pc, #36]	; (2110 <_usb_host_interrupt_handler+0x674>)
    20ec:	681b      	ldr	r3, [r3, #0]
    20ee:	22a5      	movs	r2, #165	; 0xa5
    20f0:	5c9b      	ldrb	r3, [r3, r2]
    20f2:	b25b      	sxtb	r3, r3
    20f4:	2b00      	cmp	r3, #0
    20f6:	da06      	bge.n	2106 <_usb_host_interrupt_handler+0x66a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    20f8:	4b05      	ldr	r3, [pc, #20]	; (2110 <_usb_host_interrupt_handler+0x674>)
    20fa:	681b      	ldr	r3, [r3, #0]
    20fc:	6a1a      	ldr	r2, [r3, #32]
    20fe:	4b04      	ldr	r3, [pc, #16]	; (2110 <_usb_host_interrupt_handler+0x674>)
    2100:	681b      	ldr	r3, [r3, #0]
    2102:	0018      	movs	r0, r3
    2104:	4790      	blx	r2
			}
		}

	}
}
    2106:	46c0      	nop			; (mov r8, r8)
    2108:	46bd      	mov	sp, r7
    210a:	b002      	add	sp, #8
    210c:	bd80      	pop	{r7, pc}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	200000a8 	.word	0x200000a8
    2114:	200000c0 	.word	0x200000c0

00002118 <_usb_device_interrupt_handler>:

	return STATUS_OK;
}

static void _usb_device_interrupt_handler(void)
{
    2118:	b580      	push	{r7, lr}
    211a:	b084      	sub	sp, #16
    211c:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    211e:	4bbd      	ldr	r3, [pc, #756]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    2120:	681b      	ldr	r3, [r3, #0]
    2122:	681a      	ldr	r2, [r3, #0]
    2124:	2308      	movs	r3, #8
    2126:	18fb      	adds	r3, r7, r3
    2128:	8c12      	ldrh	r2, [r2, #32]
    212a:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    212c:	2308      	movs	r3, #8
    212e:	18fb      	adds	r3, r7, r3
    2130:	881b      	ldrh	r3, [r3, #0]
    2132:	2b00      	cmp	r3, #0
    2134:	d155      	bne.n	21e2 <_usb_device_interrupt_handler+0xca>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    2136:	4bb7      	ldr	r3, [pc, #732]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    2138:	681b      	ldr	r3, [r3, #0]
    213a:	681a      	ldr	r2, [r3, #0]
    213c:	1dbb      	adds	r3, r7, #6
    213e:	8b92      	ldrh	r2, [r2, #28]
    2140:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    2142:	4bb4      	ldr	r3, [pc, #720]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    2144:	681a      	ldr	r2, [r3, #0]
    2146:	23ab      	movs	r3, #171	; 0xab
    2148:	005b      	lsls	r3, r3, #1
    214a:	5ad3      	ldrh	r3, [r2, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    214c:	1dba      	adds	r2, r7, #6
    214e:	8812      	ldrh	r2, [r2, #0]
    2150:	4013      	ands	r3, r2
    2152:	b29a      	uxth	r2, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    2154:	4baf      	ldr	r3, [pc, #700]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    2156:	6819      	ldr	r1, [r3, #0]
    2158:	23aa      	movs	r3, #170	; 0xaa
    215a:	005b      	lsls	r3, r3, #1
    215c:	5ac9      	ldrh	r1, [r1, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    215e:	1d3b      	adds	r3, r7, #4
    2160:	400a      	ands	r2, r1
    2162:	801a      	strh	r2, [r3, #0]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2164:	2300      	movs	r3, #0
    2166:	60fb      	str	r3, [r7, #12]
    2168:	e037      	b.n	21da <_usb_device_interrupt_handler+0xc2>
			if (flags & _usb_device_irq_bits[i]) {
    216a:	4bab      	ldr	r3, [pc, #684]	; (2418 <_usb_device_interrupt_handler+0x300>)
    216c:	68fa      	ldr	r2, [r7, #12]
    216e:	0052      	lsls	r2, r2, #1
    2170:	5ad3      	ldrh	r3, [r2, r3]
    2172:	1dba      	adds	r2, r7, #6
    2174:	8812      	ldrh	r2, [r2, #0]
    2176:	4013      	ands	r3, r2
    2178:	b29b      	uxth	r3, r3
    217a:	2b00      	cmp	r3, #0
    217c:	d007      	beq.n	218e <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    217e:	4ba5      	ldr	r3, [pc, #660]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    2180:	681b      	ldr	r3, [r3, #0]
    2182:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    2184:	4aa4      	ldr	r2, [pc, #656]	; (2418 <_usb_device_interrupt_handler+0x300>)
    2186:	68f9      	ldr	r1, [r7, #12]
    2188:	0049      	lsls	r1, r1, #1
    218a:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    218c:	839a      	strh	r2, [r3, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    218e:	4ba2      	ldr	r3, [pc, #648]	; (2418 <_usb_device_interrupt_handler+0x300>)
    2190:	68fa      	ldr	r2, [r7, #12]
    2192:	0052      	lsls	r2, r2, #1
    2194:	5ad3      	ldrh	r3, [r2, r3]
    2196:	1d3a      	adds	r2, r7, #4
    2198:	8812      	ldrh	r2, [r2, #0]
    219a:	4013      	ands	r3, r2
    219c:	b29b      	uxth	r3, r3
    219e:	2b00      	cmp	r3, #0
    21a0:	d018      	beq.n	21d4 <_usb_device_interrupt_handler+0xbc>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    21a2:	68fb      	ldr	r3, [r7, #12]
    21a4:	2b06      	cmp	r3, #6
    21a6:	d10a      	bne.n	21be <_usb_device_interrupt_handler+0xa6>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    21a8:	4b9c      	ldr	r3, [pc, #624]	; (241c <_usb_device_interrupt_handler+0x304>)
    21aa:	891b      	ldrh	r3, [r3, #8]
    21ac:	045b      	lsls	r3, r3, #17
    21ae:	0d5b      	lsrs	r3, r3, #21
    21b0:	b29b      	uxth	r3, r3
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    21b2:	001a      	movs	r2, r3
    21b4:	2380      	movs	r3, #128	; 0x80
    21b6:	005b      	lsls	r3, r3, #1
    21b8:	401a      	ands	r2, r3
    21ba:	4b99      	ldr	r3, [pc, #612]	; (2420 <_usb_device_interrupt_handler+0x308>)
    21bc:	601a      	str	r2, [r3, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    21be:	4b95      	ldr	r3, [pc, #596]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    21c0:	681b      	ldr	r3, [r3, #0]
    21c2:	68fa      	ldr	r2, [r7, #12]
    21c4:	322e      	adds	r2, #46	; 0x2e
    21c6:	0092      	lsls	r2, r2, #2
    21c8:	58d2      	ldr	r2, [r2, r3]
    21ca:	4b92      	ldr	r3, [pc, #584]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    21cc:	681b      	ldr	r3, [r3, #0]
    21ce:	4994      	ldr	r1, [pc, #592]	; (2420 <_usb_device_interrupt_handler+0x308>)
    21d0:	0018      	movs	r0, r3
    21d2:	4790      	blx	r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    21d4:	68fb      	ldr	r3, [r7, #12]
    21d6:	3301      	adds	r3, #1
    21d8:	60fb      	str	r3, [r7, #12]
    21da:	68fb      	ldr	r3, [r7, #12]
    21dc:	2b06      	cmp	r3, #6
    21de:	ddc4      	ble.n	216a <_usb_device_interrupt_handler+0x52>
    21e0:	e250      	b.n	2684 <_usb_device_interrupt_handler+0x56c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    21e2:	230b      	movs	r3, #11
    21e4:	18fb      	adds	r3, r7, r3
    21e6:	2200      	movs	r2, #0
    21e8:	701a      	strb	r2, [r3, #0]
    21ea:	e23b      	b.n	2664 <_usb_device_interrupt_handler+0x54c>

			if (ep_inst & (1 << i)) {
    21ec:	2308      	movs	r3, #8
    21ee:	18fb      	adds	r3, r7, r3
    21f0:	881a      	ldrh	r2, [r3, #0]
    21f2:	230b      	movs	r3, #11
    21f4:	18fb      	adds	r3, r7, r3
    21f6:	781b      	ldrb	r3, [r3, #0]
    21f8:	411a      	asrs	r2, r3
    21fa:	0013      	movs	r3, r2
    21fc:	2201      	movs	r2, #1
    21fe:	4013      	ands	r3, r2
    2200:	d100      	bne.n	2204 <_usb_device_interrupt_handler+0xec>
    2202:	e228      	b.n	2656 <_usb_device_interrupt_handler+0x53e>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    2204:	4b83      	ldr	r3, [pc, #524]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    2206:	681b      	ldr	r3, [r3, #0]
    2208:	681a      	ldr	r2, [r3, #0]
    220a:	230b      	movs	r3, #11
    220c:	18fb      	adds	r3, r7, r3
    220e:	781b      	ldrb	r3, [r3, #0]
    2210:	3308      	adds	r3, #8
    2212:	015b      	lsls	r3, r3, #5
    2214:	18d3      	adds	r3, r2, r3
    2216:	3307      	adds	r3, #7
    2218:	781b      	ldrb	r3, [r3, #0]
    221a:	b2da      	uxtb	r2, r3
    221c:	1dbb      	adds	r3, r7, #6
    221e:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    2220:	4b7c      	ldr	r3, [pc, #496]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    2222:	6819      	ldr	r1, [r3, #0]
    2224:	230b      	movs	r3, #11
    2226:	18fb      	adds	r3, r7, r3
    2228:	781a      	ldrb	r2, [r3, #0]
    222a:	23b0      	movs	r3, #176	; 0xb0
    222c:	005b      	lsls	r3, r3, #1
    222e:	188a      	adds	r2, r1, r2
    2230:	18d3      	adds	r3, r2, r3
    2232:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    2234:	b29b      	uxth	r3, r3
    2236:	1dba      	adds	r2, r7, #6
    2238:	8812      	ldrh	r2, [r2, #0]
    223a:	4013      	ands	r3, r2
    223c:	b29b      	uxth	r3, r3
    223e:	b21a      	sxth	r2, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];
    2240:	4b74      	ldr	r3, [pc, #464]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    2242:	6818      	ldr	r0, [r3, #0]
    2244:	230b      	movs	r3, #11
    2246:	18fb      	adds	r3, r7, r3
    2248:	7819      	ldrb	r1, [r3, #0]
    224a:	23ac      	movs	r3, #172	; 0xac
    224c:	005b      	lsls	r3, r3, #1
    224e:	1841      	adds	r1, r0, r1
    2250:	18cb      	adds	r3, r1, r3
    2252:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    2254:	b21b      	sxth	r3, r3
    2256:	4013      	ands	r3, r2
    2258:	b21a      	sxth	r2, r3
    225a:	1d3b      	adds	r3, r7, #4
    225c:	801a      	strh	r2, [r3, #0]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    225e:	1dbb      	adds	r3, r7, #6
    2260:	881b      	ldrh	r3, [r3, #0]
    2262:	2260      	movs	r2, #96	; 0x60
    2264:	4013      	ands	r3, r2
    2266:	d05c      	beq.n	2322 <_usb_device_interrupt_handler+0x20a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    2268:	4b6a      	ldr	r3, [pc, #424]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    226a:	681b      	ldr	r3, [r3, #0]
    226c:	681a      	ldr	r2, [r3, #0]
    226e:	230b      	movs	r3, #11
    2270:	18fb      	adds	r3, r7, r3
    2272:	781b      	ldrb	r3, [r3, #0]
    2274:	3308      	adds	r3, #8
    2276:	015b      	lsls	r3, r3, #5
    2278:	18d3      	adds	r3, r2, r3
    227a:	3307      	adds	r3, #7
    227c:	781b      	ldrb	r3, [r3, #0]
    227e:	b2db      	uxtb	r3, r3
    2280:	001a      	movs	r2, r3
    2282:	2340      	movs	r3, #64	; 0x40
    2284:	4013      	ands	r3, r2
    2286:	d015      	beq.n	22b4 <_usb_device_interrupt_handler+0x19c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    2288:	4b62      	ldr	r3, [pc, #392]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    228a:	681b      	ldr	r3, [r3, #0]
    228c:	681a      	ldr	r2, [r3, #0]
    228e:	230b      	movs	r3, #11
    2290:	18fb      	adds	r3, r7, r3
    2292:	781b      	ldrb	r3, [r3, #0]
    2294:	3308      	adds	r3, #8
    2296:	015b      	lsls	r3, r3, #5
    2298:	18d3      	adds	r3, r2, r3
    229a:	3307      	adds	r3, #7
    229c:	2240      	movs	r2, #64	; 0x40
    229e:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    22a0:	230b      	movs	r3, #11
    22a2:	18fb      	adds	r3, r7, r3
    22a4:	781b      	ldrb	r3, [r3, #0]
    22a6:	2280      	movs	r2, #128	; 0x80
    22a8:	4252      	negs	r2, r2
    22aa:	4313      	orrs	r3, r2
    22ac:	b2da      	uxtb	r2, r3
    22ae:	4b5d      	ldr	r3, [pc, #372]	; (2424 <_usb_device_interrupt_handler+0x30c>)
    22b0:	719a      	strb	r2, [r3, #6]
    22b2:	e020      	b.n	22f6 <_usb_device_interrupt_handler+0x1de>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    22b4:	4b57      	ldr	r3, [pc, #348]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    22b6:	681b      	ldr	r3, [r3, #0]
    22b8:	681a      	ldr	r2, [r3, #0]
    22ba:	230b      	movs	r3, #11
    22bc:	18fb      	adds	r3, r7, r3
    22be:	781b      	ldrb	r3, [r3, #0]
    22c0:	3308      	adds	r3, #8
    22c2:	015b      	lsls	r3, r3, #5
    22c4:	18d3      	adds	r3, r2, r3
    22c6:	3307      	adds	r3, #7
    22c8:	781b      	ldrb	r3, [r3, #0]
    22ca:	b2db      	uxtb	r3, r3
    22cc:	001a      	movs	r2, r3
    22ce:	2320      	movs	r3, #32
    22d0:	4013      	ands	r3, r2
    22d2:	d010      	beq.n	22f6 <_usb_device_interrupt_handler+0x1de>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    22d4:	4b4f      	ldr	r3, [pc, #316]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    22d6:	681b      	ldr	r3, [r3, #0]
    22d8:	681a      	ldr	r2, [r3, #0]
    22da:	230b      	movs	r3, #11
    22dc:	18fb      	adds	r3, r7, r3
    22de:	781b      	ldrb	r3, [r3, #0]
    22e0:	3308      	adds	r3, #8
    22e2:	015b      	lsls	r3, r3, #5
    22e4:	18d3      	adds	r3, r2, r3
    22e6:	3307      	adds	r3, #7
    22e8:	2220      	movs	r2, #32
    22ea:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    22ec:	4b4d      	ldr	r3, [pc, #308]	; (2424 <_usb_device_interrupt_handler+0x30c>)
    22ee:	220b      	movs	r2, #11
    22f0:	18ba      	adds	r2, r7, r2
    22f2:	7812      	ldrb	r2, [r2, #0]
    22f4:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    22f6:	1d3b      	adds	r3, r7, #4
    22f8:	881b      	ldrh	r3, [r3, #0]
    22fa:	2260      	movs	r2, #96	; 0x60
    22fc:	4013      	ands	r3, r2
    22fe:	d100      	bne.n	2302 <_usb_device_interrupt_handler+0x1ea>
    2300:	e1b7      	b.n	2672 <_usb_device_interrupt_handler+0x55a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    2302:	4b44      	ldr	r3, [pc, #272]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    2304:	681a      	ldr	r2, [r3, #0]
    2306:	230b      	movs	r3, #11
    2308:	18fb      	adds	r3, r7, r3
    230a:	781b      	ldrb	r3, [r3, #0]
    230c:	21e0      	movs	r1, #224	; 0xe0
    230e:	011b      	lsls	r3, r3, #4
    2310:	18d3      	adds	r3, r2, r3
    2312:	185b      	adds	r3, r3, r1
    2314:	681a      	ldr	r2, [r3, #0]
    2316:	4b3f      	ldr	r3, [pc, #252]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    2318:	681b      	ldr	r3, [r3, #0]
    231a:	4942      	ldr	r1, [pc, #264]	; (2424 <_usb_device_interrupt_handler+0x30c>)
    231c:	0018      	movs	r0, r3
    231e:	4790      	blx	r2
					}
					return;
    2320:	e1a7      	b.n	2672 <_usb_device_interrupt_handler+0x55a>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2322:	1dbb      	adds	r3, r7, #6
    2324:	881b      	ldrh	r3, [r3, #0]
    2326:	2210      	movs	r2, #16
    2328:	4013      	ands	r3, r2
    232a:	d038      	beq.n	239e <_usb_device_interrupt_handler+0x286>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    232c:	4b39      	ldr	r3, [pc, #228]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    232e:	681b      	ldr	r3, [r3, #0]
    2330:	681a      	ldr	r2, [r3, #0]
    2332:	230b      	movs	r3, #11
    2334:	18fb      	adds	r3, r7, r3
    2336:	781b      	ldrb	r3, [r3, #0]
    2338:	3308      	adds	r3, #8
    233a:	015b      	lsls	r3, r3, #5
    233c:	18d3      	adds	r3, r2, r3
    233e:	3307      	adds	r3, #7
    2340:	2210      	movs	r2, #16
    2342:	701a      	strb	r2, [r3, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    2344:	4b33      	ldr	r3, [pc, #204]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    2346:	6819      	ldr	r1, [r3, #0]
    2348:	230b      	movs	r3, #11
    234a:	18fb      	adds	r3, r7, r3
    234c:	781a      	ldrb	r2, [r3, #0]
    234e:	23b0      	movs	r3, #176	; 0xb0
    2350:	005b      	lsls	r3, r3, #1
    2352:	188a      	adds	r2, r1, r2
    2354:	18d3      	adds	r3, r2, r3
    2356:	781b      	ldrb	r3, [r3, #0]
    2358:	2210      	movs	r2, #16
    235a:	4013      	ands	r3, r2
    235c:	b2db      	uxtb	r3, r3
    235e:	2b00      	cmp	r3, #0
    2360:	d100      	bne.n	2364 <_usb_device_interrupt_handler+0x24c>
    2362:	e188      	b.n	2676 <_usb_device_interrupt_handler+0x55e>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    2364:	230b      	movs	r3, #11
    2366:	18fb      	adds	r3, r7, r3
    2368:	781b      	ldrb	r3, [r3, #0]
    236a:	4a2c      	ldr	r2, [pc, #176]	; (241c <_usb_device_interrupt_handler+0x304>)
    236c:	015b      	lsls	r3, r3, #5
    236e:	18d3      	adds	r3, r2, r3
    2370:	685b      	ldr	r3, [r3, #4]
    2372:	049b      	lsls	r3, r3, #18
    2374:	0c9b      	lsrs	r3, r3, #18
    2376:	b29b      	uxth	r3, r3
    2378:	001a      	movs	r2, r3
    237a:	4b2a      	ldr	r3, [pc, #168]	; (2424 <_usb_device_interrupt_handler+0x30c>)
    237c:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    237e:	4b25      	ldr	r3, [pc, #148]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    2380:	681a      	ldr	r2, [r3, #0]
    2382:	230b      	movs	r3, #11
    2384:	18fb      	adds	r3, r7, r3
    2386:	781b      	ldrb	r3, [r3, #0]
    2388:	21dc      	movs	r1, #220	; 0xdc
    238a:	011b      	lsls	r3, r3, #4
    238c:	18d3      	adds	r3, r2, r3
    238e:	185b      	adds	r3, r3, r1
    2390:	681a      	ldr	r2, [r3, #0]
    2392:	4b20      	ldr	r3, [pc, #128]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    2394:	681b      	ldr	r3, [r3, #0]
    2396:	4923      	ldr	r1, [pc, #140]	; (2424 <_usb_device_interrupt_handler+0x30c>)
    2398:	0018      	movs	r0, r3
    239a:	4790      	blx	r2
					}
					return;
    239c:	e16b      	b.n	2676 <_usb_device_interrupt_handler+0x55e>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    239e:	1dbb      	adds	r3, r7, #6
    23a0:	881b      	ldrh	r3, [r3, #0]
    23a2:	2203      	movs	r2, #3
    23a4:	4013      	ands	r3, r2
    23a6:	d100      	bne.n	23aa <_usb_device_interrupt_handler+0x292>
    23a8:	e08f      	b.n	24ca <_usb_device_interrupt_handler+0x3b2>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    23aa:	4b1a      	ldr	r3, [pc, #104]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    23ac:	681b      	ldr	r3, [r3, #0]
    23ae:	681a      	ldr	r2, [r3, #0]
    23b0:	230b      	movs	r3, #11
    23b2:	18fb      	adds	r3, r7, r3
    23b4:	781b      	ldrb	r3, [r3, #0]
    23b6:	3308      	adds	r3, #8
    23b8:	015b      	lsls	r3, r3, #5
    23ba:	18d3      	adds	r3, r2, r3
    23bc:	3307      	adds	r3, #7
    23be:	781b      	ldrb	r3, [r3, #0]
    23c0:	b2db      	uxtb	r3, r3
    23c2:	001a      	movs	r2, r3
    23c4:	2302      	movs	r3, #2
    23c6:	4013      	ands	r3, r2
    23c8:	d02e      	beq.n	2428 <_usb_device_interrupt_handler+0x310>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    23ca:	4b12      	ldr	r3, [pc, #72]	; (2414 <_usb_device_interrupt_handler+0x2fc>)
    23cc:	681b      	ldr	r3, [r3, #0]
    23ce:	681a      	ldr	r2, [r3, #0]
    23d0:	230b      	movs	r3, #11
    23d2:	18fb      	adds	r3, r7, r3
    23d4:	781b      	ldrb	r3, [r3, #0]
    23d6:	3308      	adds	r3, #8
    23d8:	015b      	lsls	r3, r3, #5
    23da:	18d3      	adds	r3, r2, r3
    23dc:	3307      	adds	r3, #7
    23de:	2202      	movs	r2, #2
    23e0:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    23e2:	230b      	movs	r3, #11
    23e4:	18fb      	adds	r3, r7, r3
    23e6:	781b      	ldrb	r3, [r3, #0]
    23e8:	2280      	movs	r2, #128	; 0x80
    23ea:	4252      	negs	r2, r2
    23ec:	4313      	orrs	r3, r2
    23ee:	b2da      	uxtb	r2, r3
    23f0:	4b0c      	ldr	r3, [pc, #48]	; (2424 <_usb_device_interrupt_handler+0x30c>)
    23f2:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    23f4:	230b      	movs	r3, #11
    23f6:	18fb      	adds	r3, r7, r3
    23f8:	781b      	ldrb	r3, [r3, #0]
    23fa:	4a08      	ldr	r2, [pc, #32]	; (241c <_usb_device_interrupt_handler+0x304>)
    23fc:	015b      	lsls	r3, r3, #5
    23fe:	18d3      	adds	r3, r2, r3
    2400:	3310      	adds	r3, #16
    2402:	685b      	ldr	r3, [r3, #4]
    2404:	049b      	lsls	r3, r3, #18
    2406:	0c9b      	lsrs	r3, r3, #18
    2408:	b29b      	uxth	r3, r3
    240a:	001a      	movs	r2, r3
    240c:	4b05      	ldr	r3, [pc, #20]	; (2424 <_usb_device_interrupt_handler+0x30c>)
    240e:	805a      	strh	r2, [r3, #2]
    2410:	e045      	b.n	249e <_usb_device_interrupt_handler+0x386>
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	200000a8 	.word	0x200000a8
    2418:	0000fa1c 	.word	0x0000fa1c
    241c:	20000da0 	.word	0x20000da0
    2420:	200000b4 	.word	0x200000b4
    2424:	200000b8 	.word	0x200000b8

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2428:	4b98      	ldr	r3, [pc, #608]	; (268c <_usb_device_interrupt_handler+0x574>)
    242a:	681b      	ldr	r3, [r3, #0]
    242c:	681a      	ldr	r2, [r3, #0]
    242e:	230b      	movs	r3, #11
    2430:	18fb      	adds	r3, r7, r3
    2432:	781b      	ldrb	r3, [r3, #0]
    2434:	3308      	adds	r3, #8
    2436:	015b      	lsls	r3, r3, #5
    2438:	18d3      	adds	r3, r2, r3
    243a:	3307      	adds	r3, #7
    243c:	781b      	ldrb	r3, [r3, #0]
    243e:	b2db      	uxtb	r3, r3
    2440:	001a      	movs	r2, r3
    2442:	2301      	movs	r3, #1
    2444:	4013      	ands	r3, r2
    2446:	d02a      	beq.n	249e <_usb_device_interrupt_handler+0x386>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2448:	4b90      	ldr	r3, [pc, #576]	; (268c <_usb_device_interrupt_handler+0x574>)
    244a:	681b      	ldr	r3, [r3, #0]
    244c:	681a      	ldr	r2, [r3, #0]
    244e:	230b      	movs	r3, #11
    2450:	18fb      	adds	r3, r7, r3
    2452:	781b      	ldrb	r3, [r3, #0]
    2454:	3308      	adds	r3, #8
    2456:	015b      	lsls	r3, r3, #5
    2458:	18d3      	adds	r3, r2, r3
    245a:	3307      	adds	r3, #7
    245c:	2201      	movs	r2, #1
    245e:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2460:	4b8b      	ldr	r3, [pc, #556]	; (2690 <_usb_device_interrupt_handler+0x578>)
    2462:	220b      	movs	r2, #11
    2464:	18ba      	adds	r2, r7, r2
    2466:	7812      	ldrb	r2, [r2, #0]
    2468:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    246a:	230b      	movs	r3, #11
    246c:	18fb      	adds	r3, r7, r3
    246e:	781b      	ldrb	r3, [r3, #0]
    2470:	4a88      	ldr	r2, [pc, #544]	; (2694 <_usb_device_interrupt_handler+0x57c>)
    2472:	015b      	lsls	r3, r3, #5
    2474:	18d3      	adds	r3, r2, r3
    2476:	685b      	ldr	r3, [r3, #4]
    2478:	049b      	lsls	r3, r3, #18
    247a:	0c9b      	lsrs	r3, r3, #18
    247c:	b29b      	uxth	r3, r3
    247e:	001a      	movs	r2, r3
    2480:	4b83      	ldr	r3, [pc, #524]	; (2690 <_usb_device_interrupt_handler+0x578>)
    2482:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    2484:	230b      	movs	r3, #11
    2486:	18fb      	adds	r3, r7, r3
    2488:	781b      	ldrb	r3, [r3, #0]
    248a:	4a82      	ldr	r2, [pc, #520]	; (2694 <_usb_device_interrupt_handler+0x57c>)
    248c:	015b      	lsls	r3, r3, #5
    248e:	18d3      	adds	r3, r2, r3
    2490:	685b      	ldr	r3, [r3, #4]
    2492:	011b      	lsls	r3, r3, #4
    2494:	0c9b      	lsrs	r3, r3, #18
    2496:	b29b      	uxth	r3, r3
    2498:	001a      	movs	r2, r3
    249a:	4b7d      	ldr	r3, [pc, #500]	; (2690 <_usb_device_interrupt_handler+0x578>)
    249c:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    249e:	1d3b      	adds	r3, r7, #4
    24a0:	881b      	ldrh	r3, [r3, #0]
    24a2:	2203      	movs	r2, #3
    24a4:	4013      	ands	r3, r2
    24a6:	d100      	bne.n	24aa <_usb_device_interrupt_handler+0x392>
    24a8:	e0e7      	b.n	267a <_usb_device_interrupt_handler+0x562>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    24aa:	4b78      	ldr	r3, [pc, #480]	; (268c <_usb_device_interrupt_handler+0x574>)
    24ac:	681a      	ldr	r2, [r3, #0]
    24ae:	230b      	movs	r3, #11
    24b0:	18fb      	adds	r3, r7, r3
    24b2:	781b      	ldrb	r3, [r3, #0]
    24b4:	330d      	adds	r3, #13
    24b6:	011b      	lsls	r3, r3, #4
    24b8:	18d3      	adds	r3, r2, r3
    24ba:	3304      	adds	r3, #4
    24bc:	681a      	ldr	r2, [r3, #0]
    24be:	4b73      	ldr	r3, [pc, #460]	; (268c <_usb_device_interrupt_handler+0x574>)
    24c0:	681b      	ldr	r3, [r3, #0]
    24c2:	4973      	ldr	r1, [pc, #460]	; (2690 <_usb_device_interrupt_handler+0x578>)
    24c4:	0018      	movs	r0, r3
    24c6:	4790      	blx	r2
					}
					return;
    24c8:	e0d7      	b.n	267a <_usb_device_interrupt_handler+0x562>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    24ca:	1dbb      	adds	r3, r7, #6
    24cc:	881b      	ldrh	r3, [r3, #0]
    24ce:	220c      	movs	r2, #12
    24d0:	4013      	ands	r3, r2
    24d2:	d100      	bne.n	24d6 <_usb_device_interrupt_handler+0x3be>
    24d4:	e0bf      	b.n	2656 <_usb_device_interrupt_handler+0x53e>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    24d6:	4b6d      	ldr	r3, [pc, #436]	; (268c <_usb_device_interrupt_handler+0x574>)
    24d8:	681b      	ldr	r3, [r3, #0]
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	230b      	movs	r3, #11
    24de:	18fb      	adds	r3, r7, r3
    24e0:	781b      	ldrb	r3, [r3, #0]
    24e2:	3308      	adds	r3, #8
    24e4:	015b      	lsls	r3, r3, #5
    24e6:	18d3      	adds	r3, r2, r3
    24e8:	3307      	adds	r3, #7
    24ea:	781b      	ldrb	r3, [r3, #0]
    24ec:	b2db      	uxtb	r3, r3
    24ee:	001a      	movs	r2, r3
    24f0:	2308      	movs	r3, #8
    24f2:	4013      	ands	r3, r2
    24f4:	d047      	beq.n	2586 <_usb_device_interrupt_handler+0x46e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    24f6:	4b65      	ldr	r3, [pc, #404]	; (268c <_usb_device_interrupt_handler+0x574>)
    24f8:	681b      	ldr	r3, [r3, #0]
    24fa:	681a      	ldr	r2, [r3, #0]
    24fc:	230b      	movs	r3, #11
    24fe:	18fb      	adds	r3, r7, r3
    2500:	781b      	ldrb	r3, [r3, #0]
    2502:	3308      	adds	r3, #8
    2504:	015b      	lsls	r3, r3, #5
    2506:	18d3      	adds	r3, r2, r3
    2508:	3307      	adds	r3, #7
    250a:	2208      	movs	r2, #8
    250c:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    250e:	230b      	movs	r3, #11
    2510:	18fb      	adds	r3, r7, r3
    2512:	781b      	ldrb	r3, [r3, #0]
    2514:	4a5f      	ldr	r2, [pc, #380]	; (2694 <_usb_device_interrupt_handler+0x57c>)
    2516:	015b      	lsls	r3, r3, #5
    2518:	18d3      	adds	r3, r2, r3
    251a:	331a      	adds	r3, #26
    251c:	781b      	ldrb	r3, [r3, #0]
    251e:	b2db      	uxtb	r3, r3
    2520:	001a      	movs	r2, r3
    2522:	2302      	movs	r3, #2
    2524:	4013      	ands	r3, r2
    2526:	d014      	beq.n	2552 <_usb_device_interrupt_handler+0x43a>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2528:	230b      	movs	r3, #11
    252a:	18fb      	adds	r3, r7, r3
    252c:	781b      	ldrb	r3, [r3, #0]
    252e:	220b      	movs	r2, #11
    2530:	18ba      	adds	r2, r7, r2
    2532:	7812      	ldrb	r2, [r2, #0]
    2534:	4957      	ldr	r1, [pc, #348]	; (2694 <_usb_device_interrupt_handler+0x57c>)
    2536:	0152      	lsls	r2, r2, #5
    2538:	188a      	adds	r2, r1, r2
    253a:	321a      	adds	r2, #26
    253c:	7812      	ldrb	r2, [r2, #0]
    253e:	b2d2      	uxtb	r2, r2
    2540:	2102      	movs	r1, #2
    2542:	438a      	bics	r2, r1
    2544:	b2d1      	uxtb	r1, r2
    2546:	4a53      	ldr	r2, [pc, #332]	; (2694 <_usb_device_interrupt_handler+0x57c>)
    2548:	015b      	lsls	r3, r3, #5
    254a:	18d3      	adds	r3, r2, r3
    254c:	331a      	adds	r3, #26
    254e:	1c0a      	adds	r2, r1, #0
    2550:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2552:	230b      	movs	r3, #11
    2554:	18fb      	adds	r3, r7, r3
    2556:	781b      	ldrb	r3, [r3, #0]
    2558:	2280      	movs	r2, #128	; 0x80
    255a:	4252      	negs	r2, r2
    255c:	4313      	orrs	r3, r2
    255e:	b2da      	uxtb	r2, r3
    2560:	4b4b      	ldr	r3, [pc, #300]	; (2690 <_usb_device_interrupt_handler+0x578>)
    2562:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2564:	4b49      	ldr	r3, [pc, #292]	; (268c <_usb_device_interrupt_handler+0x574>)
    2566:	681b      	ldr	r3, [r3, #0]
    2568:	681a      	ldr	r2, [r3, #0]
    256a:	230b      	movs	r3, #11
    256c:	18fb      	adds	r3, r7, r3
    256e:	781b      	ldrb	r3, [r3, #0]
    2570:	3308      	adds	r3, #8
    2572:	015b      	lsls	r3, r3, #5
    2574:	18d3      	adds	r3, r2, r3
    2576:	3307      	adds	r3, #7
    2578:	781b      	ldrb	r3, [r3, #0]
    257a:	b2db      	uxtb	r3, r3
    257c:	001a      	movs	r2, r3
    257e:	2302      	movs	r3, #2
    2580:	4013      	ands	r3, r2
    2582:	d053      	beq.n	262c <_usb_device_interrupt_handler+0x514>
							return;
    2584:	e07e      	b.n	2684 <_usb_device_interrupt_handler+0x56c>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2586:	4b41      	ldr	r3, [pc, #260]	; (268c <_usb_device_interrupt_handler+0x574>)
    2588:	681b      	ldr	r3, [r3, #0]
    258a:	681a      	ldr	r2, [r3, #0]
    258c:	230b      	movs	r3, #11
    258e:	18fb      	adds	r3, r7, r3
    2590:	781b      	ldrb	r3, [r3, #0]
    2592:	3308      	adds	r3, #8
    2594:	015b      	lsls	r3, r3, #5
    2596:	18d3      	adds	r3, r2, r3
    2598:	3307      	adds	r3, #7
    259a:	781b      	ldrb	r3, [r3, #0]
    259c:	b2db      	uxtb	r3, r3
    259e:	001a      	movs	r2, r3
    25a0:	2304      	movs	r3, #4
    25a2:	4013      	ands	r3, r2
    25a4:	d042      	beq.n	262c <_usb_device_interrupt_handler+0x514>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    25a6:	4b39      	ldr	r3, [pc, #228]	; (268c <_usb_device_interrupt_handler+0x574>)
    25a8:	681b      	ldr	r3, [r3, #0]
    25aa:	681a      	ldr	r2, [r3, #0]
    25ac:	230b      	movs	r3, #11
    25ae:	18fb      	adds	r3, r7, r3
    25b0:	781b      	ldrb	r3, [r3, #0]
    25b2:	3308      	adds	r3, #8
    25b4:	015b      	lsls	r3, r3, #5
    25b6:	18d3      	adds	r3, r2, r3
    25b8:	3307      	adds	r3, #7
    25ba:	2204      	movs	r2, #4
    25bc:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    25be:	230b      	movs	r3, #11
    25c0:	18fb      	adds	r3, r7, r3
    25c2:	781b      	ldrb	r3, [r3, #0]
    25c4:	4a33      	ldr	r2, [pc, #204]	; (2694 <_usb_device_interrupt_handler+0x57c>)
    25c6:	015b      	lsls	r3, r3, #5
    25c8:	18d3      	adds	r3, r2, r3
    25ca:	330a      	adds	r3, #10
    25cc:	781b      	ldrb	r3, [r3, #0]
    25ce:	b2db      	uxtb	r3, r3
    25d0:	001a      	movs	r2, r3
    25d2:	2302      	movs	r3, #2
    25d4:	4013      	ands	r3, r2
    25d6:	d014      	beq.n	2602 <_usb_device_interrupt_handler+0x4ea>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    25d8:	230b      	movs	r3, #11
    25da:	18fb      	adds	r3, r7, r3
    25dc:	781b      	ldrb	r3, [r3, #0]
    25de:	220b      	movs	r2, #11
    25e0:	18ba      	adds	r2, r7, r2
    25e2:	7812      	ldrb	r2, [r2, #0]
    25e4:	492b      	ldr	r1, [pc, #172]	; (2694 <_usb_device_interrupt_handler+0x57c>)
    25e6:	0152      	lsls	r2, r2, #5
    25e8:	188a      	adds	r2, r1, r2
    25ea:	320a      	adds	r2, #10
    25ec:	7812      	ldrb	r2, [r2, #0]
    25ee:	b2d2      	uxtb	r2, r2
    25f0:	2102      	movs	r1, #2
    25f2:	438a      	bics	r2, r1
    25f4:	b2d1      	uxtb	r1, r2
    25f6:	4a27      	ldr	r2, [pc, #156]	; (2694 <_usb_device_interrupt_handler+0x57c>)
    25f8:	015b      	lsls	r3, r3, #5
    25fa:	18d3      	adds	r3, r2, r3
    25fc:	330a      	adds	r3, #10
    25fe:	1c0a      	adds	r2, r1, #0
    2600:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2602:	4b23      	ldr	r3, [pc, #140]	; (2690 <_usb_device_interrupt_handler+0x578>)
    2604:	220b      	movs	r2, #11
    2606:	18ba      	adds	r2, r7, r2
    2608:	7812      	ldrb	r2, [r2, #0]
    260a:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    260c:	4b1f      	ldr	r3, [pc, #124]	; (268c <_usb_device_interrupt_handler+0x574>)
    260e:	681b      	ldr	r3, [r3, #0]
    2610:	681a      	ldr	r2, [r3, #0]
    2612:	230b      	movs	r3, #11
    2614:	18fb      	adds	r3, r7, r3
    2616:	781b      	ldrb	r3, [r3, #0]
    2618:	3308      	adds	r3, #8
    261a:	015b      	lsls	r3, r3, #5
    261c:	18d3      	adds	r3, r2, r3
    261e:	3307      	adds	r3, #7
    2620:	781b      	ldrb	r3, [r3, #0]
    2622:	b2db      	uxtb	r3, r3
    2624:	001a      	movs	r2, r3
    2626:	2301      	movs	r3, #1
    2628:	4013      	ands	r3, r2
    262a:	d128      	bne.n	267e <_usb_device_interrupt_handler+0x566>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    262c:	1d3b      	adds	r3, r7, #4
    262e:	881b      	ldrh	r3, [r3, #0]
    2630:	220c      	movs	r2, #12
    2632:	4013      	ands	r3, r2
    2634:	d025      	beq.n	2682 <_usb_device_interrupt_handler+0x56a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    2636:	4b15      	ldr	r3, [pc, #84]	; (268c <_usb_device_interrupt_handler+0x574>)
    2638:	681a      	ldr	r2, [r3, #0]
    263a:	230b      	movs	r3, #11
    263c:	18fb      	adds	r3, r7, r3
    263e:	781b      	ldrb	r3, [r3, #0]
    2640:	21d8      	movs	r1, #216	; 0xd8
    2642:	011b      	lsls	r3, r3, #4
    2644:	18d3      	adds	r3, r2, r3
    2646:	185b      	adds	r3, r3, r1
    2648:	681a      	ldr	r2, [r3, #0]
    264a:	4b10      	ldr	r3, [pc, #64]	; (268c <_usb_device_interrupt_handler+0x574>)
    264c:	681b      	ldr	r3, [r3, #0]
    264e:	4910      	ldr	r1, [pc, #64]	; (2690 <_usb_device_interrupt_handler+0x578>)
    2650:	0018      	movs	r0, r3
    2652:	4790      	blx	r2
					}
					return;
    2654:	e015      	b.n	2682 <_usb_device_interrupt_handler+0x56a>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    2656:	230b      	movs	r3, #11
    2658:	18fb      	adds	r3, r7, r3
    265a:	781a      	ldrb	r2, [r3, #0]
    265c:	230b      	movs	r3, #11
    265e:	18fb      	adds	r3, r7, r3
    2660:	3201      	adds	r2, #1
    2662:	701a      	strb	r2, [r3, #0]
    2664:	230b      	movs	r3, #11
    2666:	18fb      	adds	r3, r7, r3
    2668:	781b      	ldrb	r3, [r3, #0]
    266a:	2b07      	cmp	r3, #7
    266c:	d800      	bhi.n	2670 <_usb_device_interrupt_handler+0x558>
    266e:	e5bd      	b.n	21ec <_usb_device_interrupt_handler+0xd4>
    2670:	e008      	b.n	2684 <_usb_device_interrupt_handler+0x56c>
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
					}
					return;
    2672:	46c0      	nop			; (mov r8, r8)
    2674:	e006      	b.n	2684 <_usb_device_interrupt_handler+0x56c>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
					}
					return;
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	e004      	b.n	2684 <_usb_device_interrupt_handler+0x56c>
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
					}
					return;
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	e002      	b.n	2684 <_usb_device_interrupt_handler+0x56c>
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
							return;
    267e:	46c0      	nop			; (mov r8, r8)
    2680:	e000      	b.n	2684 <_usb_device_interrupt_handler+0x56c>
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
					}
					return;
    2682:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
    2684:	46bd      	mov	sp, r7
    2686:	b004      	add	sp, #16
    2688:	bd80      	pop	{r7, pc}
    268a:	46c0      	nop			; (mov r8, r8)
    268c:	200000a8 	.word	0x200000a8
    2690:	200000b8 	.word	0x200000b8
    2694:	20000da0 	.word	0x20000da0

00002698 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    2698:	b580      	push	{r7, lr}
    269a:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    269c:	4b08      	ldr	r3, [pc, #32]	; (26c0 <USB_Handler+0x28>)
    269e:	681b      	ldr	r3, [r3, #0]
    26a0:	681b      	ldr	r3, [r3, #0]
    26a2:	781b      	ldrb	r3, [r3, #0]
    26a4:	061b      	lsls	r3, r3, #24
    26a6:	0fdb      	lsrs	r3, r3, #31
    26a8:	b2db      	uxtb	r3, r3
    26aa:	2b00      	cmp	r3, #0
    26ac:	d002      	beq.n	26b4 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    26ae:	4b05      	ldr	r3, [pc, #20]	; (26c4 <USB_Handler+0x2c>)
    26b0:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    26b2:	e001      	b.n	26b8 <USB_Handler+0x20>
		/*host mode ISR */
		_usb_host_interrupt_handler();
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    26b4:	4b04      	ldr	r3, [pc, #16]	; (26c8 <USB_Handler+0x30>)
    26b6:	4798      	blx	r3
	}
}
    26b8:	46c0      	nop			; (mov r8, r8)
    26ba:	46bd      	mov	sp, r7
    26bc:	bd80      	pop	{r7, pc}
    26be:	46c0      	nop			; (mov r8, r8)
    26c0:	200000a8 	.word	0x200000a8
    26c4:	00001a9d 	.word	0x00001a9d
    26c8:	00002119 	.word	0x00002119

000026cc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    26cc:	b580      	push	{r7, lr}
    26ce:	b086      	sub	sp, #24
    26d0:	af00      	add	r7, sp, #0
    26d2:	60f8      	str	r0, [r7, #12]
    26d4:	60b9      	str	r1, [r7, #8]
    26d6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    26d8:	2300      	movs	r3, #0
    26da:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    26dc:	68fb      	ldr	r3, [r7, #12]
    26de:	2b00      	cmp	r3, #0
    26e0:	d012      	beq.n	2708 <_read+0x3c>
		return -1;
    26e2:	2301      	movs	r3, #1
    26e4:	425b      	negs	r3, r3
    26e6:	e013      	b.n	2710 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    26e8:	4b0b      	ldr	r3, [pc, #44]	; (2718 <_read+0x4c>)
    26ea:	681a      	ldr	r2, [r3, #0]
    26ec:	4b0b      	ldr	r3, [pc, #44]	; (271c <_read+0x50>)
    26ee:	681b      	ldr	r3, [r3, #0]
    26f0:	68b9      	ldr	r1, [r7, #8]
    26f2:	0018      	movs	r0, r3
    26f4:	4790      	blx	r2
		ptr++;
    26f6:	68bb      	ldr	r3, [r7, #8]
    26f8:	3301      	adds	r3, #1
    26fa:	60bb      	str	r3, [r7, #8]
		nChars++;
    26fc:	697b      	ldr	r3, [r7, #20]
    26fe:	3301      	adds	r3, #1
    2700:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	3b01      	subs	r3, #1
    2706:	607b      	str	r3, [r7, #4]
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	2b00      	cmp	r3, #0
    270c:	dcec      	bgt.n	26e8 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    270e:	697b      	ldr	r3, [r7, #20]
}
    2710:	0018      	movs	r0, r3
    2712:	46bd      	mov	sp, r7
    2714:	b006      	add	sp, #24
    2716:	bd80      	pop	{r7, pc}
    2718:	20000ea0 	.word	0x20000ea0
    271c:	20000ea8 	.word	0x20000ea8

00002720 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2720:	b580      	push	{r7, lr}
    2722:	b086      	sub	sp, #24
    2724:	af00      	add	r7, sp, #0
    2726:	60f8      	str	r0, [r7, #12]
    2728:	60b9      	str	r1, [r7, #8]
    272a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    272c:	2300      	movs	r3, #0
    272e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    2730:	68fb      	ldr	r3, [r7, #12]
    2732:	2b01      	cmp	r3, #1
    2734:	d01d      	beq.n	2772 <_write+0x52>
    2736:	68fb      	ldr	r3, [r7, #12]
    2738:	2b02      	cmp	r3, #2
    273a:	d01a      	beq.n	2772 <_write+0x52>
    273c:	68fb      	ldr	r3, [r7, #12]
    273e:	2b03      	cmp	r3, #3
    2740:	d017      	beq.n	2772 <_write+0x52>
		return -1;
    2742:	2301      	movs	r3, #1
    2744:	425b      	negs	r3, r3
    2746:	e018      	b.n	277a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2748:	4b0e      	ldr	r3, [pc, #56]	; (2784 <_write+0x64>)
    274a:	681a      	ldr	r2, [r3, #0]
    274c:	4b0e      	ldr	r3, [pc, #56]	; (2788 <_write+0x68>)
    274e:	6818      	ldr	r0, [r3, #0]
    2750:	68bb      	ldr	r3, [r7, #8]
    2752:	1c59      	adds	r1, r3, #1
    2754:	60b9      	str	r1, [r7, #8]
    2756:	781b      	ldrb	r3, [r3, #0]
    2758:	0019      	movs	r1, r3
    275a:	4790      	blx	r2
    275c:	1e03      	subs	r3, r0, #0
    275e:	da02      	bge.n	2766 <_write+0x46>
			return -1;
    2760:	2301      	movs	r3, #1
    2762:	425b      	negs	r3, r3
    2764:	e009      	b.n	277a <_write+0x5a>
		}
		++nChars;
    2766:	697b      	ldr	r3, [r7, #20]
    2768:	3301      	adds	r3, #1
    276a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    276c:	687b      	ldr	r3, [r7, #4]
    276e:	3b01      	subs	r3, #1
    2770:	607b      	str	r3, [r7, #4]
    2772:	687b      	ldr	r3, [r7, #4]
    2774:	2b00      	cmp	r3, #0
    2776:	d1e7      	bne.n	2748 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    2778:	697b      	ldr	r3, [r7, #20]
}
    277a:	0018      	movs	r0, r3
    277c:	46bd      	mov	sp, r7
    277e:	b006      	add	sp, #24
    2780:	bd80      	pop	{r7, pc}
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	20000ea4 	.word	0x20000ea4
    2788:	20000ea8 	.word	0x20000ea8

0000278c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    278c:	b580      	push	{r7, lr}
    278e:	b084      	sub	sp, #16
    2790:	af00      	add	r7, sp, #0
    2792:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2794:	687b      	ldr	r3, [r7, #4]
    2796:	681b      	ldr	r3, [r3, #0]
    2798:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    279a:	68fb      	ldr	r3, [r7, #12]
    279c:	7e5b      	ldrb	r3, [r3, #25]
    279e:	b2db      	uxtb	r3, r3
    27a0:	b25b      	sxtb	r3, r3
    27a2:	2b00      	cmp	r3, #0
    27a4:	da01      	bge.n	27aa <adc_is_syncing+0x1e>
		return true;
    27a6:	2301      	movs	r3, #1
    27a8:	e000      	b.n	27ac <adc_is_syncing+0x20>
	}

	return false;
    27aa:	2300      	movs	r3, #0
}
    27ac:	0018      	movs	r0, r3
    27ae:	46bd      	mov	sp, r7
    27b0:	b004      	add	sp, #16
    27b2:	bd80      	pop	{r7, pc}

000027b4 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    27b4:	b580      	push	{r7, lr}
    27b6:	b086      	sub	sp, #24
    27b8:	af00      	add	r7, sp, #0
    27ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    27bc:	687b      	ldr	r3, [r7, #4]
    27be:	681b      	ldr	r3, [r3, #0]
    27c0:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    27c2:	693b      	ldr	r3, [r7, #16]
    27c4:	7e1b      	ldrb	r3, [r3, #24]
    27c6:	b2db      	uxtb	r3, r3
    27c8:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    27ca:	2300      	movs	r3, #0
    27cc:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    27ce:	68fb      	ldr	r3, [r7, #12]
    27d0:	2201      	movs	r2, #1
    27d2:	4013      	ands	r3, r2
    27d4:	d003      	beq.n	27de <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    27d6:	697b      	ldr	r3, [r7, #20]
    27d8:	2201      	movs	r2, #1
    27da:	4313      	orrs	r3, r2
    27dc:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    27de:	68fb      	ldr	r3, [r7, #12]
    27e0:	2204      	movs	r2, #4
    27e2:	4013      	ands	r3, r2
    27e4:	d003      	beq.n	27ee <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    27e6:	697b      	ldr	r3, [r7, #20]
    27e8:	2202      	movs	r2, #2
    27ea:	4313      	orrs	r3, r2
    27ec:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    27ee:	68fb      	ldr	r3, [r7, #12]
    27f0:	2202      	movs	r2, #2
    27f2:	4013      	ands	r3, r2
    27f4:	d003      	beq.n	27fe <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    27f6:	697b      	ldr	r3, [r7, #20]
    27f8:	2204      	movs	r2, #4
    27fa:	4313      	orrs	r3, r2
    27fc:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    27fe:	697b      	ldr	r3, [r7, #20]
}
    2800:	0018      	movs	r0, r3
    2802:	46bd      	mov	sp, r7
    2804:	b006      	add	sp, #24
    2806:	bd80      	pop	{r7, pc}

00002808 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    2808:	b580      	push	{r7, lr}
    280a:	b084      	sub	sp, #16
    280c:	af00      	add	r7, sp, #0
    280e:	6078      	str	r0, [r7, #4]
    2810:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2812:	687b      	ldr	r3, [r7, #4]
    2814:	681b      	ldr	r3, [r3, #0]
    2816:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    2818:	2300      	movs	r3, #0
    281a:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    281c:	683b      	ldr	r3, [r7, #0]
    281e:	2201      	movs	r2, #1
    2820:	4013      	ands	r3, r2
    2822:	d003      	beq.n	282c <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    2824:	68fb      	ldr	r3, [r7, #12]
    2826:	2201      	movs	r2, #1
    2828:	4313      	orrs	r3, r2
    282a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    282c:	683b      	ldr	r3, [r7, #0]
    282e:	2202      	movs	r2, #2
    2830:	4013      	ands	r3, r2
    2832:	d003      	beq.n	283c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    2834:	68fb      	ldr	r3, [r7, #12]
    2836:	2204      	movs	r2, #4
    2838:	4313      	orrs	r3, r2
    283a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    283c:	683b      	ldr	r3, [r7, #0]
    283e:	2204      	movs	r2, #4
    2840:	4013      	ands	r3, r2
    2842:	d003      	beq.n	284c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    2844:	68fb      	ldr	r3, [r7, #12]
    2846:	2202      	movs	r2, #2
    2848:	4313      	orrs	r3, r2
    284a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    284c:	68fb      	ldr	r3, [r7, #12]
    284e:	b2da      	uxtb	r2, r3
    2850:	68bb      	ldr	r3, [r7, #8]
    2852:	761a      	strb	r2, [r3, #24]
}
    2854:	46c0      	nop			; (mov r8, r8)
    2856:	46bd      	mov	sp, r7
    2858:	b004      	add	sp, #16
    285a:	bd80      	pop	{r7, pc}

0000285c <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    285c:	b580      	push	{r7, lr}
    285e:	b084      	sub	sp, #16
    2860:	af00      	add	r7, sp, #0
    2862:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2864:	687b      	ldr	r3, [r7, #4]
    2866:	681b      	ldr	r3, [r3, #0]
    2868:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    286a:	46c0      	nop			; (mov r8, r8)
    286c:	687b      	ldr	r3, [r7, #4]
    286e:	0018      	movs	r0, r3
    2870:	4b0e      	ldr	r3, [pc, #56]	; (28ac <adc_enable+0x50>)
    2872:	4798      	blx	r3
    2874:	1e03      	subs	r3, r0, #0
    2876:	d1f9      	bne.n	286c <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2878:	68fb      	ldr	r3, [r7, #12]
    287a:	220f      	movs	r2, #15
    287c:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    287e:	68fb      	ldr	r3, [r7, #12]
    2880:	220f      	movs	r2, #15
    2882:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2884:	68fb      	ldr	r3, [r7, #12]
    2886:	781b      	ldrb	r3, [r3, #0]
    2888:	b2db      	uxtb	r3, r3
    288a:	2202      	movs	r2, #2
    288c:	4313      	orrs	r3, r2
    288e:	b2da      	uxtb	r2, r3
    2890:	68fb      	ldr	r3, [r7, #12]
    2892:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    2894:	46c0      	nop			; (mov r8, r8)
    2896:	687b      	ldr	r3, [r7, #4]
    2898:	0018      	movs	r0, r3
    289a:	4b04      	ldr	r3, [pc, #16]	; (28ac <adc_enable+0x50>)
    289c:	4798      	blx	r3
    289e:	1e03      	subs	r3, r0, #0
    28a0:	d1f9      	bne.n	2896 <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    28a2:	2300      	movs	r3, #0
}
    28a4:	0018      	movs	r0, r3
    28a6:	46bd      	mov	sp, r7
    28a8:	b004      	add	sp, #16
    28aa:	bd80      	pop	{r7, pc}
    28ac:	0000278d 	.word	0x0000278d

000028b0 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    28b0:	b580      	push	{r7, lr}
    28b2:	b084      	sub	sp, #16
    28b4:	af00      	add	r7, sp, #0
    28b6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    28b8:	687b      	ldr	r3, [r7, #4]
    28ba:	681b      	ldr	r3, [r3, #0]
    28bc:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    28be:	46c0      	nop			; (mov r8, r8)
    28c0:	687b      	ldr	r3, [r7, #4]
    28c2:	0018      	movs	r0, r3
    28c4:	4b0b      	ldr	r3, [pc, #44]	; (28f4 <adc_start_conversion+0x44>)
    28c6:	4798      	blx	r3
    28c8:	1e03      	subs	r3, r0, #0
    28ca:	d1f9      	bne.n	28c0 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    28cc:	68fb      	ldr	r3, [r7, #12]
    28ce:	7b1b      	ldrb	r3, [r3, #12]
    28d0:	b2db      	uxtb	r3, r3
    28d2:	2202      	movs	r2, #2
    28d4:	4313      	orrs	r3, r2
    28d6:	b2da      	uxtb	r2, r3
    28d8:	68fb      	ldr	r3, [r7, #12]
    28da:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    28dc:	46c0      	nop			; (mov r8, r8)
    28de:	687b      	ldr	r3, [r7, #4]
    28e0:	0018      	movs	r0, r3
    28e2:	4b04      	ldr	r3, [pc, #16]	; (28f4 <adc_start_conversion+0x44>)
    28e4:	4798      	blx	r3
    28e6:	1e03      	subs	r3, r0, #0
    28e8:	d1f9      	bne.n	28de <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    28ea:	46c0      	nop			; (mov r8, r8)
    28ec:	46bd      	mov	sp, r7
    28ee:	b004      	add	sp, #16
    28f0:	bd80      	pop	{r7, pc}
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	0000278d 	.word	0x0000278d

000028f8 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    28f8:	b580      	push	{r7, lr}
    28fa:	b084      	sub	sp, #16
    28fc:	af00      	add	r7, sp, #0
    28fe:	6078      	str	r0, [r7, #4]
    2900:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2902:	687b      	ldr	r3, [r7, #4]
    2904:	0018      	movs	r0, r3
    2906:	4b18      	ldr	r3, [pc, #96]	; (2968 <adc_read+0x70>)
    2908:	4798      	blx	r3
    290a:	0002      	movs	r2, r0
    290c:	2301      	movs	r3, #1
    290e:	4013      	ands	r3, r2
    2910:	d101      	bne.n	2916 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    2912:	2305      	movs	r3, #5
    2914:	e023      	b.n	295e <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	681b      	ldr	r3, [r3, #0]
    291a:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    291c:	46c0      	nop			; (mov r8, r8)
    291e:	687b      	ldr	r3, [r7, #4]
    2920:	0018      	movs	r0, r3
    2922:	4b12      	ldr	r3, [pc, #72]	; (296c <adc_read+0x74>)
    2924:	4798      	blx	r3
    2926:	1e03      	subs	r3, r0, #0
    2928:	d1f9      	bne.n	291e <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    292a:	68fb      	ldr	r3, [r7, #12]
    292c:	8b5b      	ldrh	r3, [r3, #26]
    292e:	b29a      	uxth	r2, r3
    2930:	683b      	ldr	r3, [r7, #0]
    2932:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    2934:	687b      	ldr	r3, [r7, #4]
    2936:	2101      	movs	r1, #1
    2938:	0018      	movs	r0, r3
    293a:	4b0d      	ldr	r3, [pc, #52]	; (2970 <adc_read+0x78>)
    293c:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    293e:	687b      	ldr	r3, [r7, #4]
    2940:	0018      	movs	r0, r3
    2942:	4b09      	ldr	r3, [pc, #36]	; (2968 <adc_read+0x70>)
    2944:	4798      	blx	r3
    2946:	0002      	movs	r2, r0
    2948:	2304      	movs	r3, #4
    294a:	4013      	ands	r3, r2
    294c:	d006      	beq.n	295c <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    294e:	687b      	ldr	r3, [r7, #4]
    2950:	2104      	movs	r1, #4
    2952:	0018      	movs	r0, r3
    2954:	4b06      	ldr	r3, [pc, #24]	; (2970 <adc_read+0x78>)
    2956:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    2958:	231e      	movs	r3, #30
    295a:	e000      	b.n	295e <adc_read+0x66>
	}

	return STATUS_OK;
    295c:	2300      	movs	r3, #0
}
    295e:	0018      	movs	r0, r3
    2960:	46bd      	mov	sp, r7
    2962:	b004      	add	sp, #16
    2964:	bd80      	pop	{r7, pc}
    2966:	46c0      	nop			; (mov r8, r8)
    2968:	000027b5 	.word	0x000027b5
    296c:	0000278d 	.word	0x0000278d
    2970:	00002809 	.word	0x00002809

00002974 <configure_adc_averaging>:
struct adc_module adc_instance;


static uint8_t adc_read_buffer[2];
void configure_adc_averaging(void)
{
    2974:	b580      	push	{r7, lr}
    2976:	b08c      	sub	sp, #48	; 0x30
    2978:	af00      	add	r7, sp, #0
	
struct adc_config conf_adc;

adc_get_config_defaults(&conf_adc);
    297a:	003b      	movs	r3, r7
    297c:	0018      	movs	r0, r3
    297e:	4b10      	ldr	r3, [pc, #64]	; (29c0 <configure_adc_averaging+0x4c>)
    2980:	4798      	blx	r3

conf_adc.clock_source = GCLK_GENERATOR_1;
    2982:	003b      	movs	r3, r7
    2984:	2201      	movs	r2, #1
    2986:	701a      	strb	r2, [r3, #0]
conf_adc.reference = ADC_REFERENCE_INTVCC1;
    2988:	003b      	movs	r3, r7
    298a:	2202      	movs	r2, #2
    298c:	705a      	strb	r2, [r3, #1]
//conf_adc.clock_prescaler = ADC_CTRLB_PRESCALER_DIV512;
conf_adc.positive_input = ADC_POSITIVE_INPUT_PIN6;
    298e:	003b      	movs	r3, r7
    2990:	2206      	movs	r2, #6
    2992:	731a      	strb	r2, [r3, #12]
conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    2994:	003b      	movs	r3, r7
    2996:	22c0      	movs	r2, #192	; 0xc0
    2998:	0152      	lsls	r2, r2, #5
    299a:	81da      	strh	r2, [r3, #14]
conf_adc.resolution = ADC_RESOLUTION_12BIT;
    299c:	003b      	movs	r3, r7
    299e:	2200      	movs	r2, #0
    29a0:	711a      	strb	r2, [r3, #4]
//conf_adc.accumulate_samples = ADC_ACCUMULATE_SAMPLES_128;
//conf_adc.divide_result = ADC_DIVIDE_RESULT_128;
adc_init(&adc_instance, ADC, &conf_adc);
    29a2:	003a      	movs	r2, r7
    29a4:	4907      	ldr	r1, [pc, #28]	; (29c4 <configure_adc_averaging+0x50>)
    29a6:	4b08      	ldr	r3, [pc, #32]	; (29c8 <configure_adc_averaging+0x54>)
    29a8:	0018      	movs	r0, r3
    29aa:	4b08      	ldr	r3, [pc, #32]	; (29cc <configure_adc_averaging+0x58>)
    29ac:	4798      	blx	r3
adc_enable(&adc_instance);    
    29ae:	4b06      	ldr	r3, [pc, #24]	; (29c8 <configure_adc_averaging+0x54>)
    29b0:	0018      	movs	r0, r3
    29b2:	4b07      	ldr	r3, [pc, #28]	; (29d0 <configure_adc_averaging+0x5c>)
    29b4:	4798      	blx	r3
}
    29b6:	46c0      	nop			; (mov r8, r8)
    29b8:	46bd      	mov	sp, r7
    29ba:	b00c      	add	sp, #48	; 0x30
    29bc:	bd80      	pop	{r7, pc}
    29be:	46c0      	nop			; (mov r8, r8)
    29c0:	00000219 	.word	0x00000219
    29c4:	42004000 	.word	0x42004000
    29c8:	20000eac 	.word	0x20000eac
    29cc:	00000869 	.word	0x00000869
    29d0:	0000285d 	.word	0x0000285d

000029d4 <moist_adc_read>:
while ( adc_read(&adc_instance,&result) == STATUS_BUSY);

return result;
}

uint16_t moist_adc_read(void){
    29d4:	b590      	push	{r4, r7, lr}
    29d6:	b083      	sub	sp, #12
    29d8:	af00      	add	r7, sp, #0
           // enable ADC
adc_start_conversion(&adc_instance);
    29da:	4b15      	ldr	r3, [pc, #84]	; (2a30 <moist_adc_read+0x5c>)
    29dc:	0018      	movs	r0, r3
    29de:	4b15      	ldr	r3, [pc, #84]	; (2a34 <moist_adc_read+0x60>)
    29e0:	4798      	blx	r3
uint16_t result;
uint16_t raw;
do {

}
while ( adc_read(&adc_instance,&raw) == STATUS_BUSY);
    29e2:	1d3a      	adds	r2, r7, #4
    29e4:	4b12      	ldr	r3, [pc, #72]	; (2a30 <moist_adc_read+0x5c>)
    29e6:	0011      	movs	r1, r2
    29e8:	0018      	movs	r0, r3
    29ea:	4b13      	ldr	r3, [pc, #76]	; (2a38 <moist_adc_read+0x64>)
    29ec:	4798      	blx	r3
    29ee:	1e03      	subs	r3, r0, #0
    29f0:	2b05      	cmp	r3, #5
    29f2:	d0f6      	beq.n	29e2 <moist_adc_read+0xe>
result = ((float)raw * ((float) ADC_REFERENCE_INTVCC1_VALUE)/(float) ADC_12BIT_FULL_SCALE_VALUE);
    29f4:	1d3b      	adds	r3, r7, #4
    29f6:	881a      	ldrh	r2, [r3, #0]
    29f8:	4b10      	ldr	r3, [pc, #64]	; (2a3c <moist_adc_read+0x68>)
    29fa:	0010      	movs	r0, r2
    29fc:	4798      	blx	r3
    29fe:	1c02      	adds	r2, r0, #0
    2a00:	4b0f      	ldr	r3, [pc, #60]	; (2a40 <moist_adc_read+0x6c>)
    2a02:	4910      	ldr	r1, [pc, #64]	; (2a44 <moist_adc_read+0x70>)
    2a04:	1c10      	adds	r0, r2, #0
    2a06:	4798      	blx	r3
    2a08:	1c03      	adds	r3, r0, #0
    2a0a:	1c1a      	adds	r2, r3, #0
    2a0c:	4b0e      	ldr	r3, [pc, #56]	; (2a48 <moist_adc_read+0x74>)
    2a0e:	490f      	ldr	r1, [pc, #60]	; (2a4c <moist_adc_read+0x78>)
    2a10:	1c10      	adds	r0, r2, #0
    2a12:	4798      	blx	r3
    2a14:	1c03      	adds	r3, r0, #0
    2a16:	1c1a      	adds	r2, r3, #0
    2a18:	1dbc      	adds	r4, r7, #6
    2a1a:	4b0d      	ldr	r3, [pc, #52]	; (2a50 <moist_adc_read+0x7c>)
    2a1c:	1c10      	adds	r0, r2, #0
    2a1e:	4798      	blx	r3
    2a20:	0003      	movs	r3, r0
    2a22:	8023      	strh	r3, [r4, #0]
return result;
    2a24:	1dbb      	adds	r3, r7, #6
    2a26:	881b      	ldrh	r3, [r3, #0]
}
    2a28:	0018      	movs	r0, r3
    2a2a:	46bd      	mov	sp, r7
    2a2c:	b003      	add	sp, #12
    2a2e:	bd90      	pop	{r4, r7, pc}
    2a30:	20000eac 	.word	0x20000eac
    2a34:	000028b1 	.word	0x000028b1
    2a38:	000028f9 	.word	0x000028f9
    2a3c:	0000cfe9 	.word	0x0000cfe9
    2a40:	0000ca71 	.word	0x0000ca71
    2a44:	454e4000 	.word	0x454e4000
    2a48:	0000c6dd 	.word	0x0000c6dd
    2a4c:	457ff000 	.word	0x457ff000
    2a50:	0000c3c1 	.word	0x0000c3c1

00002a54 <HTU21D_reset>:
 //*/

/**
 * Sends a 'reset' request to the HTU21DF, followed by a 15ms delay.
 */
void HTU21D_reset(void) {
    2a54:	b580      	push	{r7, lr}
    2a56:	af00      	add	r7, sp, #0
  i2c_write(HTU21DF_I2CADDR,HTU21DF_RESET,1);
    2a58:	2201      	movs	r2, #1
    2a5a:	21fe      	movs	r1, #254	; 0xfe
    2a5c:	2040      	movs	r0, #64	; 0x40
    2a5e:	4b04      	ldr	r3, [pc, #16]	; (2a70 <HTU21D_reset+0x1c>)
    2a60:	4798      	blx	r3
  delay_ms(15);
    2a62:	200f      	movs	r0, #15
    2a64:	4b03      	ldr	r3, [pc, #12]	; (2a74 <HTU21D_reset+0x20>)
    2a66:	4798      	blx	r3
}
    2a68:	46c0      	nop			; (mov r8, r8)
    2a6a:	46bd      	mov	sp, r7
    2a6c:	bd80      	pop	{r7, pc}
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	00002e1d 	.word	0x00002e1d
    2a74:	0000addd 	.word	0x0000addd

00002a78 <HTU21D_Init>:


int8_t HTU21D_Init(void) {
    2a78:	b590      	push	{r4, r7, lr}
    2a7a:	b083      	sub	sp, #12
    2a7c:	af00      	add	r7, sp, #0
 
  HTU21D_reset();
    2a7e:	4b0f      	ldr	r3, [pc, #60]	; (2abc <HTU21D_Init+0x44>)
    2a80:	4798      	blx	r3
  i2c_write(HTU21DF_I2CADDR,HTU21DF_READREG,1);
    2a82:	2201      	movs	r2, #1
    2a84:	21e7      	movs	r1, #231	; 0xe7
    2a86:	2040      	movs	r0, #64	; 0x40
    2a88:	4b0d      	ldr	r3, [pc, #52]	; (2ac0 <HTU21D_Init+0x48>)
    2a8a:	4798      	blx	r3
  delay_ms(10);
    2a8c:	200a      	movs	r0, #10
    2a8e:	4b0d      	ldr	r3, [pc, #52]	; (2ac4 <HTU21D_Init+0x4c>)
    2a90:	4798      	blx	r3
  uint8_t count =i2c_read(HTU21DF_I2CADDR,i2c_read_buffer,1);
    2a92:	1dfc      	adds	r4, r7, #7
    2a94:	4b0c      	ldr	r3, [pc, #48]	; (2ac8 <HTU21D_Init+0x50>)
    2a96:	2201      	movs	r2, #1
    2a98:	0019      	movs	r1, r3
    2a9a:	2040      	movs	r0, #64	; 0x40
    2a9c:	4b0b      	ldr	r3, [pc, #44]	; (2acc <HTU21D_Init+0x54>)
    2a9e:	4798      	blx	r3
    2aa0:	0003      	movs	r3, r0
    2aa2:	7023      	strb	r3, [r4, #0]
  if (i2c_read_buffer[0] == 0x02) return true; else return false;
    2aa4:	4b08      	ldr	r3, [pc, #32]	; (2ac8 <HTU21D_Init+0x50>)
    2aa6:	781b      	ldrb	r3, [r3, #0]
    2aa8:	2b02      	cmp	r3, #2
    2aaa:	d101      	bne.n	2ab0 <HTU21D_Init+0x38>
    2aac:	2301      	movs	r3, #1
    2aae:	e000      	b.n	2ab2 <HTU21D_Init+0x3a>
    2ab0:	2300      	movs	r3, #0
   // after reset should be 0x2
}
    2ab2:	0018      	movs	r0, r3
    2ab4:	46bd      	mov	sp, r7
    2ab6:	b003      	add	sp, #12
    2ab8:	bd90      	pop	{r4, r7, pc}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	00002a55 	.word	0x00002a55
    2ac0:	00002e1d 	.word	0x00002e1d
    2ac4:	0000addd 	.word	0x0000addd
    2ac8:	200000c4 	.word	0x200000c4
    2acc:	00002e99 	.word	0x00002e99

00002ad0 <HTU21D_readTemperature>:
 * Performs a single temperature conversion in degrees Celsius.
 *
 * @return a single-precision (32-bit) float value indicating the measured
 *         temperature in degrees Celsius.
 */
float HTU21D_readTemperature(void) {
    2ad0:	b590      	push	{r4, r7, lr}
    2ad2:	b085      	sub	sp, #20
    2ad4:	af00      	add	r7, sp, #0
  // OK lets ready!
  i2c_write(HTU21DF_I2CADDR,HTU21DF_READTEMP,1);
    2ad6:	2201      	movs	r2, #1
    2ad8:	21e3      	movs	r1, #227	; 0xe3
    2ada:	2040      	movs	r0, #64	; 0x40
    2adc:	4b2a      	ldr	r3, [pc, #168]	; (2b88 <HTU21D_readTemperature+0xb8>)
    2ade:	4798      	blx	r3
  delay_ms(50); // add delay between request and actual read!
    2ae0:	2032      	movs	r0, #50	; 0x32
    2ae2:	4b2a      	ldr	r3, [pc, #168]	; (2b8c <HTU21D_readTemperature+0xbc>)
    2ae4:	4798      	blx	r3

  uint8_t count = i2c_read(HTU21DF_I2CADDR,i2c_read_buffer,3);
    2ae6:	230f      	movs	r3, #15
    2ae8:	18fc      	adds	r4, r7, r3
    2aea:	4b29      	ldr	r3, [pc, #164]	; (2b90 <HTU21D_readTemperature+0xc0>)
    2aec:	2203      	movs	r2, #3
    2aee:	0019      	movs	r1, r3
    2af0:	2040      	movs	r0, #64	; 0x40
    2af2:	4b28      	ldr	r3, [pc, #160]	; (2b94 <HTU21D_readTemperature+0xc4>)
    2af4:	4798      	blx	r3
    2af6:	0003      	movs	r3, r0
    2af8:	7023      	strb	r3, [r4, #0]

  /* Make sure we got 3 bytes back. */
  if (count == 0) {
    2afa:	230f      	movs	r3, #15
    2afc:	18fb      	adds	r3, r7, r3
    2afe:	781b      	ldrb	r3, [r3, #0]
    2b00:	2b00      	cmp	r3, #0
    2b02:	d101      	bne.n	2b08 <HTU21D_readTemperature+0x38>
    return 0.0f;
    2b04:	2300      	movs	r3, #0
    2b06:	e03b      	b.n	2b80 <HTU21D_readTemperature+0xb0>
  }

  ///* Read 16 bits of data, dropping the last two status bits. */
  uint16_t t = i2c_read_buffer[0];
    2b08:	4b21      	ldr	r3, [pc, #132]	; (2b90 <HTU21D_readTemperature+0xc0>)
    2b0a:	781a      	ldrb	r2, [r3, #0]
    2b0c:	230c      	movs	r3, #12
    2b0e:	18fb      	adds	r3, r7, r3
    2b10:	801a      	strh	r2, [r3, #0]
  t <<= 8;
    2b12:	230c      	movs	r3, #12
    2b14:	18fb      	adds	r3, r7, r3
    2b16:	220c      	movs	r2, #12
    2b18:	18ba      	adds	r2, r7, r2
    2b1a:	8812      	ldrh	r2, [r2, #0]
    2b1c:	0212      	lsls	r2, r2, #8
    2b1e:	801a      	strh	r2, [r3, #0]
  t |= i2c_read_buffer[1] & 0b11111100;
    2b20:	4b1b      	ldr	r3, [pc, #108]	; (2b90 <HTU21D_readTemperature+0xc0>)
    2b22:	785b      	ldrb	r3, [r3, #1]
    2b24:	b21b      	sxth	r3, r3
    2b26:	22fc      	movs	r2, #252	; 0xfc
    2b28:	4013      	ands	r3, r2
    2b2a:	b21a      	sxth	r2, r3
    2b2c:	230c      	movs	r3, #12
    2b2e:	18fb      	adds	r3, r7, r3
    2b30:	2100      	movs	r1, #0
    2b32:	5e5b      	ldrsh	r3, [r3, r1]
    2b34:	4313      	orrs	r3, r2
    2b36:	b21a      	sxth	r2, r3
    2b38:	230c      	movs	r3, #12
    2b3a:	18fb      	adds	r3, r7, r3
    2b3c:	801a      	strh	r2, [r3, #0]
//
  uint8_t crc = i2c_read_buffer[2];
    2b3e:	230b      	movs	r3, #11
    2b40:	18fb      	adds	r3, r7, r3
    2b42:	4a13      	ldr	r2, [pc, #76]	; (2b90 <HTU21D_readTemperature+0xc0>)
    2b44:	7892      	ldrb	r2, [r2, #2]
    2b46:	701a      	strb	r2, [r3, #0]
  //(void)crc;
  //int t=0;
  float temp = t;
    2b48:	230c      	movs	r3, #12
    2b4a:	18fb      	adds	r3, r7, r3
    2b4c:	881a      	ldrh	r2, [r3, #0]
    2b4e:	4b12      	ldr	r3, [pc, #72]	; (2b98 <HTU21D_readTemperature+0xc8>)
    2b50:	0010      	movs	r0, r2
    2b52:	4798      	blx	r3
    2b54:	1c03      	adds	r3, r0, #0
    2b56:	607b      	str	r3, [r7, #4]
  temp *= 175.72f;
    2b58:	4b10      	ldr	r3, [pc, #64]	; (2b9c <HTU21D_readTemperature+0xcc>)
    2b5a:	4911      	ldr	r1, [pc, #68]	; (2ba0 <HTU21D_readTemperature+0xd0>)
    2b5c:	6878      	ldr	r0, [r7, #4]
    2b5e:	4798      	blx	r3
    2b60:	1c03      	adds	r3, r0, #0
    2b62:	607b      	str	r3, [r7, #4]
  temp /= 65536.0f;
    2b64:	4b0f      	ldr	r3, [pc, #60]	; (2ba4 <HTU21D_readTemperature+0xd4>)
    2b66:	218f      	movs	r1, #143	; 0x8f
    2b68:	05c9      	lsls	r1, r1, #23
    2b6a:	6878      	ldr	r0, [r7, #4]
    2b6c:	4798      	blx	r3
    2b6e:	1c03      	adds	r3, r0, #0
    2b70:	607b      	str	r3, [r7, #4]
  temp -= 46.85f;
    2b72:	4b0d      	ldr	r3, [pc, #52]	; (2ba8 <HTU21D_readTemperature+0xd8>)
    2b74:	490d      	ldr	r1, [pc, #52]	; (2bac <HTU21D_readTemperature+0xdc>)
    2b76:	6878      	ldr	r0, [r7, #4]
    2b78:	4798      	blx	r3
    2b7a:	1c03      	adds	r3, r0, #0
    2b7c:	607b      	str	r3, [r7, #4]

  /* Track the value internally in case we need to access it later. */
  //_last_temp = temp;

  return temp;
    2b7e:	687b      	ldr	r3, [r7, #4]
}
    2b80:	1c18      	adds	r0, r3, #0
    2b82:	46bd      	mov	sp, r7
    2b84:	b005      	add	sp, #20
    2b86:	bd90      	pop	{r4, r7, pc}
    2b88:	00002e1d 	.word	0x00002e1d
    2b8c:	0000addd 	.word	0x0000addd
    2b90:	200000c4 	.word	0x200000c4
    2b94:	00002e99 	.word	0x00002e99
    2b98:	0000cfe9 	.word	0x0000cfe9
    2b9c:	0000ca71 	.word	0x0000ca71
    2ba0:	432fb852 	.word	0x432fb852
    2ba4:	0000c6dd 	.word	0x0000c6dd
    2ba8:	0000cc99 	.word	0x0000cc99
    2bac:	423b6666 	.word	0x423b6666

00002bb0 <HTU21D_readHumidity>:
 //* Performs a single relative humidity conversion.
 //*
 //* @return A single-precision (32-bit) float value indicating the relative
 //*         humidity in percent (0..100.0%).
 //*/
float HTU21D_readHumidity(void) {
    2bb0:	b590      	push	{r4, r7, lr}
    2bb2:	b085      	sub	sp, #20
    2bb4:	af00      	add	r7, sp, #0
  ///* Prepare the I2C request. */
  i2c_write(HTU21DF_I2CADDR,HTU21DF_READHUM,1);
    2bb6:	2201      	movs	r2, #1
    2bb8:	21e5      	movs	r1, #229	; 0xe5
    2bba:	2040      	movs	r0, #64	; 0x40
    2bbc:	4b2a      	ldr	r3, [pc, #168]	; (2c68 <HTU21D_readHumidity+0xb8>)
    2bbe:	4798      	blx	r3
  ///* Wait a bit for the conversion to complete. */
  delay_ms(50);
    2bc0:	2032      	movs	r0, #50	; 0x32
    2bc2:	4b2a      	ldr	r3, [pc, #168]	; (2c6c <HTU21D_readHumidity+0xbc>)
    2bc4:	4798      	blx	r3

  ///* Read the conversion results. */
  uint8_t count = i2c_read(HTU21DF_I2CADDR,i2c_read_buffer,3);
    2bc6:	230f      	movs	r3, #15
    2bc8:	18fc      	adds	r4, r7, r3
    2bca:	4b29      	ldr	r3, [pc, #164]	; (2c70 <HTU21D_readHumidity+0xc0>)
    2bcc:	2203      	movs	r2, #3
    2bce:	0019      	movs	r1, r3
    2bd0:	2040      	movs	r0, #64	; 0x40
    2bd2:	4b28      	ldr	r3, [pc, #160]	; (2c74 <HTU21D_readHumidity+0xc4>)
    2bd4:	4798      	blx	r3
    2bd6:	0003      	movs	r3, r0
    2bd8:	7023      	strb	r3, [r4, #0]

  ///* Make sure we got 3 bytes back. */
  if (count == 0) {
    2bda:	230f      	movs	r3, #15
    2bdc:	18fb      	adds	r3, r7, r3
    2bde:	781b      	ldrb	r3, [r3, #0]
    2be0:	2b00      	cmp	r3, #0
    2be2:	d101      	bne.n	2be8 <HTU21D_readHumidity+0x38>
    return 0.0f;
    2be4:	2300      	movs	r3, #0
    2be6:	e03b      	b.n	2c60 <HTU21D_readHumidity+0xb0>
  }
//
  ///* Read 16 bits of data, dropping the last two status bits. */
  ///* Read 16 bits of data, dropping the last two status bits. */
  uint16_t h = i2c_read_buffer[0];
    2be8:	4b21      	ldr	r3, [pc, #132]	; (2c70 <HTU21D_readHumidity+0xc0>)
    2bea:	781a      	ldrb	r2, [r3, #0]
    2bec:	230c      	movs	r3, #12
    2bee:	18fb      	adds	r3, r7, r3
    2bf0:	801a      	strh	r2, [r3, #0]
  h <<= 8;
    2bf2:	230c      	movs	r3, #12
    2bf4:	18fb      	adds	r3, r7, r3
    2bf6:	220c      	movs	r2, #12
    2bf8:	18ba      	adds	r2, r7, r2
    2bfa:	8812      	ldrh	r2, [r2, #0]
    2bfc:	0212      	lsls	r2, r2, #8
    2bfe:	801a      	strh	r2, [r3, #0]
  h |= i2c_read_buffer[1] & 0b11111100;
    2c00:	4b1b      	ldr	r3, [pc, #108]	; (2c70 <HTU21D_readHumidity+0xc0>)
    2c02:	785b      	ldrb	r3, [r3, #1]
    2c04:	b21b      	sxth	r3, r3
    2c06:	22fc      	movs	r2, #252	; 0xfc
    2c08:	4013      	ands	r3, r2
    2c0a:	b21a      	sxth	r2, r3
    2c0c:	230c      	movs	r3, #12
    2c0e:	18fb      	adds	r3, r7, r3
    2c10:	2100      	movs	r1, #0
    2c12:	5e5b      	ldrsh	r3, [r3, r1]
    2c14:	4313      	orrs	r3, r2
    2c16:	b21a      	sxth	r2, r3
    2c18:	230c      	movs	r3, #12
    2c1a:	18fb      	adds	r3, r7, r3
    2c1c:	801a      	strh	r2, [r3, #0]
//
  uint8_t crc =i2c_read_buffer[2];
    2c1e:	230b      	movs	r3, #11
    2c20:	18fb      	adds	r3, r7, r3
    2c22:	4a13      	ldr	r2, [pc, #76]	; (2c70 <HTU21D_readHumidity+0xc0>)
    2c24:	7892      	ldrb	r2, [r2, #2]
    2c26:	701a      	strb	r2, [r3, #0]
  //(void)crc;
//
  float hum = h;
    2c28:	230c      	movs	r3, #12
    2c2a:	18fb      	adds	r3, r7, r3
    2c2c:	881a      	ldrh	r2, [r3, #0]
    2c2e:	4b12      	ldr	r3, [pc, #72]	; (2c78 <HTU21D_readHumidity+0xc8>)
    2c30:	0010      	movs	r0, r2
    2c32:	4798      	blx	r3
    2c34:	1c03      	adds	r3, r0, #0
    2c36:	607b      	str	r3, [r7, #4]
  hum *= 125.0f;
    2c38:	4b10      	ldr	r3, [pc, #64]	; (2c7c <HTU21D_readHumidity+0xcc>)
    2c3a:	4911      	ldr	r1, [pc, #68]	; (2c80 <HTU21D_readHumidity+0xd0>)
    2c3c:	6878      	ldr	r0, [r7, #4]
    2c3e:	4798      	blx	r3
    2c40:	1c03      	adds	r3, r0, #0
    2c42:	607b      	str	r3, [r7, #4]
  hum /= 65536.0f;
    2c44:	4b0f      	ldr	r3, [pc, #60]	; (2c84 <HTU21D_readHumidity+0xd4>)
    2c46:	218f      	movs	r1, #143	; 0x8f
    2c48:	05c9      	lsls	r1, r1, #23
    2c4a:	6878      	ldr	r0, [r7, #4]
    2c4c:	4798      	blx	r3
    2c4e:	1c03      	adds	r3, r0, #0
    2c50:	607b      	str	r3, [r7, #4]
  hum -= 6.0f;
    2c52:	4b0d      	ldr	r3, [pc, #52]	; (2c88 <HTU21D_readHumidity+0xd8>)
    2c54:	490d      	ldr	r1, [pc, #52]	; (2c8c <HTU21D_readHumidity+0xdc>)
    2c56:	6878      	ldr	r0, [r7, #4]
    2c58:	4798      	blx	r3
    2c5a:	1c03      	adds	r3, r0, #0
    2c5c:	607b      	str	r3, [r7, #4]
//
  ///* Track the value internally in case we need to access it later. */
  //_last_humidity = hum;
//
 return hum;
    2c5e:	687b      	ldr	r3, [r7, #4]
}
    2c60:	1c18      	adds	r0, r3, #0
    2c62:	46bd      	mov	sp, r7
    2c64:	b005      	add	sp, #20
    2c66:	bd90      	pop	{r4, r7, pc}
    2c68:	00002e1d 	.word	0x00002e1d
    2c6c:	0000addd 	.word	0x0000addd
    2c70:	200000c4 	.word	0x200000c4
    2c74:	00002e99 	.word	0x00002e99
    2c78:	0000cfe9 	.word	0x0000cfe9
    2c7c:	0000ca71 	.word	0x0000ca71
    2c80:	42fa0000 	.word	0x42fa0000
    2c84:	0000c6dd 	.word	0x0000c6dd
    2c88:	0000cc99 	.word	0x0000cc99
    2c8c:	40c00000 	.word	0x40c00000

00002c90 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    2c90:	b580      	push	{r7, lr}
    2c92:	b084      	sub	sp, #16
    2c94:	af00      	add	r7, sp, #0
    2c96:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	681b      	ldr	r3, [r3, #0]
    2c9c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2c9e:	68fb      	ldr	r3, [r7, #12]
    2ca0:	69db      	ldr	r3, [r3, #28]
    2ca2:	2207      	movs	r2, #7
    2ca4:	4013      	ands	r3, r2
    2ca6:	1e5a      	subs	r2, r3, #1
    2ca8:	4193      	sbcs	r3, r2
    2caa:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    2cac:	0018      	movs	r0, r3
    2cae:	46bd      	mov	sp, r7
    2cb0:	b004      	add	sp, #16
    2cb2:	bd80      	pop	{r7, pc}

00002cb4 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    2cb4:	b580      	push	{r7, lr}
    2cb6:	b082      	sub	sp, #8
    2cb8:	af00      	add	r7, sp, #0
    2cba:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    2cbc:	46c0      	nop			; (mov r8, r8)
    2cbe:	687b      	ldr	r3, [r7, #4]
    2cc0:	0018      	movs	r0, r3
    2cc2:	4b04      	ldr	r3, [pc, #16]	; (2cd4 <_i2c_master_wait_for_sync+0x20>)
    2cc4:	4798      	blx	r3
    2cc6:	1e03      	subs	r3, r0, #0
    2cc8:	d1f9      	bne.n	2cbe <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	46bd      	mov	sp, r7
    2cce:	b002      	add	sp, #8
    2cd0:	bd80      	pop	{r7, pc}
    2cd2:	46c0      	nop			; (mov r8, r8)
    2cd4:	00002c91 	.word	0x00002c91

00002cd8 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    2cd8:	b580      	push	{r7, lr}
    2cda:	b082      	sub	sp, #8
    2cdc:	af00      	add	r7, sp, #0
    2cde:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2ce0:	687b      	ldr	r3, [r7, #4]
    2ce2:	2264      	movs	r2, #100	; 0x64
    2ce4:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	4a1b      	ldr	r2, [pc, #108]	; (2d58 <i2c_master_get_config_defaults+0x80>)
    2cea:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	2200      	movs	r2, #0
    2cf0:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2cf2:	687b      	ldr	r3, [r7, #4]
    2cf4:	2200      	movs	r2, #0
    2cf6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    2cf8:	687b      	ldr	r3, [r7, #4]
    2cfa:	2200      	movs	r2, #0
    2cfc:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	2280      	movs	r2, #128	; 0x80
    2d02:	0392      	lsls	r2, r2, #14
    2d04:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    2d06:	687b      	ldr	r3, [r7, #4]
    2d08:	2201      	movs	r2, #1
    2d0a:	4252      	negs	r2, r2
    2d0c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	2201      	movs	r2, #1
    2d12:	4252      	negs	r2, r2
    2d14:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	2200      	movs	r2, #0
    2d1a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2d1c:	687b      	ldr	r3, [r7, #4]
    2d1e:	2200      	movs	r2, #0
    2d20:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	2224      	movs	r2, #36	; 0x24
    2d26:	2100      	movs	r1, #0
    2d28:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2d2a:	687b      	ldr	r3, [r7, #4]
    2d2c:	2200      	movs	r2, #0
    2d2e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	222c      	movs	r2, #44	; 0x2c
    2d34:	2100      	movs	r1, #0
    2d36:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2d38:	687b      	ldr	r3, [r7, #4]
    2d3a:	222d      	movs	r2, #45	; 0x2d
    2d3c:	2100      	movs	r1, #0
    2d3e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    2d40:	687b      	ldr	r3, [r7, #4]
    2d42:	222e      	movs	r2, #46	; 0x2e
    2d44:	2100      	movs	r1, #0
    2d46:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2d48:	687b      	ldr	r3, [r7, #4]
    2d4a:	22d7      	movs	r2, #215	; 0xd7
    2d4c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    2d4e:	46c0      	nop			; (mov r8, r8)
    2d50:	46bd      	mov	sp, r7
    2d52:	b002      	add	sp, #8
    2d54:	bd80      	pop	{r7, pc}
    2d56:	46c0      	nop			; (mov r8, r8)
    2d58:	00000d48 	.word	0x00000d48

00002d5c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    2d5c:	b580      	push	{r7, lr}
    2d5e:	b084      	sub	sp, #16
    2d60:	af00      	add	r7, sp, #0
    2d62:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2d64:	687b      	ldr	r3, [r7, #4]
    2d66:	681b      	ldr	r3, [r3, #0]
    2d68:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    2d6a:	2300      	movs	r3, #0
    2d6c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    2d6e:	687b      	ldr	r3, [r7, #4]
    2d70:	0018      	movs	r0, r3
    2d72:	4b10      	ldr	r3, [pc, #64]	; (2db4 <i2c_master_enable+0x58>)
    2d74:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2d76:	68bb      	ldr	r3, [r7, #8]
    2d78:	681b      	ldr	r3, [r3, #0]
    2d7a:	2202      	movs	r2, #2
    2d7c:	431a      	orrs	r2, r3
    2d7e:	68bb      	ldr	r3, [r7, #8]
    2d80:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2d82:	e00c      	b.n	2d9e <i2c_master_enable+0x42>
		timeout_counter++;
    2d84:	68fb      	ldr	r3, [r7, #12]
    2d86:	3301      	adds	r3, #1
    2d88:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	88db      	ldrh	r3, [r3, #6]
    2d8e:	1e1a      	subs	r2, r3, #0
    2d90:	68fb      	ldr	r3, [r7, #12]
    2d92:	429a      	cmp	r2, r3
    2d94:	d803      	bhi.n	2d9e <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2d96:	68bb      	ldr	r3, [r7, #8]
    2d98:	2210      	movs	r2, #16
    2d9a:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    2d9c:	e006      	b.n	2dac <i2c_master_enable+0x50>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2d9e:	68bb      	ldr	r3, [r7, #8]
    2da0:	8b5b      	ldrh	r3, [r3, #26]
    2da2:	b29b      	uxth	r3, r3
    2da4:	001a      	movs	r2, r3
    2da6:	2310      	movs	r3, #16
    2da8:	4013      	ands	r3, r2
    2daa:	d0eb      	beq.n	2d84 <i2c_master_enable+0x28>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    2dac:	46bd      	mov	sp, r7
    2dae:	b004      	add	sp, #16
    2db0:	bd80      	pop	{r7, pc}
    2db2:	46c0      	nop			; (mov r8, r8)
    2db4:	00002cb5 	.word	0x00002cb5

00002db8 <i2c_init>:
.data = write_buffer,
.ten_bit_address = false,
.high_speed = false,
.hs_master_code = 0x0,
};
void i2c_init(void){
    2db8:	b580      	push	{r7, lr}
    2dba:	af00      	add	r7, sp, #0
	//port_pin_set_config(PIN_PA08,&pin_conf);
	//pin_conf.direction = PORT_PIN_DIR_OUTPUT;
	//port_pin_set_config(PIN_PA09,&pin_conf);
	//port_pin_set_output_level(PIN_PA08, true);
	//port_pin_set_output_level(PIN_PA08, false);
	i2c_master_get_config_defaults(&config_i2c_master);
    2dbc:	4b0e      	ldr	r3, [pc, #56]	; (2df8 <i2c_init+0x40>)
    2dbe:	0018      	movs	r0, r3
    2dc0:	4b0e      	ldr	r3, [pc, #56]	; (2dfc <i2c_init+0x44>)
    2dc2:	4798      	blx	r3
	config_i2c_master.buffer_timeout =10000;
    2dc4:	4b0c      	ldr	r3, [pc, #48]	; (2df8 <i2c_init+0x40>)
    2dc6:	4a0e      	ldr	r2, [pc, #56]	; (2e00 <i2c_init+0x48>)
    2dc8:	82da      	strh	r2, [r3, #22]
	config_i2c_master.generator_source = GCLK_GENERATOR_1;
    2dca:	4b0b      	ldr	r3, [pc, #44]	; (2df8 <i2c_init+0x40>)
    2dcc:	2201      	movs	r2, #1
    2dce:	731a      	strb	r2, [r3, #12]
	config_i2c_master.pinmux_pad0=PINMUX_PA08C_SERCOM0_PAD0;
    2dd0:	4b09      	ldr	r3, [pc, #36]	; (2df8 <i2c_init+0x40>)
    2dd2:	4a0c      	ldr	r2, [pc, #48]	; (2e04 <i2c_init+0x4c>)
    2dd4:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1=PINMUX_PA09C_SERCOM0_PAD1;
    2dd6:	4b08      	ldr	r3, [pc, #32]	; (2df8 <i2c_init+0x40>)
    2dd8:	4a0b      	ldr	r2, [pc, #44]	; (2e08 <i2c_init+0x50>)
    2dda:	621a      	str	r2, [r3, #32]
	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE,&config_i2c_master);
    2ddc:	4a06      	ldr	r2, [pc, #24]	; (2df8 <i2c_init+0x40>)
    2dde:	490b      	ldr	r1, [pc, #44]	; (2e0c <i2c_init+0x54>)
    2de0:	4b0b      	ldr	r3, [pc, #44]	; (2e10 <i2c_init+0x58>)
    2de2:	0018      	movs	r0, r3
    2de4:	4b0b      	ldr	r3, [pc, #44]	; (2e14 <i2c_init+0x5c>)
    2de6:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    2de8:	4b09      	ldr	r3, [pc, #36]	; (2e10 <i2c_init+0x58>)
    2dea:	0018      	movs	r0, r3
    2dec:	4b0a      	ldr	r3, [pc, #40]	; (2e18 <i2c_init+0x60>)
    2dee:	4798      	blx	r3

}
    2df0:	46c0      	nop			; (mov r8, r8)
    2df2:	46bd      	mov	sp, r7
    2df4:	bd80      	pop	{r7, pc}
    2df6:	46c0      	nop			; (mov r8, r8)
    2df8:	20000ec0 	.word	0x20000ec0
    2dfc:	00002cd9 	.word	0x00002cd9
    2e00:	00002710 	.word	0x00002710
    2e04:	00080002 	.word	0x00080002
    2e08:	00090002 	.word	0x00090002
    2e0c:	42000800 	.word	0x42000800
    2e10:	20000eb4 	.word	0x20000eb4
    2e14:	0000146d 	.word	0x0000146d
    2e18:	00002d5d 	.word	0x00002d5d

00002e1c <i2c_write>:
void i2c_write(uint8_t Addr,uint8_t Reg,uint8_t length)
{
    2e1c:	b590      	push	{r4, r7, lr}
    2e1e:	b085      	sub	sp, #20
    2e20:	af00      	add	r7, sp, #0
    2e22:	0004      	movs	r4, r0
    2e24:	0008      	movs	r0, r1
    2e26:	0011      	movs	r1, r2
    2e28:	1dfb      	adds	r3, r7, #7
    2e2a:	1c22      	adds	r2, r4, #0
    2e2c:	701a      	strb	r2, [r3, #0]
    2e2e:	1dbb      	adds	r3, r7, #6
    2e30:	1c02      	adds	r2, r0, #0
    2e32:	701a      	strb	r2, [r3, #0]
    2e34:	1d7b      	adds	r3, r7, #5
    2e36:	1c0a      	adds	r2, r1, #0
    2e38:	701a      	strb	r2, [r3, #0]
	uint16_t timeout = 0;	
    2e3a:	230e      	movs	r3, #14
    2e3c:	18fb      	adds	r3, r7, r3
    2e3e:	2200      	movs	r2, #0
    2e40:	801a      	strh	r2, [r3, #0]
	
	/* Write buffer to slave until success. */
	packet.data[0] = Reg;
    2e42:	4b12      	ldr	r3, [pc, #72]	; (2e8c <i2c_write+0x70>)
    2e44:	685b      	ldr	r3, [r3, #4]
    2e46:	1dba      	adds	r2, r7, #6
    2e48:	7812      	ldrb	r2, [r2, #0]
    2e4a:	701a      	strb	r2, [r3, #0]
	packet.data_length=1;
    2e4c:	4b0f      	ldr	r3, [pc, #60]	; (2e8c <i2c_write+0x70>)
    2e4e:	2201      	movs	r2, #1
    2e50:	805a      	strh	r2, [r3, #2]
	packet.address = Addr;
    2e52:	1dfb      	adds	r3, r7, #7
    2e54:	781b      	ldrb	r3, [r3, #0]
    2e56:	b29a      	uxth	r2, r3
    2e58:	4b0c      	ldr	r3, [pc, #48]	; (2e8c <i2c_write+0x70>)
    2e5a:	801a      	strh	r2, [r3, #0]
	
while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    2e5c:	e008      	b.n	2e70 <i2c_write+0x54>
STATUS_OK) {
/* Increment timeout counter and check if timed out. */
if (timeout++ == TIMEOUT) {
    2e5e:	230e      	movs	r3, #14
    2e60:	18fb      	adds	r3, r7, r3
    2e62:	881b      	ldrh	r3, [r3, #0]
    2e64:	220e      	movs	r2, #14
    2e66:	18ba      	adds	r2, r7, r2
    2e68:	1c59      	adds	r1, r3, #1
    2e6a:	8011      	strh	r1, [r2, #0]
    2e6c:	2b64      	cmp	r3, #100	; 0x64
    2e6e:	d009      	beq.n	2e84 <i2c_write+0x68>
	/* Write buffer to slave until success. */
	packet.data[0] = Reg;
	packet.data_length=1;
	packet.address = Addr;
	
while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    2e70:	4a06      	ldr	r2, [pc, #24]	; (2e8c <i2c_write+0x70>)
    2e72:	4b07      	ldr	r3, [pc, #28]	; (2e90 <i2c_write+0x74>)
    2e74:	0011      	movs	r1, r2
    2e76:	0018      	movs	r0, r3
    2e78:	4b06      	ldr	r3, [pc, #24]	; (2e94 <i2c_write+0x78>)
    2e7a:	4798      	blx	r3
    2e7c:	1e03      	subs	r3, r0, #0
    2e7e:	d1ee      	bne.n	2e5e <i2c_write+0x42>
if (timeout++ == TIMEOUT) {
return false;
break;
}
}
return true;	
    2e80:	46c0      	nop			; (mov r8, r8)
    2e82:	e000      	b.n	2e86 <i2c_write+0x6a>
	
while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
STATUS_OK) {
/* Increment timeout counter and check if timed out. */
if (timeout++ == TIMEOUT) {
return false;
    2e84:	46c0      	nop			; (mov r8, r8)
break;
}
}
return true;	
}
    2e86:	46bd      	mov	sp, r7
    2e88:	b005      	add	sp, #20
    2e8a:	bd90      	pop	{r4, r7, pc}
    2e8c:	20000008 	.word	0x20000008
    2e90:	20000eb4 	.word	0x20000eb4
    2e94:	00001a6d 	.word	0x00001a6d

00002e98 <i2c_read>:

uint8_t i2c_read(uint8_t Addr,uint8_t *read_buffer,uint8_t length)
{
    2e98:	b580      	push	{r7, lr}
    2e9a:	b084      	sub	sp, #16
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	6039      	str	r1, [r7, #0]
    2ea0:	0011      	movs	r1, r2
    2ea2:	1dfb      	adds	r3, r7, #7
    2ea4:	1c02      	adds	r2, r0, #0
    2ea6:	701a      	strb	r2, [r3, #0]
    2ea8:	1dbb      	adds	r3, r7, #6
    2eaa:	1c0a      	adds	r2, r1, #0
    2eac:	701a      	strb	r2, [r3, #0]
uint16_t timeout = 0;	
    2eae:	230e      	movs	r3, #14
    2eb0:	18fb      	adds	r3, r7, r3
    2eb2:	2200      	movs	r2, #0
    2eb4:	801a      	strh	r2, [r3, #0]
uint8_t Status = 1;	
    2eb6:	230d      	movs	r3, #13
    2eb8:	18fb      	adds	r3, r7, r3
    2eba:	2201      	movs	r2, #1
    2ebc:	701a      	strb	r2, [r3, #0]
	/* Read buffer to slave until success. */

	packet.data_length=length; //Read Length
    2ebe:	1dbb      	adds	r3, r7, #6
    2ec0:	781b      	ldrb	r3, [r3, #0]
    2ec2:	b29a      	uxth	r2, r3
    2ec4:	4b17      	ldr	r3, [pc, #92]	; (2f24 <i2c_read+0x8c>)
    2ec6:	805a      	strh	r2, [r3, #2]
	packet.address = Addr;
    2ec8:	1dfb      	adds	r3, r7, #7
    2eca:	781b      	ldrb	r3, [r3, #0]
    2ecc:	b29a      	uxth	r2, r3
    2ece:	4b15      	ldr	r3, [pc, #84]	; (2f24 <i2c_read+0x8c>)
    2ed0:	801a      	strh	r2, [r3, #0]
	packet.data = read_buffer;
    2ed2:	4b14      	ldr	r3, [pc, #80]	; (2f24 <i2c_read+0x8c>)
    2ed4:	683a      	ldr	r2, [r7, #0]
    2ed6:	605a      	str	r2, [r3, #4]
	

while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    2ed8:	e011      	b.n	2efe <i2c_read+0x66>
STATUS_OK) {
/* Increment timeout counter and check if timed out. */
if (timeout++ == TIMEOUT) {
    2eda:	230e      	movs	r3, #14
    2edc:	18fb      	adds	r3, r7, r3
    2ede:	881b      	ldrh	r3, [r3, #0]
    2ee0:	220e      	movs	r2, #14
    2ee2:	18ba      	adds	r2, r7, r2
    2ee4:	1c59      	adds	r1, r3, #1
    2ee6:	8011      	strh	r1, [r2, #0]
    2ee8:	2b64      	cmp	r3, #100	; 0x64
    2eea:	d108      	bne.n	2efe <i2c_read+0x66>
printf("I2C Read Fail");
    2eec:	4b0e      	ldr	r3, [pc, #56]	; (2f28 <i2c_read+0x90>)
    2eee:	0018      	movs	r0, r3
    2ef0:	4b0e      	ldr	r3, [pc, #56]	; (2f2c <i2c_read+0x94>)
    2ef2:	4798      	blx	r3
Status=0;
    2ef4:	230d      	movs	r3, #13
    2ef6:	18fb      	adds	r3, r7, r3
    2ef8:	2200      	movs	r2, #0
    2efa:	701a      	strb	r2, [r3, #0]
break;
    2efc:	e007      	b.n	2f0e <i2c_read+0x76>
	packet.data_length=length; //Read Length
	packet.address = Addr;
	packet.data = read_buffer;
	

while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    2efe:	4a09      	ldr	r2, [pc, #36]	; (2f24 <i2c_read+0x8c>)
    2f00:	4b0b      	ldr	r3, [pc, #44]	; (2f30 <i2c_read+0x98>)
    2f02:	0011      	movs	r1, r2
    2f04:	0018      	movs	r0, r3
    2f06:	4b0b      	ldr	r3, [pc, #44]	; (2f34 <i2c_read+0x9c>)
    2f08:	4798      	blx	r3
    2f0a:	1e03      	subs	r3, r0, #0
    2f0c:	d1e5      	bne.n	2eda <i2c_read+0x42>
break;
}
}

/* Read from slave until success. */
read_buffer = packet.data;
    2f0e:	4b05      	ldr	r3, [pc, #20]	; (2f24 <i2c_read+0x8c>)
    2f10:	685b      	ldr	r3, [r3, #4]
    2f12:	603b      	str	r3, [r7, #0]
return Status;
    2f14:	230d      	movs	r3, #13
    2f16:	18fb      	adds	r3, r7, r3
    2f18:	781b      	ldrb	r3, [r3, #0]

}
    2f1a:	0018      	movs	r0, r3
    2f1c:	46bd      	mov	sp, r7
    2f1e:	b004      	add	sp, #16
    2f20:	bd80      	pop	{r7, pc}
    2f22:	46c0      	nop			; (mov r8, r8)
    2f24:	20000008 	.word	0x20000008
    2f28:	0000fa2c 	.word	0x0000fa2c
    2f2c:	0000e9d1 	.word	0x0000e9d1
    2f30:	20000eb4 	.word	0x20000eb4
    2f34:	000018c5 	.word	0x000018c5

00002f38 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    2f38:	b580      	push	{r7, lr}
    2f3a:	b084      	sub	sp, #16
    2f3c:	af00      	add	r7, sp, #0
    2f3e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    2f40:	687b      	ldr	r3, [r7, #4]
    2f42:	22a0      	movs	r2, #160	; 0xa0
    2f44:	0112      	lsls	r2, r2, #4
    2f46:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    2f48:	687b      	ldr	r3, [r7, #4]
    2f4a:	2201      	movs	r2, #1
    2f4c:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    2f4e:	687b      	ldr	r3, [r7, #4]
    2f50:	2200      	movs	r2, #0
    2f52:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    2f54:	687b      	ldr	r3, [r7, #4]
    2f56:	2200      	movs	r2, #0
    2f58:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    2f5a:	230f      	movs	r3, #15
    2f5c:	18fb      	adds	r3, r7, r3
    2f5e:	2200      	movs	r2, #0
    2f60:	701a      	strb	r2, [r3, #0]
    2f62:	e00e      	b.n	2f82 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    2f64:	230f      	movs	r3, #15
    2f66:	18fb      	adds	r3, r7, r3
    2f68:	781a      	ldrb	r2, [r3, #0]
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	3202      	adds	r2, #2
    2f6e:	0092      	lsls	r2, r2, #2
    2f70:	2100      	movs	r1, #0
    2f72:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    2f74:	230f      	movs	r3, #15
    2f76:	18fb      	adds	r3, r7, r3
    2f78:	781a      	ldrb	r2, [r3, #0]
    2f7a:	230f      	movs	r3, #15
    2f7c:	18fb      	adds	r3, r7, r3
    2f7e:	3201      	adds	r2, #1
    2f80:	701a      	strb	r2, [r3, #0]
    2f82:	230f      	movs	r3, #15
    2f84:	18fb      	adds	r3, r7, r3
    2f86:	781b      	ldrb	r3, [r3, #0]
    2f88:	2b01      	cmp	r3, #1
    2f8a:	d9eb      	bls.n	2f64 <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
    2f8c:	46c0      	nop			; (mov r8, r8)
    2f8e:	46bd      	mov	sp, r7
    2f90:	b004      	add	sp, #16
    2f92:	bd80      	pop	{r7, pc}

00002f94 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    2f94:	b580      	push	{r7, lr}
    2f96:	b084      	sub	sp, #16
    2f98:	af00      	add	r7, sp, #0
    2f9a:	0002      	movs	r2, r0
    2f9c:	1dfb      	adds	r3, r7, #7
    2f9e:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    2fa0:	4b1a      	ldr	r3, [pc, #104]	; (300c <system_set_sleepmode+0x78>)
    2fa2:	699b      	ldr	r3, [r3, #24]
    2fa4:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
    2fa6:	68fa      	ldr	r2, [r7, #12]
    2fa8:	23f0      	movs	r3, #240	; 0xf0
    2faa:	011b      	lsls	r3, r3, #4
    2fac:	4013      	ands	r3, r2
    2fae:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
    2fb0:	68fb      	ldr	r3, [r7, #12]
    2fb2:	0a1b      	lsrs	r3, r3, #8
    2fb4:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    2fb6:	68fb      	ldr	r3, [r7, #12]
    2fb8:	2b02      	cmp	r3, #2
    2fba:	d805      	bhi.n	2fc8 <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    2fbc:	4a14      	ldr	r2, [pc, #80]	; (3010 <system_set_sleepmode+0x7c>)
    2fbe:	6853      	ldr	r3, [r2, #4]
    2fc0:	21c0      	movs	r1, #192	; 0xc0
    2fc2:	0089      	lsls	r1, r1, #2
    2fc4:	430b      	orrs	r3, r1
    2fc6:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    2fc8:	1dfb      	adds	r3, r7, #7
    2fca:	781b      	ldrb	r3, [r3, #0]
    2fcc:	2b00      	cmp	r3, #0
    2fce:	db16      	blt.n	2ffe <system_set_sleepmode+0x6a>
    2fd0:	2b02      	cmp	r3, #2
    2fd2:	dd02      	ble.n	2fda <system_set_sleepmode+0x46>
    2fd4:	2b03      	cmp	r3, #3
    2fd6:	d00b      	beq.n	2ff0 <system_set_sleepmode+0x5c>
    2fd8:	e011      	b.n	2ffe <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2fda:	4b0e      	ldr	r3, [pc, #56]	; (3014 <system_set_sleepmode+0x80>)
    2fdc:	4a0d      	ldr	r2, [pc, #52]	; (3014 <system_set_sleepmode+0x80>)
    2fde:	6912      	ldr	r2, [r2, #16]
    2fe0:	2104      	movs	r1, #4
    2fe2:	438a      	bics	r2, r1
    2fe4:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    2fe6:	4a0c      	ldr	r2, [pc, #48]	; (3018 <system_set_sleepmode+0x84>)
    2fe8:	1dfb      	adds	r3, r7, #7
    2fea:	781b      	ldrb	r3, [r3, #0]
    2fec:	7053      	strb	r3, [r2, #1]
			break;
    2fee:	e008      	b.n	3002 <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    2ff0:	4b08      	ldr	r3, [pc, #32]	; (3014 <system_set_sleepmode+0x80>)
    2ff2:	4a08      	ldr	r2, [pc, #32]	; (3014 <system_set_sleepmode+0x80>)
    2ff4:	6912      	ldr	r2, [r2, #16]
    2ff6:	2104      	movs	r1, #4
    2ff8:	430a      	orrs	r2, r1
    2ffa:	611a      	str	r2, [r3, #16]
			break;
    2ffc:	e001      	b.n	3002 <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
    2ffe:	2317      	movs	r3, #23
    3000:	e000      	b.n	3004 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
    3002:	2300      	movs	r3, #0
}
    3004:	0018      	movs	r0, r3
    3006:	46bd      	mov	sp, r7
    3008:	b004      	add	sp, #16
    300a:	bd80      	pop	{r7, pc}
    300c:	41002000 	.word	0x41002000
    3010:	41004000 	.word	0x41004000
    3014:	e000ed00 	.word	0xe000ed00
    3018:	40000400 	.word	0x40000400

0000301c <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
    301c:	b580      	push	{r7, lr}
    301e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3020:	f3bf 8f4f 	dsb	sy
	__DSB();
	__WFI();
    3024:	bf30      	wfi
}
    3026:	46c0      	nop			; (mov r8, r8)
    3028:	46bd      	mov	sp, r7
    302a:	bd80      	pop	{r7, pc}

0000302c <sm_init>:
/**
 * \brief This function Initializes the Sleep functions
 * Enable RTC Clock in conf_clocks.h
 */
void sm_init(void)
{
    302c:	b580      	push	{r7, lr}
    302e:	b084      	sub	sp, #16
    3030:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;

	rtc_count_get_config_defaults(&config_rtc_count);
    3032:	003b      	movs	r3, r7
    3034:	0018      	movs	r0, r3
    3036:	4b0b      	ldr	r3, [pc, #44]	; (3064 <sm_init+0x38>)
    3038:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    303a:	003b      	movs	r3, r7
    303c:	2200      	movs	r2, #0
    303e:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    3040:	003b      	movs	r3, r7
    3042:	2200      	movs	r2, #0
    3044:	709a      	strb	r2, [r3, #2]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	/** Continuously update the counter value so no synchronization is
	 *  needed for reading. */
	config_rtc_count.continuously_update = true;
    3046:	003b      	movs	r3, r7
    3048:	2201      	movs	r2, #1
    304a:	711a      	strb	r2, [r3, #4]
#endif
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    304c:	003a      	movs	r2, r7
    304e:	4906      	ldr	r1, [pc, #24]	; (3068 <sm_init+0x3c>)
    3050:	4b06      	ldr	r3, [pc, #24]	; (306c <sm_init+0x40>)
    3052:	0018      	movs	r0, r3
    3054:	4b06      	ldr	r3, [pc, #24]	; (3070 <sm_init+0x44>)
    3056:	4798      	blx	r3
	configure_rtc_callbacks();
    3058:	4b06      	ldr	r3, [pc, #24]	; (3074 <sm_init+0x48>)
    305a:	4798      	blx	r3
}
    305c:	46c0      	nop			; (mov r8, r8)
    305e:	46bd      	mov	sp, r7
    3060:	b004      	add	sp, #16
    3062:	bd80      	pop	{r7, pc}
    3064:	00002f39 	.word	0x00002f39
    3068:	40001400 	.word	0x40001400
    306c:	20000ef4 	.word	0x20000ef4
    3070:	00000c05 	.word	0x00000c05
    3074:	000030d1 	.word	0x000030d1

00003078 <sm_sleep>:

/**
 * \brief This function puts the transceiver and device to sleep
 */
void sm_sleep(uint32_t interval)
{
    3078:	b580      	push	{r7, lr}
    307a:	b082      	sub	sp, #8
    307c:	af00      	add	r7, sp, #0
    307e:	6078      	str	r0, [r7, #4]
	interval = interval * 1000;
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	22fa      	movs	r2, #250	; 0xfa
    3084:	0092      	lsls	r2, r2, #2
    3086:	4353      	muls	r3, r2
    3088:	607b      	str	r3, [r7, #4]
	rtc_count_set_period(&rtc_instance, interval);
    308a:	687b      	ldr	r3, [r7, #4]
    308c:	b29a      	uxth	r2, r3
    308e:	4b0a      	ldr	r3, [pc, #40]	; (30b8 <sm_sleep+0x40>)
    3090:	0011      	movs	r1, r2
    3092:	0018      	movs	r0, r3
    3094:	4b09      	ldr	r3, [pc, #36]	; (30bc <sm_sleep+0x44>)
    3096:	4798      	blx	r3
	configure_rtc_callbacks();
    3098:	4b09      	ldr	r3, [pc, #36]	; (30c0 <sm_sleep+0x48>)
    309a:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    309c:	4b06      	ldr	r3, [pc, #24]	; (30b8 <sm_sleep+0x40>)
    309e:	0018      	movs	r0, r3
    30a0:	4b08      	ldr	r3, [pc, #32]	; (30c4 <sm_sleep+0x4c>)
    30a2:	4798      	blx	r3
	/*put the MCU in standby mode with RTC as wakeup source*/
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
    30a4:	2003      	movs	r0, #3
    30a6:	4b08      	ldr	r3, [pc, #32]	; (30c8 <sm_sleep+0x50>)
    30a8:	4798      	blx	r3
	system_sleep();
    30aa:	4b08      	ldr	r3, [pc, #32]	; (30cc <sm_sleep+0x54>)
    30ac:	4798      	blx	r3
}
    30ae:	46c0      	nop			; (mov r8, r8)
    30b0:	46bd      	mov	sp, r7
    30b2:	b002      	add	sp, #8
    30b4:	bd80      	pop	{r7, pc}
    30b6:	46c0      	nop			; (mov r8, r8)
    30b8:	20000ef4 	.word	0x20000ef4
    30bc:	00000d21 	.word	0x00000d21
    30c0:	000030d1 	.word	0x000030d1
    30c4:	000009dd 	.word	0x000009dd
    30c8:	00002f95 	.word	0x00002f95
    30cc:	0000301d 	.word	0x0000301d

000030d0 <configure_rtc_callbacks>:

static void configure_rtc_callbacks(void)
{
    30d0:	b580      	push	{r7, lr}
    30d2:	af00      	add	r7, sp, #0
	/*Register rtc callback*/
	rtc_count_register_callback(
    30d4:	4906      	ldr	r1, [pc, #24]	; (30f0 <configure_rtc_callbacks+0x20>)
    30d6:	4b07      	ldr	r3, [pc, #28]	; (30f4 <configure_rtc_callbacks+0x24>)
    30d8:	2202      	movs	r2, #2
    30da:	0018      	movs	r0, r3
    30dc:	4b06      	ldr	r3, [pc, #24]	; (30f8 <configure_rtc_callbacks+0x28>)
    30de:	4798      	blx	r3
			&rtc_instance, rtc_overflow_callback,
			RTC_COUNT_CALLBACK_OVERFLOW);
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    30e0:	4b04      	ldr	r3, [pc, #16]	; (30f4 <configure_rtc_callbacks+0x24>)
    30e2:	2102      	movs	r1, #2
    30e4:	0018      	movs	r0, r3
    30e6:	4b05      	ldr	r3, [pc, #20]	; (30fc <configure_rtc_callbacks+0x2c>)
    30e8:	4798      	blx	r3
}
    30ea:	46c0      	nop			; (mov r8, r8)
    30ec:	46bd      	mov	sp, r7
    30ee:	bd80      	pop	{r7, pc}
    30f0:	00003101 	.word	0x00003101
    30f4:	20000ef4 	.word	0x20000ef4
    30f8:	00000d65 	.word	0x00000d65
    30fc:	00000e11 	.word	0x00000e11

00003100 <rtc_overflow_callback>:

static void rtc_overflow_callback(void)
{
    3100:	b580      	push	{r7, lr}
    3102:	af00      	add	r7, sp, #0
	/* Do something on RTC overflow here */
	rtc_count_disable(&rtc_instance);
    3104:	4b03      	ldr	r3, [pc, #12]	; (3114 <rtc_overflow_callback+0x14>)
    3106:	0018      	movs	r0, r3
    3108:	4b03      	ldr	r3, [pc, #12]	; (3118 <rtc_overflow_callback+0x18>)
    310a:	4798      	blx	r3
}
    310c:	46c0      	nop			; (mov r8, r8)
    310e:	46bd      	mov	sp, r7
    3110:	bd80      	pop	{r7, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	20000ef4 	.word	0x20000ef4
    3118:	00000a21 	.word	0x00000a21

0000311c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    311c:	b580      	push	{r7, lr}
    311e:	b082      	sub	sp, #8
    3120:	af00      	add	r7, sp, #0
    3122:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	2200      	movs	r2, #0
    3128:	701a      	strb	r2, [r3, #0]
}
    312a:	46c0      	nop			; (mov r8, r8)
    312c:	46bd      	mov	sp, r7
    312e:	b002      	add	sp, #8
    3130:	bd80      	pop	{r7, pc}
    3132:	46c0      	nop			; (mov r8, r8)

00003134 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3134:	b580      	push	{r7, lr}
    3136:	b082      	sub	sp, #8
    3138:	af00      	add	r7, sp, #0
    313a:	0002      	movs	r2, r0
    313c:	6039      	str	r1, [r7, #0]
    313e:	1dfb      	adds	r3, r7, #7
    3140:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3142:	1dfb      	adds	r3, r7, #7
    3144:	781b      	ldrb	r3, [r3, #0]
    3146:	2b01      	cmp	r3, #1
    3148:	d00a      	beq.n	3160 <system_apb_clock_set_mask+0x2c>
    314a:	2b02      	cmp	r3, #2
    314c:	d00f      	beq.n	316e <system_apb_clock_set_mask+0x3a>
    314e:	2b00      	cmp	r3, #0
    3150:	d114      	bne.n	317c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3152:	4b0e      	ldr	r3, [pc, #56]	; (318c <system_apb_clock_set_mask+0x58>)
    3154:	4a0d      	ldr	r2, [pc, #52]	; (318c <system_apb_clock_set_mask+0x58>)
    3156:	6991      	ldr	r1, [r2, #24]
    3158:	683a      	ldr	r2, [r7, #0]
    315a:	430a      	orrs	r2, r1
    315c:	619a      	str	r2, [r3, #24]
			break;
    315e:	e00f      	b.n	3180 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3160:	4b0a      	ldr	r3, [pc, #40]	; (318c <system_apb_clock_set_mask+0x58>)
    3162:	4a0a      	ldr	r2, [pc, #40]	; (318c <system_apb_clock_set_mask+0x58>)
    3164:	69d1      	ldr	r1, [r2, #28]
    3166:	683a      	ldr	r2, [r7, #0]
    3168:	430a      	orrs	r2, r1
    316a:	61da      	str	r2, [r3, #28]
			break;
    316c:	e008      	b.n	3180 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    316e:	4b07      	ldr	r3, [pc, #28]	; (318c <system_apb_clock_set_mask+0x58>)
    3170:	4a06      	ldr	r2, [pc, #24]	; (318c <system_apb_clock_set_mask+0x58>)
    3172:	6a11      	ldr	r1, [r2, #32]
    3174:	683a      	ldr	r2, [r7, #0]
    3176:	430a      	orrs	r2, r1
    3178:	621a      	str	r2, [r3, #32]
			break;
    317a:	e001      	b.n	3180 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    317c:	2317      	movs	r3, #23
    317e:	e000      	b.n	3182 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3180:	2300      	movs	r3, #0
}
    3182:	0018      	movs	r0, r3
    3184:	46bd      	mov	sp, r7
    3186:	b002      	add	sp, #8
    3188:	bd80      	pop	{r7, pc}
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	40000400 	.word	0x40000400

00003190 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3190:	b580      	push	{r7, lr}
    3192:	b082      	sub	sp, #8
    3194:	af00      	add	r7, sp, #0
    3196:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3198:	687b      	ldr	r3, [r7, #4]
    319a:	2280      	movs	r2, #128	; 0x80
    319c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    319e:	687b      	ldr	r3, [r7, #4]
    31a0:	2200      	movs	r2, #0
    31a2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    31a4:	687b      	ldr	r3, [r7, #4]
    31a6:	2201      	movs	r2, #1
    31a8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    31aa:	687b      	ldr	r3, [r7, #4]
    31ac:	2200      	movs	r2, #0
    31ae:	70da      	strb	r2, [r3, #3]
}
    31b0:	46c0      	nop			; (mov r8, r8)
    31b2:	46bd      	mov	sp, r7
    31b4:	b002      	add	sp, #8
    31b6:	bd80      	pop	{r7, pc}

000031b8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    31b8:	b580      	push	{r7, lr}
    31ba:	b082      	sub	sp, #8
    31bc:	af00      	add	r7, sp, #0
    31be:	0002      	movs	r2, r0
    31c0:	1dfb      	adds	r3, r7, #7
    31c2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    31c4:	4b06      	ldr	r3, [pc, #24]	; (31e0 <system_interrupt_enable+0x28>)
    31c6:	1dfa      	adds	r2, r7, #7
    31c8:	7812      	ldrb	r2, [r2, #0]
    31ca:	0011      	movs	r1, r2
    31cc:	221f      	movs	r2, #31
    31ce:	400a      	ands	r2, r1
    31d0:	2101      	movs	r1, #1
    31d2:	4091      	lsls	r1, r2
    31d4:	000a      	movs	r2, r1
    31d6:	601a      	str	r2, [r3, #0]
}
    31d8:	46c0      	nop			; (mov r8, r8)
    31da:	46bd      	mov	sp, r7
    31dc:	b002      	add	sp, #8
    31de:	bd80      	pop	{r7, pc}
    31e0:	e000e100 	.word	0xe000e100

000031e4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    31e4:	b580      	push	{r7, lr}
    31e6:	b084      	sub	sp, #16
    31e8:	af00      	add	r7, sp, #0
    31ea:	0002      	movs	r2, r0
    31ec:	1dfb      	adds	r3, r7, #7
    31ee:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    31f0:	230f      	movs	r3, #15
    31f2:	18fb      	adds	r3, r7, r3
    31f4:	1dfa      	adds	r2, r7, #7
    31f6:	7812      	ldrb	r2, [r2, #0]
    31f8:	0952      	lsrs	r2, r2, #5
    31fa:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    31fc:	230f      	movs	r3, #15
    31fe:	18fb      	adds	r3, r7, r3
    3200:	781b      	ldrb	r3, [r3, #0]
    3202:	2b00      	cmp	r3, #0
    3204:	d10c      	bne.n	3220 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3206:	4b09      	ldr	r3, [pc, #36]	; (322c <_extint_get_eic_from_channel+0x48>)
    3208:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    320a:	230f      	movs	r3, #15
    320c:	18fb      	adds	r3, r7, r3
    320e:	781b      	ldrb	r3, [r3, #0]
    3210:	009b      	lsls	r3, r3, #2
    3212:	2210      	movs	r2, #16
    3214:	4694      	mov	ip, r2
    3216:	44bc      	add	ip, r7
    3218:	4463      	add	r3, ip
    321a:	3b08      	subs	r3, #8
    321c:	681b      	ldr	r3, [r3, #0]
    321e:	e000      	b.n	3222 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    3220:	2300      	movs	r3, #0
	}
}
    3222:	0018      	movs	r0, r3
    3224:	46bd      	mov	sp, r7
    3226:	b004      	add	sp, #16
    3228:	bd80      	pop	{r7, pc}
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	40001800 	.word	0x40001800

00003230 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    3230:	b580      	push	{r7, lr}
    3232:	b082      	sub	sp, #8
    3234:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3236:	4b0f      	ldr	r3, [pc, #60]	; (3274 <extint_is_syncing+0x44>)
    3238:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    323a:	2300      	movs	r3, #0
    323c:	607b      	str	r3, [r7, #4]
    323e:	e011      	b.n	3264 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	009b      	lsls	r3, r3, #2
    3244:	2208      	movs	r2, #8
    3246:	4694      	mov	ip, r2
    3248:	44bc      	add	ip, r7
    324a:	4463      	add	r3, ip
    324c:	3b08      	subs	r3, #8
    324e:	681b      	ldr	r3, [r3, #0]
    3250:	785b      	ldrb	r3, [r3, #1]
    3252:	b2db      	uxtb	r3, r3
    3254:	b25b      	sxtb	r3, r3
    3256:	2b00      	cmp	r3, #0
    3258:	da01      	bge.n	325e <extint_is_syncing+0x2e>
			return true;
    325a:	2301      	movs	r3, #1
    325c:	e006      	b.n	326c <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    325e:	687b      	ldr	r3, [r7, #4]
    3260:	3301      	adds	r3, #1
    3262:	607b      	str	r3, [r7, #4]
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	2b00      	cmp	r3, #0
    3268:	d0ea      	beq.n	3240 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    326a:	2300      	movs	r3, #0
}
    326c:	0018      	movs	r0, r3
    326e:	46bd      	mov	sp, r7
    3270:	b002      	add	sp, #8
    3272:	bd80      	pop	{r7, pc}
    3274:	40001800 	.word	0x40001800

00003278 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    3278:	b580      	push	{r7, lr}
    327a:	b084      	sub	sp, #16
    327c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    327e:	4b2d      	ldr	r3, [pc, #180]	; (3334 <_system_extint_init+0xbc>)
    3280:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    3282:	2140      	movs	r1, #64	; 0x40
    3284:	2000      	movs	r0, #0
    3286:	4b2c      	ldr	r3, [pc, #176]	; (3338 <_system_extint_init+0xc0>)
    3288:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    328a:	003b      	movs	r3, r7
    328c:	0018      	movs	r0, r3
    328e:	4b2b      	ldr	r3, [pc, #172]	; (333c <_system_extint_init+0xc4>)
    3290:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    3292:	003b      	movs	r3, r7
    3294:	2200      	movs	r2, #0
    3296:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3298:	003b      	movs	r3, r7
    329a:	0019      	movs	r1, r3
    329c:	2005      	movs	r0, #5
    329e:	4b28      	ldr	r3, [pc, #160]	; (3340 <_system_extint_init+0xc8>)
    32a0:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    32a2:	2005      	movs	r0, #5
    32a4:	4b27      	ldr	r3, [pc, #156]	; (3344 <_system_extint_init+0xcc>)
    32a6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    32a8:	2300      	movs	r3, #0
    32aa:	60fb      	str	r3, [r7, #12]
    32ac:	e018      	b.n	32e0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    32ae:	68fb      	ldr	r3, [r7, #12]
    32b0:	009b      	lsls	r3, r3, #2
    32b2:	2210      	movs	r2, #16
    32b4:	4694      	mov	ip, r2
    32b6:	44bc      	add	ip, r7
    32b8:	4463      	add	r3, ip
    32ba:	3b0c      	subs	r3, #12
    32bc:	681a      	ldr	r2, [r3, #0]
    32be:	68fb      	ldr	r3, [r7, #12]
    32c0:	009b      	lsls	r3, r3, #2
    32c2:	2110      	movs	r1, #16
    32c4:	468c      	mov	ip, r1
    32c6:	44bc      	add	ip, r7
    32c8:	4463      	add	r3, ip
    32ca:	3b0c      	subs	r3, #12
    32cc:	681b      	ldr	r3, [r3, #0]
    32ce:	781b      	ldrb	r3, [r3, #0]
    32d0:	b2db      	uxtb	r3, r3
    32d2:	2101      	movs	r1, #1
    32d4:	430b      	orrs	r3, r1
    32d6:	b2db      	uxtb	r3, r3
    32d8:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    32da:	68fb      	ldr	r3, [r7, #12]
    32dc:	3301      	adds	r3, #1
    32de:	60fb      	str	r3, [r7, #12]
    32e0:	68fb      	ldr	r3, [r7, #12]
    32e2:	2b00      	cmp	r3, #0
    32e4:	d0e3      	beq.n	32ae <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    32e6:	46c0      	nop			; (mov r8, r8)
    32e8:	4b17      	ldr	r3, [pc, #92]	; (3348 <_system_extint_init+0xd0>)
    32ea:	4798      	blx	r3
    32ec:	1e03      	subs	r3, r0, #0
    32ee:	d1fb      	bne.n	32e8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    32f0:	230b      	movs	r3, #11
    32f2:	18fb      	adds	r3, r7, r3
    32f4:	2200      	movs	r2, #0
    32f6:	701a      	strb	r2, [r3, #0]
    32f8:	e00d      	b.n	3316 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    32fa:	230b      	movs	r3, #11
    32fc:	18fb      	adds	r3, r7, r3
    32fe:	781a      	ldrb	r2, [r3, #0]
    3300:	4b12      	ldr	r3, [pc, #72]	; (334c <_system_extint_init+0xd4>)
    3302:	0092      	lsls	r2, r2, #2
    3304:	2100      	movs	r1, #0
    3306:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3308:	230b      	movs	r3, #11
    330a:	18fb      	adds	r3, r7, r3
    330c:	781a      	ldrb	r2, [r3, #0]
    330e:	230b      	movs	r3, #11
    3310:	18fb      	adds	r3, r7, r3
    3312:	3201      	adds	r2, #1
    3314:	701a      	strb	r2, [r3, #0]
    3316:	230b      	movs	r3, #11
    3318:	18fb      	adds	r3, r7, r3
    331a:	781b      	ldrb	r3, [r3, #0]
    331c:	2b0f      	cmp	r3, #15
    331e:	d9ec      	bls.n	32fa <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    3320:	2004      	movs	r0, #4
    3322:	4b0b      	ldr	r3, [pc, #44]	; (3350 <_system_extint_init+0xd8>)
    3324:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    3326:	4b0b      	ldr	r3, [pc, #44]	; (3354 <_system_extint_init+0xdc>)
    3328:	4798      	blx	r3
}
    332a:	46c0      	nop			; (mov r8, r8)
    332c:	46bd      	mov	sp, r7
    332e:	b004      	add	sp, #16
    3330:	bd80      	pop	{r7, pc}
    3332:	46c0      	nop			; (mov r8, r8)
    3334:	40001800 	.word	0x40001800
    3338:	00003135 	.word	0x00003135
    333c:	0000311d 	.word	0x0000311d
    3340:	0000bb31 	.word	0x0000bb31
    3344:	0000bb75 	.word	0x0000bb75
    3348:	00003231 	.word	0x00003231
    334c:	20000f0c 	.word	0x20000f0c
    3350:	000031b9 	.word	0x000031b9
    3354:	00003359 	.word	0x00003359

00003358 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    3358:	b580      	push	{r7, lr}
    335a:	b082      	sub	sp, #8
    335c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    335e:	4b15      	ldr	r3, [pc, #84]	; (33b4 <_extint_enable+0x5c>)
    3360:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3362:	2300      	movs	r3, #0
    3364:	607b      	str	r3, [r7, #4]
    3366:	e018      	b.n	339a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3368:	687b      	ldr	r3, [r7, #4]
    336a:	009b      	lsls	r3, r3, #2
    336c:	2208      	movs	r2, #8
    336e:	4694      	mov	ip, r2
    3370:	44bc      	add	ip, r7
    3372:	4463      	add	r3, ip
    3374:	3b08      	subs	r3, #8
    3376:	681a      	ldr	r2, [r3, #0]
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	009b      	lsls	r3, r3, #2
    337c:	2108      	movs	r1, #8
    337e:	468c      	mov	ip, r1
    3380:	44bc      	add	ip, r7
    3382:	4463      	add	r3, ip
    3384:	3b08      	subs	r3, #8
    3386:	681b      	ldr	r3, [r3, #0]
    3388:	781b      	ldrb	r3, [r3, #0]
    338a:	b2db      	uxtb	r3, r3
    338c:	2102      	movs	r1, #2
    338e:	430b      	orrs	r3, r1
    3390:	b2db      	uxtb	r3, r3
    3392:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	3301      	adds	r3, #1
    3398:	607b      	str	r3, [r7, #4]
    339a:	687b      	ldr	r3, [r7, #4]
    339c:	2b00      	cmp	r3, #0
    339e:	d0e3      	beq.n	3368 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    33a0:	46c0      	nop			; (mov r8, r8)
    33a2:	4b05      	ldr	r3, [pc, #20]	; (33b8 <_extint_enable+0x60>)
    33a4:	4798      	blx	r3
    33a6:	1e03      	subs	r3, r0, #0
    33a8:	d1fb      	bne.n	33a2 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    33aa:	46c0      	nop			; (mov r8, r8)
    33ac:	46bd      	mov	sp, r7
    33ae:	b002      	add	sp, #8
    33b0:	bd80      	pop	{r7, pc}
    33b2:	46c0      	nop			; (mov r8, r8)
    33b4:	40001800 	.word	0x40001800
    33b8:	00003231 	.word	0x00003231

000033bc <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    33bc:	b580      	push	{r7, lr}
    33be:	b082      	sub	sp, #8
    33c0:	af00      	add	r7, sp, #0
    33c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    33c4:	687b      	ldr	r3, [r7, #4]
    33c6:	2200      	movs	r2, #0
    33c8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    33ca:	687b      	ldr	r3, [r7, #4]
    33cc:	2200      	movs	r2, #0
    33ce:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    33d0:	687b      	ldr	r3, [r7, #4]
    33d2:	2201      	movs	r2, #1
    33d4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    33d6:	687b      	ldr	r3, [r7, #4]
    33d8:	2201      	movs	r2, #1
    33da:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    33dc:	687b      	ldr	r3, [r7, #4]
    33de:	2200      	movs	r2, #0
    33e0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    33e2:	687b      	ldr	r3, [r7, #4]
    33e4:	2202      	movs	r2, #2
    33e6:	72da      	strb	r2, [r3, #11]
}
    33e8:	46c0      	nop			; (mov r8, r8)
    33ea:	46bd      	mov	sp, r7
    33ec:	b002      	add	sp, #8
    33ee:	bd80      	pop	{r7, pc}

000033f0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    33f0:	b580      	push	{r7, lr}
    33f2:	b086      	sub	sp, #24
    33f4:	af00      	add	r7, sp, #0
    33f6:	0002      	movs	r2, r0
    33f8:	6039      	str	r1, [r7, #0]
    33fa:	1dfb      	adds	r3, r7, #7
    33fc:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    33fe:	2308      	movs	r3, #8
    3400:	18fb      	adds	r3, r7, r3
    3402:	0018      	movs	r0, r3
    3404:	4b36      	ldr	r3, [pc, #216]	; (34e0 <extint_chan_set_config+0xf0>)
    3406:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    3408:	683b      	ldr	r3, [r7, #0]
    340a:	685b      	ldr	r3, [r3, #4]
    340c:	b2da      	uxtb	r2, r3
    340e:	2308      	movs	r3, #8
    3410:	18fb      	adds	r3, r7, r3
    3412:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3414:	2308      	movs	r3, #8
    3416:	18fb      	adds	r3, r7, r3
    3418:	2200      	movs	r2, #0
    341a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    341c:	683b      	ldr	r3, [r7, #0]
    341e:	7a1a      	ldrb	r2, [r3, #8]
    3420:	2308      	movs	r3, #8
    3422:	18fb      	adds	r3, r7, r3
    3424:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    3426:	683b      	ldr	r3, [r7, #0]
    3428:	681b      	ldr	r3, [r3, #0]
    342a:	b2db      	uxtb	r3, r3
    342c:	2208      	movs	r2, #8
    342e:	18ba      	adds	r2, r7, r2
    3430:	0011      	movs	r1, r2
    3432:	0018      	movs	r0, r3
    3434:	4b2b      	ldr	r3, [pc, #172]	; (34e4 <extint_chan_set_config+0xf4>)
    3436:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    3438:	1dfb      	adds	r3, r7, #7
    343a:	781b      	ldrb	r3, [r3, #0]
    343c:	0018      	movs	r0, r3
    343e:	4b2a      	ldr	r3, [pc, #168]	; (34e8 <extint_chan_set_config+0xf8>)
    3440:	4798      	blx	r3
    3442:	0003      	movs	r3, r0
    3444:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    3446:	1dfb      	adds	r3, r7, #7
    3448:	781b      	ldrb	r3, [r3, #0]
    344a:	2207      	movs	r2, #7
    344c:	4013      	ands	r3, r2
    344e:	009b      	lsls	r3, r3, #2
    3450:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    3452:	683b      	ldr	r3, [r7, #0]
    3454:	7adb      	ldrb	r3, [r3, #11]
    3456:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    3458:	683b      	ldr	r3, [r7, #0]
    345a:	7a9b      	ldrb	r3, [r3, #10]
    345c:	2b00      	cmp	r3, #0
    345e:	d003      	beq.n	3468 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    3460:	697b      	ldr	r3, [r7, #20]
    3462:	2208      	movs	r2, #8
    3464:	4313      	orrs	r3, r2
    3466:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    3468:	1dfb      	adds	r3, r7, #7
    346a:	781b      	ldrb	r3, [r3, #0]
    346c:	08db      	lsrs	r3, r3, #3
    346e:	b2db      	uxtb	r3, r3
    3470:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    3472:	1dfb      	adds	r3, r7, #7
    3474:	781b      	ldrb	r3, [r3, #0]
    3476:	08db      	lsrs	r3, r3, #3
    3478:	b2db      	uxtb	r3, r3
    347a:	001a      	movs	r2, r3
    347c:	693b      	ldr	r3, [r7, #16]
    347e:	3206      	adds	r2, #6
    3480:	0092      	lsls	r2, r2, #2
    3482:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3484:	210f      	movs	r1, #15
    3486:	68fa      	ldr	r2, [r7, #12]
    3488:	4091      	lsls	r1, r2
    348a:	000a      	movs	r2, r1
    348c:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    348e:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    3490:	6979      	ldr	r1, [r7, #20]
    3492:	68fb      	ldr	r3, [r7, #12]
    3494:	4099      	lsls	r1, r3
    3496:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3498:	431a      	orrs	r2, r3
    349a:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    349c:	693b      	ldr	r3, [r7, #16]
    349e:	1d82      	adds	r2, r0, #6
    34a0:	0092      	lsls	r2, r2, #2
    34a2:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    34a4:	683b      	ldr	r3, [r7, #0]
    34a6:	7a5b      	ldrb	r3, [r3, #9]
    34a8:	2b00      	cmp	r3, #0
    34aa:	d00a      	beq.n	34c2 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    34ac:	693b      	ldr	r3, [r7, #16]
    34ae:	695a      	ldr	r2, [r3, #20]
    34b0:	1dfb      	adds	r3, r7, #7
    34b2:	781b      	ldrb	r3, [r3, #0]
    34b4:	2101      	movs	r1, #1
    34b6:	4099      	lsls	r1, r3
    34b8:	000b      	movs	r3, r1
    34ba:	431a      	orrs	r2, r3
    34bc:	693b      	ldr	r3, [r7, #16]
    34be:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    34c0:	e00a      	b.n	34d8 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    34c2:	693b      	ldr	r3, [r7, #16]
    34c4:	695b      	ldr	r3, [r3, #20]
    34c6:	1dfa      	adds	r2, r7, #7
    34c8:	7812      	ldrb	r2, [r2, #0]
    34ca:	2101      	movs	r1, #1
    34cc:	4091      	lsls	r1, r2
    34ce:	000a      	movs	r2, r1
    34d0:	43d2      	mvns	r2, r2
    34d2:	401a      	ands	r2, r3
    34d4:	693b      	ldr	r3, [r7, #16]
    34d6:	615a      	str	r2, [r3, #20]
	}
}
    34d8:	46c0      	nop			; (mov r8, r8)
    34da:	46bd      	mov	sp, r7
    34dc:	b006      	add	sp, #24
    34de:	bd80      	pop	{r7, pc}
    34e0:	00003191 	.word	0x00003191
    34e4:	0000be1d 	.word	0x0000be1d
    34e8:	000031e5 	.word	0x000031e5

000034ec <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    34ec:	b580      	push	{r7, lr}
    34ee:	b082      	sub	sp, #8
    34f0:	af00      	add	r7, sp, #0
    34f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    34f4:	687b      	ldr	r3, [r7, #4]
    34f6:	2200      	movs	r2, #0
    34f8:	701a      	strb	r2, [r3, #0]
}
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	46bd      	mov	sp, r7
    34fe:	b002      	add	sp, #8
    3500:	bd80      	pop	{r7, pc}
    3502:	46c0      	nop			; (mov r8, r8)

00003504 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3504:	b580      	push	{r7, lr}
    3506:	b086      	sub	sp, #24
    3508:	af00      	add	r7, sp, #0
    350a:	60f8      	str	r0, [r7, #12]
    350c:	60b9      	str	r1, [r7, #8]
    350e:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3510:	2316      	movs	r3, #22
    3512:	18fb      	adds	r3, r7, r3
    3514:	2200      	movs	r2, #0
    3516:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3518:	68bb      	ldr	r3, [r7, #8]
    351a:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    351c:	68bb      	ldr	r3, [r7, #8]
    351e:	085a      	lsrs	r2, r3, #1
    3520:	68fb      	ldr	r3, [r7, #12]
    3522:	429a      	cmp	r2, r3
    3524:	d201      	bcs.n	352a <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3526:	2340      	movs	r3, #64	; 0x40
    3528:	e026      	b.n	3578 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    352a:	68bb      	ldr	r3, [r7, #8]
    352c:	085b      	lsrs	r3, r3, #1
    352e:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3530:	e00a      	b.n	3548 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3532:	693a      	ldr	r2, [r7, #16]
    3534:	68fb      	ldr	r3, [r7, #12]
    3536:	1ad3      	subs	r3, r2, r3
    3538:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    353a:	2316      	movs	r3, #22
    353c:	18fb      	adds	r3, r7, r3
    353e:	881a      	ldrh	r2, [r3, #0]
    3540:	2316      	movs	r3, #22
    3542:	18fb      	adds	r3, r7, r3
    3544:	3201      	adds	r2, #1
    3546:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    3548:	693a      	ldr	r2, [r7, #16]
    354a:	68fb      	ldr	r3, [r7, #12]
    354c:	429a      	cmp	r2, r3
    354e:	d2f0      	bcs.n	3532 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    3550:	2316      	movs	r3, #22
    3552:	18fb      	adds	r3, r7, r3
    3554:	2216      	movs	r2, #22
    3556:	18ba      	adds	r2, r7, r2
    3558:	8812      	ldrh	r2, [r2, #0]
    355a:	3a01      	subs	r2, #1
    355c:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    355e:	2316      	movs	r3, #22
    3560:	18fb      	adds	r3, r7, r3
    3562:	881b      	ldrh	r3, [r3, #0]
    3564:	2bff      	cmp	r3, #255	; 0xff
    3566:	d901      	bls.n	356c <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3568:	2340      	movs	r3, #64	; 0x40
    356a:	e005      	b.n	3578 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    356c:	687b      	ldr	r3, [r7, #4]
    356e:	2216      	movs	r2, #22
    3570:	18ba      	adds	r2, r7, r2
    3572:	8812      	ldrh	r2, [r2, #0]
    3574:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3576:	2300      	movs	r3, #0
	}
}
    3578:	0018      	movs	r0, r3
    357a:	46bd      	mov	sp, r7
    357c:	b006      	add	sp, #24
    357e:	bd80      	pop	{r7, pc}

00003580 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3580:	b580      	push	{r7, lr}
    3582:	b084      	sub	sp, #16
    3584:	af00      	add	r7, sp, #0
    3586:	0002      	movs	r2, r0
    3588:	1dfb      	adds	r3, r7, #7
    358a:	701a      	strb	r2, [r3, #0]
    358c:	1dbb      	adds	r3, r7, #6
    358e:	1c0a      	adds	r2, r1, #0
    3590:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3592:	4b1a      	ldr	r3, [pc, #104]	; (35fc <sercom_set_gclk_generator+0x7c>)
    3594:	781b      	ldrb	r3, [r3, #0]
    3596:	2201      	movs	r2, #1
    3598:	4053      	eors	r3, r2
    359a:	b2db      	uxtb	r3, r3
    359c:	2b00      	cmp	r3, #0
    359e:	d103      	bne.n	35a8 <sercom_set_gclk_generator+0x28>
    35a0:	1dbb      	adds	r3, r7, #6
    35a2:	781b      	ldrb	r3, [r3, #0]
    35a4:	2b00      	cmp	r3, #0
    35a6:	d01b      	beq.n	35e0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    35a8:	230c      	movs	r3, #12
    35aa:	18fb      	adds	r3, r7, r3
    35ac:	0018      	movs	r0, r3
    35ae:	4b14      	ldr	r3, [pc, #80]	; (3600 <sercom_set_gclk_generator+0x80>)
    35b0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    35b2:	230c      	movs	r3, #12
    35b4:	18fb      	adds	r3, r7, r3
    35b6:	1dfa      	adds	r2, r7, #7
    35b8:	7812      	ldrb	r2, [r2, #0]
    35ba:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    35bc:	230c      	movs	r3, #12
    35be:	18fb      	adds	r3, r7, r3
    35c0:	0019      	movs	r1, r3
    35c2:	2013      	movs	r0, #19
    35c4:	4b0f      	ldr	r3, [pc, #60]	; (3604 <sercom_set_gclk_generator+0x84>)
    35c6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    35c8:	2013      	movs	r0, #19
    35ca:	4b0f      	ldr	r3, [pc, #60]	; (3608 <sercom_set_gclk_generator+0x88>)
    35cc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    35ce:	4b0b      	ldr	r3, [pc, #44]	; (35fc <sercom_set_gclk_generator+0x7c>)
    35d0:	1dfa      	adds	r2, r7, #7
    35d2:	7812      	ldrb	r2, [r2, #0]
    35d4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    35d6:	4b09      	ldr	r3, [pc, #36]	; (35fc <sercom_set_gclk_generator+0x7c>)
    35d8:	2201      	movs	r2, #1
    35da:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    35dc:	2300      	movs	r3, #0
    35de:	e008      	b.n	35f2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    35e0:	4b06      	ldr	r3, [pc, #24]	; (35fc <sercom_set_gclk_generator+0x7c>)
    35e2:	785b      	ldrb	r3, [r3, #1]
    35e4:	1dfa      	adds	r2, r7, #7
    35e6:	7812      	ldrb	r2, [r2, #0]
    35e8:	429a      	cmp	r2, r3
    35ea:	d101      	bne.n	35f0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    35ec:	2300      	movs	r3, #0
    35ee:	e000      	b.n	35f2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    35f0:	231d      	movs	r3, #29
}
    35f2:	0018      	movs	r0, r3
    35f4:	46bd      	mov	sp, r7
    35f6:	b004      	add	sp, #16
    35f8:	bd80      	pop	{r7, pc}
    35fa:	46c0      	nop			; (mov r8, r8)
    35fc:	200000d0 	.word	0x200000d0
    3600:	000034ed 	.word	0x000034ed
    3604:	0000bb31 	.word	0x0000bb31
    3608:	0000bb75 	.word	0x0000bb75

0000360c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    360c:	b580      	push	{r7, lr}
    360e:	b082      	sub	sp, #8
    3610:	af00      	add	r7, sp, #0
    3612:	6078      	str	r0, [r7, #4]
    3614:	000a      	movs	r2, r1
    3616:	1cfb      	adds	r3, r7, #3
    3618:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	4a4d      	ldr	r2, [pc, #308]	; (3754 <_sercom_get_default_pad+0x148>)
    361e:	4293      	cmp	r3, r2
    3620:	d03f      	beq.n	36a2 <_sercom_get_default_pad+0x96>
    3622:	4a4c      	ldr	r2, [pc, #304]	; (3754 <_sercom_get_default_pad+0x148>)
    3624:	4293      	cmp	r3, r2
    3626:	d806      	bhi.n	3636 <_sercom_get_default_pad+0x2a>
    3628:	4a4b      	ldr	r2, [pc, #300]	; (3758 <_sercom_get_default_pad+0x14c>)
    362a:	4293      	cmp	r3, r2
    362c:	d00f      	beq.n	364e <_sercom_get_default_pad+0x42>
    362e:	4a4b      	ldr	r2, [pc, #300]	; (375c <_sercom_get_default_pad+0x150>)
    3630:	4293      	cmp	r3, r2
    3632:	d021      	beq.n	3678 <_sercom_get_default_pad+0x6c>
    3634:	e089      	b.n	374a <_sercom_get_default_pad+0x13e>
    3636:	4a4a      	ldr	r2, [pc, #296]	; (3760 <_sercom_get_default_pad+0x154>)
    3638:	4293      	cmp	r3, r2
    363a:	d100      	bne.n	363e <_sercom_get_default_pad+0x32>
    363c:	e05b      	b.n	36f6 <_sercom_get_default_pad+0xea>
    363e:	4a49      	ldr	r2, [pc, #292]	; (3764 <_sercom_get_default_pad+0x158>)
    3640:	4293      	cmp	r3, r2
    3642:	d100      	bne.n	3646 <_sercom_get_default_pad+0x3a>
    3644:	e06c      	b.n	3720 <_sercom_get_default_pad+0x114>
    3646:	4a48      	ldr	r2, [pc, #288]	; (3768 <_sercom_get_default_pad+0x15c>)
    3648:	4293      	cmp	r3, r2
    364a:	d03f      	beq.n	36cc <_sercom_get_default_pad+0xc0>
    364c:	e07d      	b.n	374a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    364e:	1cfb      	adds	r3, r7, #3
    3650:	781b      	ldrb	r3, [r3, #0]
    3652:	2b01      	cmp	r3, #1
    3654:	d00a      	beq.n	366c <_sercom_get_default_pad+0x60>
    3656:	dc02      	bgt.n	365e <_sercom_get_default_pad+0x52>
    3658:	2b00      	cmp	r3, #0
    365a:	d005      	beq.n	3668 <_sercom_get_default_pad+0x5c>
    365c:	e075      	b.n	374a <_sercom_get_default_pad+0x13e>
    365e:	2b02      	cmp	r3, #2
    3660:	d006      	beq.n	3670 <_sercom_get_default_pad+0x64>
    3662:	2b03      	cmp	r3, #3
    3664:	d006      	beq.n	3674 <_sercom_get_default_pad+0x68>
    3666:	e070      	b.n	374a <_sercom_get_default_pad+0x13e>
    3668:	4b40      	ldr	r3, [pc, #256]	; (376c <_sercom_get_default_pad+0x160>)
    366a:	e06f      	b.n	374c <_sercom_get_default_pad+0x140>
    366c:	4b40      	ldr	r3, [pc, #256]	; (3770 <_sercom_get_default_pad+0x164>)
    366e:	e06d      	b.n	374c <_sercom_get_default_pad+0x140>
    3670:	4b40      	ldr	r3, [pc, #256]	; (3774 <_sercom_get_default_pad+0x168>)
    3672:	e06b      	b.n	374c <_sercom_get_default_pad+0x140>
    3674:	4b40      	ldr	r3, [pc, #256]	; (3778 <_sercom_get_default_pad+0x16c>)
    3676:	e069      	b.n	374c <_sercom_get_default_pad+0x140>
    3678:	1cfb      	adds	r3, r7, #3
    367a:	781b      	ldrb	r3, [r3, #0]
    367c:	2b01      	cmp	r3, #1
    367e:	d00a      	beq.n	3696 <_sercom_get_default_pad+0x8a>
    3680:	dc02      	bgt.n	3688 <_sercom_get_default_pad+0x7c>
    3682:	2b00      	cmp	r3, #0
    3684:	d005      	beq.n	3692 <_sercom_get_default_pad+0x86>
    3686:	e060      	b.n	374a <_sercom_get_default_pad+0x13e>
    3688:	2b02      	cmp	r3, #2
    368a:	d006      	beq.n	369a <_sercom_get_default_pad+0x8e>
    368c:	2b03      	cmp	r3, #3
    368e:	d006      	beq.n	369e <_sercom_get_default_pad+0x92>
    3690:	e05b      	b.n	374a <_sercom_get_default_pad+0x13e>
    3692:	4b3a      	ldr	r3, [pc, #232]	; (377c <_sercom_get_default_pad+0x170>)
    3694:	e05a      	b.n	374c <_sercom_get_default_pad+0x140>
    3696:	4b3a      	ldr	r3, [pc, #232]	; (3780 <_sercom_get_default_pad+0x174>)
    3698:	e058      	b.n	374c <_sercom_get_default_pad+0x140>
    369a:	4b3a      	ldr	r3, [pc, #232]	; (3784 <_sercom_get_default_pad+0x178>)
    369c:	e056      	b.n	374c <_sercom_get_default_pad+0x140>
    369e:	4b3a      	ldr	r3, [pc, #232]	; (3788 <_sercom_get_default_pad+0x17c>)
    36a0:	e054      	b.n	374c <_sercom_get_default_pad+0x140>
    36a2:	1cfb      	adds	r3, r7, #3
    36a4:	781b      	ldrb	r3, [r3, #0]
    36a6:	2b01      	cmp	r3, #1
    36a8:	d00a      	beq.n	36c0 <_sercom_get_default_pad+0xb4>
    36aa:	dc02      	bgt.n	36b2 <_sercom_get_default_pad+0xa6>
    36ac:	2b00      	cmp	r3, #0
    36ae:	d005      	beq.n	36bc <_sercom_get_default_pad+0xb0>
    36b0:	e04b      	b.n	374a <_sercom_get_default_pad+0x13e>
    36b2:	2b02      	cmp	r3, #2
    36b4:	d006      	beq.n	36c4 <_sercom_get_default_pad+0xb8>
    36b6:	2b03      	cmp	r3, #3
    36b8:	d006      	beq.n	36c8 <_sercom_get_default_pad+0xbc>
    36ba:	e046      	b.n	374a <_sercom_get_default_pad+0x13e>
    36bc:	4b33      	ldr	r3, [pc, #204]	; (378c <_sercom_get_default_pad+0x180>)
    36be:	e045      	b.n	374c <_sercom_get_default_pad+0x140>
    36c0:	4b33      	ldr	r3, [pc, #204]	; (3790 <_sercom_get_default_pad+0x184>)
    36c2:	e043      	b.n	374c <_sercom_get_default_pad+0x140>
    36c4:	4b33      	ldr	r3, [pc, #204]	; (3794 <_sercom_get_default_pad+0x188>)
    36c6:	e041      	b.n	374c <_sercom_get_default_pad+0x140>
    36c8:	4b33      	ldr	r3, [pc, #204]	; (3798 <_sercom_get_default_pad+0x18c>)
    36ca:	e03f      	b.n	374c <_sercom_get_default_pad+0x140>
    36cc:	1cfb      	adds	r3, r7, #3
    36ce:	781b      	ldrb	r3, [r3, #0]
    36d0:	2b01      	cmp	r3, #1
    36d2:	d00a      	beq.n	36ea <_sercom_get_default_pad+0xde>
    36d4:	dc02      	bgt.n	36dc <_sercom_get_default_pad+0xd0>
    36d6:	2b00      	cmp	r3, #0
    36d8:	d005      	beq.n	36e6 <_sercom_get_default_pad+0xda>
    36da:	e036      	b.n	374a <_sercom_get_default_pad+0x13e>
    36dc:	2b02      	cmp	r3, #2
    36de:	d006      	beq.n	36ee <_sercom_get_default_pad+0xe2>
    36e0:	2b03      	cmp	r3, #3
    36e2:	d006      	beq.n	36f2 <_sercom_get_default_pad+0xe6>
    36e4:	e031      	b.n	374a <_sercom_get_default_pad+0x13e>
    36e6:	4b2d      	ldr	r3, [pc, #180]	; (379c <_sercom_get_default_pad+0x190>)
    36e8:	e030      	b.n	374c <_sercom_get_default_pad+0x140>
    36ea:	4b2d      	ldr	r3, [pc, #180]	; (37a0 <_sercom_get_default_pad+0x194>)
    36ec:	e02e      	b.n	374c <_sercom_get_default_pad+0x140>
    36ee:	4b2d      	ldr	r3, [pc, #180]	; (37a4 <_sercom_get_default_pad+0x198>)
    36f0:	e02c      	b.n	374c <_sercom_get_default_pad+0x140>
    36f2:	4b2d      	ldr	r3, [pc, #180]	; (37a8 <_sercom_get_default_pad+0x19c>)
    36f4:	e02a      	b.n	374c <_sercom_get_default_pad+0x140>
    36f6:	1cfb      	adds	r3, r7, #3
    36f8:	781b      	ldrb	r3, [r3, #0]
    36fa:	2b01      	cmp	r3, #1
    36fc:	d00a      	beq.n	3714 <_sercom_get_default_pad+0x108>
    36fe:	dc02      	bgt.n	3706 <_sercom_get_default_pad+0xfa>
    3700:	2b00      	cmp	r3, #0
    3702:	d005      	beq.n	3710 <_sercom_get_default_pad+0x104>
    3704:	e021      	b.n	374a <_sercom_get_default_pad+0x13e>
    3706:	2b02      	cmp	r3, #2
    3708:	d006      	beq.n	3718 <_sercom_get_default_pad+0x10c>
    370a:	2b03      	cmp	r3, #3
    370c:	d006      	beq.n	371c <_sercom_get_default_pad+0x110>
    370e:	e01c      	b.n	374a <_sercom_get_default_pad+0x13e>
    3710:	4b26      	ldr	r3, [pc, #152]	; (37ac <_sercom_get_default_pad+0x1a0>)
    3712:	e01b      	b.n	374c <_sercom_get_default_pad+0x140>
    3714:	4b26      	ldr	r3, [pc, #152]	; (37b0 <_sercom_get_default_pad+0x1a4>)
    3716:	e019      	b.n	374c <_sercom_get_default_pad+0x140>
    3718:	4b26      	ldr	r3, [pc, #152]	; (37b4 <_sercom_get_default_pad+0x1a8>)
    371a:	e017      	b.n	374c <_sercom_get_default_pad+0x140>
    371c:	4b26      	ldr	r3, [pc, #152]	; (37b8 <_sercom_get_default_pad+0x1ac>)
    371e:	e015      	b.n	374c <_sercom_get_default_pad+0x140>
    3720:	1cfb      	adds	r3, r7, #3
    3722:	781b      	ldrb	r3, [r3, #0]
    3724:	2b01      	cmp	r3, #1
    3726:	d00a      	beq.n	373e <_sercom_get_default_pad+0x132>
    3728:	dc02      	bgt.n	3730 <_sercom_get_default_pad+0x124>
    372a:	2b00      	cmp	r3, #0
    372c:	d005      	beq.n	373a <_sercom_get_default_pad+0x12e>
    372e:	e00c      	b.n	374a <_sercom_get_default_pad+0x13e>
    3730:	2b02      	cmp	r3, #2
    3732:	d006      	beq.n	3742 <_sercom_get_default_pad+0x136>
    3734:	2b03      	cmp	r3, #3
    3736:	d006      	beq.n	3746 <_sercom_get_default_pad+0x13a>
    3738:	e007      	b.n	374a <_sercom_get_default_pad+0x13e>
    373a:	4b20      	ldr	r3, [pc, #128]	; (37bc <_sercom_get_default_pad+0x1b0>)
    373c:	e006      	b.n	374c <_sercom_get_default_pad+0x140>
    373e:	4b20      	ldr	r3, [pc, #128]	; (37c0 <_sercom_get_default_pad+0x1b4>)
    3740:	e004      	b.n	374c <_sercom_get_default_pad+0x140>
    3742:	4b20      	ldr	r3, [pc, #128]	; (37c4 <_sercom_get_default_pad+0x1b8>)
    3744:	e002      	b.n	374c <_sercom_get_default_pad+0x140>
    3746:	4b20      	ldr	r3, [pc, #128]	; (37c8 <_sercom_get_default_pad+0x1bc>)
    3748:	e000      	b.n	374c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    374a:	2300      	movs	r3, #0
}
    374c:	0018      	movs	r0, r3
    374e:	46bd      	mov	sp, r7
    3750:	b002      	add	sp, #8
    3752:	bd80      	pop	{r7, pc}
    3754:	42001000 	.word	0x42001000
    3758:	42000800 	.word	0x42000800
    375c:	42000c00 	.word	0x42000c00
    3760:	42001800 	.word	0x42001800
    3764:	42001c00 	.word	0x42001c00
    3768:	42001400 	.word	0x42001400
    376c:	00080002 	.word	0x00080002
    3770:	00090002 	.word	0x00090002
    3774:	00060003 	.word	0x00060003
    3778:	00070003 	.word	0x00070003
    377c:	00100002 	.word	0x00100002
    3780:	00110002 	.word	0x00110002
    3784:	00120002 	.word	0x00120002
    3788:	00130002 	.word	0x00130002
    378c:	00080003 	.word	0x00080003
    3790:	00090003 	.word	0x00090003
    3794:	000e0002 	.word	0x000e0002
    3798:	000f0002 	.word	0x000f0002
    379c:	001b0005 	.word	0x001b0005
    37a0:	001c0005 	.word	0x001c0005
    37a4:	00180002 	.word	0x00180002
    37a8:	00190002 	.word	0x00190002
    37ac:	00530005 	.word	0x00530005
    37b0:	003f0005 	.word	0x003f0005
    37b4:	003e0005 	.word	0x003e0005
    37b8:	00520005 	.word	0x00520005
    37bc:	003e0003 	.word	0x003e0003
    37c0:	003f0003 	.word	0x003f0003
    37c4:	00180003 	.word	0x00180003
    37c8:	00190003 	.word	0x00190003

000037cc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    37cc:	b590      	push	{r4, r7, lr}
    37ce:	b08b      	sub	sp, #44	; 0x2c
    37d0:	af00      	add	r7, sp, #0
    37d2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    37d4:	230c      	movs	r3, #12
    37d6:	18fb      	adds	r3, r7, r3
    37d8:	4a0f      	ldr	r2, [pc, #60]	; (3818 <_sercom_get_sercom_inst_index+0x4c>)
    37da:	ca13      	ldmia	r2!, {r0, r1, r4}
    37dc:	c313      	stmia	r3!, {r0, r1, r4}
    37de:	ca13      	ldmia	r2!, {r0, r1, r4}
    37e0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    37e2:	2300      	movs	r3, #0
    37e4:	627b      	str	r3, [r7, #36]	; 0x24
    37e6:	e00e      	b.n	3806 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    37e8:	230c      	movs	r3, #12
    37ea:	18fb      	adds	r3, r7, r3
    37ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    37ee:	0092      	lsls	r2, r2, #2
    37f0:	58d3      	ldr	r3, [r2, r3]
    37f2:	1e1a      	subs	r2, r3, #0
    37f4:	687b      	ldr	r3, [r7, #4]
    37f6:	429a      	cmp	r2, r3
    37f8:	d102      	bne.n	3800 <_sercom_get_sercom_inst_index+0x34>
			return i;
    37fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37fc:	b2db      	uxtb	r3, r3
    37fe:	e006      	b.n	380e <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3802:	3301      	adds	r3, #1
    3804:	627b      	str	r3, [r7, #36]	; 0x24
    3806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3808:	2b05      	cmp	r3, #5
    380a:	d9ed      	bls.n	37e8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    380c:	2300      	movs	r3, #0
}
    380e:	0018      	movs	r0, r3
    3810:	46bd      	mov	sp, r7
    3812:	b00b      	add	sp, #44	; 0x2c
    3814:	bd90      	pop	{r4, r7, pc}
    3816:	46c0      	nop			; (mov r8, r8)
    3818:	0000fa3c 	.word	0x0000fa3c

0000381c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    381c:	b580      	push	{r7, lr}
    381e:	b082      	sub	sp, #8
    3820:	af00      	add	r7, sp, #0
    3822:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3824:	687b      	ldr	r3, [r7, #4]
    3826:	2200      	movs	r2, #0
    3828:	701a      	strb	r2, [r3, #0]
}
    382a:	46c0      	nop			; (mov r8, r8)
    382c:	46bd      	mov	sp, r7
    382e:	b002      	add	sp, #8
    3830:	bd80      	pop	{r7, pc}
    3832:	46c0      	nop			; (mov r8, r8)

00003834 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3834:	b580      	push	{r7, lr}
    3836:	b082      	sub	sp, #8
    3838:	af00      	add	r7, sp, #0
    383a:	0002      	movs	r2, r0
    383c:	6039      	str	r1, [r7, #0]
    383e:	1dfb      	adds	r3, r7, #7
    3840:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3842:	1dfb      	adds	r3, r7, #7
    3844:	781b      	ldrb	r3, [r3, #0]
    3846:	2b01      	cmp	r3, #1
    3848:	d00a      	beq.n	3860 <system_apb_clock_set_mask+0x2c>
    384a:	2b02      	cmp	r3, #2
    384c:	d00f      	beq.n	386e <system_apb_clock_set_mask+0x3a>
    384e:	2b00      	cmp	r3, #0
    3850:	d114      	bne.n	387c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3852:	4b0e      	ldr	r3, [pc, #56]	; (388c <system_apb_clock_set_mask+0x58>)
    3854:	4a0d      	ldr	r2, [pc, #52]	; (388c <system_apb_clock_set_mask+0x58>)
    3856:	6991      	ldr	r1, [r2, #24]
    3858:	683a      	ldr	r2, [r7, #0]
    385a:	430a      	orrs	r2, r1
    385c:	619a      	str	r2, [r3, #24]
			break;
    385e:	e00f      	b.n	3880 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3860:	4b0a      	ldr	r3, [pc, #40]	; (388c <system_apb_clock_set_mask+0x58>)
    3862:	4a0a      	ldr	r2, [pc, #40]	; (388c <system_apb_clock_set_mask+0x58>)
    3864:	69d1      	ldr	r1, [r2, #28]
    3866:	683a      	ldr	r2, [r7, #0]
    3868:	430a      	orrs	r2, r1
    386a:	61da      	str	r2, [r3, #28]
			break;
    386c:	e008      	b.n	3880 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    386e:	4b07      	ldr	r3, [pc, #28]	; (388c <system_apb_clock_set_mask+0x58>)
    3870:	4a06      	ldr	r2, [pc, #24]	; (388c <system_apb_clock_set_mask+0x58>)
    3872:	6a11      	ldr	r1, [r2, #32]
    3874:	683a      	ldr	r2, [r7, #0]
    3876:	430a      	orrs	r2, r1
    3878:	621a      	str	r2, [r3, #32]
			break;
    387a:	e001      	b.n	3880 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    387c:	2317      	movs	r3, #23
    387e:	e000      	b.n	3882 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3880:	2300      	movs	r3, #0
}
    3882:	0018      	movs	r0, r3
    3884:	46bd      	mov	sp, r7
    3886:	b002      	add	sp, #8
    3888:	bd80      	pop	{r7, pc}
    388a:	46c0      	nop			; (mov r8, r8)
    388c:	40000400 	.word	0x40000400

00003890 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3890:	b580      	push	{r7, lr}
    3892:	b082      	sub	sp, #8
    3894:	af00      	add	r7, sp, #0
    3896:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	2280      	movs	r2, #128	; 0x80
    389c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    389e:	687b      	ldr	r3, [r7, #4]
    38a0:	2200      	movs	r2, #0
    38a2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    38a4:	687b      	ldr	r3, [r7, #4]
    38a6:	2201      	movs	r2, #1
    38a8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    38aa:	687b      	ldr	r3, [r7, #4]
    38ac:	2200      	movs	r2, #0
    38ae:	70da      	strb	r2, [r3, #3]
}
    38b0:	46c0      	nop			; (mov r8, r8)
    38b2:	46bd      	mov	sp, r7
    38b4:	b002      	add	sp, #8
    38b6:	bd80      	pop	{r7, pc}

000038b8 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    38b8:	b580      	push	{r7, lr}
    38ba:	b084      	sub	sp, #16
    38bc:	af00      	add	r7, sp, #0
    38be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    38c0:	687b      	ldr	r3, [r7, #4]
    38c2:	681b      	ldr	r3, [r3, #0]
    38c4:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    38c6:	68fb      	ldr	r3, [r7, #12]
    38c8:	7bdb      	ldrb	r3, [r3, #15]
    38ca:	b2db      	uxtb	r3, r3
    38cc:	001a      	movs	r2, r3
    38ce:	2380      	movs	r3, #128	; 0x80
    38d0:	4013      	ands	r3, r2
    38d2:	1e5a      	subs	r2, r3, #1
    38d4:	4193      	sbcs	r3, r2
    38d6:	b2db      	uxtb	r3, r3
#endif
}
    38d8:	0018      	movs	r0, r3
    38da:	46bd      	mov	sp, r7
    38dc:	b004      	add	sp, #16
    38de:	bd80      	pop	{r7, pc}

000038e0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    38e0:	b590      	push	{r4, r7, lr}
    38e2:	b087      	sub	sp, #28
    38e4:	af00      	add	r7, sp, #0
    38e6:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    38e8:	2308      	movs	r3, #8
    38ea:	18fb      	adds	r3, r7, r3
    38ec:	4a0d      	ldr	r2, [pc, #52]	; (3924 <_tc_get_inst_index+0x44>)
    38ee:	ca13      	ldmia	r2!, {r0, r1, r4}
    38f0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    38f2:	2300      	movs	r3, #0
    38f4:	617b      	str	r3, [r7, #20]
    38f6:	e00d      	b.n	3914 <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
    38f8:	2308      	movs	r3, #8
    38fa:	18fb      	adds	r3, r7, r3
    38fc:	697a      	ldr	r2, [r7, #20]
    38fe:	0092      	lsls	r2, r2, #2
    3900:	58d2      	ldr	r2, [r2, r3]
    3902:	687b      	ldr	r3, [r7, #4]
    3904:	429a      	cmp	r2, r3
    3906:	d102      	bne.n	390e <_tc_get_inst_index+0x2e>
			return i;
    3908:	697b      	ldr	r3, [r7, #20]
    390a:	b2db      	uxtb	r3, r3
    390c:	e006      	b.n	391c <_tc_get_inst_index+0x3c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    390e:	697b      	ldr	r3, [r7, #20]
    3910:	3301      	adds	r3, #1
    3912:	617b      	str	r3, [r7, #20]
    3914:	697b      	ldr	r3, [r7, #20]
    3916:	2b02      	cmp	r3, #2
    3918:	d9ee      	bls.n	38f8 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    391a:	2300      	movs	r3, #0
}
    391c:	0018      	movs	r0, r3
    391e:	46bd      	mov	sp, r7
    3920:	b007      	add	sp, #28
    3922:	bd90      	pop	{r4, r7, pc}
    3924:	0000fa54 	.word	0x0000fa54

00003928 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    3928:	b590      	push	{r4, r7, lr}
    392a:	b08d      	sub	sp, #52	; 0x34
    392c:	af00      	add	r7, sp, #0
    392e:	60f8      	str	r0, [r7, #12]
    3930:	60b9      	str	r1, [r7, #8]
    3932:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    3934:	232e      	movs	r3, #46	; 0x2e
    3936:	18fb      	adds	r3, r7, r3
    3938:	2200      	movs	r2, #0
    393a:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    393c:	232d      	movs	r3, #45	; 0x2d
    393e:	18fb      	adds	r3, r7, r3
    3940:	2200      	movs	r2, #0
    3942:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    3944:	232c      	movs	r3, #44	; 0x2c
    3946:	18fb      	adds	r3, r7, r3
    3948:	2200      	movs	r2, #0
    394a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    394c:	2329      	movs	r3, #41	; 0x29
    394e:	18fc      	adds	r4, r7, r3
    3950:	68bb      	ldr	r3, [r7, #8]
    3952:	0018      	movs	r0, r3
    3954:	4bbf      	ldr	r3, [pc, #764]	; (3c54 <tc_init+0x32c>)
    3956:	4798      	blx	r3
    3958:	0003      	movs	r3, r0
    395a:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    395c:	2324      	movs	r3, #36	; 0x24
    395e:	18fa      	adds	r2, r7, r3
    3960:	4bbd      	ldr	r3, [pc, #756]	; (3c58 <tc_init+0x330>)
    3962:	0010      	movs	r0, r2
    3964:	0019      	movs	r1, r3
    3966:	2303      	movs	r3, #3
    3968:	001a      	movs	r2, r3
    396a:	4bbc      	ldr	r3, [pc, #752]	; (3c5c <tc_init+0x334>)
    396c:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    396e:	231c      	movs	r3, #28
    3970:	18fa      	adds	r2, r7, r3
    3972:	4bbb      	ldr	r3, [pc, #748]	; (3c60 <tc_init+0x338>)
    3974:	0010      	movs	r0, r2
    3976:	0019      	movs	r1, r3
    3978:	2306      	movs	r3, #6
    397a:	001a      	movs	r2, r3
    397c:	4bb7      	ldr	r3, [pc, #732]	; (3c5c <tc_init+0x334>)
    397e:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    3980:	232b      	movs	r3, #43	; 0x2b
    3982:	18fb      	adds	r3, r7, r3
    3984:	2200      	movs	r2, #0
    3986:	701a      	strb	r2, [r3, #0]
    3988:	e00e      	b.n	39a8 <tc_init+0x80>
		module_inst->callback[i]        = NULL;
    398a:	232b      	movs	r3, #43	; 0x2b
    398c:	18fb      	adds	r3, r7, r3
    398e:	781a      	ldrb	r2, [r3, #0]
    3990:	68fb      	ldr	r3, [r7, #12]
    3992:	3202      	adds	r2, #2
    3994:	0092      	lsls	r2, r2, #2
    3996:	2100      	movs	r1, #0
    3998:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    399a:	232b      	movs	r3, #43	; 0x2b
    399c:	18fb      	adds	r3, r7, r3
    399e:	781a      	ldrb	r2, [r3, #0]
    39a0:	232b      	movs	r3, #43	; 0x2b
    39a2:	18fb      	adds	r3, r7, r3
    39a4:	3201      	adds	r2, #1
    39a6:	701a      	strb	r2, [r3, #0]
    39a8:	232b      	movs	r3, #43	; 0x2b
    39aa:	18fb      	adds	r3, r7, r3
    39ac:	781b      	ldrb	r3, [r3, #0]
    39ae:	2b03      	cmp	r3, #3
    39b0:	d9eb      	bls.n	398a <tc_init+0x62>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
    39b2:	68fb      	ldr	r3, [r7, #12]
    39b4:	2200      	movs	r2, #0
    39b6:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    39b8:	68fb      	ldr	r3, [r7, #12]
    39ba:	2200      	movs	r2, #0
    39bc:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    39be:	2329      	movs	r3, #41	; 0x29
    39c0:	18fb      	adds	r3, r7, r3
    39c2:	781a      	ldrb	r2, [r3, #0]
    39c4:	4ba7      	ldr	r3, [pc, #668]	; (3c64 <tc_init+0x33c>)
    39c6:	0092      	lsls	r2, r2, #2
    39c8:	68f9      	ldr	r1, [r7, #12]
    39ca:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    39cc:	68fb      	ldr	r3, [r7, #12]
    39ce:	68ba      	ldr	r2, [r7, #8]
    39d0:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	789b      	ldrb	r3, [r3, #2]
    39d6:	2b08      	cmp	r3, #8
    39d8:	d108      	bne.n	39ec <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    39da:	2329      	movs	r3, #41	; 0x29
    39dc:	18fb      	adds	r3, r7, r3
    39de:	781b      	ldrb	r3, [r3, #0]
    39e0:	3303      	adds	r3, #3
    39e2:	2201      	movs	r2, #1
    39e4:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    39e6:	d001      	beq.n	39ec <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    39e8:	2317      	movs	r3, #23
    39ea:	e1c4      	b.n	3d76 <tc_init+0x44e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    39ec:	687b      	ldr	r3, [r7, #4]
    39ee:	789a      	ldrb	r2, [r3, #2]
    39f0:	68fb      	ldr	r3, [r7, #12]
    39f2:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    39f4:	68bb      	ldr	r3, [r7, #8]
    39f6:	881b      	ldrh	r3, [r3, #0]
    39f8:	b29b      	uxth	r3, r3
    39fa:	001a      	movs	r2, r3
    39fc:	2301      	movs	r3, #1
    39fe:	4013      	ands	r3, r2
    3a00:	d001      	beq.n	3a06 <tc_init+0xde>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    3a02:	2305      	movs	r3, #5
    3a04:	e1b7      	b.n	3d76 <tc_init+0x44e>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    3a06:	68bb      	ldr	r3, [r7, #8]
    3a08:	7bdb      	ldrb	r3, [r3, #15]
    3a0a:	b2db      	uxtb	r3, r3
    3a0c:	001a      	movs	r2, r3
    3a0e:	2310      	movs	r3, #16
    3a10:	4013      	ands	r3, r2
    3a12:	d001      	beq.n	3a18 <tc_init+0xf0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    3a14:	231c      	movs	r3, #28
    3a16:	e1ae      	b.n	3d76 <tc_init+0x44e>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    3a18:	68bb      	ldr	r3, [r7, #8]
    3a1a:	881b      	ldrh	r3, [r3, #0]
    3a1c:	b29b      	uxth	r3, r3
    3a1e:	001a      	movs	r2, r3
    3a20:	2302      	movs	r3, #2
    3a22:	4013      	ands	r3, r2
    3a24:	d001      	beq.n	3a2a <tc_init+0x102>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    3a26:	231c      	movs	r3, #28
    3a28:	e1a5      	b.n	3d76 <tc_init+0x44e>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	7c1b      	ldrb	r3, [r3, #16]
    3a2e:	2b00      	cmp	r3, #0
    3a30:	d017      	beq.n	3a62 <tc_init+0x13a>
		system_pinmux_get_config_defaults(&pin_config);
    3a32:	2318      	movs	r3, #24
    3a34:	18fb      	adds	r3, r7, r3
    3a36:	0018      	movs	r0, r3
    3a38:	4b8b      	ldr	r3, [pc, #556]	; (3c68 <tc_init+0x340>)
    3a3a:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    3a3c:	687b      	ldr	r3, [r7, #4]
    3a3e:	699b      	ldr	r3, [r3, #24]
    3a40:	b2da      	uxtb	r2, r3
    3a42:	2318      	movs	r3, #24
    3a44:	18fb      	adds	r3, r7, r3
    3a46:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3a48:	2318      	movs	r3, #24
    3a4a:	18fb      	adds	r3, r7, r3
    3a4c:	2201      	movs	r2, #1
    3a4e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    3a50:	687b      	ldr	r3, [r7, #4]
    3a52:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    3a54:	b2db      	uxtb	r3, r3
    3a56:	2218      	movs	r2, #24
    3a58:	18ba      	adds	r2, r7, r2
    3a5a:	0011      	movs	r1, r2
    3a5c:	0018      	movs	r0, r3
    3a5e:	4b83      	ldr	r3, [pc, #524]	; (3c6c <tc_init+0x344>)
    3a60:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    3a62:	687b      	ldr	r3, [r7, #4]
    3a64:	7f1b      	ldrb	r3, [r3, #28]
    3a66:	2b00      	cmp	r3, #0
    3a68:	d017      	beq.n	3a9a <tc_init+0x172>
		system_pinmux_get_config_defaults(&pin_config);
    3a6a:	2318      	movs	r3, #24
    3a6c:	18fb      	adds	r3, r7, r3
    3a6e:	0018      	movs	r0, r3
    3a70:	4b7d      	ldr	r3, [pc, #500]	; (3c68 <tc_init+0x340>)
    3a72:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    3a74:	687b      	ldr	r3, [r7, #4]
    3a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3a78:	b2da      	uxtb	r2, r3
    3a7a:	2318      	movs	r3, #24
    3a7c:	18fb      	adds	r3, r7, r3
    3a7e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3a80:	2318      	movs	r3, #24
    3a82:	18fb      	adds	r3, r7, r3
    3a84:	2201      	movs	r2, #1
    3a86:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    3a88:	687b      	ldr	r3, [r7, #4]
    3a8a:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    3a8c:	b2db      	uxtb	r3, r3
    3a8e:	2218      	movs	r2, #24
    3a90:	18ba      	adds	r2, r7, r2
    3a92:	0011      	movs	r1, r2
    3a94:	0018      	movs	r0, r3
    3a96:	4b75      	ldr	r3, [pc, #468]	; (3c6c <tc_init+0x344>)
    3a98:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    3a9a:	2329      	movs	r3, #41	; 0x29
    3a9c:	18fb      	adds	r3, r7, r3
    3a9e:	781a      	ldrb	r2, [r3, #0]
    3aa0:	231c      	movs	r3, #28
    3aa2:	18fb      	adds	r3, r7, r3
    3aa4:	0052      	lsls	r2, r2, #1
    3aa6:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    3aa8:	0019      	movs	r1, r3
    3aaa:	2002      	movs	r0, #2
    3aac:	4b70      	ldr	r3, [pc, #448]	; (3c70 <tc_init+0x348>)
    3aae:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    3ab0:	687b      	ldr	r3, [r7, #4]
    3ab2:	789b      	ldrb	r3, [r3, #2]
    3ab4:	2b08      	cmp	r3, #8
    3ab6:	d10b      	bne.n	3ad0 <tc_init+0x1a8>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    3ab8:	2329      	movs	r3, #41	; 0x29
    3aba:	18fb      	adds	r3, r7, r3
    3abc:	781b      	ldrb	r3, [r3, #0]
    3abe:	1c5a      	adds	r2, r3, #1
    3ac0:	231c      	movs	r3, #28
    3ac2:	18fb      	adds	r3, r7, r3
    3ac4:	0052      	lsls	r2, r2, #1
    3ac6:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    3ac8:	0019      	movs	r1, r3
    3aca:	2002      	movs	r0, #2
    3acc:	4b68      	ldr	r3, [pc, #416]	; (3c70 <tc_init+0x348>)
    3ace:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    3ad0:	2314      	movs	r3, #20
    3ad2:	18fb      	adds	r3, r7, r3
    3ad4:	0018      	movs	r0, r3
    3ad6:	4b67      	ldr	r3, [pc, #412]	; (3c74 <tc_init+0x34c>)
    3ad8:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    3ada:	687b      	ldr	r3, [r7, #4]
    3adc:	781a      	ldrb	r2, [r3, #0]
    3ade:	2314      	movs	r3, #20
    3ae0:	18fb      	adds	r3, r7, r3
    3ae2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    3ae4:	2329      	movs	r3, #41	; 0x29
    3ae6:	18fb      	adds	r3, r7, r3
    3ae8:	781b      	ldrb	r3, [r3, #0]
    3aea:	2224      	movs	r2, #36	; 0x24
    3aec:	18ba      	adds	r2, r7, r2
    3aee:	5cd3      	ldrb	r3, [r2, r3]
    3af0:	2214      	movs	r2, #20
    3af2:	18ba      	adds	r2, r7, r2
    3af4:	0011      	movs	r1, r2
    3af6:	0018      	movs	r0, r3
    3af8:	4b5f      	ldr	r3, [pc, #380]	; (3c78 <tc_init+0x350>)
    3afa:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    3afc:	2329      	movs	r3, #41	; 0x29
    3afe:	18fb      	adds	r3, r7, r3
    3b00:	781b      	ldrb	r3, [r3, #0]
    3b02:	2224      	movs	r2, #36	; 0x24
    3b04:	18ba      	adds	r2, r7, r2
    3b06:	5cd3      	ldrb	r3, [r2, r3]
    3b08:	0018      	movs	r0, r3
    3b0a:	4b5c      	ldr	r3, [pc, #368]	; (3c7c <tc_init+0x354>)
    3b0c:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    3b0e:	687b      	ldr	r3, [r7, #4]
    3b10:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    3b12:	687b      	ldr	r3, [r7, #4]
    3b14:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    3b16:	4313      	orrs	r3, r2
    3b18:	b2db      	uxtb	r3, r3
    3b1a:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
    3b1c:	687b      	ldr	r3, [r7, #4]
    3b1e:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    3b20:	4313      	orrs	r3, r2
    3b22:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    3b24:	687b      	ldr	r3, [r7, #4]
    3b26:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    3b28:	232e      	movs	r3, #46	; 0x2e
    3b2a:	18fb      	adds	r3, r7, r3
    3b2c:	430a      	orrs	r2, r1
    3b2e:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    3b30:	687b      	ldr	r3, [r7, #4]
    3b32:	785b      	ldrb	r3, [r3, #1]
    3b34:	2b00      	cmp	r3, #0
    3b36:	d008      	beq.n	3b4a <tc_init+0x222>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    3b38:	232e      	movs	r3, #46	; 0x2e
    3b3a:	18fb      	adds	r3, r7, r3
    3b3c:	222e      	movs	r2, #46	; 0x2e
    3b3e:	18ba      	adds	r2, r7, r2
    3b40:	8812      	ldrh	r2, [r2, #0]
    3b42:	2180      	movs	r1, #128	; 0x80
    3b44:	0109      	lsls	r1, r1, #4
    3b46:	430a      	orrs	r2, r1
    3b48:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    3b4a:	46c0      	nop			; (mov r8, r8)
    3b4c:	68fb      	ldr	r3, [r7, #12]
    3b4e:	0018      	movs	r0, r3
    3b50:	4b4b      	ldr	r3, [pc, #300]	; (3c80 <tc_init+0x358>)
    3b52:	4798      	blx	r3
    3b54:	1e03      	subs	r3, r0, #0
    3b56:	d1f9      	bne.n	3b4c <tc_init+0x224>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    3b58:	68bb      	ldr	r3, [r7, #8]
    3b5a:	222e      	movs	r2, #46	; 0x2e
    3b5c:	18ba      	adds	r2, r7, r2
    3b5e:	8812      	ldrh	r2, [r2, #0]
    3b60:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    3b62:	687b      	ldr	r3, [r7, #4]
    3b64:	7b5b      	ldrb	r3, [r3, #13]
    3b66:	2b00      	cmp	r3, #0
    3b68:	d003      	beq.n	3b72 <tc_init+0x24a>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    3b6a:	232d      	movs	r3, #45	; 0x2d
    3b6c:	18fb      	adds	r3, r7, r3
    3b6e:	2204      	movs	r2, #4
    3b70:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    3b72:	687b      	ldr	r3, [r7, #4]
    3b74:	7b9b      	ldrb	r3, [r3, #14]
    3b76:	2b00      	cmp	r3, #0
    3b78:	d007      	beq.n	3b8a <tc_init+0x262>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    3b7a:	232d      	movs	r3, #45	; 0x2d
    3b7c:	18fb      	adds	r3, r7, r3
    3b7e:	222d      	movs	r2, #45	; 0x2d
    3b80:	18ba      	adds	r2, r7, r2
    3b82:	7812      	ldrb	r2, [r2, #0]
    3b84:	2101      	movs	r1, #1
    3b86:	430a      	orrs	r2, r1
    3b88:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    3b8a:	46c0      	nop			; (mov r8, r8)
    3b8c:	68fb      	ldr	r3, [r7, #12]
    3b8e:	0018      	movs	r0, r3
    3b90:	4b3b      	ldr	r3, [pc, #236]	; (3c80 <tc_init+0x358>)
    3b92:	4798      	blx	r3
    3b94:	1e03      	subs	r3, r0, #0
    3b96:	d1f9      	bne.n	3b8c <tc_init+0x264>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    3b98:	68bb      	ldr	r3, [r7, #8]
    3b9a:	22ff      	movs	r2, #255	; 0xff
    3b9c:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    3b9e:	232d      	movs	r3, #45	; 0x2d
    3ba0:	18fb      	adds	r3, r7, r3
    3ba2:	781b      	ldrb	r3, [r3, #0]
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d00b      	beq.n	3bc0 <tc_init+0x298>
		while (tc_is_syncing(module_inst)) {
    3ba8:	46c0      	nop			; (mov r8, r8)
    3baa:	68fb      	ldr	r3, [r7, #12]
    3bac:	0018      	movs	r0, r3
    3bae:	4b34      	ldr	r3, [pc, #208]	; (3c80 <tc_init+0x358>)
    3bb0:	4798      	blx	r3
    3bb2:	1e03      	subs	r3, r0, #0
    3bb4:	d1f9      	bne.n	3baa <tc_init+0x282>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    3bb6:	68bb      	ldr	r3, [r7, #8]
    3bb8:	222d      	movs	r2, #45	; 0x2d
    3bba:	18ba      	adds	r2, r7, r2
    3bbc:	7812      	ldrb	r2, [r2, #0]
    3bbe:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    3bc0:	232c      	movs	r3, #44	; 0x2c
    3bc2:	18fb      	adds	r3, r7, r3
    3bc4:	687a      	ldr	r2, [r7, #4]
    3bc6:	7a92      	ldrb	r2, [r2, #10]
    3bc8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    3bca:	232a      	movs	r3, #42	; 0x2a
    3bcc:	18fb      	adds	r3, r7, r3
    3bce:	2200      	movs	r2, #0
    3bd0:	701a      	strb	r2, [r3, #0]
    3bd2:	e01c      	b.n	3c0e <tc_init+0x2e6>
		if (config->enable_capture_on_channel[i] == true) {
    3bd4:	232a      	movs	r3, #42	; 0x2a
    3bd6:	18fb      	adds	r3, r7, r3
    3bd8:	781b      	ldrb	r3, [r3, #0]
    3bda:	687a      	ldr	r2, [r7, #4]
    3bdc:	18d3      	adds	r3, r2, r3
    3bde:	7adb      	ldrb	r3, [r3, #11]
    3be0:	2b00      	cmp	r3, #0
    3be2:	d00d      	beq.n	3c00 <tc_init+0x2d8>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    3be4:	232a      	movs	r3, #42	; 0x2a
    3be6:	18fb      	adds	r3, r7, r3
    3be8:	781b      	ldrb	r3, [r3, #0]
    3bea:	2210      	movs	r2, #16
    3bec:	409a      	lsls	r2, r3
    3bee:	0013      	movs	r3, r2
    3bf0:	b2d9      	uxtb	r1, r3
    3bf2:	232c      	movs	r3, #44	; 0x2c
    3bf4:	18fb      	adds	r3, r7, r3
    3bf6:	222c      	movs	r2, #44	; 0x2c
    3bf8:	18ba      	adds	r2, r7, r2
    3bfa:	7812      	ldrb	r2, [r2, #0]
    3bfc:	430a      	orrs	r2, r1
    3bfe:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    3c00:	232a      	movs	r3, #42	; 0x2a
    3c02:	18fb      	adds	r3, r7, r3
    3c04:	781a      	ldrb	r2, [r3, #0]
    3c06:	232a      	movs	r3, #42	; 0x2a
    3c08:	18fb      	adds	r3, r7, r3
    3c0a:	3201      	adds	r2, #1
    3c0c:	701a      	strb	r2, [r3, #0]
    3c0e:	232a      	movs	r3, #42	; 0x2a
    3c10:	18fb      	adds	r3, r7, r3
    3c12:	781b      	ldrb	r3, [r3, #0]
    3c14:	2b01      	cmp	r3, #1
    3c16:	d9dd      	bls.n	3bd4 <tc_init+0x2ac>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    3c18:	46c0      	nop			; (mov r8, r8)
    3c1a:	68fb      	ldr	r3, [r7, #12]
    3c1c:	0018      	movs	r0, r3
    3c1e:	4b18      	ldr	r3, [pc, #96]	; (3c80 <tc_init+0x358>)
    3c20:	4798      	blx	r3
    3c22:	1e03      	subs	r3, r0, #0
    3c24:	d1f9      	bne.n	3c1a <tc_init+0x2f2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    3c26:	68bb      	ldr	r3, [r7, #8]
    3c28:	222c      	movs	r2, #44	; 0x2c
    3c2a:	18ba      	adds	r2, r7, r2
    3c2c:	7812      	ldrb	r2, [r2, #0]
    3c2e:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    3c30:	46c0      	nop			; (mov r8, r8)
    3c32:	68fb      	ldr	r3, [r7, #12]
    3c34:	0018      	movs	r0, r3
    3c36:	4b12      	ldr	r3, [pc, #72]	; (3c80 <tc_init+0x358>)
    3c38:	4798      	blx	r3
    3c3a:	1e03      	subs	r3, r0, #0
    3c3c:	d1f9      	bne.n	3c32 <tc_init+0x30a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    3c3e:	68fb      	ldr	r3, [r7, #12]
    3c40:	791b      	ldrb	r3, [r3, #4]
    3c42:	2b04      	cmp	r3, #4
    3c44:	d01e      	beq.n	3c84 <tc_init+0x35c>
    3c46:	2b08      	cmp	r3, #8
    3c48:	d100      	bne.n	3c4c <tc_init+0x324>
    3c4a:	e070      	b.n	3d2e <tc_init+0x406>
    3c4c:	2b00      	cmp	r3, #0
    3c4e:	d04b      	beq.n	3ce8 <tc_init+0x3c0>
    3c50:	e090      	b.n	3d74 <tc_init+0x44c>
    3c52:	46c0      	nop			; (mov r8, r8)
    3c54:	000038e1 	.word	0x000038e1
    3c58:	0000fa60 	.word	0x0000fa60
    3c5c:	0000e9ad 	.word	0x0000e9ad
    3c60:	0000fa64 	.word	0x0000fa64
    3c64:	20001080 	.word	0x20001080
    3c68:	00003891 	.word	0x00003891
    3c6c:	0000be1d 	.word	0x0000be1d
    3c70:	00003835 	.word	0x00003835
    3c74:	0000381d 	.word	0x0000381d
    3c78:	0000bb31 	.word	0x0000bb31
    3c7c:	0000bb75 	.word	0x0000bb75
    3c80:	000038b9 	.word	0x000038b9
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    3c84:	46c0      	nop			; (mov r8, r8)
    3c86:	68fb      	ldr	r3, [r7, #12]
    3c88:	0018      	movs	r0, r3
    3c8a:	4b3d      	ldr	r3, [pc, #244]	; (3d80 <tc_init+0x458>)
    3c8c:	4798      	blx	r3
    3c8e:	1e03      	subs	r3, r0, #0
    3c90:	d1f9      	bne.n	3c86 <tc_init+0x35e>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    3c92:	687b      	ldr	r3, [r7, #4]
    3c94:	2228      	movs	r2, #40	; 0x28
    3c96:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    3c98:	68bb      	ldr	r3, [r7, #8]
    3c9a:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    3c9c:	46c0      	nop			; (mov r8, r8)
    3c9e:	68fb      	ldr	r3, [r7, #12]
    3ca0:	0018      	movs	r0, r3
    3ca2:	4b37      	ldr	r3, [pc, #220]	; (3d80 <tc_init+0x458>)
    3ca4:	4798      	blx	r3
    3ca6:	1e03      	subs	r3, r0, #0
    3ca8:	d1f9      	bne.n	3c9e <tc_init+0x376>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    3caa:	687b      	ldr	r3, [r7, #4]
    3cac:	2229      	movs	r2, #41	; 0x29
    3cae:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    3cb0:	68bb      	ldr	r3, [r7, #8]
    3cb2:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    3cb4:	46c0      	nop			; (mov r8, r8)
    3cb6:	68fb      	ldr	r3, [r7, #12]
    3cb8:	0018      	movs	r0, r3
    3cba:	4b31      	ldr	r3, [pc, #196]	; (3d80 <tc_init+0x458>)
    3cbc:	4798      	blx	r3
    3cbe:	1e03      	subs	r3, r0, #0
    3cc0:	d1f9      	bne.n	3cb6 <tc_init+0x38e>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    3cc2:	687b      	ldr	r3, [r7, #4]
    3cc4:	222a      	movs	r2, #42	; 0x2a
    3cc6:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    3cc8:	68bb      	ldr	r3, [r7, #8]
    3cca:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3ccc:	46c0      	nop			; (mov r8, r8)
    3cce:	68fb      	ldr	r3, [r7, #12]
    3cd0:	0018      	movs	r0, r3
    3cd2:	4b2b      	ldr	r3, [pc, #172]	; (3d80 <tc_init+0x458>)
    3cd4:	4798      	blx	r3
    3cd6:	1e03      	subs	r3, r0, #0
    3cd8:	d1f9      	bne.n	3cce <tc_init+0x3a6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    3cda:	687b      	ldr	r3, [r7, #4]
    3cdc:	222b      	movs	r2, #43	; 0x2b
    3cde:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    3ce0:	68bb      	ldr	r3, [r7, #8]
    3ce2:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    3ce4:	2300      	movs	r3, #0
    3ce6:	e046      	b.n	3d76 <tc_init+0x44e>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    3ce8:	46c0      	nop			; (mov r8, r8)
    3cea:	68fb      	ldr	r3, [r7, #12]
    3cec:	0018      	movs	r0, r3
    3cee:	4b24      	ldr	r3, [pc, #144]	; (3d80 <tc_init+0x458>)
    3cf0:	4798      	blx	r3
    3cf2:	1e03      	subs	r3, r0, #0
    3cf4:	d1f9      	bne.n	3cea <tc_init+0x3c2>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    3cf6:	687b      	ldr	r3, [r7, #4]
    3cf8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    3cfa:	68bb      	ldr	r3, [r7, #8]
    3cfc:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    3cfe:	46c0      	nop			; (mov r8, r8)
    3d00:	68fb      	ldr	r3, [r7, #12]
    3d02:	0018      	movs	r0, r3
    3d04:	4b1e      	ldr	r3, [pc, #120]	; (3d80 <tc_init+0x458>)
    3d06:	4798      	blx	r3
    3d08:	1e03      	subs	r3, r0, #0
    3d0a:	d1f9      	bne.n	3d00 <tc_init+0x3d8>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    3d0c:	687b      	ldr	r3, [r7, #4]
    3d0e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    3d10:	68bb      	ldr	r3, [r7, #8]
    3d12:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3d14:	46c0      	nop			; (mov r8, r8)
    3d16:	68fb      	ldr	r3, [r7, #12]
    3d18:	0018      	movs	r0, r3
    3d1a:	4b19      	ldr	r3, [pc, #100]	; (3d80 <tc_init+0x458>)
    3d1c:	4798      	blx	r3
    3d1e:	1e03      	subs	r3, r0, #0
    3d20:	d1f9      	bne.n	3d16 <tc_init+0x3ee>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    3d22:	687b      	ldr	r3, [r7, #4]
    3d24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    3d26:	68bb      	ldr	r3, [r7, #8]
    3d28:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    3d2a:	2300      	movs	r3, #0
    3d2c:	e023      	b.n	3d76 <tc_init+0x44e>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    3d2e:	46c0      	nop			; (mov r8, r8)
    3d30:	68fb      	ldr	r3, [r7, #12]
    3d32:	0018      	movs	r0, r3
    3d34:	4b12      	ldr	r3, [pc, #72]	; (3d80 <tc_init+0x458>)
    3d36:	4798      	blx	r3
    3d38:	1e03      	subs	r3, r0, #0
    3d3a:	d1f9      	bne.n	3d30 <tc_init+0x408>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    3d3c:	687b      	ldr	r3, [r7, #4]
    3d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d40:	68bb      	ldr	r3, [r7, #8]
    3d42:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    3d44:	46c0      	nop			; (mov r8, r8)
    3d46:	68fb      	ldr	r3, [r7, #12]
    3d48:	0018      	movs	r0, r3
    3d4a:	4b0d      	ldr	r3, [pc, #52]	; (3d80 <tc_init+0x458>)
    3d4c:	4798      	blx	r3
    3d4e:	1e03      	subs	r3, r0, #0
    3d50:	d1f9      	bne.n	3d46 <tc_init+0x41e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    3d52:	687b      	ldr	r3, [r7, #4]
    3d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    3d56:	68bb      	ldr	r3, [r7, #8]
    3d58:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	68fb      	ldr	r3, [r7, #12]
    3d5e:	0018      	movs	r0, r3
    3d60:	4b07      	ldr	r3, [pc, #28]	; (3d80 <tc_init+0x458>)
    3d62:	4798      	blx	r3
    3d64:	1e03      	subs	r3, r0, #0
    3d66:	d1f9      	bne.n	3d5c <tc_init+0x434>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    3d68:	687b      	ldr	r3, [r7, #4]
    3d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    3d6c:	68bb      	ldr	r3, [r7, #8]
    3d6e:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    3d70:	2300      	movs	r3, #0
    3d72:	e000      	b.n	3d76 <tc_init+0x44e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    3d74:	2317      	movs	r3, #23
}
    3d76:	0018      	movs	r0, r3
    3d78:	46bd      	mov	sp, r7
    3d7a:	b00d      	add	sp, #52	; 0x34
    3d7c:	bd90      	pop	{r4, r7, pc}
    3d7e:	46c0      	nop			; (mov r8, r8)
    3d80:	000038b9 	.word	0x000038b9

00003d84 <tc_get_count_value>:
 *
 * \return Count value of the specified TC module.
 */
uint32_t tc_get_count_value(
		const struct tc_module *const module_inst)
{
    3d84:	b580      	push	{r7, lr}
    3d86:	b084      	sub	sp, #16
    3d88:	af00      	add	r7, sp, #0
    3d8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    3d8c:	687b      	ldr	r3, [r7, #4]
    3d8e:	681b      	ldr	r3, [r3, #0]
    3d90:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    3d92:	46c0      	nop			; (mov r8, r8)
    3d94:	687b      	ldr	r3, [r7, #4]
    3d96:	0018      	movs	r0, r3
    3d98:	4b0e      	ldr	r3, [pc, #56]	; (3dd4 <tc_get_count_value+0x50>)
    3d9a:	4798      	blx	r3
    3d9c:	1e03      	subs	r3, r0, #0
    3d9e:	d1f9      	bne.n	3d94 <tc_get_count_value+0x10>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    3da0:	687b      	ldr	r3, [r7, #4]
    3da2:	791b      	ldrb	r3, [r3, #4]
    3da4:	2b04      	cmp	r3, #4
    3da6:	d004      	beq.n	3db2 <tc_get_count_value+0x2e>
    3da8:	2b08      	cmp	r3, #8
    3daa:	d00a      	beq.n	3dc2 <tc_get_count_value+0x3e>
    3dac:	2b00      	cmp	r3, #0
    3dae:	d004      	beq.n	3dba <tc_get_count_value+0x36>
    3db0:	e00a      	b.n	3dc8 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    3db2:	68fb      	ldr	r3, [r7, #12]
    3db4:	7c1b      	ldrb	r3, [r3, #16]
    3db6:	b2db      	uxtb	r3, r3
    3db8:	e007      	b.n	3dca <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    3dba:	68fb      	ldr	r3, [r7, #12]
    3dbc:	8a1b      	ldrh	r3, [r3, #16]
    3dbe:	b29b      	uxth	r3, r3
    3dc0:	e003      	b.n	3dca <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    3dc2:	68fb      	ldr	r3, [r7, #12]
    3dc4:	691b      	ldr	r3, [r3, #16]
    3dc6:	e000      	b.n	3dca <tc_get_count_value+0x46>
	}

	Assert(false);
	return 0;
    3dc8:	2300      	movs	r3, #0
}
    3dca:	0018      	movs	r0, r3
    3dcc:	46bd      	mov	sp, r7
    3dce:	b004      	add	sp, #16
    3dd0:	bd80      	pop	{r7, pc}
    3dd2:	46c0      	nop			; (mov r8, r8)
    3dd4:	000038b9 	.word	0x000038b9

00003dd8 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    3dd8:	b580      	push	{r7, lr}
    3dda:	b086      	sub	sp, #24
    3ddc:	af00      	add	r7, sp, #0
    3dde:	60f8      	str	r0, [r7, #12]
    3de0:	607a      	str	r2, [r7, #4]
    3de2:	230b      	movs	r3, #11
    3de4:	18fb      	adds	r3, r7, r3
    3de6:	1c0a      	adds	r2, r1, #0
    3de8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    3dea:	68fb      	ldr	r3, [r7, #12]
    3dec:	681b      	ldr	r3, [r3, #0]
    3dee:	617b      	str	r3, [r7, #20]

	while (tc_is_syncing(module_inst)) {
    3df0:	46c0      	nop			; (mov r8, r8)
    3df2:	68fb      	ldr	r3, [r7, #12]
    3df4:	0018      	movs	r0, r3
    3df6:	4b20      	ldr	r3, [pc, #128]	; (3e78 <tc_set_compare_value+0xa0>)
    3df8:	4798      	blx	r3
    3dfa:	1e03      	subs	r3, r0, #0
    3dfc:	d1f9      	bne.n	3df2 <tc_set_compare_value+0x1a>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    3dfe:	68fb      	ldr	r3, [r7, #12]
    3e00:	791b      	ldrb	r3, [r3, #4]
    3e02:	2b04      	cmp	r3, #4
    3e04:	d004      	beq.n	3e10 <tc_set_compare_value+0x38>
    3e06:	2b08      	cmp	r3, #8
    3e08:	d022      	beq.n	3e50 <tc_set_compare_value+0x78>
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d010      	beq.n	3e30 <tc_set_compare_value+0x58>
    3e0e:	e02e      	b.n	3e6e <tc_set_compare_value+0x96>
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    3e10:	230b      	movs	r3, #11
    3e12:	18fb      	adds	r3, r7, r3
    3e14:	781b      	ldrb	r3, [r3, #0]
    3e16:	2b01      	cmp	r3, #1
    3e18:	d80a      	bhi.n	3e30 <tc_set_compare_value+0x58>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    3e1a:	230b      	movs	r3, #11
    3e1c:	18fb      	adds	r3, r7, r3
    3e1e:	781b      	ldrb	r3, [r3, #0]
						(uint8_t)compare;
    3e20:	687a      	ldr	r2, [r7, #4]
    3e22:	b2d1      	uxtb	r1, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    3e24:	697a      	ldr	r2, [r7, #20]
    3e26:	18d3      	adds	r3, r2, r3
    3e28:	1c0a      	adds	r2, r1, #0
    3e2a:	761a      	strb	r2, [r3, #24]
						(uint8_t)compare;
				return STATUS_OK;
    3e2c:	2300      	movs	r3, #0
    3e2e:	e01f      	b.n	3e70 <tc_set_compare_value+0x98>
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    3e30:	230b      	movs	r3, #11
    3e32:	18fb      	adds	r3, r7, r3
    3e34:	781b      	ldrb	r3, [r3, #0]
    3e36:	2b01      	cmp	r3, #1
    3e38:	d80a      	bhi.n	3e50 <tc_set_compare_value+0x78>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    3e3a:	230b      	movs	r3, #11
    3e3c:	18fb      	adds	r3, r7, r3
    3e3e:	781a      	ldrb	r2, [r3, #0]
						(uint16_t)compare;
    3e40:	687b      	ldr	r3, [r7, #4]
    3e42:	b299      	uxth	r1, r3
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    3e44:	697b      	ldr	r3, [r7, #20]
    3e46:	320c      	adds	r2, #12
    3e48:	0052      	lsls	r2, r2, #1
    3e4a:	52d1      	strh	r1, [r2, r3]
						(uint16_t)compare;
				return STATUS_OK;
    3e4c:	2300      	movs	r3, #0
    3e4e:	e00f      	b.n	3e70 <tc_set_compare_value+0x98>
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    3e50:	230b      	movs	r3, #11
    3e52:	18fb      	adds	r3, r7, r3
    3e54:	781b      	ldrb	r3, [r3, #0]
    3e56:	2b01      	cmp	r3, #1
    3e58:	d809      	bhi.n	3e6e <tc_set_compare_value+0x96>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    3e5a:	230b      	movs	r3, #11
    3e5c:	18fb      	adds	r3, r7, r3
    3e5e:	781a      	ldrb	r2, [r3, #0]
    3e60:	697b      	ldr	r3, [r7, #20]
    3e62:	3206      	adds	r2, #6
    3e64:	0092      	lsls	r2, r2, #2
    3e66:	6879      	ldr	r1, [r7, #4]
    3e68:	50d1      	str	r1, [r2, r3]
						(uint32_t)compare;
				return STATUS_OK;
    3e6a:	2300      	movs	r3, #0
    3e6c:	e000      	b.n	3e70 <tc_set_compare_value+0x98>
			}
	}

	return STATUS_ERR_INVALID_ARG;
    3e6e:	2317      	movs	r3, #23
}
    3e70:	0018      	movs	r0, r3
    3e72:	46bd      	mov	sp, r7
    3e74:	b006      	add	sp, #24
    3e76:	bd80      	pop	{r7, pc}
    3e78:	000038b9 	.word	0x000038b9

00003e7c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3e7c:	b580      	push	{r7, lr}
    3e7e:	b084      	sub	sp, #16
    3e80:	af00      	add	r7, sp, #0
    3e82:	0002      	movs	r2, r0
    3e84:	1dfb      	adds	r3, r7, #7
    3e86:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3e88:	230f      	movs	r3, #15
    3e8a:	18fb      	adds	r3, r7, r3
    3e8c:	1dfa      	adds	r2, r7, #7
    3e8e:	7812      	ldrb	r2, [r2, #0]
    3e90:	09d2      	lsrs	r2, r2, #7
    3e92:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3e94:	230e      	movs	r3, #14
    3e96:	18fb      	adds	r3, r7, r3
    3e98:	1dfa      	adds	r2, r7, #7
    3e9a:	7812      	ldrb	r2, [r2, #0]
    3e9c:	0952      	lsrs	r2, r2, #5
    3e9e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3ea0:	4b0d      	ldr	r3, [pc, #52]	; (3ed8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3ea2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3ea4:	230f      	movs	r3, #15
    3ea6:	18fb      	adds	r3, r7, r3
    3ea8:	781b      	ldrb	r3, [r3, #0]
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d10f      	bne.n	3ece <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3eae:	230f      	movs	r3, #15
    3eb0:	18fb      	adds	r3, r7, r3
    3eb2:	781b      	ldrb	r3, [r3, #0]
    3eb4:	009b      	lsls	r3, r3, #2
    3eb6:	2210      	movs	r2, #16
    3eb8:	4694      	mov	ip, r2
    3eba:	44bc      	add	ip, r7
    3ebc:	4463      	add	r3, ip
    3ebe:	3b08      	subs	r3, #8
    3ec0:	681a      	ldr	r2, [r3, #0]
    3ec2:	230e      	movs	r3, #14
    3ec4:	18fb      	adds	r3, r7, r3
    3ec6:	781b      	ldrb	r3, [r3, #0]
    3ec8:	01db      	lsls	r3, r3, #7
    3eca:	18d3      	adds	r3, r2, r3
    3ecc:	e000      	b.n	3ed0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3ece:	2300      	movs	r3, #0
	}
}
    3ed0:	0018      	movs	r0, r3
    3ed2:	46bd      	mov	sp, r7
    3ed4:	b004      	add	sp, #16
    3ed6:	bd80      	pop	{r7, pc}
    3ed8:	41004400 	.word	0x41004400

00003edc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3edc:	b580      	push	{r7, lr}
    3ede:	b082      	sub	sp, #8
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	0002      	movs	r2, r0
    3ee4:	1dfb      	adds	r3, r7, #7
    3ee6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3ee8:	1dfb      	adds	r3, r7, #7
    3eea:	781b      	ldrb	r3, [r3, #0]
    3eec:	0018      	movs	r0, r3
    3eee:	4b03      	ldr	r3, [pc, #12]	; (3efc <port_get_group_from_gpio_pin+0x20>)
    3ef0:	4798      	blx	r3
    3ef2:	0003      	movs	r3, r0
}
    3ef4:	0018      	movs	r0, r3
    3ef6:	46bd      	mov	sp, r7
    3ef8:	b002      	add	sp, #8
    3efa:	bd80      	pop	{r7, pc}
    3efc:	00003e7d 	.word	0x00003e7d

00003f00 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3f00:	b580      	push	{r7, lr}
    3f02:	b084      	sub	sp, #16
    3f04:	af00      	add	r7, sp, #0
    3f06:	0002      	movs	r2, r0
    3f08:	1dfb      	adds	r3, r7, #7
    3f0a:	701a      	strb	r2, [r3, #0]
    3f0c:	1dbb      	adds	r3, r7, #6
    3f0e:	1c0a      	adds	r2, r1, #0
    3f10:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3f12:	1dfb      	adds	r3, r7, #7
    3f14:	781b      	ldrb	r3, [r3, #0]
    3f16:	0018      	movs	r0, r3
    3f18:	4b0d      	ldr	r3, [pc, #52]	; (3f50 <port_pin_set_output_level+0x50>)
    3f1a:	4798      	blx	r3
    3f1c:	0003      	movs	r3, r0
    3f1e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3f20:	1dfb      	adds	r3, r7, #7
    3f22:	781b      	ldrb	r3, [r3, #0]
    3f24:	221f      	movs	r2, #31
    3f26:	4013      	ands	r3, r2
    3f28:	2201      	movs	r2, #1
    3f2a:	409a      	lsls	r2, r3
    3f2c:	0013      	movs	r3, r2
    3f2e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3f30:	1dbb      	adds	r3, r7, #6
    3f32:	781b      	ldrb	r3, [r3, #0]
    3f34:	2b00      	cmp	r3, #0
    3f36:	d003      	beq.n	3f40 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3f38:	68fb      	ldr	r3, [r7, #12]
    3f3a:	68ba      	ldr	r2, [r7, #8]
    3f3c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3f3e:	e002      	b.n	3f46 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3f40:	68fb      	ldr	r3, [r7, #12]
    3f42:	68ba      	ldr	r2, [r7, #8]
    3f44:	615a      	str	r2, [r3, #20]
	}
}
    3f46:	46c0      	nop			; (mov r8, r8)
    3f48:	46bd      	mov	sp, r7
    3f4a:	b004      	add	sp, #16
    3f4c:	bd80      	pop	{r7, pc}
    3f4e:	46c0      	nop			; (mov r8, r8)
    3f50:	00003edd 	.word	0x00003edd

00003f54 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    3f54:	b580      	push	{r7, lr}
    3f56:	b084      	sub	sp, #16
    3f58:	af00      	add	r7, sp, #0
    3f5a:	0002      	movs	r2, r0
    3f5c:	1dfb      	adds	r3, r7, #7
    3f5e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3f60:	1dfb      	adds	r3, r7, #7
    3f62:	781b      	ldrb	r3, [r3, #0]
    3f64:	0018      	movs	r0, r3
    3f66:	4b09      	ldr	r3, [pc, #36]	; (3f8c <port_pin_toggle_output_level+0x38>)
    3f68:	4798      	blx	r3
    3f6a:	0003      	movs	r3, r0
    3f6c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3f6e:	1dfb      	adds	r3, r7, #7
    3f70:	781b      	ldrb	r3, [r3, #0]
    3f72:	221f      	movs	r2, #31
    3f74:	4013      	ands	r3, r2
    3f76:	2201      	movs	r2, #1
    3f78:	409a      	lsls	r2, r3
    3f7a:	0013      	movs	r3, r2
    3f7c:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    3f7e:	68fb      	ldr	r3, [r7, #12]
    3f80:	68ba      	ldr	r2, [r7, #8]
    3f82:	61da      	str	r2, [r3, #28]
}
    3f84:	46c0      	nop			; (mov r8, r8)
    3f86:	46bd      	mov	sp, r7
    3f88:	b004      	add	sp, #16
    3f8a:	bd80      	pop	{r7, pc}
    3f8c:	00003edd 	.word	0x00003edd

00003f90 <APP_CommandsInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void APP_CommandsInit(void)
{
    3f90:	b580      	push	{r7, lr}
    3f92:	b082      	sub	sp, #8
    3f94:	af00      	add	r7, sp, #0
	appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3f96:	4b27      	ldr	r3, [pc, #156]	; (4034 <APP_CommandsInit+0xa4>)
    3f98:	2200      	movs	r2, #0
    3f9a:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyDurationTimer.handler
		= appCmdIdentifyDurationTimerHandler;
    3f9c:	4b25      	ldr	r3, [pc, #148]	; (4034 <APP_CommandsInit+0xa4>)
    3f9e:	4a26      	ldr	r2, [pc, #152]	; (4038 <APP_CommandsInit+0xa8>)
    3fa0:	611a      	str	r2, [r3, #16]

	appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    3fa2:	4b26      	ldr	r3, [pc, #152]	; (403c <APP_CommandsInit+0xac>)
    3fa4:	2201      	movs	r2, #1
    3fa6:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
    3fa8:	4b24      	ldr	r3, [pc, #144]	; (403c <APP_CommandsInit+0xac>)
    3faa:	4a25      	ldr	r2, [pc, #148]	; (4040 <APP_CommandsInit+0xb0>)
    3fac:	611a      	str	r2, [r3, #16]

	appCmdInProgress = NULL;
    3fae:	4b25      	ldr	r3, [pc, #148]	; (4044 <APP_CommandsInit+0xb4>)
    3fb0:	2200      	movs	r2, #0
    3fb2:	601a      	str	r2, [r3, #0]
	appCmdDataReq.dstAddr = 0;
    3fb4:	4b24      	ldr	r3, [pc, #144]	; (4048 <APP_CommandsInit+0xb8>)
    3fb6:	2200      	movs	r2, #0
    3fb8:	815a      	strh	r2, [r3, #10]
	appCmdDataReq.dstEndpoint = APP_CMD_ENDPOINT;
    3fba:	4b23      	ldr	r3, [pc, #140]	; (4048 <APP_CommandsInit+0xb8>)
    3fbc:	2202      	movs	r2, #2
    3fbe:	731a      	strb	r2, [r3, #12]
	appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
    3fc0:	4b21      	ldr	r3, [pc, #132]	; (4048 <APP_CommandsInit+0xb8>)
    3fc2:	2202      	movs	r2, #2
    3fc4:	735a      	strb	r2, [r3, #13]
	appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
    3fc6:	4b20      	ldr	r3, [pc, #128]	; (4048 <APP_CommandsInit+0xb8>)
    3fc8:	2202      	movs	r2, #2
    3fca:	739a      	strb	r2, [r3, #14]
	appCmdDataReq.confirm = appCmdDataConf;
    3fcc:	4b1e      	ldr	r3, [pc, #120]	; (4048 <APP_CommandsInit+0xb8>)
    3fce:	4a1f      	ldr	r2, [pc, #124]	; (404c <APP_CommandsInit+0xbc>)
    3fd0:	619a      	str	r2, [r3, #24]

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    3fd2:	1dfb      	adds	r3, r7, #7
    3fd4:	2200      	movs	r2, #0
    3fd6:	701a      	strb	r2, [r3, #0]
    3fd8:	e01f      	b.n	401a <APP_CommandsInit+0x8a>
		appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
    3fda:	1dfb      	adds	r3, r7, #7
    3fdc:	7819      	ldrb	r1, [r3, #0]
    3fde:	4a1c      	ldr	r2, [pc, #112]	; (4050 <APP_CommandsInit+0xc0>)
    3fe0:	000b      	movs	r3, r1
    3fe2:	00db      	lsls	r3, r3, #3
    3fe4:	185b      	adds	r3, r3, r1
    3fe6:	5c99      	ldrb	r1, [r3, r2]
    3fe8:	2001      	movs	r0, #1
    3fea:	4240      	negs	r0, r0
    3fec:	4301      	orrs	r1, r0
    3fee:	5499      	strb	r1, [r3, r2]
    3ff0:	18d3      	adds	r3, r2, r3
    3ff2:	785a      	ldrb	r2, [r3, #1]
    3ff4:	2101      	movs	r1, #1
    3ff6:	4249      	negs	r1, r1
    3ff8:	430a      	orrs	r2, r1
    3ffa:	705a      	strb	r2, [r3, #1]
		appCmdPendingTable[i].ready = false;
    3ffc:	1dfb      	adds	r3, r7, #7
    3ffe:	781a      	ldrb	r2, [r3, #0]
    4000:	4913      	ldr	r1, [pc, #76]	; (4050 <APP_CommandsInit+0xc0>)
    4002:	0013      	movs	r3, r2
    4004:	00db      	lsls	r3, r3, #3
    4006:	189b      	adds	r3, r3, r2
    4008:	18cb      	adds	r3, r1, r3
    400a:	3303      	adds	r3, #3
    400c:	2200      	movs	r2, #0
    400e:	701a      	strb	r2, [r3, #0]
	appCmdDataReq.dstEndpoint = APP_CMD_ENDPOINT;
	appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
	appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
	appCmdDataReq.confirm = appCmdDataConf;

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    4010:	1dfb      	adds	r3, r7, #7
    4012:	781a      	ldrb	r2, [r3, #0]
    4014:	1dfb      	adds	r3, r7, #7
    4016:	3201      	adds	r2, #1
    4018:	701a      	strb	r2, [r3, #0]
    401a:	1dfb      	adds	r3, r7, #7
    401c:	781b      	ldrb	r3, [r3, #0]
    401e:	2b04      	cmp	r3, #4
    4020:	d9db      	bls.n	3fda <APP_CommandsInit+0x4a>
		appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
		appCmdPendingTable[i].ready = false;
	}

	NWK_OpenEndpoint(APP_CMD_ENDPOINT, appCmdDataInd);
    4022:	4b0c      	ldr	r3, [pc, #48]	; (4054 <APP_CommandsInit+0xc4>)
    4024:	0019      	movs	r1, r3
    4026:	2002      	movs	r0, #2
    4028:	4b0b      	ldr	r3, [pc, #44]	; (4058 <APP_CommandsInit+0xc8>)
    402a:	4798      	blx	r3
}
    402c:	46c0      	nop			; (mov r8, r8)
    402e:	46bd      	mov	sp, r7
    4030:	b002      	add	sp, #8
    4032:	bd80      	pop	{r7, pc}
    4034:	200000d4 	.word	0x200000d4
    4038:	00004249 	.word	0x00004249
    403c:	200000e8 	.word	0x200000e8
    4040:	0000427d 	.word	0x0000427d
    4044:	2000012c 	.word	0x2000012c
    4048:	20000130 	.word	0x20000130
    404c:	000040a9 	.word	0x000040a9
    4050:	200000fc 	.word	0x200000fc
    4054:	00004155 	.word	0x00004155
    4058:	00006ee9 	.word	0x00006ee9

0000405c <appCmdDataRequest>:
}

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataRequest(AppCmdPendingTableEntry_t *entry)
{
    405c:	b580      	push	{r7, lr}
    405e:	b082      	sub	sp, #8
    4060:	af00      	add	r7, sp, #0
    4062:	6078      	str	r0, [r7, #4]
	appCmdInProgress = entry;
    4064:	4b0d      	ldr	r3, [pc, #52]	; (409c <appCmdDataRequest+0x40>)
    4066:	687a      	ldr	r2, [r7, #4]
    4068:	601a      	str	r2, [r3, #0]

	appCmdDataReq.dstAddr = entry->addr;
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	781a      	ldrb	r2, [r3, #0]
    406e:	785b      	ldrb	r3, [r3, #1]
    4070:	021b      	lsls	r3, r3, #8
    4072:	4313      	orrs	r3, r2
    4074:	b29a      	uxth	r2, r3
    4076:	4b0a      	ldr	r3, [pc, #40]	; (40a0 <appCmdDataRequest+0x44>)
    4078:	815a      	strh	r2, [r3, #10]
	appCmdDataReq.data = &entry->payload;
    407a:	687b      	ldr	r3, [r7, #4]
    407c:	1d1a      	adds	r2, r3, #4
    407e:	4b08      	ldr	r3, [pc, #32]	; (40a0 <appCmdDataRequest+0x44>)
    4080:	611a      	str	r2, [r3, #16]
	appCmdDataReq.size = entry->size;
    4082:	687b      	ldr	r3, [r7, #4]
    4084:	789a      	ldrb	r2, [r3, #2]
    4086:	4b06      	ldr	r3, [pc, #24]	; (40a0 <appCmdDataRequest+0x44>)
    4088:	751a      	strb	r2, [r3, #20]
	NWK_DataReq(&appCmdDataReq);
    408a:	4b05      	ldr	r3, [pc, #20]	; (40a0 <appCmdDataRequest+0x44>)
    408c:	0018      	movs	r0, r3
    408e:	4b05      	ldr	r3, [pc, #20]	; (40a4 <appCmdDataRequest+0x48>)
    4090:	4798      	blx	r3
}
    4092:	46c0      	nop			; (mov r8, r8)
    4094:	46bd      	mov	sp, r7
    4096:	b002      	add	sp, #8
    4098:	bd80      	pop	{r7, pc}
    409a:	46c0      	nop			; (mov r8, r8)
    409c:	2000012c 	.word	0x2000012c
    40a0:	20000130 	.word	0x20000130
    40a4:	00006fd5 	.word	0x00006fd5

000040a8 <appCmdDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataConf(NWK_DataReq_t *req)
{
    40a8:	b580      	push	{r7, lr}
    40aa:	b082      	sub	sp, #8
    40ac:	af00      	add	r7, sp, #0
    40ae:	6078      	str	r0, [r7, #4]
	appCmdInProgress->addr = APP_CMD_INVALID_ADDR;
    40b0:	4b0c      	ldr	r3, [pc, #48]	; (40e4 <appCmdDataConf+0x3c>)
    40b2:	681b      	ldr	r3, [r3, #0]
    40b4:	781a      	ldrb	r2, [r3, #0]
    40b6:	2101      	movs	r1, #1
    40b8:	4249      	negs	r1, r1
    40ba:	430a      	orrs	r2, r1
    40bc:	701a      	strb	r2, [r3, #0]
    40be:	785a      	ldrb	r2, [r3, #1]
    40c0:	2101      	movs	r1, #1
    40c2:	4249      	negs	r1, r1
    40c4:	430a      	orrs	r2, r1
    40c6:	705a      	strb	r2, [r3, #1]
	appCmdInProgress->ready = false;
    40c8:	4b06      	ldr	r3, [pc, #24]	; (40e4 <appCmdDataConf+0x3c>)
    40ca:	681b      	ldr	r3, [r3, #0]
    40cc:	2200      	movs	r2, #0
    40ce:	70da      	strb	r2, [r3, #3]
	appCmdInProgress = NULL;
    40d0:	4b04      	ldr	r3, [pc, #16]	; (40e4 <appCmdDataConf+0x3c>)
    40d2:	2200      	movs	r2, #0
    40d4:	601a      	str	r2, [r3, #0]

	appCmdCheckPendingTable();
    40d6:	4b04      	ldr	r3, [pc, #16]	; (40e8 <appCmdDataConf+0x40>)
    40d8:	4798      	blx	r3

	(void)req;
}
    40da:	46c0      	nop			; (mov r8, r8)
    40dc:	46bd      	mov	sp, r7
    40de:	b002      	add	sp, #8
    40e0:	bd80      	pop	{r7, pc}
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	2000012c 	.word	0x2000012c
    40e8:	000040ed 	.word	0x000040ed

000040ec <appCmdCheckPendingTable>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdCheckPendingTable(void)
{
    40ec:	b580      	push	{r7, lr}
    40ee:	b082      	sub	sp, #8
    40f0:	af00      	add	r7, sp, #0
	if (appCmdInProgress) {
    40f2:	4b15      	ldr	r3, [pc, #84]	; (4148 <appCmdCheckPendingTable+0x5c>)
    40f4:	681b      	ldr	r3, [r3, #0]
    40f6:	2b00      	cmp	r3, #0
    40f8:	d122      	bne.n	4140 <appCmdCheckPendingTable+0x54>
		return;
	}

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    40fa:	1dfb      	adds	r3, r7, #7
    40fc:	2200      	movs	r2, #0
    40fe:	701a      	strb	r2, [r3, #0]
    4100:	e019      	b.n	4136 <appCmdCheckPendingTable+0x4a>
		if (appCmdPendingTable[i].ready) {
    4102:	1dfb      	adds	r3, r7, #7
    4104:	781a      	ldrb	r2, [r3, #0]
    4106:	4911      	ldr	r1, [pc, #68]	; (414c <appCmdCheckPendingTable+0x60>)
    4108:	0013      	movs	r3, r2
    410a:	00db      	lsls	r3, r3, #3
    410c:	189b      	adds	r3, r3, r2
    410e:	18cb      	adds	r3, r1, r3
    4110:	3303      	adds	r3, #3
    4112:	781b      	ldrb	r3, [r3, #0]
    4114:	2b00      	cmp	r3, #0
    4116:	d009      	beq.n	412c <appCmdCheckPendingTable+0x40>
			appCmdDataRequest(&appCmdPendingTable[i]);
    4118:	1dfb      	adds	r3, r7, #7
    411a:	781a      	ldrb	r2, [r3, #0]
    411c:	0013      	movs	r3, r2
    411e:	00db      	lsls	r3, r3, #3
    4120:	189b      	adds	r3, r3, r2
    4122:	4a0a      	ldr	r2, [pc, #40]	; (414c <appCmdCheckPendingTable+0x60>)
    4124:	189b      	adds	r3, r3, r2
    4126:	0018      	movs	r0, r3
    4128:	4b09      	ldr	r3, [pc, #36]	; (4150 <appCmdCheckPendingTable+0x64>)
    412a:	4798      	blx	r3
{
	if (appCmdInProgress) {
		return;
	}

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    412c:	1dfb      	adds	r3, r7, #7
    412e:	781a      	ldrb	r2, [r3, #0]
    4130:	1dfb      	adds	r3, r7, #7
    4132:	3201      	adds	r2, #1
    4134:	701a      	strb	r2, [r3, #0]
    4136:	1dfb      	adds	r3, r7, #7
    4138:	781b      	ldrb	r3, [r3, #0]
    413a:	2b04      	cmp	r3, #4
    413c:	d9e1      	bls.n	4102 <appCmdCheckPendingTable+0x16>
    413e:	e000      	b.n	4142 <appCmdCheckPendingTable+0x56>
/*************************************************************************//**
*****************************************************************************/
static void appCmdCheckPendingTable(void)
{
	if (appCmdInProgress) {
		return;
    4140:	46c0      	nop			; (mov r8, r8)
	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
		if (appCmdPendingTable[i].ready) {
			appCmdDataRequest(&appCmdPendingTable[i]);
		}
	}
}
    4142:	46bd      	mov	sp, r7
    4144:	b002      	add	sp, #8
    4146:	bd80      	pop	{r7, pc}
    4148:	2000012c 	.word	0x2000012c
    414c:	200000fc 	.word	0x200000fc
    4150:	0000405d 	.word	0x0000405d

00004154 <appCmdDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool appCmdDataInd(NWK_DataInd_t *ind)
{
    4154:	b580      	push	{r7, lr}
    4156:	b082      	sub	sp, #8
    4158:	af00      	add	r7, sp, #0
    415a:	6078      	str	r0, [r7, #4]
	return appCmdHandle(ind->data, ind->size);
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	689a      	ldr	r2, [r3, #8]
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	7b1b      	ldrb	r3, [r3, #12]
    4164:	0019      	movs	r1, r3
    4166:	0010      	movs	r0, r2
    4168:	4b03      	ldr	r3, [pc, #12]	; (4178 <appCmdDataInd+0x24>)
    416a:	4798      	blx	r3
    416c:	0003      	movs	r3, r0
}
    416e:	0018      	movs	r0, r3
    4170:	46bd      	mov	sp, r7
    4172:	b002      	add	sp, #8
    4174:	bd80      	pop	{r7, pc}
    4176:	46c0      	nop			; (mov r8, r8)
    4178:	0000417d 	.word	0x0000417d

0000417c <appCmdHandle>:

/*************************************************************************//**
*****************************************************************************/
static bool appCmdHandle(uint8_t *data, uint8_t size)
{
    417c:	b580      	push	{r7, lr}
    417e:	b084      	sub	sp, #16
    4180:	af00      	add	r7, sp, #0
    4182:	6078      	str	r0, [r7, #4]
    4184:	000a      	movs	r2, r1
    4186:	1cfb      	adds	r3, r7, #3
    4188:	701a      	strb	r2, [r3, #0]
	AppCmdHeader_t *header = (AppCmdHeader_t *)data;
    418a:	687b      	ldr	r3, [r7, #4]
    418c:	60fb      	str	r3, [r7, #12]

	if (size < sizeof(AppCmdHeader_t)) {
    418e:	1cfb      	adds	r3, r7, #3
    4190:	781b      	ldrb	r3, [r3, #0]
    4192:	2b00      	cmp	r3, #0
    4194:	d101      	bne.n	419a <appCmdHandle+0x1e>
		return false;
    4196:	2300      	movs	r3, #0
    4198:	e042      	b.n	4220 <appCmdHandle+0xa4>
	}

	if (APP_COMMAND_ID_IDENTIFY == header->id) {
    419a:	68fb      	ldr	r3, [r7, #12]
    419c:	781b      	ldrb	r3, [r3, #0]
    419e:	2b10      	cmp	r3, #16
    41a0:	d13d      	bne.n	421e <appCmdHandle+0xa2>
		AppCmdIdentify_t *req = (AppCmdIdentify_t *)data;
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	60bb      	str	r3, [r7, #8]

		if (sizeof(AppCmdIdentify_t) != size) {
    41a6:	1cfb      	adds	r3, r7, #3
    41a8:	781b      	ldrb	r3, [r3, #0]
    41aa:	2b05      	cmp	r3, #5
    41ac:	d001      	beq.n	41b2 <appCmdHandle+0x36>
			return false;
    41ae:	2300      	movs	r3, #0
    41b0:	e036      	b.n	4220 <appCmdHandle+0xa4>
		}

		SYS_TimerStop(&appCmdIdentifyDurationTimer);
    41b2:	4b1d      	ldr	r3, [pc, #116]	; (4228 <appCmdHandle+0xac>)
    41b4:	0018      	movs	r0, r3
    41b6:	4b1d      	ldr	r3, [pc, #116]	; (422c <appCmdHandle+0xb0>)
    41b8:	4798      	blx	r3
		SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    41ba:	4b1d      	ldr	r3, [pc, #116]	; (4230 <appCmdHandle+0xb4>)
    41bc:	0018      	movs	r0, r3
    41be:	4b1b      	ldr	r3, [pc, #108]	; (422c <appCmdHandle+0xb0>)
    41c0:	4798      	blx	r3

		appCmdIdentifyDurationTimer.interval = req->duration;
    41c2:	68bb      	ldr	r3, [r7, #8]
    41c4:	785a      	ldrb	r2, [r3, #1]
    41c6:	789b      	ldrb	r3, [r3, #2]
    41c8:	021b      	lsls	r3, r3, #8
    41ca:	4313      	orrs	r3, r2
    41cc:	b29b      	uxth	r3, r3
    41ce:	001a      	movs	r2, r3
    41d0:	4b15      	ldr	r3, [pc, #84]	; (4228 <appCmdHandle+0xac>)
    41d2:	609a      	str	r2, [r3, #8]
		appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    41d4:	4b14      	ldr	r3, [pc, #80]	; (4228 <appCmdHandle+0xac>)
    41d6:	2200      	movs	r2, #0
    41d8:	731a      	strb	r2, [r3, #12]
		appCmdIdentifyDurationTimer.handler
			= appCmdIdentifyDurationTimerHandler;
    41da:	4b13      	ldr	r3, [pc, #76]	; (4228 <appCmdHandle+0xac>)
    41dc:	4a15      	ldr	r2, [pc, #84]	; (4234 <appCmdHandle+0xb8>)
    41de:	611a      	str	r2, [r3, #16]
		SYS_TimerStart(&appCmdIdentifyDurationTimer);
    41e0:	4b11      	ldr	r3, [pc, #68]	; (4228 <appCmdHandle+0xac>)
    41e2:	0018      	movs	r0, r3
    41e4:	4b14      	ldr	r3, [pc, #80]	; (4238 <appCmdHandle+0xbc>)
    41e6:	4798      	blx	r3

		appCmdIdentifyPeriodTimer.interval = req->period;
    41e8:	68bb      	ldr	r3, [r7, #8]
    41ea:	78da      	ldrb	r2, [r3, #3]
    41ec:	791b      	ldrb	r3, [r3, #4]
    41ee:	021b      	lsls	r3, r3, #8
    41f0:	4313      	orrs	r3, r2
    41f2:	b29b      	uxth	r3, r3
    41f4:	001a      	movs	r2, r3
    41f6:	4b0e      	ldr	r3, [pc, #56]	; (4230 <appCmdHandle+0xb4>)
    41f8:	609a      	str	r2, [r3, #8]
		appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    41fa:	4b0d      	ldr	r3, [pc, #52]	; (4230 <appCmdHandle+0xb4>)
    41fc:	2201      	movs	r2, #1
    41fe:	731a      	strb	r2, [r3, #12]
		appCmdIdentifyPeriodTimer.handler
			= appCmdIdentifyPeriodTimerHandler;
    4200:	4b0b      	ldr	r3, [pc, #44]	; (4230 <appCmdHandle+0xb4>)
    4202:	4a0e      	ldr	r2, [pc, #56]	; (423c <appCmdHandle+0xc0>)
    4204:	611a      	str	r2, [r3, #16]
		SYS_TimerStart(&appCmdIdentifyPeriodTimer);
    4206:	4b0a      	ldr	r3, [pc, #40]	; (4230 <appCmdHandle+0xb4>)
    4208:	0018      	movs	r0, r3
    420a:	4b0b      	ldr	r3, [pc, #44]	; (4238 <appCmdHandle+0xbc>)
    420c:	4798      	blx	r3
#if (LED_COUNT > 0)
		LED_On(LED_IDENTIFY);
    420e:	2100      	movs	r1, #0
    4210:	2013      	movs	r0, #19
    4212:	4b0b      	ldr	r3, [pc, #44]	; (4240 <appCmdHandle+0xc4>)
    4214:	4798      	blx	r3
#endif
		NWK_Lock();
    4216:	4b0b      	ldr	r3, [pc, #44]	; (4244 <appCmdHandle+0xc8>)
    4218:	4798      	blx	r3

		return true;
    421a:	2301      	movs	r3, #1
    421c:	e000      	b.n	4220 <appCmdHandle+0xa4>
	}

	return false;
    421e:	2300      	movs	r3, #0
}
    4220:	0018      	movs	r0, r3
    4222:	46bd      	mov	sp, r7
    4224:	b004      	add	sp, #16
    4226:	bd80      	pop	{r7, pc}
    4228:	200000d4 	.word	0x200000d4
    422c:	000065a5 	.word	0x000065a5
    4230:	200000e8 	.word	0x200000e8
    4234:	00004249 	.word	0x00004249
    4238:	0000656d 	.word	0x0000656d
    423c:	0000427d 	.word	0x0000427d
    4240:	00003f01 	.word	0x00003f01
    4244:	00006f2d 	.word	0x00006f2d

00004248 <appCmdIdentifyDurationTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdIdentifyDurationTimerHandler(SYS_Timer_t *timer)
{
    4248:	b580      	push	{r7, lr}
    424a:	b082      	sub	sp, #8
    424c:	af00      	add	r7, sp, #0
    424e:	6078      	str	r0, [r7, #4]
	NWK_Unlock();
    4250:	4b06      	ldr	r3, [pc, #24]	; (426c <appCmdIdentifyDurationTimerHandler+0x24>)
    4252:	4798      	blx	r3
#if (LED_COUNT > 0)
	LED_Off(LED_IDENTIFY);
    4254:	2101      	movs	r1, #1
    4256:	2013      	movs	r0, #19
    4258:	4b05      	ldr	r3, [pc, #20]	; (4270 <appCmdIdentifyDurationTimerHandler+0x28>)
    425a:	4798      	blx	r3
#endif
	SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    425c:	4b05      	ldr	r3, [pc, #20]	; (4274 <appCmdIdentifyDurationTimerHandler+0x2c>)
    425e:	0018      	movs	r0, r3
    4260:	4b05      	ldr	r3, [pc, #20]	; (4278 <appCmdIdentifyDurationTimerHandler+0x30>)
    4262:	4798      	blx	r3
	(void)timer;
}
    4264:	46c0      	nop			; (mov r8, r8)
    4266:	46bd      	mov	sp, r7
    4268:	b002      	add	sp, #8
    426a:	bd80      	pop	{r7, pc}
    426c:	00006f4d 	.word	0x00006f4d
    4270:	00003f01 	.word	0x00003f01
    4274:	200000e8 	.word	0x200000e8
    4278:	000065a5 	.word	0x000065a5

0000427c <appCmdIdentifyPeriodTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appCmdIdentifyPeriodTimerHandler(SYS_Timer_t *timer)
{
    427c:	b580      	push	{r7, lr}
    427e:	b082      	sub	sp, #8
    4280:	af00      	add	r7, sp, #0
    4282:	6078      	str	r0, [r7, #4]
#if (LED_COUNT > 0)
	LED_Toggle(LED_IDENTIFY);
    4284:	2013      	movs	r0, #19
    4286:	4b03      	ldr	r3, [pc, #12]	; (4294 <appCmdIdentifyPeriodTimerHandler+0x18>)
    4288:	4798      	blx	r3
#endif
	(void)timer;
}
    428a:	46c0      	nop			; (mov r8, r8)
    428c:	46bd      	mov	sp, r7
    428e:	b002      	add	sp, #8
    4290:	bd80      	pop	{r7, pc}
    4292:	46c0      	nop			; (mov r8, r8)
    4294:	00003f55 	.word	0x00003f55

00004298 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4298:	b580      	push	{r7, lr}
    429a:	b084      	sub	sp, #16
    429c:	af00      	add	r7, sp, #0
    429e:	0002      	movs	r2, r0
    42a0:	1dfb      	adds	r3, r7, #7
    42a2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    42a4:	230f      	movs	r3, #15
    42a6:	18fb      	adds	r3, r7, r3
    42a8:	1dfa      	adds	r2, r7, #7
    42aa:	7812      	ldrb	r2, [r2, #0]
    42ac:	09d2      	lsrs	r2, r2, #7
    42ae:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    42b0:	230e      	movs	r3, #14
    42b2:	18fb      	adds	r3, r7, r3
    42b4:	1dfa      	adds	r2, r7, #7
    42b6:	7812      	ldrb	r2, [r2, #0]
    42b8:	0952      	lsrs	r2, r2, #5
    42ba:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    42bc:	4b0d      	ldr	r3, [pc, #52]	; (42f4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    42be:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    42c0:	230f      	movs	r3, #15
    42c2:	18fb      	adds	r3, r7, r3
    42c4:	781b      	ldrb	r3, [r3, #0]
    42c6:	2b00      	cmp	r3, #0
    42c8:	d10f      	bne.n	42ea <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    42ca:	230f      	movs	r3, #15
    42cc:	18fb      	adds	r3, r7, r3
    42ce:	781b      	ldrb	r3, [r3, #0]
    42d0:	009b      	lsls	r3, r3, #2
    42d2:	2210      	movs	r2, #16
    42d4:	4694      	mov	ip, r2
    42d6:	44bc      	add	ip, r7
    42d8:	4463      	add	r3, ip
    42da:	3b08      	subs	r3, #8
    42dc:	681a      	ldr	r2, [r3, #0]
    42de:	230e      	movs	r3, #14
    42e0:	18fb      	adds	r3, r7, r3
    42e2:	781b      	ldrb	r3, [r3, #0]
    42e4:	01db      	lsls	r3, r3, #7
    42e6:	18d3      	adds	r3, r2, r3
    42e8:	e000      	b.n	42ec <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    42ea:	2300      	movs	r3, #0
	}
}
    42ec:	0018      	movs	r0, r3
    42ee:	46bd      	mov	sp, r7
    42f0:	b004      	add	sp, #16
    42f2:	bd80      	pop	{r7, pc}
    42f4:	41004400 	.word	0x41004400

000042f8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    42f8:	b580      	push	{r7, lr}
    42fa:	b082      	sub	sp, #8
    42fc:	af00      	add	r7, sp, #0
    42fe:	0002      	movs	r2, r0
    4300:	1dfb      	adds	r3, r7, #7
    4302:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4304:	1dfb      	adds	r3, r7, #7
    4306:	781b      	ldrb	r3, [r3, #0]
    4308:	0018      	movs	r0, r3
    430a:	4b03      	ldr	r3, [pc, #12]	; (4318 <port_get_group_from_gpio_pin+0x20>)
    430c:	4798      	blx	r3
    430e:	0003      	movs	r3, r0
}
    4310:	0018      	movs	r0, r3
    4312:	46bd      	mov	sp, r7
    4314:	b002      	add	sp, #8
    4316:	bd80      	pop	{r7, pc}
    4318:	00004299 	.word	0x00004299

0000431c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    431c:	b580      	push	{r7, lr}
    431e:	b084      	sub	sp, #16
    4320:	af00      	add	r7, sp, #0
    4322:	0002      	movs	r2, r0
    4324:	1dfb      	adds	r3, r7, #7
    4326:	701a      	strb	r2, [r3, #0]
    4328:	1dbb      	adds	r3, r7, #6
    432a:	1c0a      	adds	r2, r1, #0
    432c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    432e:	1dfb      	adds	r3, r7, #7
    4330:	781b      	ldrb	r3, [r3, #0]
    4332:	0018      	movs	r0, r3
    4334:	4b0d      	ldr	r3, [pc, #52]	; (436c <port_pin_set_output_level+0x50>)
    4336:	4798      	blx	r3
    4338:	0003      	movs	r3, r0
    433a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    433c:	1dfb      	adds	r3, r7, #7
    433e:	781b      	ldrb	r3, [r3, #0]
    4340:	221f      	movs	r2, #31
    4342:	4013      	ands	r3, r2
    4344:	2201      	movs	r2, #1
    4346:	409a      	lsls	r2, r3
    4348:	0013      	movs	r3, r2
    434a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    434c:	1dbb      	adds	r3, r7, #6
    434e:	781b      	ldrb	r3, [r3, #0]
    4350:	2b00      	cmp	r3, #0
    4352:	d003      	beq.n	435c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4354:	68fb      	ldr	r3, [r7, #12]
    4356:	68ba      	ldr	r2, [r7, #8]
    4358:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    435a:	e002      	b.n	4362 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    435c:	68fb      	ldr	r3, [r7, #12]
    435e:	68ba      	ldr	r2, [r7, #8]
    4360:	615a      	str	r2, [r3, #20]
	}
}
    4362:	46c0      	nop			; (mov r8, r8)
    4364:	46bd      	mov	sp, r7
    4366:	b004      	add	sp, #16
    4368:	bd80      	pop	{r7, pc}
    436a:	46c0      	nop			; (mov r8, r8)
    436c:	000042f9 	.word	0x000042f9

00004370 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    4370:	b580      	push	{r7, lr}
    4372:	b084      	sub	sp, #16
    4374:	af00      	add	r7, sp, #0
    4376:	0002      	movs	r2, r0
    4378:	1dfb      	adds	r3, r7, #7
    437a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    437c:	1dfb      	adds	r3, r7, #7
    437e:	781b      	ldrb	r3, [r3, #0]
    4380:	0018      	movs	r0, r3
    4382:	4b09      	ldr	r3, [pc, #36]	; (43a8 <port_pin_toggle_output_level+0x38>)
    4384:	4798      	blx	r3
    4386:	0003      	movs	r3, r0
    4388:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    438a:	1dfb      	adds	r3, r7, #7
    438c:	781b      	ldrb	r3, [r3, #0]
    438e:	221f      	movs	r2, #31
    4390:	4013      	ands	r3, r2
    4392:	2201      	movs	r2, #1
    4394:	409a      	lsls	r2, r3
    4396:	0013      	movs	r3, r2
    4398:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	68ba      	ldr	r2, [r7, #8]
    439e:	61da      	str	r2, [r3, #28]
}
    43a0:	46c0      	nop			; (mov r8, r8)
    43a2:	46bd      	mov	sp, r7
    43a4:	b004      	add	sp, #16
    43a6:	bd80      	pop	{r7, pc}
    43a8:	000042f9 	.word	0x000042f9

000043ac <appDataInd>:
#endif

/*****************************************************************************
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    43ac:	b580      	push	{r7, lr}
    43ae:	b084      	sub	sp, #16
    43b0:	af00      	add	r7, sp, #0
    43b2:	6078      	str	r0, [r7, #4]
	AppMessage_t *msg = (AppMessage_t *)ind->data;
    43b4:	687b      	ldr	r3, [r7, #4]
    43b6:	689b      	ldr	r3, [r3, #8]
    43b8:	60fb      	str	r3, [r7, #12]
#if (LED_COUNT > 0)
	LED_Toggle(LED_DATA);
    43ba:	2013      	movs	r0, #19
    43bc:	4b07      	ldr	r3, [pc, #28]	; (43dc <appDataInd+0x30>)
    43be:	4798      	blx	r3
#endif
	msg->lqi = ind->lqi;
    43c0:	687b      	ldr	r3, [r7, #4]
    43c2:	7b5a      	ldrb	r2, [r3, #13]
    43c4:	68fb      	ldr	r3, [r7, #12]
    43c6:	765a      	strb	r2, [r3, #25]
	msg->rssi = ind->rssi;
    43c8:	687b      	ldr	r3, [r7, #4]
    43ca:	220e      	movs	r2, #14
    43cc:	569a      	ldrsb	r2, [r3, r2]
    43ce:	68fb      	ldr	r3, [r7, #12]
    43d0:	769a      	strb	r2, [r3, #26]

	if (APP_CommandsPending(ind->srcAddr)) {
		NWK_SetAckControl(APP_COMMAND_PENDING);
	}
#endif
	return true;
    43d2:	2301      	movs	r3, #1
}
    43d4:	0018      	movs	r0, r3
    43d6:	46bd      	mov	sp, r7
    43d8:	b004      	add	sp, #16
    43da:	bd80      	pop	{r7, pc}
    43dc:	00004371 	.word	0x00004371

000043e0 <appDataSendingTimerHandler>:

/*****************************************************************************
*****************************************************************************/
static void appDataSendingTimerHandler(SYS_Timer_t *timer)
{
    43e0:	b580      	push	{r7, lr}
    43e2:	b082      	sub	sp, #8
    43e4:	af00      	add	r7, sp, #0
    43e6:	6078      	str	r0, [r7, #4]
	if (APP_STATE_WAIT_SEND_TIMER == appState) {
    43e8:	4b07      	ldr	r3, [pc, #28]	; (4408 <appDataSendingTimerHandler+0x28>)
    43ea:	781b      	ldrb	r3, [r3, #0]
    43ec:	2b04      	cmp	r3, #4
    43ee:	d103      	bne.n	43f8 <appDataSendingTimerHandler+0x18>
		appState = APP_STATE_SEND;
    43f0:	4b05      	ldr	r3, [pc, #20]	; (4408 <appDataSendingTimerHandler+0x28>)
    43f2:	2201      	movs	r2, #1
    43f4:	701a      	strb	r2, [r3, #0]
	} else {
		SYS_TimerStart(&appDataSendingTimer);
	}

	(void)timer;
}
    43f6:	e003      	b.n	4400 <appDataSendingTimerHandler+0x20>
static void appDataSendingTimerHandler(SYS_Timer_t *timer)
{
	if (APP_STATE_WAIT_SEND_TIMER == appState) {
		appState = APP_STATE_SEND;
	} else {
		SYS_TimerStart(&appDataSendingTimer);
    43f8:	4b04      	ldr	r3, [pc, #16]	; (440c <appDataSendingTimerHandler+0x2c>)
    43fa:	0018      	movs	r0, r3
    43fc:	4b04      	ldr	r3, [pc, #16]	; (4410 <appDataSendingTimerHandler+0x30>)
    43fe:	4798      	blx	r3
	}

	(void)timer;
}
    4400:	46c0      	nop			; (mov r8, r8)
    4402:	46bd      	mov	sp, r7
    4404:	b002      	add	sp, #8
    4406:	bd80      	pop	{r7, pc}
    4408:	20000150 	.word	0x20000150
    440c:	200001e0 	.word	0x200001e0
    4410:	0000656d 	.word	0x0000656d

00004414 <appNetworkStatusTimerHandler>:
#if APP_ROUTER || APP_ENDDEVICE

/*****************************************************************************
*****************************************************************************/
static void appNetworkStatusTimerHandler(SYS_Timer_t *timer)
{
    4414:	b580      	push	{r7, lr}
    4416:	b082      	sub	sp, #8
    4418:	af00      	add	r7, sp, #0
    441a:	6078      	str	r0, [r7, #4]
#if (LED_COUNT > 0)
	LED_Toggle(LED_NETWORK);
    441c:	2013      	movs	r0, #19
    441e:	4b03      	ldr	r3, [pc, #12]	; (442c <appNetworkStatusTimerHandler+0x18>)
    4420:	4798      	blx	r3
#endif
	(void)timer;
}
    4422:	46c0      	nop			; (mov r8, r8)
    4424:	46bd      	mov	sp, r7
    4426:	b002      	add	sp, #8
    4428:	bd80      	pop	{r7, pc}
    442a:	46c0      	nop			; (mov r8, r8)
    442c:	00004371 	.word	0x00004371

00004430 <appCommandWaitTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appCommandWaitTimerHandler(SYS_Timer_t *timer)
{
    4430:	b580      	push	{r7, lr}
    4432:	b082      	sub	sp, #8
    4434:	af00      	add	r7, sp, #0
    4436:	6078      	str	r0, [r7, #4]
	appState = APP_STATE_SENDING_DONE;
    4438:	4b03      	ldr	r3, [pc, #12]	; (4448 <appCommandWaitTimerHandler+0x18>)
    443a:	2203      	movs	r2, #3
    443c:	701a      	strb	r2, [r3, #0]
	(void)timer;
}
    443e:	46c0      	nop			; (mov r8, r8)
    4440:	46bd      	mov	sp, r7
    4442:	b002      	add	sp, #8
    4444:	bd80      	pop	{r7, pc}
    4446:	46c0      	nop			; (mov r8, r8)
    4448:	20000150 	.word	0x20000150

0000444c <appDataConf>:

/*****************************************************************************
*****************************************************************************/
#if APP_ROUTER || APP_ENDDEVICE
static void appDataConf(NWK_DataReq_t *req)
{
    444c:	b580      	push	{r7, lr}
    444e:	b082      	sub	sp, #8
    4450:	af00      	add	r7, sp, #0
    4452:	6078      	str	r0, [r7, #4]
#if (LED_COUNT > 0)
	LED_Off(LED_DATA);
    4454:	2101      	movs	r1, #1
    4456:	2013      	movs	r0, #19
    4458:	4b1e      	ldr	r3, [pc, #120]	; (44d4 <appDataConf+0x88>)
    445a:	4798      	blx	r3
#endif

	if (NWK_SUCCESS_STATUS == req->status) {
    445c:	687b      	ldr	r3, [r7, #4]
    445e:	7f1b      	ldrb	r3, [r3, #28]
    4460:	2b00      	cmp	r3, #0
    4462:	d112      	bne.n	448a <appDataConf+0x3e>
		if (!appNetworkStatus) {
    4464:	4b1c      	ldr	r3, [pc, #112]	; (44d8 <appDataConf+0x8c>)
    4466:	781b      	ldrb	r3, [r3, #0]
    4468:	2201      	movs	r2, #1
    446a:	4053      	eors	r3, r2
    446c:	b2db      	uxtb	r3, r3
    446e:	2b00      	cmp	r3, #0
    4470:	d01a      	beq.n	44a8 <appDataConf+0x5c>
#if (LED_COUNT > 0)
			LED_On(LED_NETWORK);
    4472:	2100      	movs	r1, #0
    4474:	2013      	movs	r0, #19
    4476:	4b17      	ldr	r3, [pc, #92]	; (44d4 <appDataConf+0x88>)
    4478:	4798      	blx	r3
#endif
			SYS_TimerStop(&appNetworkStatusTimer);
    447a:	4b18      	ldr	r3, [pc, #96]	; (44dc <appDataConf+0x90>)
    447c:	0018      	movs	r0, r3
    447e:	4b18      	ldr	r3, [pc, #96]	; (44e0 <appDataConf+0x94>)
    4480:	4798      	blx	r3
			appNetworkStatus = true;
    4482:	4b15      	ldr	r3, [pc, #84]	; (44d8 <appDataConf+0x8c>)
    4484:	2201      	movs	r2, #1
    4486:	701a      	strb	r2, [r3, #0]
    4488:	e00e      	b.n	44a8 <appDataConf+0x5c>
		}
	} else {
		if (appNetworkStatus) {
    448a:	4b13      	ldr	r3, [pc, #76]	; (44d8 <appDataConf+0x8c>)
    448c:	781b      	ldrb	r3, [r3, #0]
    448e:	2b00      	cmp	r3, #0
    4490:	d00a      	beq.n	44a8 <appDataConf+0x5c>
#if (LED_COUNT > 0)
			LED_Off(LED_NETWORK);
    4492:	2101      	movs	r1, #1
    4494:	2013      	movs	r0, #19
    4496:	4b0f      	ldr	r3, [pc, #60]	; (44d4 <appDataConf+0x88>)
    4498:	4798      	blx	r3
#endif
			SYS_TimerStart(&appNetworkStatusTimer);
    449a:	4b10      	ldr	r3, [pc, #64]	; (44dc <appDataConf+0x90>)
    449c:	0018      	movs	r0, r3
    449e:	4b11      	ldr	r3, [pc, #68]	; (44e4 <appDataConf+0x98>)
    44a0:	4798      	blx	r3
			appNetworkStatus = false;
    44a2:	4b0d      	ldr	r3, [pc, #52]	; (44d8 <appDataConf+0x8c>)
    44a4:	2200      	movs	r2, #0
    44a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (APP_COMMAND_PENDING == req->control) {
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	7f5b      	ldrb	r3, [r3, #29]
    44ac:	2b01      	cmp	r3, #1
    44ae:	d10a      	bne.n	44c6 <appDataConf+0x7a>
		SYS_TimerStart(&appCommandWaitTimer);
    44b0:	4b0d      	ldr	r3, [pc, #52]	; (44e8 <appDataConf+0x9c>)
    44b2:	0018      	movs	r0, r3
    44b4:	4b0b      	ldr	r3, [pc, #44]	; (44e4 <appDataConf+0x98>)
    44b6:	4798      	blx	r3
#if (LED_COUNT > 0)
		LED_Toggle(LED_NETWORK);
    44b8:	2013      	movs	r0, #19
    44ba:	4b0c      	ldr	r3, [pc, #48]	; (44ec <appDataConf+0xa0>)
    44bc:	4798      	blx	r3
#endif
		appState = APP_STATE_WAIT_COMMAND_TIMER;
    44be:	4b0c      	ldr	r3, [pc, #48]	; (44f0 <appDataConf+0xa4>)
    44c0:	2205      	movs	r2, #5
    44c2:	701a      	strb	r2, [r3, #0]
	} else {
		appState = APP_STATE_SENDING_DONE;
	}
}
    44c4:	e002      	b.n	44cc <appDataConf+0x80>
#if (LED_COUNT > 0)
		LED_Toggle(LED_NETWORK);
#endif
		appState = APP_STATE_WAIT_COMMAND_TIMER;
	} else {
		appState = APP_STATE_SENDING_DONE;
    44c6:	4b0a      	ldr	r3, [pc, #40]	; (44f0 <appDataConf+0xa4>)
    44c8:	2203      	movs	r2, #3
    44ca:	701a      	strb	r2, [r3, #0]
	}
}
    44cc:	46c0      	nop			; (mov r8, r8)
    44ce:	46bd      	mov	sp, r7
    44d0:	b002      	add	sp, #8
    44d2:	bd80      	pop	{r7, pc}
    44d4:	0000431d 	.word	0x0000431d
    44d8:	2000019c 	.word	0x2000019c
    44dc:	20000174 	.word	0x20000174
    44e0:	000065a5 	.word	0x000065a5
    44e4:	0000656d 	.word	0x0000656d
    44e8:	20000188 	.word	0x20000188
    44ec:	00004371 	.word	0x00004371
    44f0:	20000150 	.word	0x20000150

000044f4 <appSendData>:
#endif

/*****************************************************************************
*****************************************************************************/
static void appSendData(void)
{
    44f4:	b590      	push	{r4, r7, lr}
    44f6:	b085      	sub	sp, #20
    44f8:	af00      	add	r7, sp, #0
#ifdef NWK_ENABLE_ROUTING
	appMsg.parentShortAddr = NWK_RouteNextHop(0, 0);
    44fa:	2100      	movs	r1, #0
    44fc:	2000      	movs	r0, #0
    44fe:	4b9a      	ldr	r3, [pc, #616]	; (4768 <appSendData+0x274>)
    4500:	4798      	blx	r3
    4502:	0003      	movs	r3, r0
    4504:	001a      	movs	r2, r3
    4506:	4b99      	ldr	r3, [pc, #612]	; (476c <appSendData+0x278>)
    4508:	3317      	adds	r3, #23
    450a:	21ff      	movs	r1, #255	; 0xff
    450c:	4011      	ands	r1, r2
    450e:	000c      	movs	r4, r1
    4510:	7819      	ldrb	r1, [r3, #0]
    4512:	2000      	movs	r0, #0
    4514:	4001      	ands	r1, r0
    4516:	1c08      	adds	r0, r1, #0
    4518:	1c21      	adds	r1, r4, #0
    451a:	4301      	orrs	r1, r0
    451c:	7019      	strb	r1, [r3, #0]
    451e:	0a12      	lsrs	r2, r2, #8
    4520:	b290      	uxth	r0, r2
    4522:	785a      	ldrb	r2, [r3, #1]
    4524:	2100      	movs	r1, #0
    4526:	400a      	ands	r2, r1
    4528:	1c11      	adds	r1, r2, #0
    452a:	1c02      	adds	r2, r0, #0
    452c:	430a      	orrs	r2, r1
    452e:	705a      	strb	r2, [r3, #1]
#else
	appMsg.parentShortAddr = 0;
#endif
#if APP_ENDDEVICE

	if (HTU21D_Valid){
    4530:	4b8f      	ldr	r3, [pc, #572]	; (4770 <appSendData+0x27c>)
    4532:	781b      	ldrb	r3, [r3, #0]
    4534:	2b00      	cmp	r3, #0
    4536:	d064      	beq.n	4602 <appSendData+0x10e>
    float temp = HTU21D_readTemperature();
    4538:	4b8e      	ldr	r3, [pc, #568]	; (4774 <appSendData+0x280>)
    453a:	4798      	blx	r3
    453c:	1c03      	adds	r3, r0, #0
    453e:	60fb      	str	r3, [r7, #12]
	float humid = HTU21D_readHumidity();
    4540:	4b8d      	ldr	r3, [pc, #564]	; (4778 <appSendData+0x284>)
    4542:	4798      	blx	r3
    4544:	1c03      	adds	r3, r0, #0
    4546:	60bb      	str	r3, [r7, #8]
	appMsg.sensors.temperature = temp;
    4548:	4b8c      	ldr	r3, [pc, #560]	; (477c <appSendData+0x288>)
    454a:	68f8      	ldr	r0, [r7, #12]
    454c:	4798      	blx	r3
    454e:	0002      	movs	r2, r0
    4550:	4b86      	ldr	r3, [pc, #536]	; (476c <appSendData+0x278>)
    4552:	3321      	adds	r3, #33	; 0x21
    4554:	21ff      	movs	r1, #255	; 0xff
    4556:	4011      	ands	r1, r2
    4558:	000c      	movs	r4, r1
    455a:	7819      	ldrb	r1, [r3, #0]
    455c:	2000      	movs	r0, #0
    455e:	4001      	ands	r1, r0
    4560:	1c08      	adds	r0, r1, #0
    4562:	1c21      	adds	r1, r4, #0
    4564:	4301      	orrs	r1, r0
    4566:	7019      	strb	r1, [r3, #0]
    4568:	0a11      	lsrs	r1, r2, #8
    456a:	20ff      	movs	r0, #255	; 0xff
    456c:	4001      	ands	r1, r0
    456e:	000c      	movs	r4, r1
    4570:	7859      	ldrb	r1, [r3, #1]
    4572:	2000      	movs	r0, #0
    4574:	4001      	ands	r1, r0
    4576:	1c08      	adds	r0, r1, #0
    4578:	1c21      	adds	r1, r4, #0
    457a:	4301      	orrs	r1, r0
    457c:	7059      	strb	r1, [r3, #1]
    457e:	0c11      	lsrs	r1, r2, #16
    4580:	20ff      	movs	r0, #255	; 0xff
    4582:	4001      	ands	r1, r0
    4584:	000c      	movs	r4, r1
    4586:	7899      	ldrb	r1, [r3, #2]
    4588:	2000      	movs	r0, #0
    458a:	4001      	ands	r1, r0
    458c:	1c08      	adds	r0, r1, #0
    458e:	1c21      	adds	r1, r4, #0
    4590:	4301      	orrs	r1, r0
    4592:	7099      	strb	r1, [r3, #2]
    4594:	0e10      	lsrs	r0, r2, #24
    4596:	78da      	ldrb	r2, [r3, #3]
    4598:	2100      	movs	r1, #0
    459a:	400a      	ands	r2, r1
    459c:	1c11      	adds	r1, r2, #0
    459e:	1c02      	adds	r2, r0, #0
    45a0:	430a      	orrs	r2, r1
    45a2:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.humidity	   = humid;
    45a4:	4b75      	ldr	r3, [pc, #468]	; (477c <appSendData+0x288>)
    45a6:	68b8      	ldr	r0, [r7, #8]
    45a8:	4798      	blx	r3
    45aa:	0002      	movs	r2, r0
    45ac:	4b6f      	ldr	r3, [pc, #444]	; (476c <appSendData+0x278>)
    45ae:	332d      	adds	r3, #45	; 0x2d
    45b0:	21ff      	movs	r1, #255	; 0xff
    45b2:	4011      	ands	r1, r2
    45b4:	000c      	movs	r4, r1
    45b6:	7819      	ldrb	r1, [r3, #0]
    45b8:	2000      	movs	r0, #0
    45ba:	4001      	ands	r1, r0
    45bc:	1c08      	adds	r0, r1, #0
    45be:	1c21      	adds	r1, r4, #0
    45c0:	4301      	orrs	r1, r0
    45c2:	7019      	strb	r1, [r3, #0]
    45c4:	0a11      	lsrs	r1, r2, #8
    45c6:	20ff      	movs	r0, #255	; 0xff
    45c8:	4001      	ands	r1, r0
    45ca:	000c      	movs	r4, r1
    45cc:	7859      	ldrb	r1, [r3, #1]
    45ce:	2000      	movs	r0, #0
    45d0:	4001      	ands	r1, r0
    45d2:	1c08      	adds	r0, r1, #0
    45d4:	1c21      	adds	r1, r4, #0
    45d6:	4301      	orrs	r1, r0
    45d8:	7059      	strb	r1, [r3, #1]
    45da:	0c11      	lsrs	r1, r2, #16
    45dc:	20ff      	movs	r0, #255	; 0xff
    45de:	4001      	ands	r1, r0
    45e0:	000c      	movs	r4, r1
    45e2:	7899      	ldrb	r1, [r3, #2]
    45e4:	2000      	movs	r0, #0
    45e6:	4001      	ands	r1, r0
    45e8:	1c08      	adds	r0, r1, #0
    45ea:	1c21      	adds	r1, r4, #0
    45ec:	4301      	orrs	r1, r0
    45ee:	7099      	strb	r1, [r3, #2]
    45f0:	0e10      	lsrs	r0, r2, #24
    45f2:	78da      	ldrb	r2, [r3, #3]
    45f4:	2100      	movs	r1, #0
    45f6:	400a      	ands	r2, r1
    45f8:	1c11      	adds	r1, r2, #0
    45fa:	1c02      	adds	r2, r0, #0
    45fc:	430a      	orrs	r2, r1
    45fe:	70da      	strb	r2, [r3, #3]
    4600:	e05d      	b.n	46be <appSendData+0x1ca>
	}
	
else
	{appMsg.sensors.temperature = rand() & 0xffff;
    4602:	4b5f      	ldr	r3, [pc, #380]	; (4780 <appSendData+0x28c>)
    4604:	4798      	blx	r3
    4606:	0003      	movs	r3, r0
    4608:	041b      	lsls	r3, r3, #16
    460a:	0c1a      	lsrs	r2, r3, #16
    460c:	4b57      	ldr	r3, [pc, #348]	; (476c <appSendData+0x278>)
    460e:	3321      	adds	r3, #33	; 0x21
    4610:	21ff      	movs	r1, #255	; 0xff
    4612:	4011      	ands	r1, r2
    4614:	000c      	movs	r4, r1
    4616:	7819      	ldrb	r1, [r3, #0]
    4618:	2000      	movs	r0, #0
    461a:	4001      	ands	r1, r0
    461c:	1c08      	adds	r0, r1, #0
    461e:	1c21      	adds	r1, r4, #0
    4620:	4301      	orrs	r1, r0
    4622:	7019      	strb	r1, [r3, #0]
    4624:	0a11      	lsrs	r1, r2, #8
    4626:	20ff      	movs	r0, #255	; 0xff
    4628:	4001      	ands	r1, r0
    462a:	000c      	movs	r4, r1
    462c:	7859      	ldrb	r1, [r3, #1]
    462e:	2000      	movs	r0, #0
    4630:	4001      	ands	r1, r0
    4632:	1c08      	adds	r0, r1, #0
    4634:	1c21      	adds	r1, r4, #0
    4636:	4301      	orrs	r1, r0
    4638:	7059      	strb	r1, [r3, #1]
    463a:	0c11      	lsrs	r1, r2, #16
    463c:	20ff      	movs	r0, #255	; 0xff
    463e:	4001      	ands	r1, r0
    4640:	000c      	movs	r4, r1
    4642:	7899      	ldrb	r1, [r3, #2]
    4644:	2000      	movs	r0, #0
    4646:	4001      	ands	r1, r0
    4648:	1c08      	adds	r0, r1, #0
    464a:	1c21      	adds	r1, r4, #0
    464c:	4301      	orrs	r1, r0
    464e:	7099      	strb	r1, [r3, #2]
    4650:	0e10      	lsrs	r0, r2, #24
    4652:	78da      	ldrb	r2, [r3, #3]
    4654:	2100      	movs	r1, #0
    4656:	400a      	ands	r2, r1
    4658:	1c11      	adds	r1, r2, #0
    465a:	1c02      	adds	r2, r0, #0
    465c:	430a      	orrs	r2, r1
    465e:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.humidity	   = rand() & 0xffff;
    4660:	4b47      	ldr	r3, [pc, #284]	; (4780 <appSendData+0x28c>)
    4662:	4798      	blx	r3
    4664:	0003      	movs	r3, r0
    4666:	041b      	lsls	r3, r3, #16
    4668:	0c1a      	lsrs	r2, r3, #16
    466a:	4b40      	ldr	r3, [pc, #256]	; (476c <appSendData+0x278>)
    466c:	332d      	adds	r3, #45	; 0x2d
    466e:	21ff      	movs	r1, #255	; 0xff
    4670:	4011      	ands	r1, r2
    4672:	000c      	movs	r4, r1
    4674:	7819      	ldrb	r1, [r3, #0]
    4676:	2000      	movs	r0, #0
    4678:	4001      	ands	r1, r0
    467a:	1c08      	adds	r0, r1, #0
    467c:	1c21      	adds	r1, r4, #0
    467e:	4301      	orrs	r1, r0
    4680:	7019      	strb	r1, [r3, #0]
    4682:	0a11      	lsrs	r1, r2, #8
    4684:	20ff      	movs	r0, #255	; 0xff
    4686:	4001      	ands	r1, r0
    4688:	000c      	movs	r4, r1
    468a:	7859      	ldrb	r1, [r3, #1]
    468c:	2000      	movs	r0, #0
    468e:	4001      	ands	r1, r0
    4690:	1c08      	adds	r0, r1, #0
    4692:	1c21      	adds	r1, r4, #0
    4694:	4301      	orrs	r1, r0
    4696:	7059      	strb	r1, [r3, #1]
    4698:	0c11      	lsrs	r1, r2, #16
    469a:	20ff      	movs	r0, #255	; 0xff
    469c:	4001      	ands	r1, r0
    469e:	000c      	movs	r4, r1
    46a0:	7899      	ldrb	r1, [r3, #2]
    46a2:	2000      	movs	r0, #0
    46a4:	4001      	ands	r1, r0
    46a6:	1c08      	adds	r0, r1, #0
    46a8:	1c21      	adds	r1, r4, #0
    46aa:	4301      	orrs	r1, r0
    46ac:	7099      	strb	r1, [r3, #2]
    46ae:	0e10      	lsrs	r0, r2, #24
    46b0:	78da      	ldrb	r2, [r3, #3]
    46b2:	2100      	movs	r1, #0
    46b4:	400a      	ands	r2, r1
    46b6:	1c11      	adds	r1, r2, #0
    46b8:	1c02      	adds	r2, r0, #0
    46ba:	430a      	orrs	r2, r1
    46bc:	70da      	strb	r2, [r3, #3]
	}
	//uint16_t battery =  bat_adc_read();
	//appMsg.sensors.battery     = battery;//rand() & 0xffff;
	//appMsg.sensors.light       = rand() & 0xff;
	
	uint16_t moisture =moist_adc_read();
    46be:	1dbc      	adds	r4, r7, #6
    46c0:	4b30      	ldr	r3, [pc, #192]	; (4784 <appSendData+0x290>)
    46c2:	4798      	blx	r3
    46c4:	0003      	movs	r3, r0
    46c6:	8023      	strh	r3, [r4, #0]
	appMsg.sensors.moisture =moisture;
    46c8:	1dbb      	adds	r3, r7, #6
    46ca:	881a      	ldrh	r2, [r3, #0]
    46cc:	4b27      	ldr	r3, [pc, #156]	; (476c <appSendData+0x278>)
    46ce:	3329      	adds	r3, #41	; 0x29
    46d0:	21ff      	movs	r1, #255	; 0xff
    46d2:	4011      	ands	r1, r2
    46d4:	000c      	movs	r4, r1
    46d6:	7819      	ldrb	r1, [r3, #0]
    46d8:	2000      	movs	r0, #0
    46da:	4001      	ands	r1, r0
    46dc:	1c08      	adds	r0, r1, #0
    46de:	1c21      	adds	r1, r4, #0
    46e0:	4301      	orrs	r1, r0
    46e2:	7019      	strb	r1, [r3, #0]
    46e4:	0a11      	lsrs	r1, r2, #8
    46e6:	20ff      	movs	r0, #255	; 0xff
    46e8:	4001      	ands	r1, r0
    46ea:	000c      	movs	r4, r1
    46ec:	7859      	ldrb	r1, [r3, #1]
    46ee:	2000      	movs	r0, #0
    46f0:	4001      	ands	r1, r0
    46f2:	1c08      	adds	r0, r1, #0
    46f4:	1c21      	adds	r1, r4, #0
    46f6:	4301      	orrs	r1, r0
    46f8:	7059      	strb	r1, [r3, #1]
    46fa:	0c11      	lsrs	r1, r2, #16
    46fc:	20ff      	movs	r0, #255	; 0xff
    46fe:	4001      	ands	r1, r0
    4700:	000c      	movs	r4, r1
    4702:	7899      	ldrb	r1, [r3, #2]
    4704:	2000      	movs	r0, #0
    4706:	4001      	ands	r1, r0
    4708:	1c08      	adds	r0, r1, #0
    470a:	1c21      	adds	r1, r4, #0
    470c:	4301      	orrs	r1, r0
    470e:	7099      	strb	r1, [r3, #2]
    4710:	0e10      	lsrs	r0, r2, #24
    4712:	78da      	ldrb	r2, [r3, #3]
    4714:	2100      	movs	r1, #0
    4716:	400a      	ands	r2, r1
    4718:	1c11      	adds	r1, r2, #0
    471a:	1c02      	adds	r2, r0, #0
    471c:	430a      	orrs	r2, r1
    471e:	70da      	strb	r2, [r3, #3]
#if APP_COORDINATOR
	appUartSendMessage((uint8_t *)&appMsg, sizeof(appMsg));
	SYS_TimerStart(&appDataSendingTimer);
	appState = APP_STATE_WAIT_SEND_TIMER;
#else
	appNwkDataReq.dstAddr = 0;
    4720:	4b19      	ldr	r3, [pc, #100]	; (4788 <appSendData+0x294>)
    4722:	2200      	movs	r2, #0
    4724:	815a      	strh	r2, [r3, #10]
	appNwkDataReq.dstEndpoint = APP_ENDPOINT;
    4726:	4b18      	ldr	r3, [pc, #96]	; (4788 <appSendData+0x294>)
    4728:	2201      	movs	r2, #1
    472a:	731a      	strb	r2, [r3, #12]
	appNwkDataReq.srcEndpoint = APP_ENDPOINT;
    472c:	4b16      	ldr	r3, [pc, #88]	; (4788 <appSendData+0x294>)
    472e:	2201      	movs	r2, #1
    4730:	735a      	strb	r2, [r3, #13]
	appNwkDataReq.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY;
    4732:	4b15      	ldr	r3, [pc, #84]	; (4788 <appSendData+0x294>)
    4734:	2203      	movs	r2, #3
    4736:	739a      	strb	r2, [r3, #14]
	appNwkDataReq.data = (uint8_t *)&appMsg;
    4738:	4b13      	ldr	r3, [pc, #76]	; (4788 <appSendData+0x294>)
    473a:	4a0c      	ldr	r2, [pc, #48]	; (476c <appSendData+0x278>)
    473c:	611a      	str	r2, [r3, #16]
	appNwkDataReq.size = sizeof(appMsg);
    473e:	4b12      	ldr	r3, [pc, #72]	; (4788 <appSendData+0x294>)
    4740:	223d      	movs	r2, #61	; 0x3d
    4742:	751a      	strb	r2, [r3, #20]
	appNwkDataReq.confirm = appDataConf;
    4744:	4b10      	ldr	r3, [pc, #64]	; (4788 <appSendData+0x294>)
    4746:	4a11      	ldr	r2, [pc, #68]	; (478c <appSendData+0x298>)
    4748:	619a      	str	r2, [r3, #24]
#if (LED_COUNT > 0)
	LED_On(LED_DATA);
    474a:	2100      	movs	r1, #0
    474c:	2013      	movs	r0, #19
    474e:	4b10      	ldr	r3, [pc, #64]	; (4790 <appSendData+0x29c>)
    4750:	4798      	blx	r3
#endif
	NWK_DataReq(&appNwkDataReq);
    4752:	4b0d      	ldr	r3, [pc, #52]	; (4788 <appSendData+0x294>)
    4754:	0018      	movs	r0, r3
    4756:	4b0f      	ldr	r3, [pc, #60]	; (4794 <appSendData+0x2a0>)
    4758:	4798      	blx	r3

	appState = APP_STATE_WAIT_CONF;
    475a:	4b0f      	ldr	r3, [pc, #60]	; (4798 <appSendData+0x2a4>)
    475c:	2202      	movs	r2, #2
    475e:	701a      	strb	r2, [r3, #0]
#endif
}
    4760:	46c0      	nop			; (mov r8, r8)
    4762:	46bd      	mov	sp, r7
    4764:	b005      	add	sp, #20
    4766:	bd90      	pop	{r4, r7, pc}
    4768:	00007731 	.word	0x00007731
    476c:	200001a0 	.word	0x200001a0
    4770:	20000f4c 	.word	0x20000f4c
    4774:	00002ad1 	.word	0x00002ad1
    4778:	00002bb1 	.word	0x00002bb1
    477c:	0000cfa5 	.word	0x0000cfa5
    4780:	0000ea61 	.word	0x0000ea61
    4784:	000029d5 	.word	0x000029d5
    4788:	20000154 	.word	0x20000154
    478c:	0000444d 	.word	0x0000444d
    4790:	0000431d 	.word	0x0000431d
    4794:	00006fd5 	.word	0x00006fd5
    4798:	20000150 	.word	0x20000150

0000479c <appInit>:

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
    479c:	b580      	push	{r7, lr}
    479e:	af00      	add	r7, sp, #0
	appMsg.commandId            = APP_COMMAND_ID_NETWORK_INFO;
    47a0:	4b7a      	ldr	r3, [pc, #488]	; (498c <appInit+0x1f0>)
    47a2:	2201      	movs	r2, #1
    47a4:	701a      	strb	r2, [r3, #0]
	appMsg.nodeType             = APP_NODE_TYPE;
    47a6:	4b79      	ldr	r3, [pc, #484]	; (498c <appInit+0x1f0>)
    47a8:	2202      	movs	r2, #2
    47aa:	705a      	strb	r2, [r3, #1]
	appMsg.extAddr              = APP_ADDR;
    47ac:	4b77      	ldr	r3, [pc, #476]	; (498c <appInit+0x1f0>)
    47ae:	3302      	adds	r3, #2
    47b0:	881a      	ldrh	r2, [r3, #0]
    47b2:	2100      	movs	r1, #0
    47b4:	400a      	ands	r2, r1
    47b6:	1c11      	adds	r1, r2, #0
    47b8:	4a75      	ldr	r2, [pc, #468]	; (4990 <appInit+0x1f4>)
    47ba:	430a      	orrs	r2, r1
    47bc:	801a      	strh	r2, [r3, #0]
    47be:	885a      	ldrh	r2, [r3, #2]
    47c0:	2100      	movs	r1, #0
    47c2:	400a      	ands	r2, r1
    47c4:	805a      	strh	r2, [r3, #2]
    47c6:	889a      	ldrh	r2, [r3, #4]
    47c8:	2100      	movs	r1, #0
    47ca:	400a      	ands	r2, r1
    47cc:	809a      	strh	r2, [r3, #4]
    47ce:	88da      	ldrh	r2, [r3, #6]
    47d0:	2100      	movs	r1, #0
    47d2:	400a      	ands	r2, r1
    47d4:	80da      	strh	r2, [r3, #6]
	appMsg.shortAddr            = APP_ADDR;
    47d6:	4b6d      	ldr	r3, [pc, #436]	; (498c <appInit+0x1f0>)
    47d8:	4a6d      	ldr	r2, [pc, #436]	; (4990 <appInit+0x1f4>)
    47da:	815a      	strh	r2, [r3, #10]
	appMsg.softVersion          = 0x01010100;
    47dc:	4b6b      	ldr	r3, [pc, #428]	; (498c <appInit+0x1f0>)
    47de:	4a6d      	ldr	r2, [pc, #436]	; (4994 <appInit+0x1f8>)
    47e0:	60da      	str	r2, [r3, #12]
	appMsg.channelMask          = (1L << APP_CHANNEL);
    47e2:	4b6a      	ldr	r3, [pc, #424]	; (498c <appInit+0x1f0>)
    47e4:	2280      	movs	r2, #128	; 0x80
    47e6:	0212      	lsls	r2, r2, #8
    47e8:	611a      	str	r2, [r3, #16]
	appMsg.panId                = APP_PANID;
    47ea:	4b68      	ldr	r3, [pc, #416]	; (498c <appInit+0x1f0>)
    47ec:	4a6a      	ldr	r2, [pc, #424]	; (4998 <appInit+0x1fc>)
    47ee:	829a      	strh	r2, [r3, #20]
	appMsg.workingChannel       = APP_CHANNEL;
    47f0:	4b66      	ldr	r3, [pc, #408]	; (498c <appInit+0x1f0>)
    47f2:	220f      	movs	r2, #15
    47f4:	759a      	strb	r2, [r3, #22]
	appMsg.parentShortAddr      = 0;
    47f6:	4b65      	ldr	r3, [pc, #404]	; (498c <appInit+0x1f0>)
    47f8:	3317      	adds	r3, #23
    47fa:	781a      	ldrb	r2, [r3, #0]
    47fc:	2100      	movs	r1, #0
    47fe:	400a      	ands	r2, r1
    4800:	701a      	strb	r2, [r3, #0]
    4802:	785a      	ldrb	r2, [r3, #1]
    4804:	2100      	movs	r1, #0
    4806:	400a      	ands	r2, r1
    4808:	705a      	strb	r2, [r3, #1]
	appMsg.lqi                  = 0;
    480a:	4b60      	ldr	r3, [pc, #384]	; (498c <appInit+0x1f0>)
    480c:	2200      	movs	r2, #0
    480e:	765a      	strb	r2, [r3, #25]
	appMsg.rssi                 = 0;
    4810:	4b5e      	ldr	r3, [pc, #376]	; (498c <appInit+0x1f0>)
    4812:	2200      	movs	r2, #0
    4814:	769a      	strb	r2, [r3, #26]

	appMsg.sensors.type        = 1;
    4816:	4b5d      	ldr	r3, [pc, #372]	; (498c <appInit+0x1f0>)
    4818:	2201      	movs	r2, #1
    481a:	76da      	strb	r2, [r3, #27]
	appMsg.sensors.size        = sizeof(int32_t) * 3;
    481c:	4b5b      	ldr	r3, [pc, #364]	; (498c <appInit+0x1f0>)
    481e:	220c      	movs	r2, #12
    4820:	771a      	strb	r2, [r3, #28]
	appMsg.sensors.battery     = 0;
    4822:	4b5a      	ldr	r3, [pc, #360]	; (498c <appInit+0x1f0>)
    4824:	331d      	adds	r3, #29
    4826:	781a      	ldrb	r2, [r3, #0]
    4828:	2100      	movs	r1, #0
    482a:	400a      	ands	r2, r1
    482c:	701a      	strb	r2, [r3, #0]
    482e:	785a      	ldrb	r2, [r3, #1]
    4830:	2100      	movs	r1, #0
    4832:	400a      	ands	r2, r1
    4834:	705a      	strb	r2, [r3, #1]
    4836:	789a      	ldrb	r2, [r3, #2]
    4838:	2100      	movs	r1, #0
    483a:	400a      	ands	r2, r1
    483c:	709a      	strb	r2, [r3, #2]
    483e:	78da      	ldrb	r2, [r3, #3]
    4840:	2100      	movs	r1, #0
    4842:	400a      	ands	r2, r1
    4844:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.temperature = 0;
    4846:	4b51      	ldr	r3, [pc, #324]	; (498c <appInit+0x1f0>)
    4848:	3321      	adds	r3, #33	; 0x21
    484a:	781a      	ldrb	r2, [r3, #0]
    484c:	2100      	movs	r1, #0
    484e:	400a      	ands	r2, r1
    4850:	701a      	strb	r2, [r3, #0]
    4852:	785a      	ldrb	r2, [r3, #1]
    4854:	2100      	movs	r1, #0
    4856:	400a      	ands	r2, r1
    4858:	705a      	strb	r2, [r3, #1]
    485a:	789a      	ldrb	r2, [r3, #2]
    485c:	2100      	movs	r1, #0
    485e:	400a      	ands	r2, r1
    4860:	709a      	strb	r2, [r3, #2]
    4862:	78da      	ldrb	r2, [r3, #3]
    4864:	2100      	movs	r1, #0
    4866:	400a      	ands	r2, r1
    4868:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.light       = 0;
    486a:	4b48      	ldr	r3, [pc, #288]	; (498c <appInit+0x1f0>)
    486c:	3325      	adds	r3, #37	; 0x25
    486e:	781a      	ldrb	r2, [r3, #0]
    4870:	2100      	movs	r1, #0
    4872:	400a      	ands	r2, r1
    4874:	701a      	strb	r2, [r3, #0]
    4876:	785a      	ldrb	r2, [r3, #1]
    4878:	2100      	movs	r1, #0
    487a:	400a      	ands	r2, r1
    487c:	705a      	strb	r2, [r3, #1]
    487e:	789a      	ldrb	r2, [r3, #2]
    4880:	2100      	movs	r1, #0
    4882:	400a      	ands	r2, r1
    4884:	709a      	strb	r2, [r3, #2]
    4886:	78da      	ldrb	r2, [r3, #3]
    4888:	2100      	movs	r1, #0
    488a:	400a      	ands	r2, r1
    488c:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.humidity		= 0;
    488e:	4b3f      	ldr	r3, [pc, #252]	; (498c <appInit+0x1f0>)
    4890:	332d      	adds	r3, #45	; 0x2d
    4892:	781a      	ldrb	r2, [r3, #0]
    4894:	2100      	movs	r1, #0
    4896:	400a      	ands	r2, r1
    4898:	701a      	strb	r2, [r3, #0]
    489a:	785a      	ldrb	r2, [r3, #1]
    489c:	2100      	movs	r1, #0
    489e:	400a      	ands	r2, r1
    48a0:	705a      	strb	r2, [r3, #1]
    48a2:	789a      	ldrb	r2, [r3, #2]
    48a4:	2100      	movs	r1, #0
    48a6:	400a      	ands	r2, r1
    48a8:	709a      	strb	r2, [r3, #2]
    48aa:	78da      	ldrb	r2, [r3, #3]
    48ac:	2100      	movs	r1, #0
    48ae:	400a      	ands	r2, r1
    48b0:	70da      	strb	r2, [r3, #3]
	appMsg.sensors.moisture      = 0;
    48b2:	4b36      	ldr	r3, [pc, #216]	; (498c <appInit+0x1f0>)
    48b4:	3329      	adds	r3, #41	; 0x29
    48b6:	781a      	ldrb	r2, [r3, #0]
    48b8:	2100      	movs	r1, #0
    48ba:	400a      	ands	r2, r1
    48bc:	701a      	strb	r2, [r3, #0]
    48be:	785a      	ldrb	r2, [r3, #1]
    48c0:	2100      	movs	r1, #0
    48c2:	400a      	ands	r2, r1
    48c4:	705a      	strb	r2, [r3, #1]
    48c6:	789a      	ldrb	r2, [r3, #2]
    48c8:	2100      	movs	r1, #0
    48ca:	400a      	ands	r2, r1
    48cc:	709a      	strb	r2, [r3, #2]
    48ce:	78da      	ldrb	r2, [r3, #3]
    48d0:	2100      	movs	r1, #0
    48d2:	400a      	ands	r2, r1
    48d4:	70da      	strb	r2, [r3, #3]

	appMsg.caption.type         = 32;
    48d6:	4b2d      	ldr	r3, [pc, #180]	; (498c <appInit+0x1f0>)
    48d8:	2231      	movs	r2, #49	; 0x31
    48da:	2120      	movs	r1, #32
    48dc:	5499      	strb	r1, [r3, r2]
	appMsg.caption.size         = APP_CAPTION_SIZE;
    48de:	4b2b      	ldr	r3, [pc, #172]	; (498c <appInit+0x1f0>)
    48e0:	2232      	movs	r2, #50	; 0x32
    48e2:	210a      	movs	r1, #10
    48e4:	5499      	strb	r1, [r3, r2]
	memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    48e6:	4b29      	ldr	r3, [pc, #164]	; (498c <appInit+0x1f0>)
    48e8:	2233      	movs	r2, #51	; 0x33
    48ea:	492c      	ldr	r1, [pc, #176]	; (499c <appInit+0x200>)
    48ec:	189b      	adds	r3, r3, r2
    48ee:	220a      	movs	r2, #10
    48f0:	0018      	movs	r0, r3
    48f2:	4b2b      	ldr	r3, [pc, #172]	; (49a0 <appInit+0x204>)
    48f4:	4798      	blx	r3

	NWK_SetAddr(APP_ADDR);
    48f6:	4b2b      	ldr	r3, [pc, #172]	; (49a4 <appInit+0x208>)
    48f8:	0018      	movs	r0, r3
    48fa:	4b2b      	ldr	r3, [pc, #172]	; (49a8 <appInit+0x20c>)
    48fc:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    48fe:	4b26      	ldr	r3, [pc, #152]	; (4998 <appInit+0x1fc>)
    4900:	0018      	movs	r0, r3
    4902:	4b2a      	ldr	r3, [pc, #168]	; (49ac <appInit+0x210>)
    4904:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    4906:	200f      	movs	r0, #15
    4908:	4b29      	ldr	r3, [pc, #164]	; (49b0 <appInit+0x214>)
    490a:	4798      	blx	r3
#if (defined(PHY_AT86RF212B) || defined(PHY_AT86RF212))
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
#endif
	PHY_SetRxState(true);
    490c:	2001      	movs	r0, #1
    490e:	4b29      	ldr	r3, [pc, #164]	; (49b4 <appInit+0x218>)
    4910:	4798      	blx	r3

#ifdef NWK_ENABLE_SECURITY
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    4912:	4b29      	ldr	r3, [pc, #164]	; (49b8 <appInit+0x21c>)
    4914:	0018      	movs	r0, r3
    4916:	4b29      	ldr	r3, [pc, #164]	; (49bc <appInit+0x220>)
    4918:	4798      	blx	r3
#endif

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    491a:	4b29      	ldr	r3, [pc, #164]	; (49c0 <appInit+0x224>)
    491c:	0019      	movs	r1, r3
    491e:	2001      	movs	r0, #1
    4920:	4b28      	ldr	r3, [pc, #160]	; (49c4 <appInit+0x228>)
    4922:	4798      	blx	r3

	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    4924:	4b28      	ldr	r3, [pc, #160]	; (49c8 <appInit+0x22c>)
    4926:	22fa      	movs	r2, #250	; 0xfa
    4928:	00d2      	lsls	r2, r2, #3
    492a:	609a      	str	r2, [r3, #8]
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    492c:	4b26      	ldr	r3, [pc, #152]	; (49c8 <appInit+0x22c>)
    492e:	2200      	movs	r2, #0
    4930:	731a      	strb	r2, [r3, #12]
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    4932:	4b25      	ldr	r3, [pc, #148]	; (49c8 <appInit+0x22c>)
    4934:	4a25      	ldr	r2, [pc, #148]	; (49cc <appInit+0x230>)
    4936:	611a      	str	r2, [r3, #16]

#if APP_ROUTER || APP_ENDDEVICE
	appNetworkStatus = false;
    4938:	4b25      	ldr	r3, [pc, #148]	; (49d0 <appInit+0x234>)
    493a:	2200      	movs	r2, #0
    493c:	701a      	strb	r2, [r3, #0]
	appNetworkStatusTimer.interval = 500;
    493e:	4b25      	ldr	r3, [pc, #148]	; (49d4 <appInit+0x238>)
    4940:	22fa      	movs	r2, #250	; 0xfa
    4942:	0052      	lsls	r2, r2, #1
    4944:	609a      	str	r2, [r3, #8]
	appNetworkStatusTimer.mode = SYS_TIMER_PERIODIC_MODE;
    4946:	4b23      	ldr	r3, [pc, #140]	; (49d4 <appInit+0x238>)
    4948:	2201      	movs	r2, #1
    494a:	731a      	strb	r2, [r3, #12]
	appNetworkStatusTimer.handler = appNetworkStatusTimerHandler;
    494c:	4b21      	ldr	r3, [pc, #132]	; (49d4 <appInit+0x238>)
    494e:	4a22      	ldr	r2, [pc, #136]	; (49d8 <appInit+0x23c>)
    4950:	611a      	str	r2, [r3, #16]
	SYS_TimerStart(&appNetworkStatusTimer);
    4952:	4b20      	ldr	r3, [pc, #128]	; (49d4 <appInit+0x238>)
    4954:	0018      	movs	r0, r3
    4956:	4b21      	ldr	r3, [pc, #132]	; (49dc <appInit+0x240>)
    4958:	4798      	blx	r3

	appCommandWaitTimer.interval = NWK_ACK_WAIT_TIME;
    495a:	4b21      	ldr	r3, [pc, #132]	; (49e0 <appInit+0x244>)
    495c:	22fa      	movs	r2, #250	; 0xfa
    495e:	0092      	lsls	r2, r2, #2
    4960:	609a      	str	r2, [r3, #8]
	appCommandWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    4962:	4b1f      	ldr	r3, [pc, #124]	; (49e0 <appInit+0x244>)
    4964:	2200      	movs	r2, #0
    4966:	731a      	strb	r2, [r3, #12]
	appCommandWaitTimer.handler = appCommandWaitTimerHandler;
    4968:	4b1d      	ldr	r3, [pc, #116]	; (49e0 <appInit+0x244>)
    496a:	4a1e      	ldr	r2, [pc, #120]	; (49e4 <appInit+0x248>)
    496c:	611a      	str	r2, [r3, #16]
	LED_On(LED_NETWORK);
#endif
#endif

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
	srand(PHY_RandomReq());
    496e:	4b1e      	ldr	r3, [pc, #120]	; (49e8 <appInit+0x24c>)
    4970:	4798      	blx	r3
    4972:	0003      	movs	r3, r0
    4974:	0018      	movs	r0, r3
    4976:	4b1d      	ldr	r3, [pc, #116]	; (49ec <appInit+0x250>)
    4978:	4798      	blx	r3
#endif

	APP_CommandsInit();
    497a:	4b1d      	ldr	r3, [pc, #116]	; (49f0 <appInit+0x254>)
    497c:	4798      	blx	r3

	appState = APP_STATE_SEND;
    497e:	4b1d      	ldr	r3, [pc, #116]	; (49f4 <appInit+0x258>)
    4980:	2201      	movs	r2, #1
    4982:	701a      	strb	r2, [r3, #0]
}
    4984:	46c0      	nop			; (mov r8, r8)
    4986:	46bd      	mov	sp, r7
    4988:	bd80      	pop	{r7, pc}
    498a:	46c0      	nop			; (mov r8, r8)
    498c:	200001a0 	.word	0x200001a0
    4990:	ffff8001 	.word	0xffff8001
    4994:	01010100 	.word	0x01010100
    4998:	00001234 	.word	0x00001234
    499c:	0000fa6c 	.word	0x0000fa6c
    49a0:	0000e9ad 	.word	0x0000e9ad
    49a4:	00008001 	.word	0x00008001
    49a8:	00006e89 	.word	0x00006e89
    49ac:	00006eb9 	.word	0x00006eb9
    49b0:	00006965 	.word	0x00006965
    49b4:	0000693d 	.word	0x0000693d
    49b8:	0000fa78 	.word	0x0000fa78
    49bc:	00009025 	.word	0x00009025
    49c0:	000043ad 	.word	0x000043ad
    49c4:	00006ee9 	.word	0x00006ee9
    49c8:	200001e0 	.word	0x200001e0
    49cc:	000043e1 	.word	0x000043e1
    49d0:	2000019c 	.word	0x2000019c
    49d4:	20000174 	.word	0x20000174
    49d8:	00004415 	.word	0x00004415
    49dc:	0000656d 	.word	0x0000656d
    49e0:	20000188 	.word	0x20000188
    49e4:	00004431 	.word	0x00004431
    49e8:	00006aed 	.word	0x00006aed
    49ec:	0000ea05 	.word	0x0000ea05
    49f0:	00003f91 	.word	0x00003f91
    49f4:	20000150 	.word	0x20000150

000049f8 <APP_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
    49f8:	b580      	push	{r7, lr}
    49fa:	af00      	add	r7, sp, #0
	switch (appState) {
    49fc:	4b1a      	ldr	r3, [pc, #104]	; (4a68 <APP_TaskHandler+0x70>)
    49fe:	781b      	ldrb	r3, [r3, #0]
    4a00:	2b08      	cmp	r3, #8
    4a02:	d82a      	bhi.n	4a5a <APP_TaskHandler+0x62>
    4a04:	009a      	lsls	r2, r3, #2
    4a06:	4b19      	ldr	r3, [pc, #100]	; (4a6c <APP_TaskHandler+0x74>)
    4a08:	18d3      	adds	r3, r2, r3
    4a0a:	681b      	ldr	r3, [r3, #0]
    4a0c:	469f      	mov	pc, r3
	case APP_STATE_INITIAL:
	{
		appInit();
    4a0e:	4b18      	ldr	r3, [pc, #96]	; (4a70 <APP_TaskHandler+0x78>)
    4a10:	4798      	blx	r3
	}
	break;
    4a12:	e025      	b.n	4a60 <APP_TaskHandler+0x68>

	case APP_STATE_SEND:
	{
		appSendData();
    4a14:	4b17      	ldr	r3, [pc, #92]	; (4a74 <APP_TaskHandler+0x7c>)
    4a16:	4798      	blx	r3
	}
	break;
    4a18:	e022      	b.n	4a60 <APP_TaskHandler+0x68>

	case APP_STATE_SENDING_DONE:
	{
#if APP_ENDDEVICE
		appState = APP_STATE_PREPARE_TO_SLEEP;
    4a1a:	4b13      	ldr	r3, [pc, #76]	; (4a68 <APP_TaskHandler+0x70>)
    4a1c:	2206      	movs	r2, #6
    4a1e:	701a      	strb	r2, [r3, #0]
#else
		SYS_TimerStart(&appDataSendingTimer);
		appState = APP_STATE_WAIT_SEND_TIMER;
#endif
	}
	break;
    4a20:	e01e      	b.n	4a60 <APP_TaskHandler+0x68>

#if APP_ENDDEVICE
	case APP_STATE_PREPARE_TO_SLEEP:
	{
		if (!NWK_Busy()) {
    4a22:	4b15      	ldr	r3, [pc, #84]	; (4a78 <APP_TaskHandler+0x80>)
    4a24:	4798      	blx	r3
    4a26:	0003      	movs	r3, r0
    4a28:	001a      	movs	r2, r3
    4a2a:	2301      	movs	r3, #1
    4a2c:	4053      	eors	r3, r2
    4a2e:	b2db      	uxtb	r3, r3
    4a30:	2b00      	cmp	r3, #0
    4a32:	d014      	beq.n	4a5e <APP_TaskHandler+0x66>
			NWK_SleepReq();
    4a34:	4b11      	ldr	r3, [pc, #68]	; (4a7c <APP_TaskHandler+0x84>)
    4a36:	4798      	blx	r3
			appState = APP_STATE_SLEEP;
    4a38:	4b0b      	ldr	r3, [pc, #44]	; (4a68 <APP_TaskHandler+0x70>)
    4a3a:	2207      	movs	r2, #7
    4a3c:	701a      	strb	r2, [r3, #0]
		}
	}
	break;
    4a3e:	e00e      	b.n	4a5e <APP_TaskHandler+0x66>

	case APP_STATE_SLEEP:
	{
		sm_sleep(APP_SENDING_INTERVAL / 1000);
    4a40:	2002      	movs	r0, #2
    4a42:	4b0f      	ldr	r3, [pc, #60]	; (4a80 <APP_TaskHandler+0x88>)
    4a44:	4798      	blx	r3
		appState = APP_STATE_WAKEUP;
    4a46:	4b08      	ldr	r3, [pc, #32]	; (4a68 <APP_TaskHandler+0x70>)
    4a48:	2208      	movs	r2, #8
    4a4a:	701a      	strb	r2, [r3, #0]
	}
	break;
    4a4c:	e008      	b.n	4a60 <APP_TaskHandler+0x68>

	case APP_STATE_WAKEUP:
	{
		NWK_WakeupReq();
    4a4e:	4b0d      	ldr	r3, [pc, #52]	; (4a84 <APP_TaskHandler+0x8c>)
    4a50:	4798      	blx	r3
		/*
		 * #if (LED_COUNT > 0)
		 *    LED_On(LED_NETWORK);
		 #endif*/

		appState = APP_STATE_SEND;
    4a52:	4b05      	ldr	r3, [pc, #20]	; (4a68 <APP_TaskHandler+0x70>)
    4a54:	2201      	movs	r2, #1
    4a56:	701a      	strb	r2, [r3, #0]
	}
	break;
    4a58:	e002      	b.n	4a60 <APP_TaskHandler+0x68>
#endif
	default:
		break;
    4a5a:	46c0      	nop			; (mov r8, r8)
    4a5c:	e000      	b.n	4a60 <APP_TaskHandler+0x68>
		if (!NWK_Busy()) {
			NWK_SleepReq();
			appState = APP_STATE_SLEEP;
		}
	}
	break;
    4a5e:	46c0      	nop			; (mov r8, r8)
	uint16_t bytes;
	if ((bytes = sio2host_rx(rx_data, APP_RX_BUF_SIZE)) > 0) {
		UartBytesReceived(bytes, (uint8_t *)&rx_data);
	}
#endif
}
    4a60:	46c0      	nop			; (mov r8, r8)
    4a62:	46bd      	mov	sp, r7
    4a64:	bd80      	pop	{r7, pc}
    4a66:	46c0      	nop			; (mov r8, r8)
    4a68:	20000150 	.word	0x20000150
    4a6c:	0000fa8c 	.word	0x0000fa8c
    4a70:	0000479d 	.word	0x0000479d
    4a74:	000044f5 	.word	0x000044f5
    4a78:	00006f11 	.word	0x00006f11
    4a7c:	00006f6d 	.word	0x00006f6d
    4a80:	00003079 	.word	0x00003079
    4a84:	00006f81 	.word	0x00006f81

00004a88 <wsndemo_init>:

/**
 * Init function of the WSNDemo application
 */
void wsndemo_init(void)
{
    4a88:	b580      	push	{r7, lr}
    4a8a:	af00      	add	r7, sp, #0
	SYS_Init();
    4a8c:	4b08      	ldr	r3, [pc, #32]	; (4ab0 <wsndemo_init+0x28>)
    4a8e:	4798      	blx	r3
#if APP_ENDDEVICE
	sm_init();
    4a90:	4b08      	ldr	r3, [pc, #32]	; (4ab4 <wsndemo_init+0x2c>)
    4a92:	4798      	blx	r3
	configure_adc_averaging();
    4a94:	4b08      	ldr	r3, [pc, #32]	; (4ab8 <wsndemo_init+0x30>)
    4a96:	4798      	blx	r3
#if HTU21D_Enable
	i2c_init(); //comment out during debug of adc
    4a98:	4b08      	ldr	r3, [pc, #32]	; (4abc <wsndemo_init+0x34>)
    4a9a:	4798      	blx	r3
	HTU21D_Valid=HTU21D_Init();
    4a9c:	4b08      	ldr	r3, [pc, #32]	; (4ac0 <wsndemo_init+0x38>)
    4a9e:	4798      	blx	r3
    4aa0:	0003      	movs	r3, r0
    4aa2:	b2da      	uxtb	r2, r3
    4aa4:	4b07      	ldr	r3, [pc, #28]	; (4ac4 <wsndemo_init+0x3c>)
    4aa6:	701a      	strb	r2, [r3, #0]
#endif
#if APP_COORDINATOR
	//stdio_usb_init(void)
	sio2host_init();
#endif
}
    4aa8:	46c0      	nop			; (mov r8, r8)
    4aaa:	46bd      	mov	sp, r7
    4aac:	bd80      	pop	{r7, pc}
    4aae:	46c0      	nop			; (mov r8, r8)
    4ab0:	00006431 	.word	0x00006431
    4ab4:	0000302d 	.word	0x0000302d
    4ab8:	00002975 	.word	0x00002975
    4abc:	00002db9 	.word	0x00002db9
    4ac0:	00002a79 	.word	0x00002a79
    4ac4:	20000f4c 	.word	0x20000f4c

00004ac8 <wsndemo_task>:
/**
 * Task of the WSNDemo application
 * This task should be called in a while(1)
 */
void wsndemo_task(void)
{
    4ac8:	b580      	push	{r7, lr}
    4aca:	af00      	add	r7, sp, #0
	SYS_TaskHandler();
    4acc:	4b03      	ldr	r3, [pc, #12]	; (4adc <wsndemo_task+0x14>)
    4ace:	4798      	blx	r3
	APP_TaskHandler();
    4ad0:	4b03      	ldr	r3, [pc, #12]	; (4ae0 <wsndemo_task+0x18>)
    4ad2:	4798      	blx	r3
}
    4ad4:	46c0      	nop			; (mov r8, r8)
    4ad6:	46bd      	mov	sp, r7
    4ad8:	bd80      	pop	{r7, pc}
    4ada:	46c0      	nop			; (mov r8, r8)
    4adc:	0000645d 	.word	0x0000645d
    4ae0:	000049f9 	.word	0x000049f9

00004ae4 <sal_init>:
 * @brief Initialization of SAL.
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
    4ae4:	b580      	push	{r7, lr}
    4ae6:	af00      	add	r7, sp, #0
}
    4ae8:	46c0      	nop			; (mov r8, r8)
    4aea:	46bd      	mov	sp, r7
    4aec:	bd80      	pop	{r7, pc}
    4aee:	46c0      	nop			; (mov r8, r8)

00004af0 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    4af0:	b580      	push	{r7, lr}
    4af2:	b086      	sub	sp, #24
    4af4:	af00      	add	r7, sp, #0
    4af6:	6078      	str	r0, [r7, #4]
    4af8:	0008      	movs	r0, r1
    4afa:	0011      	movs	r1, r2
    4afc:	1cfb      	adds	r3, r7, #3
    4afe:	1c02      	adds	r2, r0, #0
    4b00:	701a      	strb	r2, [r3, #0]
    4b02:	1cbb      	adds	r3, r7, #2
    4b04:	1c0a      	adds	r2, r1, #0
    4b06:	701a      	strb	r2, [r3, #0]
	if (key != NULL) {
    4b08:	687b      	ldr	r3, [r7, #4]
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	d01c      	beq.n	4b48 <sal_aes_setup+0x58>
		/* Setup key. */
		dec_initialized = false;
    4b0e:	4b5e      	ldr	r3, [pc, #376]	; (4c88 <sal_aes_setup+0x198>)
    4b10:	2200      	movs	r2, #0
    4b12:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    4b14:	4b5d      	ldr	r3, [pc, #372]	; (4c8c <sal_aes_setup+0x19c>)
    4b16:	2202      	movs	r2, #2
    4b18:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    4b1a:	4a5d      	ldr	r2, [pc, #372]	; (4c90 <sal_aes_setup+0x1a0>)
    4b1c:	687b      	ldr	r3, [r7, #4]
    4b1e:	0010      	movs	r0, r2
    4b20:	0019      	movs	r1, r3
    4b22:	2310      	movs	r3, #16
    4b24:	001a      	movs	r2, r3
    4b26:	4b5b      	ldr	r3, [pc, #364]	; (4c94 <sal_aes_setup+0x1a4>)
    4b28:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    4b2a:	4b5b      	ldr	r3, [pc, #364]	; (4c98 <sal_aes_setup+0x1a8>)
    4b2c:	2210      	movs	r2, #16
    4b2e:	701a      	strb	r2, [r3, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    4b30:	4b5a      	ldr	r3, [pc, #360]	; (4c9c <sal_aes_setup+0x1ac>)
    4b32:	6879      	ldr	r1, [r7, #4]
    4b34:	2210      	movs	r2, #16
    4b36:	0018      	movs	r0, r3
    4b38:	4b56      	ldr	r3, [pc, #344]	; (4c94 <sal_aes_setup+0x1a4>)
    4b3a:	4798      	blx	r3

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    4b3c:	4b56      	ldr	r3, [pc, #344]	; (4c98 <sal_aes_setup+0x1a8>)
    4b3e:	2211      	movs	r2, #17
    4b40:	0019      	movs	r1, r3
    4b42:	2083      	movs	r0, #131	; 0x83
    4b44:	4b56      	ldr	r3, [pc, #344]	; (4ca0 <sal_aes_setup+0x1b0>)
    4b46:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    4b48:	1cbb      	adds	r3, r7, #2
    4b4a:	781b      	ldrb	r3, [r3, #0]
    4b4c:	2b00      	cmp	r3, #0
    4b4e:	d002      	beq.n	4b56 <sal_aes_setup+0x66>
    4b50:	2b01      	cmp	r3, #1
    4b52:	d016      	beq.n	4b82 <sal_aes_setup+0x92>
    4b54:	e053      	b.n	4bfe <sal_aes_setup+0x10e>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    4b56:	4b4d      	ldr	r3, [pc, #308]	; (4c8c <sal_aes_setup+0x19c>)
    4b58:	781b      	ldrb	r3, [r3, #0]
    4b5a:	2b01      	cmp	r3, #1
    4b5c:	d151      	bne.n	4c02 <sal_aes_setup+0x112>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    4b5e:	4b4e      	ldr	r3, [pc, #312]	; (4c98 <sal_aes_setup+0x1a8>)
    4b60:	2210      	movs	r2, #16
    4b62:	701a      	strb	r2, [r3, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    4b64:	4a4d      	ldr	r2, [pc, #308]	; (4c9c <sal_aes_setup+0x1ac>)
    4b66:	4b4a      	ldr	r3, [pc, #296]	; (4c90 <sal_aes_setup+0x1a0>)
    4b68:	0010      	movs	r0, r2
    4b6a:	0019      	movs	r1, r3
    4b6c:	2310      	movs	r3, #16
    4b6e:	001a      	movs	r2, r3
    4b70:	4b48      	ldr	r3, [pc, #288]	; (4c94 <sal_aes_setup+0x1a4>)
    4b72:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    4b74:	4b48      	ldr	r3, [pc, #288]	; (4c98 <sal_aes_setup+0x1a8>)
    4b76:	2211      	movs	r2, #17
    4b78:	0019      	movs	r1, r3
    4b7a:	2083      	movs	r0, #131	; 0x83
    4b7c:	4b48      	ldr	r3, [pc, #288]	; (4ca0 <sal_aes_setup+0x1b0>)
    4b7e:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);
		}

		break;
    4b80:	e03f      	b.n	4c02 <sal_aes_setup+0x112>

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    4b82:	4b42      	ldr	r3, [pc, #264]	; (4c8c <sal_aes_setup+0x19c>)
    4b84:	781b      	ldrb	r3, [r3, #0]
    4b86:	2b01      	cmp	r3, #1
    4b88:	d03d      	beq.n	4c06 <sal_aes_setup+0x116>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    4b8a:	4b43      	ldr	r3, [pc, #268]	; (4c98 <sal_aes_setup+0x1a8>)
    4b8c:	2210      	movs	r2, #16
    4b8e:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    4b90:	4b3d      	ldr	r3, [pc, #244]	; (4c88 <sal_aes_setup+0x198>)
    4b92:	781b      	ldrb	r3, [r3, #0]
    4b94:	2201      	movs	r2, #1
    4b96:	4053      	eors	r3, r2
    4b98:	b2db      	uxtb	r3, r3
    4b9a:	2b00      	cmp	r3, #0
    4b9c:	d01d      	beq.n	4bda <sal_aes_setup+0xea>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    4b9e:	4b3e      	ldr	r3, [pc, #248]	; (4c98 <sal_aes_setup+0x1a8>)
    4ba0:	2200      	movs	r2, #0
    4ba2:	701a      	strb	r2, [r3, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    4ba4:	4b3c      	ldr	r3, [pc, #240]	; (4c98 <sal_aes_setup+0x1a8>)
    4ba6:	2280      	movs	r2, #128	; 0x80
    4ba8:	745a      	strb	r2, [r3, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    4baa:	4b3e      	ldr	r3, [pc, #248]	; (4ca4 <sal_aes_setup+0x1b4>)
    4bac:	2201      	movs	r2, #1
    4bae:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    4bb0:	2308      	movs	r3, #8
    4bb2:	18fb      	adds	r3, r7, r3
    4bb4:	2100      	movs	r1, #0
    4bb6:	0018      	movs	r0, r3
    4bb8:	4b3b      	ldr	r3, [pc, #236]	; (4ca8 <sal_aes_setup+0x1b8>)
    4bba:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    4bbc:	4b36      	ldr	r3, [pc, #216]	; (4c98 <sal_aes_setup+0x1a8>)
    4bbe:	2210      	movs	r2, #16
    4bc0:	701a      	strb	r2, [r3, #0]
				trx_sram_write(
    4bc2:	4b35      	ldr	r3, [pc, #212]	; (4c98 <sal_aes_setup+0x1a8>)
    4bc4:	2201      	movs	r2, #1
    4bc6:	0019      	movs	r1, r3
    4bc8:	2083      	movs	r0, #131	; 0x83
    4bca:	4b35      	ldr	r3, [pc, #212]	; (4ca0 <sal_aes_setup+0x1b0>)
    4bcc:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    4bce:	4b37      	ldr	r3, [pc, #220]	; (4cac <sal_aes_setup+0x1bc>)
    4bd0:	2210      	movs	r2, #16
    4bd2:	0019      	movs	r1, r3
    4bd4:	2084      	movs	r0, #132	; 0x84
    4bd6:	4b36      	ldr	r3, [pc, #216]	; (4cb0 <sal_aes_setup+0x1c0>)
    4bd8:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    4bda:	4a30      	ldr	r2, [pc, #192]	; (4c9c <sal_aes_setup+0x1ac>)
    4bdc:	4b33      	ldr	r3, [pc, #204]	; (4cac <sal_aes_setup+0x1bc>)
    4bde:	0010      	movs	r0, r2
    4be0:	0019      	movs	r1, r3
    4be2:	2310      	movs	r3, #16
    4be4:	001a      	movs	r2, r3
    4be6:	4b2b      	ldr	r3, [pc, #172]	; (4c94 <sal_aes_setup+0x1a4>)
    4be8:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    4bea:	4b2b      	ldr	r3, [pc, #172]	; (4c98 <sal_aes_setup+0x1a8>)
    4bec:	2211      	movs	r2, #17
    4bee:	0019      	movs	r1, r3
    4bf0:	2083      	movs	r0, #131	; 0x83
    4bf2:	4b2b      	ldr	r3, [pc, #172]	; (4ca0 <sal_aes_setup+0x1b0>)
    4bf4:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    4bf6:	4b24      	ldr	r3, [pc, #144]	; (4c88 <sal_aes_setup+0x198>)
    4bf8:	2201      	movs	r2, #1
    4bfa:	701a      	strb	r2, [r3, #0]
		}

		break;
    4bfc:	e003      	b.n	4c06 <sal_aes_setup+0x116>

	default:
		return false;
    4bfe:	2300      	movs	r3, #0
    4c00:	e03d      	b.n	4c7e <sal_aes_setup+0x18e>
			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
					aes_buf, AES_BLOCKSIZE + 1);
		}

		break;
    4c02:	46c0      	nop			; (mov r8, r8)
    4c04:	e000      	b.n	4c08 <sal_aes_setup+0x118>
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
		}

		break;
    4c06:	46c0      	nop			; (mov r8, r8)

	default:
		return false;
	}

	last_dir = dir;
    4c08:	4b20      	ldr	r3, [pc, #128]	; (4c8c <sal_aes_setup+0x19c>)
    4c0a:	1cba      	adds	r2, r7, #2
    4c0c:	7812      	ldrb	r2, [r2, #0]
    4c0e:	701a      	strb	r2, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    4c10:	1cfb      	adds	r3, r7, #3
    4c12:	781b      	ldrb	r3, [r3, #0]
    4c14:	2b00      	cmp	r3, #0
    4c16:	d001      	beq.n	4c1c <sal_aes_setup+0x12c>
    4c18:	2b02      	cmp	r3, #2
    4c1a:	d12f      	bne.n	4c7c <sal_aes_setup+0x18c>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    4c1c:	1cfb      	adds	r3, r7, #3
    4c1e:	781b      	ldrb	r3, [r3, #0]
    4c20:	011b      	lsls	r3, r3, #4
    4c22:	b25b      	sxtb	r3, r3
    4c24:	2270      	movs	r2, #112	; 0x70
    4c26:	4013      	ands	r3, r2
    4c28:	b25a      	sxtb	r2, r3
				SR_MASK(SR_AES_DIR, dir);
    4c2a:	1cbb      	adds	r3, r7, #2
    4c2c:	781b      	ldrb	r3, [r3, #0]
    4c2e:	00db      	lsls	r3, r3, #3
	/* Set encryption mode. */
	switch (enc_mode) {
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    4c30:	b25b      	sxtb	r3, r3
    4c32:	2108      	movs	r1, #8
    4c34:	400b      	ands	r3, r1
    4c36:	b25b      	sxtb	r3, r3
    4c38:	4313      	orrs	r3, r2
    4c3a:	b25b      	sxtb	r3, r3
    4c3c:	b2da      	uxtb	r2, r3
    4c3e:	4b16      	ldr	r3, [pc, #88]	; (4c98 <sal_aes_setup+0x1a8>)
    4c40:	701a      	strb	r2, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    4c42:	1cfb      	adds	r3, r7, #3
    4c44:	781b      	ldrb	r3, [r3, #0]
    4c46:	011b      	lsls	r3, r3, #4
    4c48:	b25b      	sxtb	r3, r3
    4c4a:	2270      	movs	r2, #112	; 0x70
    4c4c:	4013      	ands	r3, r2
    4c4e:	b25a      	sxtb	r2, r3
				SR_MASK(SR_AES_DIR, dir) |
    4c50:	1cbb      	adds	r3, r7, #2
    4c52:	781b      	ldrb	r3, [r3, #0]
    4c54:	00db      	lsls	r3, r3, #3
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    4c56:	b25b      	sxtb	r3, r3
    4c58:	2108      	movs	r1, #8
    4c5a:	400b      	ands	r3, r1
    4c5c:	b25b      	sxtb	r3, r3
    4c5e:	4313      	orrs	r3, r2
    4c60:	b25b      	sxtb	r3, r3
    4c62:	2280      	movs	r2, #128	; 0x80
    4c64:	4252      	negs	r2, r2
    4c66:	4313      	orrs	r3, r2
    4c68:	b25b      	sxtb	r3, r3
    4c6a:	b2da      	uxtb	r2, r3
    4c6c:	4b0a      	ldr	r3, [pc, #40]	; (4c98 <sal_aes_setup+0x1a8>)
    4c6e:	745a      	strb	r2, [r3, #17]
				SR_MASK(SR_AES_DIR, dir) |
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;
    4c70:	46c0      	nop			; (mov r8, r8)

	default:
		return (false);
	}

	setup_flag = true;
    4c72:	4b0c      	ldr	r3, [pc, #48]	; (4ca4 <sal_aes_setup+0x1b4>)
    4c74:	2201      	movs	r2, #1
    4c76:	701a      	strb	r2, [r3, #0]

	return (true);
    4c78:	2301      	movs	r3, #1
    4c7a:	e000      	b.n	4c7e <sal_aes_setup+0x18e>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    4c7c:	2300      	movs	r3, #0
	}

	setup_flag = true;

	return (true);
}
    4c7e:	0018      	movs	r0, r3
    4c80:	46bd      	mov	sp, r7
    4c82:	b006      	add	sp, #24
    4c84:	bd80      	pop	{r7, pc}
    4c86:	46c0      	nop			; (mov r8, r8)
    4c88:	200001f5 	.word	0x200001f5
    4c8c:	20000014 	.word	0x20000014
    4c90:	2000020c 	.word	0x2000020c
    4c94:	0000e9ad 	.word	0x0000e9ad
    4c98:	200001f8 	.word	0x200001f8
    4c9c:	200001f9 	.word	0x200001f9
    4ca0:	0000593d 	.word	0x0000593d
    4ca4:	200001f4 	.word	0x200001f4
    4ca8:	00004cb5 	.word	0x00004cb5
    4cac:	2000021c 	.word	0x2000021c
    4cb0:	00005b01 	.word	0x00005b01

00004cb4 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    4cb4:	b580      	push	{r7, lr}
    4cb6:	b084      	sub	sp, #16
    4cb8:	af00      	add	r7, sp, #0
    4cba:	6078      	str	r0, [r7, #4]
    4cbc:	6039      	str	r1, [r7, #0]
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    4cbe:	4b1a      	ldr	r3, [pc, #104]	; (4d28 <sal_aes_wrrd+0x74>)
    4cc0:	6879      	ldr	r1, [r7, #4]
    4cc2:	2210      	movs	r2, #16
    4cc4:	0018      	movs	r0, r3
    4cc6:	4b19      	ldr	r3, [pc, #100]	; (4d2c <sal_aes_wrrd+0x78>)
    4cc8:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    4cca:	230f      	movs	r3, #15
    4ccc:	18fb      	adds	r3, r7, r3
    4cce:	4a18      	ldr	r2, [pc, #96]	; (4d30 <sal_aes_wrrd+0x7c>)
    4cd0:	7c52      	ldrb	r2, [r2, #17]
    4cd2:	701a      	strb	r2, [r3, #0]

	if (setup_flag) {
    4cd4:	4b17      	ldr	r3, [pc, #92]	; (4d34 <sal_aes_wrrd+0x80>)
    4cd6:	781b      	ldrb	r3, [r3, #0]
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d009      	beq.n	4cf0 <sal_aes_wrrd+0x3c>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    4cdc:	4b14      	ldr	r3, [pc, #80]	; (4d30 <sal_aes_wrrd+0x7c>)
    4cde:	2212      	movs	r2, #18
    4ce0:	0019      	movs	r1, r3
    4ce2:	2083      	movs	r0, #131	; 0x83
    4ce4:	4b14      	ldr	r3, [pc, #80]	; (4d38 <sal_aes_wrrd+0x84>)
    4ce6:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    4ce8:	4b12      	ldr	r3, [pc, #72]	; (4d34 <sal_aes_wrrd+0x80>)
    4cea:	2200      	movs	r2, #0
    4cec:	701a      	strb	r2, [r3, #0]
    4cee:	e005      	b.n	4cfc <sal_aes_wrrd+0x48>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    4cf0:	4b0d      	ldr	r3, [pc, #52]	; (4d28 <sal_aes_wrrd+0x74>)
    4cf2:	2211      	movs	r2, #17
    4cf4:	0019      	movs	r1, r3
    4cf6:	2084      	movs	r0, #132	; 0x84
    4cf8:	4b0f      	ldr	r3, [pc, #60]	; (4d38 <sal_aes_wrrd+0x84>)
    4cfa:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    4cfc:	683b      	ldr	r3, [r7, #0]
    4cfe:	2b00      	cmp	r3, #0
    4d00:	d005      	beq.n	4d0e <sal_aes_wrrd+0x5a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    4d02:	4909      	ldr	r1, [pc, #36]	; (4d28 <sal_aes_wrrd+0x74>)
    4d04:	683b      	ldr	r3, [r7, #0]
    4d06:	2210      	movs	r2, #16
    4d08:	0018      	movs	r0, r3
    4d0a:	4b08      	ldr	r3, [pc, #32]	; (4d2c <sal_aes_wrrd+0x78>)
    4d0c:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    4d0e:	4b08      	ldr	r3, [pc, #32]	; (4d30 <sal_aes_wrrd+0x7c>)
    4d10:	220f      	movs	r2, #15
    4d12:	18ba      	adds	r2, r7, r2
    4d14:	7812      	ldrb	r2, [r2, #0]
    4d16:	745a      	strb	r2, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    4d18:	2018      	movs	r0, #24
    4d1a:	4b08      	ldr	r3, [pc, #32]	; (4d3c <sal_aes_wrrd+0x88>)
    4d1c:	4798      	blx	r3
}
    4d1e:	46c0      	nop			; (mov r8, r8)
    4d20:	46bd      	mov	sp, r7
    4d22:	b004      	add	sp, #16
    4d24:	bd80      	pop	{r7, pc}
    4d26:	46c0      	nop			; (mov r8, r8)
    4d28:	200001f9 	.word	0x200001f9
    4d2c:	0000e9ad 	.word	0x0000e9ad
    4d30:	200001f8 	.word	0x200001f8
    4d34:	200001f4 	.word	0x200001f4
    4d38:	00005cd9 	.word	0x00005cd9
    4d3c:	0000adad 	.word	0x0000adad

00004d40 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    4d40:	b580      	push	{r7, lr}
    4d42:	b082      	sub	sp, #8
    4d44:	af00      	add	r7, sp, #0
    4d46:	6078      	str	r0, [r7, #4]
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    4d48:	687b      	ldr	r3, [r7, #4]
    4d4a:	2210      	movs	r2, #16
    4d4c:	0019      	movs	r1, r3
    4d4e:	2084      	movs	r0, #132	; 0x84
    4d50:	4b02      	ldr	r3, [pc, #8]	; (4d5c <sal_aes_read+0x1c>)
    4d52:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    4d54:	46c0      	nop			; (mov r8, r8)
    4d56:	46bd      	mov	sp, r7
    4d58:	b002      	add	sp, #8
    4d5a:	bd80      	pop	{r7, pc}
    4d5c:	00005b01 	.word	0x00005b01

00004d60 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    4d60:	b580      	push	{r7, lr}
    4d62:	b082      	sub	sp, #8
    4d64:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4d66:	f3ef 8310 	mrs	r3, PRIMASK
    4d6a:	607b      	str	r3, [r7, #4]
  return(result);
    4d6c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4d6e:	425a      	negs	r2, r3
    4d70:	4153      	adcs	r3, r2
    4d72:	b2db      	uxtb	r3, r3
    4d74:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4d76:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4d78:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4d7c:	4b03      	ldr	r3, [pc, #12]	; (4d8c <cpu_irq_save+0x2c>)
    4d7e:	2200      	movs	r2, #0
    4d80:	701a      	strb	r2, [r3, #0]
	return flags;
    4d82:	683b      	ldr	r3, [r7, #0]
}
    4d84:	0018      	movs	r0, r3
    4d86:	46bd      	mov	sp, r7
    4d88:	b002      	add	sp, #8
    4d8a:	bd80      	pop	{r7, pc}
    4d8c:	20000024 	.word	0x20000024

00004d90 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    4d90:	b580      	push	{r7, lr}
    4d92:	b082      	sub	sp, #8
    4d94:	af00      	add	r7, sp, #0
    4d96:	6078      	str	r0, [r7, #4]
	return (flags);
    4d98:	687b      	ldr	r3, [r7, #4]
    4d9a:	1e5a      	subs	r2, r3, #1
    4d9c:	4193      	sbcs	r3, r2
    4d9e:	b2db      	uxtb	r3, r3
}
    4da0:	0018      	movs	r0, r3
    4da2:	46bd      	mov	sp, r7
    4da4:	b002      	add	sp, #8
    4da6:	bd80      	pop	{r7, pc}

00004da8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    4da8:	b580      	push	{r7, lr}
    4daa:	b082      	sub	sp, #8
    4dac:	af00      	add	r7, sp, #0
    4dae:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    4db0:	687b      	ldr	r3, [r7, #4]
    4db2:	0018      	movs	r0, r3
    4db4:	4b06      	ldr	r3, [pc, #24]	; (4dd0 <cpu_irq_restore+0x28>)
    4db6:	4798      	blx	r3
    4db8:	1e03      	subs	r3, r0, #0
    4dba:	d005      	beq.n	4dc8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    4dbc:	4b05      	ldr	r3, [pc, #20]	; (4dd4 <cpu_irq_restore+0x2c>)
    4dbe:	2201      	movs	r2, #1
    4dc0:	701a      	strb	r2, [r3, #0]
    4dc2:	f3bf 8f5f 	dmb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4dc6:	b662      	cpsie	i
}
    4dc8:	46c0      	nop			; (mov r8, r8)
    4dca:	46bd      	mov	sp, r7
    4dcc:	b002      	add	sp, #8
    4dce:	bd80      	pop	{r7, pc}
    4dd0:	00004d91 	.word	0x00004d91
    4dd4:	20000024 	.word	0x20000024

00004dd8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4dd8:	b580      	push	{r7, lr}
    4dda:	b084      	sub	sp, #16
    4ddc:	af00      	add	r7, sp, #0
    4dde:	0002      	movs	r2, r0
    4de0:	1dfb      	adds	r3, r7, #7
    4de2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4de4:	230f      	movs	r3, #15
    4de6:	18fb      	adds	r3, r7, r3
    4de8:	1dfa      	adds	r2, r7, #7
    4dea:	7812      	ldrb	r2, [r2, #0]
    4dec:	09d2      	lsrs	r2, r2, #7
    4dee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4df0:	230e      	movs	r3, #14
    4df2:	18fb      	adds	r3, r7, r3
    4df4:	1dfa      	adds	r2, r7, #7
    4df6:	7812      	ldrb	r2, [r2, #0]
    4df8:	0952      	lsrs	r2, r2, #5
    4dfa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4dfc:	4b0d      	ldr	r3, [pc, #52]	; (4e34 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4dfe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4e00:	230f      	movs	r3, #15
    4e02:	18fb      	adds	r3, r7, r3
    4e04:	781b      	ldrb	r3, [r3, #0]
    4e06:	2b00      	cmp	r3, #0
    4e08:	d10f      	bne.n	4e2a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4e0a:	230f      	movs	r3, #15
    4e0c:	18fb      	adds	r3, r7, r3
    4e0e:	781b      	ldrb	r3, [r3, #0]
    4e10:	009b      	lsls	r3, r3, #2
    4e12:	2210      	movs	r2, #16
    4e14:	4694      	mov	ip, r2
    4e16:	44bc      	add	ip, r7
    4e18:	4463      	add	r3, ip
    4e1a:	3b08      	subs	r3, #8
    4e1c:	681a      	ldr	r2, [r3, #0]
    4e1e:	230e      	movs	r3, #14
    4e20:	18fb      	adds	r3, r7, r3
    4e22:	781b      	ldrb	r3, [r3, #0]
    4e24:	01db      	lsls	r3, r3, #7
    4e26:	18d3      	adds	r3, r2, r3
    4e28:	e000      	b.n	4e2c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4e2a:	2300      	movs	r3, #0
	}
}
    4e2c:	0018      	movs	r0, r3
    4e2e:	46bd      	mov	sp, r7
    4e30:	b004      	add	sp, #16
    4e32:	bd80      	pop	{r7, pc}
    4e34:	41004400 	.word	0x41004400

00004e38 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4e38:	b580      	push	{r7, lr}
    4e3a:	b082      	sub	sp, #8
    4e3c:	af00      	add	r7, sp, #0
    4e3e:	0002      	movs	r2, r0
    4e40:	1dfb      	adds	r3, r7, #7
    4e42:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4e44:	1dfb      	adds	r3, r7, #7
    4e46:	781b      	ldrb	r3, [r3, #0]
    4e48:	0018      	movs	r0, r3
    4e4a:	4b03      	ldr	r3, [pc, #12]	; (4e58 <port_get_group_from_gpio_pin+0x20>)
    4e4c:	4798      	blx	r3
    4e4e:	0003      	movs	r3, r0
}
    4e50:	0018      	movs	r0, r3
    4e52:	46bd      	mov	sp, r7
    4e54:	b002      	add	sp, #8
    4e56:	bd80      	pop	{r7, pc}
    4e58:	00004dd9 	.word	0x00004dd9

00004e5c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4e5c:	b580      	push	{r7, lr}
    4e5e:	b082      	sub	sp, #8
    4e60:	af00      	add	r7, sp, #0
    4e62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4e64:	687b      	ldr	r3, [r7, #4]
    4e66:	2200      	movs	r2, #0
    4e68:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	2201      	movs	r2, #1
    4e6e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	2200      	movs	r2, #0
    4e74:	709a      	strb	r2, [r3, #2]
}
    4e76:	46c0      	nop			; (mov r8, r8)
    4e78:	46bd      	mov	sp, r7
    4e7a:	b002      	add	sp, #8
    4e7c:	bd80      	pop	{r7, pc}
    4e7e:	46c0      	nop			; (mov r8, r8)

00004e80 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4e80:	b580      	push	{r7, lr}
    4e82:	b084      	sub	sp, #16
    4e84:	af00      	add	r7, sp, #0
    4e86:	0002      	movs	r2, r0
    4e88:	1dfb      	adds	r3, r7, #7
    4e8a:	701a      	strb	r2, [r3, #0]
    4e8c:	1dbb      	adds	r3, r7, #6
    4e8e:	1c0a      	adds	r2, r1, #0
    4e90:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4e92:	1dfb      	adds	r3, r7, #7
    4e94:	781b      	ldrb	r3, [r3, #0]
    4e96:	0018      	movs	r0, r3
    4e98:	4b0d      	ldr	r3, [pc, #52]	; (4ed0 <port_pin_set_output_level+0x50>)
    4e9a:	4798      	blx	r3
    4e9c:	0003      	movs	r3, r0
    4e9e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4ea0:	1dfb      	adds	r3, r7, #7
    4ea2:	781b      	ldrb	r3, [r3, #0]
    4ea4:	221f      	movs	r2, #31
    4ea6:	4013      	ands	r3, r2
    4ea8:	2201      	movs	r2, #1
    4eaa:	409a      	lsls	r2, r3
    4eac:	0013      	movs	r3, r2
    4eae:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4eb0:	1dbb      	adds	r3, r7, #6
    4eb2:	781b      	ldrb	r3, [r3, #0]
    4eb4:	2b00      	cmp	r3, #0
    4eb6:	d003      	beq.n	4ec0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4eb8:	68fb      	ldr	r3, [r7, #12]
    4eba:	68ba      	ldr	r2, [r7, #8]
    4ebc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    4ebe:	e002      	b.n	4ec6 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4ec0:	68fb      	ldr	r3, [r7, #12]
    4ec2:	68ba      	ldr	r2, [r7, #8]
    4ec4:	615a      	str	r2, [r3, #20]
	}
}
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	46bd      	mov	sp, r7
    4eca:	b004      	add	sp, #16
    4ecc:	bd80      	pop	{r7, pc}
    4ece:	46c0      	nop			; (mov r8, r8)
    4ed0:	00004e39 	.word	0x00004e39

00004ed4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4ed4:	b580      	push	{r7, lr}
    4ed6:	b082      	sub	sp, #8
    4ed8:	af00      	add	r7, sp, #0
    4eda:	0002      	movs	r2, r0
    4edc:	1dfb      	adds	r3, r7, #7
    4ede:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4ee0:	4b06      	ldr	r3, [pc, #24]	; (4efc <system_interrupt_enable+0x28>)
    4ee2:	1dfa      	adds	r2, r7, #7
    4ee4:	7812      	ldrb	r2, [r2, #0]
    4ee6:	0011      	movs	r1, r2
    4ee8:	221f      	movs	r2, #31
    4eea:	400a      	ands	r2, r1
    4eec:	2101      	movs	r1, #1
    4eee:	4091      	lsls	r1, r2
    4ef0:	000a      	movs	r2, r1
    4ef2:	601a      	str	r2, [r3, #0]
}
    4ef4:	46c0      	nop			; (mov r8, r8)
    4ef6:	46bd      	mov	sp, r7
    4ef8:	b002      	add	sp, #8
    4efa:	bd80      	pop	{r7, pc}
    4efc:	e000e100 	.word	0xe000e100

00004f00 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    4f00:	b580      	push	{r7, lr}
    4f02:	b084      	sub	sp, #16
    4f04:	af00      	add	r7, sp, #0
    4f06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4f08:	687b      	ldr	r3, [r7, #4]
    4f0a:	681b      	ldr	r3, [r3, #0]
    4f0c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    4f0e:	68fb      	ldr	r3, [r7, #12]
    4f10:	69db      	ldr	r3, [r3, #28]
    4f12:	1e5a      	subs	r2, r3, #1
    4f14:	4193      	sbcs	r3, r2
    4f16:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    4f18:	0018      	movs	r0, r3
    4f1a:	46bd      	mov	sp, r7
    4f1c:	b004      	add	sp, #16
    4f1e:	bd80      	pop	{r7, pc}

00004f20 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    4f20:	b580      	push	{r7, lr}
    4f22:	b082      	sub	sp, #8
    4f24:	af00      	add	r7, sp, #0
    4f26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    4f28:	687b      	ldr	r3, [r7, #4]
    4f2a:	2201      	movs	r2, #1
    4f2c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    4f2e:	687b      	ldr	r3, [r7, #4]
    4f30:	2200      	movs	r2, #0
    4f32:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    4f34:	687b      	ldr	r3, [r7, #4]
    4f36:	2200      	movs	r2, #0
    4f38:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    4f3a:	687b      	ldr	r3, [r7, #4]
    4f3c:	22c0      	movs	r2, #192	; 0xc0
    4f3e:	0392      	lsls	r2, r2, #14
    4f40:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    4f42:	687b      	ldr	r3, [r7, #4]
    4f44:	2200      	movs	r2, #0
    4f46:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	2200      	movs	r2, #0
    4f4c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    4f4e:	687b      	ldr	r3, [r7, #4]
    4f50:	2201      	movs	r2, #1
    4f52:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    4f54:	687b      	ldr	r3, [r7, #4]
    4f56:	2201      	movs	r2, #1
    4f58:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    4f5a:	687b      	ldr	r3, [r7, #4]
    4f5c:	2200      	movs	r2, #0
    4f5e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    4f60:	687b      	ldr	r3, [r7, #4]
    4f62:	2224      	movs	r2, #36	; 0x24
    4f64:	2100      	movs	r1, #0
    4f66:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	3318      	adds	r3, #24
    4f6c:	220c      	movs	r2, #12
    4f6e:	2100      	movs	r1, #0
    4f70:	0018      	movs	r0, r3
    4f72:	4b0a      	ldr	r3, [pc, #40]	; (4f9c <spi_get_config_defaults+0x7c>)
    4f74:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    4f76:	687b      	ldr	r3, [r7, #4]
    4f78:	4a09      	ldr	r2, [pc, #36]	; (4fa0 <spi_get_config_defaults+0x80>)
    4f7a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    4f7c:	687b      	ldr	r3, [r7, #4]
    4f7e:	2200      	movs	r2, #0
    4f80:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    4f82:	687b      	ldr	r3, [r7, #4]
    4f84:	2200      	movs	r2, #0
    4f86:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    4f88:	687b      	ldr	r3, [r7, #4]
    4f8a:	2200      	movs	r2, #0
    4f8c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    4f8e:	687b      	ldr	r3, [r7, #4]
    4f90:	2200      	movs	r2, #0
    4f92:	635a      	str	r2, [r3, #52]	; 0x34

};
    4f94:	46c0      	nop			; (mov r8, r8)
    4f96:	46bd      	mov	sp, r7
    4f98:	b002      	add	sp, #8
    4f9a:	bd80      	pop	{r7, pc}
    4f9c:	0000e9bf 	.word	0x0000e9bf
    4fa0:	000186a0 	.word	0x000186a0

00004fa4 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    4fa4:	b580      	push	{r7, lr}
    4fa6:	b082      	sub	sp, #8
    4fa8:	af00      	add	r7, sp, #0
    4faa:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    4fac:	687b      	ldr	r3, [r7, #4]
    4fae:	220a      	movs	r2, #10
    4fb0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    4fb2:	687b      	ldr	r3, [r7, #4]
    4fb4:	2200      	movs	r2, #0
    4fb6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    4fb8:	687b      	ldr	r3, [r7, #4]
    4fba:	2200      	movs	r2, #0
    4fbc:	709a      	strb	r2, [r3, #2]
}
    4fbe:	46c0      	nop			; (mov r8, r8)
    4fc0:	46bd      	mov	sp, r7
    4fc2:	b002      	add	sp, #8
    4fc4:	bd80      	pop	{r7, pc}
    4fc6:	46c0      	nop			; (mov r8, r8)

00004fc8 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    4fc8:	b580      	push	{r7, lr}
    4fca:	b084      	sub	sp, #16
    4fcc:	af00      	add	r7, sp, #0
    4fce:	6078      	str	r0, [r7, #4]
    4fd0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    4fd2:	683b      	ldr	r3, [r7, #0]
    4fd4:	781a      	ldrb	r2, [r3, #0]
    4fd6:	687b      	ldr	r3, [r7, #4]
    4fd8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    4fda:	683b      	ldr	r3, [r7, #0]
    4fdc:	785a      	ldrb	r2, [r3, #1]
    4fde:	687b      	ldr	r3, [r7, #4]
    4fe0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    4fe2:	683b      	ldr	r3, [r7, #0]
    4fe4:	789a      	ldrb	r2, [r3, #2]
    4fe6:	687b      	ldr	r3, [r7, #4]
    4fe8:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    4fea:	230c      	movs	r3, #12
    4fec:	18fb      	adds	r3, r7, r3
    4fee:	0018      	movs	r0, r3
    4ff0:	4b0b      	ldr	r3, [pc, #44]	; (5020 <spi_attach_slave+0x58>)
    4ff2:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    4ff4:	230c      	movs	r3, #12
    4ff6:	18fb      	adds	r3, r7, r3
    4ff8:	2201      	movs	r2, #1
    4ffa:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    4ffc:	687b      	ldr	r3, [r7, #4]
    4ffe:	781b      	ldrb	r3, [r3, #0]
    5000:	220c      	movs	r2, #12
    5002:	18ba      	adds	r2, r7, r2
    5004:	0011      	movs	r1, r2
    5006:	0018      	movs	r0, r3
    5008:	4b06      	ldr	r3, [pc, #24]	; (5024 <spi_attach_slave+0x5c>)
    500a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    500c:	687b      	ldr	r3, [r7, #4]
    500e:	781b      	ldrb	r3, [r3, #0]
    5010:	2101      	movs	r1, #1
    5012:	0018      	movs	r0, r3
    5014:	4b04      	ldr	r3, [pc, #16]	; (5028 <spi_attach_slave+0x60>)
    5016:	4798      	blx	r3
}
    5018:	46c0      	nop			; (mov r8, r8)
    501a:	46bd      	mov	sp, r7
    501c:	b004      	add	sp, #16
    501e:	bd80      	pop	{r7, pc}
    5020:	00004e5d 	.word	0x00004e5d
    5024:	0000ae35 	.word	0x0000ae35
    5028:	00004e81 	.word	0x00004e81

0000502c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    502c:	b580      	push	{r7, lr}
    502e:	b084      	sub	sp, #16
    5030:	af00      	add	r7, sp, #0
    5032:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5034:	687b      	ldr	r3, [r7, #4]
    5036:	681b      	ldr	r3, [r3, #0]
    5038:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    503a:	687b      	ldr	r3, [r7, #4]
    503c:	681b      	ldr	r3, [r3, #0]
    503e:	0018      	movs	r0, r3
    5040:	4b0b      	ldr	r3, [pc, #44]	; (5070 <spi_enable+0x44>)
    5042:	4798      	blx	r3
    5044:	0003      	movs	r3, r0
    5046:	0018      	movs	r0, r3
    5048:	4b0a      	ldr	r3, [pc, #40]	; (5074 <spi_enable+0x48>)
    504a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    504c:	46c0      	nop			; (mov r8, r8)
    504e:	687b      	ldr	r3, [r7, #4]
    5050:	0018      	movs	r0, r3
    5052:	4b09      	ldr	r3, [pc, #36]	; (5078 <spi_enable+0x4c>)
    5054:	4798      	blx	r3
    5056:	1e03      	subs	r3, r0, #0
    5058:	d1f9      	bne.n	504e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    505a:	68fb      	ldr	r3, [r7, #12]
    505c:	681b      	ldr	r3, [r3, #0]
    505e:	2202      	movs	r2, #2
    5060:	431a      	orrs	r2, r3
    5062:	68fb      	ldr	r3, [r7, #12]
    5064:	601a      	str	r2, [r3, #0]
}
    5066:	46c0      	nop			; (mov r8, r8)
    5068:	46bd      	mov	sp, r7
    506a:	b004      	add	sp, #16
    506c:	bd80      	pop	{r7, pc}
    506e:	46c0      	nop			; (mov r8, r8)
    5070:	0000aa19 	.word	0x0000aa19
    5074:	00004ed5 	.word	0x00004ed5
    5078:	00004f01 	.word	0x00004f01

0000507c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    507c:	b580      	push	{r7, lr}
    507e:	b084      	sub	sp, #16
    5080:	af00      	add	r7, sp, #0
    5082:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5084:	687b      	ldr	r3, [r7, #4]
    5086:	681b      	ldr	r3, [r3, #0]
    5088:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    508a:	68fb      	ldr	r3, [r7, #12]
    508c:	7e1b      	ldrb	r3, [r3, #24]
    508e:	b2db      	uxtb	r3, r3
    5090:	001a      	movs	r2, r3
    5092:	2302      	movs	r3, #2
    5094:	4013      	ands	r3, r2
    5096:	1e5a      	subs	r2, r3, #1
    5098:	4193      	sbcs	r3, r2
    509a:	b2db      	uxtb	r3, r3
}
    509c:	0018      	movs	r0, r3
    509e:	46bd      	mov	sp, r7
    50a0:	b004      	add	sp, #16
    50a2:	bd80      	pop	{r7, pc}

000050a4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    50a4:	b580      	push	{r7, lr}
    50a6:	b084      	sub	sp, #16
    50a8:	af00      	add	r7, sp, #0
    50aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    50ac:	687b      	ldr	r3, [r7, #4]
    50ae:	681b      	ldr	r3, [r3, #0]
    50b0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    50b2:	68fb      	ldr	r3, [r7, #12]
    50b4:	7e1b      	ldrb	r3, [r3, #24]
    50b6:	b2db      	uxtb	r3, r3
    50b8:	001a      	movs	r2, r3
    50ba:	2301      	movs	r3, #1
    50bc:	4013      	ands	r3, r2
    50be:	1e5a      	subs	r2, r3, #1
    50c0:	4193      	sbcs	r3, r2
    50c2:	b2db      	uxtb	r3, r3
}
    50c4:	0018      	movs	r0, r3
    50c6:	46bd      	mov	sp, r7
    50c8:	b004      	add	sp, #16
    50ca:	bd80      	pop	{r7, pc}

000050cc <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    50cc:	b580      	push	{r7, lr}
    50ce:	b084      	sub	sp, #16
    50d0:	af00      	add	r7, sp, #0
    50d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    50d4:	687b      	ldr	r3, [r7, #4]
    50d6:	681b      	ldr	r3, [r3, #0]
    50d8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    50da:	68fb      	ldr	r3, [r7, #12]
    50dc:	7e1b      	ldrb	r3, [r3, #24]
    50de:	b2db      	uxtb	r3, r3
    50e0:	001a      	movs	r2, r3
    50e2:	2304      	movs	r3, #4
    50e4:	4013      	ands	r3, r2
    50e6:	1e5a      	subs	r2, r3, #1
    50e8:	4193      	sbcs	r3, r2
    50ea:	b2db      	uxtb	r3, r3
}
    50ec:	0018      	movs	r0, r3
    50ee:	46bd      	mov	sp, r7
    50f0:	b004      	add	sp, #16
    50f2:	bd80      	pop	{r7, pc}

000050f4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    50f4:	b580      	push	{r7, lr}
    50f6:	b084      	sub	sp, #16
    50f8:	af00      	add	r7, sp, #0
    50fa:	6078      	str	r0, [r7, #4]
    50fc:	000a      	movs	r2, r1
    50fe:	1cbb      	adds	r3, r7, #2
    5100:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5102:	687b      	ldr	r3, [r7, #4]
    5104:	681b      	ldr	r3, [r3, #0]
    5106:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5108:	687b      	ldr	r3, [r7, #4]
    510a:	0018      	movs	r0, r3
    510c:	4b0a      	ldr	r3, [pc, #40]	; (5138 <spi_write+0x44>)
    510e:	4798      	blx	r3
    5110:	0003      	movs	r3, r0
    5112:	001a      	movs	r2, r3
    5114:	2301      	movs	r3, #1
    5116:	4053      	eors	r3, r2
    5118:	b2db      	uxtb	r3, r3
    511a:	2b00      	cmp	r3, #0
    511c:	d001      	beq.n	5122 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    511e:	2305      	movs	r3, #5
    5120:	e006      	b.n	5130 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5122:	1cbb      	adds	r3, r7, #2
    5124:	881b      	ldrh	r3, [r3, #0]
    5126:	05db      	lsls	r3, r3, #23
    5128:	0dda      	lsrs	r2, r3, #23
    512a:	68fb      	ldr	r3, [r7, #12]
    512c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    512e:	2300      	movs	r3, #0
}
    5130:	0018      	movs	r0, r3
    5132:	46bd      	mov	sp, r7
    5134:	b004      	add	sp, #16
    5136:	bd80      	pop	{r7, pc}
    5138:	000050a5 	.word	0x000050a5

0000513c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    513c:	b580      	push	{r7, lr}
    513e:	b084      	sub	sp, #16
    5140:	af00      	add	r7, sp, #0
    5142:	6078      	str	r0, [r7, #4]
    5144:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5146:	687b      	ldr	r3, [r7, #4]
    5148:	681b      	ldr	r3, [r3, #0]
    514a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    514c:	687b      	ldr	r3, [r7, #4]
    514e:	0018      	movs	r0, r3
    5150:	4b1b      	ldr	r3, [pc, #108]	; (51c0 <spi_read+0x84>)
    5152:	4798      	blx	r3
    5154:	0003      	movs	r3, r0
    5156:	001a      	movs	r2, r3
    5158:	2301      	movs	r3, #1
    515a:	4053      	eors	r3, r2
    515c:	b2db      	uxtb	r3, r3
    515e:	2b00      	cmp	r3, #0
    5160:	d001      	beq.n	5166 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    5162:	2310      	movs	r3, #16
    5164:	e027      	b.n	51b6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    5166:	230f      	movs	r3, #15
    5168:	18fb      	adds	r3, r7, r3
    516a:	2200      	movs	r2, #0
    516c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    516e:	68bb      	ldr	r3, [r7, #8]
    5170:	8b5b      	ldrh	r3, [r3, #26]
    5172:	b29b      	uxth	r3, r3
    5174:	001a      	movs	r2, r3
    5176:	2304      	movs	r3, #4
    5178:	4013      	ands	r3, r2
    517a:	d006      	beq.n	518a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    517c:	230f      	movs	r3, #15
    517e:	18fb      	adds	r3, r7, r3
    5180:	221e      	movs	r2, #30
    5182:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5184:	68bb      	ldr	r3, [r7, #8]
    5186:	2204      	movs	r2, #4
    5188:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    518a:	687b      	ldr	r3, [r7, #4]
    518c:	799b      	ldrb	r3, [r3, #6]
    518e:	2b01      	cmp	r3, #1
    5190:	d108      	bne.n	51a4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5192:	68bb      	ldr	r3, [r7, #8]
    5194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5196:	b29b      	uxth	r3, r3
    5198:	05db      	lsls	r3, r3, #23
    519a:	0ddb      	lsrs	r3, r3, #23
    519c:	b29a      	uxth	r2, r3
    519e:	683b      	ldr	r3, [r7, #0]
    51a0:	801a      	strh	r2, [r3, #0]
    51a2:	e005      	b.n	51b0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    51a4:	68bb      	ldr	r3, [r7, #8]
    51a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51a8:	b2db      	uxtb	r3, r3
    51aa:	b29a      	uxth	r2, r3
    51ac:	683b      	ldr	r3, [r7, #0]
    51ae:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    51b0:	230f      	movs	r3, #15
    51b2:	18fb      	adds	r3, r7, r3
    51b4:	781b      	ldrb	r3, [r3, #0]
}
    51b6:	0018      	movs	r0, r3
    51b8:	46bd      	mov	sp, r7
    51ba:	b004      	add	sp, #16
    51bc:	bd80      	pop	{r7, pc}
    51be:	46c0      	nop			; (mov r8, r8)
    51c0:	000050cd 	.word	0x000050cd

000051c4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    51c4:	b580      	push	{r7, lr}
    51c6:	b084      	sub	sp, #16
    51c8:	af00      	add	r7, sp, #0
    51ca:	0002      	movs	r2, r0
    51cc:	1dfb      	adds	r3, r7, #7
    51ce:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    51d0:	230f      	movs	r3, #15
    51d2:	18fb      	adds	r3, r7, r3
    51d4:	1dfa      	adds	r2, r7, #7
    51d6:	7812      	ldrb	r2, [r2, #0]
    51d8:	0952      	lsrs	r2, r2, #5
    51da:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    51dc:	230f      	movs	r3, #15
    51de:	18fb      	adds	r3, r7, r3
    51e0:	781b      	ldrb	r3, [r3, #0]
    51e2:	2b00      	cmp	r3, #0
    51e4:	d10c      	bne.n	5200 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    51e6:	4b09      	ldr	r3, [pc, #36]	; (520c <_extint_get_eic_from_channel+0x48>)
    51e8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    51ea:	230f      	movs	r3, #15
    51ec:	18fb      	adds	r3, r7, r3
    51ee:	781b      	ldrb	r3, [r3, #0]
    51f0:	009b      	lsls	r3, r3, #2
    51f2:	2210      	movs	r2, #16
    51f4:	4694      	mov	ip, r2
    51f6:	44bc      	add	ip, r7
    51f8:	4463      	add	r3, ip
    51fa:	3b08      	subs	r3, #8
    51fc:	681b      	ldr	r3, [r3, #0]
    51fe:	e000      	b.n	5202 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    5200:	2300      	movs	r3, #0
	}
}
    5202:	0018      	movs	r0, r3
    5204:	46bd      	mov	sp, r7
    5206:	b004      	add	sp, #16
    5208:	bd80      	pop	{r7, pc}
    520a:	46c0      	nop			; (mov r8, r8)
    520c:	40001800 	.word	0x40001800

00005210 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    5210:	b580      	push	{r7, lr}
    5212:	b084      	sub	sp, #16
    5214:	af00      	add	r7, sp, #0
    5216:	0002      	movs	r2, r0
    5218:	1dfb      	adds	r3, r7, #7
    521a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    521c:	1dfb      	adds	r3, r7, #7
    521e:	781b      	ldrb	r3, [r3, #0]
    5220:	0018      	movs	r0, r3
    5222:	4b09      	ldr	r3, [pc, #36]	; (5248 <extint_chan_clear_detected+0x38>)
    5224:	4798      	blx	r3
    5226:	0003      	movs	r3, r0
    5228:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    522a:	1dfb      	adds	r3, r7, #7
    522c:	781b      	ldrb	r3, [r3, #0]
    522e:	221f      	movs	r2, #31
    5230:	4013      	ands	r3, r2
    5232:	2201      	movs	r2, #1
    5234:	409a      	lsls	r2, r3
    5236:	0013      	movs	r3, r2
    5238:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    523a:	68fb      	ldr	r3, [r7, #12]
    523c:	68ba      	ldr	r2, [r7, #8]
    523e:	611a      	str	r2, [r3, #16]
}
    5240:	46c0      	nop			; (mov r8, r8)
    5242:	46bd      	mov	sp, r7
    5244:	b004      	add	sp, #16
    5246:	bd80      	pop	{r7, pc}
    5248:	000051c5 	.word	0x000051c5

0000524c <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    524c:	b580      	push	{r7, lr}
    524e:	af00      	add	r7, sp, #0
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
    5250:	2000      	movs	r0, #0
    5252:	4b06      	ldr	r3, [pc, #24]	; (526c <AT86RFX_ISR+0x20>)
    5254:	4798      	blx	r3
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    5256:	4b06      	ldr	r3, [pc, #24]	; (5270 <AT86RFX_ISR+0x24>)
    5258:	681b      	ldr	r3, [r3, #0]
    525a:	2b00      	cmp	r3, #0
    525c:	d002      	beq.n	5264 <AT86RFX_ISR+0x18>
		irq_hdl_trx();
    525e:	4b04      	ldr	r3, [pc, #16]	; (5270 <AT86RFX_ISR+0x24>)
    5260:	681b      	ldr	r3, [r3, #0]
    5262:	4798      	blx	r3
	}
}
    5264:	46c0      	nop			; (mov r8, r8)
    5266:	46bd      	mov	sp, r7
    5268:	bd80      	pop	{r7, pc}
    526a:	46c0      	nop			; (mov r8, r8)
    526c:	00005211 	.word	0x00005211
    5270:	2000022c 	.word	0x2000022c

00005274 <trx_spi_init>:

void trx_spi_init(void)
{
    5274:	b580      	push	{r7, lr}
    5276:	b084      	sub	sp, #16
    5278:	af00      	add	r7, sp, #0
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    527a:	4b35      	ldr	r3, [pc, #212]	; (5350 <trx_spi_init+0xdc>)
    527c:	0018      	movs	r0, r3
    527e:	4b35      	ldr	r3, [pc, #212]	; (5354 <trx_spi_init+0xe0>)
    5280:	4798      	blx	r3
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    5282:	4b33      	ldr	r3, [pc, #204]	; (5350 <trx_spi_init+0xdc>)
    5284:	223f      	movs	r2, #63	; 0x3f
    5286:	701a      	strb	r2, [r3, #0]
	
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf); //Added as SPI does config the output of RST & SLP pins 
    5288:	230c      	movs	r3, #12
    528a:	18fb      	adds	r3, r7, r3
    528c:	0018      	movs	r0, r3
    528e:	4b32      	ldr	r3, [pc, #200]	; (5358 <trx_spi_init+0xe4>)
    5290:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5292:	230c      	movs	r3, #12
    5294:	18fb      	adds	r3, r7, r3
    5296:	2201      	movs	r2, #1
    5298:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(AT86RFX_RST_PIN,&pin_conf);
    529a:	230c      	movs	r3, #12
    529c:	18fb      	adds	r3, r7, r3
    529e:	0019      	movs	r1, r3
    52a0:	202f      	movs	r0, #47	; 0x2f
    52a2:	4b2e      	ldr	r3, [pc, #184]	; (535c <trx_spi_init+0xe8>)
    52a4:	4798      	blx	r3
	port_pin_set_config(AT86RFX_SLP_PIN,&pin_conf);
    52a6:	230c      	movs	r3, #12
    52a8:	18fb      	adds	r3, r7, r3
    52aa:	0019      	movs	r1, r3
    52ac:	2014      	movs	r0, #20
    52ae:	4b2b      	ldr	r3, [pc, #172]	; (535c <trx_spi_init+0xe8>)
    52b0:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
    52b2:	4a27      	ldr	r2, [pc, #156]	; (5350 <trx_spi_init+0xdc>)
    52b4:	4b2a      	ldr	r3, [pc, #168]	; (5360 <trx_spi_init+0xec>)
    52b6:	0011      	movs	r1, r2
    52b8:	0018      	movs	r0, r3
    52ba:	4b2a      	ldr	r3, [pc, #168]	; (5364 <trx_spi_init+0xf0>)
    52bc:	4798      	blx	r3
	spi_get_config_defaults(&config);
    52be:	4b2a      	ldr	r3, [pc, #168]	; (5368 <trx_spi_init+0xf4>)
    52c0:	0018      	movs	r0, r3
    52c2:	4b2a      	ldr	r3, [pc, #168]	; (536c <trx_spi_init+0xf8>)
    52c4:	4798      	blx	r3
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    52c6:	4b28      	ldr	r3, [pc, #160]	; (5368 <trx_spi_init+0xf4>)
    52c8:	2280      	movs	r2, #128	; 0x80
    52ca:	0252      	lsls	r2, r2, #9
    52cc:	60da      	str	r2, [r3, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    52ce:	4b26      	ldr	r3, [pc, #152]	; (5368 <trx_spi_init+0xf4>)
    52d0:	4a27      	ldr	r2, [pc, #156]	; (5370 <trx_spi_init+0xfc>)
    52d2:	619a      	str	r2, [r3, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    52d4:	4b24      	ldr	r3, [pc, #144]	; (5368 <trx_spi_init+0xf4>)
    52d6:	4a27      	ldr	r2, [pc, #156]	; (5374 <trx_spi_init+0x100>)
    52d8:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    52da:	4b23      	ldr	r3, [pc, #140]	; (5368 <trx_spi_init+0xf4>)
    52dc:	2201      	movs	r2, #1
    52de:	4252      	negs	r2, r2
    52e0:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    52e2:	4b21      	ldr	r3, [pc, #132]	; (5368 <trx_spi_init+0xf4>)
    52e4:	4a24      	ldr	r2, [pc, #144]	; (5378 <trx_spi_init+0x104>)
    52e6:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    52e8:	4b1f      	ldr	r3, [pc, #124]	; (5368 <trx_spi_init+0xf4>)
    52ea:	4a24      	ldr	r2, [pc, #144]	; (537c <trx_spi_init+0x108>)
    52ec:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    52ee:	4a1e      	ldr	r2, [pc, #120]	; (5368 <trx_spi_init+0xf4>)
    52f0:	4923      	ldr	r1, [pc, #140]	; (5380 <trx_spi_init+0x10c>)
    52f2:	4b24      	ldr	r3, [pc, #144]	; (5384 <trx_spi_init+0x110>)
    52f4:	0018      	movs	r0, r3
    52f6:	4b24      	ldr	r3, [pc, #144]	; (5388 <trx_spi_init+0x114>)
    52f8:	4798      	blx	r3
	spi_enable(&master);
    52fa:	4b22      	ldr	r3, [pc, #136]	; (5384 <trx_spi_init+0x110>)
    52fc:	0018      	movs	r0, r3
    52fe:	4b23      	ldr	r3, [pc, #140]	; (538c <trx_spi_init+0x118>)
    5300:	4798      	blx	r3

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    5302:	003b      	movs	r3, r7
    5304:	0018      	movs	r0, r3
    5306:	4b22      	ldr	r3, [pc, #136]	; (5390 <trx_spi_init+0x11c>)
    5308:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    530a:	003b      	movs	r3, r7
    530c:	2220      	movs	r2, #32
    530e:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    5310:	003b      	movs	r3, r7
    5312:	2280      	movs	r2, #128	; 0x80
    5314:	0392      	lsls	r2, r2, #14
    5316:	605a      	str	r2, [r3, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    5318:	003b      	movs	r3, r7
    531a:	2202      	movs	r2, #2
    531c:	721a      	strb	r2, [r3, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    531e:	003b      	movs	r3, r7
    5320:	2201      	movs	r2, #1
    5322:	725a      	strb	r2, [r3, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    5324:	003b      	movs	r3, r7
    5326:	2200      	movs	r2, #0
    5328:	729a      	strb	r2, [r3, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    532a:	003b      	movs	r3, r7
    532c:	2201      	movs	r2, #1
    532e:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    5330:	003b      	movs	r3, r7
    5332:	0019      	movs	r1, r3
    5334:	2000      	movs	r0, #0
    5336:	4b17      	ldr	r3, [pc, #92]	; (5394 <trx_spi_init+0x120>)
    5338:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    533a:	4b17      	ldr	r3, [pc, #92]	; (5398 <trx_spi_init+0x124>)
    533c:	2200      	movs	r2, #0
    533e:	2100      	movs	r1, #0
    5340:	0018      	movs	r0, r3
    5342:	4b16      	ldr	r3, [pc, #88]	; (539c <trx_spi_init+0x128>)
    5344:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    5346:	46c0      	nop			; (mov r8, r8)
    5348:	46bd      	mov	sp, r7
    534a:	b004      	add	sp, #16
    534c:	bd80      	pop	{r7, pc}
    534e:	46c0      	nop			; (mov r8, r8)
    5350:	20000f54 	.word	0x20000f54
    5354:	00004fa5 	.word	0x00004fa5
    5358:	00004e5d 	.word	0x00004e5d
    535c:	0000ae35 	.word	0x0000ae35
    5360:	20000f58 	.word	0x20000f58
    5364:	00004fc9 	.word	0x00004fc9
    5368:	20000f5c 	.word	0x20000f5c
    536c:	00004f21 	.word	0x00004f21
    5370:	003d0900 	.word	0x003d0900
    5374:	00530005 	.word	0x00530005
    5378:	003e0005 	.word	0x003e0005
    537c:	00520005 	.word	0x00520005
    5380:	42001800 	.word	0x42001800
    5384:	20000f94 	.word	0x20000f94
    5388:	0000a2a1 	.word	0x0000a2a1
    538c:	0000502d 	.word	0x0000502d
    5390:	000033bd 	.word	0x000033bd
    5394:	000033f1 	.word	0x000033f1
    5398:	0000524d 	.word	0x0000524d
    539c:	0000abc1 	.word	0x0000abc1

000053a0 <PhyReset>:

void PhyReset(void)
{
    53a0:	b580      	push	{r7, lr}
    53a2:	af00      	add	r7, sp, #0
	/* Ensure control lines have correct levels. */
	RST_HIGH();
    53a4:	2101      	movs	r1, #1
    53a6:	202f      	movs	r0, #47	; 0x2f
    53a8:	4b0c      	ldr	r3, [pc, #48]	; (53dc <PhyReset+0x3c>)
    53aa:	4798      	blx	r3
	SLP_TR_LOW();
    53ac:	2100      	movs	r1, #0
    53ae:	2014      	movs	r0, #20
    53b0:	4b0a      	ldr	r3, [pc, #40]	; (53dc <PhyReset+0x3c>)
    53b2:	4798      	blx	r3

	/* Wait typical time of timer TR1. */
	delay_us(330);
    53b4:	23a5      	movs	r3, #165	; 0xa5
    53b6:	005b      	lsls	r3, r3, #1
    53b8:	0018      	movs	r0, r3
    53ba:	4b09      	ldr	r3, [pc, #36]	; (53e0 <PhyReset+0x40>)
    53bc:	4798      	blx	r3

	RST_LOW();
    53be:	2100      	movs	r1, #0
    53c0:	202f      	movs	r0, #47	; 0x2f
    53c2:	4b06      	ldr	r3, [pc, #24]	; (53dc <PhyReset+0x3c>)
    53c4:	4798      	blx	r3
	delay_us(10);
    53c6:	200a      	movs	r0, #10
    53c8:	4b05      	ldr	r3, [pc, #20]	; (53e0 <PhyReset+0x40>)
    53ca:	4798      	blx	r3
	RST_HIGH();
    53cc:	2101      	movs	r1, #1
    53ce:	202f      	movs	r0, #47	; 0x2f
    53d0:	4b02      	ldr	r3, [pc, #8]	; (53dc <PhyReset+0x3c>)
    53d2:	4798      	blx	r3
}
    53d4:	46c0      	nop			; (mov r8, r8)
    53d6:	46bd      	mov	sp, r7
    53d8:	bd80      	pop	{r7, pc}
    53da:	46c0      	nop			; (mov r8, r8)
    53dc:	00004e81 	.word	0x00004e81
    53e0:	0000adad 	.word	0x0000adad

000053e4 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    53e4:	b580      	push	{r7, lr}
    53e6:	b084      	sub	sp, #16
    53e8:	af00      	add	r7, sp, #0
    53ea:	0002      	movs	r2, r0
    53ec:	1dfb      	adds	r3, r7, #7
    53ee:	701a      	strb	r2, [r3, #0]
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t register_value = 0;
    53f0:	230c      	movs	r3, #12
    53f2:	18fb      	adds	r3, r7, r3
    53f4:	2200      	movs	r2, #0
    53f6:	801a      	strh	r2, [r3, #0]
	uint8_t register_value = 0;
#endif

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    53f8:	4b44      	ldr	r3, [pc, #272]	; (550c <trx_reg_read+0x128>)
    53fa:	4798      	blx	r3
    53fc:	0002      	movs	r2, r0
    53fe:	230f      	movs	r3, #15
    5400:	18fb      	adds	r3, r7, r3
    5402:	701a      	strb	r2, [r3, #0]

	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;
    5404:	1dfb      	adds	r3, r7, #7
    5406:	1dfa      	adds	r2, r7, #7
    5408:	7812      	ldrb	r2, [r2, #0]
    540a:	2180      	movs	r1, #128	; 0x80
    540c:	4249      	negs	r1, r1
    540e:	430a      	orrs	r2, r1
    5410:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5412:	493f      	ldr	r1, [pc, #252]	; (5510 <trx_reg_read+0x12c>)
    5414:	4b3f      	ldr	r3, [pc, #252]	; (5514 <trx_reg_read+0x130>)
    5416:	2201      	movs	r2, #1
    5418:	0018      	movs	r0, r3
    541a:	4b3f      	ldr	r3, [pc, #252]	; (5518 <trx_reg_read+0x134>)
    541c:	4798      	blx	r3

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    541e:	46c0      	nop			; (mov r8, r8)
    5420:	4b3c      	ldr	r3, [pc, #240]	; (5514 <trx_reg_read+0x130>)
    5422:	0018      	movs	r0, r3
    5424:	4b3d      	ldr	r3, [pc, #244]	; (551c <trx_reg_read+0x138>)
    5426:	4798      	blx	r3
    5428:	0003      	movs	r3, r0
    542a:	001a      	movs	r2, r3
    542c:	2301      	movs	r3, #1
    542e:	4053      	eors	r3, r2
    5430:	b2db      	uxtb	r3, r3
    5432:	2b00      	cmp	r3, #0
    5434:	d1f4      	bne.n	5420 <trx_reg_read+0x3c>
	}
	spi_write(&master, addr);
    5436:	1dfb      	adds	r3, r7, #7
    5438:	781b      	ldrb	r3, [r3, #0]
    543a:	b29a      	uxth	r2, r3
    543c:	4b35      	ldr	r3, [pc, #212]	; (5514 <trx_reg_read+0x130>)
    543e:	0011      	movs	r1, r2
    5440:	0018      	movs	r0, r3
    5442:	4b37      	ldr	r3, [pc, #220]	; (5520 <trx_reg_read+0x13c>)
    5444:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    5446:	46c0      	nop			; (mov r8, r8)
    5448:	4b32      	ldr	r3, [pc, #200]	; (5514 <trx_reg_read+0x130>)
    544a:	0018      	movs	r0, r3
    544c:	4b35      	ldr	r3, [pc, #212]	; (5524 <trx_reg_read+0x140>)
    544e:	4798      	blx	r3
    5450:	0003      	movs	r3, r0
    5452:	001a      	movs	r2, r3
    5454:	2301      	movs	r3, #1
    5456:	4053      	eors	r3, r2
    5458:	b2db      	uxtb	r3, r3
    545a:	2b00      	cmp	r3, #0
    545c:	d1f4      	bne.n	5448 <trx_reg_read+0x64>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    545e:	46c0      	nop			; (mov r8, r8)
    5460:	4b2c      	ldr	r3, [pc, #176]	; (5514 <trx_reg_read+0x130>)
    5462:	0018      	movs	r0, r3
    5464:	4b30      	ldr	r3, [pc, #192]	; (5528 <trx_reg_read+0x144>)
    5466:	4798      	blx	r3
    5468:	0003      	movs	r3, r0
    546a:	001a      	movs	r2, r3
    546c:	2301      	movs	r3, #1
    546e:	4053      	eors	r3, r2
    5470:	b2db      	uxtb	r3, r3
    5472:	2b00      	cmp	r3, #0
    5474:	d1f4      	bne.n	5460 <trx_reg_read+0x7c>
	}
	spi_read(&master, &dummy_read);
    5476:	4a2d      	ldr	r2, [pc, #180]	; (552c <trx_reg_read+0x148>)
    5478:	4b26      	ldr	r3, [pc, #152]	; (5514 <trx_reg_read+0x130>)
    547a:	0011      	movs	r1, r2
    547c:	0018      	movs	r0, r3
    547e:	4b2c      	ldr	r3, [pc, #176]	; (5530 <trx_reg_read+0x14c>)
    5480:	4798      	blx	r3

	while (!spi_is_ready_to_write(&master)) {
    5482:	46c0      	nop			; (mov r8, r8)
    5484:	4b23      	ldr	r3, [pc, #140]	; (5514 <trx_reg_read+0x130>)
    5486:	0018      	movs	r0, r3
    5488:	4b24      	ldr	r3, [pc, #144]	; (551c <trx_reg_read+0x138>)
    548a:	4798      	blx	r3
    548c:	0003      	movs	r3, r0
    548e:	001a      	movs	r2, r3
    5490:	2301      	movs	r3, #1
    5492:	4053      	eors	r3, r2
    5494:	b2db      	uxtb	r3, r3
    5496:	2b00      	cmp	r3, #0
    5498:	d1f4      	bne.n	5484 <trx_reg_read+0xa0>
	}
	spi_write(&master, 0);
    549a:	4b1e      	ldr	r3, [pc, #120]	; (5514 <trx_reg_read+0x130>)
    549c:	2100      	movs	r1, #0
    549e:	0018      	movs	r0, r3
    54a0:	4b1f      	ldr	r3, [pc, #124]	; (5520 <trx_reg_read+0x13c>)
    54a2:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    54a4:	46c0      	nop			; (mov r8, r8)
    54a6:	4b1b      	ldr	r3, [pc, #108]	; (5514 <trx_reg_read+0x130>)
    54a8:	0018      	movs	r0, r3
    54aa:	4b1e      	ldr	r3, [pc, #120]	; (5524 <trx_reg_read+0x140>)
    54ac:	4798      	blx	r3
    54ae:	0003      	movs	r3, r0
    54b0:	001a      	movs	r2, r3
    54b2:	2301      	movs	r3, #1
    54b4:	4053      	eors	r3, r2
    54b6:	b2db      	uxtb	r3, r3
    54b8:	2b00      	cmp	r3, #0
    54ba:	d1f4      	bne.n	54a6 <trx_reg_read+0xc2>
	}
	while (!spi_is_ready_to_read(&master)) {
    54bc:	46c0      	nop			; (mov r8, r8)
    54be:	4b15      	ldr	r3, [pc, #84]	; (5514 <trx_reg_read+0x130>)
    54c0:	0018      	movs	r0, r3
    54c2:	4b19      	ldr	r3, [pc, #100]	; (5528 <trx_reg_read+0x144>)
    54c4:	4798      	blx	r3
    54c6:	0003      	movs	r3, r0
    54c8:	001a      	movs	r2, r3
    54ca:	2301      	movs	r3, #1
    54cc:	4053      	eors	r3, r2
    54ce:	b2db      	uxtb	r3, r3
    54d0:	2b00      	cmp	r3, #0
    54d2:	d1f4      	bne.n	54be <trx_reg_read+0xda>
	}
	spi_read(&master, &register_value);
    54d4:	230c      	movs	r3, #12
    54d6:	18fa      	adds	r2, r7, r3
    54d8:	4b0e      	ldr	r3, [pc, #56]	; (5514 <trx_reg_read+0x130>)
    54da:	0011      	movs	r1, r2
    54dc:	0018      	movs	r0, r3
    54de:	4b14      	ldr	r3, [pc, #80]	; (5530 <trx_reg_read+0x14c>)
    54e0:	4798      	blx	r3

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    54e2:	490b      	ldr	r1, [pc, #44]	; (5510 <trx_reg_read+0x12c>)
    54e4:	4b0b      	ldr	r3, [pc, #44]	; (5514 <trx_reg_read+0x130>)
    54e6:	2200      	movs	r2, #0
    54e8:	0018      	movs	r0, r3
    54ea:	4b0b      	ldr	r3, [pc, #44]	; (5518 <trx_reg_read+0x134>)
    54ec:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    54ee:	230f      	movs	r3, #15
    54f0:	18fb      	adds	r3, r7, r3
    54f2:	781b      	ldrb	r3, [r3, #0]
    54f4:	0018      	movs	r0, r3
    54f6:	4b0f      	ldr	r3, [pc, #60]	; (5534 <trx_reg_read+0x150>)
    54f8:	4798      	blx	r3

	return register_value;
    54fa:	230c      	movs	r3, #12
    54fc:	18fb      	adds	r3, r7, r3
    54fe:	881b      	ldrh	r3, [r3, #0]
    5500:	b2db      	uxtb	r3, r3
}
    5502:	0018      	movs	r0, r3
    5504:	46bd      	mov	sp, r7
    5506:	b004      	add	sp, #16
    5508:	bd80      	pop	{r7, pc}
    550a:	46c0      	nop			; (mov r8, r8)
    550c:	00004d61 	.word	0x00004d61
    5510:	20000f58 	.word	0x20000f58
    5514:	20000f94 	.word	0x20000f94
    5518:	0000a445 	.word	0x0000a445
    551c:	000050a5 	.word	0x000050a5
    5520:	000050f5 	.word	0x000050f5
    5524:	0000507d 	.word	0x0000507d
    5528:	000050cd 	.word	0x000050cd
    552c:	20000f50 	.word	0x20000f50
    5530:	0000513d 	.word	0x0000513d
    5534:	00004da9 	.word	0x00004da9

00005538 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    5538:	b580      	push	{r7, lr}
    553a:	b084      	sub	sp, #16
    553c:	af00      	add	r7, sp, #0
    553e:	0002      	movs	r2, r0
    5540:	1dfb      	adds	r3, r7, #7
    5542:	701a      	strb	r2, [r3, #0]
    5544:	1dbb      	adds	r3, r7, #6
    5546:	1c0a      	adds	r2, r1, #0
    5548:	701a      	strb	r2, [r3, #0]
	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    554a:	4b43      	ldr	r3, [pc, #268]	; (5658 <trx_reg_write+0x120>)
    554c:	4798      	blx	r3
    554e:	0002      	movs	r2, r0
    5550:	230f      	movs	r3, #15
    5552:	18fb      	adds	r3, r7, r3
    5554:	701a      	strb	r2, [r3, #0]

	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;
    5556:	1dfb      	adds	r3, r7, #7
    5558:	1dfa      	adds	r2, r7, #7
    555a:	7812      	ldrb	r2, [r2, #0]
    555c:	2140      	movs	r1, #64	; 0x40
    555e:	4249      	negs	r1, r1
    5560:	430a      	orrs	r2, r1
    5562:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5564:	493d      	ldr	r1, [pc, #244]	; (565c <trx_reg_write+0x124>)
    5566:	4b3e      	ldr	r3, [pc, #248]	; (5660 <trx_reg_write+0x128>)
    5568:	2201      	movs	r2, #1
    556a:	0018      	movs	r0, r3
    556c:	4b3d      	ldr	r3, [pc, #244]	; (5664 <trx_reg_write+0x12c>)
    556e:	4798      	blx	r3

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    5570:	46c0      	nop			; (mov r8, r8)
    5572:	4b3b      	ldr	r3, [pc, #236]	; (5660 <trx_reg_write+0x128>)
    5574:	0018      	movs	r0, r3
    5576:	4b3c      	ldr	r3, [pc, #240]	; (5668 <trx_reg_write+0x130>)
    5578:	4798      	blx	r3
    557a:	0003      	movs	r3, r0
    557c:	001a      	movs	r2, r3
    557e:	2301      	movs	r3, #1
    5580:	4053      	eors	r3, r2
    5582:	b2db      	uxtb	r3, r3
    5584:	2b00      	cmp	r3, #0
    5586:	d1f4      	bne.n	5572 <trx_reg_write+0x3a>
	}
	spi_write(&master, addr);
    5588:	1dfb      	adds	r3, r7, #7
    558a:	781b      	ldrb	r3, [r3, #0]
    558c:	b29a      	uxth	r2, r3
    558e:	4b34      	ldr	r3, [pc, #208]	; (5660 <trx_reg_write+0x128>)
    5590:	0011      	movs	r1, r2
    5592:	0018      	movs	r0, r3
    5594:	4b35      	ldr	r3, [pc, #212]	; (566c <trx_reg_write+0x134>)
    5596:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    5598:	46c0      	nop			; (mov r8, r8)
    559a:	4b31      	ldr	r3, [pc, #196]	; (5660 <trx_reg_write+0x128>)
    559c:	0018      	movs	r0, r3
    559e:	4b34      	ldr	r3, [pc, #208]	; (5670 <trx_reg_write+0x138>)
    55a0:	4798      	blx	r3
    55a2:	0003      	movs	r3, r0
    55a4:	001a      	movs	r2, r3
    55a6:	2301      	movs	r3, #1
    55a8:	4053      	eors	r3, r2
    55aa:	b2db      	uxtb	r3, r3
    55ac:	2b00      	cmp	r3, #0
    55ae:	d1f4      	bne.n	559a <trx_reg_write+0x62>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    55b0:	46c0      	nop			; (mov r8, r8)
    55b2:	4b2b      	ldr	r3, [pc, #172]	; (5660 <trx_reg_write+0x128>)
    55b4:	0018      	movs	r0, r3
    55b6:	4b2f      	ldr	r3, [pc, #188]	; (5674 <trx_reg_write+0x13c>)
    55b8:	4798      	blx	r3
    55ba:	0003      	movs	r3, r0
    55bc:	001a      	movs	r2, r3
    55be:	2301      	movs	r3, #1
    55c0:	4053      	eors	r3, r2
    55c2:	b2db      	uxtb	r3, r3
    55c4:	2b00      	cmp	r3, #0
    55c6:	d1f4      	bne.n	55b2 <trx_reg_write+0x7a>
	}
	spi_read(&master, &dummy_read);
    55c8:	4a2b      	ldr	r2, [pc, #172]	; (5678 <trx_reg_write+0x140>)
    55ca:	4b25      	ldr	r3, [pc, #148]	; (5660 <trx_reg_write+0x128>)
    55cc:	0011      	movs	r1, r2
    55ce:	0018      	movs	r0, r3
    55d0:	4b2a      	ldr	r3, [pc, #168]	; (567c <trx_reg_write+0x144>)
    55d2:	4798      	blx	r3

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    55d4:	46c0      	nop			; (mov r8, r8)
    55d6:	4b22      	ldr	r3, [pc, #136]	; (5660 <trx_reg_write+0x128>)
    55d8:	0018      	movs	r0, r3
    55da:	4b23      	ldr	r3, [pc, #140]	; (5668 <trx_reg_write+0x130>)
    55dc:	4798      	blx	r3
    55de:	0003      	movs	r3, r0
    55e0:	001a      	movs	r2, r3
    55e2:	2301      	movs	r3, #1
    55e4:	4053      	eors	r3, r2
    55e6:	b2db      	uxtb	r3, r3
    55e8:	2b00      	cmp	r3, #0
    55ea:	d1f4      	bne.n	55d6 <trx_reg_write+0x9e>
	}
	spi_write(&master, data);
    55ec:	1dbb      	adds	r3, r7, #6
    55ee:	781b      	ldrb	r3, [r3, #0]
    55f0:	b29a      	uxth	r2, r3
    55f2:	4b1b      	ldr	r3, [pc, #108]	; (5660 <trx_reg_write+0x128>)
    55f4:	0011      	movs	r1, r2
    55f6:	0018      	movs	r0, r3
    55f8:	4b1c      	ldr	r3, [pc, #112]	; (566c <trx_reg_write+0x134>)
    55fa:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    55fc:	46c0      	nop			; (mov r8, r8)
    55fe:	4b18      	ldr	r3, [pc, #96]	; (5660 <trx_reg_write+0x128>)
    5600:	0018      	movs	r0, r3
    5602:	4b1b      	ldr	r3, [pc, #108]	; (5670 <trx_reg_write+0x138>)
    5604:	4798      	blx	r3
    5606:	0003      	movs	r3, r0
    5608:	001a      	movs	r2, r3
    560a:	2301      	movs	r3, #1
    560c:	4053      	eors	r3, r2
    560e:	b2db      	uxtb	r3, r3
    5610:	2b00      	cmp	r3, #0
    5612:	d1f4      	bne.n	55fe <trx_reg_write+0xc6>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5614:	46c0      	nop			; (mov r8, r8)
    5616:	4b12      	ldr	r3, [pc, #72]	; (5660 <trx_reg_write+0x128>)
    5618:	0018      	movs	r0, r3
    561a:	4b16      	ldr	r3, [pc, #88]	; (5674 <trx_reg_write+0x13c>)
    561c:	4798      	blx	r3
    561e:	0003      	movs	r3, r0
    5620:	001a      	movs	r2, r3
    5622:	2301      	movs	r3, #1
    5624:	4053      	eors	r3, r2
    5626:	b2db      	uxtb	r3, r3
    5628:	2b00      	cmp	r3, #0
    562a:	d1f4      	bne.n	5616 <trx_reg_write+0xde>
	}
	spi_read(&master, &dummy_read);
    562c:	4a12      	ldr	r2, [pc, #72]	; (5678 <trx_reg_write+0x140>)
    562e:	4b0c      	ldr	r3, [pc, #48]	; (5660 <trx_reg_write+0x128>)
    5630:	0011      	movs	r1, r2
    5632:	0018      	movs	r0, r3
    5634:	4b11      	ldr	r3, [pc, #68]	; (567c <trx_reg_write+0x144>)
    5636:	4798      	blx	r3

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5638:	4908      	ldr	r1, [pc, #32]	; (565c <trx_reg_write+0x124>)
    563a:	4b09      	ldr	r3, [pc, #36]	; (5660 <trx_reg_write+0x128>)
    563c:	2200      	movs	r2, #0
    563e:	0018      	movs	r0, r3
    5640:	4b08      	ldr	r3, [pc, #32]	; (5664 <trx_reg_write+0x12c>)
    5642:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    5644:	230f      	movs	r3, #15
    5646:	18fb      	adds	r3, r7, r3
    5648:	781b      	ldrb	r3, [r3, #0]
    564a:	0018      	movs	r0, r3
    564c:	4b0c      	ldr	r3, [pc, #48]	; (5680 <trx_reg_write+0x148>)
    564e:	4798      	blx	r3
}
    5650:	46c0      	nop			; (mov r8, r8)
    5652:	46bd      	mov	sp, r7
    5654:	b004      	add	sp, #16
    5656:	bd80      	pop	{r7, pc}
    5658:	00004d61 	.word	0x00004d61
    565c:	20000f58 	.word	0x20000f58
    5660:	20000f94 	.word	0x20000f94
    5664:	0000a445 	.word	0x0000a445
    5668:	000050a5 	.word	0x000050a5
    566c:	000050f5 	.word	0x000050f5
    5670:	0000507d 	.word	0x0000507d
    5674:	000050cd 	.word	0x000050cd
    5678:	20000f50 	.word	0x20000f50
    567c:	0000513d 	.word	0x0000513d
    5680:	00004da9 	.word	0x00004da9

00005684 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    5684:	b580      	push	{r7, lr}
    5686:	b084      	sub	sp, #16
    5688:	af00      	add	r7, sp, #0
    568a:	6078      	str	r0, [r7, #4]
    568c:	000a      	movs	r2, r1
    568e:	1cfb      	adds	r3, r7, #3
    5690:	701a      	strb	r2, [r3, #0]
	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    5692:	4b49      	ldr	r3, [pc, #292]	; (57b8 <trx_frame_read+0x134>)
    5694:	4798      	blx	r3
    5696:	0002      	movs	r2, r0
    5698:	230f      	movs	r3, #15
    569a:	18fb      	adds	r3, r7, r3
    569c:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    569e:	4947      	ldr	r1, [pc, #284]	; (57bc <trx_frame_read+0x138>)
    56a0:	4b47      	ldr	r3, [pc, #284]	; (57c0 <trx_frame_read+0x13c>)
    56a2:	2201      	movs	r2, #1
    56a4:	0018      	movs	r0, r3
    56a6:	4b47      	ldr	r3, [pc, #284]	; (57c4 <trx_frame_read+0x140>)
    56a8:	4798      	blx	r3

	temp = TRX_CMD_FR;
    56aa:	230c      	movs	r3, #12
    56ac:	18fb      	adds	r3, r7, r3
    56ae:	2220      	movs	r2, #32
    56b0:	801a      	strh	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    56b2:	46c0      	nop			; (mov r8, r8)
    56b4:	4b42      	ldr	r3, [pc, #264]	; (57c0 <trx_frame_read+0x13c>)
    56b6:	0018      	movs	r0, r3
    56b8:	4b43      	ldr	r3, [pc, #268]	; (57c8 <trx_frame_read+0x144>)
    56ba:	4798      	blx	r3
    56bc:	0003      	movs	r3, r0
    56be:	001a      	movs	r2, r3
    56c0:	2301      	movs	r3, #1
    56c2:	4053      	eors	r3, r2
    56c4:	b2db      	uxtb	r3, r3
    56c6:	2b00      	cmp	r3, #0
    56c8:	d1f4      	bne.n	56b4 <trx_frame_read+0x30>
	}
	spi_write(&master, temp);
    56ca:	230c      	movs	r3, #12
    56cc:	18fb      	adds	r3, r7, r3
    56ce:	881a      	ldrh	r2, [r3, #0]
    56d0:	4b3b      	ldr	r3, [pc, #236]	; (57c0 <trx_frame_read+0x13c>)
    56d2:	0011      	movs	r1, r2
    56d4:	0018      	movs	r0, r3
    56d6:	4b3d      	ldr	r3, [pc, #244]	; (57cc <trx_frame_read+0x148>)
    56d8:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    56da:	46c0      	nop			; (mov r8, r8)
    56dc:	4b38      	ldr	r3, [pc, #224]	; (57c0 <trx_frame_read+0x13c>)
    56de:	0018      	movs	r0, r3
    56e0:	4b3b      	ldr	r3, [pc, #236]	; (57d0 <trx_frame_read+0x14c>)
    56e2:	4798      	blx	r3
    56e4:	0003      	movs	r3, r0
    56e6:	001a      	movs	r2, r3
    56e8:	2301      	movs	r3, #1
    56ea:	4053      	eors	r3, r2
    56ec:	b2db      	uxtb	r3, r3
    56ee:	2b00      	cmp	r3, #0
    56f0:	d1f4      	bne.n	56dc <trx_frame_read+0x58>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    56f2:	46c0      	nop			; (mov r8, r8)
    56f4:	4b32      	ldr	r3, [pc, #200]	; (57c0 <trx_frame_read+0x13c>)
    56f6:	0018      	movs	r0, r3
    56f8:	4b36      	ldr	r3, [pc, #216]	; (57d4 <trx_frame_read+0x150>)
    56fa:	4798      	blx	r3
    56fc:	0003      	movs	r3, r0
    56fe:	001a      	movs	r2, r3
    5700:	2301      	movs	r3, #1
    5702:	4053      	eors	r3, r2
    5704:	b2db      	uxtb	r3, r3
    5706:	2b00      	cmp	r3, #0
    5708:	d1f4      	bne.n	56f4 <trx_frame_read+0x70>
	}
	spi_read(&master, &dummy_read);
    570a:	4a33      	ldr	r2, [pc, #204]	; (57d8 <trx_frame_read+0x154>)
    570c:	4b2c      	ldr	r3, [pc, #176]	; (57c0 <trx_frame_read+0x13c>)
    570e:	0011      	movs	r1, r2
    5710:	0018      	movs	r0, r3
    5712:	4b32      	ldr	r3, [pc, #200]	; (57dc <trx_frame_read+0x158>)
    5714:	4798      	blx	r3

	while (length--) {
    5716:	e038      	b.n	578a <trx_frame_read+0x106>
		while (!spi_is_ready_to_write(&master)) {
    5718:	46c0      	nop			; (mov r8, r8)
    571a:	4b29      	ldr	r3, [pc, #164]	; (57c0 <trx_frame_read+0x13c>)
    571c:	0018      	movs	r0, r3
    571e:	4b2a      	ldr	r3, [pc, #168]	; (57c8 <trx_frame_read+0x144>)
    5720:	4798      	blx	r3
    5722:	0003      	movs	r3, r0
    5724:	001a      	movs	r2, r3
    5726:	2301      	movs	r3, #1
    5728:	4053      	eors	r3, r2
    572a:	b2db      	uxtb	r3, r3
    572c:	2b00      	cmp	r3, #0
    572e:	d1f4      	bne.n	571a <trx_frame_read+0x96>
		}
		spi_write(&master, 0);
    5730:	4b23      	ldr	r3, [pc, #140]	; (57c0 <trx_frame_read+0x13c>)
    5732:	2100      	movs	r1, #0
    5734:	0018      	movs	r0, r3
    5736:	4b25      	ldr	r3, [pc, #148]	; (57cc <trx_frame_read+0x148>)
    5738:	4798      	blx	r3
		while (!spi_is_write_complete(&master)) {
    573a:	46c0      	nop			; (mov r8, r8)
    573c:	4b20      	ldr	r3, [pc, #128]	; (57c0 <trx_frame_read+0x13c>)
    573e:	0018      	movs	r0, r3
    5740:	4b23      	ldr	r3, [pc, #140]	; (57d0 <trx_frame_read+0x14c>)
    5742:	4798      	blx	r3
    5744:	0003      	movs	r3, r0
    5746:	001a      	movs	r2, r3
    5748:	2301      	movs	r3, #1
    574a:	4053      	eors	r3, r2
    574c:	b2db      	uxtb	r3, r3
    574e:	2b00      	cmp	r3, #0
    5750:	d1f4      	bne.n	573c <trx_frame_read+0xb8>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5752:	46c0      	nop			; (mov r8, r8)
    5754:	4b1a      	ldr	r3, [pc, #104]	; (57c0 <trx_frame_read+0x13c>)
    5756:	0018      	movs	r0, r3
    5758:	4b1e      	ldr	r3, [pc, #120]	; (57d4 <trx_frame_read+0x150>)
    575a:	4798      	blx	r3
    575c:	0003      	movs	r3, r0
    575e:	001a      	movs	r2, r3
    5760:	2301      	movs	r3, #1
    5762:	4053      	eors	r3, r2
    5764:	b2db      	uxtb	r3, r3
    5766:	2b00      	cmp	r3, #0
    5768:	d1f4      	bne.n	5754 <trx_frame_read+0xd0>
		}
		spi_read(&master, &temp);
    576a:	230c      	movs	r3, #12
    576c:	18fa      	adds	r2, r7, r3
    576e:	4b14      	ldr	r3, [pc, #80]	; (57c0 <trx_frame_read+0x13c>)
    5770:	0011      	movs	r1, r2
    5772:	0018      	movs	r0, r3
    5774:	4b19      	ldr	r3, [pc, #100]	; (57dc <trx_frame_read+0x158>)
    5776:	4798      	blx	r3
		*data = temp;
    5778:	230c      	movs	r3, #12
    577a:	18fb      	adds	r3, r7, r3
    577c:	881b      	ldrh	r3, [r3, #0]
    577e:	b2da      	uxtb	r2, r3
    5780:	687b      	ldr	r3, [r7, #4]
    5782:	701a      	strb	r2, [r3, #0]
		data++;
    5784:	687b      	ldr	r3, [r7, #4]
    5786:	3301      	adds	r3, #1
    5788:	607b      	str	r3, [r7, #4]
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    578a:	1cfb      	adds	r3, r7, #3
    578c:	781b      	ldrb	r3, [r3, #0]
    578e:	1cfa      	adds	r2, r7, #3
    5790:	1e59      	subs	r1, r3, #1
    5792:	7011      	strb	r1, [r2, #0]
    5794:	2b00      	cmp	r3, #0
    5796:	d1bf      	bne.n	5718 <trx_frame_read+0x94>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5798:	4908      	ldr	r1, [pc, #32]	; (57bc <trx_frame_read+0x138>)
    579a:	4b09      	ldr	r3, [pc, #36]	; (57c0 <trx_frame_read+0x13c>)
    579c:	2200      	movs	r2, #0
    579e:	0018      	movs	r0, r3
    57a0:	4b08      	ldr	r3, [pc, #32]	; (57c4 <trx_frame_read+0x140>)
    57a2:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    57a4:	230f      	movs	r3, #15
    57a6:	18fb      	adds	r3, r7, r3
    57a8:	781b      	ldrb	r3, [r3, #0]
    57aa:	0018      	movs	r0, r3
    57ac:	4b0c      	ldr	r3, [pc, #48]	; (57e0 <trx_frame_read+0x15c>)
    57ae:	4798      	blx	r3
}
    57b0:	46c0      	nop			; (mov r8, r8)
    57b2:	46bd      	mov	sp, r7
    57b4:	b004      	add	sp, #16
    57b6:	bd80      	pop	{r7, pc}
    57b8:	00004d61 	.word	0x00004d61
    57bc:	20000f58 	.word	0x20000f58
    57c0:	20000f94 	.word	0x20000f94
    57c4:	0000a445 	.word	0x0000a445
    57c8:	000050a5 	.word	0x000050a5
    57cc:	000050f5 	.word	0x000050f5
    57d0:	0000507d 	.word	0x0000507d
    57d4:	000050cd 	.word	0x000050cd
    57d8:	20000f50 	.word	0x20000f50
    57dc:	0000513d 	.word	0x0000513d
    57e0:	00004da9 	.word	0x00004da9

000057e4 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    57e4:	b580      	push	{r7, lr}
    57e6:	b084      	sub	sp, #16
    57e8:	af00      	add	r7, sp, #0
    57ea:	6078      	str	r0, [r7, #4]
    57ec:	000a      	movs	r2, r1
    57ee:	1cfb      	adds	r3, r7, #3
    57f0:	701a      	strb	r2, [r3, #0]
	uint8_t temp;

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    57f2:	4b47      	ldr	r3, [pc, #284]	; (5910 <trx_frame_write+0x12c>)
    57f4:	4798      	blx	r3
    57f6:	0002      	movs	r2, r0
    57f8:	230f      	movs	r3, #15
    57fa:	18fb      	adds	r3, r7, r3
    57fc:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    57fe:	4945      	ldr	r1, [pc, #276]	; (5914 <trx_frame_write+0x130>)
    5800:	4b45      	ldr	r3, [pc, #276]	; (5918 <trx_frame_write+0x134>)
    5802:	2201      	movs	r2, #1
    5804:	0018      	movs	r0, r3
    5806:	4b45      	ldr	r3, [pc, #276]	; (591c <trx_frame_write+0x138>)
    5808:	4798      	blx	r3

	temp = TRX_CMD_FW;
    580a:	230e      	movs	r3, #14
    580c:	18fb      	adds	r3, r7, r3
    580e:	2260      	movs	r2, #96	; 0x60
    5810:	701a      	strb	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5812:	46c0      	nop			; (mov r8, r8)
    5814:	4b40      	ldr	r3, [pc, #256]	; (5918 <trx_frame_write+0x134>)
    5816:	0018      	movs	r0, r3
    5818:	4b41      	ldr	r3, [pc, #260]	; (5920 <trx_frame_write+0x13c>)
    581a:	4798      	blx	r3
    581c:	0003      	movs	r3, r0
    581e:	001a      	movs	r2, r3
    5820:	2301      	movs	r3, #1
    5822:	4053      	eors	r3, r2
    5824:	b2db      	uxtb	r3, r3
    5826:	2b00      	cmp	r3, #0
    5828:	d1f4      	bne.n	5814 <trx_frame_write+0x30>
	}
	spi_write(&master, temp);
    582a:	230e      	movs	r3, #14
    582c:	18fb      	adds	r3, r7, r3
    582e:	781b      	ldrb	r3, [r3, #0]
    5830:	b29a      	uxth	r2, r3
    5832:	4b39      	ldr	r3, [pc, #228]	; (5918 <trx_frame_write+0x134>)
    5834:	0011      	movs	r1, r2
    5836:	0018      	movs	r0, r3
    5838:	4b3a      	ldr	r3, [pc, #232]	; (5924 <trx_frame_write+0x140>)
    583a:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    583c:	46c0      	nop			; (mov r8, r8)
    583e:	4b36      	ldr	r3, [pc, #216]	; (5918 <trx_frame_write+0x134>)
    5840:	0018      	movs	r0, r3
    5842:	4b39      	ldr	r3, [pc, #228]	; (5928 <trx_frame_write+0x144>)
    5844:	4798      	blx	r3
    5846:	0003      	movs	r3, r0
    5848:	001a      	movs	r2, r3
    584a:	2301      	movs	r3, #1
    584c:	4053      	eors	r3, r2
    584e:	b2db      	uxtb	r3, r3
    5850:	2b00      	cmp	r3, #0
    5852:	d1f4      	bne.n	583e <trx_frame_write+0x5a>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5854:	46c0      	nop			; (mov r8, r8)
    5856:	4b30      	ldr	r3, [pc, #192]	; (5918 <trx_frame_write+0x134>)
    5858:	0018      	movs	r0, r3
    585a:	4b34      	ldr	r3, [pc, #208]	; (592c <trx_frame_write+0x148>)
    585c:	4798      	blx	r3
    585e:	0003      	movs	r3, r0
    5860:	001a      	movs	r2, r3
    5862:	2301      	movs	r3, #1
    5864:	4053      	eors	r3, r2
    5866:	b2db      	uxtb	r3, r3
    5868:	2b00      	cmp	r3, #0
    586a:	d1f4      	bne.n	5856 <trx_frame_write+0x72>
	}
	spi_read(&master, &dummy_read);
    586c:	4a30      	ldr	r2, [pc, #192]	; (5930 <trx_frame_write+0x14c>)
    586e:	4b2a      	ldr	r3, [pc, #168]	; (5918 <trx_frame_write+0x134>)
    5870:	0011      	movs	r1, r2
    5872:	0018      	movs	r0, r3
    5874:	4b2f      	ldr	r3, [pc, #188]	; (5934 <trx_frame_write+0x150>)
    5876:	4798      	blx	r3
	while (length--) {
    5878:	e033      	b.n	58e2 <trx_frame_write+0xfe>
		while (!spi_is_ready_to_write(&master)) {
    587a:	46c0      	nop			; (mov r8, r8)
    587c:	4b26      	ldr	r3, [pc, #152]	; (5918 <trx_frame_write+0x134>)
    587e:	0018      	movs	r0, r3
    5880:	4b27      	ldr	r3, [pc, #156]	; (5920 <trx_frame_write+0x13c>)
    5882:	4798      	blx	r3
    5884:	0003      	movs	r3, r0
    5886:	001a      	movs	r2, r3
    5888:	2301      	movs	r3, #1
    588a:	4053      	eors	r3, r2
    588c:	b2db      	uxtb	r3, r3
    588e:	2b00      	cmp	r3, #0
    5890:	d1f4      	bne.n	587c <trx_frame_write+0x98>
		}
		spi_write(&master, *data++);
    5892:	687b      	ldr	r3, [r7, #4]
    5894:	1c5a      	adds	r2, r3, #1
    5896:	607a      	str	r2, [r7, #4]
    5898:	781b      	ldrb	r3, [r3, #0]
    589a:	b29a      	uxth	r2, r3
    589c:	4b1e      	ldr	r3, [pc, #120]	; (5918 <trx_frame_write+0x134>)
    589e:	0011      	movs	r1, r2
    58a0:	0018      	movs	r0, r3
    58a2:	4b20      	ldr	r3, [pc, #128]	; (5924 <trx_frame_write+0x140>)
    58a4:	4798      	blx	r3
		while (!spi_is_write_complete(&master)) {
    58a6:	46c0      	nop			; (mov r8, r8)
    58a8:	4b1b      	ldr	r3, [pc, #108]	; (5918 <trx_frame_write+0x134>)
    58aa:	0018      	movs	r0, r3
    58ac:	4b1e      	ldr	r3, [pc, #120]	; (5928 <trx_frame_write+0x144>)
    58ae:	4798      	blx	r3
    58b0:	0003      	movs	r3, r0
    58b2:	001a      	movs	r2, r3
    58b4:	2301      	movs	r3, #1
    58b6:	4053      	eors	r3, r2
    58b8:	b2db      	uxtb	r3, r3
    58ba:	2b00      	cmp	r3, #0
    58bc:	d1f4      	bne.n	58a8 <trx_frame_write+0xc4>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    58be:	46c0      	nop			; (mov r8, r8)
    58c0:	4b15      	ldr	r3, [pc, #84]	; (5918 <trx_frame_write+0x134>)
    58c2:	0018      	movs	r0, r3
    58c4:	4b19      	ldr	r3, [pc, #100]	; (592c <trx_frame_write+0x148>)
    58c6:	4798      	blx	r3
    58c8:	0003      	movs	r3, r0
    58ca:	001a      	movs	r2, r3
    58cc:	2301      	movs	r3, #1
    58ce:	4053      	eors	r3, r2
    58d0:	b2db      	uxtb	r3, r3
    58d2:	2b00      	cmp	r3, #0
    58d4:	d1f4      	bne.n	58c0 <trx_frame_write+0xdc>
		}
		spi_read(&master, &dummy_read);
    58d6:	4a16      	ldr	r2, [pc, #88]	; (5930 <trx_frame_write+0x14c>)
    58d8:	4b0f      	ldr	r3, [pc, #60]	; (5918 <trx_frame_write+0x134>)
    58da:	0011      	movs	r1, r2
    58dc:	0018      	movs	r0, r3
    58de:	4b15      	ldr	r3, [pc, #84]	; (5934 <trx_frame_write+0x150>)
    58e0:	4798      	blx	r3
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    58e2:	1cfb      	adds	r3, r7, #3
    58e4:	781b      	ldrb	r3, [r3, #0]
    58e6:	1cfa      	adds	r2, r7, #3
    58e8:	1e59      	subs	r1, r3, #1
    58ea:	7011      	strb	r1, [r2, #0]
    58ec:	2b00      	cmp	r3, #0
    58ee:	d1c4      	bne.n	587a <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    58f0:	4908      	ldr	r1, [pc, #32]	; (5914 <trx_frame_write+0x130>)
    58f2:	4b09      	ldr	r3, [pc, #36]	; (5918 <trx_frame_write+0x134>)
    58f4:	2200      	movs	r2, #0
    58f6:	0018      	movs	r0, r3
    58f8:	4b08      	ldr	r3, [pc, #32]	; (591c <trx_frame_write+0x138>)
    58fa:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    58fc:	230f      	movs	r3, #15
    58fe:	18fb      	adds	r3, r7, r3
    5900:	781b      	ldrb	r3, [r3, #0]
    5902:	0018      	movs	r0, r3
    5904:	4b0c      	ldr	r3, [pc, #48]	; (5938 <trx_frame_write+0x154>)
    5906:	4798      	blx	r3
}
    5908:	46c0      	nop			; (mov r8, r8)
    590a:	46bd      	mov	sp, r7
    590c:	b004      	add	sp, #16
    590e:	bd80      	pop	{r7, pc}
    5910:	00004d61 	.word	0x00004d61
    5914:	20000f58 	.word	0x20000f58
    5918:	20000f94 	.word	0x20000f94
    591c:	0000a445 	.word	0x0000a445
    5920:	000050a5 	.word	0x000050a5
    5924:	000050f5 	.word	0x000050f5
    5928:	0000507d 	.word	0x0000507d
    592c:	000050cd 	.word	0x000050cd
    5930:	20000f50 	.word	0x20000f50
    5934:	0000513d 	.word	0x0000513d
    5938:	00004da9 	.word	0x00004da9

0000593c <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    593c:	b580      	push	{r7, lr}
    593e:	b084      	sub	sp, #16
    5940:	af00      	add	r7, sp, #0
    5942:	6039      	str	r1, [r7, #0]
    5944:	0011      	movs	r1, r2
    5946:	1dfb      	adds	r3, r7, #7
    5948:	1c02      	adds	r2, r0, #0
    594a:	701a      	strb	r2, [r3, #0]
    594c:	1dbb      	adds	r3, r7, #6
    594e:	1c0a      	adds	r2, r1, #0
    5950:	701a      	strb	r2, [r3, #0]
	uint8_t temp;

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    5952:	4b60      	ldr	r3, [pc, #384]	; (5ad4 <trx_sram_write+0x198>)
    5954:	4798      	blx	r3
    5956:	0002      	movs	r2, r0
    5958:	230f      	movs	r3, #15
    595a:	18fb      	adds	r3, r7, r3
    595c:	701a      	strb	r2, [r3, #0]

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    595e:	495e      	ldr	r1, [pc, #376]	; (5ad8 <trx_sram_write+0x19c>)
    5960:	4b5e      	ldr	r3, [pc, #376]	; (5adc <trx_sram_write+0x1a0>)
    5962:	2201      	movs	r2, #1
    5964:	0018      	movs	r0, r3
    5966:	4b5e      	ldr	r3, [pc, #376]	; (5ae0 <trx_sram_write+0x1a4>)
    5968:	4798      	blx	r3

	/* Send the command byte */
	temp = TRX_CMD_SW;
    596a:	230e      	movs	r3, #14
    596c:	18fb      	adds	r3, r7, r3
    596e:	2240      	movs	r2, #64	; 0x40
    5970:	701a      	strb	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5972:	46c0      	nop			; (mov r8, r8)
    5974:	4b59      	ldr	r3, [pc, #356]	; (5adc <trx_sram_write+0x1a0>)
    5976:	0018      	movs	r0, r3
    5978:	4b5a      	ldr	r3, [pc, #360]	; (5ae4 <trx_sram_write+0x1a8>)
    597a:	4798      	blx	r3
    597c:	0003      	movs	r3, r0
    597e:	001a      	movs	r2, r3
    5980:	2301      	movs	r3, #1
    5982:	4053      	eors	r3, r2
    5984:	b2db      	uxtb	r3, r3
    5986:	2b00      	cmp	r3, #0
    5988:	d1f4      	bne.n	5974 <trx_sram_write+0x38>
	}
	spi_write(&master, temp);
    598a:	230e      	movs	r3, #14
    598c:	18fb      	adds	r3, r7, r3
    598e:	781b      	ldrb	r3, [r3, #0]
    5990:	b29a      	uxth	r2, r3
    5992:	4b52      	ldr	r3, [pc, #328]	; (5adc <trx_sram_write+0x1a0>)
    5994:	0011      	movs	r1, r2
    5996:	0018      	movs	r0, r3
    5998:	4b53      	ldr	r3, [pc, #332]	; (5ae8 <trx_sram_write+0x1ac>)
    599a:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    599c:	46c0      	nop			; (mov r8, r8)
    599e:	4b4f      	ldr	r3, [pc, #316]	; (5adc <trx_sram_write+0x1a0>)
    59a0:	0018      	movs	r0, r3
    59a2:	4b52      	ldr	r3, [pc, #328]	; (5aec <trx_sram_write+0x1b0>)
    59a4:	4798      	blx	r3
    59a6:	0003      	movs	r3, r0
    59a8:	001a      	movs	r2, r3
    59aa:	2301      	movs	r3, #1
    59ac:	4053      	eors	r3, r2
    59ae:	b2db      	uxtb	r3, r3
    59b0:	2b00      	cmp	r3, #0
    59b2:	d1f4      	bne.n	599e <trx_sram_write+0x62>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    59b4:	46c0      	nop			; (mov r8, r8)
    59b6:	4b49      	ldr	r3, [pc, #292]	; (5adc <trx_sram_write+0x1a0>)
    59b8:	0018      	movs	r0, r3
    59ba:	4b4d      	ldr	r3, [pc, #308]	; (5af0 <trx_sram_write+0x1b4>)
    59bc:	4798      	blx	r3
    59be:	0003      	movs	r3, r0
    59c0:	001a      	movs	r2, r3
    59c2:	2301      	movs	r3, #1
    59c4:	4053      	eors	r3, r2
    59c6:	b2db      	uxtb	r3, r3
    59c8:	2b00      	cmp	r3, #0
    59ca:	d1f4      	bne.n	59b6 <trx_sram_write+0x7a>
	}
	spi_read(&master, &dummy_read);
    59cc:	4a49      	ldr	r2, [pc, #292]	; (5af4 <trx_sram_write+0x1b8>)
    59ce:	4b43      	ldr	r3, [pc, #268]	; (5adc <trx_sram_write+0x1a0>)
    59d0:	0011      	movs	r1, r2
    59d2:	0018      	movs	r0, r3
    59d4:	4b48      	ldr	r3, [pc, #288]	; (5af8 <trx_sram_write+0x1bc>)
    59d6:	4798      	blx	r3

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    59d8:	46c0      	nop			; (mov r8, r8)
    59da:	4b40      	ldr	r3, [pc, #256]	; (5adc <trx_sram_write+0x1a0>)
    59dc:	0018      	movs	r0, r3
    59de:	4b41      	ldr	r3, [pc, #260]	; (5ae4 <trx_sram_write+0x1a8>)
    59e0:	4798      	blx	r3
    59e2:	0003      	movs	r3, r0
    59e4:	001a      	movs	r2, r3
    59e6:	2301      	movs	r3, #1
    59e8:	4053      	eors	r3, r2
    59ea:	b2db      	uxtb	r3, r3
    59ec:	2b00      	cmp	r3, #0
    59ee:	d1f4      	bne.n	59da <trx_sram_write+0x9e>
	}
	spi_write(&master, addr);
    59f0:	1dfb      	adds	r3, r7, #7
    59f2:	781b      	ldrb	r3, [r3, #0]
    59f4:	b29a      	uxth	r2, r3
    59f6:	4b39      	ldr	r3, [pc, #228]	; (5adc <trx_sram_write+0x1a0>)
    59f8:	0011      	movs	r1, r2
    59fa:	0018      	movs	r0, r3
    59fc:	4b3a      	ldr	r3, [pc, #232]	; (5ae8 <trx_sram_write+0x1ac>)
    59fe:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    5a00:	46c0      	nop			; (mov r8, r8)
    5a02:	4b36      	ldr	r3, [pc, #216]	; (5adc <trx_sram_write+0x1a0>)
    5a04:	0018      	movs	r0, r3
    5a06:	4b39      	ldr	r3, [pc, #228]	; (5aec <trx_sram_write+0x1b0>)
    5a08:	4798      	blx	r3
    5a0a:	0003      	movs	r3, r0
    5a0c:	001a      	movs	r2, r3
    5a0e:	2301      	movs	r3, #1
    5a10:	4053      	eors	r3, r2
    5a12:	b2db      	uxtb	r3, r3
    5a14:	2b00      	cmp	r3, #0
    5a16:	d1f4      	bne.n	5a02 <trx_sram_write+0xc6>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5a18:	46c0      	nop			; (mov r8, r8)
    5a1a:	4b30      	ldr	r3, [pc, #192]	; (5adc <trx_sram_write+0x1a0>)
    5a1c:	0018      	movs	r0, r3
    5a1e:	4b34      	ldr	r3, [pc, #208]	; (5af0 <trx_sram_write+0x1b4>)
    5a20:	4798      	blx	r3
    5a22:	0003      	movs	r3, r0
    5a24:	001a      	movs	r2, r3
    5a26:	2301      	movs	r3, #1
    5a28:	4053      	eors	r3, r2
    5a2a:	b2db      	uxtb	r3, r3
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	d1f4      	bne.n	5a1a <trx_sram_write+0xde>
	}
	spi_read(&master, &dummy_read);
    5a30:	4a30      	ldr	r2, [pc, #192]	; (5af4 <trx_sram_write+0x1b8>)
    5a32:	4b2a      	ldr	r3, [pc, #168]	; (5adc <trx_sram_write+0x1a0>)
    5a34:	0011      	movs	r1, r2
    5a36:	0018      	movs	r0, r3
    5a38:	4b2f      	ldr	r3, [pc, #188]	; (5af8 <trx_sram_write+0x1bc>)
    5a3a:	4798      	blx	r3

	while (length--) {
    5a3c:	e033      	b.n	5aa6 <trx_sram_write+0x16a>
		while (!spi_is_ready_to_write(&master)) {
    5a3e:	46c0      	nop			; (mov r8, r8)
    5a40:	4b26      	ldr	r3, [pc, #152]	; (5adc <trx_sram_write+0x1a0>)
    5a42:	0018      	movs	r0, r3
    5a44:	4b27      	ldr	r3, [pc, #156]	; (5ae4 <trx_sram_write+0x1a8>)
    5a46:	4798      	blx	r3
    5a48:	0003      	movs	r3, r0
    5a4a:	001a      	movs	r2, r3
    5a4c:	2301      	movs	r3, #1
    5a4e:	4053      	eors	r3, r2
    5a50:	b2db      	uxtb	r3, r3
    5a52:	2b00      	cmp	r3, #0
    5a54:	d1f4      	bne.n	5a40 <trx_sram_write+0x104>
		}
		spi_write(&master, *data++);
    5a56:	683b      	ldr	r3, [r7, #0]
    5a58:	1c5a      	adds	r2, r3, #1
    5a5a:	603a      	str	r2, [r7, #0]
    5a5c:	781b      	ldrb	r3, [r3, #0]
    5a5e:	b29a      	uxth	r2, r3
    5a60:	4b1e      	ldr	r3, [pc, #120]	; (5adc <trx_sram_write+0x1a0>)
    5a62:	0011      	movs	r1, r2
    5a64:	0018      	movs	r0, r3
    5a66:	4b20      	ldr	r3, [pc, #128]	; (5ae8 <trx_sram_write+0x1ac>)
    5a68:	4798      	blx	r3
		while (!spi_is_write_complete(&master)) {
    5a6a:	46c0      	nop			; (mov r8, r8)
    5a6c:	4b1b      	ldr	r3, [pc, #108]	; (5adc <trx_sram_write+0x1a0>)
    5a6e:	0018      	movs	r0, r3
    5a70:	4b1e      	ldr	r3, [pc, #120]	; (5aec <trx_sram_write+0x1b0>)
    5a72:	4798      	blx	r3
    5a74:	0003      	movs	r3, r0
    5a76:	001a      	movs	r2, r3
    5a78:	2301      	movs	r3, #1
    5a7a:	4053      	eors	r3, r2
    5a7c:	b2db      	uxtb	r3, r3
    5a7e:	2b00      	cmp	r3, #0
    5a80:	d1f4      	bne.n	5a6c <trx_sram_write+0x130>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5a82:	46c0      	nop			; (mov r8, r8)
    5a84:	4b15      	ldr	r3, [pc, #84]	; (5adc <trx_sram_write+0x1a0>)
    5a86:	0018      	movs	r0, r3
    5a88:	4b19      	ldr	r3, [pc, #100]	; (5af0 <trx_sram_write+0x1b4>)
    5a8a:	4798      	blx	r3
    5a8c:	0003      	movs	r3, r0
    5a8e:	001a      	movs	r2, r3
    5a90:	2301      	movs	r3, #1
    5a92:	4053      	eors	r3, r2
    5a94:	b2db      	uxtb	r3, r3
    5a96:	2b00      	cmp	r3, #0
    5a98:	d1f4      	bne.n	5a84 <trx_sram_write+0x148>
		}
		spi_read(&master, &dummy_read);
    5a9a:	4a16      	ldr	r2, [pc, #88]	; (5af4 <trx_sram_write+0x1b8>)
    5a9c:	4b0f      	ldr	r3, [pc, #60]	; (5adc <trx_sram_write+0x1a0>)
    5a9e:	0011      	movs	r1, r2
    5aa0:	0018      	movs	r0, r3
    5aa2:	4b15      	ldr	r3, [pc, #84]	; (5af8 <trx_sram_write+0x1bc>)
    5aa4:	4798      	blx	r3
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    5aa6:	1dbb      	adds	r3, r7, #6
    5aa8:	781b      	ldrb	r3, [r3, #0]
    5aaa:	1dba      	adds	r2, r7, #6
    5aac:	1e59      	subs	r1, r3, #1
    5aae:	7011      	strb	r1, [r2, #0]
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	d1c4      	bne.n	5a3e <trx_sram_write+0x102>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5ab4:	4908      	ldr	r1, [pc, #32]	; (5ad8 <trx_sram_write+0x19c>)
    5ab6:	4b09      	ldr	r3, [pc, #36]	; (5adc <trx_sram_write+0x1a0>)
    5ab8:	2200      	movs	r2, #0
    5aba:	0018      	movs	r0, r3
    5abc:	4b08      	ldr	r3, [pc, #32]	; (5ae0 <trx_sram_write+0x1a4>)
    5abe:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    5ac0:	230f      	movs	r3, #15
    5ac2:	18fb      	adds	r3, r7, r3
    5ac4:	781b      	ldrb	r3, [r3, #0]
    5ac6:	0018      	movs	r0, r3
    5ac8:	4b0c      	ldr	r3, [pc, #48]	; (5afc <trx_sram_write+0x1c0>)
    5aca:	4798      	blx	r3
}
    5acc:	46c0      	nop			; (mov r8, r8)
    5ace:	46bd      	mov	sp, r7
    5ad0:	b004      	add	sp, #16
    5ad2:	bd80      	pop	{r7, pc}
    5ad4:	00004d61 	.word	0x00004d61
    5ad8:	20000f58 	.word	0x20000f58
    5adc:	20000f94 	.word	0x20000f94
    5ae0:	0000a445 	.word	0x0000a445
    5ae4:	000050a5 	.word	0x000050a5
    5ae8:	000050f5 	.word	0x000050f5
    5aec:	0000507d 	.word	0x0000507d
    5af0:	000050cd 	.word	0x000050cd
    5af4:	20000f50 	.word	0x20000f50
    5af8:	0000513d 	.word	0x0000513d
    5afc:	00004da9 	.word	0x00004da9

00005b00 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    5b00:	b580      	push	{r7, lr}
    5b02:	b084      	sub	sp, #16
    5b04:	af00      	add	r7, sp, #0
    5b06:	6039      	str	r1, [r7, #0]
    5b08:	0011      	movs	r1, r2
    5b0a:	1dfb      	adds	r3, r7, #7
    5b0c:	1c02      	adds	r2, r0, #0
    5b0e:	701a      	strb	r2, [r3, #0]
    5b10:	1dbb      	adds	r3, r7, #6
    5b12:	1c0a      	adds	r2, r1, #0
    5b14:	701a      	strb	r2, [r3, #0]
	delay_us(1); /* wap_rf4ce */
    5b16:	2001      	movs	r0, #1
    5b18:	4b63      	ldr	r3, [pc, #396]	; (5ca8 <trx_sram_read+0x1a8>)
    5b1a:	4798      	blx	r3

	/*Saving the current interrupt status & disabling the global interrupt
	**/
	ENTER_TRX_CRITICAL_REGION();
    5b1c:	4b63      	ldr	r3, [pc, #396]	; (5cac <trx_sram_read+0x1ac>)
    5b1e:	4798      	blx	r3
    5b20:	0002      	movs	r2, r0
    5b22:	230f      	movs	r3, #15
    5b24:	18fb      	adds	r3, r7, r3
    5b26:	701a      	strb	r2, [r3, #0]
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5b28:	4961      	ldr	r1, [pc, #388]	; (5cb0 <trx_sram_read+0x1b0>)
    5b2a:	4b62      	ldr	r3, [pc, #392]	; (5cb4 <trx_sram_read+0x1b4>)
    5b2c:	2201      	movs	r2, #1
    5b2e:	0018      	movs	r0, r3
    5b30:	4b61      	ldr	r3, [pc, #388]	; (5cb8 <trx_sram_read+0x1b8>)
    5b32:	4798      	blx	r3

	temp = TRX_CMD_SR;
    5b34:	230c      	movs	r3, #12
    5b36:	18fb      	adds	r3, r7, r3
    5b38:	2200      	movs	r2, #0
    5b3a:	801a      	strh	r2, [r3, #0]

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5b3c:	46c0      	nop			; (mov r8, r8)
    5b3e:	4b5d      	ldr	r3, [pc, #372]	; (5cb4 <trx_sram_read+0x1b4>)
    5b40:	0018      	movs	r0, r3
    5b42:	4b5e      	ldr	r3, [pc, #376]	; (5cbc <trx_sram_read+0x1bc>)
    5b44:	4798      	blx	r3
    5b46:	0003      	movs	r3, r0
    5b48:	001a      	movs	r2, r3
    5b4a:	2301      	movs	r3, #1
    5b4c:	4053      	eors	r3, r2
    5b4e:	b2db      	uxtb	r3, r3
    5b50:	2b00      	cmp	r3, #0
    5b52:	d1f4      	bne.n	5b3e <trx_sram_read+0x3e>
	}
	spi_write(&master, temp);
    5b54:	230c      	movs	r3, #12
    5b56:	18fb      	adds	r3, r7, r3
    5b58:	881a      	ldrh	r2, [r3, #0]
    5b5a:	4b56      	ldr	r3, [pc, #344]	; (5cb4 <trx_sram_read+0x1b4>)
    5b5c:	0011      	movs	r1, r2
    5b5e:	0018      	movs	r0, r3
    5b60:	4b57      	ldr	r3, [pc, #348]	; (5cc0 <trx_sram_read+0x1c0>)
    5b62:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    5b64:	46c0      	nop			; (mov r8, r8)
    5b66:	4b53      	ldr	r3, [pc, #332]	; (5cb4 <trx_sram_read+0x1b4>)
    5b68:	0018      	movs	r0, r3
    5b6a:	4b56      	ldr	r3, [pc, #344]	; (5cc4 <trx_sram_read+0x1c4>)
    5b6c:	4798      	blx	r3
    5b6e:	0003      	movs	r3, r0
    5b70:	001a      	movs	r2, r3
    5b72:	2301      	movs	r3, #1
    5b74:	4053      	eors	r3, r2
    5b76:	b2db      	uxtb	r3, r3
    5b78:	2b00      	cmp	r3, #0
    5b7a:	d1f4      	bne.n	5b66 <trx_sram_read+0x66>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5b7c:	46c0      	nop			; (mov r8, r8)
    5b7e:	4b4d      	ldr	r3, [pc, #308]	; (5cb4 <trx_sram_read+0x1b4>)
    5b80:	0018      	movs	r0, r3
    5b82:	4b51      	ldr	r3, [pc, #324]	; (5cc8 <trx_sram_read+0x1c8>)
    5b84:	4798      	blx	r3
    5b86:	0003      	movs	r3, r0
    5b88:	001a      	movs	r2, r3
    5b8a:	2301      	movs	r3, #1
    5b8c:	4053      	eors	r3, r2
    5b8e:	b2db      	uxtb	r3, r3
    5b90:	2b00      	cmp	r3, #0
    5b92:	d1f4      	bne.n	5b7e <trx_sram_read+0x7e>
	}
	spi_read(&master, &dummy_read);
    5b94:	4a4d      	ldr	r2, [pc, #308]	; (5ccc <trx_sram_read+0x1cc>)
    5b96:	4b47      	ldr	r3, [pc, #284]	; (5cb4 <trx_sram_read+0x1b4>)
    5b98:	0011      	movs	r1, r2
    5b9a:	0018      	movs	r0, r3
    5b9c:	4b4c      	ldr	r3, [pc, #304]	; (5cd0 <trx_sram_read+0x1d0>)
    5b9e:	4798      	blx	r3

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    5ba0:	46c0      	nop			; (mov r8, r8)
    5ba2:	4b44      	ldr	r3, [pc, #272]	; (5cb4 <trx_sram_read+0x1b4>)
    5ba4:	0018      	movs	r0, r3
    5ba6:	4b45      	ldr	r3, [pc, #276]	; (5cbc <trx_sram_read+0x1bc>)
    5ba8:	4798      	blx	r3
    5baa:	0003      	movs	r3, r0
    5bac:	001a      	movs	r2, r3
    5bae:	2301      	movs	r3, #1
    5bb0:	4053      	eors	r3, r2
    5bb2:	b2db      	uxtb	r3, r3
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	d1f4      	bne.n	5ba2 <trx_sram_read+0xa2>
	}
	spi_write(&master, addr);
    5bb8:	1dfb      	adds	r3, r7, #7
    5bba:	781b      	ldrb	r3, [r3, #0]
    5bbc:	b29a      	uxth	r2, r3
    5bbe:	4b3d      	ldr	r3, [pc, #244]	; (5cb4 <trx_sram_read+0x1b4>)
    5bc0:	0011      	movs	r1, r2
    5bc2:	0018      	movs	r0, r3
    5bc4:	4b3e      	ldr	r3, [pc, #248]	; (5cc0 <trx_sram_read+0x1c0>)
    5bc6:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    5bc8:	46c0      	nop			; (mov r8, r8)
    5bca:	4b3a      	ldr	r3, [pc, #232]	; (5cb4 <trx_sram_read+0x1b4>)
    5bcc:	0018      	movs	r0, r3
    5bce:	4b3d      	ldr	r3, [pc, #244]	; (5cc4 <trx_sram_read+0x1c4>)
    5bd0:	4798      	blx	r3
    5bd2:	0003      	movs	r3, r0
    5bd4:	001a      	movs	r2, r3
    5bd6:	2301      	movs	r3, #1
    5bd8:	4053      	eors	r3, r2
    5bda:	b2db      	uxtb	r3, r3
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d1f4      	bne.n	5bca <trx_sram_read+0xca>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5be0:	46c0      	nop			; (mov r8, r8)
    5be2:	4b34      	ldr	r3, [pc, #208]	; (5cb4 <trx_sram_read+0x1b4>)
    5be4:	0018      	movs	r0, r3
    5be6:	4b38      	ldr	r3, [pc, #224]	; (5cc8 <trx_sram_read+0x1c8>)
    5be8:	4798      	blx	r3
    5bea:	0003      	movs	r3, r0
    5bec:	001a      	movs	r2, r3
    5bee:	2301      	movs	r3, #1
    5bf0:	4053      	eors	r3, r2
    5bf2:	b2db      	uxtb	r3, r3
    5bf4:	2b00      	cmp	r3, #0
    5bf6:	d1f4      	bne.n	5be2 <trx_sram_read+0xe2>
	}
	spi_read(&master, &dummy_read);
    5bf8:	4a34      	ldr	r2, [pc, #208]	; (5ccc <trx_sram_read+0x1cc>)
    5bfa:	4b2e      	ldr	r3, [pc, #184]	; (5cb4 <trx_sram_read+0x1b4>)
    5bfc:	0011      	movs	r1, r2
    5bfe:	0018      	movs	r0, r3
    5c00:	4b33      	ldr	r3, [pc, #204]	; (5cd0 <trx_sram_read+0x1d0>)
    5c02:	4798      	blx	r3

	/* Upload the received byte in the user provided location */
	while (length--) {
    5c04:	e038      	b.n	5c78 <trx_sram_read+0x178>
		while (!spi_is_ready_to_write(&master)) {
    5c06:	46c0      	nop			; (mov r8, r8)
    5c08:	4b2a      	ldr	r3, [pc, #168]	; (5cb4 <trx_sram_read+0x1b4>)
    5c0a:	0018      	movs	r0, r3
    5c0c:	4b2b      	ldr	r3, [pc, #172]	; (5cbc <trx_sram_read+0x1bc>)
    5c0e:	4798      	blx	r3
    5c10:	0003      	movs	r3, r0
    5c12:	001a      	movs	r2, r3
    5c14:	2301      	movs	r3, #1
    5c16:	4053      	eors	r3, r2
    5c18:	b2db      	uxtb	r3, r3
    5c1a:	2b00      	cmp	r3, #0
    5c1c:	d1f4      	bne.n	5c08 <trx_sram_read+0x108>
		}
		spi_write(&master, 0);
    5c1e:	4b25      	ldr	r3, [pc, #148]	; (5cb4 <trx_sram_read+0x1b4>)
    5c20:	2100      	movs	r1, #0
    5c22:	0018      	movs	r0, r3
    5c24:	4b26      	ldr	r3, [pc, #152]	; (5cc0 <trx_sram_read+0x1c0>)
    5c26:	4798      	blx	r3
		while (!spi_is_write_complete(&master)) {
    5c28:	46c0      	nop			; (mov r8, r8)
    5c2a:	4b22      	ldr	r3, [pc, #136]	; (5cb4 <trx_sram_read+0x1b4>)
    5c2c:	0018      	movs	r0, r3
    5c2e:	4b25      	ldr	r3, [pc, #148]	; (5cc4 <trx_sram_read+0x1c4>)
    5c30:	4798      	blx	r3
    5c32:	0003      	movs	r3, r0
    5c34:	001a      	movs	r2, r3
    5c36:	2301      	movs	r3, #1
    5c38:	4053      	eors	r3, r2
    5c3a:	b2db      	uxtb	r3, r3
    5c3c:	2b00      	cmp	r3, #0
    5c3e:	d1f4      	bne.n	5c2a <trx_sram_read+0x12a>
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5c40:	46c0      	nop			; (mov r8, r8)
    5c42:	4b1c      	ldr	r3, [pc, #112]	; (5cb4 <trx_sram_read+0x1b4>)
    5c44:	0018      	movs	r0, r3
    5c46:	4b20      	ldr	r3, [pc, #128]	; (5cc8 <trx_sram_read+0x1c8>)
    5c48:	4798      	blx	r3
    5c4a:	0003      	movs	r3, r0
    5c4c:	001a      	movs	r2, r3
    5c4e:	2301      	movs	r3, #1
    5c50:	4053      	eors	r3, r2
    5c52:	b2db      	uxtb	r3, r3
    5c54:	2b00      	cmp	r3, #0
    5c56:	d1f4      	bne.n	5c42 <trx_sram_read+0x142>
		}
		spi_read(&master, &temp);
    5c58:	230c      	movs	r3, #12
    5c5a:	18fa      	adds	r2, r7, r3
    5c5c:	4b15      	ldr	r3, [pc, #84]	; (5cb4 <trx_sram_read+0x1b4>)
    5c5e:	0011      	movs	r1, r2
    5c60:	0018      	movs	r0, r3
    5c62:	4b1b      	ldr	r3, [pc, #108]	; (5cd0 <trx_sram_read+0x1d0>)
    5c64:	4798      	blx	r3
		*data = temp;
    5c66:	230c      	movs	r3, #12
    5c68:	18fb      	adds	r3, r7, r3
    5c6a:	881b      	ldrh	r3, [r3, #0]
    5c6c:	b2da      	uxtb	r2, r3
    5c6e:	683b      	ldr	r3, [r7, #0]
    5c70:	701a      	strb	r2, [r3, #0]
		data++;
    5c72:	683b      	ldr	r3, [r7, #0]
    5c74:	3301      	adds	r3, #1
    5c76:	603b      	str	r3, [r7, #0]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    5c78:	1dbb      	adds	r3, r7, #6
    5c7a:	781b      	ldrb	r3, [r3, #0]
    5c7c:	1dba      	adds	r2, r7, #6
    5c7e:	1e59      	subs	r1, r3, #1
    5c80:	7011      	strb	r1, [r2, #0]
    5c82:	2b00      	cmp	r3, #0
    5c84:	d1bf      	bne.n	5c06 <trx_sram_read+0x106>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5c86:	490a      	ldr	r1, [pc, #40]	; (5cb0 <trx_sram_read+0x1b0>)
    5c88:	4b0a      	ldr	r3, [pc, #40]	; (5cb4 <trx_sram_read+0x1b4>)
    5c8a:	2200      	movs	r2, #0
    5c8c:	0018      	movs	r0, r3
    5c8e:	4b0a      	ldr	r3, [pc, #40]	; (5cb8 <trx_sram_read+0x1b8>)
    5c90:	4798      	blx	r3
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
    5c92:	230f      	movs	r3, #15
    5c94:	18fb      	adds	r3, r7, r3
    5c96:	781b      	ldrb	r3, [r3, #0]
    5c98:	0018      	movs	r0, r3
    5c9a:	4b0e      	ldr	r3, [pc, #56]	; (5cd4 <trx_sram_read+0x1d4>)
    5c9c:	4798      	blx	r3
}
    5c9e:	46c0      	nop			; (mov r8, r8)
    5ca0:	46bd      	mov	sp, r7
    5ca2:	b004      	add	sp, #16
    5ca4:	bd80      	pop	{r7, pc}
    5ca6:	46c0      	nop			; (mov r8, r8)
    5ca8:	0000adad 	.word	0x0000adad
    5cac:	00004d61 	.word	0x00004d61
    5cb0:	20000f58 	.word	0x20000f58
    5cb4:	20000f94 	.word	0x20000f94
    5cb8:	0000a445 	.word	0x0000a445
    5cbc:	000050a5 	.word	0x000050a5
    5cc0:	000050f5 	.word	0x000050f5
    5cc4:	0000507d 	.word	0x0000507d
    5cc8:	000050cd 	.word	0x000050cd
    5ccc:	20000f50 	.word	0x20000f50
    5cd0:	0000513d 	.word	0x0000513d
    5cd4:	00004da9 	.word	0x00004da9

00005cd8 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    5cd8:	b580      	push	{r7, lr}
    5cda:	b084      	sub	sp, #16
    5cdc:	af00      	add	r7, sp, #0
    5cde:	6039      	str	r1, [r7, #0]
    5ce0:	0011      	movs	r1, r2
    5ce2:	1dfb      	adds	r3, r7, #7
    5ce4:	1c02      	adds	r2, r0, #0
    5ce6:	701a      	strb	r2, [r3, #0]
    5ce8:	1dbb      	adds	r3, r7, #6
    5cea:	1c0a      	adds	r2, r1, #0
    5cec:	701a      	strb	r2, [r3, #0]
	uint8_t *odata;
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
    5cee:	2308      	movs	r3, #8
    5cf0:	18fb      	adds	r3, r7, r3
    5cf2:	2200      	movs	r2, #0
    5cf4:	801a      	strh	r2, [r3, #0]
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    5cf6:	2001      	movs	r0, #1
    5cf8:	4b9a      	ldr	r3, [pc, #616]	; (5f64 <trx_aes_wrrd+0x28c>)
    5cfa:	4798      	blx	r3

	ENTER_TRX_REGION();
    5cfc:	2100      	movs	r1, #0
    5cfe:	2000      	movs	r0, #0
    5d00:	4b99      	ldr	r3, [pc, #612]	; (5f68 <trx_aes_wrrd+0x290>)
    5d02:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5d04:	4999      	ldr	r1, [pc, #612]	; (5f6c <trx_aes_wrrd+0x294>)
    5d06:	4b9a      	ldr	r3, [pc, #616]	; (5f70 <trx_aes_wrrd+0x298>)
    5d08:	2201      	movs	r2, #1
    5d0a:	0018      	movs	r0, r3
    5d0c:	4b99      	ldr	r3, [pc, #612]	; (5f74 <trx_aes_wrrd+0x29c>)
    5d0e:	4798      	blx	r3

	/* Send the command byte */
	temp = TRX_CMD_SW;
    5d10:	230b      	movs	r3, #11
    5d12:	18fb      	adds	r3, r7, r3
    5d14:	2240      	movs	r2, #64	; 0x40
    5d16:	701a      	strb	r2, [r3, #0]

	while (!spi_is_ready_to_write(&master)) {
    5d18:	46c0      	nop			; (mov r8, r8)
    5d1a:	4b95      	ldr	r3, [pc, #596]	; (5f70 <trx_aes_wrrd+0x298>)
    5d1c:	0018      	movs	r0, r3
    5d1e:	4b96      	ldr	r3, [pc, #600]	; (5f78 <trx_aes_wrrd+0x2a0>)
    5d20:	4798      	blx	r3
    5d22:	0003      	movs	r3, r0
    5d24:	001a      	movs	r2, r3
    5d26:	2301      	movs	r3, #1
    5d28:	4053      	eors	r3, r2
    5d2a:	b2db      	uxtb	r3, r3
    5d2c:	2b00      	cmp	r3, #0
    5d2e:	d1f4      	bne.n	5d1a <trx_aes_wrrd+0x42>
	}
	spi_write(&master, temp);
    5d30:	230b      	movs	r3, #11
    5d32:	18fb      	adds	r3, r7, r3
    5d34:	781b      	ldrb	r3, [r3, #0]
    5d36:	b29a      	uxth	r2, r3
    5d38:	4b8d      	ldr	r3, [pc, #564]	; (5f70 <trx_aes_wrrd+0x298>)
    5d3a:	0011      	movs	r1, r2
    5d3c:	0018      	movs	r0, r3
    5d3e:	4b8f      	ldr	r3, [pc, #572]	; (5f7c <trx_aes_wrrd+0x2a4>)
    5d40:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    5d42:	46c0      	nop			; (mov r8, r8)
    5d44:	4b8a      	ldr	r3, [pc, #552]	; (5f70 <trx_aes_wrrd+0x298>)
    5d46:	0018      	movs	r0, r3
    5d48:	4b8d      	ldr	r3, [pc, #564]	; (5f80 <trx_aes_wrrd+0x2a8>)
    5d4a:	4798      	blx	r3
    5d4c:	0003      	movs	r3, r0
    5d4e:	001a      	movs	r2, r3
    5d50:	2301      	movs	r3, #1
    5d52:	4053      	eors	r3, r2
    5d54:	b2db      	uxtb	r3, r3
    5d56:	2b00      	cmp	r3, #0
    5d58:	d1f4      	bne.n	5d44 <trx_aes_wrrd+0x6c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5d5a:	46c0      	nop			; (mov r8, r8)
    5d5c:	4b84      	ldr	r3, [pc, #528]	; (5f70 <trx_aes_wrrd+0x298>)
    5d5e:	0018      	movs	r0, r3
    5d60:	4b88      	ldr	r3, [pc, #544]	; (5f84 <trx_aes_wrrd+0x2ac>)
    5d62:	4798      	blx	r3
    5d64:	0003      	movs	r3, r0
    5d66:	001a      	movs	r2, r3
    5d68:	2301      	movs	r3, #1
    5d6a:	4053      	eors	r3, r2
    5d6c:	b2db      	uxtb	r3, r3
    5d6e:	2b00      	cmp	r3, #0
    5d70:	d1f4      	bne.n	5d5c <trx_aes_wrrd+0x84>
	}
	spi_read(&master, &dummy_read);
    5d72:	4a85      	ldr	r2, [pc, #532]	; (5f88 <trx_aes_wrrd+0x2b0>)
    5d74:	4b7e      	ldr	r3, [pc, #504]	; (5f70 <trx_aes_wrrd+0x298>)
    5d76:	0011      	movs	r1, r2
    5d78:	0018      	movs	r0, r3
    5d7a:	4b84      	ldr	r3, [pc, #528]	; (5f8c <trx_aes_wrrd+0x2b4>)
    5d7c:	4798      	blx	r3

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    5d7e:	46c0      	nop			; (mov r8, r8)
    5d80:	4b7b      	ldr	r3, [pc, #492]	; (5f70 <trx_aes_wrrd+0x298>)
    5d82:	0018      	movs	r0, r3
    5d84:	4b7c      	ldr	r3, [pc, #496]	; (5f78 <trx_aes_wrrd+0x2a0>)
    5d86:	4798      	blx	r3
    5d88:	0003      	movs	r3, r0
    5d8a:	001a      	movs	r2, r3
    5d8c:	2301      	movs	r3, #1
    5d8e:	4053      	eors	r3, r2
    5d90:	b2db      	uxtb	r3, r3
    5d92:	2b00      	cmp	r3, #0
    5d94:	d1f4      	bne.n	5d80 <trx_aes_wrrd+0xa8>
	}
	spi_write(&master, addr);
    5d96:	1dfb      	adds	r3, r7, #7
    5d98:	781b      	ldrb	r3, [r3, #0]
    5d9a:	b29a      	uxth	r2, r3
    5d9c:	4b74      	ldr	r3, [pc, #464]	; (5f70 <trx_aes_wrrd+0x298>)
    5d9e:	0011      	movs	r1, r2
    5da0:	0018      	movs	r0, r3
    5da2:	4b76      	ldr	r3, [pc, #472]	; (5f7c <trx_aes_wrrd+0x2a4>)
    5da4:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    5da6:	46c0      	nop			; (mov r8, r8)
    5da8:	4b71      	ldr	r3, [pc, #452]	; (5f70 <trx_aes_wrrd+0x298>)
    5daa:	0018      	movs	r0, r3
    5dac:	4b74      	ldr	r3, [pc, #464]	; (5f80 <trx_aes_wrrd+0x2a8>)
    5dae:	4798      	blx	r3
    5db0:	0003      	movs	r3, r0
    5db2:	001a      	movs	r2, r3
    5db4:	2301      	movs	r3, #1
    5db6:	4053      	eors	r3, r2
    5db8:	b2db      	uxtb	r3, r3
    5dba:	2b00      	cmp	r3, #0
    5dbc:	d1f4      	bne.n	5da8 <trx_aes_wrrd+0xd0>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5dbe:	46c0      	nop			; (mov r8, r8)
    5dc0:	4b6b      	ldr	r3, [pc, #428]	; (5f70 <trx_aes_wrrd+0x298>)
    5dc2:	0018      	movs	r0, r3
    5dc4:	4b6f      	ldr	r3, [pc, #444]	; (5f84 <trx_aes_wrrd+0x2ac>)
    5dc6:	4798      	blx	r3
    5dc8:	0003      	movs	r3, r0
    5dca:	001a      	movs	r2, r3
    5dcc:	2301      	movs	r3, #1
    5dce:	4053      	eors	r3, r2
    5dd0:	b2db      	uxtb	r3, r3
    5dd2:	2b00      	cmp	r3, #0
    5dd4:	d1f4      	bne.n	5dc0 <trx_aes_wrrd+0xe8>
	}
	spi_read(&master, &dummy_read);
    5dd6:	4a6c      	ldr	r2, [pc, #432]	; (5f88 <trx_aes_wrrd+0x2b0>)
    5dd8:	4b65      	ldr	r3, [pc, #404]	; (5f70 <trx_aes_wrrd+0x298>)
    5dda:	0011      	movs	r1, r2
    5ddc:	0018      	movs	r0, r3
    5dde:	4b6b      	ldr	r3, [pc, #428]	; (5f8c <trx_aes_wrrd+0x2b4>)
    5de0:	4798      	blx	r3

	/* now transfer data */
	odata = idata;
    5de2:	683b      	ldr	r3, [r7, #0]
    5de4:	60fb      	str	r3, [r7, #12]

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    5de6:	46c0      	nop			; (mov r8, r8)
    5de8:	4b61      	ldr	r3, [pc, #388]	; (5f70 <trx_aes_wrrd+0x298>)
    5dea:	0018      	movs	r0, r3
    5dec:	4b62      	ldr	r3, [pc, #392]	; (5f78 <trx_aes_wrrd+0x2a0>)
    5dee:	4798      	blx	r3
    5df0:	0003      	movs	r3, r0
    5df2:	001a      	movs	r2, r3
    5df4:	2301      	movs	r3, #1
    5df6:	4053      	eors	r3, r2
    5df8:	b2db      	uxtb	r3, r3
    5dfa:	2b00      	cmp	r3, #0
    5dfc:	d1f4      	bne.n	5de8 <trx_aes_wrrd+0x110>
	}
	spi_write(&master, *idata++);
    5dfe:	683b      	ldr	r3, [r7, #0]
    5e00:	1c5a      	adds	r2, r3, #1
    5e02:	603a      	str	r2, [r7, #0]
    5e04:	781b      	ldrb	r3, [r3, #0]
    5e06:	b29a      	uxth	r2, r3
    5e08:	4b59      	ldr	r3, [pc, #356]	; (5f70 <trx_aes_wrrd+0x298>)
    5e0a:	0011      	movs	r1, r2
    5e0c:	0018      	movs	r0, r3
    5e0e:	4b5b      	ldr	r3, [pc, #364]	; (5f7c <trx_aes_wrrd+0x2a4>)
    5e10:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    5e12:	46c0      	nop			; (mov r8, r8)
    5e14:	4b56      	ldr	r3, [pc, #344]	; (5f70 <trx_aes_wrrd+0x298>)
    5e16:	0018      	movs	r0, r3
    5e18:	4b59      	ldr	r3, [pc, #356]	; (5f80 <trx_aes_wrrd+0x2a8>)
    5e1a:	4798      	blx	r3
    5e1c:	0003      	movs	r3, r0
    5e1e:	001a      	movs	r2, r3
    5e20:	2301      	movs	r3, #1
    5e22:	4053      	eors	r3, r2
    5e24:	b2db      	uxtb	r3, r3
    5e26:	2b00      	cmp	r3, #0
    5e28:	d1f4      	bne.n	5e14 <trx_aes_wrrd+0x13c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    5e2a:	46c0      	nop			; (mov r8, r8)
    5e2c:	4b50      	ldr	r3, [pc, #320]	; (5f70 <trx_aes_wrrd+0x298>)
    5e2e:	0018      	movs	r0, r3
    5e30:	4b54      	ldr	r3, [pc, #336]	; (5f84 <trx_aes_wrrd+0x2ac>)
    5e32:	4798      	blx	r3
    5e34:	0003      	movs	r3, r0
    5e36:	001a      	movs	r2, r3
    5e38:	2301      	movs	r3, #1
    5e3a:	4053      	eors	r3, r2
    5e3c:	b2db      	uxtb	r3, r3
    5e3e:	2b00      	cmp	r3, #0
    5e40:	d1f4      	bne.n	5e2c <trx_aes_wrrd+0x154>
	}
	spi_read(&master, &dummy_read);
    5e42:	4a51      	ldr	r2, [pc, #324]	; (5f88 <trx_aes_wrrd+0x2b0>)
    5e44:	4b4a      	ldr	r3, [pc, #296]	; (5f70 <trx_aes_wrrd+0x298>)
    5e46:	0011      	movs	r1, r2
    5e48:	0018      	movs	r0, r3
    5e4a:	4b50      	ldr	r3, [pc, #320]	; (5f8c <trx_aes_wrrd+0x2b4>)
    5e4c:	4798      	blx	r3

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    5e4e:	e041      	b.n	5ed4 <trx_aes_wrrd+0x1fc>
		while (!spi_is_ready_to_write(&master)) {
    5e50:	46c0      	nop			; (mov r8, r8)
    5e52:	4b47      	ldr	r3, [pc, #284]	; (5f70 <trx_aes_wrrd+0x298>)
    5e54:	0018      	movs	r0, r3
    5e56:	4b48      	ldr	r3, [pc, #288]	; (5f78 <trx_aes_wrrd+0x2a0>)
    5e58:	4798      	blx	r3
    5e5a:	0003      	movs	r3, r0
    5e5c:	001a      	movs	r2, r3
    5e5e:	2301      	movs	r3, #1
    5e60:	4053      	eors	r3, r2
    5e62:	b2db      	uxtb	r3, r3
    5e64:	2b00      	cmp	r3, #0
    5e66:	d1f4      	bne.n	5e52 <trx_aes_wrrd+0x17a>
		}
		spi_write(&master, *idata++);
    5e68:	683b      	ldr	r3, [r7, #0]
    5e6a:	1c5a      	adds	r2, r3, #1
    5e6c:	603a      	str	r2, [r7, #0]
    5e6e:	781b      	ldrb	r3, [r3, #0]
    5e70:	b29a      	uxth	r2, r3
    5e72:	4b3f      	ldr	r3, [pc, #252]	; (5f70 <trx_aes_wrrd+0x298>)
    5e74:	0011      	movs	r1, r2
    5e76:	0018      	movs	r0, r3
    5e78:	4b40      	ldr	r3, [pc, #256]	; (5f7c <trx_aes_wrrd+0x2a4>)
    5e7a:	4798      	blx	r3
		while (!spi_is_write_complete(&master)) {
    5e7c:	46c0      	nop			; (mov r8, r8)
    5e7e:	4b3c      	ldr	r3, [pc, #240]	; (5f70 <trx_aes_wrrd+0x298>)
    5e80:	0018      	movs	r0, r3
    5e82:	4b3f      	ldr	r3, [pc, #252]	; (5f80 <trx_aes_wrrd+0x2a8>)
    5e84:	4798      	blx	r3
    5e86:	0003      	movs	r3, r0
    5e88:	001a      	movs	r2, r3
    5e8a:	2301      	movs	r3, #1
    5e8c:	4053      	eors	r3, r2
    5e8e:	b2db      	uxtb	r3, r3
    5e90:	2b00      	cmp	r3, #0
    5e92:	d1f4      	bne.n	5e7e <trx_aes_wrrd+0x1a6>
		}
		while (!spi_is_ready_to_read(&master)) {
    5e94:	46c0      	nop			; (mov r8, r8)
    5e96:	4b36      	ldr	r3, [pc, #216]	; (5f70 <trx_aes_wrrd+0x298>)
    5e98:	0018      	movs	r0, r3
    5e9a:	4b3a      	ldr	r3, [pc, #232]	; (5f84 <trx_aes_wrrd+0x2ac>)
    5e9c:	4798      	blx	r3
    5e9e:	0003      	movs	r3, r0
    5ea0:	001a      	movs	r2, r3
    5ea2:	2301      	movs	r3, #1
    5ea4:	4053      	eors	r3, r2
    5ea6:	b2db      	uxtb	r3, r3
    5ea8:	2b00      	cmp	r3, #0
    5eaa:	d1f4      	bne.n	5e96 <trx_aes_wrrd+0x1be>
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
    5eac:	2308      	movs	r3, #8
    5eae:	18fa      	adds	r2, r7, r3
    5eb0:	4b2f      	ldr	r3, [pc, #188]	; (5f70 <trx_aes_wrrd+0x298>)
    5eb2:	0011      	movs	r1, r2
    5eb4:	0018      	movs	r0, r3
    5eb6:	4b35      	ldr	r3, [pc, #212]	; (5f8c <trx_aes_wrrd+0x2b4>)
    5eb8:	4798      	blx	r3
		*odata++ = (uint8_t)odata_var;
    5eba:	68fb      	ldr	r3, [r7, #12]
    5ebc:	1c5a      	adds	r2, r3, #1
    5ebe:	60fa      	str	r2, [r7, #12]
    5ec0:	2208      	movs	r2, #8
    5ec2:	18ba      	adds	r2, r7, r2
    5ec4:	8812      	ldrh	r2, [r2, #0]
    5ec6:	b2d2      	uxtb	r2, r2
    5ec8:	701a      	strb	r2, [r3, #0]
#else
		spi_read(&master, (uint16_t *)odata++);
#endif
		length--;
    5eca:	1dbb      	adds	r3, r7, #6
    5ecc:	781a      	ldrb	r2, [r3, #0]
    5ece:	1dbb      	adds	r3, r7, #6
    5ed0:	3a01      	subs	r2, #1
    5ed2:	701a      	strb	r2, [r3, #0]
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    5ed4:	1dbb      	adds	r3, r7, #6
    5ed6:	781b      	ldrb	r3, [r3, #0]
    5ed8:	2b00      	cmp	r3, #0
    5eda:	d1b9      	bne.n	5e50 <trx_aes_wrrd+0x178>
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    5edc:	46c0      	nop			; (mov r8, r8)
    5ede:	4b24      	ldr	r3, [pc, #144]	; (5f70 <trx_aes_wrrd+0x298>)
    5ee0:	0018      	movs	r0, r3
    5ee2:	4b25      	ldr	r3, [pc, #148]	; (5f78 <trx_aes_wrrd+0x2a0>)
    5ee4:	4798      	blx	r3
    5ee6:	0003      	movs	r3, r0
    5ee8:	001a      	movs	r2, r3
    5eea:	2301      	movs	r3, #1
    5eec:	4053      	eors	r3, r2
    5eee:	b2db      	uxtb	r3, r3
    5ef0:	2b00      	cmp	r3, #0
    5ef2:	d1f4      	bne.n	5ede <trx_aes_wrrd+0x206>
	}
	spi_write(&master, 0);
    5ef4:	4b1e      	ldr	r3, [pc, #120]	; (5f70 <trx_aes_wrrd+0x298>)
    5ef6:	2100      	movs	r1, #0
    5ef8:	0018      	movs	r0, r3
    5efa:	4b20      	ldr	r3, [pc, #128]	; (5f7c <trx_aes_wrrd+0x2a4>)
    5efc:	4798      	blx	r3
	while (!spi_is_write_complete(&master)) {
    5efe:	46c0      	nop			; (mov r8, r8)
    5f00:	4b1b      	ldr	r3, [pc, #108]	; (5f70 <trx_aes_wrrd+0x298>)
    5f02:	0018      	movs	r0, r3
    5f04:	4b1e      	ldr	r3, [pc, #120]	; (5f80 <trx_aes_wrrd+0x2a8>)
    5f06:	4798      	blx	r3
    5f08:	0003      	movs	r3, r0
    5f0a:	001a      	movs	r2, r3
    5f0c:	2301      	movs	r3, #1
    5f0e:	4053      	eors	r3, r2
    5f10:	b2db      	uxtb	r3, r3
    5f12:	2b00      	cmp	r3, #0
    5f14:	d1f4      	bne.n	5f00 <trx_aes_wrrd+0x228>
	}
	while (!spi_is_ready_to_read(&master)) {
    5f16:	46c0      	nop			; (mov r8, r8)
    5f18:	4b15      	ldr	r3, [pc, #84]	; (5f70 <trx_aes_wrrd+0x298>)
    5f1a:	0018      	movs	r0, r3
    5f1c:	4b19      	ldr	r3, [pc, #100]	; (5f84 <trx_aes_wrrd+0x2ac>)
    5f1e:	4798      	blx	r3
    5f20:	0003      	movs	r3, r0
    5f22:	001a      	movs	r2, r3
    5f24:	2301      	movs	r3, #1
    5f26:	4053      	eors	r3, r2
    5f28:	b2db      	uxtb	r3, r3
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	d1f4      	bne.n	5f18 <trx_aes_wrrd+0x240>
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
    5f2e:	2308      	movs	r3, #8
    5f30:	18fa      	adds	r2, r7, r3
    5f32:	4b0f      	ldr	r3, [pc, #60]	; (5f70 <trx_aes_wrrd+0x298>)
    5f34:	0011      	movs	r1, r2
    5f36:	0018      	movs	r0, r3
    5f38:	4b14      	ldr	r3, [pc, #80]	; (5f8c <trx_aes_wrrd+0x2b4>)
    5f3a:	4798      	blx	r3
	*odata = (uint8_t)odata_var;
    5f3c:	2308      	movs	r3, #8
    5f3e:	18fb      	adds	r3, r7, r3
    5f40:	881b      	ldrh	r3, [r3, #0]
    5f42:	b2da      	uxtb	r2, r3
    5f44:	68fb      	ldr	r3, [r7, #12]
    5f46:	701a      	strb	r2, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5f48:	4908      	ldr	r1, [pc, #32]	; (5f6c <trx_aes_wrrd+0x294>)
    5f4a:	4b09      	ldr	r3, [pc, #36]	; (5f70 <trx_aes_wrrd+0x298>)
    5f4c:	2200      	movs	r2, #0
    5f4e:	0018      	movs	r0, r3
    5f50:	4b08      	ldr	r3, [pc, #32]	; (5f74 <trx_aes_wrrd+0x29c>)
    5f52:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    5f54:	2100      	movs	r1, #0
    5f56:	2000      	movs	r0, #0
    5f58:	4b0d      	ldr	r3, [pc, #52]	; (5f90 <trx_aes_wrrd+0x2b8>)
    5f5a:	4798      	blx	r3
}
    5f5c:	46c0      	nop			; (mov r8, r8)
    5f5e:	46bd      	mov	sp, r7
    5f60:	b004      	add	sp, #16
    5f62:	bd80      	pop	{r7, pc}
    5f64:	0000adad 	.word	0x0000adad
    5f68:	0000ac6d 	.word	0x0000ac6d
    5f6c:	20000f58 	.word	0x20000f58
    5f70:	20000f94 	.word	0x20000f94
    5f74:	0000a445 	.word	0x0000a445
    5f78:	000050a5 	.word	0x000050a5
    5f7c:	000050f5 	.word	0x000050f5
    5f80:	0000507d 	.word	0x0000507d
    5f84:	000050cd 	.word	0x000050cd
    5f88:	20000f50 	.word	0x20000f50
    5f8c:	0000513d 	.word	0x0000513d
    5f90:	0000ac25 	.word	0x0000ac25

00005f94 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    5f94:	b580      	push	{r7, lr}
    5f96:	b082      	sub	sp, #8
    5f98:	af00      	add	r7, sp, #0
    5f9a:	0002      	movs	r2, r0
    5f9c:	1dfb      	adds	r3, r7, #7
    5f9e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5fa0:	4b06      	ldr	r3, [pc, #24]	; (5fbc <system_interrupt_enable+0x28>)
    5fa2:	1dfa      	adds	r2, r7, #7
    5fa4:	7812      	ldrb	r2, [r2, #0]
    5fa6:	0011      	movs	r1, r2
    5fa8:	221f      	movs	r2, #31
    5faa:	400a      	ands	r2, r1
    5fac:	2101      	movs	r1, #1
    5fae:	4091      	lsls	r1, r2
    5fb0:	000a      	movs	r2, r1
    5fb2:	601a      	str	r2, [r3, #0]
}
    5fb4:	46c0      	nop			; (mov r8, r8)
    5fb6:	46bd      	mov	sp, r7
    5fb8:	b002      	add	sp, #8
    5fba:	bd80      	pop	{r7, pc}
    5fbc:	e000e100 	.word	0xe000e100

00005fc0 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    5fc0:	b580      	push	{r7, lr}
    5fc2:	b084      	sub	sp, #16
    5fc4:	af00      	add	r7, sp, #0
    5fc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5fc8:	687b      	ldr	r3, [r7, #4]
    5fca:	681b      	ldr	r3, [r3, #0]
    5fcc:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    5fce:	68fb      	ldr	r3, [r7, #12]
    5fd0:	7bdb      	ldrb	r3, [r3, #15]
    5fd2:	b2db      	uxtb	r3, r3
    5fd4:	001a      	movs	r2, r3
    5fd6:	2380      	movs	r3, #128	; 0x80
    5fd8:	4013      	ands	r3, r2
    5fda:	1e5a      	subs	r2, r3, #1
    5fdc:	4193      	sbcs	r3, r2
    5fde:	b2db      	uxtb	r3, r3
#endif
}
    5fe0:	0018      	movs	r0, r3
    5fe2:	46bd      	mov	sp, r7
    5fe4:	b004      	add	sp, #16
    5fe6:	bd80      	pop	{r7, pc}

00005fe8 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    5fe8:	b580      	push	{r7, lr}
    5fea:	b082      	sub	sp, #8
    5fec:	af00      	add	r7, sp, #0
    5fee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    5ff0:	687b      	ldr	r3, [r7, #4]
    5ff2:	2200      	movs	r2, #0
    5ff4:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    5ff6:	687b      	ldr	r3, [r7, #4]
    5ff8:	2200      	movs	r2, #0
    5ffa:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    5ffc:	687b      	ldr	r3, [r7, #4]
    5ffe:	2200      	movs	r2, #0
    6000:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    6002:	687b      	ldr	r3, [r7, #4]
    6004:	2200      	movs	r2, #0
    6006:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    6008:	687b      	ldr	r3, [r7, #4]
    600a:	2200      	movs	r2, #0
    600c:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    600e:	687b      	ldr	r3, [r7, #4]
    6010:	2200      	movs	r2, #0
    6012:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    6014:	687b      	ldr	r3, [r7, #4]
    6016:	2200      	movs	r2, #0
    6018:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    601a:	687b      	ldr	r3, [r7, #4]
    601c:	2200      	movs	r2, #0
    601e:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	2200      	movs	r2, #0
    6024:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    6026:	687b      	ldr	r3, [r7, #4]
    6028:	2200      	movs	r2, #0
    602a:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    602c:	687b      	ldr	r3, [r7, #4]
    602e:	2200      	movs	r2, #0
    6030:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    6032:	687b      	ldr	r3, [r7, #4]
    6034:	2200      	movs	r2, #0
    6036:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	2200      	movs	r2, #0
    603c:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    603e:	687b      	ldr	r3, [r7, #4]
    6040:	2200      	movs	r2, #0
    6042:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    6044:	687b      	ldr	r3, [r7, #4]
    6046:	2200      	movs	r2, #0
    6048:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    604a:	687b      	ldr	r3, [r7, #4]
    604c:	2200      	movs	r2, #0
    604e:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	2200      	movs	r2, #0
    6054:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    6056:	687b      	ldr	r3, [r7, #4]
    6058:	2200      	movs	r2, #0
    605a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    605c:	687b      	ldr	r3, [r7, #4]
    605e:	2200      	movs	r2, #0
    6060:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    6062:	687b      	ldr	r3, [r7, #4]
    6064:	2200      	movs	r2, #0
    6066:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    6068:	46c0      	nop			; (mov r8, r8)
    606a:	46bd      	mov	sp, r7
    606c:	b002      	add	sp, #8
    606e:	bd80      	pop	{r7, pc}

00006070 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    6070:	b580      	push	{r7, lr}
    6072:	b084      	sub	sp, #16
    6074:	af00      	add	r7, sp, #0
    6076:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6078:	687b      	ldr	r3, [r7, #4]
    607a:	681b      	ldr	r3, [r3, #0]
    607c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    607e:	46c0      	nop			; (mov r8, r8)
    6080:	687b      	ldr	r3, [r7, #4]
    6082:	0018      	movs	r0, r3
    6084:	4b07      	ldr	r3, [pc, #28]	; (60a4 <tc_enable+0x34>)
    6086:	4798      	blx	r3
    6088:	1e03      	subs	r3, r0, #0
    608a:	d1f9      	bne.n	6080 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    608c:	68fb      	ldr	r3, [r7, #12]
    608e:	881b      	ldrh	r3, [r3, #0]
    6090:	b29b      	uxth	r3, r3
    6092:	2202      	movs	r2, #2
    6094:	4313      	orrs	r3, r2
    6096:	b29a      	uxth	r2, r3
    6098:	68fb      	ldr	r3, [r7, #12]
    609a:	801a      	strh	r2, [r3, #0]
}
    609c:	46c0      	nop			; (mov r8, r8)
    609e:	46bd      	mov	sp, r7
    60a0:	b004      	add	sp, #16
    60a2:	bd80      	pop	{r7, pc}
    60a4:	00005fc1 	.word	0x00005fc1

000060a8 <tc_clear_status>:
 * \param[in] status_flags  Bitmask of \c TC_STATUS_* flags to clear
 */
static inline void tc_clear_status(
		struct tc_module *const module_inst,
		const uint32_t status_flags)
{
    60a8:	b580      	push	{r7, lr}
    60aa:	b084      	sub	sp, #16
    60ac:	af00      	add	r7, sp, #0
    60ae:	6078      	str	r0, [r7, #4]
    60b0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	681b      	ldr	r3, [r3, #0]
    60b6:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    60b8:	2300      	movs	r3, #0
    60ba:	60fb      	str	r3, [r7, #12]

	/* Check for TC channel 0 match */
	if (status_flags & TC_STATUS_CHANNEL_0_MATCH) {
    60bc:	683b      	ldr	r3, [r7, #0]
    60be:	2201      	movs	r2, #1
    60c0:	4013      	ands	r3, r2
    60c2:	d003      	beq.n	60cc <tc_clear_status+0x24>
		int_flags |= TC_INTFLAG_MC(1);
    60c4:	68fb      	ldr	r3, [r7, #12]
    60c6:	2210      	movs	r2, #16
    60c8:	4313      	orrs	r3, r2
    60ca:	60fb      	str	r3, [r7, #12]
	}

	/* Check for TC channel 1 match */
	if (status_flags & TC_STATUS_CHANNEL_1_MATCH) {
    60cc:	683b      	ldr	r3, [r7, #0]
    60ce:	2202      	movs	r2, #2
    60d0:	4013      	ands	r3, r2
    60d2:	d003      	beq.n	60dc <tc_clear_status+0x34>
		int_flags |= TC_INTFLAG_MC(2);
    60d4:	68fb      	ldr	r3, [r7, #12]
    60d6:	2220      	movs	r2, #32
    60d8:	4313      	orrs	r3, r2
    60da:	60fb      	str	r3, [r7, #12]
	}

#if !defined(FEATURE_TC_SYNCBUSY_SCHEME_VERSION_2)
	/* Check for TC read synchronization ready */
	if (status_flags & TC_STATUS_SYNC_READY) {
    60dc:	683b      	ldr	r3, [r7, #0]
    60de:	2204      	movs	r2, #4
    60e0:	4013      	ands	r3, r2
    60e2:	d003      	beq.n	60ec <tc_clear_status+0x44>
		int_flags |= TC_INTFLAG_SYNCRDY;
    60e4:	68fb      	ldr	r3, [r7, #12]
    60e6:	2208      	movs	r2, #8
    60e8:	4313      	orrs	r3, r2
    60ea:	60fb      	str	r3, [r7, #12]
	}
#endif

	/* Check for TC capture overflow */
	if (status_flags & TC_STATUS_CAPTURE_OVERFLOW) {
    60ec:	683b      	ldr	r3, [r7, #0]
    60ee:	2208      	movs	r2, #8
    60f0:	4013      	ands	r3, r2
    60f2:	d003      	beq.n	60fc <tc_clear_status+0x54>
		int_flags |= TC_INTFLAG_ERR;
    60f4:	68fb      	ldr	r3, [r7, #12]
    60f6:	2202      	movs	r2, #2
    60f8:	4313      	orrs	r3, r2
    60fa:	60fb      	str	r3, [r7, #12]
	}

	/* Check for TC count overflow */
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
    60fc:	683b      	ldr	r3, [r7, #0]
    60fe:	2210      	movs	r2, #16
    6100:	4013      	ands	r3, r2
    6102:	d003      	beq.n	610c <tc_clear_status+0x64>
		int_flags |= TC_INTFLAG_OVF;
    6104:	68fb      	ldr	r3, [r7, #12]
    6106:	2201      	movs	r2, #1
    6108:	4313      	orrs	r3, r2
    610a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    610c:	68fb      	ldr	r3, [r7, #12]
    610e:	b2da      	uxtb	r2, r3
    6110:	68bb      	ldr	r3, [r7, #8]
    6112:	739a      	strb	r2, [r3, #14]
}
    6114:	46c0      	nop			; (mov r8, r8)
    6116:	46bd      	mov	sp, r7
    6118:	b004      	add	sp, #16
    611a:	bd80      	pop	{r7, pc}

0000611c <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    611c:	b580      	push	{r7, lr}
    611e:	b082      	sub	sp, #8
    6120:	af00      	add	r7, sp, #0
    6122:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    6124:	4a04      	ldr	r2, [pc, #16]	; (6138 <_tc_interrupt_get_interrupt_vector+0x1c>)
    6126:	687b      	ldr	r3, [r7, #4]
    6128:	18d3      	adds	r3, r2, r3
    612a:	781b      	ldrb	r3, [r3, #0]
    612c:	b25b      	sxtb	r3, r3
}
    612e:	0018      	movs	r0, r3
    6130:	46bd      	mov	sp, r7
    6132:	b002      	add	sp, #8
    6134:	bd80      	pop	{r7, pc}
    6136:	46c0      	nop			; (mov r8, r8)
    6138:	20000018 	.word	0x20000018

0000613c <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    613c:	b580      	push	{r7, lr}
    613e:	b082      	sub	sp, #8
    6140:	af00      	add	r7, sp, #0
    6142:	6078      	str	r0, [r7, #4]
    6144:	000a      	movs	r2, r1
    6146:	1cfb      	adds	r3, r7, #3
    6148:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    614a:	687b      	ldr	r3, [r7, #4]
    614c:	681b      	ldr	r3, [r3, #0]
    614e:	0018      	movs	r0, r3
    6150:	4b22      	ldr	r3, [pc, #136]	; (61dc <tc_enable_callback+0xa0>)
    6152:	4798      	blx	r3
    6154:	0003      	movs	r3, r0
    6156:	0018      	movs	r0, r3
    6158:	4b21      	ldr	r3, [pc, #132]	; (61e0 <tc_enable_callback+0xa4>)
    615a:	4798      	blx	r3
    615c:	0003      	movs	r3, r0
    615e:	0018      	movs	r0, r3
    6160:	4b20      	ldr	r3, [pc, #128]	; (61e4 <tc_enable_callback+0xa8>)
    6162:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    6164:	1cfb      	adds	r3, r7, #3
    6166:	781b      	ldrb	r3, [r3, #0]
    6168:	2b02      	cmp	r3, #2
    616a:	d10b      	bne.n	6184 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    616c:	687b      	ldr	r3, [r7, #4]
    616e:	7e5b      	ldrb	r3, [r3, #25]
    6170:	2210      	movs	r2, #16
    6172:	4313      	orrs	r3, r2
    6174:	b2da      	uxtb	r2, r3
    6176:	687b      	ldr	r3, [r7, #4]
    6178:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    617a:	687b      	ldr	r3, [r7, #4]
    617c:	681b      	ldr	r3, [r3, #0]
    617e:	2210      	movs	r2, #16
    6180:	735a      	strb	r2, [r3, #13]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
    6182:	e026      	b.n	61d2 <tc_enable_callback+0x96>
	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    6184:	1cfb      	adds	r3, r7, #3
    6186:	781b      	ldrb	r3, [r3, #0]
    6188:	2b03      	cmp	r3, #3
    618a:	d10b      	bne.n	61a4 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    618c:	687b      	ldr	r3, [r7, #4]
    618e:	7e5b      	ldrb	r3, [r3, #25]
    6190:	2220      	movs	r2, #32
    6192:	4313      	orrs	r3, r2
    6194:	b2da      	uxtb	r2, r3
    6196:	687b      	ldr	r3, [r7, #4]
    6198:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	681b      	ldr	r3, [r3, #0]
    619e:	2220      	movs	r2, #32
    61a0:	735a      	strb	r2, [r3, #13]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
    61a2:	e016      	b.n	61d2 <tc_enable_callback+0x96>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    61a4:	687b      	ldr	r3, [r7, #4]
    61a6:	7e5b      	ldrb	r3, [r3, #25]
    61a8:	b25a      	sxtb	r2, r3
    61aa:	1cfb      	adds	r3, r7, #3
    61ac:	781b      	ldrb	r3, [r3, #0]
    61ae:	2101      	movs	r1, #1
    61b0:	4099      	lsls	r1, r3
    61b2:	000b      	movs	r3, r1
    61b4:	b25b      	sxtb	r3, r3
    61b6:	4313      	orrs	r3, r2
    61b8:	b25b      	sxtb	r3, r3
    61ba:	b2da      	uxtb	r2, r3
    61bc:	687b      	ldr	r3, [r7, #4]
    61be:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    61c0:	687b      	ldr	r3, [r7, #4]
    61c2:	681b      	ldr	r3, [r3, #0]
    61c4:	1cfa      	adds	r2, r7, #3
    61c6:	7812      	ldrb	r2, [r2, #0]
    61c8:	2101      	movs	r1, #1
    61ca:	4091      	lsls	r1, r2
    61cc:	000a      	movs	r2, r1
    61ce:	b2d2      	uxtb	r2, r2
    61d0:	735a      	strb	r2, [r3, #13]
	}
}
    61d2:	46c0      	nop			; (mov r8, r8)
    61d4:	46bd      	mov	sp, r7
    61d6:	b002      	add	sp, #8
    61d8:	bd80      	pop	{r7, pc}
    61da:	46c0      	nop			; (mov r8, r8)
    61dc:	000038e1 	.word	0x000038e1
    61e0:	0000611d 	.word	0x0000611d
    61e4:	00005f95 	.word	0x00005f95

000061e8 <tc_disable_callback>:
 * \param[in]     module        Pointer to TC software instance struct
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_disable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type){
    61e8:	b580      	push	{r7, lr}
    61ea:	b082      	sub	sp, #8
    61ec:	af00      	add	r7, sp, #0
    61ee:	6078      	str	r0, [r7, #4]
    61f0:	000a      	movs	r2, r1
    61f2:	1cfb      	adds	r3, r7, #3
    61f4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    61f6:	1cfb      	adds	r3, r7, #3
    61f8:	781b      	ldrb	r3, [r3, #0]
    61fa:	2b02      	cmp	r3, #2
    61fc:	d10b      	bne.n	6216 <tc_disable_callback+0x2e>
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    61fe:	687b      	ldr	r3, [r7, #4]
    6200:	681b      	ldr	r3, [r3, #0]
    6202:	2210      	movs	r2, #16
    6204:	731a      	strb	r2, [r3, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    6206:	687b      	ldr	r3, [r7, #4]
    6208:	7e5b      	ldrb	r3, [r3, #25]
    620a:	2210      	movs	r2, #16
    620c:	4393      	bics	r3, r2
    620e:	b2da      	uxtb	r2, r3
    6210:	687b      	ldr	r3, [r7, #4]
    6212:	765a      	strb	r2, [r3, #25]
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
		module->enable_callback_mask &= ~(1 << callback_type);
	}
}
    6214:	e028      	b.n	6268 <tc_disable_callback+0x80>
	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    6216:	1cfb      	adds	r3, r7, #3
    6218:	781b      	ldrb	r3, [r3, #0]
    621a:	2b03      	cmp	r3, #3
    621c:	d10b      	bne.n	6236 <tc_disable_callback+0x4e>
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
    621e:	687b      	ldr	r3, [r7, #4]
    6220:	681b      	ldr	r3, [r3, #0]
    6222:	2220      	movs	r2, #32
    6224:	731a      	strb	r2, [r3, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
    6226:	687b      	ldr	r3, [r7, #4]
    6228:	7e5b      	ldrb	r3, [r3, #25]
    622a:	2220      	movs	r2, #32
    622c:	4393      	bics	r3, r2
    622e:	b2da      	uxtb	r2, r3
    6230:	687b      	ldr	r3, [r7, #4]
    6232:	765a      	strb	r2, [r3, #25]
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
		module->enable_callback_mask &= ~(1 << callback_type);
	}
}
    6234:	e018      	b.n	6268 <tc_disable_callback+0x80>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    6236:	687b      	ldr	r3, [r7, #4]
    6238:	681b      	ldr	r3, [r3, #0]
    623a:	1cfa      	adds	r2, r7, #3
    623c:	7812      	ldrb	r2, [r2, #0]
    623e:	2101      	movs	r1, #1
    6240:	4091      	lsls	r1, r2
    6242:	000a      	movs	r2, r1
    6244:	b2d2      	uxtb	r2, r2
    6246:	731a      	strb	r2, [r3, #12]
		module->enable_callback_mask &= ~(1 << callback_type);
    6248:	687b      	ldr	r3, [r7, #4]
    624a:	7e5b      	ldrb	r3, [r3, #25]
    624c:	b25b      	sxtb	r3, r3
    624e:	1cfa      	adds	r2, r7, #3
    6250:	7812      	ldrb	r2, [r2, #0]
    6252:	2101      	movs	r1, #1
    6254:	4091      	lsls	r1, r2
    6256:	000a      	movs	r2, r1
    6258:	b252      	sxtb	r2, r2
    625a:	43d2      	mvns	r2, r2
    625c:	b252      	sxtb	r2, r2
    625e:	4013      	ands	r3, r2
    6260:	b25b      	sxtb	r3, r3
    6262:	b2da      	uxtb	r2, r3
    6264:	687b      	ldr	r3, [r7, #4]
    6266:	765a      	strb	r2, [r3, #25]
	}
}
    6268:	46c0      	nop			; (mov r8, r8)
    626a:	46bd      	mov	sp, r7
    626c:	b002      	add	sp, #8
    626e:	bd80      	pop	{r7, pc}

00006270 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    6270:	b580      	push	{r7, lr}
    6272:	af00      	add	r7, sp, #0
	return ((uint16_t)tc_get_count_value(&module_inst));
    6274:	4b04      	ldr	r3, [pc, #16]	; (6288 <tmr_read_count+0x18>)
    6276:	0018      	movs	r0, r3
    6278:	4b04      	ldr	r3, [pc, #16]	; (628c <tmr_read_count+0x1c>)
    627a:	4798      	blx	r3
    627c:	0003      	movs	r3, r0
    627e:	b29b      	uxth	r3, r3
}
    6280:	0018      	movs	r0, r3
    6282:	46bd      	mov	sp, r7
    6284:	bd80      	pop	{r7, pc}
    6286:	46c0      	nop			; (mov r8, r8)
    6288:	20001004 	.word	0x20001004
    628c:	00003d85 	.word	0x00003d85

00006290 <tmr_disable_cc_interrupt>:

/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
    6290:	b580      	push	{r7, lr}
    6292:	af00      	add	r7, sp, #0
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
    6294:	4b03      	ldr	r3, [pc, #12]	; (62a4 <tmr_disable_cc_interrupt+0x14>)
    6296:	2102      	movs	r1, #2
    6298:	0018      	movs	r0, r3
    629a:	4b03      	ldr	r3, [pc, #12]	; (62a8 <tmr_disable_cc_interrupt+0x18>)
    629c:	4798      	blx	r3
}
    629e:	46c0      	nop			; (mov r8, r8)
    62a0:	46bd      	mov	sp, r7
    62a2:	bd80      	pop	{r7, pc}
    62a4:	20001004 	.word	0x20001004
    62a8:	000061e9 	.word	0x000061e9

000062ac <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    62ac:	b580      	push	{r7, lr}
    62ae:	af00      	add	r7, sp, #0
	tc_clear_status(&module_inst, TC_STATUS_CHANNEL_0_MATCH);
    62b0:	4b06      	ldr	r3, [pc, #24]	; (62cc <tmr_enable_cc_interrupt+0x20>)
    62b2:	2101      	movs	r1, #1
    62b4:	0018      	movs	r0, r3
    62b6:	4b06      	ldr	r3, [pc, #24]	; (62d0 <tmr_enable_cc_interrupt+0x24>)
    62b8:	4798      	blx	r3
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
    62ba:	4b04      	ldr	r3, [pc, #16]	; (62cc <tmr_enable_cc_interrupt+0x20>)
    62bc:	2102      	movs	r1, #2
    62be:	0018      	movs	r0, r3
    62c0:	4b04      	ldr	r3, [pc, #16]	; (62d4 <tmr_enable_cc_interrupt+0x28>)
    62c2:	4798      	blx	r3
}
    62c4:	46c0      	nop			; (mov r8, r8)
    62c6:	46bd      	mov	sp, r7
    62c8:	bd80      	pop	{r7, pc}
    62ca:	46c0      	nop			; (mov r8, r8)
    62cc:	20001004 	.word	0x20001004
    62d0:	000060a9 	.word	0x000060a9
    62d4:	0000613d 	.word	0x0000613d

000062d8 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    62d8:	b580      	push	{r7, lr}
    62da:	b082      	sub	sp, #8
    62dc:	af00      	add	r7, sp, #0
    62de:	0002      	movs	r2, r0
    62e0:	1dbb      	adds	r3, r7, #6
    62e2:	801a      	strh	r2, [r3, #0]
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    62e4:	1dbb      	adds	r3, r7, #6
    62e6:	881a      	ldrh	r2, [r3, #0]
    62e8:	4b04      	ldr	r3, [pc, #16]	; (62fc <tmr_write_cmpreg+0x24>)
    62ea:	2100      	movs	r1, #0
    62ec:	0018      	movs	r0, r3
    62ee:	4b04      	ldr	r3, [pc, #16]	; (6300 <tmr_write_cmpreg+0x28>)
    62f0:	4798      	blx	r3
			(uint32_t)compare_value);
}
    62f2:	46c0      	nop			; (mov r8, r8)
    62f4:	46bd      	mov	sp, r7
    62f6:	b002      	add	sp, #8
    62f8:	bd80      	pop	{r7, pc}
    62fa:	46c0      	nop			; (mov r8, r8)
    62fc:	20001004 	.word	0x20001004
    6300:	00003dd9 	.word	0x00003dd9

00006304 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    6304:	b580      	push	{r7, lr}
    6306:	b082      	sub	sp, #8
    6308:	af00      	add	r7, sp, #0
    630a:	6078      	str	r0, [r7, #4]
	tmr_ovf_callback();
    630c:	4b02      	ldr	r3, [pc, #8]	; (6318 <tc_ovf_callback+0x14>)
    630e:	4798      	blx	r3
}
    6310:	46c0      	nop			; (mov r8, r8)
    6312:	46bd      	mov	sp, r7
    6314:	b002      	add	sp, #8
    6316:	bd80      	pop	{r7, pc}
    6318:	0000c0f1 	.word	0x0000c0f1

0000631c <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    631c:	b580      	push	{r7, lr}
    631e:	b082      	sub	sp, #8
    6320:	af00      	add	r7, sp, #0
    6322:	6078      	str	r0, [r7, #4]
	tmr_cca_callback();
    6324:	4b02      	ldr	r3, [pc, #8]	; (6330 <tc_cca_callback+0x14>)
    6326:	4798      	blx	r3
}
    6328:	46c0      	nop			; (mov r8, r8)
    632a:	46bd      	mov	sp, r7
    632c:	b002      	add	sp, #8
    632e:	bd80      	pop	{r7, pc}
    6330:	0000c139 	.word	0x0000c139

00006334 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    6334:	b580      	push	{r7, lr}
    6336:	b082      	sub	sp, #8
    6338:	af00      	add	r7, sp, #0
	float timer_multiplier;
	tc_get_config_defaults(&timer_config);
    633a:	4b2b      	ldr	r3, [pc, #172]	; (63e8 <tmr_init+0xb4>)
    633c:	0018      	movs	r0, r3
    633e:	4b2b      	ldr	r3, [pc, #172]	; (63ec <tmr_init+0xb8>)
    6340:	4798      	blx	r3
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    6342:	4b29      	ldr	r3, [pc, #164]	; (63e8 <tmr_init+0xb4>)
    6344:	2201      	movs	r2, #1
    6346:	4252      	negs	r2, r2
    6348:	855a      	strh	r2, [r3, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    634a:	4a27      	ldr	r2, [pc, #156]	; (63e8 <tmr_init+0xb4>)
    634c:	4928      	ldr	r1, [pc, #160]	; (63f0 <tmr_init+0xbc>)
    634e:	4b29      	ldr	r3, [pc, #164]	; (63f4 <tmr_init+0xc0>)
    6350:	0018      	movs	r0, r3
    6352:	4b29      	ldr	r3, [pc, #164]	; (63f8 <tmr_init+0xc4>)
    6354:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    6356:	4929      	ldr	r1, [pc, #164]	; (63fc <tmr_init+0xc8>)
    6358:	4b26      	ldr	r3, [pc, #152]	; (63f4 <tmr_init+0xc0>)
    635a:	2200      	movs	r2, #0
    635c:	0018      	movs	r0, r3
    635e:	4b28      	ldr	r3, [pc, #160]	; (6400 <tmr_init+0xcc>)
    6360:	4798      	blx	r3
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    6362:	4928      	ldr	r1, [pc, #160]	; (6404 <tmr_init+0xd0>)
    6364:	4b23      	ldr	r3, [pc, #140]	; (63f4 <tmr_init+0xc0>)
    6366:	2202      	movs	r2, #2
    6368:	0018      	movs	r0, r3
    636a:	4b25      	ldr	r3, [pc, #148]	; (6400 <tmr_init+0xcc>)
    636c:	4798      	blx	r3
			TC_CALLBACK_CC_CHANNEL0);
	tc_enable_callback(&module_inst, TC_CALLBACK_OVERFLOW);
    636e:	4b21      	ldr	r3, [pc, #132]	; (63f4 <tmr_init+0xc0>)
    6370:	2100      	movs	r1, #0
    6372:	0018      	movs	r0, r3
    6374:	4b24      	ldr	r3, [pc, #144]	; (6408 <tmr_init+0xd4>)
    6376:	4798      	blx	r3
	/*tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);*/

	tc_enable(&module_inst);
    6378:	4b1e      	ldr	r3, [pc, #120]	; (63f4 <tmr_init+0xc0>)
    637a:	0018      	movs	r0, r3
    637c:	4b23      	ldr	r3, [pc, #140]	; (640c <tmr_init+0xd8>)
    637e:	4798      	blx	r3
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    6380:	2000      	movs	r0, #0
    6382:	4b23      	ldr	r3, [pc, #140]	; (6410 <tmr_init+0xdc>)
    6384:	4798      	blx	r3
    6386:	0002      	movs	r2, r0
    6388:	4b22      	ldr	r3, [pc, #136]	; (6414 <tmr_init+0xe0>)
    638a:	0010      	movs	r0, r2
    638c:	4798      	blx	r3
    638e:	1c02      	adds	r2, r0, #0
    6390:	4b21      	ldr	r3, [pc, #132]	; (6418 <tmr_init+0xe4>)
    6392:	4922      	ldr	r1, [pc, #136]	; (641c <tmr_init+0xe8>)
    6394:	1c10      	adds	r0, r2, #0
    6396:	4798      	blx	r3
    6398:	1c03      	adds	r3, r0, #0
    639a:	607b      	str	r3, [r7, #4]
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    639c:	4b20      	ldr	r3, [pc, #128]	; (6420 <tmr_init+0xec>)
    639e:	6878      	ldr	r0, [r7, #4]
    63a0:	4798      	blx	r3
    63a2:	0002      	movs	r2, r0
    63a4:	4b1b      	ldr	r3, [pc, #108]	; (6414 <tmr_init+0xe0>)
    63a6:	0010      	movs	r0, r2
    63a8:	4798      	blx	r3
    63aa:	1c02      	adds	r2, r0, #0
    63ac:	4b1d      	ldr	r3, [pc, #116]	; (6424 <tmr_init+0xf0>)
    63ae:	1c11      	adds	r1, r2, #0
    63b0:	6878      	ldr	r0, [r7, #4]
    63b2:	4798      	blx	r3
    63b4:	1c03      	adds	r3, r0, #0
    63b6:	1c1a      	adds	r2, r3, #0
    63b8:	4b1b      	ldr	r3, [pc, #108]	; (6428 <tmr_init+0xf4>)
    63ba:	21fc      	movs	r1, #252	; 0xfc
    63bc:	0589      	lsls	r1, r1, #22
    63be:	1c10      	adds	r0, r2, #0
    63c0:	4798      	blx	r3
    63c2:	1e03      	subs	r3, r0, #0
    63c4:	d006      	beq.n	63d4 <tmr_init+0xa0>
	{
		timer_multiplier += 1.0f;
    63c6:	4b19      	ldr	r3, [pc, #100]	; (642c <tmr_init+0xf8>)
    63c8:	21fe      	movs	r1, #254	; 0xfe
    63ca:	0589      	lsls	r1, r1, #22
    63cc:	6878      	ldr	r0, [r7, #4]
    63ce:	4798      	blx	r3
    63d0:	1c03      	adds	r3, r0, #0
    63d2:	607b      	str	r3, [r7, #4]
	}
	
	return (uint8_t) timer_multiplier;
    63d4:	4b12      	ldr	r3, [pc, #72]	; (6420 <tmr_init+0xec>)
    63d6:	6878      	ldr	r0, [r7, #4]
    63d8:	4798      	blx	r3
    63da:	0003      	movs	r3, r0
    63dc:	b2db      	uxtb	r3, r3
}
    63de:	0018      	movs	r0, r3
    63e0:	46bd      	mov	sp, r7
    63e2:	b002      	add	sp, #8
    63e4:	bd80      	pop	{r7, pc}
    63e6:	46c0      	nop			; (mov r8, r8)
    63e8:	20000fd0 	.word	0x20000fd0
    63ec:	00005fe9 	.word	0x00005fe9
    63f0:	42002c00 	.word	0x42002c00
    63f4:	20001004 	.word	0x20001004
    63f8:	00003929 	.word	0x00003929
    63fc:	00006305 	.word	0x00006305
    6400:	00009c35 	.word	0x00009c35
    6404:	0000631d 	.word	0x0000631d
    6408:	0000613d 	.word	0x0000613d
    640c:	00006071 	.word	0x00006071
    6410:	0000ba59 	.word	0x0000ba59
    6414:	0000cfe9 	.word	0x0000cfe9
    6418:	0000c6dd 	.word	0x0000c6dd
    641c:	49742400 	.word	0x49742400
    6420:	0000c3c1 	.word	0x0000c3c1
    6424:	0000cc99 	.word	0x0000cc99
    6428:	0000c2d9 	.word	0x0000c2d9
    642c:	0000c3f1 	.word	0x0000c3f1

00006430 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    6430:	b580      	push	{r7, lr}
    6432:	af00      	add	r7, sp, #0
	SYS_TimerInit();
    6434:	4b05      	ldr	r3, [pc, #20]	; (644c <SYS_Init+0x1c>)
    6436:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    6438:	4b05      	ldr	r3, [pc, #20]	; (6450 <SYS_Init+0x20>)
    643a:	4798      	blx	r3
#endif
	PHY_Init();
    643c:	4b05      	ldr	r3, [pc, #20]	; (6454 <SYS_Init+0x24>)
    643e:	4798      	blx	r3
	NWK_Init();
    6440:	4b05      	ldr	r3, [pc, #20]	; (6458 <SYS_Init+0x28>)
    6442:	4798      	blx	r3
}
    6444:	46c0      	nop			; (mov r8, r8)
    6446:	46bd      	mov	sp, r7
    6448:	bd80      	pop	{r7, pc}
    644a:	46c0      	nop			; (mov r8, r8)
    644c:	00006525 	.word	0x00006525
    6450:	00004ae5 	.word	0x00004ae5
    6454:	000068b9 	.word	0x000068b9
    6458:	00006dfd 	.word	0x00006dfd

0000645c <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    645c:	b580      	push	{r7, lr}
    645e:	af00      	add	r7, sp, #0
	PHY_TaskHandler();
    6460:	4b04      	ldr	r3, [pc, #16]	; (6474 <SYS_TaskHandler+0x18>)
    6462:	4798      	blx	r3
	NWK_TaskHandler();
    6464:	4b04      	ldr	r3, [pc, #16]	; (6478 <SYS_TaskHandler+0x1c>)
    6466:	4798      	blx	r3
	SYS_TimerTaskHandler();
    6468:	4b04      	ldr	r3, [pc, #16]	; (647c <SYS_TaskHandler+0x20>)
    646a:	4798      	blx	r3
}
    646c:	46c0      	nop			; (mov r8, r8)
    646e:	46bd      	mov	sp, r7
    6470:	bd80      	pop	{r7, pc}
    6472:	46c0      	nop			; (mov r8, r8)
    6474:	00006cc5 	.word	0x00006cc5
    6478:	00006f95 	.word	0x00006f95
    647c:	0000664d 	.word	0x0000664d

00006480 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    6480:	b580      	push	{r7, lr}
    6482:	b082      	sub	sp, #8
    6484:	af00      	add	r7, sp, #0
    6486:	6078      	str	r0, [r7, #4]
    6488:	6039      	str	r1, [r7, #0]
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    648a:	683a      	ldr	r2, [r7, #0]
    648c:	687b      	ldr	r3, [r7, #4]
    648e:	0011      	movs	r1, r2
    6490:	0018      	movs	r0, r3
    6492:	4b04      	ldr	r3, [pc, #16]	; (64a4 <SYS_EncryptReq+0x24>)
    6494:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    6496:	4b04      	ldr	r3, [pc, #16]	; (64a8 <SYS_EncryptReq+0x28>)
    6498:	4798      	blx	r3
}
    649a:	46c0      	nop			; (mov r8, r8)
    649c:	46bd      	mov	sp, r7
    649e:	b002      	add	sp, #8
    64a0:	bd80      	pop	{r7, pc}
    64a2:	46c0      	nop			; (mov r8, r8)
    64a4:	00006b71 	.word	0x00006b71
    64a8:	00009161 	.word	0x00009161

000064ac <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    64ac:	b580      	push	{r7, lr}
    64ae:	b082      	sub	sp, #8
    64b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    64b2:	f3ef 8310 	mrs	r3, PRIMASK
    64b6:	607b      	str	r3, [r7, #4]
  return(result);
    64b8:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    64ba:	425a      	negs	r2, r3
    64bc:	4153      	adcs	r3, r2
    64be:	b2db      	uxtb	r3, r3
    64c0:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    64c2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    64c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    64c8:	4b03      	ldr	r3, [pc, #12]	; (64d8 <cpu_irq_save+0x2c>)
    64ca:	2200      	movs	r2, #0
    64cc:	701a      	strb	r2, [r3, #0]
	return flags;
    64ce:	683b      	ldr	r3, [r7, #0]
}
    64d0:	0018      	movs	r0, r3
    64d2:	46bd      	mov	sp, r7
    64d4:	b002      	add	sp, #8
    64d6:	bd80      	pop	{r7, pc}
    64d8:	20000024 	.word	0x20000024

000064dc <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    64dc:	b580      	push	{r7, lr}
    64de:	b082      	sub	sp, #8
    64e0:	af00      	add	r7, sp, #0
    64e2:	6078      	str	r0, [r7, #4]
	return (flags);
    64e4:	687b      	ldr	r3, [r7, #4]
    64e6:	1e5a      	subs	r2, r3, #1
    64e8:	4193      	sbcs	r3, r2
    64ea:	b2db      	uxtb	r3, r3
}
    64ec:	0018      	movs	r0, r3
    64ee:	46bd      	mov	sp, r7
    64f0:	b002      	add	sp, #8
    64f2:	bd80      	pop	{r7, pc}

000064f4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    64f4:	b580      	push	{r7, lr}
    64f6:	b082      	sub	sp, #8
    64f8:	af00      	add	r7, sp, #0
    64fa:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    64fc:	687b      	ldr	r3, [r7, #4]
    64fe:	0018      	movs	r0, r3
    6500:	4b06      	ldr	r3, [pc, #24]	; (651c <cpu_irq_restore+0x28>)
    6502:	4798      	blx	r3
    6504:	1e03      	subs	r3, r0, #0
    6506:	d005      	beq.n	6514 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    6508:	4b05      	ldr	r3, [pc, #20]	; (6520 <cpu_irq_restore+0x2c>)
    650a:	2201      	movs	r2, #1
    650c:	701a      	strb	r2, [r3, #0]
    650e:	f3bf 8f5f 	dmb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    6512:	b662      	cpsie	i
}
    6514:	46c0      	nop			; (mov r8, r8)
    6516:	46bd      	mov	sp, r7
    6518:	b002      	add	sp, #8
    651a:	bd80      	pop	{r7, pc}
    651c:	000064dd 	.word	0x000064dd
    6520:	20000024 	.word	0x20000024

00006524 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    6524:	b580      	push	{r7, lr}
    6526:	af00      	add	r7, sp, #0
	SysTimerIrqCount = 0;
    6528:	4b09      	ldr	r3, [pc, #36]	; (6550 <SYS_TimerInit+0x2c>)
    652a:	2200      	movs	r2, #0
    652c:	701a      	strb	r2, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    652e:	4b09      	ldr	r3, [pc, #36]	; (6554 <SYS_TimerInit+0x30>)
    6530:	0018      	movs	r0, r3
    6532:	4b09      	ldr	r3, [pc, #36]	; (6558 <SYS_TimerInit+0x34>)
    6534:	4798      	blx	r3
	common_tc_init();
    6536:	4b09      	ldr	r3, [pc, #36]	; (655c <SYS_TimerInit+0x38>)
    6538:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    653a:	4b09      	ldr	r3, [pc, #36]	; (6560 <SYS_TimerInit+0x3c>)
    653c:	0018      	movs	r0, r3
    653e:	4b09      	ldr	r3, [pc, #36]	; (6564 <SYS_TimerInit+0x40>)
    6540:	4798      	blx	r3
	timers = NULL;
    6542:	4b09      	ldr	r3, [pc, #36]	; (6568 <SYS_TimerInit+0x44>)
    6544:	2200      	movs	r2, #0
    6546:	601a      	str	r2, [r3, #0]
}
    6548:	46c0      	nop			; (mov r8, r8)
    654a:	46bd      	mov	sp, r7
    654c:	bd80      	pop	{r7, pc}
    654e:	46c0      	nop			; (mov r8, r8)
    6550:	20001020 	.word	0x20001020
    6554:	000067b5 	.word	0x000067b5
    6558:	0000c155 	.word	0x0000c155
    655c:	0000c0d1 	.word	0x0000c0d1
    6560:	00002710 	.word	0x00002710
    6564:	0000c065 	.word	0x0000c065
    6568:	20000230 	.word	0x20000230

0000656c <SYS_TimerStart>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    656c:	b580      	push	{r7, lr}
    656e:	b082      	sub	sp, #8
    6570:	af00      	add	r7, sp, #0
    6572:	6078      	str	r0, [r7, #4]
	if (!SYS_TimerStarted(timer)) {
    6574:	687b      	ldr	r3, [r7, #4]
    6576:	0018      	movs	r0, r3
    6578:	4b08      	ldr	r3, [pc, #32]	; (659c <SYS_TimerStart+0x30>)
    657a:	4798      	blx	r3
    657c:	0003      	movs	r3, r0
    657e:	001a      	movs	r2, r3
    6580:	2301      	movs	r3, #1
    6582:	4053      	eors	r3, r2
    6584:	b2db      	uxtb	r3, r3
    6586:	2b00      	cmp	r3, #0
    6588:	d003      	beq.n	6592 <SYS_TimerStart+0x26>
		placeTimer(timer);
    658a:	687b      	ldr	r3, [r7, #4]
    658c:	0018      	movs	r0, r3
    658e:	4b04      	ldr	r3, [pc, #16]	; (65a0 <SYS_TimerStart+0x34>)
    6590:	4798      	blx	r3
	}
}
    6592:	46c0      	nop			; (mov r8, r8)
    6594:	46bd      	mov	sp, r7
    6596:	b002      	add	sp, #8
    6598:	bd80      	pop	{r7, pc}
    659a:	46c0      	nop			; (mov r8, r8)
    659c:	00006615 	.word	0x00006615
    65a0:	00006715 	.word	0x00006715

000065a4 <SYS_TimerStop>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    65a4:	b580      	push	{r7, lr}
    65a6:	b084      	sub	sp, #16
    65a8:	af00      	add	r7, sp, #0
    65aa:	6078      	str	r0, [r7, #4]
	SYS_Timer_t *prev = NULL;
    65ac:	2300      	movs	r3, #0
    65ae:	60fb      	str	r3, [r7, #12]

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    65b0:	4b17      	ldr	r3, [pc, #92]	; (6610 <SYS_TimerStop+0x6c>)
    65b2:	681b      	ldr	r3, [r3, #0]
    65b4:	60bb      	str	r3, [r7, #8]
    65b6:	e022      	b.n	65fe <SYS_TimerStop+0x5a>
		if (t == timer) {
    65b8:	68ba      	ldr	r2, [r7, #8]
    65ba:	687b      	ldr	r3, [r7, #4]
    65bc:	429a      	cmp	r2, r3
    65be:	d119      	bne.n	65f4 <SYS_TimerStop+0x50>
			if (prev) {
    65c0:	68fb      	ldr	r3, [r7, #12]
    65c2:	2b00      	cmp	r3, #0
    65c4:	d004      	beq.n	65d0 <SYS_TimerStop+0x2c>
				prev->next = t->next;
    65c6:	68bb      	ldr	r3, [r7, #8]
    65c8:	681a      	ldr	r2, [r3, #0]
    65ca:	68fb      	ldr	r3, [r7, #12]
    65cc:	601a      	str	r2, [r3, #0]
    65ce:	e003      	b.n	65d8 <SYS_TimerStop+0x34>
			} else {
				timers = t->next;
    65d0:	68bb      	ldr	r3, [r7, #8]
    65d2:	681a      	ldr	r2, [r3, #0]
    65d4:	4b0e      	ldr	r3, [pc, #56]	; (6610 <SYS_TimerStop+0x6c>)
    65d6:	601a      	str	r2, [r3, #0]
			}

			if (t->next) {
    65d8:	68bb      	ldr	r3, [r7, #8]
    65da:	681b      	ldr	r3, [r3, #0]
    65dc:	2b00      	cmp	r3, #0
    65de:	d012      	beq.n	6606 <SYS_TimerStop+0x62>
				t->next->timeout += timer->timeout;
    65e0:	68bb      	ldr	r3, [r7, #8]
    65e2:	681b      	ldr	r3, [r3, #0]
    65e4:	68ba      	ldr	r2, [r7, #8]
    65e6:	6812      	ldr	r2, [r2, #0]
    65e8:	6851      	ldr	r1, [r2, #4]
    65ea:	687a      	ldr	r2, [r7, #4]
    65ec:	6852      	ldr	r2, [r2, #4]
    65ee:	188a      	adds	r2, r1, r2
    65f0:	605a      	str	r2, [r3, #4]
			}

			break;
    65f2:	e008      	b.n	6606 <SYS_TimerStop+0x62>
		}

		prev = t;
    65f4:	68bb      	ldr	r3, [r7, #8]
    65f6:	60fb      	str	r3, [r7, #12]
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    65f8:	68bb      	ldr	r3, [r7, #8]
    65fa:	681b      	ldr	r3, [r3, #0]
    65fc:	60bb      	str	r3, [r7, #8]
    65fe:	68bb      	ldr	r3, [r7, #8]
    6600:	2b00      	cmp	r3, #0
    6602:	d1d9      	bne.n	65b8 <SYS_TimerStop+0x14>
			break;
		}

		prev = t;
	}
}
    6604:	e000      	b.n	6608 <SYS_TimerStop+0x64>

			if (t->next) {
				t->next->timeout += timer->timeout;
			}

			break;
    6606:	46c0      	nop			; (mov r8, r8)
		}

		prev = t;
	}
}
    6608:	46c0      	nop			; (mov r8, r8)
    660a:	46bd      	mov	sp, r7
    660c:	b004      	add	sp, #16
    660e:	bd80      	pop	{r7, pc}
    6610:	20000230 	.word	0x20000230

00006614 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
    6614:	b580      	push	{r7, lr}
    6616:	b084      	sub	sp, #16
    6618:	af00      	add	r7, sp, #0
    661a:	6078      	str	r0, [r7, #4]
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    661c:	4b0a      	ldr	r3, [pc, #40]	; (6648 <SYS_TimerStarted+0x34>)
    661e:	681b      	ldr	r3, [r3, #0]
    6620:	60fb      	str	r3, [r7, #12]
    6622:	e008      	b.n	6636 <SYS_TimerStarted+0x22>
		if (t == timer) {
    6624:	68fa      	ldr	r2, [r7, #12]
    6626:	687b      	ldr	r3, [r7, #4]
    6628:	429a      	cmp	r2, r3
    662a:	d101      	bne.n	6630 <SYS_TimerStarted+0x1c>
			return true;
    662c:	2301      	movs	r3, #1
    662e:	e006      	b.n	663e <SYS_TimerStarted+0x2a>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    6630:	68fb      	ldr	r3, [r7, #12]
    6632:	681b      	ldr	r3, [r3, #0]
    6634:	60fb      	str	r3, [r7, #12]
    6636:	68fb      	ldr	r3, [r7, #12]
    6638:	2b00      	cmp	r3, #0
    663a:	d1f3      	bne.n	6624 <SYS_TimerStarted+0x10>
		if (t == timer) {
			return true;
		}
	}
	return false;
    663c:	2300      	movs	r3, #0
}
    663e:	0018      	movs	r0, r3
    6640:	46bd      	mov	sp, r7
    6642:	b004      	add	sp, #16
    6644:	bd80      	pop	{r7, pc}
    6646:	46c0      	nop			; (mov r8, r8)
    6648:	20000230 	.word	0x20000230

0000664c <SYS_TimerTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    664c:	b580      	push	{r7, lr}
    664e:	b084      	sub	sp, #16
    6650:	af00      	add	r7, sp, #0
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    6652:	4b2b      	ldr	r3, [pc, #172]	; (6700 <SYS_TimerTaskHandler+0xb4>)
    6654:	781b      	ldrb	r3, [r3, #0]
    6656:	b2db      	uxtb	r3, r3
    6658:	2b00      	cmp	r3, #0
    665a:	d04c      	beq.n	66f6 <SYS_TimerTaskHandler+0xaa>
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
    665c:	4b29      	ldr	r3, [pc, #164]	; (6704 <SYS_TimerTaskHandler+0xb8>)
    665e:	4798      	blx	r3
    6660:	0003      	movs	r3, r0
    6662:	60bb      	str	r3, [r7, #8]
	cnt = SysTimerIrqCount;
    6664:	1dfb      	adds	r3, r7, #7
    6666:	4a26      	ldr	r2, [pc, #152]	; (6700 <SYS_TimerTaskHandler+0xb4>)
    6668:	7812      	ldrb	r2, [r2, #0]
    666a:	701a      	strb	r2, [r3, #0]
	SysTimerIrqCount = 0;
    666c:	4b24      	ldr	r3, [pc, #144]	; (6700 <SYS_TimerTaskHandler+0xb4>)
    666e:	2200      	movs	r2, #0
    6670:	701a      	strb	r2, [r3, #0]
	/* Leave the critical section */
	cpu_irq_restore(flags);
    6672:	68bb      	ldr	r3, [r7, #8]
    6674:	0018      	movs	r0, r3
    6676:	4b24      	ldr	r3, [pc, #144]	; (6708 <SYS_TimerTaskHandler+0xbc>)
    6678:	4798      	blx	r3

	elapsed = cnt * SYS_TIMER_INTERVAL;
    667a:	1dfb      	adds	r3, r7, #7
    667c:	781a      	ldrb	r2, [r3, #0]
    667e:	0013      	movs	r3, r2
    6680:	009b      	lsls	r3, r3, #2
    6682:	189b      	adds	r3, r3, r2
    6684:	005b      	lsls	r3, r3, #1
    6686:	60fb      	str	r3, [r7, #12]

	while (timers && (timers->timeout <= elapsed)) {
    6688:	e01e      	b.n	66c8 <SYS_TimerTaskHandler+0x7c>
		SYS_Timer_t *timer = timers;
    668a:	4b20      	ldr	r3, [pc, #128]	; (670c <SYS_TimerTaskHandler+0xc0>)
    668c:	681b      	ldr	r3, [r3, #0]
    668e:	603b      	str	r3, [r7, #0]

		elapsed -= timers->timeout;
    6690:	4b1e      	ldr	r3, [pc, #120]	; (670c <SYS_TimerTaskHandler+0xc0>)
    6692:	681b      	ldr	r3, [r3, #0]
    6694:	685b      	ldr	r3, [r3, #4]
    6696:	68fa      	ldr	r2, [r7, #12]
    6698:	1ad3      	subs	r3, r2, r3
    669a:	60fb      	str	r3, [r7, #12]
		timers = timers->next;
    669c:	4b1b      	ldr	r3, [pc, #108]	; (670c <SYS_TimerTaskHandler+0xc0>)
    669e:	681b      	ldr	r3, [r3, #0]
    66a0:	681a      	ldr	r2, [r3, #0]
    66a2:	4b1a      	ldr	r3, [pc, #104]	; (670c <SYS_TimerTaskHandler+0xc0>)
    66a4:	601a      	str	r2, [r3, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    66a6:	683b      	ldr	r3, [r7, #0]
    66a8:	7b1b      	ldrb	r3, [r3, #12]
    66aa:	2b01      	cmp	r3, #1
    66ac:	d103      	bne.n	66b6 <SYS_TimerTaskHandler+0x6a>
			placeTimer(timer);
    66ae:	683b      	ldr	r3, [r7, #0]
    66b0:	0018      	movs	r0, r3
    66b2:	4b17      	ldr	r3, [pc, #92]	; (6710 <SYS_TimerTaskHandler+0xc4>)
    66b4:	4798      	blx	r3
		}

		if (timer->handler) {
    66b6:	683b      	ldr	r3, [r7, #0]
    66b8:	691b      	ldr	r3, [r3, #16]
    66ba:	2b00      	cmp	r3, #0
    66bc:	d004      	beq.n	66c8 <SYS_TimerTaskHandler+0x7c>
			timer->handler(timer);
    66be:	683b      	ldr	r3, [r7, #0]
    66c0:	691b      	ldr	r3, [r3, #16]
    66c2:	683a      	ldr	r2, [r7, #0]
    66c4:	0010      	movs	r0, r2
    66c6:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    66c8:	4b10      	ldr	r3, [pc, #64]	; (670c <SYS_TimerTaskHandler+0xc0>)
    66ca:	681b      	ldr	r3, [r3, #0]
    66cc:	2b00      	cmp	r3, #0
    66ce:	d005      	beq.n	66dc <SYS_TimerTaskHandler+0x90>
    66d0:	4b0e      	ldr	r3, [pc, #56]	; (670c <SYS_TimerTaskHandler+0xc0>)
    66d2:	681b      	ldr	r3, [r3, #0]
    66d4:	685a      	ldr	r2, [r3, #4]
    66d6:	68fb      	ldr	r3, [r7, #12]
    66d8:	429a      	cmp	r2, r3
    66da:	d9d6      	bls.n	668a <SYS_TimerTaskHandler+0x3e>
		if (timer->handler) {
			timer->handler(timer);
		}
	}

	if (timers) {
    66dc:	4b0b      	ldr	r3, [pc, #44]	; (670c <SYS_TimerTaskHandler+0xc0>)
    66de:	681b      	ldr	r3, [r3, #0]
    66e0:	2b00      	cmp	r3, #0
    66e2:	d009      	beq.n	66f8 <SYS_TimerTaskHandler+0xac>
		timers->timeout -= elapsed;
    66e4:	4b09      	ldr	r3, [pc, #36]	; (670c <SYS_TimerTaskHandler+0xc0>)
    66e6:	681b      	ldr	r3, [r3, #0]
    66e8:	4a08      	ldr	r2, [pc, #32]	; (670c <SYS_TimerTaskHandler+0xc0>)
    66ea:	6812      	ldr	r2, [r2, #0]
    66ec:	6851      	ldr	r1, [r2, #4]
    66ee:	68fa      	ldr	r2, [r7, #12]
    66f0:	1a8a      	subs	r2, r1, r2
    66f2:	605a      	str	r2, [r3, #4]
    66f4:	e000      	b.n	66f8 <SYS_TimerTaskHandler+0xac>
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
		return;
    66f6:	46c0      	nop			; (mov r8, r8)
	}

	if (timers) {
		timers->timeout -= elapsed;
	}
}
    66f8:	46bd      	mov	sp, r7
    66fa:	b004      	add	sp, #16
    66fc:	bd80      	pop	{r7, pc}
    66fe:	46c0      	nop			; (mov r8, r8)
    6700:	20001020 	.word	0x20001020
    6704:	000064ad 	.word	0x000064ad
    6708:	000064f5 	.word	0x000064f5
    670c:	20000230 	.word	0x20000230
    6710:	00006715 	.word	0x00006715

00006714 <placeTimer>:

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    6714:	b580      	push	{r7, lr}
    6716:	b086      	sub	sp, #24
    6718:	af00      	add	r7, sp, #0
    671a:	6078      	str	r0, [r7, #4]
	if (timers) {
    671c:	4b24      	ldr	r3, [pc, #144]	; (67b0 <placeTimer+0x9c>)
    671e:	681b      	ldr	r3, [r3, #0]
    6720:	2b00      	cmp	r3, #0
    6722:	d037      	beq.n	6794 <placeTimer+0x80>
		SYS_Timer_t *prev = NULL;
    6724:	2300      	movs	r3, #0
    6726:	617b      	str	r3, [r7, #20]
		uint32_t timeout = timer->interval;
    6728:	687b      	ldr	r3, [r7, #4]
    672a:	689b      	ldr	r3, [r3, #8]
    672c:	613b      	str	r3, [r7, #16]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    672e:	4b20      	ldr	r3, [pc, #128]	; (67b0 <placeTimer+0x9c>)
    6730:	681b      	ldr	r3, [r3, #0]
    6732:	60fb      	str	r3, [r7, #12]
    6734:	e015      	b.n	6762 <placeTimer+0x4e>
			if (timeout < t->timeout) {
    6736:	68fb      	ldr	r3, [r7, #12]
    6738:	685a      	ldr	r2, [r3, #4]
    673a:	693b      	ldr	r3, [r7, #16]
    673c:	429a      	cmp	r2, r3
    673e:	d906      	bls.n	674e <placeTimer+0x3a>
				t->timeout -= timeout;
    6740:	68fb      	ldr	r3, [r7, #12]
    6742:	685a      	ldr	r2, [r3, #4]
    6744:	693b      	ldr	r3, [r7, #16]
    6746:	1ad2      	subs	r2, r2, r3
    6748:	68fb      	ldr	r3, [r7, #12]
    674a:	605a      	str	r2, [r3, #4]
				break;
    674c:	e00c      	b.n	6768 <placeTimer+0x54>
			} else {
				timeout -= t->timeout;
    674e:	68fb      	ldr	r3, [r7, #12]
    6750:	685b      	ldr	r3, [r3, #4]
    6752:	693a      	ldr	r2, [r7, #16]
    6754:	1ad3      	subs	r3, r2, r3
    6756:	613b      	str	r3, [r7, #16]
			}

			prev = t;
    6758:	68fb      	ldr	r3, [r7, #12]
    675a:	617b      	str	r3, [r7, #20]
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    675c:	68fb      	ldr	r3, [r7, #12]
    675e:	681b      	ldr	r3, [r3, #0]
    6760:	60fb      	str	r3, [r7, #12]
    6762:	68fb      	ldr	r3, [r7, #12]
    6764:	2b00      	cmp	r3, #0
    6766:	d1e6      	bne.n	6736 <placeTimer+0x22>
			}

			prev = t;
		}

		timer->timeout = timeout;
    6768:	687b      	ldr	r3, [r7, #4]
    676a:	693a      	ldr	r2, [r7, #16]
    676c:	605a      	str	r2, [r3, #4]

		if (prev) {
    676e:	697b      	ldr	r3, [r7, #20]
    6770:	2b00      	cmp	r3, #0
    6772:	d007      	beq.n	6784 <placeTimer+0x70>
			timer->next = prev->next;
    6774:	697b      	ldr	r3, [r7, #20]
    6776:	681a      	ldr	r2, [r3, #0]
    6778:	687b      	ldr	r3, [r7, #4]
    677a:	601a      	str	r2, [r3, #0]
			prev->next = timer;
    677c:	697b      	ldr	r3, [r7, #20]
    677e:	687a      	ldr	r2, [r7, #4]
    6780:	601a      	str	r2, [r3, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    6782:	e011      	b.n	67a8 <placeTimer+0x94>

		if (prev) {
			timer->next = prev->next;
			prev->next = timer;
		} else {
			timer->next = timers;
    6784:	4b0a      	ldr	r3, [pc, #40]	; (67b0 <placeTimer+0x9c>)
    6786:	681a      	ldr	r2, [r3, #0]
    6788:	687b      	ldr	r3, [r7, #4]
    678a:	601a      	str	r2, [r3, #0]
			timers = timer;
    678c:	4b08      	ldr	r3, [pc, #32]	; (67b0 <placeTimer+0x9c>)
    678e:	687a      	ldr	r2, [r7, #4]
    6790:	601a      	str	r2, [r3, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    6792:	e009      	b.n	67a8 <placeTimer+0x94>
		} else {
			timer->next = timers;
			timers = timer;
		}
	} else {
		timer->next = NULL;
    6794:	687b      	ldr	r3, [r7, #4]
    6796:	2200      	movs	r2, #0
    6798:	601a      	str	r2, [r3, #0]
		timer->timeout = timer->interval;
    679a:	687b      	ldr	r3, [r7, #4]
    679c:	689a      	ldr	r2, [r3, #8]
    679e:	687b      	ldr	r3, [r7, #4]
    67a0:	605a      	str	r2, [r3, #4]
		timers = timer;
    67a2:	4b03      	ldr	r3, [pc, #12]	; (67b0 <placeTimer+0x9c>)
    67a4:	687a      	ldr	r2, [r7, #4]
    67a6:	601a      	str	r2, [r3, #0]
	}
}
    67a8:	46c0      	nop			; (mov r8, r8)
    67aa:	46bd      	mov	sp, r7
    67ac:	b006      	add	sp, #24
    67ae:	bd80      	pop	{r7, pc}
    67b0:	20000230 	.word	0x20000230

000067b4 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    67b4:	b580      	push	{r7, lr}
    67b6:	af00      	add	r7, sp, #0
	SysTimerIrqCount++;
    67b8:	4b06      	ldr	r3, [pc, #24]	; (67d4 <SYS_HwExpiry_Cb+0x20>)
    67ba:	781b      	ldrb	r3, [r3, #0]
    67bc:	b2db      	uxtb	r3, r3
    67be:	3301      	adds	r3, #1
    67c0:	b2da      	uxtb	r2, r3
    67c2:	4b04      	ldr	r3, [pc, #16]	; (67d4 <SYS_HwExpiry_Cb+0x20>)
    67c4:	701a      	strb	r2, [r3, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    67c6:	4b04      	ldr	r3, [pc, #16]	; (67d8 <SYS_HwExpiry_Cb+0x24>)
    67c8:	0018      	movs	r0, r3
    67ca:	4b04      	ldr	r3, [pc, #16]	; (67dc <SYS_HwExpiry_Cb+0x28>)
    67cc:	4798      	blx	r3
}
    67ce:	46c0      	nop			; (mov r8, r8)
    67d0:	46bd      	mov	sp, r7
    67d2:	bd80      	pop	{r7, pc}
    67d4:	20001020 	.word	0x20001020
    67d8:	00002710 	.word	0x00002710
    67dc:	0000c065 	.word	0x0000c065

000067e0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    67e0:	b580      	push	{r7, lr}
    67e2:	b084      	sub	sp, #16
    67e4:	af00      	add	r7, sp, #0
    67e6:	0002      	movs	r2, r0
    67e8:	1dfb      	adds	r3, r7, #7
    67ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    67ec:	230f      	movs	r3, #15
    67ee:	18fb      	adds	r3, r7, r3
    67f0:	1dfa      	adds	r2, r7, #7
    67f2:	7812      	ldrb	r2, [r2, #0]
    67f4:	09d2      	lsrs	r2, r2, #7
    67f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    67f8:	230e      	movs	r3, #14
    67fa:	18fb      	adds	r3, r7, r3
    67fc:	1dfa      	adds	r2, r7, #7
    67fe:	7812      	ldrb	r2, [r2, #0]
    6800:	0952      	lsrs	r2, r2, #5
    6802:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6804:	4b0d      	ldr	r3, [pc, #52]	; (683c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6806:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    6808:	230f      	movs	r3, #15
    680a:	18fb      	adds	r3, r7, r3
    680c:	781b      	ldrb	r3, [r3, #0]
    680e:	2b00      	cmp	r3, #0
    6810:	d10f      	bne.n	6832 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6812:	230f      	movs	r3, #15
    6814:	18fb      	adds	r3, r7, r3
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	009b      	lsls	r3, r3, #2
    681a:	2210      	movs	r2, #16
    681c:	4694      	mov	ip, r2
    681e:	44bc      	add	ip, r7
    6820:	4463      	add	r3, ip
    6822:	3b08      	subs	r3, #8
    6824:	681a      	ldr	r2, [r3, #0]
    6826:	230e      	movs	r3, #14
    6828:	18fb      	adds	r3, r7, r3
    682a:	781b      	ldrb	r3, [r3, #0]
    682c:	01db      	lsls	r3, r3, #7
    682e:	18d3      	adds	r3, r2, r3
    6830:	e000      	b.n	6834 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    6832:	2300      	movs	r3, #0
	}
}
    6834:	0018      	movs	r0, r3
    6836:	46bd      	mov	sp, r7
    6838:	b004      	add	sp, #16
    683a:	bd80      	pop	{r7, pc}
    683c:	41004400 	.word	0x41004400

00006840 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6840:	b580      	push	{r7, lr}
    6842:	b082      	sub	sp, #8
    6844:	af00      	add	r7, sp, #0
    6846:	0002      	movs	r2, r0
    6848:	1dfb      	adds	r3, r7, #7
    684a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    684c:	1dfb      	adds	r3, r7, #7
    684e:	781b      	ldrb	r3, [r3, #0]
    6850:	0018      	movs	r0, r3
    6852:	4b03      	ldr	r3, [pc, #12]	; (6860 <port_get_group_from_gpio_pin+0x20>)
    6854:	4798      	blx	r3
    6856:	0003      	movs	r3, r0
}
    6858:	0018      	movs	r0, r3
    685a:	46bd      	mov	sp, r7
    685c:	b002      	add	sp, #8
    685e:	bd80      	pop	{r7, pc}
    6860:	000067e1 	.word	0x000067e1

00006864 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    6864:	b580      	push	{r7, lr}
    6866:	b084      	sub	sp, #16
    6868:	af00      	add	r7, sp, #0
    686a:	0002      	movs	r2, r0
    686c:	1dfb      	adds	r3, r7, #7
    686e:	701a      	strb	r2, [r3, #0]
    6870:	1dbb      	adds	r3, r7, #6
    6872:	1c0a      	adds	r2, r1, #0
    6874:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6876:	1dfb      	adds	r3, r7, #7
    6878:	781b      	ldrb	r3, [r3, #0]
    687a:	0018      	movs	r0, r3
    687c:	4b0d      	ldr	r3, [pc, #52]	; (68b4 <port_pin_set_output_level+0x50>)
    687e:	4798      	blx	r3
    6880:	0003      	movs	r3, r0
    6882:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6884:	1dfb      	adds	r3, r7, #7
    6886:	781b      	ldrb	r3, [r3, #0]
    6888:	221f      	movs	r2, #31
    688a:	4013      	ands	r3, r2
    688c:	2201      	movs	r2, #1
    688e:	409a      	lsls	r2, r3
    6890:	0013      	movs	r3, r2
    6892:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    6894:	1dbb      	adds	r3, r7, #6
    6896:	781b      	ldrb	r3, [r3, #0]
    6898:	2b00      	cmp	r3, #0
    689a:	d003      	beq.n	68a4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    689c:	68fb      	ldr	r3, [r7, #12]
    689e:	68ba      	ldr	r2, [r7, #8]
    68a0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    68a2:	e002      	b.n	68aa <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    68a4:	68fb      	ldr	r3, [r7, #12]
    68a6:	68ba      	ldr	r2, [r7, #8]
    68a8:	615a      	str	r2, [r3, #20]
	}
}
    68aa:	46c0      	nop			; (mov r8, r8)
    68ac:	46bd      	mov	sp, r7
    68ae:	b004      	add	sp, #16
    68b0:	bd80      	pop	{r7, pc}
    68b2:	46c0      	nop			; (mov r8, r8)
    68b4:	00006841 	.word	0x00006841

000068b8 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{	
    68b8:	b580      	push	{r7, lr}
    68ba:	b082      	sub	sp, #8
    68bc:	af00      	add	r7, sp, #0
	trx_spi_init();
    68be:	4b19      	ldr	r3, [pc, #100]	; (6924 <PHY_Init+0x6c>)
    68c0:	4798      	blx	r3
	PhyReset();
    68c2:	4b19      	ldr	r3, [pc, #100]	; (6928 <PHY_Init+0x70>)
    68c4:	4798      	blx	r3
	phyRxState = false;
    68c6:	4b19      	ldr	r3, [pc, #100]	; (692c <PHY_Init+0x74>)
    68c8:	2200      	movs	r2, #0
    68ca:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    68cc:	4b18      	ldr	r3, [pc, #96]	; (6930 <PHY_Init+0x78>)
    68ce:	2201      	movs	r2, #1
    68d0:	701a      	strb	r2, [r3, #0]

 
	do {
		PhyReset();
    68d2:	4b15      	ldr	r3, [pc, #84]	; (6928 <PHY_Init+0x70>)
    68d4:	4798      	blx	r3
		phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);		
    68d6:	2108      	movs	r1, #8
    68d8:	2002      	movs	r0, #2
    68da:	4b16      	ldr	r3, [pc, #88]	; (6934 <PHY_Init+0x7c>)
    68dc:	4798      	blx	r3
		int8_t PN=phyReadRegister(PART_NUM_REG);
    68de:	201c      	movs	r0, #28
    68e0:	4b15      	ldr	r3, [pc, #84]	; (6938 <PHY_Init+0x80>)
    68e2:	4798      	blx	r3
    68e4:	0003      	movs	r3, r0
    68e6:	001a      	movs	r2, r3
    68e8:	1dfb      	adds	r3, r7, #7
    68ea:	701a      	strb	r2, [r3, #0]
		
		int8_t Status=phyReadRegister(TRX_STATUS_REG);	
    68ec:	2001      	movs	r0, #1
    68ee:	4b12      	ldr	r3, [pc, #72]	; (6938 <PHY_Init+0x80>)
    68f0:	4798      	blx	r3
    68f2:	0003      	movs	r3, r0
    68f4:	001a      	movs	r2, r3
    68f6:	1dbb      	adds	r3, r7, #6
    68f8:	701a      	strb	r2, [r3, #0]
	}
	while (TRX_STATUS_TRX_OFF !=(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    68fa:	2001      	movs	r0, #1
    68fc:	4b0e      	ldr	r3, [pc, #56]	; (6938 <PHY_Init+0x80>)
    68fe:	4798      	blx	r3
    6900:	0003      	movs	r3, r0
    6902:	001a      	movs	r2, r3
    6904:	231f      	movs	r3, #31
    6906:	4013      	ands	r3, r2
    6908:	2b08      	cmp	r3, #8
    690a:	d1e2      	bne.n	68d2 <PHY_Init+0x1a>

	phyWriteRegister(TRX_CTRL_1_REG,
    690c:	212e      	movs	r1, #46	; 0x2e
    690e:	2004      	movs	r0, #4
    6910:	4b08      	ldr	r3, [pc, #32]	; (6934 <PHY_Init+0x7c>)
    6912:	4798      	blx	r3
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
    6914:	21a0      	movs	r1, #160	; 0xa0
    6916:	200c      	movs	r0, #12
    6918:	4b06      	ldr	r3, [pc, #24]	; (6934 <PHY_Init+0x7c>)
    691a:	4798      	blx	r3
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    691c:	46c0      	nop			; (mov r8, r8)
    691e:	46bd      	mov	sp, r7
    6920:	b002      	add	sp, #8
    6922:	bd80      	pop	{r7, pc}
    6924:	00005275 	.word	0x00005275
    6928:	000053a1 	.word	0x000053a1
    692c:	200002b8 	.word	0x200002b8
    6930:	20000234 	.word	0x20000234
    6934:	00006bad 	.word	0x00006bad
    6938:	00006bdd 	.word	0x00006bdd

0000693c <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    693c:	b580      	push	{r7, lr}
    693e:	b082      	sub	sp, #8
    6940:	af00      	add	r7, sp, #0
    6942:	0002      	movs	r2, r0
    6944:	1dfb      	adds	r3, r7, #7
    6946:	701a      	strb	r2, [r3, #0]
	phyRxState = rx;
    6948:	4b04      	ldr	r3, [pc, #16]	; (695c <PHY_SetRxState+0x20>)
    694a:	1dfa      	adds	r2, r7, #7
    694c:	7812      	ldrb	r2, [r2, #0]
    694e:	701a      	strb	r2, [r3, #0]
	phySetRxState();
    6950:	4b03      	ldr	r3, [pc, #12]	; (6960 <PHY_SetRxState+0x24>)
    6952:	4798      	blx	r3
}
    6954:	46c0      	nop			; (mov r8, r8)
    6956:	46bd      	mov	sp, r7
    6958:	b002      	add	sp, #8
    695a:	bd80      	pop	{r7, pc}
    695c:	200002b8 	.word	0x200002b8
    6960:	00006c3d 	.word	0x00006c3d

00006964 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    6964:	b580      	push	{r7, lr}
    6966:	b084      	sub	sp, #16
    6968:	af00      	add	r7, sp, #0
    696a:	0002      	movs	r2, r0
    696c:	1dfb      	adds	r3, r7, #7
    696e:	701a      	strb	r2, [r3, #0]
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    6970:	2008      	movs	r0, #8
    6972:	4b0c      	ldr	r3, [pc, #48]	; (69a4 <PHY_SetChannel+0x40>)
    6974:	4798      	blx	r3
    6976:	0003      	movs	r3, r0
    6978:	0019      	movs	r1, r3
    697a:	230f      	movs	r3, #15
    697c:	18fb      	adds	r3, r7, r3
    697e:	221f      	movs	r2, #31
    6980:	4391      	bics	r1, r2
    6982:	000a      	movs	r2, r1
    6984:	701a      	strb	r2, [r3, #0]
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    6986:	230f      	movs	r3, #15
    6988:	18fa      	adds	r2, r7, r3
    698a:	1dfb      	adds	r3, r7, #7
    698c:	7812      	ldrb	r2, [r2, #0]
    698e:	781b      	ldrb	r3, [r3, #0]
    6990:	4313      	orrs	r3, r2
    6992:	b2db      	uxtb	r3, r3
    6994:	0019      	movs	r1, r3
    6996:	2008      	movs	r0, #8
    6998:	4b03      	ldr	r3, [pc, #12]	; (69a8 <PHY_SetChannel+0x44>)
    699a:	4798      	blx	r3
}
    699c:	46c0      	nop			; (mov r8, r8)
    699e:	46bd      	mov	sp, r7
    69a0:	b004      	add	sp, #16
    69a2:	bd80      	pop	{r7, pc}
    69a4:	00006bdd 	.word	0x00006bdd
    69a8:	00006bad 	.word	0x00006bad

000069ac <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    69ac:	b580      	push	{r7, lr}
    69ae:	b084      	sub	sp, #16
    69b0:	af00      	add	r7, sp, #0
    69b2:	0002      	movs	r2, r0
    69b4:	1dbb      	adds	r3, r7, #6
    69b6:	801a      	strh	r2, [r3, #0]
	uint8_t *d = (uint8_t *)&panId;
    69b8:	1dbb      	adds	r3, r7, #6
    69ba:	60fb      	str	r3, [r7, #12]

	phyWriteRegister(PAN_ID_0_REG, d[0]);
    69bc:	68fb      	ldr	r3, [r7, #12]
    69be:	781b      	ldrb	r3, [r3, #0]
    69c0:	0019      	movs	r1, r3
    69c2:	2022      	movs	r0, #34	; 0x22
    69c4:	4b06      	ldr	r3, [pc, #24]	; (69e0 <PHY_SetPanId+0x34>)
    69c6:	4798      	blx	r3
	phyWriteRegister(PAN_ID_1_REG, d[1]);
    69c8:	68fb      	ldr	r3, [r7, #12]
    69ca:	3301      	adds	r3, #1
    69cc:	781b      	ldrb	r3, [r3, #0]
    69ce:	0019      	movs	r1, r3
    69d0:	2023      	movs	r0, #35	; 0x23
    69d2:	4b03      	ldr	r3, [pc, #12]	; (69e0 <PHY_SetPanId+0x34>)
    69d4:	4798      	blx	r3
}
    69d6:	46c0      	nop			; (mov r8, r8)
    69d8:	46bd      	mov	sp, r7
    69da:	b004      	add	sp, #16
    69dc:	bd80      	pop	{r7, pc}
    69de:	46c0      	nop			; (mov r8, r8)
    69e0:	00006bad 	.word	0x00006bad

000069e4 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    69e4:	b580      	push	{r7, lr}
    69e6:	b084      	sub	sp, #16
    69e8:	af00      	add	r7, sp, #0
    69ea:	0002      	movs	r2, r0
    69ec:	1dbb      	adds	r3, r7, #6
    69ee:	801a      	strh	r2, [r3, #0]
	uint8_t *d = (uint8_t *)&addr;
    69f0:	1dbb      	adds	r3, r7, #6
    69f2:	60fb      	str	r3, [r7, #12]

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    69f4:	68fb      	ldr	r3, [r7, #12]
    69f6:	781b      	ldrb	r3, [r3, #0]
    69f8:	0019      	movs	r1, r3
    69fa:	2020      	movs	r0, #32
    69fc:	4b0b      	ldr	r3, [pc, #44]	; (6a2c <PHY_SetShortAddr+0x48>)
    69fe:	4798      	blx	r3
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    6a00:	68fb      	ldr	r3, [r7, #12]
    6a02:	3301      	adds	r3, #1
    6a04:	781b      	ldrb	r3, [r3, #0]
    6a06:	0019      	movs	r1, r3
    6a08:	2021      	movs	r0, #33	; 0x21
    6a0a:	4b08      	ldr	r3, [pc, #32]	; (6a2c <PHY_SetShortAddr+0x48>)
    6a0c:	4798      	blx	r3
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    6a0e:	68fb      	ldr	r3, [r7, #12]
    6a10:	781a      	ldrb	r2, [r3, #0]
    6a12:	68fb      	ldr	r3, [r7, #12]
    6a14:	3301      	adds	r3, #1
    6a16:	781b      	ldrb	r3, [r3, #0]
    6a18:	18d3      	adds	r3, r2, r3
    6a1a:	b2db      	uxtb	r3, r3
    6a1c:	0019      	movs	r1, r3
    6a1e:	202d      	movs	r0, #45	; 0x2d
    6a20:	4b02      	ldr	r3, [pc, #8]	; (6a2c <PHY_SetShortAddr+0x48>)
    6a22:	4798      	blx	r3
}
    6a24:	46c0      	nop			; (mov r8, r8)
    6a26:	46bd      	mov	sp, r7
    6a28:	b004      	add	sp, #16
    6a2a:	bd80      	pop	{r7, pc}
    6a2c:	00006bad 	.word	0x00006bad

00006a30 <PHY_Sleep>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_Sleep(void)
{
    6a30:	b580      	push	{r7, lr}
    6a32:	af00      	add	r7, sp, #0
	phyTrxSetState(TRX_CMD_TRX_OFF);
    6a34:	2008      	movs	r0, #8
    6a36:	4b06      	ldr	r3, [pc, #24]	; (6a50 <PHY_Sleep+0x20>)
    6a38:	4798      	blx	r3
	TRX_SLP_TR_HIGH();
    6a3a:	2101      	movs	r1, #1
    6a3c:	2014      	movs	r0, #20
    6a3e:	4b05      	ldr	r3, [pc, #20]	; (6a54 <PHY_Sleep+0x24>)
    6a40:	4798      	blx	r3
	phyState = PHY_STATE_SLEEP;
    6a42:	4b05      	ldr	r3, [pc, #20]	; (6a58 <PHY_Sleep+0x28>)
    6a44:	2202      	movs	r2, #2
    6a46:	701a      	strb	r2, [r3, #0]
}
    6a48:	46c0      	nop			; (mov r8, r8)
    6a4a:	46bd      	mov	sp, r7
    6a4c:	bd80      	pop	{r7, pc}
    6a4e:	46c0      	nop			; (mov r8, r8)
    6a50:	00006c6d 	.word	0x00006c6d
    6a54:	00006865 	.word	0x00006865
    6a58:	20000234 	.word	0x20000234

00006a5c <PHY_Wakeup>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Wakeup(void)
{
    6a5c:	b580      	push	{r7, lr}
    6a5e:	af00      	add	r7, sp, #0
	TRX_SLP_TR_LOW();
    6a60:	2100      	movs	r1, #0
    6a62:	2014      	movs	r0, #20
    6a64:	4b04      	ldr	r3, [pc, #16]	; (6a78 <PHY_Wakeup+0x1c>)
    6a66:	4798      	blx	r3
	phySetRxState();
    6a68:	4b04      	ldr	r3, [pc, #16]	; (6a7c <PHY_Wakeup+0x20>)
    6a6a:	4798      	blx	r3
	phyState = PHY_STATE_IDLE;
    6a6c:	4b04      	ldr	r3, [pc, #16]	; (6a80 <PHY_Wakeup+0x24>)
    6a6e:	2201      	movs	r2, #1
    6a70:	701a      	strb	r2, [r3, #0]
}
    6a72:	46c0      	nop			; (mov r8, r8)
    6a74:	46bd      	mov	sp, r7
    6a76:	bd80      	pop	{r7, pc}
    6a78:	00006865 	.word	0x00006865
    6a7c:	00006c3d 	.word	0x00006c3d
    6a80:	20000234 	.word	0x20000234

00006a84 <PHY_DataReq>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    6a84:	b580      	push	{r7, lr}
    6a86:	b082      	sub	sp, #8
    6a88:	af00      	add	r7, sp, #0
    6a8a:	6078      	str	r0, [r7, #4]
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    6a8c:	2019      	movs	r0, #25
    6a8e:	4b12      	ldr	r3, [pc, #72]	; (6ad8 <PHY_DataReq+0x54>)
    6a90:	4798      	blx	r3

	phyReadRegister(IRQ_STATUS_REG);
    6a92:	200f      	movs	r0, #15
    6a94:	4b11      	ldr	r3, [pc, #68]	; (6adc <PHY_DataReq+0x58>)
    6a96:	4798      	blx	r3

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    6a98:	687b      	ldr	r3, [r7, #4]
    6a9a:	781b      	ldrb	r3, [r3, #0]
    6a9c:	3302      	adds	r3, #2
    6a9e:	b2da      	uxtb	r2, r3
    6aa0:	687b      	ldr	r3, [r7, #4]
    6aa2:	701a      	strb	r2, [r3, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    6aa4:	687b      	ldr	r3, [r7, #4]
    6aa6:	781b      	ldrb	r3, [r3, #0]
    6aa8:	3b01      	subs	r3, #1
    6aaa:	b2da      	uxtb	r2, r3
    6aac:	687b      	ldr	r3, [r7, #4]
    6aae:	0011      	movs	r1, r2
    6ab0:	0018      	movs	r0, r3
    6ab2:	4b0b      	ldr	r3, [pc, #44]	; (6ae0 <PHY_DataReq+0x5c>)
    6ab4:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    6ab6:	4b0b      	ldr	r3, [pc, #44]	; (6ae4 <PHY_DataReq+0x60>)
    6ab8:	2203      	movs	r2, #3
    6aba:	701a      	strb	r2, [r3, #0]

	TRX_SLP_TR_HIGH();
    6abc:	2101      	movs	r1, #1
    6abe:	2014      	movs	r0, #20
    6ac0:	4b09      	ldr	r3, [pc, #36]	; (6ae8 <PHY_DataReq+0x64>)
    6ac2:	4798      	blx	r3
	TRX_TRIG_DELAY();
    6ac4:	46c0      	nop			; (mov r8, r8)
    6ac6:	46c0      	nop			; (mov r8, r8)
	TRX_SLP_TR_LOW();
    6ac8:	2100      	movs	r1, #0
    6aca:	2014      	movs	r0, #20
    6acc:	4b06      	ldr	r3, [pc, #24]	; (6ae8 <PHY_DataReq+0x64>)
    6ace:	4798      	blx	r3
}
    6ad0:	46c0      	nop			; (mov r8, r8)
    6ad2:	46bd      	mov	sp, r7
    6ad4:	b002      	add	sp, #8
    6ad6:	bd80      	pop	{r7, pc}
    6ad8:	00006c6d 	.word	0x00006c6d
    6adc:	00006bdd 	.word	0x00006bdd
    6ae0:	000057e5 	.word	0x000057e5
    6ae4:	20000234 	.word	0x20000234
    6ae8:	00006865 	.word	0x00006865

00006aec <PHY_RandomReq>:

/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
    6aec:	b580      	push	{r7, lr}
    6aee:	b082      	sub	sp, #8
    6af0:	af00      	add	r7, sp, #0
	uint16_t rnd = 0;
    6af2:	1dbb      	adds	r3, r7, #6
    6af4:	2200      	movs	r2, #0
    6af6:	801a      	strh	r2, [r3, #0]
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);
    6af8:	2006      	movs	r0, #6
    6afa:	4b19      	ldr	r3, [pc, #100]	; (6b60 <PHY_RandomReq+0x74>)
    6afc:	4798      	blx	r3

	for (uint8_t i = 0; i < 16; i += 2) {
    6afe:	1d7b      	adds	r3, r7, #5
    6b00:	2200      	movs	r2, #0
    6b02:	701a      	strb	r2, [r3, #0]
    6b04:	e01f      	b.n	6b46 <PHY_RandomReq+0x5a>
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    6b06:	2001      	movs	r0, #1
    6b08:	4b16      	ldr	r3, [pc, #88]	; (6b64 <PHY_RandomReq+0x78>)
    6b0a:	4798      	blx	r3
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    6b0c:	2006      	movs	r0, #6
    6b0e:	4b16      	ldr	r3, [pc, #88]	; (6b68 <PHY_RandomReq+0x7c>)
    6b10:	4798      	blx	r3
    6b12:	0003      	movs	r3, r0
    6b14:	095b      	lsrs	r3, r3, #5
    6b16:	b2da      	uxtb	r2, r3
    6b18:	1d3b      	adds	r3, r7, #4
    6b1a:	2103      	movs	r1, #3
    6b1c:	400a      	ands	r2, r1
    6b1e:	701a      	strb	r2, [r3, #0]
		rnd |= rndValue << i;
    6b20:	1d3b      	adds	r3, r7, #4
    6b22:	781a      	ldrb	r2, [r3, #0]
    6b24:	1d7b      	adds	r3, r7, #5
    6b26:	781b      	ldrb	r3, [r3, #0]
    6b28:	409a      	lsls	r2, r3
    6b2a:	0013      	movs	r3, r2
    6b2c:	b21a      	sxth	r2, r3
    6b2e:	1dbb      	adds	r3, r7, #6
    6b30:	2100      	movs	r1, #0
    6b32:	5e5b      	ldrsh	r3, [r3, r1]
    6b34:	4313      	orrs	r3, r2
    6b36:	b21a      	sxth	r2, r3
    6b38:	1dbb      	adds	r3, r7, #6
    6b3a:	801a      	strh	r2, [r3, #0]
	uint16_t rnd = 0;
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
    6b3c:	1d7b      	adds	r3, r7, #5
    6b3e:	1d7a      	adds	r2, r7, #5
    6b40:	7812      	ldrb	r2, [r2, #0]
    6b42:	3202      	adds	r2, #2
    6b44:	701a      	strb	r2, [r3, #0]
    6b46:	1d7b      	adds	r3, r7, #5
    6b48:	781b      	ldrb	r3, [r3, #0]
    6b4a:	2b0f      	cmp	r3, #15
    6b4c:	d9db      	bls.n	6b06 <PHY_RandomReq+0x1a>
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
		rnd |= rndValue << i;
	}

	phySetRxState();
    6b4e:	4b07      	ldr	r3, [pc, #28]	; (6b6c <PHY_RandomReq+0x80>)
    6b50:	4798      	blx	r3

	return rnd;
    6b52:	1dbb      	adds	r3, r7, #6
    6b54:	881b      	ldrh	r3, [r3, #0]
}
    6b56:	0018      	movs	r0, r3
    6b58:	46bd      	mov	sp, r7
    6b5a:	b002      	add	sp, #8
    6b5c:	bd80      	pop	{r7, pc}
    6b5e:	46c0      	nop			; (mov r8, r8)
    6b60:	00006c6d 	.word	0x00006c6d
    6b64:	0000adad 	.word	0x0000adad
    6b68:	00006bdd 	.word	0x00006bdd
    6b6c:	00006c3d 	.word	0x00006c3d

00006b70 <PHY_EncryptReq>:

/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    6b70:	b580      	push	{r7, lr}
    6b72:	b082      	sub	sp, #8
    6b74:	af00      	add	r7, sp, #0
    6b76:	6078      	str	r0, [r7, #4]
    6b78:	6039      	str	r1, [r7, #0]
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    6b7a:	683b      	ldr	r3, [r7, #0]
    6b7c:	2200      	movs	r2, #0
    6b7e:	2100      	movs	r1, #0
    6b80:	0018      	movs	r0, r3
    6b82:	4b07      	ldr	r3, [pc, #28]	; (6ba0 <PHY_EncryptReq+0x30>)
    6b84:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
    6b86:	687b      	ldr	r3, [r7, #4]
    6b88:	2100      	movs	r1, #0
    6b8a:	0018      	movs	r0, r3
    6b8c:	4b05      	ldr	r3, [pc, #20]	; (6ba4 <PHY_EncryptReq+0x34>)
    6b8e:	4798      	blx	r3
#else
	sal_aes_exec(text);
#endif
	sal_aes_read(text);
    6b90:	687b      	ldr	r3, [r7, #4]
    6b92:	0018      	movs	r0, r3
    6b94:	4b04      	ldr	r3, [pc, #16]	; (6ba8 <PHY_EncryptReq+0x38>)
    6b96:	4798      	blx	r3
}
    6b98:	46c0      	nop			; (mov r8, r8)
    6b9a:	46bd      	mov	sp, r7
    6b9c:	b002      	add	sp, #8
    6b9e:	bd80      	pop	{r7, pc}
    6ba0:	00004af1 	.word	0x00004af1
    6ba4:	00004cb5 	.word	0x00004cb5
    6ba8:	00004d41 	.word	0x00004d41

00006bac <phyWriteRegister>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
    6bac:	b580      	push	{r7, lr}
    6bae:	b082      	sub	sp, #8
    6bb0:	af00      	add	r7, sp, #0
    6bb2:	0002      	movs	r2, r0
    6bb4:	1dfb      	adds	r3, r7, #7
    6bb6:	701a      	strb	r2, [r3, #0]
    6bb8:	1dbb      	adds	r3, r7, #6
    6bba:	1c0a      	adds	r2, r1, #0
    6bbc:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    6bbe:	1dbb      	adds	r3, r7, #6
    6bc0:	781a      	ldrb	r2, [r3, #0]
    6bc2:	1dfb      	adds	r3, r7, #7
    6bc4:	781b      	ldrb	r3, [r3, #0]
    6bc6:	0011      	movs	r1, r2
    6bc8:	0018      	movs	r0, r3
    6bca:	4b03      	ldr	r3, [pc, #12]	; (6bd8 <phyWriteRegister+0x2c>)
    6bcc:	4798      	blx	r3
}
    6bce:	46c0      	nop			; (mov r8, r8)
    6bd0:	46bd      	mov	sp, r7
    6bd2:	b002      	add	sp, #8
    6bd4:	bd80      	pop	{r7, pc}
    6bd6:	46c0      	nop			; (mov r8, r8)
    6bd8:	00005539 	.word	0x00005539

00006bdc <phyReadRegister>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
    6bdc:	b590      	push	{r4, r7, lr}
    6bde:	b085      	sub	sp, #20
    6be0:	af00      	add	r7, sp, #0
    6be2:	0002      	movs	r2, r0
    6be4:	1dfb      	adds	r3, r7, #7
    6be6:	701a      	strb	r2, [r3, #0]
	uint8_t value;

	value = trx_reg_read(reg);
    6be8:	230f      	movs	r3, #15
    6bea:	18fc      	adds	r4, r7, r3
    6bec:	1dfb      	adds	r3, r7, #7
    6bee:	781b      	ldrb	r3, [r3, #0]
    6bf0:	0018      	movs	r0, r3
    6bf2:	4b05      	ldr	r3, [pc, #20]	; (6c08 <phyReadRegister+0x2c>)
    6bf4:	4798      	blx	r3
    6bf6:	0003      	movs	r3, r0
    6bf8:	7023      	strb	r3, [r4, #0]

	return value;
    6bfa:	230f      	movs	r3, #15
    6bfc:	18fb      	adds	r3, r7, r3
    6bfe:	781b      	ldrb	r3, [r3, #0]
}
    6c00:	0018      	movs	r0, r3
    6c02:	46bd      	mov	sp, r7
    6c04:	b005      	add	sp, #20
    6c06:	bd90      	pop	{r4, r7, pc}
    6c08:	000053e5 	.word	0x000053e5

00006c0c <phyWaitState>:

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
    6c0c:	b590      	push	{r4, r7, lr}
    6c0e:	b083      	sub	sp, #12
    6c10:	af00      	add	r7, sp, #0
    6c12:	0002      	movs	r2, r0
    6c14:	1dfb      	adds	r3, r7, #7
    6c16:	701a      	strb	r2, [r3, #0]
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    6c18:	46c0      	nop			; (mov r8, r8)
    6c1a:	1dfb      	adds	r3, r7, #7
    6c1c:	781c      	ldrb	r4, [r3, #0]
    6c1e:	2001      	movs	r0, #1
    6c20:	4b05      	ldr	r3, [pc, #20]	; (6c38 <phyWaitState+0x2c>)
    6c22:	4798      	blx	r3
    6c24:	0003      	movs	r3, r0
    6c26:	001a      	movs	r2, r3
    6c28:	231f      	movs	r3, #31
    6c2a:	4013      	ands	r3, r2
    6c2c:	429c      	cmp	r4, r3
    6c2e:	d1f4      	bne.n	6c1a <phyWaitState+0xe>
	}
}
    6c30:	46c0      	nop			; (mov r8, r8)
    6c32:	46bd      	mov	sp, r7
    6c34:	b003      	add	sp, #12
    6c36:	bd90      	pop	{r4, r7, pc}
    6c38:	00006bdd 	.word	0x00006bdd

00006c3c <phySetRxState>:

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    6c3c:	b580      	push	{r7, lr}
    6c3e:	af00      	add	r7, sp, #0
	phyTrxSetState(TRX_CMD_TRX_OFF);
    6c40:	2008      	movs	r0, #8
    6c42:	4b07      	ldr	r3, [pc, #28]	; (6c60 <phySetRxState+0x24>)
    6c44:	4798      	blx	r3

	phyReadRegister(IRQ_STATUS_REG);
    6c46:	200f      	movs	r0, #15
    6c48:	4b06      	ldr	r3, [pc, #24]	; (6c64 <phySetRxState+0x28>)
    6c4a:	4798      	blx	r3

	if (phyRxState) {
    6c4c:	4b06      	ldr	r3, [pc, #24]	; (6c68 <phySetRxState+0x2c>)
    6c4e:	781b      	ldrb	r3, [r3, #0]
    6c50:	2b00      	cmp	r3, #0
    6c52:	d002      	beq.n	6c5a <phySetRxState+0x1e>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    6c54:	2016      	movs	r0, #22
    6c56:	4b02      	ldr	r3, [pc, #8]	; (6c60 <phySetRxState+0x24>)
    6c58:	4798      	blx	r3
	}
}
    6c5a:	46c0      	nop			; (mov r8, r8)
    6c5c:	46bd      	mov	sp, r7
    6c5e:	bd80      	pop	{r7, pc}
    6c60:	00006c6d 	.word	0x00006c6d
    6c64:	00006bdd 	.word	0x00006bdd
    6c68:	200002b8 	.word	0x200002b8

00006c6c <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    6c6c:	b590      	push	{r4, r7, lr}
    6c6e:	b083      	sub	sp, #12
    6c70:	af00      	add	r7, sp, #0
    6c72:	0002      	movs	r2, r0
    6c74:	1dfb      	adds	r3, r7, #7
    6c76:	701a      	strb	r2, [r3, #0]
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
    6c78:	2103      	movs	r1, #3
    6c7a:	2002      	movs	r0, #2
    6c7c:	4b0f      	ldr	r3, [pc, #60]	; (6cbc <phyTrxSetState+0x50>)
    6c7e:	4798      	blx	r3
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    6c80:	2001      	movs	r0, #1
    6c82:	4b0f      	ldr	r3, [pc, #60]	; (6cc0 <phyTrxSetState+0x54>)
    6c84:	4798      	blx	r3
    6c86:	0003      	movs	r3, r0
    6c88:	001a      	movs	r2, r3
    6c8a:	231f      	movs	r3, #31
    6c8c:	4013      	ands	r3, r2
    6c8e:	2b08      	cmp	r3, #8
    6c90:	d1f2      	bne.n	6c78 <phyTrxSetState+0xc>

	do { phyWriteRegister(TRX_STATE_REG,
    6c92:	1dfb      	adds	r3, r7, #7
    6c94:	781b      	ldrb	r3, [r3, #0]
    6c96:	0019      	movs	r1, r3
    6c98:	2002      	movs	r0, #2
    6c9a:	4b08      	ldr	r3, [pc, #32]	; (6cbc <phyTrxSetState+0x50>)
    6c9c:	4798      	blx	r3
			     state); } while (state !=
    6c9e:	1dfb      	adds	r3, r7, #7
    6ca0:	781c      	ldrb	r4, [r3, #0]
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    6ca2:	2001      	movs	r0, #1
    6ca4:	4b06      	ldr	r3, [pc, #24]	; (6cc0 <phyTrxSetState+0x54>)
    6ca6:	4798      	blx	r3
    6ca8:	0003      	movs	r3, r0
    6caa:	001a      	movs	r2, r3
    6cac:	231f      	movs	r3, #31
    6cae:	4013      	ands	r3, r2
    6cb0:	429c      	cmp	r4, r3
    6cb2:	d1ee      	bne.n	6c92 <phyTrxSetState+0x26>
}
    6cb4:	46c0      	nop			; (mov r8, r8)
    6cb6:	46bd      	mov	sp, r7
    6cb8:	b003      	add	sp, #12
    6cba:	bd90      	pop	{r4, r7, pc}
    6cbc:	00006bad 	.word	0x00006bad
    6cc0:	00006bdd 	.word	0x00006bdd

00006cc4 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    6cc4:	b580      	push	{r7, lr}
    6cc6:	b084      	sub	sp, #16
    6cc8:	af00      	add	r7, sp, #0
	if (PHY_STATE_SLEEP == phyState) {
    6cca:	4b43      	ldr	r3, [pc, #268]	; (6dd8 <PHY_TaskHandler+0x114>)
    6ccc:	781b      	ldrb	r3, [r3, #0]
    6cce:	2b02      	cmp	r3, #2
    6cd0:	d100      	bne.n	6cd4 <PHY_TaskHandler+0x10>
    6cd2:	e07d      	b.n	6dd0 <PHY_TaskHandler+0x10c>
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    6cd4:	200f      	movs	r0, #15
    6cd6:	4b41      	ldr	r3, [pc, #260]	; (6ddc <PHY_TaskHandler+0x118>)
    6cd8:	4798      	blx	r3
    6cda:	0003      	movs	r3, r0
    6cdc:	001a      	movs	r2, r3
    6cde:	2308      	movs	r3, #8
    6ce0:	4013      	ands	r3, r2
    6ce2:	d100      	bne.n	6ce6 <PHY_TaskHandler+0x22>
    6ce4:	e075      	b.n	6dd2 <PHY_TaskHandler+0x10e>
		if (PHY_STATE_IDLE == phyState) {
    6ce6:	4b3c      	ldr	r3, [pc, #240]	; (6dd8 <PHY_TaskHandler+0x114>)
    6ce8:	781b      	ldrb	r3, [r3, #0]
    6cea:	2b01      	cmp	r3, #1
    6cec:	d135      	bne.n	6d5a <PHY_TaskHandler+0x96>
			PHY_DataInd_t ind;
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);
    6cee:	2007      	movs	r0, #7
    6cf0:	4b3a      	ldr	r3, [pc, #232]	; (6ddc <PHY_TaskHandler+0x118>)
    6cf2:	4798      	blx	r3
    6cf4:	0003      	movs	r3, r0
    6cf6:	001a      	movs	r2, r3
    6cf8:	230e      	movs	r3, #14
    6cfa:	18fb      	adds	r3, r7, r3
    6cfc:	701a      	strb	r2, [r3, #0]

			trx_frame_read(&size, 1);
    6cfe:	1cfb      	adds	r3, r7, #3
    6d00:	2101      	movs	r1, #1
    6d02:	0018      	movs	r0, r3
    6d04:	4b36      	ldr	r3, [pc, #216]	; (6de0 <PHY_TaskHandler+0x11c>)
    6d06:	4798      	blx	r3

			trx_frame_read(phyRxBuffer, size + 2);
    6d08:	1cfb      	adds	r3, r7, #3
    6d0a:	781b      	ldrb	r3, [r3, #0]
    6d0c:	3302      	adds	r3, #2
    6d0e:	b2da      	uxtb	r2, r3
    6d10:	4b34      	ldr	r3, [pc, #208]	; (6de4 <PHY_TaskHandler+0x120>)
    6d12:	0011      	movs	r1, r2
    6d14:	0018      	movs	r0, r3
    6d16:	4b32      	ldr	r3, [pc, #200]	; (6de0 <PHY_TaskHandler+0x11c>)
    6d18:	4798      	blx	r3

			ind.data = phyRxBuffer + 1;
    6d1a:	4a33      	ldr	r2, [pc, #204]	; (6de8 <PHY_TaskHandler+0x124>)
    6d1c:	1d3b      	adds	r3, r7, #4
    6d1e:	601a      	str	r2, [r3, #0]

			ind.size = size - PHY_CRC_SIZE;
    6d20:	1cfb      	adds	r3, r7, #3
    6d22:	781b      	ldrb	r3, [r3, #0]
    6d24:	3b02      	subs	r3, #2
    6d26:	b2da      	uxtb	r2, r3
    6d28:	1d3b      	adds	r3, r7, #4
    6d2a:	711a      	strb	r2, [r3, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    6d2c:	1cfb      	adds	r3, r7, #3
    6d2e:	781b      	ldrb	r3, [r3, #0]
    6d30:	3301      	adds	r3, #1
    6d32:	4a2c      	ldr	r2, [pc, #176]	; (6de4 <PHY_TaskHandler+0x120>)
    6d34:	5cd2      	ldrb	r2, [r2, r3]
    6d36:	1d3b      	adds	r3, r7, #4
    6d38:	715a      	strb	r2, [r3, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    6d3a:	230e      	movs	r3, #14
    6d3c:	18fb      	adds	r3, r7, r3
    6d3e:	781b      	ldrb	r3, [r3, #0]
    6d40:	3b5b      	subs	r3, #91	; 0x5b
    6d42:	b2db      	uxtb	r3, r3
    6d44:	b25a      	sxtb	r2, r3
    6d46:	1d3b      	adds	r3, r7, #4
    6d48:	719a      	strb	r2, [r3, #6]
			PHY_DataInd(&ind);
    6d4a:	1d3b      	adds	r3, r7, #4
    6d4c:	0018      	movs	r0, r3
    6d4e:	4b27      	ldr	r3, [pc, #156]	; (6dec <PHY_TaskHandler+0x128>)
    6d50:	4798      	blx	r3

			phyWaitState(TRX_STATUS_RX_AACK_ON);
    6d52:	2016      	movs	r0, #22
    6d54:	4b26      	ldr	r3, [pc, #152]	; (6df0 <PHY_TaskHandler+0x12c>)
    6d56:	4798      	blx	r3
    6d58:	e03b      	b.n	6dd2 <PHY_TaskHandler+0x10e>
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    6d5a:	4b1f      	ldr	r3, [pc, #124]	; (6dd8 <PHY_TaskHandler+0x114>)
    6d5c:	781b      	ldrb	r3, [r3, #0]
    6d5e:	2b03      	cmp	r3, #3
    6d60:	d137      	bne.n	6dd2 <PHY_TaskHandler+0x10e>
			uint8_t status
				= (phyReadRegister(TRX_STATE_REG) >>
    6d62:	2002      	movs	r0, #2
    6d64:	4b1d      	ldr	r3, [pc, #116]	; (6ddc <PHY_TaskHandler+0x118>)
    6d66:	4798      	blx	r3
    6d68:	0003      	movs	r3, r0
    6d6a:	001a      	movs	r2, r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    6d6c:	230f      	movs	r3, #15
    6d6e:	18fb      	adds	r3, r7, r3
    6d70:	0952      	lsrs	r2, r2, #5
    6d72:	701a      	strb	r2, [r3, #0]
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    6d74:	230f      	movs	r3, #15
    6d76:	18fb      	adds	r3, r7, r3
    6d78:	781b      	ldrb	r3, [r3, #0]
    6d7a:	2b00      	cmp	r3, #0
    6d7c:	d104      	bne.n	6d88 <PHY_TaskHandler+0xc4>
				status = PHY_STATUS_SUCCESS;
    6d7e:	230f      	movs	r3, #15
    6d80:	18fb      	adds	r3, r7, r3
    6d82:	2200      	movs	r2, #0
    6d84:	701a      	strb	r2, [r3, #0]
    6d86:	e017      	b.n	6db8 <PHY_TaskHandler+0xf4>
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    6d88:	230f      	movs	r3, #15
    6d8a:	18fb      	adds	r3, r7, r3
    6d8c:	781b      	ldrb	r3, [r3, #0]
    6d8e:	2b03      	cmp	r3, #3
    6d90:	d104      	bne.n	6d9c <PHY_TaskHandler+0xd8>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    6d92:	230f      	movs	r3, #15
    6d94:	18fb      	adds	r3, r7, r3
    6d96:	2201      	movs	r2, #1
    6d98:	701a      	strb	r2, [r3, #0]
    6d9a:	e00d      	b.n	6db8 <PHY_TaskHandler+0xf4>
			} else if (TRAC_STATUS_NO_ACK == status) {
    6d9c:	230f      	movs	r3, #15
    6d9e:	18fb      	adds	r3, r7, r3
    6da0:	781b      	ldrb	r3, [r3, #0]
    6da2:	2b05      	cmp	r3, #5
    6da4:	d104      	bne.n	6db0 <PHY_TaskHandler+0xec>
				status = PHY_STATUS_NO_ACK;
    6da6:	230f      	movs	r3, #15
    6da8:	18fb      	adds	r3, r7, r3
    6daa:	2202      	movs	r2, #2
    6dac:	701a      	strb	r2, [r3, #0]
    6dae:	e003      	b.n	6db8 <PHY_TaskHandler+0xf4>
			} else {
				status = PHY_STATUS_ERROR;
    6db0:	230f      	movs	r3, #15
    6db2:	18fb      	adds	r3, r7, r3
    6db4:	2203      	movs	r2, #3
    6db6:	701a      	strb	r2, [r3, #0]
			}

			phySetRxState();
    6db8:	4b0e      	ldr	r3, [pc, #56]	; (6df4 <PHY_TaskHandler+0x130>)
    6dba:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    6dbc:	4b06      	ldr	r3, [pc, #24]	; (6dd8 <PHY_TaskHandler+0x114>)
    6dbe:	2201      	movs	r2, #1
    6dc0:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    6dc2:	230f      	movs	r3, #15
    6dc4:	18fb      	adds	r3, r7, r3
    6dc6:	781b      	ldrb	r3, [r3, #0]
    6dc8:	0018      	movs	r0, r3
    6dca:	4b0b      	ldr	r3, [pc, #44]	; (6df8 <PHY_TaskHandler+0x134>)
    6dcc:	4798      	blx	r3
    6dce:	e000      	b.n	6dd2 <PHY_TaskHandler+0x10e>
/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
    6dd0:	46c0      	nop			; (mov r8, r8)
			phyState = PHY_STATE_IDLE;

			PHY_DataConf(status);
		}
	}
}
    6dd2:	46bd      	mov	sp, r7
    6dd4:	b004      	add	sp, #16
    6dd6:	bd80      	pop	{r7, pc}
    6dd8:	20000234 	.word	0x20000234
    6ddc:	00006bdd 	.word	0x00006bdd
    6de0:	00005685 	.word	0x00005685
    6de4:	20000238 	.word	0x20000238
    6de8:	20000239 	.word	0x20000239
    6dec:	00008669 	.word	0x00008669
    6df0:	00006c0d 	.word	0x00006c0d
    6df4:	00006c3d 	.word	0x00006c3d
    6df8:	00009a49 	.word	0x00009a49

00006dfc <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    6dfc:	b580      	push	{r7, lr}
    6dfe:	b082      	sub	sp, #8
    6e00:	af00      	add	r7, sp, #0
	nwkIb.nwkSeqNum = 0;
    6e02:	4b19      	ldr	r3, [pc, #100]	; (6e68 <NWK_Init+0x6c>)
    6e04:	2200      	movs	r2, #0
    6e06:	711a      	strb	r2, [r3, #4]
	nwkIb.macSeqNum = 0;
    6e08:	4b17      	ldr	r3, [pc, #92]	; (6e68 <NWK_Init+0x6c>)
    6e0a:	2200      	movs	r2, #0
    6e0c:	715a      	strb	r2, [r3, #5]
	nwkIb.addr = 0;
    6e0e:	4b16      	ldr	r3, [pc, #88]	; (6e68 <NWK_Init+0x6c>)
    6e10:	2200      	movs	r2, #0
    6e12:	801a      	strh	r2, [r3, #0]
	nwkIb.lock = 0;
    6e14:	4b14      	ldr	r3, [pc, #80]	; (6e68 <NWK_Init+0x6c>)
    6e16:	2258      	movs	r2, #88	; 0x58
    6e18:	2100      	movs	r1, #0
    6e1a:	5299      	strh	r1, [r3, r2]

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    6e1c:	1dfb      	adds	r3, r7, #7
    6e1e:	2200      	movs	r2, #0
    6e20:	701a      	strb	r2, [r3, #0]
    6e22:	e00b      	b.n	6e3c <NWK_Init+0x40>
		nwkIb.endpoint[i] = NULL;
    6e24:	1dfb      	adds	r3, r7, #7
    6e26:	781a      	ldrb	r2, [r3, #0]
    6e28:	4b0f      	ldr	r3, [pc, #60]	; (6e68 <NWK_Init+0x6c>)
    6e2a:	3202      	adds	r2, #2
    6e2c:	0092      	lsls	r2, r2, #2
    6e2e:	2100      	movs	r1, #0
    6e30:	50d1      	str	r1, [r2, r3]
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    6e32:	1dfb      	adds	r3, r7, #7
    6e34:	781a      	ldrb	r2, [r3, #0]
    6e36:	1dfb      	adds	r3, r7, #7
    6e38:	3201      	adds	r2, #1
    6e3a:	701a      	strb	r2, [r3, #0]
    6e3c:	1dfb      	adds	r3, r7, #7
    6e3e:	781b      	ldrb	r3, [r3, #0]
    6e40:	2b0f      	cmp	r3, #15
    6e42:	d9ef      	bls.n	6e24 <NWK_Init+0x28>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    6e44:	4b09      	ldr	r3, [pc, #36]	; (6e6c <NWK_Init+0x70>)
    6e46:	4798      	blx	r3
	nwkRxInit();
    6e48:	4b09      	ldr	r3, [pc, #36]	; (6e70 <NWK_Init+0x74>)
    6e4a:	4798      	blx	r3
	nwkFrameInit();
    6e4c:	4b09      	ldr	r3, [pc, #36]	; (6e74 <NWK_Init+0x78>)
    6e4e:	4798      	blx	r3
	nwkDataReqInit();
    6e50:	4b09      	ldr	r3, [pc, #36]	; (6e78 <NWK_Init+0x7c>)
    6e52:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    6e54:	4b09      	ldr	r3, [pc, #36]	; (6e7c <NWK_Init+0x80>)
    6e56:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    6e58:	4b09      	ldr	r3, [pc, #36]	; (6e80 <NWK_Init+0x84>)
    6e5a:	4798      	blx	r3
#ifdef NWK_ENABLE_MULTICAST
	nwkGroupInit();
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
    6e5c:	4b09      	ldr	r3, [pc, #36]	; (6e84 <NWK_Init+0x88>)
    6e5e:	4798      	blx	r3
#endif
}
    6e60:	46c0      	nop			; (mov r8, r8)
    6e62:	46bd      	mov	sp, r7
    6e64:	b002      	add	sp, #8
    6e66:	bd80      	pop	{r7, pc}
    6e68:	20001024 	.word	0x20001024
    6e6c:	0000942d 	.word	0x0000942d
    6e70:	000085f9 	.word	0x000085f9
    6e74:	00007379 	.word	0x00007379
    6e78:	00006fc1 	.word	0x00006fc1
    6e7c:	00007589 	.word	0x00007589
    6e80:	00009005 	.word	0x00009005
    6e84:	00007cc9 	.word	0x00007cc9

00006e88 <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    6e88:	b580      	push	{r7, lr}
    6e8a:	b082      	sub	sp, #8
    6e8c:	af00      	add	r7, sp, #0
    6e8e:	0002      	movs	r2, r0
    6e90:	1dbb      	adds	r3, r7, #6
    6e92:	801a      	strh	r2, [r3, #0]
	nwkIb.addr = addr;
    6e94:	4b06      	ldr	r3, [pc, #24]	; (6eb0 <NWK_SetAddr+0x28>)
    6e96:	1dba      	adds	r2, r7, #6
    6e98:	8812      	ldrh	r2, [r2, #0]
    6e9a:	801a      	strh	r2, [r3, #0]
	PHY_SetShortAddr(addr);
    6e9c:	1dbb      	adds	r3, r7, #6
    6e9e:	881b      	ldrh	r3, [r3, #0]
    6ea0:	0018      	movs	r0, r3
    6ea2:	4b04      	ldr	r3, [pc, #16]	; (6eb4 <NWK_SetAddr+0x2c>)
    6ea4:	4798      	blx	r3
}
    6ea6:	46c0      	nop			; (mov r8, r8)
    6ea8:	46bd      	mov	sp, r7
    6eaa:	b002      	add	sp, #8
    6eac:	bd80      	pop	{r7, pc}
    6eae:	46c0      	nop			; (mov r8, r8)
    6eb0:	20001024 	.word	0x20001024
    6eb4:	000069e5 	.word	0x000069e5

00006eb8 <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    6eb8:	b580      	push	{r7, lr}
    6eba:	b082      	sub	sp, #8
    6ebc:	af00      	add	r7, sp, #0
    6ebe:	0002      	movs	r2, r0
    6ec0:	1dbb      	adds	r3, r7, #6
    6ec2:	801a      	strh	r2, [r3, #0]
	nwkIb.panId = panId;
    6ec4:	4b06      	ldr	r3, [pc, #24]	; (6ee0 <NWK_SetPanId+0x28>)
    6ec6:	1dba      	adds	r2, r7, #6
    6ec8:	8812      	ldrh	r2, [r2, #0]
    6eca:	805a      	strh	r2, [r3, #2]
	PHY_SetPanId(panId);
    6ecc:	1dbb      	adds	r3, r7, #6
    6ece:	881b      	ldrh	r3, [r3, #0]
    6ed0:	0018      	movs	r0, r3
    6ed2:	4b04      	ldr	r3, [pc, #16]	; (6ee4 <NWK_SetPanId+0x2c>)
    6ed4:	4798      	blx	r3
}
    6ed6:	46c0      	nop			; (mov r8, r8)
    6ed8:	46bd      	mov	sp, r7
    6eda:	b002      	add	sp, #8
    6edc:	bd80      	pop	{r7, pc}
    6ede:	46c0      	nop			; (mov r8, r8)
    6ee0:	20001024 	.word	0x20001024
    6ee4:	000069ad 	.word	0x000069ad

00006ee8 <NWK_OpenEndpoint>:
*  @brief Registers callback @a ind for the endpoint @a endpoint
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
    6ee8:	b580      	push	{r7, lr}
    6eea:	b082      	sub	sp, #8
    6eec:	af00      	add	r7, sp, #0
    6eee:	0002      	movs	r2, r0
    6ef0:	6039      	str	r1, [r7, #0]
    6ef2:	1dfb      	adds	r3, r7, #7
    6ef4:	701a      	strb	r2, [r3, #0]
	nwkIb.endpoint[id] = handler;
    6ef6:	1dfb      	adds	r3, r7, #7
    6ef8:	781a      	ldrb	r2, [r3, #0]
    6efa:	4b04      	ldr	r3, [pc, #16]	; (6f0c <NWK_OpenEndpoint+0x24>)
    6efc:	3202      	adds	r2, #2
    6efe:	0092      	lsls	r2, r2, #2
    6f00:	6839      	ldr	r1, [r7, #0]
    6f02:	50d1      	str	r1, [r2, r3]
}
    6f04:	46c0      	nop			; (mov r8, r8)
    6f06:	46bd      	mov	sp, r7
    6f08:	b002      	add	sp, #8
    6f0a:	bd80      	pop	{r7, pc}
    6f0c:	20001024 	.word	0x20001024

00006f10 <NWK_Busy>:
/*************************************************************************//**
*  @brief Checks if network layer is ready for sleep
*  @return @c true if network layer is ready for sleep or @c false otherwise
*****************************************************************************/
bool NWK_Busy(void)
{
    6f10:	b580      	push	{r7, lr}
    6f12:	af00      	add	r7, sp, #0
	return nwkIb.lock > 0;
    6f14:	4b04      	ldr	r3, [pc, #16]	; (6f28 <NWK_Busy+0x18>)
    6f16:	2258      	movs	r2, #88	; 0x58
    6f18:	5a9b      	ldrh	r3, [r3, r2]
    6f1a:	1e5a      	subs	r2, r3, #1
    6f1c:	4193      	sbcs	r3, r2
    6f1e:	b2db      	uxtb	r3, r3
}
    6f20:	0018      	movs	r0, r3
    6f22:	46bd      	mov	sp, r7
    6f24:	bd80      	pop	{r7, pc}
    6f26:	46c0      	nop			; (mov r8, r8)
    6f28:	20001024 	.word	0x20001024

00006f2c <NWK_Lock>:

/*************************************************************************//**
*  @brief Increases the lock counter and sets a busy state
*****************************************************************************/
void NWK_Lock(void)
{
    6f2c:	b580      	push	{r7, lr}
    6f2e:	af00      	add	r7, sp, #0
	nwkIb.lock++;
    6f30:	4b05      	ldr	r3, [pc, #20]	; (6f48 <NWK_Lock+0x1c>)
    6f32:	2258      	movs	r2, #88	; 0x58
    6f34:	5a9b      	ldrh	r3, [r3, r2]
    6f36:	3301      	adds	r3, #1
    6f38:	b299      	uxth	r1, r3
    6f3a:	4b03      	ldr	r3, [pc, #12]	; (6f48 <NWK_Lock+0x1c>)
    6f3c:	2258      	movs	r2, #88	; 0x58
    6f3e:	5299      	strh	r1, [r3, r2]
}
    6f40:	46c0      	nop			; (mov r8, r8)
    6f42:	46bd      	mov	sp, r7
    6f44:	bd80      	pop	{r7, pc}
    6f46:	46c0      	nop			; (mov r8, r8)
    6f48:	20001024 	.word	0x20001024

00006f4c <NWK_Unlock>:

/*************************************************************************//**
*  @brief Decreases the lock counter and sets a free state if counter reaches 0
*****************************************************************************/
void NWK_Unlock(void)
{
    6f4c:	b580      	push	{r7, lr}
    6f4e:	af00      	add	r7, sp, #0
	nwkIb.lock--;
    6f50:	4b05      	ldr	r3, [pc, #20]	; (6f68 <NWK_Unlock+0x1c>)
    6f52:	2258      	movs	r2, #88	; 0x58
    6f54:	5a9b      	ldrh	r3, [r3, r2]
    6f56:	3b01      	subs	r3, #1
    6f58:	b299      	uxth	r1, r3
    6f5a:	4b03      	ldr	r3, [pc, #12]	; (6f68 <NWK_Unlock+0x1c>)
    6f5c:	2258      	movs	r2, #88	; 0x58
    6f5e:	5299      	strh	r1, [r3, r2]
}
    6f60:	46c0      	nop			; (mov r8, r8)
    6f62:	46bd      	mov	sp, r7
    6f64:	bd80      	pop	{r7, pc}
    6f66:	46c0      	nop			; (mov r8, r8)
    6f68:	20001024 	.word	0x20001024

00006f6c <NWK_SleepReq>:

/*************************************************************************//**
*  @brief Puts network layer to a sleeping state
*****************************************************************************/
void NWK_SleepReq(void)
{
    6f6c:	b580      	push	{r7, lr}
    6f6e:	af00      	add	r7, sp, #0
	PHY_Sleep();
    6f70:	4b02      	ldr	r3, [pc, #8]	; (6f7c <NWK_SleepReq+0x10>)
    6f72:	4798      	blx	r3
}
    6f74:	46c0      	nop			; (mov r8, r8)
    6f76:	46bd      	mov	sp, r7
    6f78:	bd80      	pop	{r7, pc}
    6f7a:	46c0      	nop			; (mov r8, r8)
    6f7c:	00006a31 	.word	0x00006a31

00006f80 <NWK_WakeupReq>:

/*************************************************************************//**
*  @brief Puts network layer to an active state
*****************************************************************************/
void NWK_WakeupReq(void)
{
    6f80:	b580      	push	{r7, lr}
    6f82:	af00      	add	r7, sp, #0
	PHY_Wakeup();
    6f84:	4b02      	ldr	r3, [pc, #8]	; (6f90 <NWK_WakeupReq+0x10>)
    6f86:	4798      	blx	r3
}
    6f88:	46c0      	nop			; (mov r8, r8)
    6f8a:	46bd      	mov	sp, r7
    6f8c:	bd80      	pop	{r7, pc}
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	00006a5d 	.word	0x00006a5d

00006f94 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    6f94:	b580      	push	{r7, lr}
    6f96:	af00      	add	r7, sp, #0
	nwkRxTaskHandler();
    6f98:	4b05      	ldr	r3, [pc, #20]	; (6fb0 <NWK_TaskHandler+0x1c>)
    6f9a:	4798      	blx	r3
	nwkTxTaskHandler();
    6f9c:	4b05      	ldr	r3, [pc, #20]	; (6fb4 <NWK_TaskHandler+0x20>)
    6f9e:	4798      	blx	r3
	nwkDataReqTaskHandler();
    6fa0:	4b05      	ldr	r3, [pc, #20]	; (6fb8 <NWK_TaskHandler+0x24>)
    6fa2:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    6fa4:	4b05      	ldr	r3, [pc, #20]	; (6fbc <NWK_TaskHandler+0x28>)
    6fa6:	4798      	blx	r3
#endif
}
    6fa8:	46c0      	nop			; (mov r8, r8)
    6faa:	46bd      	mov	sp, r7
    6fac:	bd80      	pop	{r7, pc}
    6fae:	46c0      	nop			; (mov r8, r8)
    6fb0:	00008f39 	.word	0x00008f39
    6fb4:	00009a9d 	.word	0x00009a9d
    6fb8:	00007325 	.word	0x00007325
    6fbc:	0000933d 	.word	0x0000933d

00006fc0 <nwkDataReqInit>:

/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
    6fc0:	b580      	push	{r7, lr}
    6fc2:	af00      	add	r7, sp, #0
	nwkDataReqQueue = NULL;
    6fc4:	4b02      	ldr	r3, [pc, #8]	; (6fd0 <nwkDataReqInit+0x10>)
    6fc6:	2200      	movs	r2, #0
    6fc8:	601a      	str	r2, [r3, #0]
}
    6fca:	46c0      	nop			; (mov r8, r8)
    6fcc:	46bd      	mov	sp, r7
    6fce:	bd80      	pop	{r7, pc}
    6fd0:	200002bc 	.word	0x200002bc

00006fd4 <NWK_DataReq>:
/*************************************************************************//**
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    6fd4:	b580      	push	{r7, lr}
    6fd6:	b082      	sub	sp, #8
    6fd8:	af00      	add	r7, sp, #0
    6fda:	6078      	str	r0, [r7, #4]
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    6fdc:	687b      	ldr	r3, [r7, #4]
    6fde:	2200      	movs	r2, #0
    6fe0:	721a      	strb	r2, [r3, #8]
	req->status = NWK_SUCCESS_STATUS;
    6fe2:	687b      	ldr	r3, [r7, #4]
    6fe4:	2200      	movs	r2, #0
    6fe6:	771a      	strb	r2, [r3, #28]
	req->frame = NULL;
    6fe8:	687b      	ldr	r3, [r7, #4]
    6fea:	2200      	movs	r2, #0
    6fec:	605a      	str	r2, [r3, #4]

	nwkIb.lock++;
    6fee:	4b0f      	ldr	r3, [pc, #60]	; (702c <NWK_DataReq+0x58>)
    6ff0:	2258      	movs	r2, #88	; 0x58
    6ff2:	5a9b      	ldrh	r3, [r3, r2]
    6ff4:	3301      	adds	r3, #1
    6ff6:	b299      	uxth	r1, r3
    6ff8:	4b0c      	ldr	r3, [pc, #48]	; (702c <NWK_DataReq+0x58>)
    6ffa:	2258      	movs	r2, #88	; 0x58
    6ffc:	5299      	strh	r1, [r3, r2]

	if (NULL == nwkDataReqQueue) {
    6ffe:	4b0c      	ldr	r3, [pc, #48]	; (7030 <NWK_DataReq+0x5c>)
    7000:	681b      	ldr	r3, [r3, #0]
    7002:	2b00      	cmp	r3, #0
    7004:	d106      	bne.n	7014 <NWK_DataReq+0x40>
		req->next = NULL;
    7006:	687b      	ldr	r3, [r7, #4]
    7008:	2200      	movs	r2, #0
    700a:	601a      	str	r2, [r3, #0]
		nwkDataReqQueue = req;
    700c:	4b08      	ldr	r3, [pc, #32]	; (7030 <NWK_DataReq+0x5c>)
    700e:	687a      	ldr	r2, [r7, #4]
    7010:	601a      	str	r2, [r3, #0]
	} else {
		req->next = nwkDataReqQueue;
		nwkDataReqQueue = req;
	}
}
    7012:	e006      	b.n	7022 <NWK_DataReq+0x4e>

	if (NULL == nwkDataReqQueue) {
		req->next = NULL;
		nwkDataReqQueue = req;
	} else {
		req->next = nwkDataReqQueue;
    7014:	4b06      	ldr	r3, [pc, #24]	; (7030 <NWK_DataReq+0x5c>)
    7016:	681a      	ldr	r2, [r3, #0]
    7018:	687b      	ldr	r3, [r7, #4]
    701a:	601a      	str	r2, [r3, #0]
		nwkDataReqQueue = req;
    701c:	4b04      	ldr	r3, [pc, #16]	; (7030 <NWK_DataReq+0x5c>)
    701e:	687a      	ldr	r2, [r7, #4]
    7020:	601a      	str	r2, [r3, #0]
	}
}
    7022:	46c0      	nop			; (mov r8, r8)
    7024:	46bd      	mov	sp, r7
    7026:	b002      	add	sp, #8
    7028:	bd80      	pop	{r7, pc}
    702a:	46c0      	nop			; (mov r8, r8)
    702c:	20001024 	.word	0x20001024
    7030:	200002bc 	.word	0x200002bc

00007034 <nwkDataReqSendFrame>:
*  @brief Prepares and send outgoing frame based on the request @a req
* parameters
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
    7034:	b5f0      	push	{r4, r5, r6, r7, lr}
    7036:	b085      	sub	sp, #20
    7038:	af00      	add	r7, sp, #0
    703a:	6078      	str	r0, [r7, #4]
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    703c:	4b82      	ldr	r3, [pc, #520]	; (7248 <nwkDataReqSendFrame+0x214>)
    703e:	4798      	blx	r3
    7040:	0003      	movs	r3, r0
    7042:	60fb      	str	r3, [r7, #12]
    7044:	68fb      	ldr	r3, [r7, #12]
    7046:	2b00      	cmp	r3, #0
    7048:	d106      	bne.n	7058 <nwkDataReqSendFrame+0x24>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    704a:	687b      	ldr	r3, [r7, #4]
    704c:	2202      	movs	r2, #2
    704e:	721a      	strb	r2, [r3, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    7050:	687b      	ldr	r3, [r7, #4]
    7052:	2202      	movs	r2, #2
    7054:	771a      	strb	r2, [r3, #28]
		return;
    7056:	e0f3      	b.n	7240 <nwkDataReqSendFrame+0x20c>
	}

	req->frame = frame;
    7058:	687b      	ldr	r3, [r7, #4]
    705a:	68fa      	ldr	r2, [r7, #12]
    705c:	605a      	str	r2, [r3, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    705e:	687b      	ldr	r3, [r7, #4]
    7060:	2201      	movs	r2, #1
    7062:	721a      	strb	r2, [r3, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    7064:	68fb      	ldr	r3, [r7, #12]
    7066:	2289      	movs	r2, #137	; 0x89
    7068:	4978      	ldr	r1, [pc, #480]	; (724c <nwkDataReqSendFrame+0x218>)
    706a:	20ff      	movs	r0, #255	; 0xff
    706c:	4008      	ands	r0, r1
    706e:	0005      	movs	r5, r0
    7070:	5c98      	ldrb	r0, [r3, r2]
    7072:	2400      	movs	r4, #0
    7074:	4020      	ands	r0, r4
    7076:	1c04      	adds	r4, r0, #0
    7078:	1c28      	adds	r0, r5, #0
    707a:	4320      	orrs	r0, r4
    707c:	5498      	strb	r0, [r3, r2]
    707e:	0a08      	lsrs	r0, r1, #8
    7080:	24ff      	movs	r4, #255	; 0xff
    7082:	4020      	ands	r0, r4
    7084:	0006      	movs	r6, r0
    7086:	1898      	adds	r0, r3, r2
    7088:	7844      	ldrb	r4, [r0, #1]
    708a:	2500      	movs	r5, #0
    708c:	402c      	ands	r4, r5
    708e:	1c25      	adds	r5, r4, #0
    7090:	1c34      	adds	r4, r6, #0
    7092:	432c      	orrs	r4, r5
    7094:	7044      	strb	r4, [r0, #1]
    7096:	0c08      	lsrs	r0, r1, #16
    7098:	24ff      	movs	r4, #255	; 0xff
    709a:	4020      	ands	r0, r4
    709c:	0006      	movs	r6, r0
    709e:	1898      	adds	r0, r3, r2
    70a0:	7884      	ldrb	r4, [r0, #2]
    70a2:	2500      	movs	r5, #0
    70a4:	402c      	ands	r4, r5
    70a6:	1c25      	adds	r5, r4, #0
    70a8:	1c34      	adds	r4, r6, #0
    70aa:	432c      	orrs	r4, r5
    70ac:	7084      	strb	r4, [r0, #2]
    70ae:	0e08      	lsrs	r0, r1, #24
    70b0:	189b      	adds	r3, r3, r2
    70b2:	78da      	ldrb	r2, [r3, #3]
    70b4:	2100      	movs	r1, #0
    70b6:	400a      	ands	r2, r1
    70b8:	1c11      	adds	r1, r2, #0
    70ba:	1c02      	adds	r2, r0, #0
    70bc:	430a      	orrs	r2, r1
    70be:	70da      	strb	r2, [r3, #3]
	frame->tx.control = req->options &
    70c0:	687b      	ldr	r3, [r7, #4]
    70c2:	7b9b      	ldrb	r3, [r3, #14]
    70c4:	001a      	movs	r2, r3
    70c6:	2304      	movs	r3, #4
    70c8:	4013      	ands	r3, r2
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;
    70ca:	1e5a      	subs	r2, r3, #1
    70cc:	4193      	sbcs	r3, r2
    70ce:	b2db      	uxtb	r3, r3
    70d0:	0019      	movs	r1, r3

	req->frame = frame;
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;

	frame->tx.confirm = nwkDataReqTxConf;
	frame->tx.control = req->options &
    70d2:	68fb      	ldr	r3, [r7, #12]
    70d4:	2288      	movs	r2, #136	; 0x88
    70d6:	5499      	strb	r1, [r3, r2]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	7b9b      	ldrb	r3, [r3, #14]
    70dc:	001a      	movs	r2, r3
    70de:	2301      	movs	r3, #1
    70e0:	4013      	ands	r3, r2
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    70e2:	1e5a      	subs	r2, r3, #1
    70e4:	4193      	sbcs	r3, r2
    70e6:	b2da      	uxtb	r2, r3
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    70e8:	68fb      	ldr	r3, [r7, #12]
    70ea:	2101      	movs	r1, #1
    70ec:	400a      	ands	r2, r1
    70ee:	0010      	movs	r0, r2
    70f0:	7ada      	ldrb	r2, [r3, #11]
    70f2:	2101      	movs	r1, #1
    70f4:	438a      	bics	r2, r1
    70f6:	1c11      	adds	r1, r2, #0
    70f8:	1c02      	adds	r2, r0, #0
    70fa:	430a      	orrs	r2, r1
    70fc:	72da      	strb	r2, [r3, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    70fe:	687b      	ldr	r3, [r7, #4]
    7100:	7b9b      	ldrb	r3, [r3, #14]
    7102:	001a      	movs	r2, r3
    7104:	2308      	movs	r3, #8
    7106:	4013      	ands	r3, r2
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    7108:	1e5a      	subs	r2, r3, #1
    710a:	4193      	sbcs	r3, r2
    710c:	b2da      	uxtb	r2, r3
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    710e:	68fb      	ldr	r3, [r7, #12]
    7110:	2101      	movs	r1, #1
    7112:	400a      	ands	r2, r1
    7114:	0090      	lsls	r0, r2, #2
    7116:	7ada      	ldrb	r2, [r3, #11]
    7118:	2104      	movs	r1, #4
    711a:	438a      	bics	r2, r1
    711c:	1c11      	adds	r1, r2, #0
    711e:	1c02      	adds	r2, r0, #0
    7120:	430a      	orrs	r2, r1
    7122:	72da      	strb	r2, [r3, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    7124:	687b      	ldr	r3, [r7, #4]
    7126:	7b9b      	ldrb	r3, [r3, #14]
    7128:	001a      	movs	r2, r3
    712a:	2302      	movs	r3, #2
    712c:	4013      	ands	r3, r2
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    712e:	1e5a      	subs	r2, r3, #1
    7130:	4193      	sbcs	r3, r2
    7132:	b2da      	uxtb	r2, r3
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    7134:	68fb      	ldr	r3, [r7, #12]
    7136:	2101      	movs	r1, #1
    7138:	400a      	ands	r2, r1
    713a:	1890      	adds	r0, r2, r2
    713c:	7ada      	ldrb	r2, [r3, #11]
    713e:	2102      	movs	r1, #2
    7140:	438a      	bics	r2, r1
    7142:	1c11      	adds	r1, r2, #0
    7144:	1c02      	adds	r2, r0, #0
    7146:	430a      	orrs	r2, r1
    7148:	72da      	strb	r2, [r3, #11]
		frame->payload += sizeof(NwkFrameMulticastHeader_t);
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}
#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    714a:	4b41      	ldr	r3, [pc, #260]	; (7250 <nwkDataReqSendFrame+0x21c>)
    714c:	791b      	ldrb	r3, [r3, #4]
    714e:	3301      	adds	r3, #1
    7150:	b2da      	uxtb	r2, r3
    7152:	4b3f      	ldr	r3, [pc, #252]	; (7250 <nwkDataReqSendFrame+0x21c>)
    7154:	711a      	strb	r2, [r3, #4]
    7156:	4b3e      	ldr	r3, [pc, #248]	; (7250 <nwkDataReqSendFrame+0x21c>)
    7158:	791a      	ldrb	r2, [r3, #4]
    715a:	68fb      	ldr	r3, [r7, #12]
    715c:	731a      	strb	r2, [r3, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    715e:	4b3c      	ldr	r3, [pc, #240]	; (7250 <nwkDataReqSendFrame+0x21c>)
    7160:	881a      	ldrh	r2, [r3, #0]
    7162:	68fb      	ldr	r3, [r7, #12]
    7164:	330d      	adds	r3, #13
    7166:	21ff      	movs	r1, #255	; 0xff
    7168:	4011      	ands	r1, r2
    716a:	000c      	movs	r4, r1
    716c:	7819      	ldrb	r1, [r3, #0]
    716e:	2000      	movs	r0, #0
    7170:	4001      	ands	r1, r0
    7172:	1c08      	adds	r0, r1, #0
    7174:	1c21      	adds	r1, r4, #0
    7176:	4301      	orrs	r1, r0
    7178:	7019      	strb	r1, [r3, #0]
    717a:	0a12      	lsrs	r2, r2, #8
    717c:	b290      	uxth	r0, r2
    717e:	785a      	ldrb	r2, [r3, #1]
    7180:	2100      	movs	r1, #0
    7182:	400a      	ands	r2, r1
    7184:	1c11      	adds	r1, r2, #0
    7186:	1c02      	adds	r2, r0, #0
    7188:	430a      	orrs	r2, r1
    718a:	705a      	strb	r2, [r3, #1]
	frame->header.nwkDstAddr = req->dstAddr;
    718c:	687b      	ldr	r3, [r7, #4]
    718e:	895a      	ldrh	r2, [r3, #10]
    7190:	68fb      	ldr	r3, [r7, #12]
    7192:	330f      	adds	r3, #15
    7194:	21ff      	movs	r1, #255	; 0xff
    7196:	4011      	ands	r1, r2
    7198:	000c      	movs	r4, r1
    719a:	7819      	ldrb	r1, [r3, #0]
    719c:	2000      	movs	r0, #0
    719e:	4001      	ands	r1, r0
    71a0:	1c08      	adds	r0, r1, #0
    71a2:	1c21      	adds	r1, r4, #0
    71a4:	4301      	orrs	r1, r0
    71a6:	7019      	strb	r1, [r3, #0]
    71a8:	0a12      	lsrs	r2, r2, #8
    71aa:	b290      	uxth	r0, r2
    71ac:	785a      	ldrb	r2, [r3, #1]
    71ae:	2100      	movs	r1, #0
    71b0:	400a      	ands	r2, r1
    71b2:	1c11      	adds	r1, r2, #0
    71b4:	1c02      	adds	r2, r0, #0
    71b6:	430a      	orrs	r2, r1
    71b8:	705a      	strb	r2, [r3, #1]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    71ba:	687b      	ldr	r3, [r7, #4]
    71bc:	7b5b      	ldrb	r3, [r3, #13]
    71be:	1c1a      	adds	r2, r3, #0
    71c0:	230f      	movs	r3, #15
    71c2:	4013      	ands	r3, r2
    71c4:	b2da      	uxtb	r2, r3
    71c6:	68fb      	ldr	r3, [r7, #12]
    71c8:	210f      	movs	r1, #15
    71ca:	400a      	ands	r2, r1
    71cc:	0010      	movs	r0, r2
    71ce:	7c5a      	ldrb	r2, [r3, #17]
    71d0:	210f      	movs	r1, #15
    71d2:	438a      	bics	r2, r1
    71d4:	1c11      	adds	r1, r2, #0
    71d6:	1c02      	adds	r2, r0, #0
    71d8:	430a      	orrs	r2, r1
    71da:	745a      	strb	r2, [r3, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    71dc:	687b      	ldr	r3, [r7, #4]
    71de:	7b1b      	ldrb	r3, [r3, #12]
    71e0:	1c1a      	adds	r2, r3, #0
    71e2:	230f      	movs	r3, #15
    71e4:	4013      	ands	r3, r2
    71e6:	b2da      	uxtb	r2, r3
    71e8:	68fb      	ldr	r3, [r7, #12]
    71ea:	0110      	lsls	r0, r2, #4
    71ec:	7c5a      	ldrb	r2, [r3, #17]
    71ee:	210f      	movs	r1, #15
    71f0:	400a      	ands	r2, r1
    71f2:	1c11      	adds	r1, r2, #0
    71f4:	1c02      	adds	r2, r0, #0
    71f6:	430a      	orrs	r2, r1
    71f8:	745a      	strb	r2, [r3, #17]

	memcpy(frame->payload, req->data, req->size);
    71fa:	68fb      	ldr	r3, [r7, #12]
    71fc:	2281      	movs	r2, #129	; 0x81
    71fe:	5c9a      	ldrb	r2, [r3, r2]
    7200:	2182      	movs	r1, #130	; 0x82
    7202:	5c59      	ldrb	r1, [r3, r1]
    7204:	0209      	lsls	r1, r1, #8
    7206:	430a      	orrs	r2, r1
    7208:	2183      	movs	r1, #131	; 0x83
    720a:	5c59      	ldrb	r1, [r3, r1]
    720c:	0409      	lsls	r1, r1, #16
    720e:	430a      	orrs	r2, r1
    7210:	2184      	movs	r1, #132	; 0x84
    7212:	5c5b      	ldrb	r3, [r3, r1]
    7214:	061b      	lsls	r3, r3, #24
    7216:	4313      	orrs	r3, r2
    7218:	0018      	movs	r0, r3
    721a:	687b      	ldr	r3, [r7, #4]
    721c:	6919      	ldr	r1, [r3, #16]
    721e:	687b      	ldr	r3, [r7, #4]
    7220:	7d1b      	ldrb	r3, [r3, #20]
    7222:	001a      	movs	r2, r3
    7224:	4b0b      	ldr	r3, [pc, #44]	; (7254 <nwkDataReqSendFrame+0x220>)
    7226:	4798      	blx	r3
	frame->size += req->size;
    7228:	68fb      	ldr	r3, [r7, #12]
    722a:	785a      	ldrb	r2, [r3, #1]
    722c:	687b      	ldr	r3, [r7, #4]
    722e:	7d1b      	ldrb	r3, [r3, #20]
    7230:	18d3      	adds	r3, r2, r3
    7232:	b2da      	uxtb	r2, r3
    7234:	68fb      	ldr	r3, [r7, #12]
    7236:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(frame);
    7238:	68fb      	ldr	r3, [r7, #12]
    723a:	0018      	movs	r0, r3
    723c:	4b06      	ldr	r3, [pc, #24]	; (7258 <nwkDataReqSendFrame+0x224>)
    723e:	4798      	blx	r3
}
    7240:	46bd      	mov	sp, r7
    7242:	b005      	add	sp, #20
    7244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7246:	46c0      	nop			; (mov r8, r8)
    7248:	000073b5 	.word	0x000073b5
    724c:	0000725d 	.word	0x0000725d
    7250:	20001024 	.word	0x20001024
    7254:	0000e9ad 	.word	0x0000e9ad
    7258:	00009475 	.word	0x00009475

0000725c <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    725c:	b580      	push	{r7, lr}
    725e:	b084      	sub	sp, #16
    7260:	af00      	add	r7, sp, #0
    7262:	6078      	str	r0, [r7, #4]
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    7264:	4b12      	ldr	r3, [pc, #72]	; (72b0 <nwkDataReqTxConf+0x54>)
    7266:	681b      	ldr	r3, [r3, #0]
    7268:	60fb      	str	r3, [r7, #12]
    726a:	e015      	b.n	7298 <nwkDataReqTxConf+0x3c>
		if (req->frame == frame) {
    726c:	68fb      	ldr	r3, [r7, #12]
    726e:	685a      	ldr	r2, [r3, #4]
    7270:	687b      	ldr	r3, [r7, #4]
    7272:	429a      	cmp	r2, r3
    7274:	d10d      	bne.n	7292 <nwkDataReqTxConf+0x36>
			req->status = frame->tx.status;
    7276:	687b      	ldr	r3, [r7, #4]
    7278:	2285      	movs	r2, #133	; 0x85
    727a:	5c9a      	ldrb	r2, [r3, r2]
    727c:	68fb      	ldr	r3, [r7, #12]
    727e:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    7280:	687b      	ldr	r3, [r7, #4]
    7282:	2288      	movs	r2, #136	; 0x88
    7284:	5c9a      	ldrb	r2, [r3, r2]
    7286:	68fb      	ldr	r3, [r7, #12]
    7288:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    728a:	68fb      	ldr	r3, [r7, #12]
    728c:	2202      	movs	r2, #2
    728e:	721a      	strb	r2, [r3, #8]
			break;
    7290:	e005      	b.n	729e <nwkDataReqTxConf+0x42>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    7292:	68fb      	ldr	r3, [r7, #12]
    7294:	681b      	ldr	r3, [r3, #0]
    7296:	60fb      	str	r3, [r7, #12]
    7298:	68fb      	ldr	r3, [r7, #12]
    729a:	2b00      	cmp	r3, #0
    729c:	d1e6      	bne.n	726c <nwkDataReqTxConf+0x10>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    729e:	687b      	ldr	r3, [r7, #4]
    72a0:	0018      	movs	r0, r3
    72a2:	4b04      	ldr	r3, [pc, #16]	; (72b4 <nwkDataReqTxConf+0x58>)
    72a4:	4798      	blx	r3
}
    72a6:	46c0      	nop			; (mov r8, r8)
    72a8:	46bd      	mov	sp, r7
    72aa:	b004      	add	sp, #16
    72ac:	bd80      	pop	{r7, pc}
    72ae:	46c0      	nop			; (mov r8, r8)
    72b0:	200002bc 	.word	0x200002bc
    72b4:	000074b5 	.word	0x000074b5

000072b8 <nwkDataReqConfirm>:
/*************************************************************************//**
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
    72b8:	b580      	push	{r7, lr}
    72ba:	b084      	sub	sp, #16
    72bc:	af00      	add	r7, sp, #0
    72be:	6078      	str	r0, [r7, #4]
	if (nwkDataReqQueue == req) {
    72c0:	4b16      	ldr	r3, [pc, #88]	; (731c <nwkDataReqConfirm+0x64>)
    72c2:	681a      	ldr	r2, [r3, #0]
    72c4:	687b      	ldr	r3, [r7, #4]
    72c6:	429a      	cmp	r2, r3
    72c8:	d105      	bne.n	72d6 <nwkDataReqConfirm+0x1e>
		nwkDataReqQueue = nwkDataReqQueue->next;
    72ca:	4b14      	ldr	r3, [pc, #80]	; (731c <nwkDataReqConfirm+0x64>)
    72cc:	681b      	ldr	r3, [r3, #0]
    72ce:	681a      	ldr	r2, [r3, #0]
    72d0:	4b12      	ldr	r3, [pc, #72]	; (731c <nwkDataReqConfirm+0x64>)
    72d2:	601a      	str	r2, [r3, #0]
    72d4:	e010      	b.n	72f8 <nwkDataReqConfirm+0x40>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
    72d6:	4b11      	ldr	r3, [pc, #68]	; (731c <nwkDataReqConfirm+0x64>)
    72d8:	681b      	ldr	r3, [r3, #0]
    72da:	60fb      	str	r3, [r7, #12]
		while (prev->next != req) {
    72dc:	e002      	b.n	72e4 <nwkDataReqConfirm+0x2c>
			prev = prev->next;
    72de:	68fb      	ldr	r3, [r7, #12]
    72e0:	681b      	ldr	r3, [r3, #0]
    72e2:	60fb      	str	r3, [r7, #12]
{
	if (nwkDataReqQueue == req) {
		nwkDataReqQueue = nwkDataReqQueue->next;
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    72e4:	68fb      	ldr	r3, [r7, #12]
    72e6:	681a      	ldr	r2, [r3, #0]
    72e8:	687b      	ldr	r3, [r7, #4]
    72ea:	429a      	cmp	r2, r3
    72ec:	d1f7      	bne.n	72de <nwkDataReqConfirm+0x26>
			prev = prev->next;
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    72ee:	68fb      	ldr	r3, [r7, #12]
    72f0:	681b      	ldr	r3, [r3, #0]
    72f2:	681a      	ldr	r2, [r3, #0]
    72f4:	68fb      	ldr	r3, [r7, #12]
    72f6:	601a      	str	r2, [r3, #0]
	}

	nwkIb.lock--;
    72f8:	4b09      	ldr	r3, [pc, #36]	; (7320 <nwkDataReqConfirm+0x68>)
    72fa:	2258      	movs	r2, #88	; 0x58
    72fc:	5a9b      	ldrh	r3, [r3, r2]
    72fe:	3b01      	subs	r3, #1
    7300:	b299      	uxth	r1, r3
    7302:	4b07      	ldr	r3, [pc, #28]	; (7320 <nwkDataReqConfirm+0x68>)
    7304:	2258      	movs	r2, #88	; 0x58
    7306:	5299      	strh	r1, [r3, r2]
	req->confirm(req);
    7308:	687b      	ldr	r3, [r7, #4]
    730a:	699b      	ldr	r3, [r3, #24]
    730c:	687a      	ldr	r2, [r7, #4]
    730e:	0010      	movs	r0, r2
    7310:	4798      	blx	r3
}
    7312:	46c0      	nop			; (mov r8, r8)
    7314:	46bd      	mov	sp, r7
    7316:	b004      	add	sp, #16
    7318:	bd80      	pop	{r7, pc}
    731a:	46c0      	nop			; (mov r8, r8)
    731c:	200002bc 	.word	0x200002bc
    7320:	20001024 	.word	0x20001024

00007324 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    7324:	b580      	push	{r7, lr}
    7326:	b082      	sub	sp, #8
    7328:	af00      	add	r7, sp, #0
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    732a:	4b10      	ldr	r3, [pc, #64]	; (736c <nwkDataReqTaskHandler+0x48>)
    732c:	681b      	ldr	r3, [r3, #0]
    732e:	607b      	str	r3, [r7, #4]
    7330:	e016      	b.n	7360 <nwkDataReqTaskHandler+0x3c>
		switch (req->state) {
    7332:	687b      	ldr	r3, [r7, #4]
    7334:	7a1b      	ldrb	r3, [r3, #8]
    7336:	2b01      	cmp	r3, #1
    7338:	d00e      	beq.n	7358 <nwkDataReqTaskHandler+0x34>
    733a:	2b02      	cmp	r3, #2
    733c:	d007      	beq.n	734e <nwkDataReqTaskHandler+0x2a>
    733e:	2b00      	cmp	r3, #0
    7340:	d000      	beq.n	7344 <nwkDataReqTaskHandler+0x20>
			return;
		}
		break;

		default:
			break;
    7342:	e00a      	b.n	735a <nwkDataReqTaskHandler+0x36>
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
		switch (req->state) {
		case NWK_DATA_REQ_STATE_INITIAL:
		{
			nwkDataReqSendFrame(req);
    7344:	687b      	ldr	r3, [r7, #4]
    7346:	0018      	movs	r0, r3
    7348:	4b09      	ldr	r3, [pc, #36]	; (7370 <nwkDataReqTaskHandler+0x4c>)
    734a:	4798      	blx	r3
			return;
    734c:	e00b      	b.n	7366 <nwkDataReqTaskHandler+0x42>
		case NWK_DATA_REQ_STATE_WAIT_CONF:
			break;

		case NWK_DATA_REQ_STATE_CONFIRM:
		{
			nwkDataReqConfirm(req);
    734e:	687b      	ldr	r3, [r7, #4]
    7350:	0018      	movs	r0, r3
    7352:	4b08      	ldr	r3, [pc, #32]	; (7374 <nwkDataReqTaskHandler+0x50>)
    7354:	4798      	blx	r3
			return;
    7356:	e006      	b.n	7366 <nwkDataReqTaskHandler+0x42>
			return;
		}
		break;

		case NWK_DATA_REQ_STATE_WAIT_CONF:
			break;
    7358:	46c0      	nop			; (mov r8, r8)
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    735a:	687b      	ldr	r3, [r7, #4]
    735c:	681b      	ldr	r3, [r3, #0]
    735e:	607b      	str	r3, [r7, #4]
    7360:	687b      	ldr	r3, [r7, #4]
    7362:	2b00      	cmp	r3, #0
    7364:	d1e5      	bne.n	7332 <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    7366:	46bd      	mov	sp, r7
    7368:	b002      	add	sp, #8
    736a:	bd80      	pop	{r7, pc}
    736c:	200002bc 	.word	0x200002bc
    7370:	00007035 	.word	0x00007035
    7374:	000072b9 	.word	0x000072b9

00007378 <nwkFrameInit>:

/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    7378:	b580      	push	{r7, lr}
    737a:	b082      	sub	sp, #8
    737c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    737e:	1dfb      	adds	r3, r7, #7
    7380:	2200      	movs	r2, #0
    7382:	701a      	strb	r2, [r3, #0]
    7384:	e00b      	b.n	739e <nwkFrameInit+0x26>
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    7386:	1dfb      	adds	r3, r7, #7
    7388:	781a      	ldrb	r2, [r3, #0]
    738a:	4b09      	ldr	r3, [pc, #36]	; (73b0 <nwkFrameInit+0x38>)
    738c:	218d      	movs	r1, #141	; 0x8d
    738e:	434a      	muls	r2, r1
    7390:	2100      	movs	r1, #0
    7392:	54d1      	strb	r1, [r2, r3]
/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    7394:	1dfb      	adds	r3, r7, #7
    7396:	781a      	ldrb	r2, [r3, #0]
    7398:	1dfb      	adds	r3, r7, #7
    739a:	3201      	adds	r2, #1
    739c:	701a      	strb	r2, [r3, #0]
    739e:	1dfb      	adds	r3, r7, #7
    73a0:	781b      	ldrb	r3, [r3, #0]
    73a2:	2b09      	cmp	r3, #9
    73a4:	d9ef      	bls.n	7386 <nwkFrameInit+0xe>
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
	}
}
    73a6:	46c0      	nop			; (mov r8, r8)
    73a8:	46bd      	mov	sp, r7
    73aa:	b002      	add	sp, #8
    73ac:	bd80      	pop	{r7, pc}
    73ae:	46c0      	nop			; (mov r8, r8)
    73b0:	200002c0 	.word	0x200002c0

000073b4 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    73b4:	b590      	push	{r4, r7, lr}
    73b6:	b083      	sub	sp, #12
    73b8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    73ba:	1dfb      	adds	r3, r7, #7
    73bc:	2200      	movs	r2, #0
    73be:	701a      	strb	r2, [r3, #0]
    73c0:	e068      	b.n	7494 <nwkFrameAlloc+0xe0>
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    73c2:	1dfb      	adds	r3, r7, #7
    73c4:	781a      	ldrb	r2, [r3, #0]
    73c6:	4b38      	ldr	r3, [pc, #224]	; (74a8 <nwkFrameAlloc+0xf4>)
    73c8:	218d      	movs	r1, #141	; 0x8d
    73ca:	434a      	muls	r2, r1
    73cc:	5cd3      	ldrb	r3, [r2, r3]
    73ce:	2b00      	cmp	r3, #0
    73d0:	d15b      	bne.n	748a <nwkFrameAlloc+0xd6>
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    73d2:	1dfb      	adds	r3, r7, #7
    73d4:	781b      	ldrb	r3, [r3, #0]
    73d6:	228d      	movs	r2, #141	; 0x8d
    73d8:	435a      	muls	r2, r3
    73da:	4b33      	ldr	r3, [pc, #204]	; (74a8 <nwkFrameAlloc+0xf4>)
    73dc:	18d3      	adds	r3, r2, r3
    73de:	228d      	movs	r2, #141	; 0x8d
    73e0:	2100      	movs	r1, #0
    73e2:	0018      	movs	r0, r3
    73e4:	4b31      	ldr	r3, [pc, #196]	; (74ac <nwkFrameAlloc+0xf8>)
    73e6:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    73e8:	1dfb      	adds	r3, r7, #7
    73ea:	781b      	ldrb	r3, [r3, #0]
    73ec:	4a2e      	ldr	r2, [pc, #184]	; (74a8 <nwkFrameAlloc+0xf4>)
    73ee:	218d      	movs	r1, #141	; 0x8d
    73f0:	434b      	muls	r3, r1
    73f2:	18d3      	adds	r3, r2, r3
    73f4:	3301      	adds	r3, #1
    73f6:	2210      	movs	r2, #16
    73f8:	701a      	strb	r2, [r3, #0]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    73fa:	1dfb      	adds	r3, r7, #7
    73fc:	781b      	ldrb	r3, [r3, #0]
    73fe:	1dfa      	adds	r2, r7, #7
    7400:	7812      	ldrb	r2, [r2, #0]
    7402:	218d      	movs	r1, #141	; 0x8d
    7404:	4351      	muls	r1, r2
    7406:	4a28      	ldr	r2, [pc, #160]	; (74a8 <nwkFrameAlloc+0xf4>)
    7408:	188a      	adds	r2, r1, r2
    740a:	3202      	adds	r2, #2
    740c:	3210      	adds	r2, #16
    740e:	4926      	ldr	r1, [pc, #152]	; (74a8 <nwkFrameAlloc+0xf4>)
    7410:	2080      	movs	r0, #128	; 0x80
    7412:	248d      	movs	r4, #141	; 0x8d
    7414:	4363      	muls	r3, r4
    7416:	18cb      	adds	r3, r1, r3
    7418:	181b      	adds	r3, r3, r0
    741a:	3301      	adds	r3, #1
    741c:	21ff      	movs	r1, #255	; 0xff
    741e:	4011      	ands	r1, r2
    7420:	000c      	movs	r4, r1
    7422:	7819      	ldrb	r1, [r3, #0]
    7424:	2000      	movs	r0, #0
    7426:	4001      	ands	r1, r0
    7428:	1c08      	adds	r0, r1, #0
    742a:	1c21      	adds	r1, r4, #0
    742c:	4301      	orrs	r1, r0
    742e:	7019      	strb	r1, [r3, #0]
    7430:	0a11      	lsrs	r1, r2, #8
    7432:	20ff      	movs	r0, #255	; 0xff
    7434:	4001      	ands	r1, r0
    7436:	000c      	movs	r4, r1
    7438:	7859      	ldrb	r1, [r3, #1]
    743a:	2000      	movs	r0, #0
    743c:	4001      	ands	r1, r0
    743e:	1c08      	adds	r0, r1, #0
    7440:	1c21      	adds	r1, r4, #0
    7442:	4301      	orrs	r1, r0
    7444:	7059      	strb	r1, [r3, #1]
    7446:	0c11      	lsrs	r1, r2, #16
    7448:	20ff      	movs	r0, #255	; 0xff
    744a:	4001      	ands	r1, r0
    744c:	000c      	movs	r4, r1
    744e:	7899      	ldrb	r1, [r3, #2]
    7450:	2000      	movs	r0, #0
    7452:	4001      	ands	r1, r0
    7454:	1c08      	adds	r0, r1, #0
    7456:	1c21      	adds	r1, r4, #0
    7458:	4301      	orrs	r1, r0
    745a:	7099      	strb	r1, [r3, #2]
    745c:	0e10      	lsrs	r0, r2, #24
    745e:	78da      	ldrb	r2, [r3, #3]
    7460:	2100      	movs	r1, #0
    7462:	400a      	ands	r2, r1
    7464:	1c11      	adds	r1, r2, #0
    7466:	1c02      	adds	r2, r0, #0
    7468:	430a      	orrs	r2, r1
    746a:	70da      	strb	r2, [r3, #3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    746c:	4b10      	ldr	r3, [pc, #64]	; (74b0 <nwkFrameAlloc+0xfc>)
    746e:	2258      	movs	r2, #88	; 0x58
    7470:	5a9b      	ldrh	r3, [r3, r2]
    7472:	3301      	adds	r3, #1
    7474:	b299      	uxth	r1, r3
    7476:	4b0e      	ldr	r3, [pc, #56]	; (74b0 <nwkFrameAlloc+0xfc>)
    7478:	2258      	movs	r2, #88	; 0x58
    747a:	5299      	strh	r1, [r3, r2]
			return &nwkFrameFrames[i];
    747c:	1dfb      	adds	r3, r7, #7
    747e:	781b      	ldrb	r3, [r3, #0]
    7480:	228d      	movs	r2, #141	; 0x8d
    7482:	435a      	muls	r2, r3
    7484:	4b08      	ldr	r3, [pc, #32]	; (74a8 <nwkFrameAlloc+0xf4>)
    7486:	18d3      	adds	r3, r2, r3
    7488:	e009      	b.n	749e <nwkFrameAlloc+0xea>
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    748a:	1dfb      	adds	r3, r7, #7
    748c:	781a      	ldrb	r2, [r3, #0]
    748e:	1dfb      	adds	r3, r7, #7
    7490:	3201      	adds	r2, #1
    7492:	701a      	strb	r2, [r3, #0]
    7494:	1dfb      	adds	r3, r7, #7
    7496:	781b      	ldrb	r3, [r3, #0]
    7498:	2b09      	cmp	r3, #9
    749a:	d992      	bls.n	73c2 <nwkFrameAlloc+0xe>
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    749c:	2300      	movs	r3, #0
}
    749e:	0018      	movs	r0, r3
    74a0:	46bd      	mov	sp, r7
    74a2:	b003      	add	sp, #12
    74a4:	bd90      	pop	{r4, r7, pc}
    74a6:	46c0      	nop			; (mov r8, r8)
    74a8:	200002c0 	.word	0x200002c0
    74ac:	0000e9bf 	.word	0x0000e9bf
    74b0:	20001024 	.word	0x20001024

000074b4 <nwkFrameFree>:
/*************************************************************************//**
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
    74b4:	b580      	push	{r7, lr}
    74b6:	b082      	sub	sp, #8
    74b8:	af00      	add	r7, sp, #0
    74ba:	6078      	str	r0, [r7, #4]
	frame->state = NWK_FRAME_STATE_FREE;
    74bc:	687b      	ldr	r3, [r7, #4]
    74be:	2200      	movs	r2, #0
    74c0:	701a      	strb	r2, [r3, #0]
	nwkIb.lock--;
    74c2:	4b06      	ldr	r3, [pc, #24]	; (74dc <nwkFrameFree+0x28>)
    74c4:	2258      	movs	r2, #88	; 0x58
    74c6:	5a9b      	ldrh	r3, [r3, r2]
    74c8:	3b01      	subs	r3, #1
    74ca:	b299      	uxth	r1, r3
    74cc:	4b03      	ldr	r3, [pc, #12]	; (74dc <nwkFrameFree+0x28>)
    74ce:	2258      	movs	r2, #88	; 0x58
    74d0:	5299      	strh	r1, [r3, r2]
}
    74d2:	46c0      	nop			; (mov r8, r8)
    74d4:	46bd      	mov	sp, r7
    74d6:	b002      	add	sp, #8
    74d8:	bd80      	pop	{r7, pc}
    74da:	46c0      	nop			; (mov r8, r8)
    74dc:	20001024 	.word	0x20001024

000074e0 <nwkFrameNext>:
* frame
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
    74e0:	b580      	push	{r7, lr}
    74e2:	b082      	sub	sp, #8
    74e4:	af00      	add	r7, sp, #0
    74e6:	6078      	str	r0, [r7, #4]
	if (NULL == frame) {
    74e8:	687b      	ldr	r3, [r7, #4]
    74ea:	2b00      	cmp	r3, #0
    74ec:	d102      	bne.n	74f4 <nwkFrameNext+0x14>
		frame = nwkFrameFrames;
    74ee:	4b0c      	ldr	r3, [pc, #48]	; (7520 <nwkFrameNext+0x40>)
    74f0:	607b      	str	r3, [r7, #4]
    74f2:	e00c      	b.n	750e <nwkFrameNext+0x2e>
	} else {
		frame++;
    74f4:	687b      	ldr	r3, [r7, #4]
    74f6:	338d      	adds	r3, #141	; 0x8d
    74f8:	607b      	str	r3, [r7, #4]
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    74fa:	e008      	b.n	750e <nwkFrameNext+0x2e>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    74fc:	687b      	ldr	r3, [r7, #4]
    74fe:	781b      	ldrb	r3, [r3, #0]
    7500:	2b00      	cmp	r3, #0
    7502:	d001      	beq.n	7508 <nwkFrameNext+0x28>
			return frame;
    7504:	687b      	ldr	r3, [r7, #4]
    7506:	e007      	b.n	7518 <nwkFrameNext+0x38>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    7508:	687b      	ldr	r3, [r7, #4]
    750a:	338d      	adds	r3, #141	; 0x8d
    750c:	607b      	str	r3, [r7, #4]
    750e:	687a      	ldr	r2, [r7, #4]
    7510:	4b04      	ldr	r3, [pc, #16]	; (7524 <nwkFrameNext+0x44>)
    7512:	429a      	cmp	r2, r3
    7514:	d3f2      	bcc.n	74fc <nwkFrameNext+0x1c>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    7516:	2300      	movs	r3, #0
}
    7518:	0018      	movs	r0, r3
    751a:	46bd      	mov	sp, r7
    751c:	b002      	add	sp, #8
    751e:	bd80      	pop	{r7, pc}
    7520:	200002c0 	.word	0x200002c0
    7524:	20000842 	.word	0x20000842

00007528 <nwkFrameCommandInit>:
/*************************************************************************//**
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    7528:	b590      	push	{r4, r7, lr}
    752a:	b083      	sub	sp, #12
    752c:	af00      	add	r7, sp, #0
    752e:	6078      	str	r0, [r7, #4]
	frame->tx.status = NWK_SUCCESS_STATUS;
    7530:	687b      	ldr	r3, [r7, #4]
    7532:	2285      	movs	r2, #133	; 0x85
    7534:	2100      	movs	r1, #0
    7536:	5499      	strb	r1, [r3, r2]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    7538:	4b12      	ldr	r3, [pc, #72]	; (7584 <nwkFrameCommandInit+0x5c>)
    753a:	791b      	ldrb	r3, [r3, #4]
    753c:	3301      	adds	r3, #1
    753e:	b2da      	uxtb	r2, r3
    7540:	4b10      	ldr	r3, [pc, #64]	; (7584 <nwkFrameCommandInit+0x5c>)
    7542:	711a      	strb	r2, [r3, #4]
    7544:	4b0f      	ldr	r3, [pc, #60]	; (7584 <nwkFrameCommandInit+0x5c>)
    7546:	791a      	ldrb	r2, [r3, #4]
    7548:	687b      	ldr	r3, [r7, #4]
    754a:	731a      	strb	r2, [r3, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    754c:	4b0d      	ldr	r3, [pc, #52]	; (7584 <nwkFrameCommandInit+0x5c>)
    754e:	881a      	ldrh	r2, [r3, #0]
    7550:	687b      	ldr	r3, [r7, #4]
    7552:	330d      	adds	r3, #13
    7554:	21ff      	movs	r1, #255	; 0xff
    7556:	4011      	ands	r1, r2
    7558:	000c      	movs	r4, r1
    755a:	7819      	ldrb	r1, [r3, #0]
    755c:	2000      	movs	r0, #0
    755e:	4001      	ands	r1, r0
    7560:	1c08      	adds	r0, r1, #0
    7562:	1c21      	adds	r1, r4, #0
    7564:	4301      	orrs	r1, r0
    7566:	7019      	strb	r1, [r3, #0]
    7568:	0a12      	lsrs	r2, r2, #8
    756a:	b290      	uxth	r0, r2
    756c:	785a      	ldrb	r2, [r3, #1]
    756e:	2100      	movs	r1, #0
    7570:	400a      	ands	r2, r1
    7572:	1c11      	adds	r1, r2, #0
    7574:	1c02      	adds	r2, r0, #0
    7576:	430a      	orrs	r2, r1
    7578:	705a      	strb	r2, [r3, #1]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    757a:	46c0      	nop			; (mov r8, r8)
    757c:	46bd      	mov	sp, r7
    757e:	b003      	add	sp, #12
    7580:	bd90      	pop	{r4, r7, pc}
    7582:	46c0      	nop			; (mov r8, r8)
    7584:	20001024 	.word	0x20001024

00007588 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    7588:	b580      	push	{r7, lr}
    758a:	b082      	sub	sp, #8
    758c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    758e:	1dfb      	adds	r3, r7, #7
    7590:	2200      	movs	r2, #0
    7592:	701a      	strb	r2, [r3, #0]
    7594:	e01d      	b.n	75d2 <nwkRouteInit+0x4a>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    7596:	1dfb      	adds	r3, r7, #7
    7598:	781b      	ldrb	r3, [r3, #0]
    759a:	4a12      	ldr	r2, [pc, #72]	; (75e4 <nwkRouteInit+0x5c>)
    759c:	00db      	lsls	r3, r3, #3
    759e:	18d3      	adds	r3, r2, r3
    75a0:	3302      	adds	r3, #2
    75a2:	2201      	movs	r2, #1
    75a4:	4252      	negs	r2, r2
    75a6:	801a      	strh	r2, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    75a8:	1dfb      	adds	r3, r7, #7
    75aa:	781a      	ldrb	r2, [r3, #0]
    75ac:	4b0d      	ldr	r3, [pc, #52]	; (75e4 <nwkRouteInit+0x5c>)
    75ae:	00d2      	lsls	r2, r2, #3
    75b0:	5cd1      	ldrb	r1, [r2, r3]
    75b2:	2001      	movs	r0, #1
    75b4:	4381      	bics	r1, r0
    75b6:	54d1      	strb	r1, [r2, r3]
		nwkRouteTable[i].rank = 0;
    75b8:	1dfb      	adds	r3, r7, #7
    75ba:	781b      	ldrb	r3, [r3, #0]
    75bc:	4a09      	ldr	r2, [pc, #36]	; (75e4 <nwkRouteInit+0x5c>)
    75be:	00db      	lsls	r3, r3, #3
    75c0:	18d3      	adds	r3, r2, r3
    75c2:	3306      	adds	r3, #6
    75c4:	2200      	movs	r2, #0
    75c6:	701a      	strb	r2, [r3, #0]
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    75c8:	1dfb      	adds	r3, r7, #7
    75ca:	781a      	ldrb	r2, [r3, #0]
    75cc:	1dfb      	adds	r3, r7, #7
    75ce:	3201      	adds	r2, #1
    75d0:	701a      	strb	r2, [r3, #0]
    75d2:	1dfb      	adds	r3, r7, #7
    75d4:	781b      	ldrb	r3, [r3, #0]
    75d6:	2b63      	cmp	r3, #99	; 0x63
    75d8:	d9dd      	bls.n	7596 <nwkRouteInit+0xe>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    75da:	46c0      	nop			; (mov r8, r8)
    75dc:	46bd      	mov	sp, r7
    75de:	b002      	add	sp, #8
    75e0:	bd80      	pop	{r7, pc}
    75e2:	46c0      	nop			; (mov r8, r8)
    75e4:	20000844 	.word	0x20000844

000075e8 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    75e8:	b580      	push	{r7, lr}
    75ea:	b084      	sub	sp, #16
    75ec:	af00      	add	r7, sp, #0
    75ee:	0002      	movs	r2, r0
    75f0:	1dbb      	adds	r3, r7, #6
    75f2:	801a      	strh	r2, [r3, #0]
    75f4:	1d7b      	adds	r3, r7, #5
    75f6:	1c0a      	adds	r2, r1, #0
    75f8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    75fa:	230f      	movs	r3, #15
    75fc:	18fb      	adds	r3, r7, r3
    75fe:	2200      	movs	r2, #0
    7600:	701a      	strb	r2, [r3, #0]
    7602:	e027      	b.n	7654 <NWK_RouteFindEntry+0x6c>
		if (nwkRouteTable[i].dstAddr == dst &&
    7604:	230f      	movs	r3, #15
    7606:	18fb      	adds	r3, r7, r3
    7608:	781b      	ldrb	r3, [r3, #0]
    760a:	4a17      	ldr	r2, [pc, #92]	; (7668 <NWK_RouteFindEntry+0x80>)
    760c:	00db      	lsls	r3, r3, #3
    760e:	18d3      	adds	r3, r2, r3
    7610:	3302      	adds	r3, #2
    7612:	881b      	ldrh	r3, [r3, #0]
    7614:	1dba      	adds	r2, r7, #6
    7616:	8812      	ldrh	r2, [r2, #0]
    7618:	429a      	cmp	r2, r3
    761a:	d114      	bne.n	7646 <NWK_RouteFindEntry+0x5e>
				nwkRouteTable[i].multicast == multicast) {
    761c:	230f      	movs	r3, #15
    761e:	18fb      	adds	r3, r7, r3
    7620:	781a      	ldrb	r2, [r3, #0]
    7622:	4b11      	ldr	r3, [pc, #68]	; (7668 <NWK_RouteFindEntry+0x80>)
    7624:	00d2      	lsls	r2, r2, #3
    7626:	5cd3      	ldrb	r3, [r2, r3]
    7628:	079b      	lsls	r3, r3, #30
    762a:	0fdb      	lsrs	r3, r3, #31
    762c:	b2db      	uxtb	r3, r3
    762e:	001a      	movs	r2, r3
    7630:	1d7b      	adds	r3, r7, #5
    7632:	781b      	ldrb	r3, [r3, #0]
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    7634:	429a      	cmp	r2, r3
    7636:	d106      	bne.n	7646 <NWK_RouteFindEntry+0x5e>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    7638:	230f      	movs	r3, #15
    763a:	18fb      	adds	r3, r7, r3
    763c:	781b      	ldrb	r3, [r3, #0]
    763e:	00da      	lsls	r2, r3, #3
    7640:	4b09      	ldr	r3, [pc, #36]	; (7668 <NWK_RouteFindEntry+0x80>)
    7642:	18d3      	adds	r3, r2, r3
    7644:	e00c      	b.n	7660 <NWK_RouteFindEntry+0x78>

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    7646:	230f      	movs	r3, #15
    7648:	18fb      	adds	r3, r7, r3
    764a:	781a      	ldrb	r2, [r3, #0]
    764c:	230f      	movs	r3, #15
    764e:	18fb      	adds	r3, r7, r3
    7650:	3201      	adds	r2, #1
    7652:	701a      	strb	r2, [r3, #0]
    7654:	230f      	movs	r3, #15
    7656:	18fb      	adds	r3, r7, r3
    7658:	781b      	ldrb	r3, [r3, #0]
    765a:	2b63      	cmp	r3, #99	; 0x63
    765c:	d9d2      	bls.n	7604 <NWK_RouteFindEntry+0x1c>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    765e:	2300      	movs	r3, #0
}
    7660:	0018      	movs	r0, r3
    7662:	46bd      	mov	sp, r7
    7664:	b004      	add	sp, #16
    7666:	bd80      	pop	{r7, pc}
    7668:	20000844 	.word	0x20000844

0000766c <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    766c:	b580      	push	{r7, lr}
    766e:	b084      	sub	sp, #16
    7670:	af00      	add	r7, sp, #0
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    7672:	4b22      	ldr	r3, [pc, #136]	; (76fc <NWK_RouteNewEntry+0x90>)
    7674:	60fb      	str	r3, [r7, #12]
	NWK_RouteTableEntry_t *entry = NULL;
    7676:	2300      	movs	r3, #0
    7678:	60bb      	str	r3, [r7, #8]

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    767a:	1dfb      	adds	r3, r7, #7
    767c:	2200      	movs	r2, #0
    767e:	701a      	strb	r2, [r3, #0]
    7680:	e022      	b.n	76c8 <NWK_RouteNewEntry+0x5c>
		if (iter->fixed) {
    7682:	68fb      	ldr	r3, [r7, #12]
    7684:	781b      	ldrb	r3, [r3, #0]
    7686:	2201      	movs	r2, #1
    7688:	4013      	ands	r3, r2
    768a:	b2db      	uxtb	r3, r3
    768c:	2b00      	cmp	r3, #0
    768e:	d112      	bne.n	76b6 <NWK_RouteNewEntry+0x4a>
			continue;
		}

		if (0 == iter->rank) {
    7690:	68fb      	ldr	r3, [r7, #12]
    7692:	799b      	ldrb	r3, [r3, #6]
    7694:	2b00      	cmp	r3, #0
    7696:	d102      	bne.n	769e <NWK_RouteNewEntry+0x32>
			entry = iter;
    7698:	68fb      	ldr	r3, [r7, #12]
    769a:	60bb      	str	r3, [r7, #8]
			break;
    769c:	e018      	b.n	76d0 <NWK_RouteNewEntry+0x64>
		}

		if (NULL == entry || iter->rank < entry->rank) {
    769e:	68bb      	ldr	r3, [r7, #8]
    76a0:	2b00      	cmp	r3, #0
    76a2:	d005      	beq.n	76b0 <NWK_RouteNewEntry+0x44>
    76a4:	68fb      	ldr	r3, [r7, #12]
    76a6:	799a      	ldrb	r2, [r3, #6]
    76a8:	68bb      	ldr	r3, [r7, #8]
    76aa:	799b      	ldrb	r3, [r3, #6]
    76ac:	429a      	cmp	r2, r3
    76ae:	d203      	bcs.n	76b8 <NWK_RouteNewEntry+0x4c>
			entry = iter;
    76b0:	68fb      	ldr	r3, [r7, #12]
    76b2:	60bb      	str	r3, [r7, #8]
    76b4:	e000      	b.n	76b8 <NWK_RouteNewEntry+0x4c>
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
		if (iter->fixed) {
			continue;
    76b6:	46c0      	nop			; (mov r8, r8)
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    76b8:	1dfb      	adds	r3, r7, #7
    76ba:	781a      	ldrb	r2, [r3, #0]
    76bc:	1dfb      	adds	r3, r7, #7
    76be:	3201      	adds	r2, #1
    76c0:	701a      	strb	r2, [r3, #0]
    76c2:	68fb      	ldr	r3, [r7, #12]
    76c4:	3308      	adds	r3, #8
    76c6:	60fb      	str	r3, [r7, #12]
    76c8:	1dfb      	adds	r3, r7, #7
    76ca:	781b      	ldrb	r3, [r3, #0]
    76cc:	2b63      	cmp	r3, #99	; 0x63
    76ce:	d9d8      	bls.n	7682 <NWK_RouteNewEntry+0x16>
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    76d0:	68bb      	ldr	r3, [r7, #8]
    76d2:	781a      	ldrb	r2, [r3, #0]
    76d4:	2102      	movs	r1, #2
    76d6:	438a      	bics	r2, r1
    76d8:	701a      	strb	r2, [r3, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    76da:	68bb      	ldr	r3, [r7, #8]
    76dc:	781a      	ldrb	r2, [r3, #0]
    76de:	210f      	movs	r1, #15
    76e0:	400a      	ands	r2, r1
    76e2:	1c11      	adds	r1, r2, #0
    76e4:	2230      	movs	r2, #48	; 0x30
    76e6:	430a      	orrs	r2, r1
    76e8:	701a      	strb	r2, [r3, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    76ea:	68bb      	ldr	r3, [r7, #8]
    76ec:	2280      	movs	r2, #128	; 0x80
    76ee:	719a      	strb	r2, [r3, #6]

	return entry;
    76f0:	68bb      	ldr	r3, [r7, #8]
}
    76f2:	0018      	movs	r0, r3
    76f4:	46bd      	mov	sp, r7
    76f6:	b004      	add	sp, #16
    76f8:	bd80      	pop	{r7, pc}
    76fa:	46c0      	nop			; (mov r8, r8)
    76fc:	20000844 	.word	0x20000844

00007700 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
    7700:	b580      	push	{r7, lr}
    7702:	b082      	sub	sp, #8
    7704:	af00      	add	r7, sp, #0
    7706:	6078      	str	r0, [r7, #4]
	if (entry->fixed) {
    7708:	687b      	ldr	r3, [r7, #4]
    770a:	781b      	ldrb	r3, [r3, #0]
    770c:	2201      	movs	r2, #1
    770e:	4013      	ands	r3, r2
    7710:	b2db      	uxtb	r3, r3
    7712:	2b00      	cmp	r3, #0
    7714:	d107      	bne.n	7726 <NWK_RouteFreeEntry+0x26>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    7716:	687b      	ldr	r3, [r7, #4]
    7718:	2201      	movs	r2, #1
    771a:	4252      	negs	r2, r2
    771c:	805a      	strh	r2, [r3, #2]
	entry->rank = 0;
    771e:	687b      	ldr	r3, [r7, #4]
    7720:	2200      	movs	r2, #0
    7722:	719a      	strb	r2, [r3, #6]
    7724:	e000      	b.n	7728 <NWK_RouteFreeEntry+0x28>
/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
		return;
    7726:	46c0      	nop			; (mov r8, r8)
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
	entry->rank = 0;
}
    7728:	46bd      	mov	sp, r7
    772a:	b002      	add	sp, #8
    772c:	bd80      	pop	{r7, pc}
    772e:	46c0      	nop			; (mov r8, r8)

00007730 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    7730:	b580      	push	{r7, lr}
    7732:	b084      	sub	sp, #16
    7734:	af00      	add	r7, sp, #0
    7736:	0002      	movs	r2, r0
    7738:	1dbb      	adds	r3, r7, #6
    773a:	801a      	strh	r2, [r3, #0]
    773c:	1d7b      	adds	r3, r7, #5
    773e:	1c0a      	adds	r2, r1, #0
    7740:	701a      	strb	r2, [r3, #0]
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    7742:	1d7b      	adds	r3, r7, #5
    7744:	781a      	ldrb	r2, [r3, #0]
    7746:	1dbb      	adds	r3, r7, #6
    7748:	881b      	ldrh	r3, [r3, #0]
    774a:	0011      	movs	r1, r2
    774c:	0018      	movs	r0, r3
    774e:	4b07      	ldr	r3, [pc, #28]	; (776c <NWK_RouteNextHop+0x3c>)
    7750:	4798      	blx	r3
    7752:	0003      	movs	r3, r0
    7754:	60fb      	str	r3, [r7, #12]
	if (entry) {
    7756:	68fb      	ldr	r3, [r7, #12]
    7758:	2b00      	cmp	r3, #0
    775a:	d002      	beq.n	7762 <NWK_RouteNextHop+0x32>
		return entry->nextHopAddr;
    775c:	68fb      	ldr	r3, [r7, #12]
    775e:	889b      	ldrh	r3, [r3, #4]
    7760:	e000      	b.n	7764 <NWK_RouteNextHop+0x34>
	}

	return NWK_ROUTE_UNKNOWN;
    7762:	4b03      	ldr	r3, [pc, #12]	; (7770 <NWK_RouteNextHop+0x40>)
}
    7764:	0018      	movs	r0, r3
    7766:	46bd      	mov	sp, r7
    7768:	b004      	add	sp, #16
    776a:	bd80      	pop	{r7, pc}
    776c:	000075e9 	.word	0x000075e9
    7770:	0000ffff 	.word	0x0000ffff

00007774 <nwkRouteUpdateEntry>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteUpdateEntry(uint16_t dst, uint8_t multicast, uint16_t nextHop,
		uint8_t lqi)
{
    7774:	b5b0      	push	{r4, r5, r7, lr}
    7776:	b084      	sub	sp, #16
    7778:	af00      	add	r7, sp, #0
    777a:	0005      	movs	r5, r0
    777c:	000c      	movs	r4, r1
    777e:	0010      	movs	r0, r2
    7780:	0019      	movs	r1, r3
    7782:	1dbb      	adds	r3, r7, #6
    7784:	1c2a      	adds	r2, r5, #0
    7786:	801a      	strh	r2, [r3, #0]
    7788:	1d7b      	adds	r3, r7, #5
    778a:	1c22      	adds	r2, r4, #0
    778c:	701a      	strb	r2, [r3, #0]
    778e:	1cbb      	adds	r3, r7, #2
    7790:	1c02      	adds	r2, r0, #0
    7792:	801a      	strh	r2, [r3, #0]
    7794:	1d3b      	adds	r3, r7, #4
    7796:	1c0a      	adds	r2, r1, #0
    7798:	701a      	strb	r2, [r3, #0]
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    779a:	1d7b      	adds	r3, r7, #5
    779c:	781a      	ldrb	r2, [r3, #0]
    779e:	1dbb      	adds	r3, r7, #6
    77a0:	881b      	ldrh	r3, [r3, #0]
    77a2:	0011      	movs	r1, r2
    77a4:	0018      	movs	r0, r3
    77a6:	4b1b      	ldr	r3, [pc, #108]	; (7814 <nwkRouteUpdateEntry+0xa0>)
    77a8:	4798      	blx	r3
    77aa:	0003      	movs	r3, r0
    77ac:	60fb      	str	r3, [r7, #12]

	if (NULL == entry) {
    77ae:	68fb      	ldr	r3, [r7, #12]
    77b0:	2b00      	cmp	r3, #0
    77b2:	d103      	bne.n	77bc <nwkRouteUpdateEntry+0x48>
		entry = NWK_RouteNewEntry();
    77b4:	4b18      	ldr	r3, [pc, #96]	; (7818 <nwkRouteUpdateEntry+0xa4>)
    77b6:	4798      	blx	r3
    77b8:	0003      	movs	r3, r0
    77ba:	60fb      	str	r3, [r7, #12]
	}

	entry->dstAddr = dst;
    77bc:	68fb      	ldr	r3, [r7, #12]
    77be:	1dba      	adds	r2, r7, #6
    77c0:	8812      	ldrh	r2, [r2, #0]
    77c2:	805a      	strh	r2, [r3, #2]
	entry->nextHopAddr = nextHop;
    77c4:	68fb      	ldr	r3, [r7, #12]
    77c6:	1cba      	adds	r2, r7, #2
    77c8:	8812      	ldrh	r2, [r2, #0]
    77ca:	809a      	strh	r2, [r3, #4]
	entry->multicast = multicast;
    77cc:	1d7b      	adds	r3, r7, #5
    77ce:	781b      	ldrb	r3, [r3, #0]
    77d0:	2201      	movs	r2, #1
    77d2:	4013      	ands	r3, r2
    77d4:	b2da      	uxtb	r2, r3
    77d6:	68fb      	ldr	r3, [r7, #12]
    77d8:	2101      	movs	r1, #1
    77da:	400a      	ands	r2, r1
    77dc:	1890      	adds	r0, r2, r2
    77de:	781a      	ldrb	r2, [r3, #0]
    77e0:	2102      	movs	r1, #2
    77e2:	438a      	bics	r2, r1
    77e4:	1c11      	adds	r1, r2, #0
    77e6:	1c02      	adds	r2, r0, #0
    77e8:	430a      	orrs	r2, r1
    77ea:	701a      	strb	r2, [r3, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    77ec:	68fb      	ldr	r3, [r7, #12]
    77ee:	781a      	ldrb	r2, [r3, #0]
    77f0:	210f      	movs	r1, #15
    77f2:	400a      	ands	r2, r1
    77f4:	1c11      	adds	r1, r2, #0
    77f6:	2230      	movs	r2, #48	; 0x30
    77f8:	430a      	orrs	r2, r1
    77fa:	701a      	strb	r2, [r3, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    77fc:	68fb      	ldr	r3, [r7, #12]
    77fe:	2280      	movs	r2, #128	; 0x80
    7800:	719a      	strb	r2, [r3, #6]
	entry->lqi = lqi;
    7802:	68fb      	ldr	r3, [r7, #12]
    7804:	1d3a      	adds	r2, r7, #4
    7806:	7812      	ldrb	r2, [r2, #0]
    7808:	71da      	strb	r2, [r3, #7]
}
    780a:	46c0      	nop			; (mov r8, r8)
    780c:	46bd      	mov	sp, r7
    780e:	b004      	add	sp, #16
    7810:	bdb0      	pop	{r4, r5, r7, pc}
    7812:	46c0      	nop			; (mov r8, r8)
    7814:	000075e9 	.word	0x000075e9
    7818:	0000766d 	.word	0x0000766d

0000781c <nwkRouteRemove>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    781c:	b580      	push	{r7, lr}
    781e:	b084      	sub	sp, #16
    7820:	af00      	add	r7, sp, #0
    7822:	0002      	movs	r2, r0
    7824:	1dbb      	adds	r3, r7, #6
    7826:	801a      	strh	r2, [r3, #0]
    7828:	1d7b      	adds	r3, r7, #5
    782a:	1c0a      	adds	r2, r1, #0
    782c:	701a      	strb	r2, [r3, #0]
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    782e:	1d7b      	adds	r3, r7, #5
    7830:	781a      	ldrb	r2, [r3, #0]
    7832:	1dbb      	adds	r3, r7, #6
    7834:	881b      	ldrh	r3, [r3, #0]
    7836:	0011      	movs	r1, r2
    7838:	0018      	movs	r0, r3
    783a:	4b07      	ldr	r3, [pc, #28]	; (7858 <nwkRouteRemove+0x3c>)
    783c:	4798      	blx	r3
    783e:	0003      	movs	r3, r0
    7840:	60fb      	str	r3, [r7, #12]
	if (entry) {
    7842:	68fb      	ldr	r3, [r7, #12]
    7844:	2b00      	cmp	r3, #0
    7846:	d003      	beq.n	7850 <nwkRouteRemove+0x34>
		NWK_RouteFreeEntry(entry);
    7848:	68fb      	ldr	r3, [r7, #12]
    784a:	0018      	movs	r0, r3
    784c:	4b03      	ldr	r3, [pc, #12]	; (785c <nwkRouteRemove+0x40>)
    784e:	4798      	blx	r3
	}
}
    7850:	46c0      	nop			; (mov r8, r8)
    7852:	46bd      	mov	sp, r7
    7854:	b004      	add	sp, #16
    7856:	bd80      	pop	{r7, pc}
    7858:	000075e9 	.word	0x000075e9
    785c:	00007701 	.word	0x00007701

00007860 <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    7860:	b580      	push	{r7, lr}
    7862:	b082      	sub	sp, #8
    7864:	af00      	add	r7, sp, #0
    7866:	6078      	str	r0, [r7, #4]

	entry->lqi = frame->rx.lqi;
#else
	(void)frame;
#endif
}
    7868:	46c0      	nop			; (mov r8, r8)
    786a:	46bd      	mov	sp, r7
    786c:	b002      	add	sp, #8
    786e:	bd80      	pop	{r7, pc}

00007870 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    7870:	b580      	push	{r7, lr}
    7872:	b084      	sub	sp, #16
    7874:	af00      	add	r7, sp, #0
    7876:	6078      	str	r0, [r7, #4]
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    7878:	687b      	ldr	r3, [r7, #4]
    787a:	7bda      	ldrb	r2, [r3, #15]
    787c:	7c1b      	ldrb	r3, [r3, #16]
    787e:	021b      	lsls	r3, r3, #8
    7880:	4313      	orrs	r3, r2
    7882:	b29b      	uxth	r3, r3
    7884:	4a2e      	ldr	r2, [pc, #184]	; (7940 <nwkRouteFrameSent+0xd0>)
    7886:	4293      	cmp	r3, r2
    7888:	d053      	beq.n	7932 <nwkRouteFrameSent+0xc2>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    788a:	687b      	ldr	r3, [r7, #4]
    788c:	7bda      	ldrb	r2, [r3, #15]
    788e:	7c1b      	ldrb	r3, [r3, #16]
    7890:	021b      	lsls	r3, r3, #8
    7892:	4313      	orrs	r3, r2
    7894:	b29a      	uxth	r2, r3
			frame->header.nwkFcf.multicast);
    7896:	687b      	ldr	r3, [r7, #4]
    7898:	7adb      	ldrb	r3, [r3, #11]
    789a:	071b      	lsls	r3, r3, #28
    789c:	0fdb      	lsrs	r3, r3, #31
    789e:	b2db      	uxtb	r3, r3

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    78a0:	0019      	movs	r1, r3
    78a2:	0010      	movs	r0, r2
    78a4:	4b27      	ldr	r3, [pc, #156]	; (7944 <nwkRouteFrameSent+0xd4>)
    78a6:	4798      	blx	r3
    78a8:	0003      	movs	r3, r0
    78aa:	60fb      	str	r3, [r7, #12]
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    78ac:	68fb      	ldr	r3, [r7, #12]
    78ae:	2b00      	cmp	r3, #0
    78b0:	d041      	beq.n	7936 <nwkRouteFrameSent+0xc6>
    78b2:	68fb      	ldr	r3, [r7, #12]
    78b4:	781b      	ldrb	r3, [r3, #0]
    78b6:	2201      	movs	r2, #1
    78b8:	4013      	ands	r3, r2
    78ba:	b2db      	uxtb	r3, r3
    78bc:	2b00      	cmp	r3, #0
    78be:	d13a      	bne.n	7936 <nwkRouteFrameSent+0xc6>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    78c0:	687b      	ldr	r3, [r7, #4]
    78c2:	2285      	movs	r2, #133	; 0x85
    78c4:	5c9b      	ldrb	r3, [r3, r2]
    78c6:	2b00      	cmp	r3, #0
    78c8:	d114      	bne.n	78f4 <nwkRouteFrameSent+0x84>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    78ca:	68fb      	ldr	r3, [r7, #12]
    78cc:	781a      	ldrb	r2, [r3, #0]
    78ce:	210f      	movs	r1, #15
    78d0:	400a      	ands	r2, r1
    78d2:	1c11      	adds	r1, r2, #0
    78d4:	2230      	movs	r2, #48	; 0x30
    78d6:	430a      	orrs	r2, r1
    78d8:	701a      	strb	r2, [r3, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    78da:	68fb      	ldr	r3, [r7, #12]
    78dc:	799b      	ldrb	r3, [r3, #6]
    78de:	3301      	adds	r3, #1
    78e0:	b2da      	uxtb	r2, r3
    78e2:	68fb      	ldr	r3, [r7, #12]
    78e4:	719a      	strb	r2, [r3, #6]
    78e6:	68fb      	ldr	r3, [r7, #12]
    78e8:	799b      	ldrb	r3, [r3, #6]
    78ea:	2bff      	cmp	r3, #255	; 0xff
    78ec:	d124      	bne.n	7938 <nwkRouteFrameSent+0xc8>
			nwkRouteNormalizeRanks();
    78ee:	4b16      	ldr	r3, [pc, #88]	; (7948 <nwkRouteFrameSent+0xd8>)
    78f0:	4798      	blx	r3
    78f2:	e021      	b.n	7938 <nwkRouteFrameSent+0xc8>
		}
	} else {
		if (0 == --entry->score) {
    78f4:	68fb      	ldr	r3, [r7, #12]
    78f6:	781b      	ldrb	r3, [r3, #0]
    78f8:	061b      	lsls	r3, r3, #24
    78fa:	0f1b      	lsrs	r3, r3, #28
    78fc:	b2db      	uxtb	r3, r3
    78fe:	330f      	adds	r3, #15
    7900:	1c1a      	adds	r2, r3, #0
    7902:	230f      	movs	r3, #15
    7904:	4013      	ands	r3, r2
    7906:	b2da      	uxtb	r2, r3
    7908:	68fb      	ldr	r3, [r7, #12]
    790a:	0110      	lsls	r0, r2, #4
    790c:	781a      	ldrb	r2, [r3, #0]
    790e:	210f      	movs	r1, #15
    7910:	400a      	ands	r2, r1
    7912:	1c11      	adds	r1, r2, #0
    7914:	1c02      	adds	r2, r0, #0
    7916:	430a      	orrs	r2, r1
    7918:	701a      	strb	r2, [r3, #0]
    791a:	68fb      	ldr	r3, [r7, #12]
    791c:	781b      	ldrb	r3, [r3, #0]
    791e:	061b      	lsls	r3, r3, #24
    7920:	0f1b      	lsrs	r3, r3, #28
    7922:	b2db      	uxtb	r3, r3
    7924:	2b00      	cmp	r3, #0
    7926:	d107      	bne.n	7938 <nwkRouteFrameSent+0xc8>
			NWK_RouteFreeEntry(entry);
    7928:	68fb      	ldr	r3, [r7, #12]
    792a:	0018      	movs	r0, r3
    792c:	4b07      	ldr	r3, [pc, #28]	; (794c <nwkRouteFrameSent+0xdc>)
    792e:	4798      	blx	r3
    7930:	e002      	b.n	7938 <nwkRouteFrameSent+0xc8>
void nwkRouteFrameSent(NwkFrame_t *frame)
{
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
    7932:	46c0      	nop			; (mov r8, r8)
    7934:	e000      	b.n	7938 <nwkRouteFrameSent+0xc8>

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
		return;
    7936:	46c0      	nop			; (mov r8, r8)
	} else {
		if (0 == --entry->score) {
			NWK_RouteFreeEntry(entry);
		}
	}
}
    7938:	46bd      	mov	sp, r7
    793a:	b004      	add	sp, #16
    793c:	bd80      	pop	{r7, pc}
    793e:	46c0      	nop			; (mov r8, r8)
    7940:	0000ffff 	.word	0x0000ffff
    7944:	000075e9 	.word	0x000075e9
    7948:	00007c75 	.word	0x00007c75
    794c:	00007701 	.word	0x00007701

00007950 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    7950:	b590      	push	{r4, r7, lr}
    7952:	b085      	sub	sp, #20
    7954:	af00      	add	r7, sp, #0
    7956:	6078      	str	r0, [r7, #4]
	NwkFrameHeader_t *header = &frame->header;
    7958:	687b      	ldr	r3, [r7, #4]
    795a:	3302      	adds	r3, #2
    795c:	60fb      	str	r3, [r7, #12]

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    795e:	68fb      	ldr	r3, [r7, #12]
    7960:	7b5a      	ldrb	r2, [r3, #13]
    7962:	7b9b      	ldrb	r3, [r3, #14]
    7964:	021b      	lsls	r3, r3, #8
    7966:	4313      	orrs	r3, r2
    7968:	b29b      	uxth	r3, r3
    796a:	4a35      	ldr	r2, [pc, #212]	; (7a40 <nwkRoutePrepareTx+0xf0>)
    796c:	4293      	cmp	r3, r2
    796e:	d10c      	bne.n	798a <nwkRoutePrepareTx+0x3a>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    7970:	68fb      	ldr	r3, [r7, #12]
    7972:	3305      	adds	r3, #5
    7974:	781a      	ldrb	r2, [r3, #0]
    7976:	2101      	movs	r1, #1
    7978:	4249      	negs	r1, r1
    797a:	430a      	orrs	r2, r1
    797c:	701a      	strb	r2, [r3, #0]
    797e:	785a      	ldrb	r2, [r3, #1]
    7980:	2101      	movs	r1, #1
    7982:	4249      	negs	r1, r1
    7984:	430a      	orrs	r2, r1
    7986:	705a      	strb	r2, [r3, #1]
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
			nwkRouteDiscoveryRequest(frame);
		}
  #endif
	}
}
    7988:	e055      	b.n	7a36 <nwkRoutePrepareTx+0xe6>
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
		header->macDstAddr = NWK_BROADCAST_ADDR;
	} else if (header->nwkFcf.linkLocal) {
    798a:	68fb      	ldr	r3, [r7, #12]
    798c:	7a5b      	ldrb	r3, [r3, #9]
    798e:	2204      	movs	r2, #4
    7990:	4013      	ands	r3, r2
    7992:	b2db      	uxtb	r3, r3
    7994:	2b00      	cmp	r3, #0
    7996:	d01b      	beq.n	79d0 <nwkRoutePrepareTx+0x80>
		header->macDstAddr = header->nwkDstAddr;
    7998:	68fb      	ldr	r3, [r7, #12]
    799a:	7b5a      	ldrb	r2, [r3, #13]
    799c:	7b9b      	ldrb	r3, [r3, #14]
    799e:	021b      	lsls	r3, r3, #8
    79a0:	4313      	orrs	r3, r2
    79a2:	b29a      	uxth	r2, r3
    79a4:	68fb      	ldr	r3, [r7, #12]
    79a6:	3305      	adds	r3, #5
    79a8:	21ff      	movs	r1, #255	; 0xff
    79aa:	4011      	ands	r1, r2
    79ac:	000c      	movs	r4, r1
    79ae:	7819      	ldrb	r1, [r3, #0]
    79b0:	2000      	movs	r0, #0
    79b2:	4001      	ands	r1, r0
    79b4:	1c08      	adds	r0, r1, #0
    79b6:	1c21      	adds	r1, r4, #0
    79b8:	4301      	orrs	r1, r0
    79ba:	7019      	strb	r1, [r3, #0]
    79bc:	0a12      	lsrs	r2, r2, #8
    79be:	b290      	uxth	r0, r2
    79c0:	785a      	ldrb	r2, [r3, #1]
    79c2:	2100      	movs	r1, #0
    79c4:	400a      	ands	r2, r1
    79c6:	1c11      	adds	r1, r2, #0
    79c8:	1c02      	adds	r2, r0, #0
    79ca:	430a      	orrs	r2, r1
    79cc:	705a      	strb	r2, [r3, #1]
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
			nwkRouteDiscoveryRequest(frame);
		}
  #endif
	}
}
    79ce:	e032      	b.n	7a36 <nwkRoutePrepareTx+0xe6>
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    79d0:	68fb      	ldr	r3, [r7, #12]
    79d2:	7b5a      	ldrb	r2, [r3, #13]
    79d4:	7b9b      	ldrb	r3, [r3, #14]
    79d6:	021b      	lsls	r3, r3, #8
    79d8:	4313      	orrs	r3, r2
    79da:	b29a      	uxth	r2, r3
				header->nwkFcf.multicast);
    79dc:	68fb      	ldr	r3, [r7, #12]
    79de:	7a5b      	ldrb	r3, [r3, #9]
    79e0:	071b      	lsls	r3, r3, #28
    79e2:	0fdb      	lsrs	r3, r3, #31
    79e4:	b2db      	uxtb	r3, r3
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    79e6:	0019      	movs	r1, r3
    79e8:	0010      	movs	r0, r2
    79ea:	4b16      	ldr	r3, [pc, #88]	; (7a44 <nwkRoutePrepareTx+0xf4>)
    79ec:	4798      	blx	r3
    79ee:	0003      	movs	r3, r0
    79f0:	001a      	movs	r2, r3
    79f2:	68fb      	ldr	r3, [r7, #12]
    79f4:	3305      	adds	r3, #5
    79f6:	21ff      	movs	r1, #255	; 0xff
    79f8:	4011      	ands	r1, r2
    79fa:	000c      	movs	r4, r1
    79fc:	7819      	ldrb	r1, [r3, #0]
    79fe:	2000      	movs	r0, #0
    7a00:	4001      	ands	r1, r0
    7a02:	1c08      	adds	r0, r1, #0
    7a04:	1c21      	adds	r1, r4, #0
    7a06:	4301      	orrs	r1, r0
    7a08:	7019      	strb	r1, [r3, #0]
    7a0a:	0a12      	lsrs	r2, r2, #8
    7a0c:	b290      	uxth	r0, r2
    7a0e:	785a      	ldrb	r2, [r3, #1]
    7a10:	2100      	movs	r1, #0
    7a12:	400a      	ands	r2, r1
    7a14:	1c11      	adds	r1, r2, #0
    7a16:	1c02      	adds	r2, r0, #0
    7a18:	430a      	orrs	r2, r1
    7a1a:	705a      	strb	r2, [r3, #1]
				header->nwkFcf.multicast);

  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
    7a1c:	68fb      	ldr	r3, [r7, #12]
    7a1e:	795a      	ldrb	r2, [r3, #5]
    7a20:	799b      	ldrb	r3, [r3, #6]
    7a22:	021b      	lsls	r3, r3, #8
    7a24:	4313      	orrs	r3, r2
    7a26:	b29b      	uxth	r3, r3
    7a28:	4a05      	ldr	r2, [pc, #20]	; (7a40 <nwkRoutePrepareTx+0xf0>)
    7a2a:	4293      	cmp	r3, r2
    7a2c:	d103      	bne.n	7a36 <nwkRoutePrepareTx+0xe6>
			nwkRouteDiscoveryRequest(frame);
    7a2e:	687b      	ldr	r3, [r7, #4]
    7a30:	0018      	movs	r0, r3
    7a32:	4b05      	ldr	r3, [pc, #20]	; (7a48 <nwkRoutePrepareTx+0xf8>)
    7a34:	4798      	blx	r3
		}
  #endif
	}
}
    7a36:	46c0      	nop			; (mov r8, r8)
    7a38:	46bd      	mov	sp, r7
    7a3a:	b005      	add	sp, #20
    7a3c:	bd90      	pop	{r4, r7, pc}
    7a3e:	46c0      	nop			; (mov r8, r8)
    7a40:	0000ffff 	.word	0x0000ffff
    7a44:	00007731 	.word	0x00007731
    7a48:	00007d25 	.word	0x00007d25

00007a4c <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    7a4c:	b590      	push	{r4, r7, lr}
    7a4e:	b085      	sub	sp, #20
    7a50:	af00      	add	r7, sp, #0
    7a52:	6078      	str	r0, [r7, #4]
	NwkFrameHeader_t *header = &frame->header;
    7a54:	687b      	ldr	r3, [r7, #4]
    7a56:	3302      	adds	r3, #2
    7a58:	60fb      	str	r3, [r7, #12]

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    7a5a:	68fb      	ldr	r3, [r7, #12]
    7a5c:	7b5a      	ldrb	r2, [r3, #13]
    7a5e:	7b9b      	ldrb	r3, [r3, #14]
    7a60:	021b      	lsls	r3, r3, #8
    7a62:	4313      	orrs	r3, r2
    7a64:	b29a      	uxth	r2, r3
			header->nwkFcf.multicast)) {
    7a66:	68fb      	ldr	r3, [r7, #12]
    7a68:	7a5b      	ldrb	r3, [r3, #9]
    7a6a:	071b      	lsls	r3, r3, #28
    7a6c:	0fdb      	lsrs	r3, r3, #31
    7a6e:	b2db      	uxtb	r3, r3
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    7a70:	0019      	movs	r1, r3
    7a72:	0010      	movs	r0, r2
    7a74:	4b20      	ldr	r3, [pc, #128]	; (7af8 <nwkRouteFrame+0xac>)
    7a76:	4798      	blx	r3
    7a78:	0003      	movs	r3, r0
    7a7a:	1e1a      	subs	r2, r3, #0
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    7a7c:	4b1f      	ldr	r3, [pc, #124]	; (7afc <nwkRouteFrame+0xb0>)
    7a7e:	429a      	cmp	r2, r3
    7a80:	d01d      	beq.n	7abe <nwkRouteFrame+0x72>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    7a82:	687b      	ldr	r3, [r7, #4]
    7a84:	2289      	movs	r2, #137	; 0x89
    7a86:	5c99      	ldrb	r1, [r3, r2]
    7a88:	2000      	movs	r0, #0
    7a8a:	4001      	ands	r1, r0
    7a8c:	5499      	strb	r1, [r3, r2]
    7a8e:	1899      	adds	r1, r3, r2
    7a90:	7848      	ldrb	r0, [r1, #1]
    7a92:	2400      	movs	r4, #0
    7a94:	4020      	ands	r0, r4
    7a96:	7048      	strb	r0, [r1, #1]
    7a98:	1899      	adds	r1, r3, r2
    7a9a:	7888      	ldrb	r0, [r1, #2]
    7a9c:	2400      	movs	r4, #0
    7a9e:	4020      	ands	r0, r4
    7aa0:	7088      	strb	r0, [r1, #2]
    7aa2:	189b      	adds	r3, r3, r2
    7aa4:	78da      	ldrb	r2, [r3, #3]
    7aa6:	2100      	movs	r1, #0
    7aa8:	400a      	ands	r2, r1
    7aaa:	70da      	strb	r2, [r3, #3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    7aac:	687b      	ldr	r3, [r7, #4]
    7aae:	2288      	movs	r2, #136	; 0x88
    7ab0:	2102      	movs	r1, #2
    7ab2:	5499      	strb	r1, [r3, r2]
		nwkTxFrame(frame);
    7ab4:	687b      	ldr	r3, [r7, #4]
    7ab6:	0018      	movs	r0, r3
    7ab8:	4b11      	ldr	r3, [pc, #68]	; (7b00 <nwkRouteFrame+0xb4>)
    7aba:	4798      	blx	r3
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
	}
}
    7abc:	e017      	b.n	7aee <nwkRouteFrame+0xa2>
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    7abe:	68fb      	ldr	r3, [r7, #12]
    7ac0:	7ada      	ldrb	r2, [r3, #11]
    7ac2:	7b1b      	ldrb	r3, [r3, #12]
    7ac4:	021b      	lsls	r3, r3, #8
    7ac6:	4313      	orrs	r3, r2
    7ac8:	b298      	uxth	r0, r3
    7aca:	68fb      	ldr	r3, [r7, #12]
    7acc:	7b5a      	ldrb	r2, [r3, #13]
    7ace:	7b9b      	ldrb	r3, [r3, #14]
    7ad0:	021b      	lsls	r3, r3, #8
    7ad2:	4313      	orrs	r3, r2
    7ad4:	b299      	uxth	r1, r3
				header->nwkFcf.multicast);
    7ad6:	68fb      	ldr	r3, [r7, #12]
    7ad8:	7a5b      	ldrb	r3, [r3, #9]
    7ada:	071b      	lsls	r3, r3, #28
    7adc:	0fdb      	lsrs	r3, r3, #31
    7ade:	b2db      	uxtb	r3, r3
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    7ae0:	001a      	movs	r2, r3
    7ae2:	4b08      	ldr	r3, [pc, #32]	; (7b04 <nwkRouteFrame+0xb8>)
    7ae4:	4798      	blx	r3
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    7ae6:	687b      	ldr	r3, [r7, #4]
    7ae8:	0018      	movs	r0, r3
    7aea:	4b07      	ldr	r3, [pc, #28]	; (7b08 <nwkRouteFrame+0xbc>)
    7aec:	4798      	blx	r3
	}
}
    7aee:	46c0      	nop			; (mov r8, r8)
    7af0:	46bd      	mov	sp, r7
    7af2:	b005      	add	sp, #20
    7af4:	bd90      	pop	{r4, r7, pc}
    7af6:	46c0      	nop			; (mov r8, r8)
    7af8:	00007731 	.word	0x00007731
    7afc:	0000ffff 	.word	0x0000ffff
    7b00:	00009475 	.word	0x00009475
    7b04:	00007b0d 	.word	0x00007b0d
    7b08:	000074b5 	.word	0x000074b5

00007b0c <nwkRouteSendRouteError>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst,
		uint8_t multicast)
{
    7b0c:	b590      	push	{r4, r7, lr}
    7b0e:	b085      	sub	sp, #20
    7b10:	af00      	add	r7, sp, #0
    7b12:	0004      	movs	r4, r0
    7b14:	0008      	movs	r0, r1
    7b16:	0011      	movs	r1, r2
    7b18:	1dbb      	adds	r3, r7, #6
    7b1a:	1c22      	adds	r2, r4, #0
    7b1c:	801a      	strh	r2, [r3, #0]
    7b1e:	1d3b      	adds	r3, r7, #4
    7b20:	1c02      	adds	r2, r0, #0
    7b22:	801a      	strh	r2, [r3, #0]
    7b24:	1cfb      	adds	r3, r7, #3
    7b26:	1c0a      	adds	r2, r1, #0
    7b28:	701a      	strb	r2, [r3, #0]
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    7b2a:	4b3f      	ldr	r3, [pc, #252]	; (7c28 <nwkRouteSendRouteError+0x11c>)
    7b2c:	4798      	blx	r3
    7b2e:	0003      	movs	r3, r0
    7b30:	60fb      	str	r3, [r7, #12]
    7b32:	68fb      	ldr	r3, [r7, #12]
    7b34:	2b00      	cmp	r3, #0
    7b36:	d073      	beq.n	7c20 <nwkRouteSendRouteError+0x114>
		return;
	}

	nwkFrameCommandInit(frame);
    7b38:	68fb      	ldr	r3, [r7, #12]
    7b3a:	0018      	movs	r0, r3
    7b3c:	4b3b      	ldr	r3, [pc, #236]	; (7c2c <nwkRouteSendRouteError+0x120>)
    7b3e:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    7b40:	68fb      	ldr	r3, [r7, #12]
    7b42:	785b      	ldrb	r3, [r3, #1]
    7b44:	3306      	adds	r3, #6
    7b46:	b2da      	uxtb	r2, r3
    7b48:	68fb      	ldr	r3, [r7, #12]
    7b4a:	705a      	strb	r2, [r3, #1]
	frame->tx.confirm = NULL;
    7b4c:	68fb      	ldr	r3, [r7, #12]
    7b4e:	2289      	movs	r2, #137	; 0x89
    7b50:	5c99      	ldrb	r1, [r3, r2]
    7b52:	2000      	movs	r0, #0
    7b54:	4001      	ands	r1, r0
    7b56:	5499      	strb	r1, [r3, r2]
    7b58:	1899      	adds	r1, r3, r2
    7b5a:	7848      	ldrb	r0, [r1, #1]
    7b5c:	2400      	movs	r4, #0
    7b5e:	4020      	ands	r0, r4
    7b60:	7048      	strb	r0, [r1, #1]
    7b62:	1899      	adds	r1, r3, r2
    7b64:	7888      	ldrb	r0, [r1, #2]
    7b66:	2400      	movs	r4, #0
    7b68:	4020      	ands	r0, r4
    7b6a:	7088      	strb	r0, [r1, #2]
    7b6c:	189b      	adds	r3, r3, r2
    7b6e:	78da      	ldrb	r2, [r3, #3]
    7b70:	2100      	movs	r1, #0
    7b72:	400a      	ands	r2, r1
    7b74:	70da      	strb	r2, [r3, #3]

	frame->header.nwkDstAddr = src;
    7b76:	68fb      	ldr	r3, [r7, #12]
    7b78:	1dba      	adds	r2, r7, #6
    7b7a:	330f      	adds	r3, #15
    7b7c:	7814      	ldrb	r4, [r2, #0]
    7b7e:	7819      	ldrb	r1, [r3, #0]
    7b80:	2000      	movs	r0, #0
    7b82:	4001      	ands	r1, r0
    7b84:	1c08      	adds	r0, r1, #0
    7b86:	1c21      	adds	r1, r4, #0
    7b88:	4301      	orrs	r1, r0
    7b8a:	7019      	strb	r1, [r3, #0]
    7b8c:	7850      	ldrb	r0, [r2, #1]
    7b8e:	785a      	ldrb	r2, [r3, #1]
    7b90:	2100      	movs	r1, #0
    7b92:	400a      	ands	r2, r1
    7b94:	1c11      	adds	r1, r2, #0
    7b96:	1c02      	adds	r2, r0, #0
    7b98:	430a      	orrs	r2, r1
    7b9a:	705a      	strb	r2, [r3, #1]

	command = (NwkCommandRouteError_t *)frame->payload;
    7b9c:	68fb      	ldr	r3, [r7, #12]
    7b9e:	2281      	movs	r2, #129	; 0x81
    7ba0:	5c9a      	ldrb	r2, [r3, r2]
    7ba2:	2182      	movs	r1, #130	; 0x82
    7ba4:	5c59      	ldrb	r1, [r3, r1]
    7ba6:	0209      	lsls	r1, r1, #8
    7ba8:	430a      	orrs	r2, r1
    7baa:	2183      	movs	r1, #131	; 0x83
    7bac:	5c59      	ldrb	r1, [r3, r1]
    7bae:	0409      	lsls	r1, r1, #16
    7bb0:	430a      	orrs	r2, r1
    7bb2:	2184      	movs	r1, #132	; 0x84
    7bb4:	5c5b      	ldrb	r3, [r3, r1]
    7bb6:	061b      	lsls	r3, r3, #24
    7bb8:	4313      	orrs	r3, r2
    7bba:	60bb      	str	r3, [r7, #8]
	command->id = NWK_COMMAND_ROUTE_ERROR;
    7bbc:	68bb      	ldr	r3, [r7, #8]
    7bbe:	2201      	movs	r2, #1
    7bc0:	701a      	strb	r2, [r3, #0]
	command->srcAddr = src;
    7bc2:	68bb      	ldr	r3, [r7, #8]
    7bc4:	1dba      	adds	r2, r7, #6
    7bc6:	3301      	adds	r3, #1
    7bc8:	7814      	ldrb	r4, [r2, #0]
    7bca:	7819      	ldrb	r1, [r3, #0]
    7bcc:	2000      	movs	r0, #0
    7bce:	4001      	ands	r1, r0
    7bd0:	1c08      	adds	r0, r1, #0
    7bd2:	1c21      	adds	r1, r4, #0
    7bd4:	4301      	orrs	r1, r0
    7bd6:	7019      	strb	r1, [r3, #0]
    7bd8:	7850      	ldrb	r0, [r2, #1]
    7bda:	785a      	ldrb	r2, [r3, #1]
    7bdc:	2100      	movs	r1, #0
    7bde:	400a      	ands	r2, r1
    7be0:	1c11      	adds	r1, r2, #0
    7be2:	1c02      	adds	r2, r0, #0
    7be4:	430a      	orrs	r2, r1
    7be6:	705a      	strb	r2, [r3, #1]
	command->dstAddr = dst;
    7be8:	68bb      	ldr	r3, [r7, #8]
    7bea:	1d3a      	adds	r2, r7, #4
    7bec:	3303      	adds	r3, #3
    7bee:	7814      	ldrb	r4, [r2, #0]
    7bf0:	7819      	ldrb	r1, [r3, #0]
    7bf2:	2000      	movs	r0, #0
    7bf4:	4001      	ands	r1, r0
    7bf6:	1c08      	adds	r0, r1, #0
    7bf8:	1c21      	adds	r1, r4, #0
    7bfa:	4301      	orrs	r1, r0
    7bfc:	7019      	strb	r1, [r3, #0]
    7bfe:	7850      	ldrb	r0, [r2, #1]
    7c00:	785a      	ldrb	r2, [r3, #1]
    7c02:	2100      	movs	r1, #0
    7c04:	400a      	ands	r2, r1
    7c06:	1c11      	adds	r1, r2, #0
    7c08:	1c02      	adds	r2, r0, #0
    7c0a:	430a      	orrs	r2, r1
    7c0c:	705a      	strb	r2, [r3, #1]
	command->multicast = multicast;
    7c0e:	68bb      	ldr	r3, [r7, #8]
    7c10:	1cfa      	adds	r2, r7, #3
    7c12:	7812      	ldrb	r2, [r2, #0]
    7c14:	715a      	strb	r2, [r3, #5]

	nwkTxFrame(frame);
    7c16:	68fb      	ldr	r3, [r7, #12]
    7c18:	0018      	movs	r0, r3
    7c1a:	4b05      	ldr	r3, [pc, #20]	; (7c30 <nwkRouteSendRouteError+0x124>)
    7c1c:	4798      	blx	r3
    7c1e:	e000      	b.n	7c22 <nwkRouteSendRouteError+0x116>
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
		return;
    7c20:	46c0      	nop			; (mov r8, r8)
	command->srcAddr = src;
	command->dstAddr = dst;
	command->multicast = multicast;

	nwkTxFrame(frame);
}
    7c22:	46bd      	mov	sp, r7
    7c24:	b005      	add	sp, #20
    7c26:	bd90      	pop	{r4, r7, pc}
    7c28:	000073b5 	.word	0x000073b5
    7c2c:	00007529 	.word	0x00007529
    7c30:	00009475 	.word	0x00009475

00007c34 <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    7c34:	b580      	push	{r7, lr}
    7c36:	b084      	sub	sp, #16
    7c38:	af00      	add	r7, sp, #0
    7c3a:	6078      	str	r0, [r7, #4]
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    7c3c:	687b      	ldr	r3, [r7, #4]
    7c3e:	689b      	ldr	r3, [r3, #8]
    7c40:	60fb      	str	r3, [r7, #12]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    7c42:	687b      	ldr	r3, [r7, #4]
    7c44:	7b1b      	ldrb	r3, [r3, #12]
    7c46:	2b06      	cmp	r3, #6
    7c48:	d001      	beq.n	7c4e <nwkRouteErrorReceived+0x1a>
		return false;
    7c4a:	2300      	movs	r3, #0
    7c4c:	e00c      	b.n	7c68 <nwkRouteErrorReceived+0x34>
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    7c4e:	68fb      	ldr	r3, [r7, #12]
    7c50:	78da      	ldrb	r2, [r3, #3]
    7c52:	791b      	ldrb	r3, [r3, #4]
    7c54:	021b      	lsls	r3, r3, #8
    7c56:	4313      	orrs	r3, r2
    7c58:	b29a      	uxth	r2, r3
    7c5a:	68fb      	ldr	r3, [r7, #12]
    7c5c:	795b      	ldrb	r3, [r3, #5]
    7c5e:	0019      	movs	r1, r3
    7c60:	0010      	movs	r0, r2
    7c62:	4b03      	ldr	r3, [pc, #12]	; (7c70 <nwkRouteErrorReceived+0x3c>)
    7c64:	4798      	blx	r3

	return true;
    7c66:	2301      	movs	r3, #1
}
    7c68:	0018      	movs	r0, r3
    7c6a:	46bd      	mov	sp, r7
    7c6c:	b004      	add	sp, #16
    7c6e:	bd80      	pop	{r7, pc}
    7c70:	0000781d 	.word	0x0000781d

00007c74 <nwkRouteNormalizeRanks>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
    7c74:	b580      	push	{r7, lr}
    7c76:	b082      	sub	sp, #8
    7c78:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    7c7a:	1dfb      	adds	r3, r7, #7
    7c7c:	2200      	movs	r2, #0
    7c7e:	701a      	strb	r2, [r3, #0]
    7c80:	e017      	b.n	7cb2 <nwkRouteNormalizeRanks+0x3e>
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    7c82:	1dfb      	adds	r3, r7, #7
    7c84:	781b      	ldrb	r3, [r3, #0]
    7c86:	1dfa      	adds	r2, r7, #7
    7c88:	7812      	ldrb	r2, [r2, #0]
    7c8a:	490e      	ldr	r1, [pc, #56]	; (7cc4 <nwkRouteNormalizeRanks+0x50>)
    7c8c:	00d2      	lsls	r2, r2, #3
    7c8e:	188a      	adds	r2, r1, r2
    7c90:	3206      	adds	r2, #6
    7c92:	7812      	ldrb	r2, [r2, #0]
    7c94:	0852      	lsrs	r2, r2, #1
    7c96:	b2d2      	uxtb	r2, r2
    7c98:	3201      	adds	r2, #1
    7c9a:	b2d1      	uxtb	r1, r2
    7c9c:	4a09      	ldr	r2, [pc, #36]	; (7cc4 <nwkRouteNormalizeRanks+0x50>)
    7c9e:	00db      	lsls	r3, r3, #3
    7ca0:	18d3      	adds	r3, r2, r3
    7ca2:	3306      	adds	r3, #6
    7ca4:	1c0a      	adds	r2, r1, #0
    7ca6:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    7ca8:	1dfb      	adds	r3, r7, #7
    7caa:	781a      	ldrb	r2, [r3, #0]
    7cac:	1dfb      	adds	r3, r7, #7
    7cae:	3201      	adds	r2, #1
    7cb0:	701a      	strb	r2, [r3, #0]
    7cb2:	1dfb      	adds	r3, r7, #7
    7cb4:	781b      	ldrb	r3, [r3, #0]
    7cb6:	2b63      	cmp	r3, #99	; 0x63
    7cb8:	d9e3      	bls.n	7c82 <nwkRouteNormalizeRanks+0xe>
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
	}
}
    7cba:	46c0      	nop			; (mov r8, r8)
    7cbc:	46bd      	mov	sp, r7
    7cbe:	b002      	add	sp, #8
    7cc0:	bd80      	pop	{r7, pc}
    7cc2:	46c0      	nop			; (mov r8, r8)
    7cc4:	20000844 	.word	0x20000844

00007cc8 <nwkRouteDiscoveryInit>:

/*************************************************************************//**
*  @brief Initializes the Route Discovery module
*****************************************************************************/
void nwkRouteDiscoveryInit(void)
{
    7cc8:	b580      	push	{r7, lr}
    7cca:	b082      	sub	sp, #8
    7ccc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    7cce:	1dfb      	adds	r3, r7, #7
    7cd0:	2200      	movs	r2, #0
    7cd2:	701a      	strb	r2, [r3, #0]
    7cd4:	e00f      	b.n	7cf6 <nwkRouteDiscoveryInit+0x2e>
		nwkRouteDiscoveryTable[i].timeout = 0;
    7cd6:	1dfb      	adds	r3, r7, #7
    7cd8:	781a      	ldrb	r2, [r3, #0]
    7cda:	490f      	ldr	r1, [pc, #60]	; (7d18 <nwkRouteDiscoveryInit+0x50>)
    7cdc:	0013      	movs	r3, r2
    7cde:	005b      	lsls	r3, r3, #1
    7ce0:	189b      	adds	r3, r3, r2
    7ce2:	009b      	lsls	r3, r3, #2
    7ce4:	18cb      	adds	r3, r1, r3
    7ce6:	330a      	adds	r3, #10
    7ce8:	2200      	movs	r2, #0
    7cea:	801a      	strh	r2, [r3, #0]
/*************************************************************************//**
*  @brief Initializes the Route Discovery module
*****************************************************************************/
void nwkRouteDiscoveryInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    7cec:	1dfb      	adds	r3, r7, #7
    7cee:	781a      	ldrb	r2, [r3, #0]
    7cf0:	1dfb      	adds	r3, r7, #7
    7cf2:	3201      	adds	r2, #1
    7cf4:	701a      	strb	r2, [r3, #0]
    7cf6:	1dfb      	adds	r3, r7, #7
    7cf8:	781b      	ldrb	r3, [r3, #0]
    7cfa:	2b04      	cmp	r3, #4
    7cfc:	d9eb      	bls.n	7cd6 <nwkRouteDiscoveryInit+0xe>
		nwkRouteDiscoveryTable[i].timeout = 0;
	}

	nwkRouteDiscoveryTimer.interval = NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    7cfe:	4b07      	ldr	r3, [pc, #28]	; (7d1c <nwkRouteDiscoveryInit+0x54>)
    7d00:	2264      	movs	r2, #100	; 0x64
    7d02:	609a      	str	r2, [r3, #8]
	nwkRouteDiscoveryTimer.mode = SYS_TIMER_INTERVAL_MODE;
    7d04:	4b05      	ldr	r3, [pc, #20]	; (7d1c <nwkRouteDiscoveryInit+0x54>)
    7d06:	2200      	movs	r2, #0
    7d08:	731a      	strb	r2, [r3, #12]
	nwkRouteDiscoveryTimer.handler = nwkRouteDiscoveryTimerHandler;
    7d0a:	4b04      	ldr	r3, [pc, #16]	; (7d1c <nwkRouteDiscoveryInit+0x54>)
    7d0c:	4a04      	ldr	r2, [pc, #16]	; (7d20 <nwkRouteDiscoveryInit+0x58>)
    7d0e:	611a      	str	r2, [r3, #16]
}
    7d10:	46c0      	nop			; (mov r8, r8)
    7d12:	46bd      	mov	sp, r7
    7d14:	b002      	add	sp, #8
    7d16:	bd80      	pop	{r7, pc}
    7d18:	20000b64 	.word	0x20000b64
    7d1c:	20000ba0 	.word	0x20000ba0
    7d20:	00007f39 	.word	0x00007f39

00007d24 <nwkRouteDiscoveryRequest>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
    7d24:	b580      	push	{r7, lr}
    7d26:	b084      	sub	sp, #16
    7d28:	af00      	add	r7, sp, #0
    7d2a:	6078      	str	r0, [r7, #4]
	NwkFrameHeader_t *header = &frame->header;
    7d2c:	687b      	ldr	r3, [r7, #4]
    7d2e:	3302      	adds	r3, #2
    7d30:	60fb      	str	r3, [r7, #12]
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
    7d32:	4b25      	ldr	r3, [pc, #148]	; (7dc8 <nwkRouteDiscoveryRequest+0xa4>)
    7d34:	8818      	ldrh	r0, [r3, #0]
    7d36:	68fb      	ldr	r3, [r7, #12]
    7d38:	7b5a      	ldrb	r2, [r3, #13]
    7d3a:	7b9b      	ldrb	r3, [r3, #14]
    7d3c:	021b      	lsls	r3, r3, #8
    7d3e:	4313      	orrs	r3, r2
    7d40:	b299      	uxth	r1, r3
			header->nwkFcf.multicast);
    7d42:	68fb      	ldr	r3, [r7, #12]
    7d44:	7a5b      	ldrb	r3, [r3, #9]
    7d46:	071b      	lsls	r3, r3, #28
    7d48:	0fdb      	lsrs	r3, r3, #31
    7d4a:	b2db      	uxtb	r3, r3
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
    7d4c:	001a      	movs	r2, r3
    7d4e:	4b1f      	ldr	r3, [pc, #124]	; (7dcc <nwkRouteDiscoveryRequest+0xa8>)
    7d50:	4798      	blx	r3
    7d52:	0003      	movs	r3, r0
    7d54:	60bb      	str	r3, [r7, #8]
			header->nwkFcf.multicast);

	if (entry) {
    7d56:	68bb      	ldr	r3, [r7, #8]
    7d58:	2b00      	cmp	r3, #0
    7d5a:	d003      	beq.n	7d64 <nwkRouteDiscoveryRequest+0x40>
		frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    7d5c:	687b      	ldr	r3, [r7, #4]
    7d5e:	2240      	movs	r2, #64	; 0x40
    7d60:	701a      	strb	r2, [r3, #0]
		return;
    7d62:	e02e      	b.n	7dc2 <nwkRouteDiscoveryRequest+0x9e>
	}

	entry = nwkRouteDiscoveryNewEntry();
    7d64:	4b1a      	ldr	r3, [pc, #104]	; (7dd0 <nwkRouteDiscoveryRequest+0xac>)
    7d66:	4798      	blx	r3
    7d68:	0003      	movs	r3, r0
    7d6a:	60bb      	str	r3, [r7, #8]

	if (entry) {
    7d6c:	68bb      	ldr	r3, [r7, #8]
    7d6e:	2b00      	cmp	r3, #0
    7d70:	d022      	beq.n	7db8 <nwkRouteDiscoveryRequest+0x94>
		entry->srcAddr = nwkIb.addr;
    7d72:	4b15      	ldr	r3, [pc, #84]	; (7dc8 <nwkRouteDiscoveryRequest+0xa4>)
    7d74:	881a      	ldrh	r2, [r3, #0]
    7d76:	68bb      	ldr	r3, [r7, #8]
    7d78:	801a      	strh	r2, [r3, #0]
		entry->dstAddr = header->nwkDstAddr;
    7d7a:	68fb      	ldr	r3, [r7, #12]
    7d7c:	7b5a      	ldrb	r2, [r3, #13]
    7d7e:	7b9b      	ldrb	r3, [r3, #14]
    7d80:	021b      	lsls	r3, r3, #8
    7d82:	4313      	orrs	r3, r2
    7d84:	b29a      	uxth	r2, r3
    7d86:	68bb      	ldr	r3, [r7, #8]
    7d88:	805a      	strh	r2, [r3, #2]
		entry->multicast = header->nwkFcf.multicast;
    7d8a:	68fb      	ldr	r3, [r7, #12]
    7d8c:	7a5b      	ldrb	r3, [r3, #9]
    7d8e:	071b      	lsls	r3, r3, #28
    7d90:	0fdb      	lsrs	r3, r3, #31
    7d92:	b2db      	uxtb	r3, r3
    7d94:	001a      	movs	r2, r3
    7d96:	68bb      	ldr	r3, [r7, #8]
    7d98:	711a      	strb	r2, [r3, #4]
		entry->senderAddr = NWK_BROADCAST_ADDR;
    7d9a:	68bb      	ldr	r3, [r7, #8]
    7d9c:	2201      	movs	r2, #1
    7d9e:	4252      	negs	r2, r2
    7da0:	80da      	strh	r2, [r3, #6]

		if (nwkRouteDiscoverySendRequest(entry,
    7da2:	68bb      	ldr	r3, [r7, #8]
    7da4:	21ff      	movs	r1, #255	; 0xff
    7da6:	0018      	movs	r0, r3
    7da8:	4b0a      	ldr	r3, [pc, #40]	; (7dd4 <nwkRouteDiscoveryRequest+0xb0>)
    7daa:	4798      	blx	r3
    7dac:	1e03      	subs	r3, r0, #0
    7dae:	d003      	beq.n	7db8 <nwkRouteDiscoveryRequest+0x94>
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY)) {
			frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    7db0:	687b      	ldr	r3, [r7, #4]
    7db2:	2240      	movs	r2, #64	; 0x40
    7db4:	701a      	strb	r2, [r3, #0]
			return;
    7db6:	e004      	b.n	7dc2 <nwkRouteDiscoveryRequest+0x9e>
		}
	}

	nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    7db8:	687b      	ldr	r3, [r7, #4]
    7dba:	2111      	movs	r1, #17
    7dbc:	0018      	movs	r0, r3
    7dbe:	4b06      	ldr	r3, [pc, #24]	; (7dd8 <nwkRouteDiscoveryRequest+0xb4>)
    7dc0:	4798      	blx	r3
}
    7dc2:	46bd      	mov	sp, r7
    7dc4:	b004      	add	sp, #16
    7dc6:	bd80      	pop	{r7, pc}
    7dc8:	20001024 	.word	0x20001024
    7dcc:	00007ddd 	.word	0x00007ddd
    7dd0:	00007eb1 	.word	0x00007eb1
    7dd4:	00007fed 	.word	0x00007fed
    7dd8:	00009915 	.word	0x00009915

00007ddc <nwkRouteDiscoveryFindEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
    7ddc:	b590      	push	{r4, r7, lr}
    7dde:	b085      	sub	sp, #20
    7de0:	af00      	add	r7, sp, #0
    7de2:	0004      	movs	r4, r0
    7de4:	0008      	movs	r0, r1
    7de6:	0011      	movs	r1, r2
    7de8:	1dbb      	adds	r3, r7, #6
    7dea:	1c22      	adds	r2, r4, #0
    7dec:	801a      	strh	r2, [r3, #0]
    7dee:	1d3b      	adds	r3, r7, #4
    7df0:	1c02      	adds	r2, r0, #0
    7df2:	801a      	strh	r2, [r3, #0]
    7df4:	1cfb      	adds	r3, r7, #3
    7df6:	1c0a      	adds	r2, r1, #0
    7df8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    7dfa:	230f      	movs	r3, #15
    7dfc:	18fb      	adds	r3, r7, r3
    7dfe:	2200      	movs	r2, #0
    7e00:	701a      	strb	r2, [r3, #0]
    7e02:	e048      	b.n	7e96 <nwkRouteDiscoveryFindEntry+0xba>
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
    7e04:	230f      	movs	r3, #15
    7e06:	18fb      	adds	r3, r7, r3
    7e08:	781a      	ldrb	r2, [r3, #0]
    7e0a:	4928      	ldr	r1, [pc, #160]	; (7eac <nwkRouteDiscoveryFindEntry+0xd0>)
    7e0c:	0013      	movs	r3, r2
    7e0e:	005b      	lsls	r3, r3, #1
    7e10:	189b      	adds	r3, r3, r2
    7e12:	009b      	lsls	r3, r3, #2
    7e14:	18cb      	adds	r3, r1, r3
    7e16:	330a      	adds	r3, #10
    7e18:	881b      	ldrh	r3, [r3, #0]
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	d034      	beq.n	7e88 <nwkRouteDiscoveryFindEntry+0xac>
				nwkRouteDiscoveryTable[i].srcAddr == src &&
    7e1e:	230f      	movs	r3, #15
    7e20:	18fb      	adds	r3, r7, r3
    7e22:	781a      	ldrb	r2, [r3, #0]
    7e24:	4921      	ldr	r1, [pc, #132]	; (7eac <nwkRouteDiscoveryFindEntry+0xd0>)
    7e26:	0013      	movs	r3, r2
    7e28:	005b      	lsls	r3, r3, #1
    7e2a:	189b      	adds	r3, r3, r2
    7e2c:	009b      	lsls	r3, r3, #2
    7e2e:	5a5b      	ldrh	r3, [r3, r1]
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
    7e30:	1dba      	adds	r2, r7, #6
    7e32:	8812      	ldrh	r2, [r2, #0]
    7e34:	429a      	cmp	r2, r3
    7e36:	d127      	bne.n	7e88 <nwkRouteDiscoveryFindEntry+0xac>
				nwkRouteDiscoveryTable[i].srcAddr == src &&
				nwkRouteDiscoveryTable[i].dstAddr == dst &&
    7e38:	230f      	movs	r3, #15
    7e3a:	18fb      	adds	r3, r7, r3
    7e3c:	781a      	ldrb	r2, [r3, #0]
    7e3e:	491b      	ldr	r1, [pc, #108]	; (7eac <nwkRouteDiscoveryFindEntry+0xd0>)
    7e40:	0013      	movs	r3, r2
    7e42:	005b      	lsls	r3, r3, #1
    7e44:	189b      	adds	r3, r3, r2
    7e46:	009b      	lsls	r3, r3, #2
    7e48:	18cb      	adds	r3, r1, r3
    7e4a:	3302      	adds	r3, #2
    7e4c:	881b      	ldrh	r3, [r3, #0]
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
				nwkRouteDiscoveryTable[i].srcAddr == src &&
    7e4e:	1d3a      	adds	r2, r7, #4
    7e50:	8812      	ldrh	r2, [r2, #0]
    7e52:	429a      	cmp	r2, r3
    7e54:	d118      	bne.n	7e88 <nwkRouteDiscoveryFindEntry+0xac>
				nwkRouteDiscoveryTable[i].dstAddr == dst &&
				nwkRouteDiscoveryTable[i].multicast ==
    7e56:	230f      	movs	r3, #15
    7e58:	18fb      	adds	r3, r7, r3
    7e5a:	781a      	ldrb	r2, [r3, #0]
    7e5c:	4913      	ldr	r1, [pc, #76]	; (7eac <nwkRouteDiscoveryFindEntry+0xd0>)
    7e5e:	0013      	movs	r3, r2
    7e60:	005b      	lsls	r3, r3, #1
    7e62:	189b      	adds	r3, r3, r2
    7e64:	009b      	lsls	r3, r3, #2
    7e66:	18cb      	adds	r3, r1, r3
    7e68:	3304      	adds	r3, #4
    7e6a:	781b      	ldrb	r3, [r3, #0]
		uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
				nwkRouteDiscoveryTable[i].srcAddr == src &&
				nwkRouteDiscoveryTable[i].dstAddr == dst &&
    7e6c:	1cfa      	adds	r2, r7, #3
    7e6e:	7812      	ldrb	r2, [r2, #0]
    7e70:	429a      	cmp	r2, r3
    7e72:	d109      	bne.n	7e88 <nwkRouteDiscoveryFindEntry+0xac>
				nwkRouteDiscoveryTable[i].multicast ==
				multicast) {
			return &nwkRouteDiscoveryTable[i];
    7e74:	230f      	movs	r3, #15
    7e76:	18fb      	adds	r3, r7, r3
    7e78:	781a      	ldrb	r2, [r3, #0]
    7e7a:	0013      	movs	r3, r2
    7e7c:	005b      	lsls	r3, r3, #1
    7e7e:	189b      	adds	r3, r3, r2
    7e80:	009b      	lsls	r3, r3, #2
    7e82:	4a0a      	ldr	r2, [pc, #40]	; (7eac <nwkRouteDiscoveryFindEntry+0xd0>)
    7e84:	189b      	adds	r3, r3, r2
    7e86:	e00c      	b.n	7ea2 <nwkRouteDiscoveryFindEntry+0xc6>
/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    7e88:	230f      	movs	r3, #15
    7e8a:	18fb      	adds	r3, r7, r3
    7e8c:	781a      	ldrb	r2, [r3, #0]
    7e8e:	230f      	movs	r3, #15
    7e90:	18fb      	adds	r3, r7, r3
    7e92:	3201      	adds	r2, #1
    7e94:	701a      	strb	r2, [r3, #0]
    7e96:	230f      	movs	r3, #15
    7e98:	18fb      	adds	r3, r7, r3
    7e9a:	781b      	ldrb	r3, [r3, #0]
    7e9c:	2b04      	cmp	r3, #4
    7e9e:	d9b1      	bls.n	7e04 <nwkRouteDiscoveryFindEntry+0x28>
				multicast) {
			return &nwkRouteDiscoveryTable[i];
		}
	}

	return NULL;
    7ea0:	2300      	movs	r3, #0
}
    7ea2:	0018      	movs	r0, r3
    7ea4:	46bd      	mov	sp, r7
    7ea6:	b005      	add	sp, #20
    7ea8:	bd90      	pop	{r4, r7, pc}
    7eaa:	46c0      	nop			; (mov r8, r8)
    7eac:	20000b64 	.word	0x20000b64

00007eb0 <nwkRouteDiscoveryNewEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
    7eb0:	b580      	push	{r7, lr}
    7eb2:	b082      	sub	sp, #8
    7eb4:	af00      	add	r7, sp, #0
	NwkRouteDiscoveryTableEntry_t *entry = NULL;
    7eb6:	2300      	movs	r3, #0
    7eb8:	607b      	str	r3, [r7, #4]

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    7eba:	1cfb      	adds	r3, r7, #3
    7ebc:	2200      	movs	r2, #0
    7ebe:	701a      	strb	r2, [r3, #0]
    7ec0:	e01a      	b.n	7ef8 <nwkRouteDiscoveryNewEntry+0x48>
		if (0 == nwkRouteDiscoveryTable[i].timeout) {
    7ec2:	1cfb      	adds	r3, r7, #3
    7ec4:	781a      	ldrb	r2, [r3, #0]
    7ec6:	4919      	ldr	r1, [pc, #100]	; (7f2c <nwkRouteDiscoveryNewEntry+0x7c>)
    7ec8:	0013      	movs	r3, r2
    7eca:	005b      	lsls	r3, r3, #1
    7ecc:	189b      	adds	r3, r3, r2
    7ece:	009b      	lsls	r3, r3, #2
    7ed0:	18cb      	adds	r3, r1, r3
    7ed2:	330a      	adds	r3, #10
    7ed4:	881b      	ldrh	r3, [r3, #0]
    7ed6:	2b00      	cmp	r3, #0
    7ed8:	d109      	bne.n	7eee <nwkRouteDiscoveryNewEntry+0x3e>
			entry = &nwkRouteDiscoveryTable[i];
    7eda:	1cfb      	adds	r3, r7, #3
    7edc:	781a      	ldrb	r2, [r3, #0]
    7ede:	0013      	movs	r3, r2
    7ee0:	005b      	lsls	r3, r3, #1
    7ee2:	189b      	adds	r3, r3, r2
    7ee4:	009b      	lsls	r3, r3, #2
    7ee6:	4a11      	ldr	r2, [pc, #68]	; (7f2c <nwkRouteDiscoveryNewEntry+0x7c>)
    7ee8:	189b      	adds	r3, r3, r2
    7eea:	607b      	str	r3, [r7, #4]
			break;
    7eec:	e008      	b.n	7f00 <nwkRouteDiscoveryNewEntry+0x50>
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
	NwkRouteDiscoveryTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    7eee:	1cfb      	adds	r3, r7, #3
    7ef0:	781a      	ldrb	r2, [r3, #0]
    7ef2:	1cfb      	adds	r3, r7, #3
    7ef4:	3201      	adds	r2, #1
    7ef6:	701a      	strb	r2, [r3, #0]
    7ef8:	1cfb      	adds	r3, r7, #3
    7efa:	781b      	ldrb	r3, [r3, #0]
    7efc:	2b04      	cmp	r3, #4
    7efe:	d9e0      	bls.n	7ec2 <nwkRouteDiscoveryNewEntry+0x12>
			entry = &nwkRouteDiscoveryTable[i];
			break;
		}
	}

	if (entry) {
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	2b00      	cmp	r3, #0
    7f04:	d00d      	beq.n	7f22 <nwkRouteDiscoveryNewEntry+0x72>
		entry->forwardLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    7f06:	687b      	ldr	r3, [r7, #4]
    7f08:	2200      	movs	r2, #0
    7f0a:	721a      	strb	r2, [r3, #8]
		entry->reverseLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    7f0c:	687b      	ldr	r3, [r7, #4]
    7f0e:	2200      	movs	r2, #0
    7f10:	725a      	strb	r2, [r3, #9]
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
    7f12:	687b      	ldr	r3, [r7, #4]
    7f14:	22fa      	movs	r2, #250	; 0xfa
    7f16:	0092      	lsls	r2, r2, #2
    7f18:	815a      	strh	r2, [r3, #10]
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
    7f1a:	4b05      	ldr	r3, [pc, #20]	; (7f30 <nwkRouteDiscoveryNewEntry+0x80>)
    7f1c:	0018      	movs	r0, r3
    7f1e:	4b05      	ldr	r3, [pc, #20]	; (7f34 <nwkRouteDiscoveryNewEntry+0x84>)
    7f20:	4798      	blx	r3
	}

	return entry;
    7f22:	687b      	ldr	r3, [r7, #4]
}
    7f24:	0018      	movs	r0, r3
    7f26:	46bd      	mov	sp, r7
    7f28:	b002      	add	sp, #8
    7f2a:	bd80      	pop	{r7, pc}
    7f2c:	20000b64 	.word	0x20000b64
    7f30:	20000ba0 	.word	0x20000ba0
    7f34:	0000656d 	.word	0x0000656d

00007f38 <nwkRouteDiscoveryTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
    7f38:	b580      	push	{r7, lr}
    7f3a:	b084      	sub	sp, #16
    7f3c:	af00      	add	r7, sp, #0
    7f3e:	6078      	str	r0, [r7, #4]
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;
    7f40:	230f      	movs	r3, #15
    7f42:	18fb      	adds	r3, r7, r3
    7f44:	2200      	movs	r2, #0
    7f46:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    7f48:	230e      	movs	r3, #14
    7f4a:	18fb      	adds	r3, r7, r3
    7f4c:	2200      	movs	r2, #0
    7f4e:	701a      	strb	r2, [r3, #0]
    7f50:	e032      	b.n	7fb8 <nwkRouteDiscoveryTimerHandler+0x80>
		entry = &nwkRouteDiscoveryTable[i];
    7f52:	230e      	movs	r3, #14
    7f54:	18fb      	adds	r3, r7, r3
    7f56:	781a      	ldrb	r2, [r3, #0]
    7f58:	0013      	movs	r3, r2
    7f5a:	005b      	lsls	r3, r3, #1
    7f5c:	189b      	adds	r3, r3, r2
    7f5e:	009b      	lsls	r3, r3, #2
    7f60:	4a1e      	ldr	r2, [pc, #120]	; (7fdc <nwkRouteDiscoveryTimerHandler+0xa4>)
    7f62:	189b      	adds	r3, r3, r2
    7f64:	60bb      	str	r3, [r7, #8]

		if (entry->timeout > NWK_ROUTE_DISCOVERY_TIMER_INTERVAL) {
    7f66:	68bb      	ldr	r3, [r7, #8]
    7f68:	895b      	ldrh	r3, [r3, #10]
    7f6a:	2b64      	cmp	r3, #100	; 0x64
    7f6c:	d90a      	bls.n	7f84 <nwkRouteDiscoveryTimerHandler+0x4c>
			entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    7f6e:	68bb      	ldr	r3, [r7, #8]
    7f70:	895b      	ldrh	r3, [r3, #10]
    7f72:	3b64      	subs	r3, #100	; 0x64
    7f74:	b29a      	uxth	r2, r3
    7f76:	68bb      	ldr	r3, [r7, #8]
    7f78:	815a      	strh	r2, [r3, #10]
			restart = true;
    7f7a:	230f      	movs	r3, #15
    7f7c:	18fb      	adds	r3, r7, r3
    7f7e:	2201      	movs	r2, #1
    7f80:	701a      	strb	r2, [r3, #0]
    7f82:	e012      	b.n	7faa <nwkRouteDiscoveryTimerHandler+0x72>
		} else {
			entry->timeout = 0;
    7f84:	68bb      	ldr	r3, [r7, #8]
    7f86:	2200      	movs	r2, #0
    7f88:	815a      	strh	r2, [r3, #10]

			if (entry->srcAddr == nwkIb.addr) {
    7f8a:	68bb      	ldr	r3, [r7, #8]
    7f8c:	881a      	ldrh	r2, [r3, #0]
    7f8e:	4b14      	ldr	r3, [pc, #80]	; (7fe0 <nwkRouteDiscoveryTimerHandler+0xa8>)
    7f90:	881b      	ldrh	r3, [r3, #0]
    7f92:	429a      	cmp	r2, r3
    7f94:	d109      	bne.n	7faa <nwkRouteDiscoveryTimerHandler+0x72>
				nwkRouteDiscoveryDone(entry,
						entry->reverseLinkQuality >
    7f96:	68bb      	ldr	r3, [r7, #8]
    7f98:	7a5b      	ldrb	r3, [r3, #9]
			restart = true;
		} else {
			entry->timeout = 0;

			if (entry->srcAddr == nwkIb.addr) {
				nwkRouteDiscoveryDone(entry,
    7f9a:	1e5a      	subs	r2, r3, #1
    7f9c:	4193      	sbcs	r3, r2
    7f9e:	b2da      	uxtb	r2, r3
    7fa0:	68bb      	ldr	r3, [r7, #8]
    7fa2:	0011      	movs	r1, r2
    7fa4:	0018      	movs	r0, r3
    7fa6:	4b0f      	ldr	r3, [pc, #60]	; (7fe4 <nwkRouteDiscoveryTimerHandler+0xac>)
    7fa8:	4798      	blx	r3
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    7faa:	230e      	movs	r3, #14
    7fac:	18fb      	adds	r3, r7, r3
    7fae:	781a      	ldrb	r2, [r3, #0]
    7fb0:	230e      	movs	r3, #14
    7fb2:	18fb      	adds	r3, r7, r3
    7fb4:	3201      	adds	r2, #1
    7fb6:	701a      	strb	r2, [r3, #0]
    7fb8:	230e      	movs	r3, #14
    7fba:	18fb      	adds	r3, r7, r3
    7fbc:	781b      	ldrb	r3, [r3, #0]
    7fbe:	2b04      	cmp	r3, #4
    7fc0:	d9c7      	bls.n	7f52 <nwkRouteDiscoveryTimerHandler+0x1a>
						0);
			}
		}
	}

	if (restart) {
    7fc2:	230f      	movs	r3, #15
    7fc4:	18fb      	adds	r3, r7, r3
    7fc6:	781b      	ldrb	r3, [r3, #0]
    7fc8:	2b00      	cmp	r3, #0
    7fca:	d003      	beq.n	7fd4 <nwkRouteDiscoveryTimerHandler+0x9c>
		SYS_TimerStart(timer);
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	0018      	movs	r0, r3
    7fd0:	4b05      	ldr	r3, [pc, #20]	; (7fe8 <nwkRouteDiscoveryTimerHandler+0xb0>)
    7fd2:	4798      	blx	r3
	}
}
    7fd4:	46c0      	nop			; (mov r8, r8)
    7fd6:	46bd      	mov	sp, r7
    7fd8:	b004      	add	sp, #16
    7fda:	bd80      	pop	{r7, pc}
    7fdc:	20000b64 	.word	0x20000b64
    7fe0:	20001024 	.word	0x20001024
    7fe4:	00008509 	.word	0x00008509
    7fe8:	0000656d 	.word	0x0000656d

00007fec <nwkRouteDiscoverySendRequest>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRouteDiscoverySendRequest(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t lq)
{
    7fec:	b590      	push	{r4, r7, lr}
    7fee:	b085      	sub	sp, #20
    7ff0:	af00      	add	r7, sp, #0
    7ff2:	6078      	str	r0, [r7, #4]
    7ff4:	000a      	movs	r2, r1
    7ff6:	1cfb      	adds	r3, r7, #3
    7ff8:	701a      	strb	r2, [r3, #0]
	NwkFrame_t *req;
	NwkCommandRouteRequest_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    7ffa:	4b45      	ldr	r3, [pc, #276]	; (8110 <nwkRouteDiscoverySendRequest+0x124>)
    7ffc:	4798      	blx	r3
    7ffe:	0003      	movs	r3, r0
    8000:	60fb      	str	r3, [r7, #12]
    8002:	68fb      	ldr	r3, [r7, #12]
    8004:	2b00      	cmp	r3, #0
    8006:	d101      	bne.n	800c <nwkRouteDiscoverySendRequest+0x20>
		return false;
    8008:	2300      	movs	r3, #0
    800a:	e07d      	b.n	8108 <nwkRouteDiscoverySendRequest+0x11c>
	}

	nwkFrameCommandInit(req);
    800c:	68fb      	ldr	r3, [r7, #12]
    800e:	0018      	movs	r0, r3
    8010:	4b40      	ldr	r3, [pc, #256]	; (8114 <nwkRouteDiscoverySendRequest+0x128>)
    8012:	4798      	blx	r3

	req->size += sizeof(NwkCommandRouteRequest_t);
    8014:	68fb      	ldr	r3, [r7, #12]
    8016:	785b      	ldrb	r3, [r3, #1]
    8018:	3307      	adds	r3, #7
    801a:	b2da      	uxtb	r2, r3
    801c:	68fb      	ldr	r3, [r7, #12]
    801e:	705a      	strb	r2, [r3, #1]
	req->tx.confirm = NULL;
    8020:	68fb      	ldr	r3, [r7, #12]
    8022:	2289      	movs	r2, #137	; 0x89
    8024:	5c99      	ldrb	r1, [r3, r2]
    8026:	2000      	movs	r0, #0
    8028:	4001      	ands	r1, r0
    802a:	5499      	strb	r1, [r3, r2]
    802c:	1899      	adds	r1, r3, r2
    802e:	7848      	ldrb	r0, [r1, #1]
    8030:	2400      	movs	r4, #0
    8032:	4020      	ands	r0, r4
    8034:	7048      	strb	r0, [r1, #1]
    8036:	1899      	adds	r1, r3, r2
    8038:	7888      	ldrb	r0, [r1, #2]
    803a:	2400      	movs	r4, #0
    803c:	4020      	ands	r0, r4
    803e:	7088      	strb	r0, [r1, #2]
    8040:	189b      	adds	r3, r3, r2
    8042:	78da      	ldrb	r2, [r3, #3]
    8044:	2100      	movs	r1, #0
    8046:	400a      	ands	r2, r1
    8048:	70da      	strb	r2, [r3, #3]

	req->header.nwkFcf.linkLocal = 1;
    804a:	68fb      	ldr	r3, [r7, #12]
    804c:	7ada      	ldrb	r2, [r3, #11]
    804e:	2104      	movs	r1, #4
    8050:	430a      	orrs	r2, r1
    8052:	72da      	strb	r2, [r3, #11]
	req->header.nwkDstAddr = NWK_BROADCAST_ADDR;
    8054:	68fb      	ldr	r3, [r7, #12]
    8056:	330f      	adds	r3, #15
    8058:	781a      	ldrb	r2, [r3, #0]
    805a:	2101      	movs	r1, #1
    805c:	4249      	negs	r1, r1
    805e:	430a      	orrs	r2, r1
    8060:	701a      	strb	r2, [r3, #0]
    8062:	785a      	ldrb	r2, [r3, #1]
    8064:	2101      	movs	r1, #1
    8066:	4249      	negs	r1, r1
    8068:	430a      	orrs	r2, r1
    806a:	705a      	strb	r2, [r3, #1]

	command = (NwkCommandRouteRequest_t *)req->payload;
    806c:	68fb      	ldr	r3, [r7, #12]
    806e:	2281      	movs	r2, #129	; 0x81
    8070:	5c9a      	ldrb	r2, [r3, r2]
    8072:	2182      	movs	r1, #130	; 0x82
    8074:	5c59      	ldrb	r1, [r3, r1]
    8076:	0209      	lsls	r1, r1, #8
    8078:	430a      	orrs	r2, r1
    807a:	2183      	movs	r1, #131	; 0x83
    807c:	5c59      	ldrb	r1, [r3, r1]
    807e:	0409      	lsls	r1, r1, #16
    8080:	430a      	orrs	r2, r1
    8082:	2184      	movs	r1, #132	; 0x84
    8084:	5c5b      	ldrb	r3, [r3, r1]
    8086:	061b      	lsls	r3, r3, #24
    8088:	4313      	orrs	r3, r2
    808a:	60bb      	str	r3, [r7, #8]
	command->id = NWK_COMMAND_ROUTE_REQUEST;
    808c:	68bb      	ldr	r3, [r7, #8]
    808e:	2202      	movs	r2, #2
    8090:	701a      	strb	r2, [r3, #0]
	command->srcAddr = entry->srcAddr;
    8092:	687b      	ldr	r3, [r7, #4]
    8094:	881a      	ldrh	r2, [r3, #0]
    8096:	68bb      	ldr	r3, [r7, #8]
    8098:	3301      	adds	r3, #1
    809a:	21ff      	movs	r1, #255	; 0xff
    809c:	4011      	ands	r1, r2
    809e:	000c      	movs	r4, r1
    80a0:	7819      	ldrb	r1, [r3, #0]
    80a2:	2000      	movs	r0, #0
    80a4:	4001      	ands	r1, r0
    80a6:	1c08      	adds	r0, r1, #0
    80a8:	1c21      	adds	r1, r4, #0
    80aa:	4301      	orrs	r1, r0
    80ac:	7019      	strb	r1, [r3, #0]
    80ae:	0a12      	lsrs	r2, r2, #8
    80b0:	b290      	uxth	r0, r2
    80b2:	785a      	ldrb	r2, [r3, #1]
    80b4:	2100      	movs	r1, #0
    80b6:	400a      	ands	r2, r1
    80b8:	1c11      	adds	r1, r2, #0
    80ba:	1c02      	adds	r2, r0, #0
    80bc:	430a      	orrs	r2, r1
    80be:	705a      	strb	r2, [r3, #1]
	command->dstAddr = entry->dstAddr;
    80c0:	687b      	ldr	r3, [r7, #4]
    80c2:	885a      	ldrh	r2, [r3, #2]
    80c4:	68bb      	ldr	r3, [r7, #8]
    80c6:	3303      	adds	r3, #3
    80c8:	21ff      	movs	r1, #255	; 0xff
    80ca:	4011      	ands	r1, r2
    80cc:	000c      	movs	r4, r1
    80ce:	7819      	ldrb	r1, [r3, #0]
    80d0:	2000      	movs	r0, #0
    80d2:	4001      	ands	r1, r0
    80d4:	1c08      	adds	r0, r1, #0
    80d6:	1c21      	adds	r1, r4, #0
    80d8:	4301      	orrs	r1, r0
    80da:	7019      	strb	r1, [r3, #0]
    80dc:	0a12      	lsrs	r2, r2, #8
    80de:	b290      	uxth	r0, r2
    80e0:	785a      	ldrb	r2, [r3, #1]
    80e2:	2100      	movs	r1, #0
    80e4:	400a      	ands	r2, r1
    80e6:	1c11      	adds	r1, r2, #0
    80e8:	1c02      	adds	r2, r0, #0
    80ea:	430a      	orrs	r2, r1
    80ec:	705a      	strb	r2, [r3, #1]
	command->multicast = entry->multicast;
    80ee:	687b      	ldr	r3, [r7, #4]
    80f0:	791a      	ldrb	r2, [r3, #4]
    80f2:	68bb      	ldr	r3, [r7, #8]
    80f4:	715a      	strb	r2, [r3, #5]
	command->linkQuality = lq;
    80f6:	68bb      	ldr	r3, [r7, #8]
    80f8:	1cfa      	adds	r2, r7, #3
    80fa:	7812      	ldrb	r2, [r2, #0]
    80fc:	719a      	strb	r2, [r3, #6]

	nwkTxFrame(req);
    80fe:	68fb      	ldr	r3, [r7, #12]
    8100:	0018      	movs	r0, r3
    8102:	4b05      	ldr	r3, [pc, #20]	; (8118 <nwkRouteDiscoverySendRequest+0x12c>)
    8104:	4798      	blx	r3

	return true;
    8106:	2301      	movs	r3, #1
}
    8108:	0018      	movs	r0, r3
    810a:	46bd      	mov	sp, r7
    810c:	b005      	add	sp, #20
    810e:	bd90      	pop	{r4, r7, pc}
    8110:	000073b5 	.word	0x000073b5
    8114:	00007529 	.word	0x00007529
    8118:	00009475 	.word	0x00009475

0000811c <nwkRouteDiscoveryRequestReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryRequestReceived(NWK_DataInd_t *ind)
{
    811c:	b590      	push	{r4, r7, lr}
    811e:	b087      	sub	sp, #28
    8120:	af00      	add	r7, sp, #0
    8122:	6078      	str	r0, [r7, #4]
	NwkCommandRouteRequest_t *command
    8124:	687b      	ldr	r3, [r7, #4]
    8126:	689b      	ldr	r3, [r3, #8]
    8128:	60fb      	str	r3, [r7, #12]
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;
    812a:	2313      	movs	r3, #19
    812c:	18fb      	adds	r3, r7, r3
    812e:	2200      	movs	r2, #0
    8130:	701a      	strb	r2, [r3, #0]

	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
    8132:	687b      	ldr	r3, [r7, #4]
    8134:	7b1b      	ldrb	r3, [r3, #12]
    8136:	2b07      	cmp	r3, #7
    8138:	d001      	beq.n	813e <nwkRouteDiscoveryRequestReceived+0x22>
		return false;
    813a:	2300      	movs	r3, #0
    813c:	e0a2      	b.n	8284 <nwkRouteDiscoveryRequestReceived+0x168>
	if (1 == command->multicast && NWK_GroupIsMember(command->dstAddr)) {
		reply = true;
	}
#endif

	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
    813e:	68fb      	ldr	r3, [r7, #12]
    8140:	795b      	ldrb	r3, [r3, #5]
    8142:	2b00      	cmp	r3, #0
    8144:	d10d      	bne.n	8162 <nwkRouteDiscoveryRequestReceived+0x46>
    8146:	68fb      	ldr	r3, [r7, #12]
    8148:	78da      	ldrb	r2, [r3, #3]
    814a:	791b      	ldrb	r3, [r3, #4]
    814c:	021b      	lsls	r3, r3, #8
    814e:	4313      	orrs	r3, r2
    8150:	b29a      	uxth	r2, r3
    8152:	4b4e      	ldr	r3, [pc, #312]	; (828c <nwkRouteDiscoveryRequestReceived+0x170>)
    8154:	881b      	ldrh	r3, [r3, #0]
    8156:	429a      	cmp	r2, r3
    8158:	d103      	bne.n	8162 <nwkRouteDiscoveryRequestReceived+0x46>
		reply = true;
    815a:	2313      	movs	r3, #19
    815c:	18fb      	adds	r3, r7, r3
    815e:	2201      	movs	r2, #1
    8160:	701a      	strb	r2, [r3, #0]
	}

	if (command->srcAddr == nwkIb.addr) {
    8162:	68fb      	ldr	r3, [r7, #12]
    8164:	785a      	ldrb	r2, [r3, #1]
    8166:	789b      	ldrb	r3, [r3, #2]
    8168:	021b      	lsls	r3, r3, #8
    816a:	4313      	orrs	r3, r2
    816c:	b29a      	uxth	r2, r3
    816e:	4b47      	ldr	r3, [pc, #284]	; (828c <nwkRouteDiscoveryRequestReceived+0x170>)
    8170:	881b      	ldrh	r3, [r3, #0]
    8172:	429a      	cmp	r2, r3
    8174:	d101      	bne.n	817a <nwkRouteDiscoveryRequestReceived+0x5e>
		return true;
    8176:	2301      	movs	r3, #1
    8178:	e084      	b.n	8284 <nwkRouteDiscoveryRequestReceived+0x168>
	}

	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
    817a:	2313      	movs	r3, #19
    817c:	18fb      	adds	r3, r7, r3
    817e:	781b      	ldrb	r3, [r3, #0]
    8180:	2201      	movs	r2, #1
    8182:	4053      	eors	r3, r2
    8184:	b2db      	uxtb	r3, r3
    8186:	2b00      	cmp	r3, #0
    8188:	d006      	beq.n	8198 <nwkRouteDiscoveryRequestReceived+0x7c>
    818a:	4b40      	ldr	r3, [pc, #256]	; (828c <nwkRouteDiscoveryRequestReceived+0x170>)
    818c:	881b      	ldrh	r3, [r3, #0]
    818e:	b21b      	sxth	r3, r3
    8190:	2b00      	cmp	r3, #0
    8192:	da01      	bge.n	8198 <nwkRouteDiscoveryRequestReceived+0x7c>
		return true;
    8194:	2301      	movs	r3, #1
    8196:	e075      	b.n	8284 <nwkRouteDiscoveryRequestReceived+0x168>
	}

	linkQuality = nwkRouteDiscoveryUpdateLq(command->linkQuality, ind->lqi);
    8198:	68fb      	ldr	r3, [r7, #12]
    819a:	799a      	ldrb	r2, [r3, #6]
    819c:	687b      	ldr	r3, [r7, #4]
    819e:	7b5b      	ldrb	r3, [r3, #13]
    81a0:	210b      	movs	r1, #11
    81a2:	187c      	adds	r4, r7, r1
    81a4:	0019      	movs	r1, r3
    81a6:	0010      	movs	r0, r2
    81a8:	4b39      	ldr	r3, [pc, #228]	; (8290 <nwkRouteDiscoveryRequestReceived+0x174>)
    81aa:	4798      	blx	r3
    81ac:	0003      	movs	r3, r0
    81ae:	7023      	strb	r3, [r4, #0]

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    81b0:	68fb      	ldr	r3, [r7, #12]
    81b2:	785a      	ldrb	r2, [r3, #1]
    81b4:	789b      	ldrb	r3, [r3, #2]
    81b6:	021b      	lsls	r3, r3, #8
    81b8:	4313      	orrs	r3, r2
    81ba:	b298      	uxth	r0, r3
    81bc:	68fb      	ldr	r3, [r7, #12]
    81be:	78da      	ldrb	r2, [r3, #3]
    81c0:	791b      	ldrb	r3, [r3, #4]
    81c2:	021b      	lsls	r3, r3, #8
    81c4:	4313      	orrs	r3, r2
    81c6:	b299      	uxth	r1, r3
    81c8:	68fb      	ldr	r3, [r7, #12]
    81ca:	795b      	ldrb	r3, [r3, #5]
    81cc:	001a      	movs	r2, r3
    81ce:	4b31      	ldr	r3, [pc, #196]	; (8294 <nwkRouteDiscoveryRequestReceived+0x178>)
    81d0:	4798      	blx	r3
    81d2:	0003      	movs	r3, r0
    81d4:	617b      	str	r3, [r7, #20]
			command->multicast);

	if (entry) {
    81d6:	697b      	ldr	r3, [r7, #20]
    81d8:	2b00      	cmp	r3, #0
    81da:	d008      	beq.n	81ee <nwkRouteDiscoveryRequestReceived+0xd2>
		if (linkQuality <= entry->forwardLinkQuality) {
    81dc:	697b      	ldr	r3, [r7, #20]
    81de:	7a1b      	ldrb	r3, [r3, #8]
    81e0:	220b      	movs	r2, #11
    81e2:	18ba      	adds	r2, r7, r2
    81e4:	7812      	ldrb	r2, [r2, #0]
    81e6:	429a      	cmp	r2, r3
    81e8:	d80a      	bhi.n	8200 <nwkRouteDiscoveryRequestReceived+0xe4>
			return true;
    81ea:	2301      	movs	r3, #1
    81ec:	e04a      	b.n	8284 <nwkRouteDiscoveryRequestReceived+0x168>
		}
	} else {
		if (NULL == (entry = nwkRouteDiscoveryNewEntry())) {
    81ee:	4b2a      	ldr	r3, [pc, #168]	; (8298 <nwkRouteDiscoveryRequestReceived+0x17c>)
    81f0:	4798      	blx	r3
    81f2:	0003      	movs	r3, r0
    81f4:	617b      	str	r3, [r7, #20]
    81f6:	697b      	ldr	r3, [r7, #20]
    81f8:	2b00      	cmp	r3, #0
    81fa:	d101      	bne.n	8200 <nwkRouteDiscoveryRequestReceived+0xe4>
			return true;
    81fc:	2301      	movs	r3, #1
    81fe:	e041      	b.n	8284 <nwkRouteDiscoveryRequestReceived+0x168>
		}
	}

	entry->srcAddr = command->srcAddr;
    8200:	68fb      	ldr	r3, [r7, #12]
    8202:	785a      	ldrb	r2, [r3, #1]
    8204:	789b      	ldrb	r3, [r3, #2]
    8206:	021b      	lsls	r3, r3, #8
    8208:	4313      	orrs	r3, r2
    820a:	b29a      	uxth	r2, r3
    820c:	697b      	ldr	r3, [r7, #20]
    820e:	801a      	strh	r2, [r3, #0]
	entry->dstAddr = command->dstAddr;
    8210:	68fb      	ldr	r3, [r7, #12]
    8212:	78da      	ldrb	r2, [r3, #3]
    8214:	791b      	ldrb	r3, [r3, #4]
    8216:	021b      	lsls	r3, r3, #8
    8218:	4313      	orrs	r3, r2
    821a:	b29a      	uxth	r2, r3
    821c:	697b      	ldr	r3, [r7, #20]
    821e:	805a      	strh	r2, [r3, #2]
	entry->multicast = command->multicast;
    8220:	68fb      	ldr	r3, [r7, #12]
    8222:	795a      	ldrb	r2, [r3, #5]
    8224:	697b      	ldr	r3, [r7, #20]
    8226:	711a      	strb	r2, [r3, #4]
	entry->senderAddr = ind->srcAddr;
    8228:	687b      	ldr	r3, [r7, #4]
    822a:	881a      	ldrh	r2, [r3, #0]
    822c:	697b      	ldr	r3, [r7, #20]
    822e:	80da      	strh	r2, [r3, #6]
	entry->forwardLinkQuality = linkQuality;
    8230:	697b      	ldr	r3, [r7, #20]
    8232:	220b      	movs	r2, #11
    8234:	18ba      	adds	r2, r7, r2
    8236:	7812      	ldrb	r2, [r2, #0]
    8238:	721a      	strb	r2, [r3, #8]

	if (reply) {
    823a:	2313      	movs	r3, #19
    823c:	18fb      	adds	r3, r7, r3
    823e:	781b      	ldrb	r3, [r3, #0]
    8240:	2b00      	cmp	r3, #0
    8242:	d016      	beq.n	8272 <nwkRouteDiscoveryRequestReceived+0x156>
		nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr,
    8244:	68fb      	ldr	r3, [r7, #12]
    8246:	785a      	ldrb	r2, [r3, #1]
    8248:	789b      	ldrb	r3, [r3, #2]
    824a:	021b      	lsls	r3, r3, #8
    824c:	4313      	orrs	r3, r2
    824e:	b298      	uxth	r0, r3
    8250:	687b      	ldr	r3, [r7, #4]
    8252:	881a      	ldrh	r2, [r3, #0]
    8254:	230b      	movs	r3, #11
    8256:	18fb      	adds	r3, r7, r3
    8258:	781b      	ldrb	r3, [r3, #0]
    825a:	2100      	movs	r1, #0
    825c:	4c0f      	ldr	r4, [pc, #60]	; (829c <nwkRouteDiscoveryRequestReceived+0x180>)
    825e:	47a0      	blx	r4
				linkQuality);
		nwkRouteDiscoverySendReply(entry, linkQuality,
    8260:	230b      	movs	r3, #11
    8262:	18fb      	adds	r3, r7, r3
    8264:	7819      	ldrb	r1, [r3, #0]
    8266:	697b      	ldr	r3, [r7, #20]
    8268:	22ff      	movs	r2, #255	; 0xff
    826a:	0018      	movs	r0, r3
    826c:	4b0c      	ldr	r3, [pc, #48]	; (82a0 <nwkRouteDiscoveryRequestReceived+0x184>)
    826e:	4798      	blx	r3
    8270:	e007      	b.n	8282 <nwkRouteDiscoveryRequestReceived+0x166>
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
    8272:	230b      	movs	r3, #11
    8274:	18fb      	adds	r3, r7, r3
    8276:	781a      	ldrb	r2, [r3, #0]
    8278:	697b      	ldr	r3, [r7, #20]
    827a:	0011      	movs	r1, r2
    827c:	0018      	movs	r0, r3
    827e:	4b09      	ldr	r3, [pc, #36]	; (82a4 <nwkRouteDiscoveryRequestReceived+0x188>)
    8280:	4798      	blx	r3
	}

	return true;
    8282:	2301      	movs	r3, #1
}
    8284:	0018      	movs	r0, r3
    8286:	46bd      	mov	sp, r7
    8288:	b007      	add	sp, #28
    828a:	bd90      	pop	{r4, r7, pc}
    828c:	20001024 	.word	0x20001024
    8290:	00008591 	.word	0x00008591
    8294:	00007ddd 	.word	0x00007ddd
    8298:	00007eb1 	.word	0x00007eb1
    829c:	00007775 	.word	0x00007775
    82a0:	000082a9 	.word	0x000082a9
    82a4:	00007fed 	.word	0x00007fed

000082a8 <nwkRouteDiscoverySendReply>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoverySendReply(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t flq, uint8_t rlq)
{
    82a8:	b590      	push	{r4, r7, lr}
    82aa:	b085      	sub	sp, #20
    82ac:	af00      	add	r7, sp, #0
    82ae:	6078      	str	r0, [r7, #4]
    82b0:	0008      	movs	r0, r1
    82b2:	0011      	movs	r1, r2
    82b4:	1cfb      	adds	r3, r7, #3
    82b6:	1c02      	adds	r2, r0, #0
    82b8:	701a      	strb	r2, [r3, #0]
    82ba:	1cbb      	adds	r3, r7, #2
    82bc:	1c0a      	adds	r2, r1, #0
    82be:	701a      	strb	r2, [r3, #0]
	NwkFrame_t *req;
	NwkCommandRouteReply_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    82c0:	4b4b      	ldr	r3, [pc, #300]	; (83f0 <nwkRouteDiscoverySendReply+0x148>)
    82c2:	4798      	blx	r3
    82c4:	0003      	movs	r3, r0
    82c6:	60fb      	str	r3, [r7, #12]
    82c8:	68fb      	ldr	r3, [r7, #12]
    82ca:	2b00      	cmp	r3, #0
    82cc:	d100      	bne.n	82d0 <nwkRouteDiscoverySendReply+0x28>
    82ce:	e08b      	b.n	83e8 <nwkRouteDiscoverySendReply+0x140>
		return;
	}

	nwkFrameCommandInit(req);
    82d0:	68fb      	ldr	r3, [r7, #12]
    82d2:	0018      	movs	r0, r3
    82d4:	4b47      	ldr	r3, [pc, #284]	; (83f4 <nwkRouteDiscoverySendReply+0x14c>)
    82d6:	4798      	blx	r3

	req->size += sizeof(NwkCommandRouteReply_t);
    82d8:	68fb      	ldr	r3, [r7, #12]
    82da:	785b      	ldrb	r3, [r3, #1]
    82dc:	3308      	adds	r3, #8
    82de:	b2da      	uxtb	r2, r3
    82e0:	68fb      	ldr	r3, [r7, #12]
    82e2:	705a      	strb	r2, [r3, #1]
	req->tx.confirm = NULL;
    82e4:	68fb      	ldr	r3, [r7, #12]
    82e6:	2289      	movs	r2, #137	; 0x89
    82e8:	5c99      	ldrb	r1, [r3, r2]
    82ea:	2000      	movs	r0, #0
    82ec:	4001      	ands	r1, r0
    82ee:	5499      	strb	r1, [r3, r2]
    82f0:	1899      	adds	r1, r3, r2
    82f2:	7848      	ldrb	r0, [r1, #1]
    82f4:	2400      	movs	r4, #0
    82f6:	4020      	ands	r0, r4
    82f8:	7048      	strb	r0, [r1, #1]
    82fa:	1899      	adds	r1, r3, r2
    82fc:	7888      	ldrb	r0, [r1, #2]
    82fe:	2400      	movs	r4, #0
    8300:	4020      	ands	r0, r4
    8302:	7088      	strb	r0, [r1, #2]
    8304:	189b      	adds	r3, r3, r2
    8306:	78da      	ldrb	r2, [r3, #3]
    8308:	2100      	movs	r1, #0
    830a:	400a      	ands	r2, r1
    830c:	70da      	strb	r2, [r3, #3]
	req->tx.control = NWK_TX_CONTROL_DIRECT_LINK;
    830e:	68fb      	ldr	r3, [r7, #12]
    8310:	2288      	movs	r2, #136	; 0x88
    8312:	2104      	movs	r1, #4
    8314:	5499      	strb	r1, [r3, r2]

	req->header.nwkDstAddr = entry->senderAddr;
    8316:	687b      	ldr	r3, [r7, #4]
    8318:	88da      	ldrh	r2, [r3, #6]
    831a:	68fb      	ldr	r3, [r7, #12]
    831c:	330f      	adds	r3, #15
    831e:	21ff      	movs	r1, #255	; 0xff
    8320:	4011      	ands	r1, r2
    8322:	000c      	movs	r4, r1
    8324:	7819      	ldrb	r1, [r3, #0]
    8326:	2000      	movs	r0, #0
    8328:	4001      	ands	r1, r0
    832a:	1c08      	adds	r0, r1, #0
    832c:	1c21      	adds	r1, r4, #0
    832e:	4301      	orrs	r1, r0
    8330:	7019      	strb	r1, [r3, #0]
    8332:	0a12      	lsrs	r2, r2, #8
    8334:	b290      	uxth	r0, r2
    8336:	785a      	ldrb	r2, [r3, #1]
    8338:	2100      	movs	r1, #0
    833a:	400a      	ands	r2, r1
    833c:	1c11      	adds	r1, r2, #0
    833e:	1c02      	adds	r2, r0, #0
    8340:	430a      	orrs	r2, r1
    8342:	705a      	strb	r2, [r3, #1]

	command = (NwkCommandRouteReply_t *)req->payload;
    8344:	68fb      	ldr	r3, [r7, #12]
    8346:	2281      	movs	r2, #129	; 0x81
    8348:	5c9a      	ldrb	r2, [r3, r2]
    834a:	2182      	movs	r1, #130	; 0x82
    834c:	5c59      	ldrb	r1, [r3, r1]
    834e:	0209      	lsls	r1, r1, #8
    8350:	430a      	orrs	r2, r1
    8352:	2183      	movs	r1, #131	; 0x83
    8354:	5c59      	ldrb	r1, [r3, r1]
    8356:	0409      	lsls	r1, r1, #16
    8358:	430a      	orrs	r2, r1
    835a:	2184      	movs	r1, #132	; 0x84
    835c:	5c5b      	ldrb	r3, [r3, r1]
    835e:	061b      	lsls	r3, r3, #24
    8360:	4313      	orrs	r3, r2
    8362:	60bb      	str	r3, [r7, #8]
	command->id = NWK_COMMAND_ROUTE_REPLY;
    8364:	68bb      	ldr	r3, [r7, #8]
    8366:	2203      	movs	r2, #3
    8368:	701a      	strb	r2, [r3, #0]
	command->srcAddr = entry->srcAddr;
    836a:	687b      	ldr	r3, [r7, #4]
    836c:	881a      	ldrh	r2, [r3, #0]
    836e:	68bb      	ldr	r3, [r7, #8]
    8370:	3301      	adds	r3, #1
    8372:	21ff      	movs	r1, #255	; 0xff
    8374:	4011      	ands	r1, r2
    8376:	000c      	movs	r4, r1
    8378:	7819      	ldrb	r1, [r3, #0]
    837a:	2000      	movs	r0, #0
    837c:	4001      	ands	r1, r0
    837e:	1c08      	adds	r0, r1, #0
    8380:	1c21      	adds	r1, r4, #0
    8382:	4301      	orrs	r1, r0
    8384:	7019      	strb	r1, [r3, #0]
    8386:	0a12      	lsrs	r2, r2, #8
    8388:	b290      	uxth	r0, r2
    838a:	785a      	ldrb	r2, [r3, #1]
    838c:	2100      	movs	r1, #0
    838e:	400a      	ands	r2, r1
    8390:	1c11      	adds	r1, r2, #0
    8392:	1c02      	adds	r2, r0, #0
    8394:	430a      	orrs	r2, r1
    8396:	705a      	strb	r2, [r3, #1]
	command->dstAddr = entry->dstAddr;
    8398:	687b      	ldr	r3, [r7, #4]
    839a:	885a      	ldrh	r2, [r3, #2]
    839c:	68bb      	ldr	r3, [r7, #8]
    839e:	3303      	adds	r3, #3
    83a0:	21ff      	movs	r1, #255	; 0xff
    83a2:	4011      	ands	r1, r2
    83a4:	000c      	movs	r4, r1
    83a6:	7819      	ldrb	r1, [r3, #0]
    83a8:	2000      	movs	r0, #0
    83aa:	4001      	ands	r1, r0
    83ac:	1c08      	adds	r0, r1, #0
    83ae:	1c21      	adds	r1, r4, #0
    83b0:	4301      	orrs	r1, r0
    83b2:	7019      	strb	r1, [r3, #0]
    83b4:	0a12      	lsrs	r2, r2, #8
    83b6:	b290      	uxth	r0, r2
    83b8:	785a      	ldrb	r2, [r3, #1]
    83ba:	2100      	movs	r1, #0
    83bc:	400a      	ands	r2, r1
    83be:	1c11      	adds	r1, r2, #0
    83c0:	1c02      	adds	r2, r0, #0
    83c2:	430a      	orrs	r2, r1
    83c4:	705a      	strb	r2, [r3, #1]
	command->multicast = entry->multicast;
    83c6:	687b      	ldr	r3, [r7, #4]
    83c8:	791a      	ldrb	r2, [r3, #4]
    83ca:	68bb      	ldr	r3, [r7, #8]
    83cc:	715a      	strb	r2, [r3, #5]
	command->forwardLinkQuality = flq;
    83ce:	68bb      	ldr	r3, [r7, #8]
    83d0:	1cfa      	adds	r2, r7, #3
    83d2:	7812      	ldrb	r2, [r2, #0]
    83d4:	719a      	strb	r2, [r3, #6]
	command->reverseLinkQuality = rlq;
    83d6:	68bb      	ldr	r3, [r7, #8]
    83d8:	1cba      	adds	r2, r7, #2
    83da:	7812      	ldrb	r2, [r2, #0]
    83dc:	71da      	strb	r2, [r3, #7]

	nwkTxFrame(req);
    83de:	68fb      	ldr	r3, [r7, #12]
    83e0:	0018      	movs	r0, r3
    83e2:	4b05      	ldr	r3, [pc, #20]	; (83f8 <nwkRouteDiscoverySendReply+0x150>)
    83e4:	4798      	blx	r3
    83e6:	e000      	b.n	83ea <nwkRouteDiscoverySendReply+0x142>
{
	NwkFrame_t *req;
	NwkCommandRouteReply_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
		return;
    83e8:	46c0      	nop			; (mov r8, r8)
	command->multicast = entry->multicast;
	command->forwardLinkQuality = flq;
	command->reverseLinkQuality = rlq;

	nwkTxFrame(req);
}
    83ea:	46bd      	mov	sp, r7
    83ec:	b005      	add	sp, #20
    83ee:	bd90      	pop	{r4, r7, pc}
    83f0:	000073b5 	.word	0x000073b5
    83f4:	00007529 	.word	0x00007529
    83f8:	00009475 	.word	0x00009475

000083fc <nwkRouteDiscoveryReplyReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryReplyReceived(NWK_DataInd_t *ind)
{
    83fc:	b590      	push	{r4, r7, lr}
    83fe:	b087      	sub	sp, #28
    8400:	af00      	add	r7, sp, #0
    8402:	6078      	str	r0, [r7, #4]
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
    8404:	687b      	ldr	r3, [r7, #4]
    8406:	689b      	ldr	r3, [r3, #8]
    8408:	617b      	str	r3, [r7, #20]
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
    840a:	687b      	ldr	r3, [r7, #4]
    840c:	7b1b      	ldrb	r3, [r3, #12]
    840e:	2b08      	cmp	r3, #8
    8410:	d001      	beq.n	8416 <nwkRouteDiscoveryReplyReceived+0x1a>
		return false;
    8412:	2300      	movs	r3, #0
    8414:	e06a      	b.n	84ec <nwkRouteDiscoveryReplyReceived+0xf0>
	}

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    8416:	697b      	ldr	r3, [r7, #20]
    8418:	785a      	ldrb	r2, [r3, #1]
    841a:	789b      	ldrb	r3, [r3, #2]
    841c:	021b      	lsls	r3, r3, #8
    841e:	4313      	orrs	r3, r2
    8420:	b298      	uxth	r0, r3
    8422:	697b      	ldr	r3, [r7, #20]
    8424:	78da      	ldrb	r2, [r3, #3]
    8426:	791b      	ldrb	r3, [r3, #4]
    8428:	021b      	lsls	r3, r3, #8
    842a:	4313      	orrs	r3, r2
    842c:	b299      	uxth	r1, r3
    842e:	697b      	ldr	r3, [r7, #20]
    8430:	795b      	ldrb	r3, [r3, #5]
    8432:	001a      	movs	r2, r3
    8434:	4b2f      	ldr	r3, [pc, #188]	; (84f4 <nwkRouteDiscoveryReplyReceived+0xf8>)
    8436:	4798      	blx	r3
    8438:	0003      	movs	r3, r0
    843a:	613b      	str	r3, [r7, #16]
			command->multicast);

	linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality,
    843c:	697b      	ldr	r3, [r7, #20]
    843e:	79da      	ldrb	r2, [r3, #7]
    8440:	687b      	ldr	r3, [r7, #4]
    8442:	7b5b      	ldrb	r3, [r3, #13]
    8444:	210f      	movs	r1, #15
    8446:	187c      	adds	r4, r7, r1
    8448:	0019      	movs	r1, r3
    844a:	0010      	movs	r0, r2
    844c:	4b2a      	ldr	r3, [pc, #168]	; (84f8 <nwkRouteDiscoveryReplyReceived+0xfc>)
    844e:	4798      	blx	r3
    8450:	0003      	movs	r3, r0
    8452:	7023      	strb	r3, [r4, #0]
			ind->lqi);

	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
    8454:	693b      	ldr	r3, [r7, #16]
    8456:	2b00      	cmp	r3, #0
    8458:	d047      	beq.n	84ea <nwkRouteDiscoveryReplyReceived+0xee>
    845a:	697b      	ldr	r3, [r7, #20]
    845c:	799a      	ldrb	r2, [r3, #6]
    845e:	693b      	ldr	r3, [r7, #16]
    8460:	7a5b      	ldrb	r3, [r3, #9]
    8462:	429a      	cmp	r2, r3
    8464:	d941      	bls.n	84ea <nwkRouteDiscoveryReplyReceived+0xee>
		entry->reverseLinkQuality = command->forwardLinkQuality;
    8466:	697b      	ldr	r3, [r7, #20]
    8468:	799a      	ldrb	r2, [r3, #6]
    846a:	693b      	ldr	r3, [r7, #16]
    846c:	725a      	strb	r2, [r3, #9]

		if (command->srcAddr == nwkIb.addr) {
    846e:	697b      	ldr	r3, [r7, #20]
    8470:	785a      	ldrb	r2, [r3, #1]
    8472:	789b      	ldrb	r3, [r3, #2]
    8474:	021b      	lsls	r3, r3, #8
    8476:	4313      	orrs	r3, r2
    8478:	b29a      	uxth	r2, r3
    847a:	4b20      	ldr	r3, [pc, #128]	; (84fc <nwkRouteDiscoveryReplyReceived+0x100>)
    847c:	881b      	ldrh	r3, [r3, #0]
    847e:	429a      	cmp	r2, r3
    8480:	d10e      	bne.n	84a0 <nwkRouteDiscoveryReplyReceived+0xa4>
			nwkRouteUpdateEntry(command->dstAddr,
    8482:	697b      	ldr	r3, [r7, #20]
    8484:	78da      	ldrb	r2, [r3, #3]
    8486:	791b      	ldrb	r3, [r3, #4]
    8488:	021b      	lsls	r3, r3, #8
    848a:	4313      	orrs	r3, r2
    848c:	b298      	uxth	r0, r3
    848e:	697b      	ldr	r3, [r7, #20]
    8490:	7959      	ldrb	r1, [r3, #5]
    8492:	687b      	ldr	r3, [r7, #4]
    8494:	881a      	ldrh	r2, [r3, #0]
    8496:	697b      	ldr	r3, [r7, #20]
    8498:	799b      	ldrb	r3, [r3, #6]
    849a:	4c19      	ldr	r4, [pc, #100]	; (8500 <nwkRouteDiscoveryReplyReceived+0x104>)
    849c:	47a0      	blx	r4
    849e:	e024      	b.n	84ea <nwkRouteDiscoveryReplyReceived+0xee>
					command->multicast, ind->srcAddr,
					command->forwardLinkQuality);
			/* nwkRouteDiscoveryDone(entry, true); */
		} else {
			nwkRouteUpdateEntry(command->dstAddr,
    84a0:	697b      	ldr	r3, [r7, #20]
    84a2:	78da      	ldrb	r2, [r3, #3]
    84a4:	791b      	ldrb	r3, [r3, #4]
    84a6:	021b      	lsls	r3, r3, #8
    84a8:	4313      	orrs	r3, r2
    84aa:	b298      	uxth	r0, r3
    84ac:	697b      	ldr	r3, [r7, #20]
    84ae:	7959      	ldrb	r1, [r3, #5]
    84b0:	687b      	ldr	r3, [r7, #4]
    84b2:	881a      	ldrh	r2, [r3, #0]
    84b4:	230f      	movs	r3, #15
    84b6:	18fb      	adds	r3, r7, r3
    84b8:	781b      	ldrb	r3, [r3, #0]
    84ba:	4c11      	ldr	r4, [pc, #68]	; (8500 <nwkRouteDiscoveryReplyReceived+0x104>)
    84bc:	47a0      	blx	r4
					command->multicast, ind->srcAddr,
					linkQuality);
			nwkRouteUpdateEntry(command->srcAddr, 0,
    84be:	697b      	ldr	r3, [r7, #20]
    84c0:	785a      	ldrb	r2, [r3, #1]
    84c2:	789b      	ldrb	r3, [r3, #2]
    84c4:	021b      	lsls	r3, r3, #8
    84c6:	4313      	orrs	r3, r2
    84c8:	b298      	uxth	r0, r3
    84ca:	693b      	ldr	r3, [r7, #16]
    84cc:	88da      	ldrh	r2, [r3, #6]
    84ce:	693b      	ldr	r3, [r7, #16]
    84d0:	7a1b      	ldrb	r3, [r3, #8]
    84d2:	2100      	movs	r1, #0
    84d4:	4c0a      	ldr	r4, [pc, #40]	; (8500 <nwkRouteDiscoveryReplyReceived+0x104>)
    84d6:	47a0      	blx	r4
					entry->senderAddr,
					entry->forwardLinkQuality);
			nwkRouteDiscoverySendReply(entry,
    84d8:	697b      	ldr	r3, [r7, #20]
    84da:	7999      	ldrb	r1, [r3, #6]
    84dc:	230f      	movs	r3, #15
    84de:	18fb      	adds	r3, r7, r3
    84e0:	781a      	ldrb	r2, [r3, #0]
    84e2:	693b      	ldr	r3, [r7, #16]
    84e4:	0018      	movs	r0, r3
    84e6:	4b07      	ldr	r3, [pc, #28]	; (8504 <nwkRouteDiscoveryReplyReceived+0x108>)
    84e8:	4798      	blx	r3
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    84ea:	2301      	movs	r3, #1
}
    84ec:	0018      	movs	r0, r3
    84ee:	46bd      	mov	sp, r7
    84f0:	b007      	add	sp, #28
    84f2:	bd90      	pop	{r4, r7, pc}
    84f4:	00007ddd 	.word	0x00007ddd
    84f8:	00008591 	.word	0x00008591
    84fc:	20001024 	.word	0x20001024
    8500:	00007775 	.word	0x00007775
    8504:	000082a9 	.word	0x000082a9

00008508 <nwkRouteDiscoveryDone>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
    8508:	b580      	push	{r7, lr}
    850a:	b084      	sub	sp, #16
    850c:	af00      	add	r7, sp, #0
    850e:	6078      	str	r0, [r7, #4]
    8510:	000a      	movs	r2, r1
    8512:	1cfb      	adds	r3, r7, #3
    8514:	701a      	strb	r2, [r3, #0]
	NwkFrame_t *frame = NULL;
    8516:	2300      	movs	r3, #0
    8518:	60fb      	str	r3, [r7, #12]

	while (NULL != (frame = nwkFrameNext(frame))) {
    851a:	e026      	b.n	856a <nwkRouteDiscoveryDone+0x62>
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
    851c:	68fb      	ldr	r3, [r7, #12]
    851e:	781b      	ldrb	r3, [r3, #0]
    8520:	2b40      	cmp	r3, #64	; 0x40
    8522:	d000      	beq.n	8526 <nwkRouteDiscoveryDone+0x1e>
			continue;
    8524:	e021      	b.n	856a <nwkRouteDiscoveryDone+0x62>
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    8526:	687b      	ldr	r3, [r7, #4]
    8528:	885a      	ldrh	r2, [r3, #2]
    852a:	68fb      	ldr	r3, [r7, #12]
    852c:	7bd9      	ldrb	r1, [r3, #15]
    852e:	7c1b      	ldrb	r3, [r3, #16]
    8530:	021b      	lsls	r3, r3, #8
    8532:	430b      	orrs	r3, r1
    8534:	b29b      	uxth	r3, r3
    8536:	429a      	cmp	r2, r3
    8538:	d117      	bne.n	856a <nwkRouteDiscoveryDone+0x62>
				entry->multicast !=
    853a:	687b      	ldr	r3, [r7, #4]
    853c:	791b      	ldrb	r3, [r3, #4]
				frame->header.nwkFcf.multicast) {
    853e:	68fa      	ldr	r2, [r7, #12]
    8540:	7ad2      	ldrb	r2, [r2, #11]
    8542:	0712      	lsls	r2, r2, #28
    8544:	0fd2      	lsrs	r2, r2, #31
    8546:	b2d2      	uxtb	r2, r2
	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
			continue;
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    8548:	4293      	cmp	r3, r2
    854a:	d000      	beq.n	854e <nwkRouteDiscoveryDone+0x46>
				entry->multicast !=
				frame->header.nwkFcf.multicast) {
			continue;
    854c:	e00d      	b.n	856a <nwkRouteDiscoveryDone+0x62>
		}

		if (status) {
    854e:	1cfb      	adds	r3, r7, #3
    8550:	781b      	ldrb	r3, [r3, #0]
    8552:	2b00      	cmp	r3, #0
    8554:	d004      	beq.n	8560 <nwkRouteDiscoveryDone+0x58>
			nwkTxFrame(frame);
    8556:	68fb      	ldr	r3, [r7, #12]
    8558:	0018      	movs	r0, r3
    855a:	4b0a      	ldr	r3, [pc, #40]	; (8584 <nwkRouteDiscoveryDone+0x7c>)
    855c:	4798      	blx	r3
    855e:	e004      	b.n	856a <nwkRouteDiscoveryDone+0x62>
		} else {
			nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    8560:	68fb      	ldr	r3, [r7, #12]
    8562:	2111      	movs	r1, #17
    8564:	0018      	movs	r0, r3
    8566:	4b08      	ldr	r3, [pc, #32]	; (8588 <nwkRouteDiscoveryDone+0x80>)
    8568:	4798      	blx	r3
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    856a:	68fb      	ldr	r3, [r7, #12]
    856c:	0018      	movs	r0, r3
    856e:	4b07      	ldr	r3, [pc, #28]	; (858c <nwkRouteDiscoveryDone+0x84>)
    8570:	4798      	blx	r3
    8572:	0003      	movs	r3, r0
    8574:	60fb      	str	r3, [r7, #12]
    8576:	68fb      	ldr	r3, [r7, #12]
    8578:	2b00      	cmp	r3, #0
    857a:	d1cf      	bne.n	851c <nwkRouteDiscoveryDone+0x14>
			nwkTxFrame(frame);
		} else {
			nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
		}
	}
}
    857c:	46c0      	nop			; (mov r8, r8)
    857e:	46bd      	mov	sp, r7
    8580:	b004      	add	sp, #16
    8582:	bd80      	pop	{r7, pc}
    8584:	00009475 	.word	0x00009475
    8588:	00009915 	.word	0x00009915
    858c:	000074e1 	.word	0x000074e1

00008590 <nwkRouteDiscoveryUpdateLq>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
    8590:	b580      	push	{r7, lr}
    8592:	b082      	sub	sp, #8
    8594:	af00      	add	r7, sp, #0
    8596:	0002      	movs	r2, r0
    8598:	1dfb      	adds	r3, r7, #7
    859a:	701a      	strb	r2, [r3, #0]
    859c:	1dbb      	adds	r3, r7, #6
    859e:	1c0a      	adds	r2, r1, #0
    85a0:	701a      	strb	r2, [r3, #0]
	return ((uint16_t)lqa * lqb) >> 8;
    85a2:	1dfb      	adds	r3, r7, #7
    85a4:	781b      	ldrb	r3, [r3, #0]
    85a6:	1dba      	adds	r2, r7, #6
    85a8:	7812      	ldrb	r2, [r2, #0]
    85aa:	4353      	muls	r3, r2
    85ac:	121b      	asrs	r3, r3, #8
    85ae:	b2db      	uxtb	r3, r3
}
    85b0:	0018      	movs	r0, r3
    85b2:	46bd      	mov	sp, r7
    85b4:	b002      	add	sp, #8
    85b6:	bd80      	pop	{r7, pc}

000085b8 <nwkFramePayloadSize>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
    85b8:	b580      	push	{r7, lr}
    85ba:	b082      	sub	sp, #8
    85bc:	af00      	add	r7, sp, #0
    85be:	6078      	str	r0, [r7, #4]
	return frame->size - (frame->payload - frame->data);
    85c0:	687b      	ldr	r3, [r7, #4]
    85c2:	785a      	ldrb	r2, [r3, #1]
    85c4:	687b      	ldr	r3, [r7, #4]
    85c6:	2181      	movs	r1, #129	; 0x81
    85c8:	5c59      	ldrb	r1, [r3, r1]
    85ca:	2082      	movs	r0, #130	; 0x82
    85cc:	5c18      	ldrb	r0, [r3, r0]
    85ce:	0200      	lsls	r0, r0, #8
    85d0:	4301      	orrs	r1, r0
    85d2:	2083      	movs	r0, #131	; 0x83
    85d4:	5c18      	ldrb	r0, [r3, r0]
    85d6:	0400      	lsls	r0, r0, #16
    85d8:	4301      	orrs	r1, r0
    85da:	2084      	movs	r0, #132	; 0x84
    85dc:	5c1b      	ldrb	r3, [r3, r0]
    85de:	061b      	lsls	r3, r3, #24
    85e0:	430b      	orrs	r3, r1
    85e2:	0019      	movs	r1, r3
    85e4:	687b      	ldr	r3, [r7, #4]
    85e6:	3302      	adds	r3, #2
    85e8:	1acb      	subs	r3, r1, r3
    85ea:	b2db      	uxtb	r3, r3
    85ec:	1ad3      	subs	r3, r2, r3
    85ee:	b2db      	uxtb	r3, r3
}
    85f0:	0018      	movs	r0, r3
    85f2:	46bd      	mov	sp, r7
    85f4:	b002      	add	sp, #8
    85f6:	bd80      	pop	{r7, pc}

000085f8 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    85f8:	b580      	push	{r7, lr}
    85fa:	b082      	sub	sp, #8
    85fc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    85fe:	1dfb      	adds	r3, r7, #7
    8600:	2200      	movs	r2, #0
    8602:	701a      	strb	r2, [r3, #0]
    8604:	e00f      	b.n	8626 <nwkRxInit+0x2e>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    8606:	1dfb      	adds	r3, r7, #7
    8608:	781a      	ldrb	r2, [r3, #0]
    860a:	4912      	ldr	r1, [pc, #72]	; (8654 <nwkRxInit+0x5c>)
    860c:	0013      	movs	r3, r2
    860e:	005b      	lsls	r3, r3, #1
    8610:	189b      	adds	r3, r3, r2
    8612:	005b      	lsls	r3, r3, #1
    8614:	18cb      	adds	r3, r1, r3
    8616:	3304      	adds	r3, #4
    8618:	2200      	movs	r2, #0
    861a:	701a      	strb	r2, [r3, #0]
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    861c:	1dfb      	adds	r3, r7, #7
    861e:	781a      	ldrb	r2, [r3, #0]
    8620:	1dfb      	adds	r3, r7, #7
    8622:	3201      	adds	r2, #1
    8624:	701a      	strb	r2, [r3, #0]
    8626:	1dfb      	adds	r3, r7, #7
    8628:	781b      	ldrb	r3, [r3, #0]
    862a:	2b31      	cmp	r3, #49	; 0x31
    862c:	d9eb      	bls.n	8606 <nwkRxInit+0xe>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    862e:	4b0a      	ldr	r3, [pc, #40]	; (8658 <nwkRxInit+0x60>)
    8630:	2264      	movs	r2, #100	; 0x64
    8632:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8634:	4b08      	ldr	r3, [pc, #32]	; (8658 <nwkRxInit+0x60>)
    8636:	2200      	movs	r2, #0
    8638:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    863a:	4b07      	ldr	r3, [pc, #28]	; (8658 <nwkRxInit+0x60>)
    863c:	4a07      	ldr	r2, [pc, #28]	; (865c <nwkRxInit+0x64>)
    863e:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    8640:	4b07      	ldr	r3, [pc, #28]	; (8660 <nwkRxInit+0x68>)
    8642:	0019      	movs	r1, r3
    8644:	2000      	movs	r0, #0
    8646:	4b07      	ldr	r3, [pc, #28]	; (8664 <nwkRxInit+0x6c>)
    8648:	4798      	blx	r3
}
    864a:	46c0      	nop			; (mov r8, r8)
    864c:	46bd      	mov	sp, r7
    864e:	b002      	add	sp, #8
    8650:	bd80      	pop	{r7, pc}
    8652:	46c0      	nop			; (mov r8, r8)
    8654:	20000bb4 	.word	0x20000bb4
    8658:	20000ce4 	.word	0x20000ce4
    865c:	00008825 	.word	0x00008825
    8660:	00008a51 	.word	0x00008a51
    8664:	00006ee9 	.word	0x00006ee9

00008668 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    8668:	b580      	push	{r7, lr}
    866a:	b084      	sub	sp, #16
    866c:	af00      	add	r7, sp, #0
    866e:	6078      	str	r0, [r7, #4]
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    8670:	687b      	ldr	r3, [r7, #4]
    8672:	681b      	ldr	r3, [r3, #0]
    8674:	3301      	adds	r3, #1
    8676:	781b      	ldrb	r3, [r3, #0]
    8678:	2b88      	cmp	r3, #136	; 0x88
    867a:	d130      	bne.n	86de <PHY_DataInd+0x76>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    867c:	687b      	ldr	r3, [r7, #4]
    867e:	681b      	ldr	r3, [r3, #0]
    8680:	781b      	ldrb	r3, [r3, #0]
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    8682:	2b61      	cmp	r3, #97	; 0x61
    8684:	d004      	beq.n	8690 <PHY_DataInd+0x28>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    8686:	687b      	ldr	r3, [r7, #4]
    8688:	681b      	ldr	r3, [r3, #0]
    868a:	781b      	ldrb	r3, [r3, #0]
    868c:	2b41      	cmp	r3, #65	; 0x41
    868e:	d126      	bne.n	86de <PHY_DataInd+0x76>
			ind->size < sizeof(NwkFrameHeader_t)) {
    8690:	687b      	ldr	r3, [r7, #4]
    8692:	791b      	ldrb	r3, [r3, #4]
void PHY_DataInd(PHY_DataInd_t *ind)
{
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    8694:	2b0f      	cmp	r3, #15
    8696:	d922      	bls.n	86de <PHY_DataInd+0x76>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    8698:	4b14      	ldr	r3, [pc, #80]	; (86ec <PHY_DataInd+0x84>)
    869a:	4798      	blx	r3
    869c:	0003      	movs	r3, r0
    869e:	60fb      	str	r3, [r7, #12]
    86a0:	68fb      	ldr	r3, [r7, #12]
    86a2:	2b00      	cmp	r3, #0
    86a4:	d01d      	beq.n	86e2 <PHY_DataInd+0x7a>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    86a6:	68fb      	ldr	r3, [r7, #12]
    86a8:	2220      	movs	r2, #32
    86aa:	701a      	strb	r2, [r3, #0]
	frame->size = ind->size;
    86ac:	687b      	ldr	r3, [r7, #4]
    86ae:	791a      	ldrb	r2, [r3, #4]
    86b0:	68fb      	ldr	r3, [r7, #12]
    86b2:	705a      	strb	r2, [r3, #1]
	frame->rx.lqi = ind->lqi;
    86b4:	687b      	ldr	r3, [r7, #4]
    86b6:	7959      	ldrb	r1, [r3, #5]
    86b8:	68fb      	ldr	r3, [r7, #12]
    86ba:	2285      	movs	r2, #133	; 0x85
    86bc:	5499      	strb	r1, [r3, r2]
	frame->rx.rssi = ind->rssi;
    86be:	687b      	ldr	r3, [r7, #4]
    86c0:	2106      	movs	r1, #6
    86c2:	5659      	ldrsb	r1, [r3, r1]
    86c4:	68fb      	ldr	r3, [r7, #12]
    86c6:	2286      	movs	r2, #134	; 0x86
    86c8:	5499      	strb	r1, [r3, r2]
	memcpy(frame->data, ind->data, ind->size);
    86ca:	68fb      	ldr	r3, [r7, #12]
    86cc:	1c98      	adds	r0, r3, #2
    86ce:	687b      	ldr	r3, [r7, #4]
    86d0:	6819      	ldr	r1, [r3, #0]
    86d2:	687b      	ldr	r3, [r7, #4]
    86d4:	791b      	ldrb	r3, [r3, #4]
    86d6:	001a      	movs	r2, r3
    86d8:	4b05      	ldr	r3, [pc, #20]	; (86f0 <PHY_DataInd+0x88>)
    86da:	4798      	blx	r3
    86dc:	e002      	b.n	86e4 <PHY_DataInd+0x7c>
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
    86de:	46c0      	nop			; (mov r8, r8)
    86e0:	e000      	b.n	86e4 <PHY_DataInd+0x7c>
	}

	if (NULL == (frame = nwkFrameAlloc())) {
		return;
    86e2:	46c0      	nop			; (mov r8, r8)
	frame->state = NWK_RX_STATE_RECEIVED;
	frame->size = ind->size;
	frame->rx.lqi = ind->lqi;
	frame->rx.rssi = ind->rssi;
	memcpy(frame->data, ind->data, ind->size);
}
    86e4:	46bd      	mov	sp, r7
    86e6:	b004      	add	sp, #16
    86e8:	bd80      	pop	{r7, pc}
    86ea:	46c0      	nop			; (mov r8, r8)
    86ec:	000073b5 	.word	0x000073b5
    86f0:	0000e9ad 	.word	0x0000e9ad

000086f4 <nwkRxSendAck>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxSendAck(NwkFrame_t *frame)
{
    86f4:	b590      	push	{r4, r7, lr}
    86f6:	b085      	sub	sp, #20
    86f8:	af00      	add	r7, sp, #0
    86fa:	6078      	str	r0, [r7, #4]
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    86fc:	4b3a      	ldr	r3, [pc, #232]	; (87e8 <nwkRxSendAck+0xf4>)
    86fe:	4798      	blx	r3
    8700:	0003      	movs	r3, r0
    8702:	60fb      	str	r3, [r7, #12]
    8704:	68fb      	ldr	r3, [r7, #12]
    8706:	2b00      	cmp	r3, #0
    8708:	d069      	beq.n	87de <nwkRxSendAck+0xea>
		return;
	}

	nwkFrameCommandInit(ack);
    870a:	68fb      	ldr	r3, [r7, #12]
    870c:	0018      	movs	r0, r3
    870e:	4b37      	ldr	r3, [pc, #220]	; (87ec <nwkRxSendAck+0xf8>)
    8710:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    8712:	68fb      	ldr	r3, [r7, #12]
    8714:	785b      	ldrb	r3, [r3, #1]
    8716:	3303      	adds	r3, #3
    8718:	b2da      	uxtb	r2, r3
    871a:	68fb      	ldr	r3, [r7, #12]
    871c:	705a      	strb	r2, [r3, #1]
	ack->tx.confirm = NULL;
    871e:	68fb      	ldr	r3, [r7, #12]
    8720:	2289      	movs	r2, #137	; 0x89
    8722:	5c99      	ldrb	r1, [r3, r2]
    8724:	2000      	movs	r0, #0
    8726:	4001      	ands	r1, r0
    8728:	5499      	strb	r1, [r3, r2]
    872a:	1899      	adds	r1, r3, r2
    872c:	7848      	ldrb	r0, [r1, #1]
    872e:	2400      	movs	r4, #0
    8730:	4020      	ands	r0, r4
    8732:	7048      	strb	r0, [r1, #1]
    8734:	1899      	adds	r1, r3, r2
    8736:	7888      	ldrb	r0, [r1, #2]
    8738:	2400      	movs	r4, #0
    873a:	4020      	ands	r0, r4
    873c:	7088      	strb	r0, [r1, #2]
    873e:	189b      	adds	r3, r3, r2
    8740:	78da      	ldrb	r2, [r3, #3]
    8742:	2100      	movs	r1, #0
    8744:	400a      	ands	r2, r1
    8746:	70da      	strb	r2, [r3, #3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    8748:	687b      	ldr	r3, [r7, #4]
    874a:	7adb      	ldrb	r3, [r3, #11]
    874c:	079b      	lsls	r3, r3, #30
    874e:	0fdb      	lsrs	r3, r3, #31
    8750:	b2da      	uxtb	r2, r3
    8752:	68fb      	ldr	r3, [r7, #12]
    8754:	2101      	movs	r1, #1
    8756:	400a      	ands	r2, r1
    8758:	1890      	adds	r0, r2, r2
    875a:	7ada      	ldrb	r2, [r3, #11]
    875c:	2102      	movs	r1, #2
    875e:	438a      	bics	r2, r1
    8760:	1c11      	adds	r1, r2, #0
    8762:	1c02      	adds	r2, r0, #0
    8764:	430a      	orrs	r2, r1
    8766:	72da      	strb	r2, [r3, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    8768:	687b      	ldr	r3, [r7, #4]
    876a:	7b5a      	ldrb	r2, [r3, #13]
    876c:	7b9b      	ldrb	r3, [r3, #14]
    876e:	021b      	lsls	r3, r3, #8
    8770:	4313      	orrs	r3, r2
    8772:	b29a      	uxth	r2, r3
    8774:	68fb      	ldr	r3, [r7, #12]
    8776:	330f      	adds	r3, #15
    8778:	21ff      	movs	r1, #255	; 0xff
    877a:	4011      	ands	r1, r2
    877c:	000c      	movs	r4, r1
    877e:	7819      	ldrb	r1, [r3, #0]
    8780:	2000      	movs	r0, #0
    8782:	4001      	ands	r1, r0
    8784:	1c08      	adds	r0, r1, #0
    8786:	1c21      	adds	r1, r4, #0
    8788:	4301      	orrs	r1, r0
    878a:	7019      	strb	r1, [r3, #0]
    878c:	0a12      	lsrs	r2, r2, #8
    878e:	b290      	uxth	r0, r2
    8790:	785a      	ldrb	r2, [r3, #1]
    8792:	2100      	movs	r1, #0
    8794:	400a      	ands	r2, r1
    8796:	1c11      	adds	r1, r2, #0
    8798:	1c02      	adds	r2, r0, #0
    879a:	430a      	orrs	r2, r1
    879c:	705a      	strb	r2, [r3, #1]

	command = (NwkCommandAck_t *)ack->payload;
    879e:	68fb      	ldr	r3, [r7, #12]
    87a0:	2281      	movs	r2, #129	; 0x81
    87a2:	5c9a      	ldrb	r2, [r3, r2]
    87a4:	2182      	movs	r1, #130	; 0x82
    87a6:	5c59      	ldrb	r1, [r3, r1]
    87a8:	0209      	lsls	r1, r1, #8
    87aa:	430a      	orrs	r2, r1
    87ac:	2183      	movs	r1, #131	; 0x83
    87ae:	5c59      	ldrb	r1, [r3, r1]
    87b0:	0409      	lsls	r1, r1, #16
    87b2:	430a      	orrs	r2, r1
    87b4:	2184      	movs	r1, #132	; 0x84
    87b6:	5c5b      	ldrb	r3, [r3, r1]
    87b8:	061b      	lsls	r3, r3, #24
    87ba:	4313      	orrs	r3, r2
    87bc:	60bb      	str	r3, [r7, #8]
	command->id = NWK_COMMAND_ACK;
    87be:	68bb      	ldr	r3, [r7, #8]
    87c0:	2200      	movs	r2, #0
    87c2:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    87c4:	4b0a      	ldr	r3, [pc, #40]	; (87f0 <nwkRxSendAck+0xfc>)
    87c6:	781a      	ldrb	r2, [r3, #0]
    87c8:	68bb      	ldr	r3, [r7, #8]
    87ca:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    87cc:	687b      	ldr	r3, [r7, #4]
    87ce:	7b1a      	ldrb	r2, [r3, #12]
    87d0:	68bb      	ldr	r3, [r7, #8]
    87d2:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    87d4:	68fb      	ldr	r3, [r7, #12]
    87d6:	0018      	movs	r0, r3
    87d8:	4b06      	ldr	r3, [pc, #24]	; (87f4 <nwkRxSendAck+0x100>)
    87da:	4798      	blx	r3
    87dc:	e000      	b.n	87e0 <nwkRxSendAck+0xec>
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
		return;
    87de:	46c0      	nop			; (mov r8, r8)
	command->id = NWK_COMMAND_ACK;
	command->control = nwkRxAckControl;
	command->seq = frame->header.nwkSeq;

	nwkTxFrame(ack);
}
    87e0:	46bd      	mov	sp, r7
    87e2:	b005      	add	sp, #20
    87e4:	bd90      	pop	{r4, r7, pc}
    87e6:	46c0      	nop			; (mov r8, r8)
    87e8:	000073b5 	.word	0x000073b5
    87ec:	00007529 	.word	0x00007529
    87f0:	20000ce0 	.word	0x20000ce0
    87f4:	00009475 	.word	0x00009475

000087f8 <nwkRxDecryptConf>:
#ifdef NWK_ENABLE_SECURITY

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
    87f8:	b580      	push	{r7, lr}
    87fa:	b082      	sub	sp, #8
    87fc:	af00      	add	r7, sp, #0
    87fe:	6078      	str	r0, [r7, #4]
    8800:	000a      	movs	r2, r1
    8802:	1cfb      	adds	r3, r7, #3
    8804:	701a      	strb	r2, [r3, #0]
	if (status) {
    8806:	1cfb      	adds	r3, r7, #3
    8808:	781b      	ldrb	r3, [r3, #0]
    880a:	2b00      	cmp	r3, #0
    880c:	d003      	beq.n	8816 <nwkRxDecryptConf+0x1e>
		frame->state = NWK_RX_STATE_INDICATE;
    880e:	687b      	ldr	r3, [r7, #4]
    8810:	2222      	movs	r2, #34	; 0x22
    8812:	701a      	strb	r2, [r3, #0]
	} else {
		frame->state = NWK_RX_STATE_FINISH;
	}
}
    8814:	e002      	b.n	881c <nwkRxDecryptConf+0x24>
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
		frame->state = NWK_RX_STATE_INDICATE;
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    8816:	687b      	ldr	r3, [r7, #4]
    8818:	2224      	movs	r2, #36	; 0x24
    881a:	701a      	strb	r2, [r3, #0]
	}
}
    881c:	46c0      	nop			; (mov r8, r8)
    881e:	46bd      	mov	sp, r7
    8820:	b002      	add	sp, #8
    8822:	bd80      	pop	{r7, pc}

00008824 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    8824:	b580      	push	{r7, lr}
    8826:	b084      	sub	sp, #16
    8828:	af00      	add	r7, sp, #0
    882a:	6078      	str	r0, [r7, #4]
	bool restart = false;
    882c:	230f      	movs	r3, #15
    882e:	18fb      	adds	r3, r7, r3
    8830:	2200      	movs	r2, #0
    8832:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    8834:	230e      	movs	r3, #14
    8836:	18fb      	adds	r3, r7, r3
    8838:	2200      	movs	r2, #0
    883a:	701a      	strb	r2, [r3, #0]
    883c:	e02d      	b.n	889a <nwkRxDuplicateRejectionTimerHandler+0x76>
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    883e:	230e      	movs	r3, #14
    8840:	18fb      	adds	r3, r7, r3
    8842:	781a      	ldrb	r2, [r3, #0]
    8844:	491e      	ldr	r1, [pc, #120]	; (88c0 <nwkRxDuplicateRejectionTimerHandler+0x9c>)
    8846:	0013      	movs	r3, r2
    8848:	005b      	lsls	r3, r3, #1
    884a:	189b      	adds	r3, r3, r2
    884c:	005b      	lsls	r3, r3, #1
    884e:	18cb      	adds	r3, r1, r3
    8850:	3304      	adds	r3, #4
    8852:	781b      	ldrb	r3, [r3, #0]
    8854:	2b00      	cmp	r3, #0
    8856:	d019      	beq.n	888c <nwkRxDuplicateRejectionTimerHandler+0x68>
			nwkRxDuplicateRejectionTable[i].ttl--;
    8858:	230e      	movs	r3, #14
    885a:	18fb      	adds	r3, r7, r3
    885c:	781a      	ldrb	r2, [r3, #0]
    885e:	4918      	ldr	r1, [pc, #96]	; (88c0 <nwkRxDuplicateRejectionTimerHandler+0x9c>)
    8860:	0013      	movs	r3, r2
    8862:	005b      	lsls	r3, r3, #1
    8864:	189b      	adds	r3, r3, r2
    8866:	005b      	lsls	r3, r3, #1
    8868:	18cb      	adds	r3, r1, r3
    886a:	3304      	adds	r3, #4
    886c:	781b      	ldrb	r3, [r3, #0]
    886e:	3b01      	subs	r3, #1
    8870:	b2d8      	uxtb	r0, r3
    8872:	4913      	ldr	r1, [pc, #76]	; (88c0 <nwkRxDuplicateRejectionTimerHandler+0x9c>)
    8874:	0013      	movs	r3, r2
    8876:	005b      	lsls	r3, r3, #1
    8878:	189b      	adds	r3, r3, r2
    887a:	005b      	lsls	r3, r3, #1
    887c:	18cb      	adds	r3, r1, r3
    887e:	3304      	adds	r3, #4
    8880:	1c02      	adds	r2, r0, #0
    8882:	701a      	strb	r2, [r3, #0]
			restart = true;
    8884:	230f      	movs	r3, #15
    8886:	18fb      	adds	r3, r7, r3
    8888:	2201      	movs	r2, #1
    888a:	701a      	strb	r2, [r3, #0]
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    888c:	230e      	movs	r3, #14
    888e:	18fb      	adds	r3, r7, r3
    8890:	781a      	ldrb	r2, [r3, #0]
    8892:	230e      	movs	r3, #14
    8894:	18fb      	adds	r3, r7, r3
    8896:	3201      	adds	r2, #1
    8898:	701a      	strb	r2, [r3, #0]
    889a:	230e      	movs	r3, #14
    889c:	18fb      	adds	r3, r7, r3
    889e:	781b      	ldrb	r3, [r3, #0]
    88a0:	2b31      	cmp	r3, #49	; 0x31
    88a2:	d9cc      	bls.n	883e <nwkRxDuplicateRejectionTimerHandler+0x1a>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    88a4:	230f      	movs	r3, #15
    88a6:	18fb      	adds	r3, r7, r3
    88a8:	781b      	ldrb	r3, [r3, #0]
    88aa:	2b00      	cmp	r3, #0
    88ac:	d003      	beq.n	88b6 <nwkRxDuplicateRejectionTimerHandler+0x92>
		SYS_TimerStart(timer);
    88ae:	687b      	ldr	r3, [r7, #4]
    88b0:	0018      	movs	r0, r3
    88b2:	4b04      	ldr	r3, [pc, #16]	; (88c4 <nwkRxDuplicateRejectionTimerHandler+0xa0>)
    88b4:	4798      	blx	r3
	}
}
    88b6:	46c0      	nop			; (mov r8, r8)
    88b8:	46bd      	mov	sp, r7
    88ba:	b004      	add	sp, #16
    88bc:	bd80      	pop	{r7, pc}
    88be:	46c0      	nop			; (mov r8, r8)
    88c0:	20000bb4 	.word	0x20000bb4
    88c4:	0000656d 	.word	0x0000656d

000088c8 <nwkRxRejectDuplicate>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
    88c8:	b580      	push	{r7, lr}
    88ca:	b086      	sub	sp, #24
    88cc:	af00      	add	r7, sp, #0
    88ce:	6078      	str	r0, [r7, #4]
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    88d0:	2300      	movs	r3, #0
    88d2:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    88d4:	2313      	movs	r3, #19
    88d6:	18fb      	adds	r3, r7, r3
    88d8:	2200      	movs	r2, #0
    88da:	701a      	strb	r2, [r3, #0]
    88dc:	e087      	b.n	89ee <nwkRxRejectDuplicate+0x126>
		entry = &nwkRxDuplicateRejectionTable[i];
    88de:	2313      	movs	r3, #19
    88e0:	18fb      	adds	r3, r7, r3
    88e2:	781a      	ldrb	r2, [r3, #0]
    88e4:	0013      	movs	r3, r2
    88e6:	005b      	lsls	r3, r3, #1
    88e8:	189b      	adds	r3, r3, r2
    88ea:	005b      	lsls	r3, r3, #1
    88ec:	4a53      	ldr	r2, [pc, #332]	; (8a3c <nwkRxRejectDuplicate+0x174>)
    88ee:	189b      	adds	r3, r3, r2
    88f0:	60fb      	str	r3, [r7, #12]

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    88f2:	68fb      	ldr	r3, [r7, #12]
    88f4:	791b      	ldrb	r3, [r3, #4]
    88f6:	2b00      	cmp	r3, #0
    88f8:	d06c      	beq.n	89d4 <nwkRxRejectDuplicate+0x10c>
    88fa:	687b      	ldr	r3, [r7, #4]
    88fc:	7ada      	ldrb	r2, [r3, #11]
    88fe:	7b1b      	ldrb	r3, [r3, #12]
    8900:	021b      	lsls	r3, r3, #8
    8902:	4313      	orrs	r3, r2
    8904:	b29a      	uxth	r2, r3
    8906:	68fb      	ldr	r3, [r7, #12]
    8908:	881b      	ldrh	r3, [r3, #0]
    890a:	429a      	cmp	r2, r3
    890c:	d162      	bne.n	89d4 <nwkRxRejectDuplicate+0x10c>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    890e:	68fb      	ldr	r3, [r7, #12]
    8910:	7899      	ldrb	r1, [r3, #2]
    8912:	687b      	ldr	r3, [r7, #4]
    8914:	7a9a      	ldrb	r2, [r3, #10]
    8916:	230b      	movs	r3, #11
    8918:	18fb      	adds	r3, r7, r3
    891a:	1a8a      	subs	r2, r1, r2
    891c:	701a      	strb	r2, [r3, #0]

			if (diff < 8) {
    891e:	230b      	movs	r3, #11
    8920:	18fb      	adds	r3, r7, r3
    8922:	781b      	ldrb	r3, [r3, #0]
    8924:	2b07      	cmp	r3, #7
    8926:	d836      	bhi.n	8996 <nwkRxRejectDuplicate+0xce>
				if (entry->mask & (1 << diff)) {
    8928:	68fb      	ldr	r3, [r7, #12]
    892a:	78db      	ldrb	r3, [r3, #3]
    892c:	001a      	movs	r2, r3
    892e:	230b      	movs	r3, #11
    8930:	18fb      	adds	r3, r7, r3
    8932:	781b      	ldrb	r3, [r3, #0]
    8934:	411a      	asrs	r2, r3
    8936:	0013      	movs	r3, r2
    8938:	2201      	movs	r2, #1
    893a:	4013      	ands	r3, r2
    893c:	d01a      	beq.n	8974 <nwkRxRejectDuplicate+0xac>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    893e:	4b40      	ldr	r3, [pc, #256]	; (8a40 <nwkRxRejectDuplicate+0x178>)
    8940:	881a      	ldrh	r2, [r3, #0]
    8942:	687b      	ldr	r3, [r7, #4]
    8944:	7959      	ldrb	r1, [r3, #5]
    8946:	799b      	ldrb	r3, [r3, #6]
    8948:	021b      	lsls	r3, r3, #8
    894a:	430b      	orrs	r3, r1
    894c:	b29b      	uxth	r3, r3
    894e:	429a      	cmp	r2, r3
    8950:	d10e      	bne.n	8970 <nwkRxRejectDuplicate+0xa8>
						nwkRouteRemove(
    8952:	687b      	ldr	r3, [r7, #4]
    8954:	7b5a      	ldrb	r2, [r3, #13]
    8956:	7b9b      	ldrb	r3, [r3, #14]
    8958:	021b      	lsls	r3, r3, #8
    895a:	4313      	orrs	r3, r2
    895c:	b29a      	uxth	r2, r3
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    895e:	687b      	ldr	r3, [r7, #4]
    8960:	7a5b      	ldrb	r3, [r3, #9]
    8962:	071b      	lsls	r3, r3, #28
    8964:	0fdb      	lsrs	r3, r3, #31
    8966:	b2db      	uxtb	r3, r3

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    8968:	0019      	movs	r1, r3
    896a:	0010      	movs	r0, r2
    896c:	4b35      	ldr	r3, [pc, #212]	; (8a44 <nwkRxRejectDuplicate+0x17c>)
    896e:	4798      	blx	r3
								header->nwkDstAddr,
								header->nwkFcf.multicast);
					}
	#endif
					return true;
    8970:	2301      	movs	r3, #1
    8972:	e05e      	b.n	8a32 <nwkRxRejectDuplicate+0x16a>
				}

				entry->mask |= (1 << diff);
    8974:	68fb      	ldr	r3, [r7, #12]
    8976:	78db      	ldrb	r3, [r3, #3]
    8978:	b25a      	sxtb	r2, r3
    897a:	230b      	movs	r3, #11
    897c:	18fb      	adds	r3, r7, r3
    897e:	781b      	ldrb	r3, [r3, #0]
    8980:	2101      	movs	r1, #1
    8982:	4099      	lsls	r1, r3
    8984:	000b      	movs	r3, r1
    8986:	b25b      	sxtb	r3, r3
    8988:	4313      	orrs	r3, r2
    898a:	b25b      	sxtb	r3, r3
    898c:	b2da      	uxtb	r2, r3
    898e:	68fb      	ldr	r3, [r7, #12]
    8990:	70da      	strb	r2, [r3, #3]
				return false;
    8992:	2300      	movs	r3, #0
    8994:	e04d      	b.n	8a32 <nwkRxRejectDuplicate+0x16a>
			} else {
				uint8_t shift = -(int8_t)diff;
    8996:	230a      	movs	r3, #10
    8998:	18fb      	adds	r3, r7, r3
    899a:	220b      	movs	r2, #11
    899c:	18ba      	adds	r2, r7, r2
    899e:	7812      	ldrb	r2, [r2, #0]
    89a0:	4252      	negs	r2, r2
    89a2:	701a      	strb	r2, [r3, #0]

				entry->seq = header->nwkSeq;
    89a4:	687b      	ldr	r3, [r7, #4]
    89a6:	7a9a      	ldrb	r2, [r3, #10]
    89a8:	68fb      	ldr	r3, [r7, #12]
    89aa:	709a      	strb	r2, [r3, #2]
				entry->mask = (entry->mask << shift) | 1;
    89ac:	68fb      	ldr	r3, [r7, #12]
    89ae:	78db      	ldrb	r3, [r3, #3]
    89b0:	001a      	movs	r2, r3
    89b2:	230a      	movs	r3, #10
    89b4:	18fb      	adds	r3, r7, r3
    89b6:	781b      	ldrb	r3, [r3, #0]
    89b8:	409a      	lsls	r2, r3
    89ba:	0013      	movs	r3, r2
    89bc:	b25b      	sxtb	r3, r3
    89be:	2201      	movs	r2, #1
    89c0:	4313      	orrs	r3, r2
    89c2:	b25b      	sxtb	r3, r3
    89c4:	b2da      	uxtb	r2, r3
    89c6:	68fb      	ldr	r3, [r7, #12]
    89c8:	70da      	strb	r2, [r3, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    89ca:	68fb      	ldr	r3, [r7, #12]
    89cc:	2215      	movs	r2, #21
    89ce:	711a      	strb	r2, [r3, #4]
				return false;
    89d0:	2300      	movs	r3, #0
    89d2:	e02e      	b.n	8a32 <nwkRxRejectDuplicate+0x16a>
			}
		}

		if (0 == entry->ttl) {
    89d4:	68fb      	ldr	r3, [r7, #12]
    89d6:	791b      	ldrb	r3, [r3, #4]
    89d8:	2b00      	cmp	r3, #0
    89da:	d101      	bne.n	89e0 <nwkRxRejectDuplicate+0x118>
			freeEntry = entry;
    89dc:	68fb      	ldr	r3, [r7, #12]
    89de:	617b      	str	r3, [r7, #20]
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    89e0:	2313      	movs	r3, #19
    89e2:	18fb      	adds	r3, r7, r3
    89e4:	781a      	ldrb	r2, [r3, #0]
    89e6:	2313      	movs	r3, #19
    89e8:	18fb      	adds	r3, r7, r3
    89ea:	3201      	adds	r2, #1
    89ec:	701a      	strb	r2, [r3, #0]
    89ee:	2313      	movs	r3, #19
    89f0:	18fb      	adds	r3, r7, r3
    89f2:	781b      	ldrb	r3, [r3, #0]
    89f4:	2b31      	cmp	r3, #49	; 0x31
    89f6:	d800      	bhi.n	89fa <nwkRxRejectDuplicate+0x132>
    89f8:	e771      	b.n	88de <nwkRxRejectDuplicate+0x16>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    89fa:	697b      	ldr	r3, [r7, #20]
    89fc:	2b00      	cmp	r3, #0
    89fe:	d101      	bne.n	8a04 <nwkRxRejectDuplicate+0x13c>
		return true;
    8a00:	2301      	movs	r3, #1
    8a02:	e016      	b.n	8a32 <nwkRxRejectDuplicate+0x16a>
	}

	freeEntry->src = header->nwkSrcAddr;
    8a04:	687b      	ldr	r3, [r7, #4]
    8a06:	7ada      	ldrb	r2, [r3, #11]
    8a08:	7b1b      	ldrb	r3, [r3, #12]
    8a0a:	021b      	lsls	r3, r3, #8
    8a0c:	4313      	orrs	r3, r2
    8a0e:	b29a      	uxth	r2, r3
    8a10:	697b      	ldr	r3, [r7, #20]
    8a12:	801a      	strh	r2, [r3, #0]
	freeEntry->seq = header->nwkSeq;
    8a14:	687b      	ldr	r3, [r7, #4]
    8a16:	7a9a      	ldrb	r2, [r3, #10]
    8a18:	697b      	ldr	r3, [r7, #20]
    8a1a:	709a      	strb	r2, [r3, #2]
	freeEntry->mask = 1;
    8a1c:	697b      	ldr	r3, [r7, #20]
    8a1e:	2201      	movs	r2, #1
    8a20:	70da      	strb	r2, [r3, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    8a22:	697b      	ldr	r3, [r7, #20]
    8a24:	2215      	movs	r2, #21
    8a26:	711a      	strb	r2, [r3, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    8a28:	4b07      	ldr	r3, [pc, #28]	; (8a48 <nwkRxRejectDuplicate+0x180>)
    8a2a:	0018      	movs	r0, r3
    8a2c:	4b07      	ldr	r3, [pc, #28]	; (8a4c <nwkRxRejectDuplicate+0x184>)
    8a2e:	4798      	blx	r3

	return false;
    8a30:	2300      	movs	r3, #0
}
    8a32:	0018      	movs	r0, r3
    8a34:	46bd      	mov	sp, r7
    8a36:	b006      	add	sp, #24
    8a38:	bd80      	pop	{r7, pc}
    8a3a:	46c0      	nop			; (mov r8, r8)
    8a3c:	20000bb4 	.word	0x20000bb4
    8a40:	20001024 	.word	0x20001024
    8a44:	0000781d 	.word	0x0000781d
    8a48:	20000ce4 	.word	0x20000ce4
    8a4c:	0000656d 	.word	0x0000656d

00008a50 <nwkRxSeriveDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    8a50:	b580      	push	{r7, lr}
    8a52:	b082      	sub	sp, #8
    8a54:	af00      	add	r7, sp, #0
    8a56:	6078      	str	r0, [r7, #4]
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    8a58:	687b      	ldr	r3, [r7, #4]
    8a5a:	7b1b      	ldrb	r3, [r3, #12]
    8a5c:	2b00      	cmp	r3, #0
    8a5e:	d101      	bne.n	8a64 <nwkRxSeriveDataInd+0x14>
		return false;
    8a60:	2300      	movs	r3, #0
    8a62:	e026      	b.n	8ab2 <nwkRxSeriveDataInd+0x62>
	}

	switch (ind->data[0]) {
    8a64:	687b      	ldr	r3, [r7, #4]
    8a66:	689b      	ldr	r3, [r3, #8]
    8a68:	781b      	ldrb	r3, [r3, #0]
    8a6a:	2b01      	cmp	r3, #1
    8a6c:	d00e      	beq.n	8a8c <nwkRxSeriveDataInd+0x3c>
    8a6e:	dc02      	bgt.n	8a76 <nwkRxSeriveDataInd+0x26>
    8a70:	2b00      	cmp	r3, #0
    8a72:	d005      	beq.n	8a80 <nwkRxSeriveDataInd+0x30>
    8a74:	e01c      	b.n	8ab0 <nwkRxSeriveDataInd+0x60>
    8a76:	2b02      	cmp	r3, #2
    8a78:	d00e      	beq.n	8a98 <nwkRxSeriveDataInd+0x48>
    8a7a:	2b03      	cmp	r3, #3
    8a7c:	d012      	beq.n	8aa4 <nwkRxSeriveDataInd+0x54>
    8a7e:	e017      	b.n	8ab0 <nwkRxSeriveDataInd+0x60>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    8a80:	687b      	ldr	r3, [r7, #4]
    8a82:	0018      	movs	r0, r3
    8a84:	4b0d      	ldr	r3, [pc, #52]	; (8abc <nwkRxSeriveDataInd+0x6c>)
    8a86:	4798      	blx	r3
    8a88:	0003      	movs	r3, r0
    8a8a:	e012      	b.n	8ab2 <nwkRxSeriveDataInd+0x62>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    8a8c:	687b      	ldr	r3, [r7, #4]
    8a8e:	0018      	movs	r0, r3
    8a90:	4b0b      	ldr	r3, [pc, #44]	; (8ac0 <nwkRxSeriveDataInd+0x70>)
    8a92:	4798      	blx	r3
    8a94:	0003      	movs	r3, r0
    8a96:	e00c      	b.n	8ab2 <nwkRxSeriveDataInd+0x62>
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	case NWK_COMMAND_ROUTE_REQUEST:
		return nwkRouteDiscoveryRequestReceived(ind);
    8a98:	687b      	ldr	r3, [r7, #4]
    8a9a:	0018      	movs	r0, r3
    8a9c:	4b09      	ldr	r3, [pc, #36]	; (8ac4 <nwkRxSeriveDataInd+0x74>)
    8a9e:	4798      	blx	r3
    8aa0:	0003      	movs	r3, r0
    8aa2:	e006      	b.n	8ab2 <nwkRxSeriveDataInd+0x62>

	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
    8aa4:	687b      	ldr	r3, [r7, #4]
    8aa6:	0018      	movs	r0, r3
    8aa8:	4b07      	ldr	r3, [pc, #28]	; (8ac8 <nwkRxSeriveDataInd+0x78>)
    8aaa:	4798      	blx	r3
    8aac:	0003      	movs	r3, r0
    8aae:	e000      	b.n	8ab2 <nwkRxSeriveDataInd+0x62>
#endif

	default:
		return false;
    8ab0:	2300      	movs	r3, #0
	}
}
    8ab2:	0018      	movs	r0, r3
    8ab4:	46bd      	mov	sp, r7
    8ab6:	b002      	add	sp, #8
    8ab8:	bd80      	pop	{r7, pc}
    8aba:	46c0      	nop			; (mov r8, r8)
    8abc:	000097e5 	.word	0x000097e5
    8ac0:	00007c35 	.word	0x00007c35
    8ac4:	0000811d 	.word	0x0000811d
    8ac8:	000083fd 	.word	0x000083fd

00008acc <nwkRxHandleReceivedFrame>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
    8acc:	b580      	push	{r7, lr}
    8ace:	b084      	sub	sp, #16
    8ad0:	af00      	add	r7, sp, #0
    8ad2:	6078      	str	r0, [r7, #4]
	NwkFrameHeader_t *header = &frame->header;
    8ad4:	687b      	ldr	r3, [r7, #4]
    8ad6:	3302      	adds	r3, #2
    8ad8:	60fb      	str	r3, [r7, #12]

	frame->state = NWK_RX_STATE_FINISH;
    8ada:	687b      	ldr	r3, [r7, #4]
    8adc:	2224      	movs	r2, #36	; 0x24
    8ade:	701a      	strb	r2, [r3, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    8ae0:	68fb      	ldr	r3, [r7, #12]
    8ae2:	7a5b      	ldrb	r3, [r3, #9]
    8ae4:	2208      	movs	r2, #8
    8ae6:	4013      	ands	r3, r2
    8ae8:	b2db      	uxtb	r3, r3
    8aea:	2b00      	cmp	r3, #0
    8aec:	d000      	beq.n	8af0 <nwkRxHandleReceivedFrame+0x24>
    8aee:	e09e      	b.n	8c2e <nwkRxHandleReceivedFrame+0x162>
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    8af0:	68fb      	ldr	r3, [r7, #12]
    8af2:	78da      	ldrb	r2, [r3, #3]
    8af4:	791b      	ldrb	r3, [r3, #4]
    8af6:	021b      	lsls	r3, r3, #8
    8af8:	4313      	orrs	r3, r2
    8afa:	b29b      	uxth	r3, r3
    8afc:	4a52      	ldr	r2, [pc, #328]	; (8c48 <nwkRxHandleReceivedFrame+0x17c>)
    8afe:	4293      	cmp	r3, r2
    8b00:	d122      	bne.n	8b48 <nwkRxHandleReceivedFrame+0x7c>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    8b02:	4b52      	ldr	r3, [pc, #328]	; (8c4c <nwkRxHandleReceivedFrame+0x180>)
    8b04:	881a      	ldrh	r2, [r3, #0]
    8b06:	68fb      	ldr	r3, [r7, #12]
    8b08:	7b59      	ldrb	r1, [r3, #13]
    8b0a:	7b9b      	ldrb	r3, [r3, #14]
    8b0c:	021b      	lsls	r3, r3, #8
    8b0e:	430b      	orrs	r3, r1
    8b10:	b29b      	uxth	r3, r3
    8b12:	429a      	cmp	r2, r3
    8b14:	d009      	beq.n	8b2a <nwkRxHandleReceivedFrame+0x5e>
				header->nwkDstAddr) {
    8b16:	68fb      	ldr	r3, [r7, #12]
    8b18:	7b5a      	ldrb	r2, [r3, #13]
    8b1a:	7b9b      	ldrb	r3, [r3, #14]
    8b1c:	021b      	lsls	r3, r3, #8
    8b1e:	4313      	orrs	r3, r2
    8b20:	b29b      	uxth	r3, r3
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    8b22:	4a49      	ldr	r2, [pc, #292]	; (8c48 <nwkRxHandleReceivedFrame+0x17c>)
    8b24:	4293      	cmp	r3, r2
    8b26:	d000      	beq.n	8b2a <nwkRxHandleReceivedFrame+0x5e>
    8b28:	e083      	b.n	8c32 <nwkRxHandleReceivedFrame+0x166>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    8b2a:	68fb      	ldr	r3, [r7, #12]
    8b2c:	7a5b      	ldrb	r3, [r3, #9]
    8b2e:	2202      	movs	r2, #2
    8b30:	4013      	ands	r3, r2
    8b32:	b2db      	uxtb	r3, r3
    8b34:	2b00      	cmp	r3, #0
    8b36:	d003      	beq.n	8b40 <nwkRxHandleReceivedFrame+0x74>
				frame->state = NWK_RX_STATE_DECRYPT;
    8b38:	687b      	ldr	r3, [r7, #4]
    8b3a:	2221      	movs	r2, #33	; 0x21
    8b3c:	701a      	strb	r2, [r3, #0]
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
		}

		return;
    8b3e:	e078      	b.n	8c32 <nwkRxHandleReceivedFrame+0x166>
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
				frame->state = NWK_RX_STATE_DECRYPT;
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    8b40:	687b      	ldr	r3, [r7, #4]
    8b42:	2222      	movs	r2, #34	; 0x22
    8b44:	701a      	strb	r2, [r3, #0]
		}

		return;
    8b46:	e074      	b.n	8c32 <nwkRxHandleReceivedFrame+0x166>
	if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi)) {
		return;
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    8b48:	68fb      	ldr	r3, [r7, #12]
    8b4a:	7b5a      	ldrb	r2, [r3, #13]
    8b4c:	7b9b      	ldrb	r3, [r3, #14]
    8b4e:	021b      	lsls	r3, r3, #8
    8b50:	4313      	orrs	r3, r2
    8b52:	b29b      	uxth	r3, r3
    8b54:	4a3c      	ldr	r2, [pc, #240]	; (8c48 <nwkRxHandleReceivedFrame+0x17c>)
    8b56:	4293      	cmp	r3, r2
    8b58:	d107      	bne.n	8b6a <nwkRxHandleReceivedFrame+0x9e>
    8b5a:	68fb      	ldr	r3, [r7, #12]
    8b5c:	7a5b      	ldrb	r3, [r3, #9]
    8b5e:	2201      	movs	r2, #1
    8b60:	4013      	ands	r3, r2
    8b62:	b2db      	uxtb	r3, r3
    8b64:	2b00      	cmp	r3, #0
    8b66:	d000      	beq.n	8b6a <nwkRxHandleReceivedFrame+0x9e>
    8b68:	e065      	b.n	8c36 <nwkRxHandleReceivedFrame+0x16a>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    8b6a:	4b38      	ldr	r3, [pc, #224]	; (8c4c <nwkRxHandleReceivedFrame+0x180>)
    8b6c:	881a      	ldrh	r2, [r3, #0]
    8b6e:	68fb      	ldr	r3, [r7, #12]
    8b70:	7ad9      	ldrb	r1, [r3, #11]
    8b72:	7b1b      	ldrb	r3, [r3, #12]
    8b74:	021b      	lsls	r3, r3, #8
    8b76:	430b      	orrs	r3, r1
    8b78:	b29b      	uxth	r3, r3
    8b7a:	429a      	cmp	r2, r3
    8b7c:	d05d      	beq.n	8c3a <nwkRxHandleReceivedFrame+0x16e>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    8b7e:	687b      	ldr	r3, [r7, #4]
    8b80:	0018      	movs	r0, r3
    8b82:	4b33      	ldr	r3, [pc, #204]	; (8c50 <nwkRxHandleReceivedFrame+0x184>)
    8b84:	4798      	blx	r3
#endif

	if (nwkRxRejectDuplicate(header)) {
    8b86:	68fb      	ldr	r3, [r7, #12]
    8b88:	0018      	movs	r0, r3
    8b8a:	4b32      	ldr	r3, [pc, #200]	; (8c54 <nwkRxHandleReceivedFrame+0x188>)
    8b8c:	4798      	blx	r3
    8b8e:	1e03      	subs	r3, r0, #0
    8b90:	d155      	bne.n	8c3e <nwkRxHandleReceivedFrame+0x172>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    8b92:	68fb      	ldr	r3, [r7, #12]
    8b94:	795a      	ldrb	r2, [r3, #5]
    8b96:	799b      	ldrb	r3, [r3, #6]
    8b98:	021b      	lsls	r3, r3, #8
    8b9a:	4313      	orrs	r3, r2
    8b9c:	b29b      	uxth	r3, r3
    8b9e:	4a2a      	ldr	r2, [pc, #168]	; (8c48 <nwkRxHandleReceivedFrame+0x17c>)
    8ba0:	4293      	cmp	r3, r2
    8ba2:	d114      	bne.n	8bce <nwkRxHandleReceivedFrame+0x102>
    8ba4:	4b29      	ldr	r3, [pc, #164]	; (8c4c <nwkRxHandleReceivedFrame+0x180>)
    8ba6:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    8ba8:	68fb      	ldr	r3, [r7, #12]
    8baa:	7b59      	ldrb	r1, [r3, #13]
    8bac:	7b9b      	ldrb	r3, [r3, #14]
    8bae:	021b      	lsls	r3, r3, #8
    8bb0:	430b      	orrs	r3, r1
    8bb2:	b29b      	uxth	r3, r3
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    8bb4:	429a      	cmp	r2, r3
    8bb6:	d00a      	beq.n	8bce <nwkRxHandleReceivedFrame+0x102>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    8bb8:	68fb      	ldr	r3, [r7, #12]
    8bba:	7a5b      	ldrb	r3, [r3, #9]
    8bbc:	2204      	movs	r2, #4
    8bbe:	4013      	ands	r3, r2
    8bc0:	b2db      	uxtb	r3, r3
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    8bc2:	2b00      	cmp	r3, #0
    8bc4:	d103      	bne.n	8bce <nwkRxHandleReceivedFrame+0x102>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    8bc6:	687b      	ldr	r3, [r7, #4]
    8bc8:	0018      	movs	r0, r3
    8bca:	4b23      	ldr	r3, [pc, #140]	; (8c58 <nwkRxHandleReceivedFrame+0x18c>)
    8bcc:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    8bce:	4b1f      	ldr	r3, [pc, #124]	; (8c4c <nwkRxHandleReceivedFrame+0x180>)
    8bd0:	881a      	ldrh	r2, [r3, #0]
    8bd2:	68fb      	ldr	r3, [r7, #12]
    8bd4:	7b59      	ldrb	r1, [r3, #13]
    8bd6:	7b9b      	ldrb	r3, [r3, #14]
    8bd8:	021b      	lsls	r3, r3, #8
    8bda:	430b      	orrs	r3, r1
    8bdc:	b29b      	uxth	r3, r3
    8bde:	429a      	cmp	r2, r3
    8be0:	d008      	beq.n	8bf4 <nwkRxHandleReceivedFrame+0x128>
				header->nwkDstAddr) {
    8be2:	68fb      	ldr	r3, [r7, #12]
    8be4:	7b5a      	ldrb	r2, [r3, #13]
    8be6:	7b9b      	ldrb	r3, [r3, #14]
    8be8:	021b      	lsls	r3, r3, #8
    8bea:	4313      	orrs	r3, r2
    8bec:	b29b      	uxth	r3, r3
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    8bee:	4a16      	ldr	r2, [pc, #88]	; (8c48 <nwkRxHandleReceivedFrame+0x17c>)
    8bf0:	4293      	cmp	r3, r2
    8bf2:	d10e      	bne.n	8c12 <nwkRxHandleReceivedFrame+0x146>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    8bf4:	68fb      	ldr	r3, [r7, #12]
    8bf6:	7a5b      	ldrb	r3, [r3, #9]
    8bf8:	2202      	movs	r2, #2
    8bfa:	4013      	ands	r3, r2
    8bfc:	b2db      	uxtb	r3, r3
    8bfe:	2b00      	cmp	r3, #0
    8c00:	d003      	beq.n	8c0a <nwkRxHandleReceivedFrame+0x13e>
				frame->state = NWK_RX_STATE_DECRYPT;
    8c02:	687b      	ldr	r3, [r7, #4]
    8c04:	2221      	movs	r2, #33	; 0x21
    8c06:	701a      	strb	r2, [r3, #0]
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    8c08:	e01a      	b.n	8c40 <nwkRxHandleReceivedFrame+0x174>
				frame->state = NWK_RX_STATE_DECRYPT;
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    8c0a:	687b      	ldr	r3, [r7, #4]
    8c0c:	2222      	movs	r2, #34	; 0x22
    8c0e:	701a      	strb	r2, [r3, #0]
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    8c10:	e016      	b.n	8c40 <nwkRxHandleReceivedFrame+0x174>
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    8c12:	4b0e      	ldr	r3, [pc, #56]	; (8c4c <nwkRxHandleReceivedFrame+0x180>)
    8c14:	881a      	ldrh	r2, [r3, #0]
    8c16:	68fb      	ldr	r3, [r7, #12]
    8c18:	7959      	ldrb	r1, [r3, #5]
    8c1a:	799b      	ldrb	r3, [r3, #6]
    8c1c:	021b      	lsls	r3, r3, #8
    8c1e:	430b      	orrs	r3, r1
    8c20:	b29b      	uxth	r3, r3
    8c22:	429a      	cmp	r2, r3
    8c24:	d10c      	bne.n	8c40 <nwkRxHandleReceivedFrame+0x174>
			frame->state = NWK_RX_STATE_ROUTE;
    8c26:	687b      	ldr	r3, [r7, #4]
    8c28:	2223      	movs	r2, #35	; 0x23
    8c2a:	701a      	strb	r2, [r3, #0]
    8c2c:	e008      	b.n	8c40 <nwkRxHandleReceivedFrame+0x174>
		return;
	}

#else
	if (header->nwkFcf.multicast) {
		return;
    8c2e:	46c0      	nop			; (mov r8, r8)
    8c30:	e006      	b.n	8c40 <nwkRxHandleReceivedFrame+0x174>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
		}

		return;
    8c32:	46c0      	nop			; (mov r8, r8)
    8c34:	e004      	b.n	8c40 <nwkRxHandleReceivedFrame+0x174>
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
			header->nwkFcf.ackRequest) {
		return;
    8c36:	46c0      	nop			; (mov r8, r8)
    8c38:	e002      	b.n	8c40 <nwkRxHandleReceivedFrame+0x174>
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
		return;
    8c3a:	46c0      	nop			; (mov r8, r8)
    8c3c:	e000      	b.n	8c40 <nwkRxHandleReceivedFrame+0x174>
#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
#endif

	if (nwkRxRejectDuplicate(header)) {
		return;
    8c3e:	46c0      	nop			; (mov r8, r8)
		else if (nwkIb.addr == header->macDstAddr) {
			frame->state = NWK_RX_STATE_ROUTE;
		}
  #endif
	}
}
    8c40:	46bd      	mov	sp, r7
    8c42:	b004      	add	sp, #16
    8c44:	bd80      	pop	{r7, pc}
    8c46:	46c0      	nop			; (mov r8, r8)
    8c48:	0000ffff 	.word	0x0000ffff
    8c4c:	20001024 	.word	0x20001024
    8c50:	00007861 	.word	0x00007861
    8c54:	000088c9 	.word	0x000088c9
    8c58:	00009671 	.word	0x00009671

00008c5c <nwkRxIndicateFrame>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
    8c5c:	b580      	push	{r7, lr}
    8c5e:	b088      	sub	sp, #32
    8c60:	af00      	add	r7, sp, #0
    8c62:	6078      	str	r0, [r7, #4]
	NwkFrameHeader_t *header = &frame->header;
    8c64:	687b      	ldr	r3, [r7, #4]
    8c66:	3302      	adds	r3, #2
    8c68:	61fb      	str	r3, [r7, #28]
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    8c6a:	69fb      	ldr	r3, [r7, #28]
    8c6c:	7bdb      	ldrb	r3, [r3, #15]
    8c6e:	061b      	lsls	r3, r3, #24
    8c70:	0f1b      	lsrs	r3, r3, #28
    8c72:	b2db      	uxtb	r3, r3
    8c74:	001a      	movs	r2, r3
    8c76:	4b79      	ldr	r3, [pc, #484]	; (8e5c <nwkRxIndicateFrame+0x200>)
    8c78:	3202      	adds	r2, #2
    8c7a:	0092      	lsls	r2, r2, #2
    8c7c:	58d3      	ldr	r3, [r2, r3]
    8c7e:	2b00      	cmp	r3, #0
    8c80:	d101      	bne.n	8c86 <nwkRxIndicateFrame+0x2a>
		return false;
    8c82:	2300      	movs	r3, #0
    8c84:	e0e5      	b.n	8e52 <nwkRxIndicateFrame+0x1f6>
	}

	ind.srcAddr = header->nwkSrcAddr;
    8c86:	69fb      	ldr	r3, [r7, #28]
    8c88:	7ada      	ldrb	r2, [r3, #11]
    8c8a:	7b1b      	ldrb	r3, [r3, #12]
    8c8c:	021b      	lsls	r3, r3, #8
    8c8e:	4313      	orrs	r3, r2
    8c90:	b29a      	uxth	r2, r3
    8c92:	230c      	movs	r3, #12
    8c94:	18fb      	adds	r3, r7, r3
    8c96:	801a      	strh	r2, [r3, #0]
	ind.dstAddr = header->nwkDstAddr;
    8c98:	69fb      	ldr	r3, [r7, #28]
    8c9a:	7b5a      	ldrb	r2, [r3, #13]
    8c9c:	7b9b      	ldrb	r3, [r3, #14]
    8c9e:	021b      	lsls	r3, r3, #8
    8ca0:	4313      	orrs	r3, r2
    8ca2:	b29a      	uxth	r2, r3
    8ca4:	230c      	movs	r3, #12
    8ca6:	18fb      	adds	r3, r7, r3
    8ca8:	805a      	strh	r2, [r3, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    8caa:	69fb      	ldr	r3, [r7, #28]
    8cac:	7bdb      	ldrb	r3, [r3, #15]
    8cae:	071b      	lsls	r3, r3, #28
    8cb0:	0f1b      	lsrs	r3, r3, #28
    8cb2:	b2db      	uxtb	r3, r3
    8cb4:	001a      	movs	r2, r3
    8cb6:	230c      	movs	r3, #12
    8cb8:	18fb      	adds	r3, r7, r3
    8cba:	711a      	strb	r2, [r3, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    8cbc:	69fb      	ldr	r3, [r7, #28]
    8cbe:	7bdb      	ldrb	r3, [r3, #15]
    8cc0:	061b      	lsls	r3, r3, #24
    8cc2:	0f1b      	lsrs	r3, r3, #28
    8cc4:	b2db      	uxtb	r3, r3
    8cc6:	001a      	movs	r2, r3
    8cc8:	230c      	movs	r3, #12
    8cca:	18fb      	adds	r3, r7, r3
    8ccc:	715a      	strb	r2, [r3, #5]
	ind.data = frame->payload;
    8cce:	687b      	ldr	r3, [r7, #4]
    8cd0:	2281      	movs	r2, #129	; 0x81
    8cd2:	5c9a      	ldrb	r2, [r3, r2]
    8cd4:	2182      	movs	r1, #130	; 0x82
    8cd6:	5c59      	ldrb	r1, [r3, r1]
    8cd8:	0209      	lsls	r1, r1, #8
    8cda:	430a      	orrs	r2, r1
    8cdc:	2183      	movs	r1, #131	; 0x83
    8cde:	5c59      	ldrb	r1, [r3, r1]
    8ce0:	0409      	lsls	r1, r1, #16
    8ce2:	430a      	orrs	r2, r1
    8ce4:	2184      	movs	r1, #132	; 0x84
    8ce6:	5c5b      	ldrb	r3, [r3, r1]
    8ce8:	061b      	lsls	r3, r3, #24
    8cea:	4313      	orrs	r3, r2
    8cec:	001a      	movs	r2, r3
    8cee:	230c      	movs	r3, #12
    8cf0:	18fb      	adds	r3, r7, r3
    8cf2:	609a      	str	r2, [r3, #8]
	ind.size = nwkFramePayloadSize(frame);
    8cf4:	687b      	ldr	r3, [r7, #4]
    8cf6:	0018      	movs	r0, r3
    8cf8:	4b59      	ldr	r3, [pc, #356]	; (8e60 <nwkRxIndicateFrame+0x204>)
    8cfa:	4798      	blx	r3
    8cfc:	0003      	movs	r3, r0
    8cfe:	001a      	movs	r2, r3
    8d00:	230c      	movs	r3, #12
    8d02:	18fb      	adds	r3, r7, r3
    8d04:	731a      	strb	r2, [r3, #12]
	ind.lqi = frame->rx.lqi;
    8d06:	687b      	ldr	r3, [r7, #4]
    8d08:	2285      	movs	r2, #133	; 0x85
    8d0a:	5c9a      	ldrb	r2, [r3, r2]
    8d0c:	230c      	movs	r3, #12
    8d0e:	18fb      	adds	r3, r7, r3
    8d10:	735a      	strb	r2, [r3, #13]
	ind.rssi = frame->rx.rssi;
    8d12:	687b      	ldr	r3, [r7, #4]
    8d14:	2286      	movs	r2, #134	; 0x86
    8d16:	569a      	ldrsb	r2, [r3, r2]
    8d18:	230c      	movs	r3, #12
    8d1a:	18fb      	adds	r3, r7, r3
    8d1c:	739a      	strb	r2, [r3, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    8d1e:	69fb      	ldr	r3, [r7, #28]
    8d20:	7a5b      	ldrb	r3, [r3, #9]
    8d22:	2201      	movs	r2, #1
    8d24:	4013      	ands	r3, r2
    8d26:	b2db      	uxtb	r3, r3
    8d28:	1e5a      	subs	r2, r3, #1
    8d2a:	4193      	sbcs	r3, r2
    8d2c:	b2db      	uxtb	r3, r3
    8d2e:	001a      	movs	r2, r3
    8d30:	230c      	movs	r3, #12
    8d32:	18fb      	adds	r3, r7, r3
    8d34:	719a      	strb	r2, [r3, #6]
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    8d36:	230c      	movs	r3, #12
    8d38:	18fb      	adds	r3, r7, r3
    8d3a:	799b      	ldrb	r3, [r3, #6]
    8d3c:	b25a      	sxtb	r2, r3
    8d3e:	69fb      	ldr	r3, [r7, #28]
    8d40:	7a5b      	ldrb	r3, [r3, #9]
    8d42:	b25b      	sxtb	r3, r3
    8d44:	2102      	movs	r1, #2
    8d46:	400b      	ands	r3, r1
    8d48:	b25b      	sxtb	r3, r3
    8d4a:	4313      	orrs	r3, r2
    8d4c:	b25b      	sxtb	r3, r3
    8d4e:	b2da      	uxtb	r2, r3
    8d50:	230c      	movs	r3, #12
    8d52:	18fb      	adds	r3, r7, r3
    8d54:	719a      	strb	r2, [r3, #6]
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    8d56:	230c      	movs	r3, #12
    8d58:	18fb      	adds	r3, r7, r3
    8d5a:	799b      	ldrb	r3, [r3, #6]
    8d5c:	b25a      	sxtb	r2, r3
    8d5e:	69fb      	ldr	r3, [r7, #28]
    8d60:	7a5b      	ldrb	r3, [r3, #9]
    8d62:	2104      	movs	r1, #4
    8d64:	400b      	ands	r3, r1
    8d66:	b2db      	uxtb	r3, r3
    8d68:	2b00      	cmp	r3, #0
    8d6a:	d001      	beq.n	8d70 <nwkRxIndicateFrame+0x114>
    8d6c:	2320      	movs	r3, #32
    8d6e:	e000      	b.n	8d72 <nwkRxIndicateFrame+0x116>
    8d70:	2300      	movs	r3, #0
    8d72:	4313      	orrs	r3, r2
    8d74:	b25b      	sxtb	r3, r3
    8d76:	b2da      	uxtb	r2, r3
    8d78:	230c      	movs	r3, #12
    8d7a:	18fb      	adds	r3, r7, r3
    8d7c:	719a      	strb	r2, [r3, #6]
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    8d7e:	230c      	movs	r3, #12
    8d80:	18fb      	adds	r3, r7, r3
    8d82:	799b      	ldrb	r3, [r3, #6]
    8d84:	b25a      	sxtb	r2, r3
    8d86:	69fb      	ldr	r3, [r7, #28]
    8d88:	7a5b      	ldrb	r3, [r3, #9]
    8d8a:	2108      	movs	r1, #8
    8d8c:	400b      	ands	r3, r1
    8d8e:	b2db      	uxtb	r3, r3
    8d90:	2b00      	cmp	r3, #0
    8d92:	d001      	beq.n	8d98 <nwkRxIndicateFrame+0x13c>
    8d94:	2340      	movs	r3, #64	; 0x40
    8d96:	e000      	b.n	8d9a <nwkRxIndicateFrame+0x13e>
    8d98:	2300      	movs	r3, #0
    8d9a:	4313      	orrs	r3, r2
    8d9c:	b25b      	sxtb	r3, r3
    8d9e:	b2da      	uxtb	r2, r3
    8da0:	230c      	movs	r3, #12
    8da2:	18fb      	adds	r3, r7, r3
    8da4:	719a      	strb	r2, [r3, #6]
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    8da6:	230c      	movs	r3, #12
    8da8:	18fb      	adds	r3, r7, r3
    8daa:	799b      	ldrb	r3, [r3, #6]
    8dac:	b25a      	sxtb	r2, r3
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    8dae:	69fb      	ldr	r3, [r7, #28]
    8db0:	7b59      	ldrb	r1, [r3, #13]
    8db2:	7b9b      	ldrb	r3, [r3, #14]
    8db4:	021b      	lsls	r3, r3, #8
    8db6:	430b      	orrs	r3, r1
    8db8:	b29b      	uxth	r3, r3
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    8dba:	492a      	ldr	r1, [pc, #168]	; (8e64 <nwkRxIndicateFrame+0x208>)
    8dbc:	428b      	cmp	r3, r1
    8dbe:	d101      	bne.n	8dc4 <nwkRxIndicateFrame+0x168>
    8dc0:	2304      	movs	r3, #4
    8dc2:	e000      	b.n	8dc6 <nwkRxIndicateFrame+0x16a>
    8dc4:	2300      	movs	r3, #0
    8dc6:	4313      	orrs	r3, r2
    8dc8:	b25b      	sxtb	r3, r3
    8dca:	b2da      	uxtb	r2, r3
    8dcc:	230c      	movs	r3, #12
    8dce:	18fb      	adds	r3, r7, r3
    8dd0:	719a      	strb	r2, [r3, #6]
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    8dd2:	230c      	movs	r3, #12
    8dd4:	18fb      	adds	r3, r7, r3
    8dd6:	799b      	ldrb	r3, [r3, #6]
    8dd8:	b25a      	sxtb	r2, r3
    8dda:	69fb      	ldr	r3, [r7, #28]
    8ddc:	7ad9      	ldrb	r1, [r3, #11]
    8dde:	7b1b      	ldrb	r3, [r3, #12]
    8de0:	021b      	lsls	r3, r3, #8
    8de2:	430b      	orrs	r3, r1
    8de4:	b299      	uxth	r1, r3
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    8de6:	69fb      	ldr	r3, [r7, #28]
    8de8:	79d8      	ldrb	r0, [r3, #7]
    8dea:	7a1b      	ldrb	r3, [r3, #8]
    8dec:	021b      	lsls	r3, r3, #8
    8dee:	4303      	orrs	r3, r0
    8df0:	b29b      	uxth	r3, r3
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    8df2:	4299      	cmp	r1, r3
    8df4:	d101      	bne.n	8dfa <nwkRxIndicateFrame+0x19e>
    8df6:	2308      	movs	r3, #8
    8df8:	e000      	b.n	8dfc <nwkRxIndicateFrame+0x1a0>
    8dfa:	2300      	movs	r3, #0
    8dfc:	4313      	orrs	r3, r2
    8dfe:	b25b      	sxtb	r3, r3
    8e00:	b2da      	uxtb	r2, r3
    8e02:	230c      	movs	r3, #12
    8e04:	18fb      	adds	r3, r7, r3
    8e06:	719a      	strb	r2, [r3, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    8e08:	230c      	movs	r3, #12
    8e0a:	18fb      	adds	r3, r7, r3
    8e0c:	799b      	ldrb	r3, [r3, #6]
    8e0e:	b25a      	sxtb	r2, r3
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    8e10:	69fb      	ldr	r3, [r7, #28]
    8e12:	78d9      	ldrb	r1, [r3, #3]
    8e14:	791b      	ldrb	r3, [r3, #4]
    8e16:	021b      	lsls	r3, r3, #8
    8e18:	430b      	orrs	r3, r1
    8e1a:	b29b      	uxth	r3, r3
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    8e1c:	4911      	ldr	r1, [pc, #68]	; (8e64 <nwkRxIndicateFrame+0x208>)
    8e1e:	428b      	cmp	r3, r1
    8e20:	d101      	bne.n	8e26 <nwkRxIndicateFrame+0x1ca>
    8e22:	2310      	movs	r3, #16
    8e24:	e000      	b.n	8e28 <nwkRxIndicateFrame+0x1cc>
    8e26:	2300      	movs	r3, #0
    8e28:	4313      	orrs	r3, r2
    8e2a:	b25b      	sxtb	r3, r3
    8e2c:	b2da      	uxtb	r2, r3
    8e2e:	230c      	movs	r3, #12
    8e30:	18fb      	adds	r3, r7, r3
    8e32:	719a      	strb	r2, [r3, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    8e34:	69fb      	ldr	r3, [r7, #28]
    8e36:	7bdb      	ldrb	r3, [r3, #15]
    8e38:	061b      	lsls	r3, r3, #24
    8e3a:	0f1b      	lsrs	r3, r3, #28
    8e3c:	b2db      	uxtb	r3, r3
    8e3e:	001a      	movs	r2, r3
    8e40:	4b06      	ldr	r3, [pc, #24]	; (8e5c <nwkRxIndicateFrame+0x200>)
    8e42:	3202      	adds	r2, #2
    8e44:	0092      	lsls	r2, r2, #2
    8e46:	58d3      	ldr	r3, [r2, r3]
    8e48:	220c      	movs	r2, #12
    8e4a:	18ba      	adds	r2, r7, r2
    8e4c:	0010      	movs	r0, r2
    8e4e:	4798      	blx	r3
    8e50:	0003      	movs	r3, r0
}
    8e52:	0018      	movs	r0, r3
    8e54:	46bd      	mov	sp, r7
    8e56:	b008      	add	sp, #32
    8e58:	bd80      	pop	{r7, pc}
    8e5a:	46c0      	nop			; (mov r8, r8)
    8e5c:	20001024 	.word	0x20001024
    8e60:	000085b9 	.word	0x000085b9
    8e64:	0000ffff 	.word	0x0000ffff

00008e68 <nwkRxHandleIndication>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
    8e68:	b590      	push	{r4, r7, lr}
    8e6a:	b085      	sub	sp, #20
    8e6c:	af00      	add	r7, sp, #0
    8e6e:	6078      	str	r0, [r7, #4]
	bool ack;

	nwkRxAckControl = 0;
    8e70:	4b2c      	ldr	r3, [pc, #176]	; (8f24 <nwkRxHandleIndication+0xbc>)
    8e72:	2200      	movs	r2, #0
    8e74:	701a      	strb	r2, [r3, #0]
	ack = nwkRxIndicateFrame(frame);
    8e76:	230f      	movs	r3, #15
    8e78:	18fc      	adds	r4, r7, r3
    8e7a:	687b      	ldr	r3, [r7, #4]
    8e7c:	0018      	movs	r0, r3
    8e7e:	4b2a      	ldr	r3, [pc, #168]	; (8f28 <nwkRxHandleIndication+0xc0>)
    8e80:	4798      	blx	r3
    8e82:	0003      	movs	r3, r0
    8e84:	7023      	strb	r3, [r4, #0]

	if (0 == frame->header.nwkFcf.ackRequest) {
    8e86:	687b      	ldr	r3, [r7, #4]
    8e88:	7adb      	ldrb	r3, [r3, #11]
    8e8a:	2201      	movs	r2, #1
    8e8c:	4013      	ands	r3, r2
    8e8e:	b2db      	uxtb	r3, r3
    8e90:	2b00      	cmp	r3, #0
    8e92:	d103      	bne.n	8e9c <nwkRxHandleIndication+0x34>
		ack = false;
    8e94:	230f      	movs	r3, #15
    8e96:	18fb      	adds	r3, r7, r3
    8e98:	2200      	movs	r2, #0
    8e9a:	701a      	strb	r2, [r3, #0]
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    8e9c:	687b      	ldr	r3, [r7, #4]
    8e9e:	79da      	ldrb	r2, [r3, #7]
    8ea0:	7a1b      	ldrb	r3, [r3, #8]
    8ea2:	021b      	lsls	r3, r3, #8
    8ea4:	4313      	orrs	r3, r2
    8ea6:	b29b      	uxth	r3, r3
    8ea8:	4a20      	ldr	r2, [pc, #128]	; (8f2c <nwkRxHandleIndication+0xc4>)
    8eaa:	4293      	cmp	r3, r2
    8eac:	d114      	bne.n	8ed8 <nwkRxHandleIndication+0x70>
			nwkIb.addr == frame->header.nwkDstAddr &&
    8eae:	4b20      	ldr	r3, [pc, #128]	; (8f30 <nwkRxHandleIndication+0xc8>)
    8eb0:	881a      	ldrh	r2, [r3, #0]
    8eb2:	687b      	ldr	r3, [r7, #4]
    8eb4:	7bd9      	ldrb	r1, [r3, #15]
    8eb6:	7c1b      	ldrb	r3, [r3, #16]
    8eb8:	021b      	lsls	r3, r3, #8
    8eba:	430b      	orrs	r3, r1
    8ebc:	b29b      	uxth	r3, r3

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    8ebe:	429a      	cmp	r2, r3
    8ec0:	d10a      	bne.n	8ed8 <nwkRxHandleIndication+0x70>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    8ec2:	687b      	ldr	r3, [r7, #4]
    8ec4:	7adb      	ldrb	r3, [r3, #11]
    8ec6:	2208      	movs	r2, #8
    8ec8:	4013      	ands	r3, r2
    8eca:	b2db      	uxtb	r3, r3
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    8ecc:	2b00      	cmp	r3, #0
    8ece:	d103      	bne.n	8ed8 <nwkRxHandleIndication+0x70>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    8ed0:	230f      	movs	r3, #15
    8ed2:	18fb      	adds	r3, r7, r3
    8ed4:	2201      	movs	r2, #1
    8ed6:	701a      	strb	r2, [r3, #0]
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    8ed8:	687b      	ldr	r3, [r7, #4]
    8eda:	795a      	ldrb	r2, [r3, #5]
    8edc:	799b      	ldrb	r3, [r3, #6]
    8ede:	021b      	lsls	r3, r3, #8
    8ee0:	4313      	orrs	r3, r2
    8ee2:	b29b      	uxth	r3, r3
    8ee4:	4a11      	ldr	r2, [pc, #68]	; (8f2c <nwkRxHandleIndication+0xc4>)
    8ee6:	4293      	cmp	r3, r2
    8ee8:	d103      	bne.n	8ef2 <nwkRxHandleIndication+0x8a>
		ack = false;
    8eea:	230f      	movs	r3, #15
    8eec:	18fb      	adds	r3, r7, r3
    8eee:	2200      	movs	r2, #0
    8ef0:	701a      	strb	r2, [r3, #0]
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    8ef2:	4b0f      	ldr	r3, [pc, #60]	; (8f30 <nwkRxHandleIndication+0xc8>)
    8ef4:	881b      	ldrh	r3, [r3, #0]
    8ef6:	4a0d      	ldr	r2, [pc, #52]	; (8f2c <nwkRxHandleIndication+0xc4>)
    8ef8:	4293      	cmp	r3, r2
    8efa:	d103      	bne.n	8f04 <nwkRxHandleIndication+0x9c>
		ack = false;
    8efc:	230f      	movs	r3, #15
    8efe:	18fb      	adds	r3, r7, r3
    8f00:	2200      	movs	r2, #0
    8f02:	701a      	strb	r2, [r3, #0]
	}

	if (ack) {
    8f04:	230f      	movs	r3, #15
    8f06:	18fb      	adds	r3, r7, r3
    8f08:	781b      	ldrb	r3, [r3, #0]
    8f0a:	2b00      	cmp	r3, #0
    8f0c:	d003      	beq.n	8f16 <nwkRxHandleIndication+0xae>
		nwkRxSendAck(frame);
    8f0e:	687b      	ldr	r3, [r7, #4]
    8f10:	0018      	movs	r0, r3
    8f12:	4b08      	ldr	r3, [pc, #32]	; (8f34 <nwkRxHandleIndication+0xcc>)
    8f14:	4798      	blx	r3
	}

	frame->state = NWK_RX_STATE_FINISH;
    8f16:	687b      	ldr	r3, [r7, #4]
    8f18:	2224      	movs	r2, #36	; 0x24
    8f1a:	701a      	strb	r2, [r3, #0]
}
    8f1c:	46c0      	nop			; (mov r8, r8)
    8f1e:	46bd      	mov	sp, r7
    8f20:	b005      	add	sp, #20
    8f22:	bd90      	pop	{r4, r7, pc}
    8f24:	20000ce0 	.word	0x20000ce0
    8f28:	00008c5d 	.word	0x00008c5d
    8f2c:	0000ffff 	.word	0x0000ffff
    8f30:	20001024 	.word	0x20001024
    8f34:	000086f5 	.word	0x000086f5

00008f38 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    8f38:	b580      	push	{r7, lr}
    8f3a:	b082      	sub	sp, #8
    8f3c:	af00      	add	r7, sp, #0
	NwkFrame_t *frame = NULL;
    8f3e:	2300      	movs	r3, #0
    8f40:	607b      	str	r3, [r7, #4]

	while (NULL != (frame = nwkFrameNext(frame))) {
    8f42:	e023      	b.n	8f8c <nwkRxTaskHandler+0x54>
		switch (frame->state) {
    8f44:	687b      	ldr	r3, [r7, #4]
    8f46:	781b      	ldrb	r3, [r3, #0]
    8f48:	3b20      	subs	r3, #32
    8f4a:	2b04      	cmp	r3, #4
    8f4c:	d81e      	bhi.n	8f8c <nwkRxTaskHandler+0x54>
    8f4e:	009a      	lsls	r2, r3, #2
    8f50:	4b15      	ldr	r3, [pc, #84]	; (8fa8 <nwkRxTaskHandler+0x70>)
    8f52:	18d3      	adds	r3, r2, r3
    8f54:	681b      	ldr	r3, [r3, #0]
    8f56:	469f      	mov	pc, r3
		case NWK_RX_STATE_RECEIVED:
		{
			nwkRxHandleReceivedFrame(frame);
    8f58:	687b      	ldr	r3, [r7, #4]
    8f5a:	0018      	movs	r0, r3
    8f5c:	4b13      	ldr	r3, [pc, #76]	; (8fac <nwkRxTaskHandler+0x74>)
    8f5e:	4798      	blx	r3
		}
		break;
    8f60:	e014      	b.n	8f8c <nwkRxTaskHandler+0x54>

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    8f62:	687b      	ldr	r3, [r7, #4]
    8f64:	2100      	movs	r1, #0
    8f66:	0018      	movs	r0, r3
    8f68:	4b11      	ldr	r3, [pc, #68]	; (8fb0 <nwkRxTaskHandler+0x78>)
    8f6a:	4798      	blx	r3
		}
		break;
    8f6c:	e00e      	b.n	8f8c <nwkRxTaskHandler+0x54>
#endif

		case NWK_RX_STATE_INDICATE:
		{
			nwkRxHandleIndication(frame);
    8f6e:	687b      	ldr	r3, [r7, #4]
    8f70:	0018      	movs	r0, r3
    8f72:	4b10      	ldr	r3, [pc, #64]	; (8fb4 <nwkRxTaskHandler+0x7c>)
    8f74:	4798      	blx	r3
		}
		break;
    8f76:	e009      	b.n	8f8c <nwkRxTaskHandler+0x54>

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    8f78:	687b      	ldr	r3, [r7, #4]
    8f7a:	0018      	movs	r0, r3
    8f7c:	4b0e      	ldr	r3, [pc, #56]	; (8fb8 <nwkRxTaskHandler+0x80>)
    8f7e:	4798      	blx	r3
		}
		break;
    8f80:	e004      	b.n	8f8c <nwkRxTaskHandler+0x54>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    8f82:	687b      	ldr	r3, [r7, #4]
    8f84:	0018      	movs	r0, r3
    8f86:	4b0d      	ldr	r3, [pc, #52]	; (8fbc <nwkRxTaskHandler+0x84>)
    8f88:	4798      	blx	r3
		}
		break;
    8f8a:	46c0      	nop			; (mov r8, r8)
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    8f8c:	687b      	ldr	r3, [r7, #4]
    8f8e:	0018      	movs	r0, r3
    8f90:	4b0b      	ldr	r3, [pc, #44]	; (8fc0 <nwkRxTaskHandler+0x88>)
    8f92:	4798      	blx	r3
    8f94:	0003      	movs	r3, r0
    8f96:	607b      	str	r3, [r7, #4]
    8f98:	687b      	ldr	r3, [r7, #4]
    8f9a:	2b00      	cmp	r3, #0
    8f9c:	d1d2      	bne.n	8f44 <nwkRxTaskHandler+0xc>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    8f9e:	46c0      	nop			; (mov r8, r8)
    8fa0:	46bd      	mov	sp, r7
    8fa2:	b002      	add	sp, #8
    8fa4:	bd80      	pop	{r7, pc}
    8fa6:	46c0      	nop			; (mov r8, r8)
    8fa8:	0000fab0 	.word	0x0000fab0
    8fac:	00008acd 	.word	0x00008acd
    8fb0:	00009049 	.word	0x00009049
    8fb4:	00008e69 	.word	0x00008e69
    8fb8:	00007a4d 	.word	0x00007a4d
    8fbc:	000074b5 	.word	0x000074b5
    8fc0:	000074e1 	.word	0x000074e1

00008fc4 <nwkFramePayloadSize>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
    8fc4:	b580      	push	{r7, lr}
    8fc6:	b082      	sub	sp, #8
    8fc8:	af00      	add	r7, sp, #0
    8fca:	6078      	str	r0, [r7, #4]
	return frame->size - (frame->payload - frame->data);
    8fcc:	687b      	ldr	r3, [r7, #4]
    8fce:	785a      	ldrb	r2, [r3, #1]
    8fd0:	687b      	ldr	r3, [r7, #4]
    8fd2:	2181      	movs	r1, #129	; 0x81
    8fd4:	5c59      	ldrb	r1, [r3, r1]
    8fd6:	2082      	movs	r0, #130	; 0x82
    8fd8:	5c18      	ldrb	r0, [r3, r0]
    8fda:	0200      	lsls	r0, r0, #8
    8fdc:	4301      	orrs	r1, r0
    8fde:	2083      	movs	r0, #131	; 0x83
    8fe0:	5c18      	ldrb	r0, [r3, r0]
    8fe2:	0400      	lsls	r0, r0, #16
    8fe4:	4301      	orrs	r1, r0
    8fe6:	2084      	movs	r0, #132	; 0x84
    8fe8:	5c1b      	ldrb	r3, [r3, r0]
    8fea:	061b      	lsls	r3, r3, #24
    8fec:	430b      	orrs	r3, r1
    8fee:	0019      	movs	r1, r3
    8ff0:	687b      	ldr	r3, [r7, #4]
    8ff2:	3302      	adds	r3, #2
    8ff4:	1acb      	subs	r3, r1, r3
    8ff6:	b2db      	uxtb	r3, r3
    8ff8:	1ad3      	subs	r3, r2, r3
    8ffa:	b2db      	uxtb	r3, r3
}
    8ffc:	0018      	movs	r0, r3
    8ffe:	46bd      	mov	sp, r7
    9000:	b002      	add	sp, #8
    9002:	bd80      	pop	{r7, pc}

00009004 <nwkSecurityInit>:

/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
    9004:	b580      	push	{r7, lr}
    9006:	af00      	add	r7, sp, #0
	nwkSecurityActiveFrames = 0;
    9008:	4b04      	ldr	r3, [pc, #16]	; (901c <nwkSecurityInit+0x18>)
    900a:	2200      	movs	r2, #0
    900c:	701a      	strb	r2, [r3, #0]
	nwkSecurityActiveFrame = NULL;
    900e:	4b04      	ldr	r3, [pc, #16]	; (9020 <nwkSecurityInit+0x1c>)
    9010:	2200      	movs	r2, #0
    9012:	601a      	str	r2, [r3, #0]
}
    9014:	46c0      	nop			; (mov r8, r8)
    9016:	46bd      	mov	sp, r7
    9018:	bd80      	pop	{r7, pc}
    901a:	46c0      	nop			; (mov r8, r8)
    901c:	20000cf8 	.word	0x20000cf8
    9020:	20000cfc 	.word	0x20000cfc

00009024 <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    9024:	b580      	push	{r7, lr}
    9026:	b082      	sub	sp, #8
    9028:	af00      	add	r7, sp, #0
    902a:	6078      	str	r0, [r7, #4]
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    902c:	6879      	ldr	r1, [r7, #4]
    902e:	4b04      	ldr	r3, [pc, #16]	; (9040 <NWK_SetSecurityKey+0x1c>)
    9030:	2210      	movs	r2, #16
    9032:	0018      	movs	r0, r3
    9034:	4b03      	ldr	r3, [pc, #12]	; (9044 <NWK_SetSecurityKey+0x20>)
    9036:	4798      	blx	r3
}
    9038:	46c0      	nop			; (mov r8, r8)
    903a:	46bd      	mov	sp, r7
    903c:	b002      	add	sp, #8
    903e:	bd80      	pop	{r7, pc}
    9040:	2000106c 	.word	0x2000106c
    9044:	0000e9ad 	.word	0x0000e9ad

00009048 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
    9048:	b580      	push	{r7, lr}
    904a:	b082      	sub	sp, #8
    904c:	af00      	add	r7, sp, #0
    904e:	6078      	str	r0, [r7, #4]
    9050:	000a      	movs	r2, r1
    9052:	1cfb      	adds	r3, r7, #3
    9054:	701a      	strb	r2, [r3, #0]
	if (encrypt) {
    9056:	1cfb      	adds	r3, r7, #3
    9058:	781b      	ldrb	r3, [r3, #0]
    905a:	2b00      	cmp	r3, #0
    905c:	d003      	beq.n	9066 <nwkSecurityProcess+0x1e>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    905e:	687b      	ldr	r3, [r7, #4]
    9060:	2230      	movs	r2, #48	; 0x30
    9062:	701a      	strb	r2, [r3, #0]
    9064:	e002      	b.n	906c <nwkSecurityProcess+0x24>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    9066:	687b      	ldr	r3, [r7, #4]
    9068:	2231      	movs	r2, #49	; 0x31
    906a:	701a      	strb	r2, [r3, #0]
	}

	++nwkSecurityActiveFrames;
    906c:	4b04      	ldr	r3, [pc, #16]	; (9080 <nwkSecurityProcess+0x38>)
    906e:	781b      	ldrb	r3, [r3, #0]
    9070:	3301      	adds	r3, #1
    9072:	b2da      	uxtb	r2, r3
    9074:	4b02      	ldr	r3, [pc, #8]	; (9080 <nwkSecurityProcess+0x38>)
    9076:	701a      	strb	r2, [r3, #0]
}
    9078:	46c0      	nop			; (mov r8, r8)
    907a:	46bd      	mov	sp, r7
    907c:	b002      	add	sp, #8
    907e:	bd80      	pop	{r7, pc}
    9080:	20000cf8 	.word	0x20000cf8

00009084 <nwkSecurityStart>:

/*************************************************************************//**
*****************************************************************************/
static void nwkSecurityStart(void)
{
    9084:	b580      	push	{r7, lr}
    9086:	b082      	sub	sp, #8
    9088:	af00      	add	r7, sp, #0
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;
    908a:	4b2f      	ldr	r3, [pc, #188]	; (9148 <nwkSecurityStart+0xc4>)
    908c:	681b      	ldr	r3, [r3, #0]
    908e:	3302      	adds	r3, #2
    9090:	607b      	str	r3, [r7, #4]

	nwkSecurityVector[0] = header->nwkSeq;
    9092:	687b      	ldr	r3, [r7, #4]
    9094:	7a9b      	ldrb	r3, [r3, #10]
    9096:	001a      	movs	r2, r3
    9098:	4b2c      	ldr	r3, [pc, #176]	; (914c <nwkSecurityStart+0xc8>)
    909a:	601a      	str	r2, [r3, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    909c:	687b      	ldr	r3, [r7, #4]
    909e:	7b5a      	ldrb	r2, [r3, #13]
    90a0:	7b9b      	ldrb	r3, [r3, #14]
    90a2:	021b      	lsls	r3, r3, #8
    90a4:	4313      	orrs	r3, r2
    90a6:	b29b      	uxth	r3, r3
    90a8:	041b      	lsls	r3, r3, #16
			16) | header->nwkDstEndpoint;
    90aa:	687a      	ldr	r2, [r7, #4]
    90ac:	7bd2      	ldrb	r2, [r2, #15]
    90ae:	0612      	lsls	r2, r2, #24
    90b0:	0f12      	lsrs	r2, r2, #28
    90b2:	b2d2      	uxtb	r2, r2
    90b4:	431a      	orrs	r2, r3
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    90b6:	4b25      	ldr	r3, [pc, #148]	; (914c <nwkSecurityStart+0xc8>)
    90b8:	605a      	str	r2, [r3, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    90ba:	687b      	ldr	r3, [r7, #4]
    90bc:	7ada      	ldrb	r2, [r3, #11]
    90be:	7b1b      	ldrb	r3, [r3, #12]
    90c0:	021b      	lsls	r3, r3, #8
    90c2:	4313      	orrs	r3, r2
    90c4:	b29b      	uxth	r3, r3
    90c6:	041b      	lsls	r3, r3, #16
			16) | header->nwkSrcEndpoint;
    90c8:	687a      	ldr	r2, [r7, #4]
    90ca:	7bd2      	ldrb	r2, [r2, #15]
    90cc:	0712      	lsls	r2, r2, #28
    90ce:	0f12      	lsrs	r2, r2, #28
    90d0:	b2d2      	uxtb	r2, r2
    90d2:	431a      	orrs	r2, r3
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    90d4:	4b1d      	ldr	r3, [pc, #116]	; (914c <nwkSecurityStart+0xc8>)
    90d6:	609a      	str	r2, [r3, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    90d8:	687b      	ldr	r3, [r7, #4]
    90da:	78da      	ldrb	r2, [r3, #3]
    90dc:	791b      	ldrb	r3, [r3, #4]
    90de:	021b      	lsls	r3, r3, #8
    90e0:	4313      	orrs	r3, r2
    90e2:	b29b      	uxth	r3, r3
    90e4:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    90e6:	687a      	ldr	r2, [r7, #4]
    90e8:	3209      	adds	r2, #9
    90ea:	7812      	ldrb	r2, [r2, #0]
    90ec:	431a      	orrs	r2, r3
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    90ee:	4b17      	ldr	r3, [pc, #92]	; (914c <nwkSecurityStart+0xc8>)
    90f0:	60da      	str	r2, [r3, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
			nwkSecurityActiveFrame->state) {
    90f2:	4b15      	ldr	r3, [pc, #84]	; (9148 <nwkSecurityStart+0xc4>)
    90f4:	681b      	ldr	r3, [r3, #0]
    90f6:	781b      	ldrb	r3, [r3, #0]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    90f8:	2b31      	cmp	r3, #49	; 0x31
    90fa:	d107      	bne.n	910c <nwkSecurityStart+0x88>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    90fc:	4b12      	ldr	r3, [pc, #72]	; (9148 <nwkSecurityStart+0xc4>)
    90fe:	681a      	ldr	r2, [r3, #0]
    9100:	4b11      	ldr	r3, [pc, #68]	; (9148 <nwkSecurityStart+0xc4>)
    9102:	681b      	ldr	r3, [r3, #0]
    9104:	785b      	ldrb	r3, [r3, #1]
    9106:	3b04      	subs	r3, #4
    9108:	b2db      	uxtb	r3, r3
    910a:	7053      	strb	r3, [r2, #1]
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    910c:	4b0e      	ldr	r3, [pc, #56]	; (9148 <nwkSecurityStart+0xc4>)
    910e:	681b      	ldr	r3, [r3, #0]
    9110:	0018      	movs	r0, r3
    9112:	4b0f      	ldr	r3, [pc, #60]	; (9150 <nwkSecurityStart+0xcc>)
    9114:	4798      	blx	r3
    9116:	0003      	movs	r3, r0
    9118:	001a      	movs	r2, r3
    911a:	4b0e      	ldr	r3, [pc, #56]	; (9154 <nwkSecurityStart+0xd0>)
    911c:	701a      	strb	r2, [r3, #0]
	nwkSecurityOffset = 0;
    911e:	4b0e      	ldr	r3, [pc, #56]	; (9158 <nwkSecurityStart+0xd4>)
    9120:	2200      	movs	r2, #0
    9122:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
			nwkSecurityActiveFrame->state);
    9124:	4b08      	ldr	r3, [pc, #32]	; (9148 <nwkSecurityStart+0xc4>)
    9126:	681b      	ldr	r3, [r3, #0]
    9128:	781b      	ldrb	r3, [r3, #0]
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
	nwkSecurityOffset = 0;
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    912a:	3b30      	subs	r3, #48	; 0x30
    912c:	425a      	negs	r2, r3
    912e:	4153      	adcs	r3, r2
    9130:	b2da      	uxtb	r2, r3
    9132:	4b0a      	ldr	r3, [pc, #40]	; (915c <nwkSecurityStart+0xd8>)
    9134:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    9136:	4b04      	ldr	r3, [pc, #16]	; (9148 <nwkSecurityStart+0xc4>)
    9138:	681b      	ldr	r3, [r3, #0]
    913a:	2232      	movs	r2, #50	; 0x32
    913c:	701a      	strb	r2, [r3, #0]
}
    913e:	46c0      	nop			; (mov r8, r8)
    9140:	46bd      	mov	sp, r7
    9142:	b002      	add	sp, #8
    9144:	bd80      	pop	{r7, pc}
    9146:	46c0      	nop			; (mov r8, r8)
    9148:	20000cfc 	.word	0x20000cfc
    914c:	20000d04 	.word	0x20000d04
    9150:	00008fc5 	.word	0x00008fc5
    9154:	20000d00 	.word	0x20000d00
    9158:	20000d01 	.word	0x20000d01
    915c:	20000d02 	.word	0x20000d02

00009160 <SYS_EncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    9160:	b580      	push	{r7, lr}
    9162:	b084      	sub	sp, #16
    9164:	af00      	add	r7, sp, #0
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
    9166:	4b46      	ldr	r3, [pc, #280]	; (9280 <SYS_EncryptConf+0x120>)
    9168:	60bb      	str	r3, [r7, #8]
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    916a:	4b46      	ldr	r3, [pc, #280]	; (9284 <SYS_EncryptConf+0x124>)
    916c:	681b      	ldr	r3, [r3, #0]
    916e:	2281      	movs	r2, #129	; 0x81
    9170:	5c9a      	ldrb	r2, [r3, r2]
    9172:	2182      	movs	r1, #130	; 0x82
    9174:	5c59      	ldrb	r1, [r3, r1]
    9176:	0209      	lsls	r1, r1, #8
    9178:	430a      	orrs	r2, r1
    917a:	2183      	movs	r1, #131	; 0x83
    917c:	5c59      	ldrb	r1, [r3, r1]
    917e:	0409      	lsls	r1, r1, #16
    9180:	430a      	orrs	r2, r1
    9182:	2184      	movs	r1, #132	; 0x84
    9184:	5c5b      	ldrb	r3, [r3, r1]
    9186:	061b      	lsls	r3, r3, #24
    9188:	4313      	orrs	r3, r2
    918a:	001a      	movs	r2, r3
    918c:	4b3e      	ldr	r3, [pc, #248]	; (9288 <SYS_EncryptConf+0x128>)
    918e:	781b      	ldrb	r3, [r3, #0]
    9190:	18d3      	adds	r3, r2, r3
    9192:	607b      	str	r3, [r7, #4]
	uint8_t block;

	block
		= (nwkSecuritySize <
    9194:	4b3d      	ldr	r3, [pc, #244]	; (928c <SYS_EncryptConf+0x12c>)
    9196:	781b      	ldrb	r3, [r3, #0]
    9198:	1cfa      	adds	r2, r7, #3
    919a:	b2d9      	uxtb	r1, r3
    919c:	2910      	cmp	r1, #16
    919e:	d900      	bls.n	91a2 <SYS_EncryptConf+0x42>
    91a0:	2310      	movs	r3, #16
    91a2:	7013      	strb	r3, [r2, #0]
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    91a4:	230f      	movs	r3, #15
    91a6:	18fb      	adds	r3, r7, r3
    91a8:	2200      	movs	r2, #0
    91aa:	701a      	strb	r2, [r3, #0]
    91ac:	e03f      	b.n	922e <SYS_EncryptConf+0xce>
		text[i] ^= vector[i];
    91ae:	230f      	movs	r3, #15
    91b0:	18fb      	adds	r3, r7, r3
    91b2:	781b      	ldrb	r3, [r3, #0]
    91b4:	687a      	ldr	r2, [r7, #4]
    91b6:	18d3      	adds	r3, r2, r3
    91b8:	220f      	movs	r2, #15
    91ba:	18ba      	adds	r2, r7, r2
    91bc:	7812      	ldrb	r2, [r2, #0]
    91be:	6879      	ldr	r1, [r7, #4]
    91c0:	188a      	adds	r2, r1, r2
    91c2:	7811      	ldrb	r1, [r2, #0]
    91c4:	220f      	movs	r2, #15
    91c6:	18ba      	adds	r2, r7, r2
    91c8:	7812      	ldrb	r2, [r2, #0]
    91ca:	68b8      	ldr	r0, [r7, #8]
    91cc:	1882      	adds	r2, r0, r2
    91ce:	7812      	ldrb	r2, [r2, #0]
    91d0:	404a      	eors	r2, r1
    91d2:	b2d2      	uxtb	r2, r2
    91d4:	701a      	strb	r2, [r3, #0]

		if (nwkSecurityEncrypt) {
    91d6:	4b2e      	ldr	r3, [pc, #184]	; (9290 <SYS_EncryptConf+0x130>)
    91d8:	781b      	ldrb	r3, [r3, #0]
    91da:	2b00      	cmp	r3, #0
    91dc:	d00c      	beq.n	91f8 <SYS_EncryptConf+0x98>
			vector[i] = text[i];
    91de:	230f      	movs	r3, #15
    91e0:	18fb      	adds	r3, r7, r3
    91e2:	781b      	ldrb	r3, [r3, #0]
    91e4:	68ba      	ldr	r2, [r7, #8]
    91e6:	18d3      	adds	r3, r2, r3
    91e8:	220f      	movs	r2, #15
    91ea:	18ba      	adds	r2, r7, r2
    91ec:	7812      	ldrb	r2, [r2, #0]
    91ee:	6879      	ldr	r1, [r7, #4]
    91f0:	188a      	adds	r2, r1, r2
    91f2:	7812      	ldrb	r2, [r2, #0]
    91f4:	701a      	strb	r2, [r3, #0]
    91f6:	e013      	b.n	9220 <SYS_EncryptConf+0xc0>
		} else {
			vector[i] ^= text[i];
    91f8:	230f      	movs	r3, #15
    91fa:	18fb      	adds	r3, r7, r3
    91fc:	781b      	ldrb	r3, [r3, #0]
    91fe:	68ba      	ldr	r2, [r7, #8]
    9200:	18d3      	adds	r3, r2, r3
    9202:	220f      	movs	r2, #15
    9204:	18ba      	adds	r2, r7, r2
    9206:	7812      	ldrb	r2, [r2, #0]
    9208:	68b9      	ldr	r1, [r7, #8]
    920a:	188a      	adds	r2, r1, r2
    920c:	7811      	ldrb	r1, [r2, #0]
    920e:	220f      	movs	r2, #15
    9210:	18ba      	adds	r2, r7, r2
    9212:	7812      	ldrb	r2, [r2, #0]
    9214:	6878      	ldr	r0, [r7, #4]
    9216:	1882      	adds	r2, r0, r2
    9218:	7812      	ldrb	r2, [r2, #0]
    921a:	404a      	eors	r2, r1
    921c:	b2d2      	uxtb	r2, r2
    921e:	701a      	strb	r2, [r3, #0]
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    9220:	230f      	movs	r3, #15
    9222:	18fb      	adds	r3, r7, r3
    9224:	781a      	ldrb	r2, [r3, #0]
    9226:	230f      	movs	r3, #15
    9228:	18fb      	adds	r3, r7, r3
    922a:	3201      	adds	r2, #1
    922c:	701a      	strb	r2, [r3, #0]
    922e:	230f      	movs	r3, #15
    9230:	18fa      	adds	r2, r7, r3
    9232:	1cfb      	adds	r3, r7, #3
    9234:	7812      	ldrb	r2, [r2, #0]
    9236:	781b      	ldrb	r3, [r3, #0]
    9238:	429a      	cmp	r2, r3
    923a:	d3b8      	bcc.n	91ae <SYS_EncryptConf+0x4e>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    923c:	4b12      	ldr	r3, [pc, #72]	; (9288 <SYS_EncryptConf+0x128>)
    923e:	781a      	ldrb	r2, [r3, #0]
    9240:	1cfb      	adds	r3, r7, #3
    9242:	781b      	ldrb	r3, [r3, #0]
    9244:	18d3      	adds	r3, r2, r3
    9246:	b2da      	uxtb	r2, r3
    9248:	4b0f      	ldr	r3, [pc, #60]	; (9288 <SYS_EncryptConf+0x128>)
    924a:	701a      	strb	r2, [r3, #0]
	nwkSecuritySize -= block;
    924c:	4b0f      	ldr	r3, [pc, #60]	; (928c <SYS_EncryptConf+0x12c>)
    924e:	781a      	ldrb	r2, [r3, #0]
    9250:	1cfb      	adds	r3, r7, #3
    9252:	781b      	ldrb	r3, [r3, #0]
    9254:	1ad3      	subs	r3, r2, r3
    9256:	b2da      	uxtb	r2, r3
    9258:	4b0c      	ldr	r3, [pc, #48]	; (928c <SYS_EncryptConf+0x12c>)
    925a:	701a      	strb	r2, [r3, #0]

	if (nwkSecuritySize > 0) {
    925c:	4b0b      	ldr	r3, [pc, #44]	; (928c <SYS_EncryptConf+0x12c>)
    925e:	781b      	ldrb	r3, [r3, #0]
    9260:	2b00      	cmp	r3, #0
    9262:	d004      	beq.n	926e <SYS_EncryptConf+0x10e>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    9264:	4b07      	ldr	r3, [pc, #28]	; (9284 <SYS_EncryptConf+0x124>)
    9266:	681b      	ldr	r3, [r3, #0]
    9268:	2232      	movs	r2, #50	; 0x32
    926a:	701a      	strb	r2, [r3, #0]
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
	}
}
    926c:	e003      	b.n	9276 <SYS_EncryptConf+0x116>
	nwkSecuritySize -= block;

	if (nwkSecuritySize > 0) {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    926e:	4b05      	ldr	r3, [pc, #20]	; (9284 <SYS_EncryptConf+0x124>)
    9270:	681b      	ldr	r3, [r3, #0]
    9272:	2234      	movs	r2, #52	; 0x34
    9274:	701a      	strb	r2, [r3, #0]
	}
}
    9276:	46c0      	nop			; (mov r8, r8)
    9278:	46bd      	mov	sp, r7
    927a:	b004      	add	sp, #16
    927c:	bd80      	pop	{r7, pc}
    927e:	46c0      	nop			; (mov r8, r8)
    9280:	20000d04 	.word	0x20000d04
    9284:	20000cfc 	.word	0x20000cfc
    9288:	20000d01 	.word	0x20000d01
    928c:	20000d00 	.word	0x20000d00
    9290:	20000d02 	.word	0x20000d02

00009294 <nwkSecurityProcessMic>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
    9294:	b580      	push	{r7, lr}
    9296:	b084      	sub	sp, #16
    9298:	af00      	add	r7, sp, #0
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    929a:	4b23      	ldr	r3, [pc, #140]	; (9328 <nwkSecurityProcessMic+0x94>)
    929c:	681b      	ldr	r3, [r3, #0]
    929e:	2281      	movs	r2, #129	; 0x81
    92a0:	5c9a      	ldrb	r2, [r3, r2]
    92a2:	2182      	movs	r1, #130	; 0x82
    92a4:	5c59      	ldrb	r1, [r3, r1]
    92a6:	0209      	lsls	r1, r1, #8
    92a8:	430a      	orrs	r2, r1
    92aa:	2183      	movs	r1, #131	; 0x83
    92ac:	5c59      	ldrb	r1, [r3, r1]
    92ae:	0409      	lsls	r1, r1, #16
    92b0:	430a      	orrs	r2, r1
    92b2:	2184      	movs	r1, #132	; 0x84
    92b4:	5c5b      	ldrb	r3, [r3, r1]
    92b6:	061b      	lsls	r3, r3, #24
    92b8:	4313      	orrs	r3, r2
    92ba:	001a      	movs	r2, r3
    92bc:	4b1b      	ldr	r3, [pc, #108]	; (932c <nwkSecurityProcessMic+0x98>)
    92be:	781b      	ldrb	r3, [r3, #0]
    92c0:	18d3      	adds	r3, r2, r3
    92c2:	60fb      	str	r3, [r7, #12]
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    92c4:	4b1a      	ldr	r3, [pc, #104]	; (9330 <nwkSecurityProcessMic+0x9c>)
    92c6:	681a      	ldr	r2, [r3, #0]
    92c8:	4b19      	ldr	r3, [pc, #100]	; (9330 <nwkSecurityProcessMic+0x9c>)
    92ca:	685b      	ldr	r3, [r3, #4]
    92cc:	405a      	eors	r2, r3
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    92ce:	4b18      	ldr	r3, [pc, #96]	; (9330 <nwkSecurityProcessMic+0x9c>)
    92d0:	689b      	ldr	r3, [r3, #8]
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    92d2:	405a      	eors	r2, r3
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    92d4:	4b16      	ldr	r3, [pc, #88]	; (9330 <nwkSecurityProcessMic+0x9c>)
    92d6:	68db      	ldr	r3, [r3, #12]
    92d8:	4053      	eors	r3, r2
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    92da:	60bb      	str	r3, [r7, #8]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    92dc:	4b15      	ldr	r3, [pc, #84]	; (9334 <nwkSecurityProcessMic+0xa0>)
    92de:	781b      	ldrb	r3, [r3, #0]
    92e0:	2b00      	cmp	r3, #0
    92e2:	d010      	beq.n	9306 <nwkSecurityProcessMic+0x72>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    92e4:	2308      	movs	r3, #8
    92e6:	18f9      	adds	r1, r7, r3
    92e8:	68fb      	ldr	r3, [r7, #12]
    92ea:	2204      	movs	r2, #4
    92ec:	0018      	movs	r0, r3
    92ee:	4b12      	ldr	r3, [pc, #72]	; (9338 <nwkSecurityProcessMic+0xa4>)
    92f0:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    92f2:	4b0d      	ldr	r3, [pc, #52]	; (9328 <nwkSecurityProcessMic+0x94>)
    92f4:	681a      	ldr	r2, [r3, #0]
    92f6:	4b0c      	ldr	r3, [pc, #48]	; (9328 <nwkSecurityProcessMic+0x94>)
    92f8:	681b      	ldr	r3, [r3, #0]
    92fa:	785b      	ldrb	r3, [r3, #1]
    92fc:	3304      	adds	r3, #4
    92fe:	b2db      	uxtb	r3, r3
    9300:	7053      	strb	r3, [r2, #1]
		return true;
    9302:	2301      	movs	r3, #1
    9304:	e00b      	b.n	931e <nwkSecurityProcessMic+0x8a>
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    9306:	68f9      	ldr	r1, [r7, #12]
    9308:	1d3b      	adds	r3, r7, #4
    930a:	2204      	movs	r2, #4
    930c:	0018      	movs	r0, r3
    930e:	4b0a      	ldr	r3, [pc, #40]	; (9338 <nwkSecurityProcessMic+0xa4>)
    9310:	4798      	blx	r3
		return vmic == tmic;
    9312:	68ba      	ldr	r2, [r7, #8]
    9314:	687b      	ldr	r3, [r7, #4]
    9316:	1ad3      	subs	r3, r2, r3
    9318:	425a      	negs	r2, r3
    931a:	4153      	adcs	r3, r2
    931c:	b2db      	uxtb	r3, r3
	}
}
    931e:	0018      	movs	r0, r3
    9320:	46bd      	mov	sp, r7
    9322:	b004      	add	sp, #16
    9324:	bd80      	pop	{r7, pc}
    9326:	46c0      	nop			; (mov r8, r8)
    9328:	20000cfc 	.word	0x20000cfc
    932c:	20000d01 	.word	0x20000d01
    9330:	20000d04 	.word	0x20000d04
    9334:	20000d02 	.word	0x20000d02
    9338:	0000e9ad 	.word	0x0000e9ad

0000933c <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    933c:	b590      	push	{r4, r7, lr}
    933e:	b083      	sub	sp, #12
    9340:	af00      	add	r7, sp, #0
	NwkFrame_t *frame = NULL;
    9342:	2300      	movs	r3, #0
    9344:	607b      	str	r3, [r7, #4]

	if (0 == nwkSecurityActiveFrames) {
    9346:	4b2e      	ldr	r3, [pc, #184]	; (9400 <nwkSecurityTaskHandler+0xc4>)
    9348:	781b      	ldrb	r3, [r3, #0]
    934a:	2b00      	cmp	r3, #0
    934c:	d051      	beq.n	93f2 <nwkSecurityTaskHandler+0xb6>
		return;
	}

	if (nwkSecurityActiveFrame) {
    934e:	4b2d      	ldr	r3, [pc, #180]	; (9404 <nwkSecurityTaskHandler+0xc8>)
    9350:	681b      	ldr	r3, [r3, #0]
    9352:	2b00      	cmp	r3, #0
    9354:	d043      	beq.n	93de <nwkSecurityTaskHandler+0xa2>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    9356:	4b2b      	ldr	r3, [pc, #172]	; (9404 <nwkSecurityTaskHandler+0xc8>)
    9358:	681b      	ldr	r3, [r3, #0]
    935a:	781b      	ldrb	r3, [r3, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    935c:	2b34      	cmp	r3, #52	; 0x34
    935e:	d120      	bne.n	93a2 <nwkSecurityTaskHandler+0x66>
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();
    9360:	1cfc      	adds	r4, r7, #3
    9362:	4b29      	ldr	r3, [pc, #164]	; (9408 <nwkSecurityTaskHandler+0xcc>)
    9364:	4798      	blx	r3
    9366:	0003      	movs	r3, r0
    9368:	7023      	strb	r3, [r4, #0]

			if (nwkSecurityEncrypt) {
    936a:	4b28      	ldr	r3, [pc, #160]	; (940c <nwkSecurityTaskHandler+0xd0>)
    936c:	781b      	ldrb	r3, [r3, #0]
    936e:	2b00      	cmp	r3, #0
    9370:	d005      	beq.n	937e <nwkSecurityTaskHandler+0x42>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    9372:	4b24      	ldr	r3, [pc, #144]	; (9404 <nwkSecurityTaskHandler+0xc8>)
    9374:	681b      	ldr	r3, [r3, #0]
    9376:	0018      	movs	r0, r3
    9378:	4b25      	ldr	r3, [pc, #148]	; (9410 <nwkSecurityTaskHandler+0xd4>)
    937a:	4798      	blx	r3
    937c:	e007      	b.n	938e <nwkSecurityTaskHandler+0x52>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    937e:	4b21      	ldr	r3, [pc, #132]	; (9404 <nwkSecurityTaskHandler+0xc8>)
    9380:	681a      	ldr	r2, [r3, #0]
    9382:	1cfb      	adds	r3, r7, #3
    9384:	781b      	ldrb	r3, [r3, #0]
    9386:	0019      	movs	r1, r3
    9388:	0010      	movs	r0, r2
    938a:	4b22      	ldr	r3, [pc, #136]	; (9414 <nwkSecurityTaskHandler+0xd8>)
    938c:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    938e:	4b1d      	ldr	r3, [pc, #116]	; (9404 <nwkSecurityTaskHandler+0xc8>)
    9390:	2200      	movs	r2, #0
    9392:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    9394:	4b1a      	ldr	r3, [pc, #104]	; (9400 <nwkSecurityTaskHandler+0xc4>)
    9396:	781b      	ldrb	r3, [r3, #0]
    9398:	3b01      	subs	r3, #1
    939a:	b2da      	uxtb	r2, r3
    939c:	4b18      	ldr	r3, [pc, #96]	; (9400 <nwkSecurityTaskHandler+0xc4>)
    939e:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
					(uint32_t *)nwkIb.key);
		}

		return;
    93a0:	e029      	b.n	93f6 <nwkSecurityTaskHandler+0xba>
			}

			nwkSecurityActiveFrame = NULL;
			--nwkSecurityActiveFrames;
		} else if (NWK_SECURITY_STATE_PROCESS ==
				nwkSecurityActiveFrame->state) {
    93a2:	4b18      	ldr	r3, [pc, #96]	; (9404 <nwkSecurityTaskHandler+0xc8>)
    93a4:	681b      	ldr	r3, [r3, #0]
    93a6:	781b      	ldrb	r3, [r3, #0]
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
			--nwkSecurityActiveFrames;
		} else if (NWK_SECURITY_STATE_PROCESS ==
    93a8:	2b32      	cmp	r3, #50	; 0x32
    93aa:	d124      	bne.n	93f6 <nwkSecurityTaskHandler+0xba>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    93ac:	4b15      	ldr	r3, [pc, #84]	; (9404 <nwkSecurityTaskHandler+0xc8>)
    93ae:	681b      	ldr	r3, [r3, #0]
    93b0:	2233      	movs	r2, #51	; 0x33
    93b2:	701a      	strb	r2, [r3, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    93b4:	4a18      	ldr	r2, [pc, #96]	; (9418 <nwkSecurityTaskHandler+0xdc>)
    93b6:	4b19      	ldr	r3, [pc, #100]	; (941c <nwkSecurityTaskHandler+0xe0>)
    93b8:	0011      	movs	r1, r2
    93ba:	0018      	movs	r0, r3
    93bc:	4b18      	ldr	r3, [pc, #96]	; (9420 <nwkSecurityTaskHandler+0xe4>)
    93be:	4798      	blx	r3
					(uint32_t *)nwkIb.key);
		}

		return;
    93c0:	e019      	b.n	93f6 <nwkSecurityTaskHandler+0xba>
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    93c2:	687b      	ldr	r3, [r7, #4]
    93c4:	781b      	ldrb	r3, [r3, #0]
    93c6:	2b30      	cmp	r3, #48	; 0x30
    93c8:	d003      	beq.n	93d2 <nwkSecurityTaskHandler+0x96>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
    93ca:	687b      	ldr	r3, [r7, #4]
    93cc:	781b      	ldrb	r3, [r3, #0]

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    93ce:	2b31      	cmp	r3, #49	; 0x31
    93d0:	d105      	bne.n	93de <nwkSecurityTaskHandler+0xa2>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    93d2:	4b0c      	ldr	r3, [pc, #48]	; (9404 <nwkSecurityTaskHandler+0xc8>)
    93d4:	687a      	ldr	r2, [r7, #4]
    93d6:	601a      	str	r2, [r3, #0]
			nwkSecurityStart();
    93d8:	4b12      	ldr	r3, [pc, #72]	; (9424 <nwkSecurityTaskHandler+0xe8>)
    93da:	4798      	blx	r3
			return;
    93dc:	e00c      	b.n	93f8 <nwkSecurityTaskHandler+0xbc>
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    93de:	687b      	ldr	r3, [r7, #4]
    93e0:	0018      	movs	r0, r3
    93e2:	4b11      	ldr	r3, [pc, #68]	; (9428 <nwkSecurityTaskHandler+0xec>)
    93e4:	4798      	blx	r3
    93e6:	0003      	movs	r3, r0
    93e8:	607b      	str	r3, [r7, #4]
    93ea:	687b      	ldr	r3, [r7, #4]
    93ec:	2b00      	cmp	r3, #0
    93ee:	d1e8      	bne.n	93c2 <nwkSecurityTaskHandler+0x86>
    93f0:	e002      	b.n	93f8 <nwkSecurityTaskHandler+0xbc>
void nwkSecurityTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
		return;
    93f2:	46c0      	nop			; (mov r8, r8)
    93f4:	e000      	b.n	93f8 <nwkSecurityTaskHandler+0xbc>
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
					(uint32_t *)nwkIb.key);
		}

		return;
    93f6:	46c0      	nop			; (mov r8, r8)
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    93f8:	46bd      	mov	sp, r7
    93fa:	b003      	add	sp, #12
    93fc:	bd90      	pop	{r4, r7, pc}
    93fe:	46c0      	nop			; (mov r8, r8)
    9400:	20000cf8 	.word	0x20000cf8
    9404:	20000cfc 	.word	0x20000cfc
    9408:	00009295 	.word	0x00009295
    940c:	20000d02 	.word	0x20000d02
    9410:	0000993d 	.word	0x0000993d
    9414:	000087f9 	.word	0x000087f9
    9418:	2000106c 	.word	0x2000106c
    941c:	20000d04 	.word	0x20000d04
    9420:	00006481 	.word	0x00006481
    9424:	00009085 	.word	0x00009085
    9428:	000074e1 	.word	0x000074e1

0000942c <nwkTxInit>:

/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
    942c:	b580      	push	{r7, lr}
    942e:	af00      	add	r7, sp, #0
	nwkTxPhyActiveFrame = NULL;
    9430:	4b0b      	ldr	r3, [pc, #44]	; (9460 <nwkTxInit+0x34>)
    9432:	2200      	movs	r2, #0
    9434:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    9436:	4b0b      	ldr	r3, [pc, #44]	; (9464 <nwkTxInit+0x38>)
    9438:	2232      	movs	r2, #50	; 0x32
    943a:	609a      	str	r2, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    943c:	4b09      	ldr	r3, [pc, #36]	; (9464 <nwkTxInit+0x38>)
    943e:	2200      	movs	r2, #0
    9440:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    9442:	4b08      	ldr	r3, [pc, #32]	; (9464 <nwkTxInit+0x38>)
    9444:	4a08      	ldr	r2, [pc, #32]	; (9468 <nwkTxInit+0x3c>)
    9446:	611a      	str	r2, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    9448:	4b08      	ldr	r3, [pc, #32]	; (946c <nwkTxInit+0x40>)
    944a:	220a      	movs	r2, #10
    944c:	609a      	str	r2, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    944e:	4b07      	ldr	r3, [pc, #28]	; (946c <nwkTxInit+0x40>)
    9450:	2200      	movs	r2, #0
    9452:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    9454:	4b05      	ldr	r3, [pc, #20]	; (946c <nwkTxInit+0x40>)
    9456:	4a06      	ldr	r2, [pc, #24]	; (9470 <nwkTxInit+0x44>)
    9458:	611a      	str	r2, [r3, #16]
}
    945a:	46c0      	nop			; (mov r8, r8)
    945c:	46bd      	mov	sp, r7
    945e:	bd80      	pop	{r7, pc}
    9460:	20000d14 	.word	0x20000d14
    9464:	20000d18 	.word	0x20000d18
    9468:	0000984d 	.word	0x0000984d
    946c:	20000d2c 	.word	0x20000d2c
    9470:	00009955 	.word	0x00009955

00009474 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    9474:	b5b0      	push	{r4, r5, r7, lr}
    9476:	b084      	sub	sp, #16
    9478:	af00      	add	r7, sp, #0
    947a:	6078      	str	r0, [r7, #4]
	NwkFrameHeader_t *header = &frame->header;
    947c:	687b      	ldr	r3, [r7, #4]
    947e:	3302      	adds	r3, #2
    9480:	60fb      	str	r3, [r7, #12]

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    9482:	687b      	ldr	r3, [r7, #4]
    9484:	2288      	movs	r2, #136	; 0x88
    9486:	5c9b      	ldrb	r3, [r3, r2]
    9488:	001a      	movs	r2, r3
    948a:	2302      	movs	r3, #2
    948c:	4013      	ands	r3, r2
    948e:	d003      	beq.n	9498 <nwkTxFrame+0x24>
		frame->state = NWK_TX_STATE_DELAY;
    9490:	687b      	ldr	r3, [r7, #4]
    9492:	2212      	movs	r2, #18
    9494:	701a      	strb	r2, [r3, #0]
    9496:	e00d      	b.n	94b4 <nwkTxFrame+0x40>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    9498:	68fb      	ldr	r3, [r7, #12]
    949a:	7a5b      	ldrb	r3, [r3, #9]
    949c:	2202      	movs	r2, #2
    949e:	4013      	ands	r3, r2
    94a0:	b2db      	uxtb	r3, r3
    94a2:	2b00      	cmp	r3, #0
    94a4:	d003      	beq.n	94ae <nwkTxFrame+0x3a>
			frame->state = NWK_TX_STATE_ENCRYPT;
    94a6:	687b      	ldr	r3, [r7, #4]
    94a8:	2210      	movs	r2, #16
    94aa:	701a      	strb	r2, [r3, #0]
    94ac:	e002      	b.n	94b4 <nwkTxFrame+0x40>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    94ae:	687b      	ldr	r3, [r7, #4]
    94b0:	2212      	movs	r2, #18
    94b2:	701a      	strb	r2, [r3, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    94b4:	687b      	ldr	r3, [r7, #4]
    94b6:	2285      	movs	r2, #133	; 0x85
    94b8:	2100      	movs	r1, #0
    94ba:	5499      	strb	r1, [r3, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    94bc:	687b      	ldr	r3, [r7, #4]
    94be:	2288      	movs	r2, #136	; 0x88
    94c0:	5c9b      	ldrb	r3, [r3, r2]
    94c2:	001a      	movs	r2, r3
    94c4:	2301      	movs	r3, #1
    94c6:	4013      	ands	r3, r2
    94c8:	d00c      	beq.n	94e4 <nwkTxFrame+0x70>
		header->macDstPanId = NWK_BROADCAST_PANID;
    94ca:	68fb      	ldr	r3, [r7, #12]
    94cc:	3303      	adds	r3, #3
    94ce:	781a      	ldrb	r2, [r3, #0]
    94d0:	2101      	movs	r1, #1
    94d2:	4249      	negs	r1, r1
    94d4:	430a      	orrs	r2, r1
    94d6:	701a      	strb	r2, [r3, #0]
    94d8:	785a      	ldrb	r2, [r3, #1]
    94da:	2101      	movs	r1, #1
    94dc:	4249      	negs	r1, r1
    94de:	430a      	orrs	r2, r1
    94e0:	705a      	strb	r2, [r3, #1]
    94e2:	e016      	b.n	9512 <nwkTxFrame+0x9e>
	} else {
		header->macDstPanId = nwkIb.panId;
    94e4:	4b5e      	ldr	r3, [pc, #376]	; (9660 <nwkTxFrame+0x1ec>)
    94e6:	885a      	ldrh	r2, [r3, #2]
    94e8:	68fb      	ldr	r3, [r7, #12]
    94ea:	3303      	adds	r3, #3
    94ec:	21ff      	movs	r1, #255	; 0xff
    94ee:	4011      	ands	r1, r2
    94f0:	000c      	movs	r4, r1
    94f2:	7819      	ldrb	r1, [r3, #0]
    94f4:	2000      	movs	r0, #0
    94f6:	4001      	ands	r1, r0
    94f8:	1c08      	adds	r0, r1, #0
    94fa:	1c21      	adds	r1, r4, #0
    94fc:	4301      	orrs	r1, r0
    94fe:	7019      	strb	r1, [r3, #0]
    9500:	0a12      	lsrs	r2, r2, #8
    9502:	b290      	uxth	r0, r2
    9504:	785a      	ldrb	r2, [r3, #1]
    9506:	2100      	movs	r1, #0
    9508:	400a      	ands	r2, r1
    950a:	1c11      	adds	r1, r2, #0
    950c:	1c02      	adds	r2, r0, #0
    950e:	430a      	orrs	r2, r1
    9510:	705a      	strb	r2, [r3, #1]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    9512:	687b      	ldr	r3, [r7, #4]
    9514:	2288      	movs	r2, #136	; 0x88
    9516:	5c9b      	ldrb	r3, [r3, r2]
    9518:	001a      	movs	r2, r3
    951a:	2304      	movs	r3, #4
    951c:	4013      	ands	r3, r2
    951e:	d10b      	bne.n	9538 <nwkTxFrame+0xc4>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
    9520:	687b      	ldr	r3, [r7, #4]
    9522:	2288      	movs	r2, #136	; 0x88
    9524:	5c9b      	ldrb	r3, [r3, r2]
    9526:	001a      	movs	r2, r3
    9528:	2301      	movs	r3, #1
    952a:	4013      	ands	r3, r2
	} else {
		header->macDstPanId = nwkIb.panId;
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    952c:	d104      	bne.n	9538 <nwkTxFrame+0xc4>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    952e:	687b      	ldr	r3, [r7, #4]
    9530:	0018      	movs	r0, r3
    9532:	4b4c      	ldr	r3, [pc, #304]	; (9664 <nwkTxFrame+0x1f0>)
    9534:	4798      	blx	r3
    9536:	e01a      	b.n	956e <nwkTxFrame+0xfa>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    9538:	68fb      	ldr	r3, [r7, #12]
    953a:	7b5a      	ldrb	r2, [r3, #13]
    953c:	7b9b      	ldrb	r3, [r3, #14]
    953e:	021b      	lsls	r3, r3, #8
    9540:	4313      	orrs	r3, r2
    9542:	b29a      	uxth	r2, r3
    9544:	68fb      	ldr	r3, [r7, #12]
    9546:	3305      	adds	r3, #5
    9548:	21ff      	movs	r1, #255	; 0xff
    954a:	4011      	ands	r1, r2
    954c:	000c      	movs	r4, r1
    954e:	7819      	ldrb	r1, [r3, #0]
    9550:	2000      	movs	r0, #0
    9552:	4001      	ands	r1, r0
    9554:	1c08      	adds	r0, r1, #0
    9556:	1c21      	adds	r1, r4, #0
    9558:	4301      	orrs	r1, r0
    955a:	7019      	strb	r1, [r3, #0]
    955c:	0a12      	lsrs	r2, r2, #8
    955e:	b290      	uxth	r0, r2
    9560:	785a      	ldrb	r2, [r3, #1]
    9562:	2100      	movs	r1, #0
    9564:	400a      	ands	r2, r1
    9566:	1c11      	adds	r1, r2, #0
    9568:	1c02      	adds	r2, r0, #0
    956a:	430a      	orrs	r2, r1
    956c:	705a      	strb	r2, [r3, #1]

	header->macSrcAddr = nwkIb.addr;
    956e:	4b3c      	ldr	r3, [pc, #240]	; (9660 <nwkTxFrame+0x1ec>)
    9570:	881a      	ldrh	r2, [r3, #0]
    9572:	68fb      	ldr	r3, [r7, #12]
    9574:	3307      	adds	r3, #7
    9576:	21ff      	movs	r1, #255	; 0xff
    9578:	4011      	ands	r1, r2
    957a:	000c      	movs	r4, r1
    957c:	7819      	ldrb	r1, [r3, #0]
    957e:	2000      	movs	r0, #0
    9580:	4001      	ands	r1, r0
    9582:	1c08      	adds	r0, r1, #0
    9584:	1c21      	adds	r1, r4, #0
    9586:	4301      	orrs	r1, r0
    9588:	7019      	strb	r1, [r3, #0]
    958a:	0a12      	lsrs	r2, r2, #8
    958c:	b290      	uxth	r0, r2
    958e:	785a      	ldrb	r2, [r3, #1]
    9590:	2100      	movs	r1, #0
    9592:	400a      	ands	r2, r1
    9594:	1c11      	adds	r1, r2, #0
    9596:	1c02      	adds	r2, r0, #0
    9598:	430a      	orrs	r2, r1
    959a:	705a      	strb	r2, [r3, #1]
	header->macSeq = ++nwkIb.macSeqNum;
    959c:	4b30      	ldr	r3, [pc, #192]	; (9660 <nwkTxFrame+0x1ec>)
    959e:	795b      	ldrb	r3, [r3, #5]
    95a0:	3301      	adds	r3, #1
    95a2:	b2da      	uxtb	r2, r3
    95a4:	4b2e      	ldr	r3, [pc, #184]	; (9660 <nwkTxFrame+0x1ec>)
    95a6:	715a      	strb	r2, [r3, #5]
    95a8:	4b2d      	ldr	r3, [pc, #180]	; (9660 <nwkTxFrame+0x1ec>)
    95aa:	795a      	ldrb	r2, [r3, #5]
    95ac:	68fb      	ldr	r3, [r7, #12]
    95ae:	709a      	strb	r2, [r3, #2]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    95b0:	68fb      	ldr	r3, [r7, #12]
    95b2:	795a      	ldrb	r2, [r3, #5]
    95b4:	799b      	ldrb	r3, [r3, #6]
    95b6:	021b      	lsls	r3, r3, #8
    95b8:	4313      	orrs	r3, r2
    95ba:	b29b      	uxth	r3, r3
    95bc:	4a2a      	ldr	r2, [pc, #168]	; (9668 <nwkTxFrame+0x1f4>)
    95be:	4293      	cmp	r3, r2
    95c0:	d12f      	bne.n	9622 <nwkTxFrame+0x1ae>
		header->macFcf = 0x8841;
    95c2:	68fb      	ldr	r3, [r7, #12]
    95c4:	781a      	ldrb	r2, [r3, #0]
    95c6:	2100      	movs	r1, #0
    95c8:	400a      	ands	r2, r1
    95ca:	1c11      	adds	r1, r2, #0
    95cc:	2241      	movs	r2, #65	; 0x41
    95ce:	430a      	orrs	r2, r1
    95d0:	701a      	strb	r2, [r3, #0]
    95d2:	785a      	ldrb	r2, [r3, #1]
    95d4:	2100      	movs	r1, #0
    95d6:	400a      	ands	r2, r1
    95d8:	1c11      	adds	r1, r2, #0
    95da:	2278      	movs	r2, #120	; 0x78
    95dc:	4252      	negs	r2, r2
    95de:	430a      	orrs	r2, r1
    95e0:	705a      	strb	r2, [r3, #1]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    95e2:	4b22      	ldr	r3, [pc, #136]	; (966c <nwkTxFrame+0x1f8>)
    95e4:	4798      	blx	r3
    95e6:	0003      	movs	r3, r0
    95e8:	b29b      	uxth	r3, r3
    95ea:	2207      	movs	r2, #7
    95ec:	4013      	ands	r3, r2
    95ee:	b29b      	uxth	r3, r3
    95f0:	3301      	adds	r3, #1
    95f2:	b299      	uxth	r1, r3
    95f4:	687b      	ldr	r3, [r7, #4]
    95f6:	2286      	movs	r2, #134	; 0x86
    95f8:	20ff      	movs	r0, #255	; 0xff
    95fa:	4008      	ands	r0, r1
    95fc:	0005      	movs	r5, r0
    95fe:	5c98      	ldrb	r0, [r3, r2]
    9600:	2400      	movs	r4, #0
    9602:	4020      	ands	r0, r4
    9604:	1c04      	adds	r4, r0, #0
    9606:	1c28      	adds	r0, r5, #0
    9608:	4320      	orrs	r0, r4
    960a:	5498      	strb	r0, [r3, r2]
    960c:	0a09      	lsrs	r1, r1, #8
    960e:	b288      	uxth	r0, r1
    9610:	189b      	adds	r3, r3, r2
    9612:	785a      	ldrb	r2, [r3, #1]
    9614:	2100      	movs	r1, #0
    9616:	400a      	ands	r2, r1
    9618:	1c11      	adds	r1, r2, #0
    961a:	1c02      	adds	r2, r0, #0
    961c:	430a      	orrs	r2, r1
    961e:	705a      	strb	r2, [r3, #1]
	} else {
		header->macFcf = 0x8861;
		frame->tx.timeout = 0;
	}
}
    9620:	e01a      	b.n	9658 <nwkTxFrame+0x1e4>

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
		header->macFcf = 0x8841;
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
	} else {
		header->macFcf = 0x8861;
    9622:	68fb      	ldr	r3, [r7, #12]
    9624:	781a      	ldrb	r2, [r3, #0]
    9626:	2100      	movs	r1, #0
    9628:	400a      	ands	r2, r1
    962a:	1c11      	adds	r1, r2, #0
    962c:	2261      	movs	r2, #97	; 0x61
    962e:	430a      	orrs	r2, r1
    9630:	701a      	strb	r2, [r3, #0]
    9632:	785a      	ldrb	r2, [r3, #1]
    9634:	2100      	movs	r1, #0
    9636:	400a      	ands	r2, r1
    9638:	1c11      	adds	r1, r2, #0
    963a:	2278      	movs	r2, #120	; 0x78
    963c:	4252      	negs	r2, r2
    963e:	430a      	orrs	r2, r1
    9640:	705a      	strb	r2, [r3, #1]
		frame->tx.timeout = 0;
    9642:	687b      	ldr	r3, [r7, #4]
    9644:	2286      	movs	r2, #134	; 0x86
    9646:	5c99      	ldrb	r1, [r3, r2]
    9648:	2000      	movs	r0, #0
    964a:	4001      	ands	r1, r0
    964c:	5499      	strb	r1, [r3, r2]
    964e:	189b      	adds	r3, r3, r2
    9650:	785a      	ldrb	r2, [r3, #1]
    9652:	2100      	movs	r1, #0
    9654:	400a      	ands	r2, r1
    9656:	705a      	strb	r2, [r3, #1]
	}
}
    9658:	46c0      	nop			; (mov r8, r8)
    965a:	46bd      	mov	sp, r7
    965c:	b004      	add	sp, #16
    965e:	bdb0      	pop	{r4, r5, r7, pc}
    9660:	20001024 	.word	0x20001024
    9664:	00007951 	.word	0x00007951
    9668:	0000ffff 	.word	0x0000ffff
    966c:	0000ea61 	.word	0x0000ea61

00009670 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    9670:	b5b0      	push	{r4, r5, r7, lr}
    9672:	b084      	sub	sp, #16
    9674:	af00      	add	r7, sp, #0
    9676:	6078      	str	r0, [r7, #4]
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    9678:	4b56      	ldr	r3, [pc, #344]	; (97d4 <nwkTxBroadcastFrame+0x164>)
    967a:	4798      	blx	r3
    967c:	0003      	movs	r3, r0
    967e:	60fb      	str	r3, [r7, #12]
    9680:	68fb      	ldr	r3, [r7, #12]
    9682:	2b00      	cmp	r3, #0
    9684:	d100      	bne.n	9688 <nwkTxBroadcastFrame+0x18>
    9686:	e0a0      	b.n	97ca <nwkTxBroadcastFrame+0x15a>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    9688:	68fb      	ldr	r3, [r7, #12]
    968a:	2212      	movs	r2, #18
    968c:	701a      	strb	r2, [r3, #0]
	newFrame->size = frame->size;
    968e:	687b      	ldr	r3, [r7, #4]
    9690:	785a      	ldrb	r2, [r3, #1]
    9692:	68fb      	ldr	r3, [r7, #12]
    9694:	705a      	strb	r2, [r3, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    9696:	68fb      	ldr	r3, [r7, #12]
    9698:	2285      	movs	r2, #133	; 0x85
    969a:	2100      	movs	r1, #0
    969c:	5499      	strb	r1, [r3, r2]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    969e:	4b4e      	ldr	r3, [pc, #312]	; (97d8 <nwkTxBroadcastFrame+0x168>)
    96a0:	4798      	blx	r3
    96a2:	0003      	movs	r3, r0
    96a4:	b29b      	uxth	r3, r3
    96a6:	2207      	movs	r2, #7
    96a8:	4013      	ands	r3, r2
    96aa:	b29b      	uxth	r3, r3
    96ac:	3301      	adds	r3, #1
    96ae:	b299      	uxth	r1, r3
    96b0:	68fb      	ldr	r3, [r7, #12]
    96b2:	2286      	movs	r2, #134	; 0x86
    96b4:	20ff      	movs	r0, #255	; 0xff
    96b6:	4008      	ands	r0, r1
    96b8:	0005      	movs	r5, r0
    96ba:	5c98      	ldrb	r0, [r3, r2]
    96bc:	2400      	movs	r4, #0
    96be:	4020      	ands	r0, r4
    96c0:	1c04      	adds	r4, r0, #0
    96c2:	1c28      	adds	r0, r5, #0
    96c4:	4320      	orrs	r0, r4
    96c6:	5498      	strb	r0, [r3, r2]
    96c8:	0a09      	lsrs	r1, r1, #8
    96ca:	b288      	uxth	r0, r1
    96cc:	189b      	adds	r3, r3, r2
    96ce:	785a      	ldrb	r2, [r3, #1]
    96d0:	2100      	movs	r1, #0
    96d2:	400a      	ands	r2, r1
    96d4:	1c11      	adds	r1, r2, #0
    96d6:	1c02      	adds	r2, r0, #0
    96d8:	430a      	orrs	r2, r1
    96da:	705a      	strb	r2, [r3, #1]
	newFrame->tx.confirm = NULL;
    96dc:	68fb      	ldr	r3, [r7, #12]
    96de:	2289      	movs	r2, #137	; 0x89
    96e0:	5c99      	ldrb	r1, [r3, r2]
    96e2:	2000      	movs	r0, #0
    96e4:	4001      	ands	r1, r0
    96e6:	5499      	strb	r1, [r3, r2]
    96e8:	1899      	adds	r1, r3, r2
    96ea:	7848      	ldrb	r0, [r1, #1]
    96ec:	2400      	movs	r4, #0
    96ee:	4020      	ands	r0, r4
    96f0:	7048      	strb	r0, [r1, #1]
    96f2:	1899      	adds	r1, r3, r2
    96f4:	7888      	ldrb	r0, [r1, #2]
    96f6:	2400      	movs	r4, #0
    96f8:	4020      	ands	r0, r4
    96fa:	7088      	strb	r0, [r1, #2]
    96fc:	189b      	adds	r3, r3, r2
    96fe:	78da      	ldrb	r2, [r3, #3]
    9700:	2100      	movs	r1, #0
    9702:	400a      	ands	r2, r1
    9704:	70da      	strb	r2, [r3, #3]
	memcpy(newFrame->data, frame->data, frame->size);
    9706:	68fb      	ldr	r3, [r7, #12]
    9708:	1c98      	adds	r0, r3, #2
    970a:	687b      	ldr	r3, [r7, #4]
    970c:	1c99      	adds	r1, r3, #2
    970e:	687b      	ldr	r3, [r7, #4]
    9710:	785b      	ldrb	r3, [r3, #1]
    9712:	001a      	movs	r2, r3
    9714:	4b31      	ldr	r3, [pc, #196]	; (97dc <nwkTxBroadcastFrame+0x16c>)
    9716:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    9718:	68fb      	ldr	r3, [r7, #12]
    971a:	789a      	ldrb	r2, [r3, #2]
    971c:	2100      	movs	r1, #0
    971e:	400a      	ands	r2, r1
    9720:	1c11      	adds	r1, r2, #0
    9722:	2241      	movs	r2, #65	; 0x41
    9724:	430a      	orrs	r2, r1
    9726:	709a      	strb	r2, [r3, #2]
    9728:	78da      	ldrb	r2, [r3, #3]
    972a:	2100      	movs	r1, #0
    972c:	400a      	ands	r2, r1
    972e:	1c11      	adds	r1, r2, #0
    9730:	2278      	movs	r2, #120	; 0x78
    9732:	4252      	negs	r2, r2
    9734:	430a      	orrs	r2, r1
    9736:	70da      	strb	r2, [r3, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    9738:	68fb      	ldr	r3, [r7, #12]
    973a:	3307      	adds	r3, #7
    973c:	781a      	ldrb	r2, [r3, #0]
    973e:	2101      	movs	r1, #1
    9740:	4249      	negs	r1, r1
    9742:	430a      	orrs	r2, r1
    9744:	701a      	strb	r2, [r3, #0]
    9746:	785a      	ldrb	r2, [r3, #1]
    9748:	2101      	movs	r1, #1
    974a:	4249      	negs	r1, r1
    974c:	430a      	orrs	r2, r1
    974e:	705a      	strb	r2, [r3, #1]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    9750:	687b      	ldr	r3, [r7, #4]
    9752:	795a      	ldrb	r2, [r3, #5]
    9754:	799b      	ldrb	r3, [r3, #6]
    9756:	021b      	lsls	r3, r3, #8
    9758:	4313      	orrs	r3, r2
    975a:	b29a      	uxth	r2, r3
    975c:	68fb      	ldr	r3, [r7, #12]
    975e:	3305      	adds	r3, #5
    9760:	21ff      	movs	r1, #255	; 0xff
    9762:	4011      	ands	r1, r2
    9764:	000c      	movs	r4, r1
    9766:	7819      	ldrb	r1, [r3, #0]
    9768:	2000      	movs	r0, #0
    976a:	4001      	ands	r1, r0
    976c:	1c08      	adds	r0, r1, #0
    976e:	1c21      	adds	r1, r4, #0
    9770:	4301      	orrs	r1, r0
    9772:	7019      	strb	r1, [r3, #0]
    9774:	0a12      	lsrs	r2, r2, #8
    9776:	b290      	uxth	r0, r2
    9778:	785a      	ldrb	r2, [r3, #1]
    977a:	2100      	movs	r1, #0
    977c:	400a      	ands	r2, r1
    977e:	1c11      	adds	r1, r2, #0
    9780:	1c02      	adds	r2, r0, #0
    9782:	430a      	orrs	r2, r1
    9784:	705a      	strb	r2, [r3, #1]
	newFrame->header.macSrcAddr = nwkIb.addr;
    9786:	4b16      	ldr	r3, [pc, #88]	; (97e0 <nwkTxBroadcastFrame+0x170>)
    9788:	881a      	ldrh	r2, [r3, #0]
    978a:	68fb      	ldr	r3, [r7, #12]
    978c:	3309      	adds	r3, #9
    978e:	21ff      	movs	r1, #255	; 0xff
    9790:	4011      	ands	r1, r2
    9792:	000c      	movs	r4, r1
    9794:	7819      	ldrb	r1, [r3, #0]
    9796:	2000      	movs	r0, #0
    9798:	4001      	ands	r1, r0
    979a:	1c08      	adds	r0, r1, #0
    979c:	1c21      	adds	r1, r4, #0
    979e:	4301      	orrs	r1, r0
    97a0:	7019      	strb	r1, [r3, #0]
    97a2:	0a12      	lsrs	r2, r2, #8
    97a4:	b290      	uxth	r0, r2
    97a6:	785a      	ldrb	r2, [r3, #1]
    97a8:	2100      	movs	r1, #0
    97aa:	400a      	ands	r2, r1
    97ac:	1c11      	adds	r1, r2, #0
    97ae:	1c02      	adds	r2, r0, #0
    97b0:	430a      	orrs	r2, r1
    97b2:	705a      	strb	r2, [r3, #1]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    97b4:	4b0a      	ldr	r3, [pc, #40]	; (97e0 <nwkTxBroadcastFrame+0x170>)
    97b6:	795b      	ldrb	r3, [r3, #5]
    97b8:	3301      	adds	r3, #1
    97ba:	b2da      	uxtb	r2, r3
    97bc:	4b08      	ldr	r3, [pc, #32]	; (97e0 <nwkTxBroadcastFrame+0x170>)
    97be:	715a      	strb	r2, [r3, #5]
    97c0:	4b07      	ldr	r3, [pc, #28]	; (97e0 <nwkTxBroadcastFrame+0x170>)
    97c2:	795a      	ldrb	r2, [r3, #5]
    97c4:	68fb      	ldr	r3, [r7, #12]
    97c6:	711a      	strb	r2, [r3, #4]
    97c8:	e000      	b.n	97cc <nwkTxBroadcastFrame+0x15c>
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
		return;
    97ca:	46c0      	nop			; (mov r8, r8)
	newFrame->header.macFcf = 0x8841;
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
	newFrame->header.macDstPanId = frame->header.macDstPanId;
	newFrame->header.macSrcAddr = nwkIb.addr;
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
}
    97cc:	46bd      	mov	sp, r7
    97ce:	b004      	add	sp, #16
    97d0:	bdb0      	pop	{r4, r5, r7, pc}
    97d2:	46c0      	nop			; (mov r8, r8)
    97d4:	000073b5 	.word	0x000073b5
    97d8:	0000ea61 	.word	0x0000ea61
    97dc:	0000e9ad 	.word	0x0000e9ad
    97e0:	20001024 	.word	0x20001024

000097e4 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    97e4:	b580      	push	{r7, lr}
    97e6:	b084      	sub	sp, #16
    97e8:	af00      	add	r7, sp, #0
    97ea:	6078      	str	r0, [r7, #4]
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    97ec:	687b      	ldr	r3, [r7, #4]
    97ee:	689b      	ldr	r3, [r3, #8]
    97f0:	60bb      	str	r3, [r7, #8]
	NwkFrame_t *frame = NULL;
    97f2:	2300      	movs	r3, #0
    97f4:	60fb      	str	r3, [r7, #12]

	if (sizeof(NwkCommandAck_t) != ind->size) {
    97f6:	687b      	ldr	r3, [r7, #4]
    97f8:	7b1b      	ldrb	r3, [r3, #12]
    97fa:	2b03      	cmp	r3, #3
    97fc:	d015      	beq.n	982a <nwkTxAckReceived+0x46>
		return false;
    97fe:	2300      	movs	r3, #0
    9800:	e01d      	b.n	983e <nwkTxAckReceived+0x5a>
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    9802:	68fb      	ldr	r3, [r7, #12]
    9804:	781b      	ldrb	r3, [r3, #0]
    9806:	2b16      	cmp	r3, #22
    9808:	d10f      	bne.n	982a <nwkTxAckReceived+0x46>
				frame->header.nwkSeq == command->seq) {
    980a:	68fb      	ldr	r3, [r7, #12]
    980c:	7b1a      	ldrb	r2, [r3, #12]
    980e:	68bb      	ldr	r3, [r7, #8]
    9810:	785b      	ldrb	r3, [r3, #1]
	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    9812:	429a      	cmp	r2, r3
    9814:	d109      	bne.n	982a <nwkTxAckReceived+0x46>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    9816:	68fb      	ldr	r3, [r7, #12]
    9818:	2217      	movs	r2, #23
    981a:	701a      	strb	r2, [r3, #0]
			frame->tx.control = command->control;
    981c:	68bb      	ldr	r3, [r7, #8]
    981e:	7899      	ldrb	r1, [r3, #2]
    9820:	68fb      	ldr	r3, [r7, #12]
    9822:	2288      	movs	r2, #136	; 0x88
    9824:	5499      	strb	r1, [r3, r2]
			return true;
    9826:	2301      	movs	r3, #1
    9828:	e009      	b.n	983e <nwkTxAckReceived+0x5a>

	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    982a:	68fb      	ldr	r3, [r7, #12]
    982c:	0018      	movs	r0, r3
    982e:	4b06      	ldr	r3, [pc, #24]	; (9848 <nwkTxAckReceived+0x64>)
    9830:	4798      	blx	r3
    9832:	0003      	movs	r3, r0
    9834:	60fb      	str	r3, [r7, #12]
    9836:	68fb      	ldr	r3, [r7, #12]
    9838:	2b00      	cmp	r3, #0
    983a:	d1e2      	bne.n	9802 <nwkTxAckReceived+0x1e>
			frame->tx.control = command->control;
			return true;
		}
	}

	return false;
    983c:	2300      	movs	r3, #0
}
    983e:	0018      	movs	r0, r3
    9840:	46bd      	mov	sp, r7
    9842:	b004      	add	sp, #16
    9844:	bd80      	pop	{r7, pc}
    9846:	46c0      	nop			; (mov r8, r8)
    9848:	000074e1 	.word	0x000074e1

0000984c <nwkTxAckWaitTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    984c:	b5b0      	push	{r4, r5, r7, lr}
    984e:	b084      	sub	sp, #16
    9850:	af00      	add	r7, sp, #0
    9852:	6078      	str	r0, [r7, #4]
	NwkFrame_t *frame = NULL;
    9854:	2300      	movs	r3, #0
    9856:	60fb      	str	r3, [r7, #12]
	bool restart = false;
    9858:	230b      	movs	r3, #11
    985a:	18fb      	adds	r3, r7, r3
    985c:	2200      	movs	r2, #0
    985e:	701a      	strb	r2, [r3, #0]

	while (NULL != (frame = nwkFrameNext(frame))) {
    9860:	e03c      	b.n	98dc <nwkTxAckWaitTimerHandler+0x90>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    9862:	68fb      	ldr	r3, [r7, #12]
    9864:	781b      	ldrb	r3, [r3, #0]
    9866:	220b      	movs	r2, #11
    9868:	18ba      	adds	r2, r7, r2
    986a:	210b      	movs	r1, #11
    986c:	1879      	adds	r1, r7, r1
    986e:	7809      	ldrb	r1, [r1, #0]
    9870:	7011      	strb	r1, [r2, #0]
    9872:	2b16      	cmp	r3, #22
    9874:	d132      	bne.n	98dc <nwkTxAckWaitTimerHandler+0x90>
			restart = true;
    9876:	230b      	movs	r3, #11
    9878:	18fb      	adds	r3, r7, r3
    987a:	2201      	movs	r2, #1
    987c:	701a      	strb	r2, [r3, #0]

			if (0 == --frame->tx.timeout) {
    987e:	68fb      	ldr	r3, [r7, #12]
    9880:	2286      	movs	r2, #134	; 0x86
    9882:	5c9a      	ldrb	r2, [r3, r2]
    9884:	2187      	movs	r1, #135	; 0x87
    9886:	5c5b      	ldrb	r3, [r3, r1]
    9888:	021b      	lsls	r3, r3, #8
    988a:	4313      	orrs	r3, r2
    988c:	b29b      	uxth	r3, r3
    988e:	3b01      	subs	r3, #1
    9890:	b299      	uxth	r1, r3
    9892:	68fb      	ldr	r3, [r7, #12]
    9894:	2286      	movs	r2, #134	; 0x86
    9896:	20ff      	movs	r0, #255	; 0xff
    9898:	4008      	ands	r0, r1
    989a:	0005      	movs	r5, r0
    989c:	5c98      	ldrb	r0, [r3, r2]
    989e:	2400      	movs	r4, #0
    98a0:	4020      	ands	r0, r4
    98a2:	1c04      	adds	r4, r0, #0
    98a4:	1c28      	adds	r0, r5, #0
    98a6:	4320      	orrs	r0, r4
    98a8:	5498      	strb	r0, [r3, r2]
    98aa:	0a09      	lsrs	r1, r1, #8
    98ac:	b288      	uxth	r0, r1
    98ae:	189b      	adds	r3, r3, r2
    98b0:	785a      	ldrb	r2, [r3, #1]
    98b2:	2100      	movs	r1, #0
    98b4:	400a      	ands	r2, r1
    98b6:	1c11      	adds	r1, r2, #0
    98b8:	1c02      	adds	r2, r0, #0
    98ba:	430a      	orrs	r2, r1
    98bc:	705a      	strb	r2, [r3, #1]
    98be:	68fb      	ldr	r3, [r7, #12]
    98c0:	2286      	movs	r2, #134	; 0x86
    98c2:	5c9a      	ldrb	r2, [r3, r2]
    98c4:	2187      	movs	r1, #135	; 0x87
    98c6:	5c5b      	ldrb	r3, [r3, r1]
    98c8:	021b      	lsls	r3, r3, #8
    98ca:	4313      	orrs	r3, r2
    98cc:	b29b      	uxth	r3, r3
    98ce:	2b00      	cmp	r3, #0
    98d0:	d104      	bne.n	98dc <nwkTxAckWaitTimerHandler+0x90>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    98d2:	68fb      	ldr	r3, [r7, #12]
    98d4:	2110      	movs	r1, #16
    98d6:	0018      	movs	r0, r3
    98d8:	4b0b      	ldr	r3, [pc, #44]	; (9908 <nwkTxAckWaitTimerHandler+0xbc>)
    98da:	4798      	blx	r3
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    98dc:	68fb      	ldr	r3, [r7, #12]
    98de:	0018      	movs	r0, r3
    98e0:	4b0a      	ldr	r3, [pc, #40]	; (990c <nwkTxAckWaitTimerHandler+0xc0>)
    98e2:	4798      	blx	r3
    98e4:	0003      	movs	r3, r0
    98e6:	60fb      	str	r3, [r7, #12]
    98e8:	68fb      	ldr	r3, [r7, #12]
    98ea:	2b00      	cmp	r3, #0
    98ec:	d1b9      	bne.n	9862 <nwkTxAckWaitTimerHandler+0x16>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    98ee:	230b      	movs	r3, #11
    98f0:	18fb      	adds	r3, r7, r3
    98f2:	781b      	ldrb	r3, [r3, #0]
    98f4:	2b00      	cmp	r3, #0
    98f6:	d003      	beq.n	9900 <nwkTxAckWaitTimerHandler+0xb4>
		SYS_TimerStart(timer);
    98f8:	687b      	ldr	r3, [r7, #4]
    98fa:	0018      	movs	r0, r3
    98fc:	4b04      	ldr	r3, [pc, #16]	; (9910 <nwkTxAckWaitTimerHandler+0xc4>)
    98fe:	4798      	blx	r3
	}
}
    9900:	46c0      	nop			; (mov r8, r8)
    9902:	46bd      	mov	sp, r7
    9904:	b004      	add	sp, #16
    9906:	bdb0      	pop	{r4, r5, r7, pc}
    9908:	00009915 	.word	0x00009915
    990c:	000074e1 	.word	0x000074e1
    9910:	0000656d 	.word	0x0000656d

00009914 <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
    9914:	b580      	push	{r7, lr}
    9916:	b082      	sub	sp, #8
    9918:	af00      	add	r7, sp, #0
    991a:	6078      	str	r0, [r7, #4]
    991c:	000a      	movs	r2, r1
    991e:	1cfb      	adds	r3, r7, #3
    9920:	701a      	strb	r2, [r3, #0]
	frame->state = NWK_TX_STATE_CONFIRM;
    9922:	687b      	ldr	r3, [r7, #4]
    9924:	2217      	movs	r2, #23
    9926:	701a      	strb	r2, [r3, #0]
	frame->tx.status = status;
    9928:	687b      	ldr	r3, [r7, #4]
    992a:	1cfa      	adds	r2, r7, #3
    992c:	2185      	movs	r1, #133	; 0x85
    992e:	7812      	ldrb	r2, [r2, #0]
    9930:	545a      	strb	r2, [r3, r1]
}
    9932:	46c0      	nop			; (mov r8, r8)
    9934:	46bd      	mov	sp, r7
    9936:	b002      	add	sp, #8
    9938:	bd80      	pop	{r7, pc}
    993a:	46c0      	nop			; (mov r8, r8)

0000993c <nwkTxEncryptConf>:
#ifdef NWK_ENABLE_SECURITY

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
    993c:	b580      	push	{r7, lr}
    993e:	b082      	sub	sp, #8
    9940:	af00      	add	r7, sp, #0
    9942:	6078      	str	r0, [r7, #4]
	frame->state = NWK_TX_STATE_DELAY;
    9944:	687b      	ldr	r3, [r7, #4]
    9946:	2212      	movs	r2, #18
    9948:	701a      	strb	r2, [r3, #0]
}
    994a:	46c0      	nop			; (mov r8, r8)
    994c:	46bd      	mov	sp, r7
    994e:	b002      	add	sp, #8
    9950:	bd80      	pop	{r7, pc}
    9952:	46c0      	nop			; (mov r8, r8)

00009954 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    9954:	b5b0      	push	{r4, r5, r7, lr}
    9956:	b084      	sub	sp, #16
    9958:	af00      	add	r7, sp, #0
    995a:	6078      	str	r0, [r7, #4]
	NwkFrame_t *frame = NULL;
    995c:	2300      	movs	r3, #0
    995e:	60fb      	str	r3, [r7, #12]
	bool restart = false;
    9960:	230b      	movs	r3, #11
    9962:	18fb      	adds	r3, r7, r3
    9964:	2200      	movs	r2, #0
    9966:	701a      	strb	r2, [r3, #0]

	while (NULL != (frame = nwkFrameNext(frame))) {
    9968:	e03a      	b.n	99e0 <nwkTxDelayTimerHandler+0x8c>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    996a:	68fb      	ldr	r3, [r7, #12]
    996c:	781b      	ldrb	r3, [r3, #0]
    996e:	220b      	movs	r2, #11
    9970:	18ba      	adds	r2, r7, r2
    9972:	210b      	movs	r1, #11
    9974:	1879      	adds	r1, r7, r1
    9976:	7809      	ldrb	r1, [r1, #0]
    9978:	7011      	strb	r1, [r2, #0]
    997a:	2b11      	cmp	r3, #17
    997c:	d130      	bne.n	99e0 <nwkTxDelayTimerHandler+0x8c>
			restart = true;
    997e:	230b      	movs	r3, #11
    9980:	18fb      	adds	r3, r7, r3
    9982:	2201      	movs	r2, #1
    9984:	701a      	strb	r2, [r3, #0]

			if (0 == --frame->tx.timeout) {
    9986:	68fb      	ldr	r3, [r7, #12]
    9988:	2286      	movs	r2, #134	; 0x86
    998a:	5c9a      	ldrb	r2, [r3, r2]
    998c:	2187      	movs	r1, #135	; 0x87
    998e:	5c5b      	ldrb	r3, [r3, r1]
    9990:	021b      	lsls	r3, r3, #8
    9992:	4313      	orrs	r3, r2
    9994:	b29b      	uxth	r3, r3
    9996:	3b01      	subs	r3, #1
    9998:	b299      	uxth	r1, r3
    999a:	68fb      	ldr	r3, [r7, #12]
    999c:	2286      	movs	r2, #134	; 0x86
    999e:	20ff      	movs	r0, #255	; 0xff
    99a0:	4008      	ands	r0, r1
    99a2:	0005      	movs	r5, r0
    99a4:	5c98      	ldrb	r0, [r3, r2]
    99a6:	2400      	movs	r4, #0
    99a8:	4020      	ands	r0, r4
    99aa:	1c04      	adds	r4, r0, #0
    99ac:	1c28      	adds	r0, r5, #0
    99ae:	4320      	orrs	r0, r4
    99b0:	5498      	strb	r0, [r3, r2]
    99b2:	0a09      	lsrs	r1, r1, #8
    99b4:	b288      	uxth	r0, r1
    99b6:	189b      	adds	r3, r3, r2
    99b8:	785a      	ldrb	r2, [r3, #1]
    99ba:	2100      	movs	r1, #0
    99bc:	400a      	ands	r2, r1
    99be:	1c11      	adds	r1, r2, #0
    99c0:	1c02      	adds	r2, r0, #0
    99c2:	430a      	orrs	r2, r1
    99c4:	705a      	strb	r2, [r3, #1]
    99c6:	68fb      	ldr	r3, [r7, #12]
    99c8:	2286      	movs	r2, #134	; 0x86
    99ca:	5c9a      	ldrb	r2, [r3, r2]
    99cc:	2187      	movs	r1, #135	; 0x87
    99ce:	5c5b      	ldrb	r3, [r3, r1]
    99d0:	021b      	lsls	r3, r3, #8
    99d2:	4313      	orrs	r3, r2
    99d4:	b29b      	uxth	r3, r3
    99d6:	2b00      	cmp	r3, #0
    99d8:	d102      	bne.n	99e0 <nwkTxDelayTimerHandler+0x8c>
				frame->state = NWK_TX_STATE_SEND;
    99da:	68fb      	ldr	r3, [r7, #12]
    99dc:	2213      	movs	r2, #19
    99de:	701a      	strb	r2, [r3, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    99e0:	68fb      	ldr	r3, [r7, #12]
    99e2:	0018      	movs	r0, r3
    99e4:	4b09      	ldr	r3, [pc, #36]	; (9a0c <nwkTxDelayTimerHandler+0xb8>)
    99e6:	4798      	blx	r3
    99e8:	0003      	movs	r3, r0
    99ea:	60fb      	str	r3, [r7, #12]
    99ec:	68fb      	ldr	r3, [r7, #12]
    99ee:	2b00      	cmp	r3, #0
    99f0:	d1bb      	bne.n	996a <nwkTxDelayTimerHandler+0x16>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    99f2:	230b      	movs	r3, #11
    99f4:	18fb      	adds	r3, r7, r3
    99f6:	781b      	ldrb	r3, [r3, #0]
    99f8:	2b00      	cmp	r3, #0
    99fa:	d003      	beq.n	9a04 <nwkTxDelayTimerHandler+0xb0>
		SYS_TimerStart(timer);
    99fc:	687b      	ldr	r3, [r7, #4]
    99fe:	0018      	movs	r0, r3
    9a00:	4b03      	ldr	r3, [pc, #12]	; (9a10 <nwkTxDelayTimerHandler+0xbc>)
    9a02:	4798      	blx	r3
	}
}
    9a04:	46c0      	nop			; (mov r8, r8)
    9a06:	46bd      	mov	sp, r7
    9a08:	b004      	add	sp, #16
    9a0a:	bdb0      	pop	{r4, r5, r7, pc}
    9a0c:	000074e1 	.word	0x000074e1
    9a10:	0000656d 	.word	0x0000656d

00009a14 <nwkTxConvertPhyStatus>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
    9a14:	b580      	push	{r7, lr}
    9a16:	b082      	sub	sp, #8
    9a18:	af00      	add	r7, sp, #0
    9a1a:	0002      	movs	r2, r0
    9a1c:	1dfb      	adds	r3, r7, #7
    9a1e:	701a      	strb	r2, [r3, #0]
	switch (status) {
    9a20:	1dfb      	adds	r3, r7, #7
    9a22:	781b      	ldrb	r3, [r3, #0]
    9a24:	2b01      	cmp	r3, #1
    9a26:	d005      	beq.n	9a34 <nwkTxConvertPhyStatus+0x20>
    9a28:	2b02      	cmp	r3, #2
    9a2a:	d005      	beq.n	9a38 <nwkTxConvertPhyStatus+0x24>
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	d105      	bne.n	9a3c <nwkTxConvertPhyStatus+0x28>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    9a30:	2300      	movs	r3, #0
    9a32:	e004      	b.n	9a3e <nwkTxConvertPhyStatus+0x2a>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    9a34:	2320      	movs	r3, #32
    9a36:	e002      	b.n	9a3e <nwkTxConvertPhyStatus+0x2a>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    9a38:	2321      	movs	r3, #33	; 0x21
    9a3a:	e000      	b.n	9a3e <nwkTxConvertPhyStatus+0x2a>

	default:
		return NWK_ERROR_STATUS;
    9a3c:	2301      	movs	r3, #1
	}
}
    9a3e:	0018      	movs	r0, r3
    9a40:	46bd      	mov	sp, r7
    9a42:	b002      	add	sp, #8
    9a44:	bd80      	pop	{r7, pc}
    9a46:	46c0      	nop			; (mov r8, r8)

00009a48 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    9a48:	b590      	push	{r4, r7, lr}
    9a4a:	b083      	sub	sp, #12
    9a4c:	af00      	add	r7, sp, #0
    9a4e:	0002      	movs	r2, r0
    9a50:	1dfb      	adds	r3, r7, #7
    9a52:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    9a54:	4b0e      	ldr	r3, [pc, #56]	; (9a90 <PHY_DataConf+0x48>)
    9a56:	681c      	ldr	r4, [r3, #0]
    9a58:	1dfb      	adds	r3, r7, #7
    9a5a:	781b      	ldrb	r3, [r3, #0]
    9a5c:	0018      	movs	r0, r3
    9a5e:	4b0d      	ldr	r3, [pc, #52]	; (9a94 <PHY_DataConf+0x4c>)
    9a60:	4798      	blx	r3
    9a62:	0003      	movs	r3, r0
    9a64:	001a      	movs	r2, r3
    9a66:	2385      	movs	r3, #133	; 0x85
    9a68:	54e2      	strb	r2, [r4, r3]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    9a6a:	4b09      	ldr	r3, [pc, #36]	; (9a90 <PHY_DataConf+0x48>)
    9a6c:	681b      	ldr	r3, [r3, #0]
    9a6e:	2215      	movs	r2, #21
    9a70:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    9a72:	4b07      	ldr	r3, [pc, #28]	; (9a90 <PHY_DataConf+0x48>)
    9a74:	2200      	movs	r2, #0
    9a76:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    9a78:	4b07      	ldr	r3, [pc, #28]	; (9a98 <PHY_DataConf+0x50>)
    9a7a:	2258      	movs	r2, #88	; 0x58
    9a7c:	5a9b      	ldrh	r3, [r3, r2]
    9a7e:	3b01      	subs	r3, #1
    9a80:	b299      	uxth	r1, r3
    9a82:	4b05      	ldr	r3, [pc, #20]	; (9a98 <PHY_DataConf+0x50>)
    9a84:	2258      	movs	r2, #88	; 0x58
    9a86:	5299      	strh	r1, [r3, r2]
}
    9a88:	46c0      	nop			; (mov r8, r8)
    9a8a:	46bd      	mov	sp, r7
    9a8c:	b003      	add	sp, #12
    9a8e:	bd90      	pop	{r4, r7, pc}
    9a90:	20000d14 	.word	0x20000d14
    9a94:	00009a15 	.word	0x00009a15
    9a98:	20001024 	.word	0x20001024

00009a9c <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    9a9c:	b580      	push	{r7, lr}
    9a9e:	b082      	sub	sp, #8
    9aa0:	af00      	add	r7, sp, #0
	NwkFrame_t *frame = NULL;
    9aa2:	2300      	movs	r3, #0
    9aa4:	607b      	str	r3, [r7, #4]

	while (NULL != (frame = nwkFrameNext(frame))) {
    9aa6:	e0a0      	b.n	9bea <nwkTxTaskHandler+0x14e>
		switch (frame->state) {
    9aa8:	687b      	ldr	r3, [r7, #4]
    9aaa:	781b      	ldrb	r3, [r3, #0]
    9aac:	3b10      	subs	r3, #16
    9aae:	2b07      	cmp	r3, #7
    9ab0:	d900      	bls.n	9ab4 <nwkTxTaskHandler+0x18>
    9ab2:	e099      	b.n	9be8 <nwkTxTaskHandler+0x14c>
    9ab4:	009a      	lsls	r2, r3, #2
    9ab6:	4b54      	ldr	r3, [pc, #336]	; (9c08 <nwkTxTaskHandler+0x16c>)
    9ab8:	18d3      	adds	r3, r2, r3
    9aba:	681b      	ldr	r3, [r3, #0]
    9abc:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    9abe:	687b      	ldr	r3, [r7, #4]
    9ac0:	2101      	movs	r1, #1
    9ac2:	0018      	movs	r0, r3
    9ac4:	4b51      	ldr	r3, [pc, #324]	; (9c0c <nwkTxTaskHandler+0x170>)
    9ac6:	4798      	blx	r3
		}
		break;
    9ac8:	e08f      	b.n	9bea <nwkTxTaskHandler+0x14e>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    9aca:	687b      	ldr	r3, [r7, #4]
    9acc:	2286      	movs	r2, #134	; 0x86
    9ace:	5c9a      	ldrb	r2, [r3, r2]
    9ad0:	2187      	movs	r1, #135	; 0x87
    9ad2:	5c5b      	ldrb	r3, [r3, r1]
    9ad4:	021b      	lsls	r3, r3, #8
    9ad6:	4313      	orrs	r3, r2
    9ad8:	b29b      	uxth	r3, r3
    9ada:	2b00      	cmp	r3, #0
    9adc:	d007      	beq.n	9aee <nwkTxTaskHandler+0x52>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    9ade:	687b      	ldr	r3, [r7, #4]
    9ae0:	2211      	movs	r2, #17
    9ae2:	701a      	strb	r2, [r3, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    9ae4:	4b4a      	ldr	r3, [pc, #296]	; (9c10 <nwkTxTaskHandler+0x174>)
    9ae6:	0018      	movs	r0, r3
    9ae8:	4b4a      	ldr	r3, [pc, #296]	; (9c14 <nwkTxTaskHandler+0x178>)
    9aea:	4798      	blx	r3
    9aec:	e07d      	b.n	9bea <nwkTxTaskHandler+0x14e>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    9aee:	687b      	ldr	r3, [r7, #4]
    9af0:	2213      	movs	r2, #19
    9af2:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
    9af4:	e079      	b.n	9bea <nwkTxTaskHandler+0x14e>

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    9af6:	4b48      	ldr	r3, [pc, #288]	; (9c18 <nwkTxTaskHandler+0x17c>)
    9af8:	681b      	ldr	r3, [r3, #0]
    9afa:	2b00      	cmp	r3, #0
    9afc:	d000      	beq.n	9b00 <nwkTxTaskHandler+0x64>
    9afe:	e074      	b.n	9bea <nwkTxTaskHandler+0x14e>
				nwkTxPhyActiveFrame = frame;
    9b00:	4b45      	ldr	r3, [pc, #276]	; (9c18 <nwkTxTaskHandler+0x17c>)
    9b02:	687a      	ldr	r2, [r7, #4]
    9b04:	601a      	str	r2, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    9b06:	687b      	ldr	r3, [r7, #4]
    9b08:	2214      	movs	r2, #20
    9b0a:	701a      	strb	r2, [r3, #0]
				PHY_DataReq(&(frame->size));
    9b0c:	687b      	ldr	r3, [r7, #4]
    9b0e:	3301      	adds	r3, #1
    9b10:	0018      	movs	r0, r3
    9b12:	4b42      	ldr	r3, [pc, #264]	; (9c1c <nwkTxTaskHandler+0x180>)
    9b14:	4798      	blx	r3
				nwkIb.lock++;
    9b16:	4b42      	ldr	r3, [pc, #264]	; (9c20 <nwkTxTaskHandler+0x184>)
    9b18:	2258      	movs	r2, #88	; 0x58
    9b1a:	5a9b      	ldrh	r3, [r3, r2]
    9b1c:	3301      	adds	r3, #1
    9b1e:	b299      	uxth	r1, r3
    9b20:	4b3f      	ldr	r3, [pc, #252]	; (9c20 <nwkTxTaskHandler+0x184>)
    9b22:	2258      	movs	r2, #88	; 0x58
    9b24:	5299      	strh	r1, [r3, r2]
			}
		}
		break;
    9b26:	e060      	b.n	9bea <nwkTxTaskHandler+0x14e>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    9b28:	687b      	ldr	r3, [r7, #4]
    9b2a:	2285      	movs	r2, #133	; 0x85
    9b2c:	5c9b      	ldrb	r3, [r3, r2]
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d12a      	bne.n	9b88 <nwkTxTaskHandler+0xec>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    9b32:	687b      	ldr	r3, [r7, #4]
    9b34:	7b5a      	ldrb	r2, [r3, #13]
    9b36:	7b9b      	ldrb	r3, [r3, #14]
    9b38:	021b      	lsls	r3, r3, #8
    9b3a:	4313      	orrs	r3, r2
    9b3c:	b29a      	uxth	r2, r3
    9b3e:	4b38      	ldr	r3, [pc, #224]	; (9c20 <nwkTxTaskHandler+0x184>)
    9b40:	881b      	ldrh	r3, [r3, #0]
    9b42:	429a      	cmp	r2, r3
    9b44:	d11c      	bne.n	9b80 <nwkTxTaskHandler+0xe4>
    9b46:	687b      	ldr	r3, [r7, #4]
    9b48:	7adb      	ldrb	r3, [r3, #11]
    9b4a:	2201      	movs	r2, #1
    9b4c:	4013      	ands	r3, r2
    9b4e:	b2db      	uxtb	r3, r3
    9b50:	2b00      	cmp	r3, #0
    9b52:	d015      	beq.n	9b80 <nwkTxTaskHandler+0xe4>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    9b54:	687b      	ldr	r3, [r7, #4]
    9b56:	2216      	movs	r2, #22
    9b58:	701a      	strb	r2, [r3, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    9b5a:	687b      	ldr	r3, [r7, #4]
    9b5c:	2286      	movs	r2, #134	; 0x86
    9b5e:	5c99      	ldrb	r1, [r3, r2]
    9b60:	2000      	movs	r0, #0
    9b62:	4001      	ands	r1, r0
    9b64:	1c08      	adds	r0, r1, #0
    9b66:	2115      	movs	r1, #21
    9b68:	4301      	orrs	r1, r0
    9b6a:	5499      	strb	r1, [r3, r2]
    9b6c:	189b      	adds	r3, r3, r2
    9b6e:	785a      	ldrb	r2, [r3, #1]
    9b70:	2100      	movs	r1, #0
    9b72:	400a      	ands	r2, r1
    9b74:	705a      	strb	r2, [r3, #1]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    9b76:	4b2b      	ldr	r3, [pc, #172]	; (9c24 <nwkTxTaskHandler+0x188>)
    9b78:	0018      	movs	r0, r3
    9b7a:	4b26      	ldr	r3, [pc, #152]	; (9c14 <nwkTxTaskHandler+0x178>)
    9b7c:	4798      	blx	r3
    9b7e:	e006      	b.n	9b8e <nwkTxTaskHandler+0xf2>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    9b80:	687b      	ldr	r3, [r7, #4]
    9b82:	2217      	movs	r2, #23
    9b84:	701a      	strb	r2, [r3, #0]
    9b86:	e030      	b.n	9bea <nwkTxTaskHandler+0x14e>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    9b88:	687b      	ldr	r3, [r7, #4]
    9b8a:	2217      	movs	r2, #23
    9b8c:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
    9b8e:	e02c      	b.n	9bea <nwkTxTaskHandler+0x14e>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	0018      	movs	r0, r3
    9b94:	4b24      	ldr	r3, [pc, #144]	; (9c28 <nwkTxTaskHandler+0x18c>)
    9b96:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    9b98:	687b      	ldr	r3, [r7, #4]
    9b9a:	2289      	movs	r2, #137	; 0x89
    9b9c:	5c9a      	ldrb	r2, [r3, r2]
    9b9e:	218a      	movs	r1, #138	; 0x8a
    9ba0:	5c59      	ldrb	r1, [r3, r1]
    9ba2:	0209      	lsls	r1, r1, #8
    9ba4:	430a      	orrs	r2, r1
    9ba6:	218b      	movs	r1, #139	; 0x8b
    9ba8:	5c59      	ldrb	r1, [r3, r1]
    9baa:	0409      	lsls	r1, r1, #16
    9bac:	430a      	orrs	r2, r1
    9bae:	218c      	movs	r1, #140	; 0x8c
    9bb0:	5c5b      	ldrb	r3, [r3, r1]
    9bb2:	061b      	lsls	r3, r3, #24
    9bb4:	4313      	orrs	r3, r2
    9bb6:	d104      	bne.n	9bc2 <nwkTxTaskHandler+0x126>
				nwkFrameFree(frame);
    9bb8:	687b      	ldr	r3, [r7, #4]
    9bba:	0018      	movs	r0, r3
    9bbc:	4b1b      	ldr	r3, [pc, #108]	; (9c2c <nwkTxTaskHandler+0x190>)
    9bbe:	4798      	blx	r3
    9bc0:	e013      	b.n	9bea <nwkTxTaskHandler+0x14e>
			} else {
				frame->tx.confirm(frame);
    9bc2:	687b      	ldr	r3, [r7, #4]
    9bc4:	2289      	movs	r2, #137	; 0x89
    9bc6:	5c9a      	ldrb	r2, [r3, r2]
    9bc8:	218a      	movs	r1, #138	; 0x8a
    9bca:	5c59      	ldrb	r1, [r3, r1]
    9bcc:	0209      	lsls	r1, r1, #8
    9bce:	430a      	orrs	r2, r1
    9bd0:	218b      	movs	r1, #139	; 0x8b
    9bd2:	5c59      	ldrb	r1, [r3, r1]
    9bd4:	0409      	lsls	r1, r1, #16
    9bd6:	430a      	orrs	r2, r1
    9bd8:	218c      	movs	r1, #140	; 0x8c
    9bda:	5c5b      	ldrb	r3, [r3, r1]
    9bdc:	061b      	lsls	r3, r3, #24
    9bde:	4313      	orrs	r3, r2
    9be0:	687a      	ldr	r2, [r7, #4]
    9be2:	0010      	movs	r0, r2
    9be4:	4798      	blx	r3
			}
		}
		break;
    9be6:	e000      	b.n	9bea <nwkTxTaskHandler+0x14e>

		default:
			break;
    9be8:	46c0      	nop			; (mov r8, r8)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    9bea:	687b      	ldr	r3, [r7, #4]
    9bec:	0018      	movs	r0, r3
    9bee:	4b10      	ldr	r3, [pc, #64]	; (9c30 <nwkTxTaskHandler+0x194>)
    9bf0:	4798      	blx	r3
    9bf2:	0003      	movs	r3, r0
    9bf4:	607b      	str	r3, [r7, #4]
    9bf6:	687b      	ldr	r3, [r7, #4]
    9bf8:	2b00      	cmp	r3, #0
    9bfa:	d000      	beq.n	9bfe <nwkTxTaskHandler+0x162>
    9bfc:	e754      	b.n	9aa8 <nwkTxTaskHandler+0xc>

		default:
			break;
		}
	}
}
    9bfe:	46c0      	nop			; (mov r8, r8)
    9c00:	46bd      	mov	sp, r7
    9c02:	b002      	add	sp, #8
    9c04:	bd80      	pop	{r7, pc}
    9c06:	46c0      	nop			; (mov r8, r8)
    9c08:	0000fac4 	.word	0x0000fac4
    9c0c:	00009049 	.word	0x00009049
    9c10:	20000d2c 	.word	0x20000d2c
    9c14:	0000656d 	.word	0x0000656d
    9c18:	20000d14 	.word	0x20000d14
    9c1c:	00006a85 	.word	0x00006a85
    9c20:	20001024 	.word	0x20001024
    9c24:	20000d18 	.word	0x20000d18
    9c28:	00007871 	.word	0x00007871
    9c2c:	000074b5 	.word	0x000074b5
    9c30:	000074e1 	.word	0x000074e1

00009c34 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    9c34:	b580      	push	{r7, lr}
    9c36:	b084      	sub	sp, #16
    9c38:	af00      	add	r7, sp, #0
    9c3a:	60f8      	str	r0, [r7, #12]
    9c3c:	60b9      	str	r1, [r7, #8]
    9c3e:	1dfb      	adds	r3, r7, #7
    9c40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    9c42:	1dfb      	adds	r3, r7, #7
    9c44:	781a      	ldrb	r2, [r3, #0]
    9c46:	68fb      	ldr	r3, [r7, #12]
    9c48:	3202      	adds	r2, #2
    9c4a:	0092      	lsls	r2, r2, #2
    9c4c:	68b9      	ldr	r1, [r7, #8]
    9c4e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    9c50:	1dfb      	adds	r3, r7, #7
    9c52:	781b      	ldrb	r3, [r3, #0]
    9c54:	2b02      	cmp	r3, #2
    9c56:	d107      	bne.n	9c68 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    9c58:	68fb      	ldr	r3, [r7, #12]
    9c5a:	7e1b      	ldrb	r3, [r3, #24]
    9c5c:	2210      	movs	r2, #16
    9c5e:	4313      	orrs	r3, r2
    9c60:	b2da      	uxtb	r2, r3
    9c62:	68fb      	ldr	r3, [r7, #12]
    9c64:	761a      	strb	r2, [r3, #24]
    9c66:	e019      	b.n	9c9c <tc_register_callback+0x68>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    9c68:	1dfb      	adds	r3, r7, #7
    9c6a:	781b      	ldrb	r3, [r3, #0]
    9c6c:	2b03      	cmp	r3, #3
    9c6e:	d107      	bne.n	9c80 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    9c70:	68fb      	ldr	r3, [r7, #12]
    9c72:	7e1b      	ldrb	r3, [r3, #24]
    9c74:	2220      	movs	r2, #32
    9c76:	4313      	orrs	r3, r2
    9c78:	b2da      	uxtb	r2, r3
    9c7a:	68fb      	ldr	r3, [r7, #12]
    9c7c:	761a      	strb	r2, [r3, #24]
    9c7e:	e00d      	b.n	9c9c <tc_register_callback+0x68>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    9c80:	68fb      	ldr	r3, [r7, #12]
    9c82:	7e1b      	ldrb	r3, [r3, #24]
    9c84:	b25a      	sxtb	r2, r3
    9c86:	1dfb      	adds	r3, r7, #7
    9c88:	781b      	ldrb	r3, [r3, #0]
    9c8a:	2101      	movs	r1, #1
    9c8c:	4099      	lsls	r1, r3
    9c8e:	000b      	movs	r3, r1
    9c90:	b25b      	sxtb	r3, r3
    9c92:	4313      	orrs	r3, r2
    9c94:	b25b      	sxtb	r3, r3
    9c96:	b2da      	uxtb	r2, r3
    9c98:	68fb      	ldr	r3, [r7, #12]
    9c9a:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    9c9c:	2300      	movs	r3, #0
}
    9c9e:	0018      	movs	r0, r3
    9ca0:	46bd      	mov	sp, r7
    9ca2:	b004      	add	sp, #16
    9ca4:	bd80      	pop	{r7, pc}
    9ca6:	46c0      	nop			; (mov r8, r8)

00009ca8 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    9ca8:	b580      	push	{r7, lr}
    9caa:	af00      	add	r7, sp, #0
    9cac:	2000      	movs	r0, #0
    9cae:	4b02      	ldr	r3, [pc, #8]	; (9cb8 <TC3_Handler+0x10>)
    9cb0:	4798      	blx	r3
    9cb2:	46c0      	nop			; (mov r8, r8)
    9cb4:	46bd      	mov	sp, r7
    9cb6:	bd80      	pop	{r7, pc}
    9cb8:	00009ce5 	.word	0x00009ce5

00009cbc <TC4_Handler>:
    9cbc:	b580      	push	{r7, lr}
    9cbe:	af00      	add	r7, sp, #0
    9cc0:	2001      	movs	r0, #1
    9cc2:	4b02      	ldr	r3, [pc, #8]	; (9ccc <TC4_Handler+0x10>)
    9cc4:	4798      	blx	r3
    9cc6:	46c0      	nop			; (mov r8, r8)
    9cc8:	46bd      	mov	sp, r7
    9cca:	bd80      	pop	{r7, pc}
    9ccc:	00009ce5 	.word	0x00009ce5

00009cd0 <TC5_Handler>:
    9cd0:	b580      	push	{r7, lr}
    9cd2:	af00      	add	r7, sp, #0
    9cd4:	2002      	movs	r0, #2
    9cd6:	4b02      	ldr	r3, [pc, #8]	; (9ce0 <TC5_Handler+0x10>)
    9cd8:	4798      	blx	r3
    9cda:	46c0      	nop			; (mov r8, r8)
    9cdc:	46bd      	mov	sp, r7
    9cde:	bd80      	pop	{r7, pc}
    9ce0:	00009ce5 	.word	0x00009ce5

00009ce4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    9ce4:	b580      	push	{r7, lr}
    9ce6:	b084      	sub	sp, #16
    9ce8:	af00      	add	r7, sp, #0
    9cea:	0002      	movs	r2, r0
    9cec:	1dfb      	adds	r3, r7, #7
    9cee:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    9cf0:	1dfb      	adds	r3, r7, #7
    9cf2:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    9cf4:	4b28      	ldr	r3, [pc, #160]	; (9d98 <_tc_interrupt_handler+0xb4>)
    9cf6:	0092      	lsls	r2, r2, #2
    9cf8:	58d3      	ldr	r3, [r2, r3]
    9cfa:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    9cfc:	68fb      	ldr	r3, [r7, #12]
    9cfe:	681b      	ldr	r3, [r3, #0]
    9d00:	7b9b      	ldrb	r3, [r3, #14]
    9d02:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    9d04:	68fa      	ldr	r2, [r7, #12]
    9d06:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    9d08:	4013      	ands	r3, r2
    9d0a:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    9d0c:	68fb      	ldr	r3, [r7, #12]
    9d0e:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    9d10:	230b      	movs	r3, #11
    9d12:	18fb      	adds	r3, r7, r3
    9d14:	400a      	ands	r2, r1
    9d16:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    9d18:	230b      	movs	r3, #11
    9d1a:	18fb      	adds	r3, r7, r3
    9d1c:	781b      	ldrb	r3, [r3, #0]
    9d1e:	2201      	movs	r2, #1
    9d20:	4013      	ands	r3, r2
    9d22:	d008      	beq.n	9d36 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    9d24:	68fb      	ldr	r3, [r7, #12]
    9d26:	689b      	ldr	r3, [r3, #8]
    9d28:	68fa      	ldr	r2, [r7, #12]
    9d2a:	0010      	movs	r0, r2
    9d2c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    9d2e:	68fb      	ldr	r3, [r7, #12]
    9d30:	681b      	ldr	r3, [r3, #0]
    9d32:	2201      	movs	r2, #1
    9d34:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    9d36:	230b      	movs	r3, #11
    9d38:	18fb      	adds	r3, r7, r3
    9d3a:	781b      	ldrb	r3, [r3, #0]
    9d3c:	2202      	movs	r2, #2
    9d3e:	4013      	ands	r3, r2
    9d40:	d008      	beq.n	9d54 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    9d42:	68fb      	ldr	r3, [r7, #12]
    9d44:	68db      	ldr	r3, [r3, #12]
    9d46:	68fa      	ldr	r2, [r7, #12]
    9d48:	0010      	movs	r0, r2
    9d4a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    9d4c:	68fb      	ldr	r3, [r7, #12]
    9d4e:	681b      	ldr	r3, [r3, #0]
    9d50:	2202      	movs	r2, #2
    9d52:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    9d54:	230b      	movs	r3, #11
    9d56:	18fb      	adds	r3, r7, r3
    9d58:	781b      	ldrb	r3, [r3, #0]
    9d5a:	2210      	movs	r2, #16
    9d5c:	4013      	ands	r3, r2
    9d5e:	d008      	beq.n	9d72 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    9d60:	68fb      	ldr	r3, [r7, #12]
    9d62:	691b      	ldr	r3, [r3, #16]
    9d64:	68fa      	ldr	r2, [r7, #12]
    9d66:	0010      	movs	r0, r2
    9d68:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    9d6a:	68fb      	ldr	r3, [r7, #12]
    9d6c:	681b      	ldr	r3, [r3, #0]
    9d6e:	2210      	movs	r2, #16
    9d70:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    9d72:	230b      	movs	r3, #11
    9d74:	18fb      	adds	r3, r7, r3
    9d76:	781b      	ldrb	r3, [r3, #0]
    9d78:	2220      	movs	r2, #32
    9d7a:	4013      	ands	r3, r2
    9d7c:	d008      	beq.n	9d90 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    9d7e:	68fb      	ldr	r3, [r7, #12]
    9d80:	695b      	ldr	r3, [r3, #20]
    9d82:	68fa      	ldr	r2, [r7, #12]
    9d84:	0010      	movs	r0, r2
    9d86:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    9d88:	68fb      	ldr	r3, [r7, #12]
    9d8a:	681b      	ldr	r3, [r3, #0]
    9d8c:	2220      	movs	r2, #32
    9d8e:	739a      	strb	r2, [r3, #14]
	}
}
    9d90:	46c0      	nop			; (mov r8, r8)
    9d92:	46bd      	mov	sp, r7
    9d94:	b004      	add	sp, #16
    9d96:	bd80      	pop	{r7, pc}
    9d98:	20001080 	.word	0x20001080

00009d9c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    9d9c:	b580      	push	{r7, lr}
    9d9e:	b082      	sub	sp, #8
    9da0:	af00      	add	r7, sp, #0
    9da2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9da4:	687b      	ldr	r3, [r7, #4]
    9da6:	2280      	movs	r2, #128	; 0x80
    9da8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9daa:	687b      	ldr	r3, [r7, #4]
    9dac:	2200      	movs	r2, #0
    9dae:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9db0:	687b      	ldr	r3, [r7, #4]
    9db2:	2201      	movs	r2, #1
    9db4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    9db6:	687b      	ldr	r3, [r7, #4]
    9db8:	2200      	movs	r2, #0
    9dba:	70da      	strb	r2, [r3, #3]
}
    9dbc:	46c0      	nop			; (mov r8, r8)
    9dbe:	46bd      	mov	sp, r7
    9dc0:	b002      	add	sp, #8
    9dc2:	bd80      	pop	{r7, pc}

00009dc4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    9dc4:	b580      	push	{r7, lr}
    9dc6:	b084      	sub	sp, #16
    9dc8:	af00      	add	r7, sp, #0
    9dca:	0002      	movs	r2, r0
    9dcc:	1dfb      	adds	r3, r7, #7
    9dce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9dd0:	230f      	movs	r3, #15
    9dd2:	18fb      	adds	r3, r7, r3
    9dd4:	1dfa      	adds	r2, r7, #7
    9dd6:	7812      	ldrb	r2, [r2, #0]
    9dd8:	09d2      	lsrs	r2, r2, #7
    9dda:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    9ddc:	230e      	movs	r3, #14
    9dde:	18fb      	adds	r3, r7, r3
    9de0:	1dfa      	adds	r2, r7, #7
    9de2:	7812      	ldrb	r2, [r2, #0]
    9de4:	0952      	lsrs	r2, r2, #5
    9de6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9de8:	4b0d      	ldr	r3, [pc, #52]	; (9e20 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    9dea:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    9dec:	230f      	movs	r3, #15
    9dee:	18fb      	adds	r3, r7, r3
    9df0:	781b      	ldrb	r3, [r3, #0]
    9df2:	2b00      	cmp	r3, #0
    9df4:	d10f      	bne.n	9e16 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    9df6:	230f      	movs	r3, #15
    9df8:	18fb      	adds	r3, r7, r3
    9dfa:	781b      	ldrb	r3, [r3, #0]
    9dfc:	009b      	lsls	r3, r3, #2
    9dfe:	2210      	movs	r2, #16
    9e00:	4694      	mov	ip, r2
    9e02:	44bc      	add	ip, r7
    9e04:	4463      	add	r3, ip
    9e06:	3b08      	subs	r3, #8
    9e08:	681a      	ldr	r2, [r3, #0]
    9e0a:	230e      	movs	r3, #14
    9e0c:	18fb      	adds	r3, r7, r3
    9e0e:	781b      	ldrb	r3, [r3, #0]
    9e10:	01db      	lsls	r3, r3, #7
    9e12:	18d3      	adds	r3, r2, r3
    9e14:	e000      	b.n	9e18 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    9e16:	2300      	movs	r3, #0
	}
}
    9e18:	0018      	movs	r0, r3
    9e1a:	46bd      	mov	sp, r7
    9e1c:	b004      	add	sp, #16
    9e1e:	bd80      	pop	{r7, pc}
    9e20:	41004400 	.word	0x41004400

00009e24 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    9e24:	b580      	push	{r7, lr}
    9e26:	b082      	sub	sp, #8
    9e28:	af00      	add	r7, sp, #0
    9e2a:	0002      	movs	r2, r0
    9e2c:	1dfb      	adds	r3, r7, #7
    9e2e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    9e30:	1dfb      	adds	r3, r7, #7
    9e32:	781b      	ldrb	r3, [r3, #0]
    9e34:	0018      	movs	r0, r3
    9e36:	4b03      	ldr	r3, [pc, #12]	; (9e44 <port_get_group_from_gpio_pin+0x20>)
    9e38:	4798      	blx	r3
    9e3a:	0003      	movs	r3, r0
}
    9e3c:	0018      	movs	r0, r3
    9e3e:	46bd      	mov	sp, r7
    9e40:	b002      	add	sp, #8
    9e42:	bd80      	pop	{r7, pc}
    9e44:	00009dc5 	.word	0x00009dc5

00009e48 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    9e48:	b580      	push	{r7, lr}
    9e4a:	b084      	sub	sp, #16
    9e4c:	af00      	add	r7, sp, #0
    9e4e:	0002      	movs	r2, r0
    9e50:	1dfb      	adds	r3, r7, #7
    9e52:	701a      	strb	r2, [r3, #0]
    9e54:	1dbb      	adds	r3, r7, #6
    9e56:	1c0a      	adds	r2, r1, #0
    9e58:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    9e5a:	1dfb      	adds	r3, r7, #7
    9e5c:	781b      	ldrb	r3, [r3, #0]
    9e5e:	0018      	movs	r0, r3
    9e60:	4b0d      	ldr	r3, [pc, #52]	; (9e98 <port_pin_set_output_level+0x50>)
    9e62:	4798      	blx	r3
    9e64:	0003      	movs	r3, r0
    9e66:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9e68:	1dfb      	adds	r3, r7, #7
    9e6a:	781b      	ldrb	r3, [r3, #0]
    9e6c:	221f      	movs	r2, #31
    9e6e:	4013      	ands	r3, r2
    9e70:	2201      	movs	r2, #1
    9e72:	409a      	lsls	r2, r3
    9e74:	0013      	movs	r3, r2
    9e76:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    9e78:	1dbb      	adds	r3, r7, #6
    9e7a:	781b      	ldrb	r3, [r3, #0]
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	d003      	beq.n	9e88 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    9e80:	68fb      	ldr	r3, [r7, #12]
    9e82:	68ba      	ldr	r2, [r7, #8]
    9e84:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    9e86:	e002      	b.n	9e8e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    9e88:	68fb      	ldr	r3, [r7, #12]
    9e8a:	68ba      	ldr	r2, [r7, #8]
    9e8c:	615a      	str	r2, [r3, #20]
	}
}
    9e8e:	46c0      	nop			; (mov r8, r8)
    9e90:	46bd      	mov	sp, r7
    9e92:	b004      	add	sp, #16
    9e94:	bd80      	pop	{r7, pc}
    9e96:	46c0      	nop			; (mov r8, r8)
    9e98:	00009e25 	.word	0x00009e25

00009e9c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    9e9c:	b580      	push	{r7, lr}
    9e9e:	b082      	sub	sp, #8
    9ea0:	af00      	add	r7, sp, #0
    9ea2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    9ea4:	687b      	ldr	r3, [r7, #4]
    9ea6:	2200      	movs	r2, #0
    9ea8:	701a      	strb	r2, [r3, #0]
}
    9eaa:	46c0      	nop			; (mov r8, r8)
    9eac:	46bd      	mov	sp, r7
    9eae:	b002      	add	sp, #8
    9eb0:	bd80      	pop	{r7, pc}
    9eb2:	46c0      	nop			; (mov r8, r8)

00009eb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    9eb4:	b580      	push	{r7, lr}
    9eb6:	b082      	sub	sp, #8
    9eb8:	af00      	add	r7, sp, #0
    9eba:	0002      	movs	r2, r0
    9ebc:	6039      	str	r1, [r7, #0]
    9ebe:	1dfb      	adds	r3, r7, #7
    9ec0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    9ec2:	1dfb      	adds	r3, r7, #7
    9ec4:	781b      	ldrb	r3, [r3, #0]
    9ec6:	2b01      	cmp	r3, #1
    9ec8:	d00a      	beq.n	9ee0 <system_apb_clock_set_mask+0x2c>
    9eca:	2b02      	cmp	r3, #2
    9ecc:	d00f      	beq.n	9eee <system_apb_clock_set_mask+0x3a>
    9ece:	2b00      	cmp	r3, #0
    9ed0:	d114      	bne.n	9efc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    9ed2:	4b0e      	ldr	r3, [pc, #56]	; (9f0c <system_apb_clock_set_mask+0x58>)
    9ed4:	4a0d      	ldr	r2, [pc, #52]	; (9f0c <system_apb_clock_set_mask+0x58>)
    9ed6:	6991      	ldr	r1, [r2, #24]
    9ed8:	683a      	ldr	r2, [r7, #0]
    9eda:	430a      	orrs	r2, r1
    9edc:	619a      	str	r2, [r3, #24]
			break;
    9ede:	e00f      	b.n	9f00 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    9ee0:	4b0a      	ldr	r3, [pc, #40]	; (9f0c <system_apb_clock_set_mask+0x58>)
    9ee2:	4a0a      	ldr	r2, [pc, #40]	; (9f0c <system_apb_clock_set_mask+0x58>)
    9ee4:	69d1      	ldr	r1, [r2, #28]
    9ee6:	683a      	ldr	r2, [r7, #0]
    9ee8:	430a      	orrs	r2, r1
    9eea:	61da      	str	r2, [r3, #28]
			break;
    9eec:	e008      	b.n	9f00 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    9eee:	4b07      	ldr	r3, [pc, #28]	; (9f0c <system_apb_clock_set_mask+0x58>)
    9ef0:	4a06      	ldr	r2, [pc, #24]	; (9f0c <system_apb_clock_set_mask+0x58>)
    9ef2:	6a11      	ldr	r1, [r2, #32]
    9ef4:	683a      	ldr	r2, [r7, #0]
    9ef6:	430a      	orrs	r2, r1
    9ef8:	621a      	str	r2, [r3, #32]
			break;
    9efa:	e001      	b.n	9f00 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    9efc:	2317      	movs	r3, #23
    9efe:	e000      	b.n	9f02 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    9f00:	2300      	movs	r3, #0
}
    9f02:	0018      	movs	r0, r3
    9f04:	46bd      	mov	sp, r7
    9f06:	b002      	add	sp, #8
    9f08:	bd80      	pop	{r7, pc}
    9f0a:	46c0      	nop			; (mov r8, r8)
    9f0c:	40000400 	.word	0x40000400

00009f10 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    9f10:	b580      	push	{r7, lr}
    9f12:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    9f14:	4b05      	ldr	r3, [pc, #20]	; (9f2c <system_is_debugger_present+0x1c>)
    9f16:	789b      	ldrb	r3, [r3, #2]
    9f18:	b2db      	uxtb	r3, r3
    9f1a:	001a      	movs	r2, r3
    9f1c:	2302      	movs	r3, #2
    9f1e:	4013      	ands	r3, r2
    9f20:	1e5a      	subs	r2, r3, #1
    9f22:	4193      	sbcs	r3, r2
    9f24:	b2db      	uxtb	r3, r3
}
    9f26:	0018      	movs	r0, r3
    9f28:	46bd      	mov	sp, r7
    9f2a:	bd80      	pop	{r7, pc}
    9f2c:	41002000 	.word	0x41002000

00009f30 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    9f30:	b580      	push	{r7, lr}
    9f32:	b084      	sub	sp, #16
    9f34:	af00      	add	r7, sp, #0
    9f36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9f38:	687b      	ldr	r3, [r7, #4]
    9f3a:	681b      	ldr	r3, [r3, #0]
    9f3c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    9f3e:	68fb      	ldr	r3, [r7, #12]
    9f40:	7e1b      	ldrb	r3, [r3, #24]
    9f42:	b2db      	uxtb	r3, r3
    9f44:	001a      	movs	r2, r3
    9f46:	2301      	movs	r3, #1
    9f48:	4013      	ands	r3, r2
    9f4a:	1e5a      	subs	r2, r3, #1
    9f4c:	4193      	sbcs	r3, r2
    9f4e:	b2db      	uxtb	r3, r3
}
    9f50:	0018      	movs	r0, r3
    9f52:	46bd      	mov	sp, r7
    9f54:	b004      	add	sp, #16
    9f56:	bd80      	pop	{r7, pc}

00009f58 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    9f58:	b580      	push	{r7, lr}
    9f5a:	b084      	sub	sp, #16
    9f5c:	af00      	add	r7, sp, #0
    9f5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9f60:	687b      	ldr	r3, [r7, #4]
    9f62:	681b      	ldr	r3, [r3, #0]
    9f64:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    9f66:	68fb      	ldr	r3, [r7, #12]
    9f68:	7e1b      	ldrb	r3, [r3, #24]
    9f6a:	b2db      	uxtb	r3, r3
    9f6c:	001a      	movs	r2, r3
    9f6e:	2304      	movs	r3, #4
    9f70:	4013      	ands	r3, r2
    9f72:	1e5a      	subs	r2, r3, #1
    9f74:	4193      	sbcs	r3, r2
    9f76:	b2db      	uxtb	r3, r3
}
    9f78:	0018      	movs	r0, r3
    9f7a:	46bd      	mov	sp, r7
    9f7c:	b004      	add	sp, #16
    9f7e:	bd80      	pop	{r7, pc}

00009f80 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    9f80:	b580      	push	{r7, lr}
    9f82:	b084      	sub	sp, #16
    9f84:	af00      	add	r7, sp, #0
    9f86:	6078      	str	r0, [r7, #4]
    9f88:	000a      	movs	r2, r1
    9f8a:	1cbb      	adds	r3, r7, #2
    9f8c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9f8e:	687b      	ldr	r3, [r7, #4]
    9f90:	681b      	ldr	r3, [r3, #0]
    9f92:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    9f94:	687b      	ldr	r3, [r7, #4]
    9f96:	0018      	movs	r0, r3
    9f98:	4b0a      	ldr	r3, [pc, #40]	; (9fc4 <spi_write+0x44>)
    9f9a:	4798      	blx	r3
    9f9c:	0003      	movs	r3, r0
    9f9e:	001a      	movs	r2, r3
    9fa0:	2301      	movs	r3, #1
    9fa2:	4053      	eors	r3, r2
    9fa4:	b2db      	uxtb	r3, r3
    9fa6:	2b00      	cmp	r3, #0
    9fa8:	d001      	beq.n	9fae <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    9faa:	2305      	movs	r3, #5
    9fac:	e006      	b.n	9fbc <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    9fae:	1cbb      	adds	r3, r7, #2
    9fb0:	881b      	ldrh	r3, [r3, #0]
    9fb2:	05db      	lsls	r3, r3, #23
    9fb4:	0dda      	lsrs	r2, r3, #23
    9fb6:	68fb      	ldr	r3, [r7, #12]
    9fb8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    9fba:	2300      	movs	r3, #0
}
    9fbc:	0018      	movs	r0, r3
    9fbe:	46bd      	mov	sp, r7
    9fc0:	b004      	add	sp, #16
    9fc2:	bd80      	pop	{r7, pc}
    9fc4:	00009f31 	.word	0x00009f31

00009fc8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    9fc8:	b580      	push	{r7, lr}
    9fca:	b084      	sub	sp, #16
    9fcc:	af00      	add	r7, sp, #0
    9fce:	6078      	str	r0, [r7, #4]
    9fd0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9fd2:	687b      	ldr	r3, [r7, #4]
    9fd4:	681b      	ldr	r3, [r3, #0]
    9fd6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    9fd8:	687b      	ldr	r3, [r7, #4]
    9fda:	0018      	movs	r0, r3
    9fdc:	4b1b      	ldr	r3, [pc, #108]	; (a04c <spi_read+0x84>)
    9fde:	4798      	blx	r3
    9fe0:	0003      	movs	r3, r0
    9fe2:	001a      	movs	r2, r3
    9fe4:	2301      	movs	r3, #1
    9fe6:	4053      	eors	r3, r2
    9fe8:	b2db      	uxtb	r3, r3
    9fea:	2b00      	cmp	r3, #0
    9fec:	d001      	beq.n	9ff2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    9fee:	2310      	movs	r3, #16
    9ff0:	e027      	b.n	a042 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    9ff2:	230f      	movs	r3, #15
    9ff4:	18fb      	adds	r3, r7, r3
    9ff6:	2200      	movs	r2, #0
    9ff8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9ffa:	68bb      	ldr	r3, [r7, #8]
    9ffc:	8b5b      	ldrh	r3, [r3, #26]
    9ffe:	b29b      	uxth	r3, r3
    a000:	001a      	movs	r2, r3
    a002:	2304      	movs	r3, #4
    a004:	4013      	ands	r3, r2
    a006:	d006      	beq.n	a016 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    a008:	230f      	movs	r3, #15
    a00a:	18fb      	adds	r3, r7, r3
    a00c:	221e      	movs	r2, #30
    a00e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    a010:	68bb      	ldr	r3, [r7, #8]
    a012:	2204      	movs	r2, #4
    a014:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    a016:	687b      	ldr	r3, [r7, #4]
    a018:	799b      	ldrb	r3, [r3, #6]
    a01a:	2b01      	cmp	r3, #1
    a01c:	d108      	bne.n	a030 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    a01e:	68bb      	ldr	r3, [r7, #8]
    a020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a022:	b29b      	uxth	r3, r3
    a024:	05db      	lsls	r3, r3, #23
    a026:	0ddb      	lsrs	r3, r3, #23
    a028:	b29a      	uxth	r2, r3
    a02a:	683b      	ldr	r3, [r7, #0]
    a02c:	801a      	strh	r2, [r3, #0]
    a02e:	e005      	b.n	a03c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    a030:	68bb      	ldr	r3, [r7, #8]
    a032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a034:	b2db      	uxtb	r3, r3
    a036:	b29a      	uxth	r2, r3
    a038:	683b      	ldr	r3, [r7, #0]
    a03a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    a03c:	230f      	movs	r3, #15
    a03e:	18fb      	adds	r3, r7, r3
    a040:	781b      	ldrb	r3, [r3, #0]
}
    a042:	0018      	movs	r0, r3
    a044:	46bd      	mov	sp, r7
    a046:	b004      	add	sp, #16
    a048:	bd80      	pop	{r7, pc}
    a04a:	46c0      	nop			; (mov r8, r8)
    a04c:	00009f59 	.word	0x00009f59

0000a050 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    a050:	b590      	push	{r4, r7, lr}
    a052:	b093      	sub	sp, #76	; 0x4c
    a054:	af00      	add	r7, sp, #0
    a056:	6078      	str	r0, [r7, #4]
    a058:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a05a:	687b      	ldr	r3, [r7, #4]
    a05c:	681b      	ldr	r3, [r3, #0]
    a05e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    a060:	687b      	ldr	r3, [r7, #4]
    a062:	681b      	ldr	r3, [r3, #0]
    a064:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    a066:	231c      	movs	r3, #28
    a068:	18fb      	adds	r3, r7, r3
    a06a:	0018      	movs	r0, r3
    a06c:	4b85      	ldr	r3, [pc, #532]	; (a284 <_spi_set_config+0x234>)
    a06e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a070:	231c      	movs	r3, #28
    a072:	18fb      	adds	r3, r7, r3
    a074:	2200      	movs	r2, #0
    a076:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    a078:	683b      	ldr	r3, [r7, #0]
    a07a:	781b      	ldrb	r3, [r3, #0]
    a07c:	2b00      	cmp	r3, #0
    a07e:	d103      	bne.n	a088 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    a080:	231c      	movs	r3, #28
    a082:	18fb      	adds	r3, r7, r3
    a084:	2200      	movs	r2, #0
    a086:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    a088:	683b      	ldr	r3, [r7, #0]
    a08a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    a08c:	230c      	movs	r3, #12
    a08e:	18fb      	adds	r3, r7, r3
    a090:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    a092:	683b      	ldr	r3, [r7, #0]
    a094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    a096:	230c      	movs	r3, #12
    a098:	18fb      	adds	r3, r7, r3
    a09a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    a09c:	683b      	ldr	r3, [r7, #0]
    a09e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    a0a0:	230c      	movs	r3, #12
    a0a2:	18fb      	adds	r3, r7, r3
    a0a4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    a0a6:	683b      	ldr	r3, [r7, #0]
    a0a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    a0aa:	230c      	movs	r3, #12
    a0ac:	18fb      	adds	r3, r7, r3
    a0ae:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    a0b0:	2347      	movs	r3, #71	; 0x47
    a0b2:	18fb      	adds	r3, r7, r3
    a0b4:	2200      	movs	r2, #0
    a0b6:	701a      	strb	r2, [r3, #0]
    a0b8:	e02c      	b.n	a114 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    a0ba:	2347      	movs	r3, #71	; 0x47
    a0bc:	18fb      	adds	r3, r7, r3
    a0be:	781a      	ldrb	r2, [r3, #0]
    a0c0:	230c      	movs	r3, #12
    a0c2:	18fb      	adds	r3, r7, r3
    a0c4:	0092      	lsls	r2, r2, #2
    a0c6:	58d3      	ldr	r3, [r2, r3]
    a0c8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    a0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	d109      	bne.n	a0e4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    a0d0:	2347      	movs	r3, #71	; 0x47
    a0d2:	18fb      	adds	r3, r7, r3
    a0d4:	781a      	ldrb	r2, [r3, #0]
    a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a0d8:	0011      	movs	r1, r2
    a0da:	0018      	movs	r0, r3
    a0dc:	4b6a      	ldr	r3, [pc, #424]	; (a288 <_spi_set_config+0x238>)
    a0de:	4798      	blx	r3
    a0e0:	0003      	movs	r3, r0
    a0e2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    a0e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a0e6:	3301      	adds	r3, #1
    a0e8:	d00d      	beq.n	a106 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    a0ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a0ec:	b2da      	uxtb	r2, r3
    a0ee:	231c      	movs	r3, #28
    a0f0:	18fb      	adds	r3, r7, r3
    a0f2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    a0f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a0f6:	0c1b      	lsrs	r3, r3, #16
    a0f8:	b2db      	uxtb	r3, r3
    a0fa:	221c      	movs	r2, #28
    a0fc:	18ba      	adds	r2, r7, r2
    a0fe:	0011      	movs	r1, r2
    a100:	0018      	movs	r0, r3
    a102:	4b62      	ldr	r3, [pc, #392]	; (a28c <_spi_set_config+0x23c>)
    a104:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    a106:	2347      	movs	r3, #71	; 0x47
    a108:	18fb      	adds	r3, r7, r3
    a10a:	781a      	ldrb	r2, [r3, #0]
    a10c:	2347      	movs	r3, #71	; 0x47
    a10e:	18fb      	adds	r3, r7, r3
    a110:	3201      	adds	r2, #1
    a112:	701a      	strb	r2, [r3, #0]
    a114:	2347      	movs	r3, #71	; 0x47
    a116:	18fb      	adds	r3, r7, r3
    a118:	781b      	ldrb	r3, [r3, #0]
    a11a:	2b03      	cmp	r3, #3
    a11c:	d9cd      	bls.n	a0ba <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    a11e:	683b      	ldr	r3, [r7, #0]
    a120:	781a      	ldrb	r2, [r3, #0]
    a122:	687b      	ldr	r3, [r7, #4]
    a124:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    a126:	683b      	ldr	r3, [r7, #0]
    a128:	7c1a      	ldrb	r2, [r3, #16]
    a12a:	687b      	ldr	r3, [r7, #4]
    a12c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    a12e:	683b      	ldr	r3, [r7, #0]
    a130:	7c9a      	ldrb	r2, [r3, #18]
    a132:	687b      	ldr	r3, [r7, #4]
    a134:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    a136:	683b      	ldr	r3, [r7, #0]
    a138:	7d1a      	ldrb	r2, [r3, #20]
    a13a:	687b      	ldr	r3, [r7, #4]
    a13c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    a13e:	230a      	movs	r3, #10
    a140:	18fb      	adds	r3, r7, r3
    a142:	2200      	movs	r2, #0
    a144:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    a146:	2300      	movs	r3, #0
    a148:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    a14a:	2300      	movs	r3, #0
    a14c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    a14e:	683b      	ldr	r3, [r7, #0]
    a150:	781b      	ldrb	r3, [r3, #0]
    a152:	2b01      	cmp	r3, #1
    a154:	d129      	bne.n	a1aa <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	681b      	ldr	r3, [r3, #0]
    a15a:	0018      	movs	r0, r3
    a15c:	4b4c      	ldr	r3, [pc, #304]	; (a290 <_spi_set_config+0x240>)
    a15e:	4798      	blx	r3
    a160:	0003      	movs	r3, r0
    a162:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a166:	3314      	adds	r3, #20
    a168:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    a16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a16c:	b2db      	uxtb	r3, r3
    a16e:	0018      	movs	r0, r3
    a170:	4b48      	ldr	r3, [pc, #288]	; (a294 <_spi_set_config+0x244>)
    a172:	4798      	blx	r3
    a174:	0003      	movs	r3, r0
    a176:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    a178:	683b      	ldr	r3, [r7, #0]
    a17a:	699b      	ldr	r3, [r3, #24]
    a17c:	2223      	movs	r2, #35	; 0x23
    a17e:	18bc      	adds	r4, r7, r2
    a180:	220a      	movs	r2, #10
    a182:	18ba      	adds	r2, r7, r2
    a184:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a186:	0018      	movs	r0, r3
    a188:	4b43      	ldr	r3, [pc, #268]	; (a298 <_spi_set_config+0x248>)
    a18a:	4798      	blx	r3
    a18c:	0003      	movs	r3, r0
    a18e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    a190:	2323      	movs	r3, #35	; 0x23
    a192:	18fb      	adds	r3, r7, r3
    a194:	781b      	ldrb	r3, [r3, #0]
    a196:	2b00      	cmp	r3, #0
    a198:	d001      	beq.n	a19e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    a19a:	2317      	movs	r3, #23
    a19c:	e06d      	b.n	a27a <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    a19e:	230a      	movs	r3, #10
    a1a0:	18fb      	adds	r3, r7, r3
    a1a2:	881b      	ldrh	r3, [r3, #0]
    a1a4:	b2da      	uxtb	r2, r3
    a1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a1a8:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    a1aa:	683b      	ldr	r3, [r7, #0]
    a1ac:	781b      	ldrb	r3, [r3, #0]
    a1ae:	2b00      	cmp	r3, #0
    a1b0:	d11a      	bne.n	a1e8 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    a1b2:	683b      	ldr	r3, [r7, #0]
    a1b4:	699b      	ldr	r3, [r3, #24]
    a1b6:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    a1b8:	683b      	ldr	r3, [r7, #0]
    a1ba:	8b9b      	ldrh	r3, [r3, #28]
    a1bc:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    a1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    a1c2:	683a      	ldr	r2, [r7, #0]
    a1c4:	7f92      	ldrb	r2, [r2, #30]
    a1c6:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    a1c8:	683a      	ldr	r2, [r7, #0]
    a1ca:	7fd2      	ldrb	r2, [r2, #31]
    a1cc:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    a1ce:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    a1d0:	431a      	orrs	r2, r3
    a1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a1d4:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    a1d6:	683b      	ldr	r3, [r7, #0]
    a1d8:	2220      	movs	r2, #32
    a1da:	5c9b      	ldrb	r3, [r3, r2]
    a1dc:	2b00      	cmp	r3, #0
    a1de:	d003      	beq.n	a1e8 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a1e2:	2240      	movs	r2, #64	; 0x40
    a1e4:	4313      	orrs	r3, r2
    a1e6:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    a1e8:	683b      	ldr	r3, [r7, #0]
    a1ea:	685b      	ldr	r3, [r3, #4]
    a1ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a1ee:	4313      	orrs	r3, r2
    a1f0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    a1f2:	683b      	ldr	r3, [r7, #0]
    a1f4:	689b      	ldr	r3, [r3, #8]
    a1f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a1f8:	4313      	orrs	r3, r2
    a1fa:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    a1fc:	683b      	ldr	r3, [r7, #0]
    a1fe:	68db      	ldr	r3, [r3, #12]
    a200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a202:	4313      	orrs	r3, r2
    a204:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    a206:	683b      	ldr	r3, [r7, #0]
    a208:	7c1b      	ldrb	r3, [r3, #16]
    a20a:	001a      	movs	r2, r3
    a20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a20e:	4313      	orrs	r3, r2
    a210:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    a212:	683b      	ldr	r3, [r7, #0]
    a214:	7c5b      	ldrb	r3, [r3, #17]
    a216:	2b00      	cmp	r3, #0
    a218:	d103      	bne.n	a222 <_spi_set_config+0x1d2>
    a21a:	4b20      	ldr	r3, [pc, #128]	; (a29c <_spi_set_config+0x24c>)
    a21c:	4798      	blx	r3
    a21e:	1e03      	subs	r3, r0, #0
    a220:	d003      	beq.n	a22a <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    a222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a224:	2280      	movs	r2, #128	; 0x80
    a226:	4313      	orrs	r3, r2
    a228:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    a22a:	683b      	ldr	r3, [r7, #0]
    a22c:	7c9b      	ldrb	r3, [r3, #18]
    a22e:	2b00      	cmp	r3, #0
    a230:	d004      	beq.n	a23c <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    a232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a234:	2280      	movs	r2, #128	; 0x80
    a236:	0292      	lsls	r2, r2, #10
    a238:	4313      	orrs	r3, r2
    a23a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    a23c:	683b      	ldr	r3, [r7, #0]
    a23e:	7cdb      	ldrb	r3, [r3, #19]
    a240:	2b00      	cmp	r3, #0
    a242:	d004      	beq.n	a24e <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    a244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a246:	2280      	movs	r2, #128	; 0x80
    a248:	0092      	lsls	r2, r2, #2
    a24a:	4313      	orrs	r3, r2
    a24c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    a24e:	683b      	ldr	r3, [r7, #0]
    a250:	7d1b      	ldrb	r3, [r3, #20]
    a252:	2b00      	cmp	r3, #0
    a254:	d004      	beq.n	a260 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a258:	2280      	movs	r2, #128	; 0x80
    a25a:	0192      	lsls	r2, r2, #6
    a25c:	4313      	orrs	r3, r2
    a25e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    a260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a262:	681a      	ldr	r2, [r3, #0]
    a264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a266:	431a      	orrs	r2, r3
    a268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a26a:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    a26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a26e:	685a      	ldr	r2, [r3, #4]
    a270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a272:	431a      	orrs	r2, r3
    a274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a276:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    a278:	2300      	movs	r3, #0
}
    a27a:	0018      	movs	r0, r3
    a27c:	46bd      	mov	sp, r7
    a27e:	b013      	add	sp, #76	; 0x4c
    a280:	bd90      	pop	{r4, r7, pc}
    a282:	46c0      	nop			; (mov r8, r8)
    a284:	00009d9d 	.word	0x00009d9d
    a288:	0000360d 	.word	0x0000360d
    a28c:	0000be1d 	.word	0x0000be1d
    a290:	000037cd 	.word	0x000037cd
    a294:	0000bc55 	.word	0x0000bc55
    a298:	00003505 	.word	0x00003505
    a29c:	00009f11 	.word	0x00009f11

0000a2a0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    a2a0:	b590      	push	{r4, r7, lr}
    a2a2:	b08b      	sub	sp, #44	; 0x2c
    a2a4:	af00      	add	r7, sp, #0
    a2a6:	60f8      	str	r0, [r7, #12]
    a2a8:	60b9      	str	r1, [r7, #8]
    a2aa:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    a2ac:	68fb      	ldr	r3, [r7, #12]
    a2ae:	68ba      	ldr	r2, [r7, #8]
    a2b0:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    a2b2:	68fb      	ldr	r3, [r7, #12]
    a2b4:	681b      	ldr	r3, [r3, #0]
    a2b6:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    a2b8:	6a3b      	ldr	r3, [r7, #32]
    a2ba:	681b      	ldr	r3, [r3, #0]
    a2bc:	2202      	movs	r2, #2
    a2be:	4013      	ands	r3, r2
    a2c0:	d001      	beq.n	a2c6 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    a2c2:	231c      	movs	r3, #28
    a2c4:	e0a6      	b.n	a414 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    a2c6:	6a3b      	ldr	r3, [r7, #32]
    a2c8:	681b      	ldr	r3, [r3, #0]
    a2ca:	2201      	movs	r2, #1
    a2cc:	4013      	ands	r3, r2
    a2ce:	d001      	beq.n	a2d4 <spi_init+0x34>
		return STATUS_BUSY;
    a2d0:	2305      	movs	r3, #5
    a2d2:	e09f      	b.n	a414 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a2d4:	68fb      	ldr	r3, [r7, #12]
    a2d6:	681b      	ldr	r3, [r3, #0]
    a2d8:	0018      	movs	r0, r3
    a2da:	4b50      	ldr	r3, [pc, #320]	; (a41c <spi_init+0x17c>)
    a2dc:	4798      	blx	r3
    a2de:	0003      	movs	r3, r0
    a2e0:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    a2e2:	69fb      	ldr	r3, [r7, #28]
    a2e4:	3302      	adds	r3, #2
    a2e6:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a2e8:	69fb      	ldr	r3, [r7, #28]
    a2ea:	3314      	adds	r3, #20
    a2ec:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    a2ee:	2201      	movs	r2, #1
    a2f0:	69bb      	ldr	r3, [r7, #24]
    a2f2:	409a      	lsls	r2, r3
    a2f4:	0013      	movs	r3, r2
    a2f6:	0019      	movs	r1, r3
    a2f8:	2002      	movs	r0, #2
    a2fa:	4b49      	ldr	r3, [pc, #292]	; (a420 <spi_init+0x180>)
    a2fc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    a2fe:	2310      	movs	r3, #16
    a300:	18fb      	adds	r3, r7, r3
    a302:	0018      	movs	r0, r3
    a304:	4b47      	ldr	r3, [pc, #284]	; (a424 <spi_init+0x184>)
    a306:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    a308:	687b      	ldr	r3, [r7, #4]
    a30a:	2224      	movs	r2, #36	; 0x24
    a30c:	5c9a      	ldrb	r2, [r3, r2]
    a30e:	2310      	movs	r3, #16
    a310:	18fb      	adds	r3, r7, r3
    a312:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    a314:	697b      	ldr	r3, [r7, #20]
    a316:	b2db      	uxtb	r3, r3
    a318:	2210      	movs	r2, #16
    a31a:	18ba      	adds	r2, r7, r2
    a31c:	0011      	movs	r1, r2
    a31e:	0018      	movs	r0, r3
    a320:	4b41      	ldr	r3, [pc, #260]	; (a428 <spi_init+0x188>)
    a322:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    a324:	697b      	ldr	r3, [r7, #20]
    a326:	b2db      	uxtb	r3, r3
    a328:	0018      	movs	r0, r3
    a32a:	4b40      	ldr	r3, [pc, #256]	; (a42c <spi_init+0x18c>)
    a32c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    a32e:	687b      	ldr	r3, [r7, #4]
    a330:	2224      	movs	r2, #36	; 0x24
    a332:	5c9b      	ldrb	r3, [r3, r2]
    a334:	2100      	movs	r1, #0
    a336:	0018      	movs	r0, r3
    a338:	4b3d      	ldr	r3, [pc, #244]	; (a430 <spi_init+0x190>)
    a33a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    a33c:	687b      	ldr	r3, [r7, #4]
    a33e:	781b      	ldrb	r3, [r3, #0]
    a340:	2b01      	cmp	r3, #1
    a342:	d105      	bne.n	a350 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    a344:	6a3b      	ldr	r3, [r7, #32]
    a346:	681b      	ldr	r3, [r3, #0]
    a348:	220c      	movs	r2, #12
    a34a:	431a      	orrs	r2, r3
    a34c:	6a3b      	ldr	r3, [r7, #32]
    a34e:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    a350:	687b      	ldr	r3, [r7, #4]
    a352:	781b      	ldrb	r3, [r3, #0]
    a354:	2b00      	cmp	r3, #0
    a356:	d105      	bne.n	a364 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    a358:	6a3b      	ldr	r3, [r7, #32]
    a35a:	681b      	ldr	r3, [r3, #0]
    a35c:	2208      	movs	r2, #8
    a35e:	431a      	orrs	r2, r3
    a360:	6a3b      	ldr	r3, [r7, #32]
    a362:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    a364:	2327      	movs	r3, #39	; 0x27
    a366:	18fb      	adds	r3, r7, r3
    a368:	2200      	movs	r2, #0
    a36a:	701a      	strb	r2, [r3, #0]
    a36c:	e010      	b.n	a390 <spi_init+0xf0>
		module->callback[i]        = NULL;
    a36e:	2327      	movs	r3, #39	; 0x27
    a370:	18fb      	adds	r3, r7, r3
    a372:	781b      	ldrb	r3, [r3, #0]
    a374:	68fa      	ldr	r2, [r7, #12]
    a376:	3302      	adds	r3, #2
    a378:	009b      	lsls	r3, r3, #2
    a37a:	18d3      	adds	r3, r2, r3
    a37c:	3304      	adds	r3, #4
    a37e:	2200      	movs	r2, #0
    a380:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    a382:	2327      	movs	r3, #39	; 0x27
    a384:	18fb      	adds	r3, r7, r3
    a386:	781a      	ldrb	r2, [r3, #0]
    a388:	2327      	movs	r3, #39	; 0x27
    a38a:	18fb      	adds	r3, r7, r3
    a38c:	3201      	adds	r2, #1
    a38e:	701a      	strb	r2, [r3, #0]
    a390:	2327      	movs	r3, #39	; 0x27
    a392:	18fb      	adds	r3, r7, r3
    a394:	781b      	ldrb	r3, [r3, #0]
    a396:	2b06      	cmp	r3, #6
    a398:	d9e9      	bls.n	a36e <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    a39a:	68fb      	ldr	r3, [r7, #12]
    a39c:	2200      	movs	r2, #0
    a39e:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    a3a0:	68fb      	ldr	r3, [r7, #12]
    a3a2:	2200      	movs	r2, #0
    a3a4:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    a3a6:	68fb      	ldr	r3, [r7, #12]
    a3a8:	2200      	movs	r2, #0
    a3aa:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    a3ac:	68fb      	ldr	r3, [r7, #12]
    a3ae:	2200      	movs	r2, #0
    a3b0:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    a3b2:	68fb      	ldr	r3, [r7, #12]
    a3b4:	2236      	movs	r2, #54	; 0x36
    a3b6:	2100      	movs	r1, #0
    a3b8:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    a3ba:	68fb      	ldr	r3, [r7, #12]
    a3bc:	2237      	movs	r2, #55	; 0x37
    a3be:	2100      	movs	r1, #0
    a3c0:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    a3c2:	68fb      	ldr	r3, [r7, #12]
    a3c4:	2238      	movs	r2, #56	; 0x38
    a3c6:	2100      	movs	r1, #0
    a3c8:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    a3ca:	68fb      	ldr	r3, [r7, #12]
    a3cc:	2203      	movs	r2, #3
    a3ce:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    a3d0:	68fb      	ldr	r3, [r7, #12]
    a3d2:	2200      	movs	r2, #0
    a3d4:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    a3d6:	68fb      	ldr	r3, [r7, #12]
    a3d8:	681b      	ldr	r3, [r3, #0]
    a3da:	2213      	movs	r2, #19
    a3dc:	18bc      	adds	r4, r7, r2
    a3de:	0018      	movs	r0, r3
    a3e0:	4b0e      	ldr	r3, [pc, #56]	; (a41c <spi_init+0x17c>)
    a3e2:	4798      	blx	r3
    a3e4:	0003      	movs	r3, r0
    a3e6:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    a3e8:	4a12      	ldr	r2, [pc, #72]	; (a434 <spi_init+0x194>)
    a3ea:	2313      	movs	r3, #19
    a3ec:	18fb      	adds	r3, r7, r3
    a3ee:	781b      	ldrb	r3, [r3, #0]
    a3f0:	0011      	movs	r1, r2
    a3f2:	0018      	movs	r0, r3
    a3f4:	4b10      	ldr	r3, [pc, #64]	; (a438 <spi_init+0x198>)
    a3f6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    a3f8:	2313      	movs	r3, #19
    a3fa:	18fb      	adds	r3, r7, r3
    a3fc:	781a      	ldrb	r2, [r3, #0]
    a3fe:	4b0f      	ldr	r3, [pc, #60]	; (a43c <spi_init+0x19c>)
    a400:	0092      	lsls	r2, r2, #2
    a402:	68f9      	ldr	r1, [r7, #12]
    a404:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    a406:	687a      	ldr	r2, [r7, #4]
    a408:	68fb      	ldr	r3, [r7, #12]
    a40a:	0011      	movs	r1, r2
    a40c:	0018      	movs	r0, r3
    a40e:	4b0c      	ldr	r3, [pc, #48]	; (a440 <spi_init+0x1a0>)
    a410:	4798      	blx	r3
    a412:	0003      	movs	r3, r0
}
    a414:	0018      	movs	r0, r3
    a416:	46bd      	mov	sp, r7
    a418:	b00b      	add	sp, #44	; 0x2c
    a41a:	bd90      	pop	{r4, r7, pc}
    a41c:	000037cd 	.word	0x000037cd
    a420:	00009eb5 	.word	0x00009eb5
    a424:	00009e9d 	.word	0x00009e9d
    a428:	0000bb31 	.word	0x0000bb31
    a42c:	0000bb75 	.word	0x0000bb75
    a430:	00003581 	.word	0x00003581
    a434:	0000a68d 	.word	0x0000a68d
    a438:	0000a9ad 	.word	0x0000a9ad
    a43c:	20001090 	.word	0x20001090
    a440:	0000a051 	.word	0x0000a051

0000a444 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    a444:	b580      	push	{r7, lr}
    a446:	b086      	sub	sp, #24
    a448:	af00      	add	r7, sp, #0
    a44a:	60f8      	str	r0, [r7, #12]
    a44c:	60b9      	str	r1, [r7, #8]
    a44e:	1dfb      	adds	r3, r7, #7
    a450:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    a452:	68fb      	ldr	r3, [r7, #12]
    a454:	795b      	ldrb	r3, [r3, #5]
    a456:	2b01      	cmp	r3, #1
    a458:	d001      	beq.n	a45e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    a45a:	2315      	movs	r3, #21
    a45c:	e05c      	b.n	a518 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    a45e:	68fb      	ldr	r3, [r7, #12]
    a460:	7a1b      	ldrb	r3, [r3, #8]
    a462:	2201      	movs	r2, #1
    a464:	4053      	eors	r3, r2
    a466:	b2db      	uxtb	r3, r3
    a468:	2b00      	cmp	r3, #0
    a46a:	d054      	beq.n	a516 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    a46c:	1dfb      	adds	r3, r7, #7
    a46e:	781b      	ldrb	r3, [r3, #0]
    a470:	2b00      	cmp	r3, #0
    a472:	d04a      	beq.n	a50a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    a474:	68bb      	ldr	r3, [r7, #8]
    a476:	785b      	ldrb	r3, [r3, #1]
    a478:	2b00      	cmp	r3, #0
    a47a:	d03f      	beq.n	a4fc <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    a47c:	68fb      	ldr	r3, [r7, #12]
    a47e:	0018      	movs	r0, r3
    a480:	4b27      	ldr	r3, [pc, #156]	; (a520 <spi_select_slave+0xdc>)
    a482:	4798      	blx	r3
    a484:	0003      	movs	r3, r0
    a486:	001a      	movs	r2, r3
    a488:	2301      	movs	r3, #1
    a48a:	4053      	eors	r3, r2
    a48c:	b2db      	uxtb	r3, r3
    a48e:	2b00      	cmp	r3, #0
    a490:	d007      	beq.n	a4a2 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    a492:	68bb      	ldr	r3, [r7, #8]
    a494:	781b      	ldrb	r3, [r3, #0]
    a496:	2101      	movs	r1, #1
    a498:	0018      	movs	r0, r3
    a49a:	4b22      	ldr	r3, [pc, #136]	; (a524 <spi_select_slave+0xe0>)
    a49c:	4798      	blx	r3
					return STATUS_BUSY;
    a49e:	2305      	movs	r3, #5
    a4a0:	e03a      	b.n	a518 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    a4a2:	68bb      	ldr	r3, [r7, #8]
    a4a4:	781b      	ldrb	r3, [r3, #0]
    a4a6:	2100      	movs	r1, #0
    a4a8:	0018      	movs	r0, r3
    a4aa:	4b1e      	ldr	r3, [pc, #120]	; (a524 <spi_select_slave+0xe0>)
    a4ac:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    a4ae:	68bb      	ldr	r3, [r7, #8]
    a4b0:	789b      	ldrb	r3, [r3, #2]
    a4b2:	b29a      	uxth	r2, r3
    a4b4:	68fb      	ldr	r3, [r7, #12]
    a4b6:	0011      	movs	r1, r2
    a4b8:	0018      	movs	r0, r3
    a4ba:	4b1b      	ldr	r3, [pc, #108]	; (a528 <spi_select_slave+0xe4>)
    a4bc:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    a4be:	68fb      	ldr	r3, [r7, #12]
    a4c0:	79db      	ldrb	r3, [r3, #7]
    a4c2:	2201      	movs	r2, #1
    a4c4:	4053      	eors	r3, r2
    a4c6:	b2db      	uxtb	r3, r3
    a4c8:	2b00      	cmp	r3, #0
    a4ca:	d024      	beq.n	a516 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    a4cc:	46c0      	nop			; (mov r8, r8)
    a4ce:	68fb      	ldr	r3, [r7, #12]
    a4d0:	0018      	movs	r0, r3
    a4d2:	4b16      	ldr	r3, [pc, #88]	; (a52c <spi_select_slave+0xe8>)
    a4d4:	4798      	blx	r3
    a4d6:	0003      	movs	r3, r0
    a4d8:	001a      	movs	r2, r3
    a4da:	2301      	movs	r3, #1
    a4dc:	4053      	eors	r3, r2
    a4de:	b2db      	uxtb	r3, r3
    a4e0:	2b00      	cmp	r3, #0
    a4e2:	d1f4      	bne.n	a4ce <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    a4e4:	2316      	movs	r3, #22
    a4e6:	18fb      	adds	r3, r7, r3
    a4e8:	2200      	movs	r2, #0
    a4ea:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    a4ec:	2316      	movs	r3, #22
    a4ee:	18fa      	adds	r2, r7, r3
    a4f0:	68fb      	ldr	r3, [r7, #12]
    a4f2:	0011      	movs	r1, r2
    a4f4:	0018      	movs	r0, r3
    a4f6:	4b0e      	ldr	r3, [pc, #56]	; (a530 <spi_select_slave+0xec>)
    a4f8:	4798      	blx	r3
    a4fa:	e00c      	b.n	a516 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    a4fc:	68bb      	ldr	r3, [r7, #8]
    a4fe:	781b      	ldrb	r3, [r3, #0]
    a500:	2100      	movs	r1, #0
    a502:	0018      	movs	r0, r3
    a504:	4b07      	ldr	r3, [pc, #28]	; (a524 <spi_select_slave+0xe0>)
    a506:	4798      	blx	r3
    a508:	e005      	b.n	a516 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    a50a:	68bb      	ldr	r3, [r7, #8]
    a50c:	781b      	ldrb	r3, [r3, #0]
    a50e:	2101      	movs	r1, #1
    a510:	0018      	movs	r0, r3
    a512:	4b04      	ldr	r3, [pc, #16]	; (a524 <spi_select_slave+0xe0>)
    a514:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    a516:	2300      	movs	r3, #0
}
    a518:	0018      	movs	r0, r3
    a51a:	46bd      	mov	sp, r7
    a51c:	b006      	add	sp, #24
    a51e:	bd80      	pop	{r7, pc}
    a520:	00009f31 	.word	0x00009f31
    a524:	00009e49 	.word	0x00009e49
    a528:	00009f81 	.word	0x00009f81
    a52c:	00009f59 	.word	0x00009f59
    a530:	00009fc9 	.word	0x00009fc9

0000a534 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    a534:	b580      	push	{r7, lr}
    a536:	b084      	sub	sp, #16
    a538:	af00      	add	r7, sp, #0
    a53a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a53c:	687b      	ldr	r3, [r7, #4]
    a53e:	681b      	ldr	r3, [r3, #0]
    a540:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    a542:	687b      	ldr	r3, [r7, #4]
    a544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a546:	781b      	ldrb	r3, [r3, #0]
    a548:	b2da      	uxtb	r2, r3
    a54a:	230e      	movs	r3, #14
    a54c:	18fb      	adds	r3, r7, r3
    a54e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    a550:	687b      	ldr	r3, [r7, #4]
    a552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a554:	1c5a      	adds	r2, r3, #1
    a556:	687b      	ldr	r3, [r7, #4]
    a558:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    a55a:	687b      	ldr	r3, [r7, #4]
    a55c:	799b      	ldrb	r3, [r3, #6]
    a55e:	2b01      	cmp	r3, #1
    a560:	d113      	bne.n	a58a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    a562:	687b      	ldr	r3, [r7, #4]
    a564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a566:	781b      	ldrb	r3, [r3, #0]
    a568:	b2db      	uxtb	r3, r3
    a56a:	021b      	lsls	r3, r3, #8
    a56c:	b21a      	sxth	r2, r3
    a56e:	230e      	movs	r3, #14
    a570:	18fb      	adds	r3, r7, r3
    a572:	2100      	movs	r1, #0
    a574:	5e5b      	ldrsh	r3, [r3, r1]
    a576:	4313      	orrs	r3, r2
    a578:	b21a      	sxth	r2, r3
    a57a:	230e      	movs	r3, #14
    a57c:	18fb      	adds	r3, r7, r3
    a57e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    a580:	687b      	ldr	r3, [r7, #4]
    a582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a584:	1c5a      	adds	r2, r3, #1
    a586:	687b      	ldr	r3, [r7, #4]
    a588:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    a58a:	230e      	movs	r3, #14
    a58c:	18fb      	adds	r3, r7, r3
    a58e:	881b      	ldrh	r3, [r3, #0]
    a590:	05db      	lsls	r3, r3, #23
    a592:	0dda      	lsrs	r2, r3, #23
    a594:	68bb      	ldr	r3, [r7, #8]
    a596:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    a598:	687b      	ldr	r3, [r7, #4]
    a59a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    a59c:	b29b      	uxth	r3, r3
    a59e:	3b01      	subs	r3, #1
    a5a0:	b29a      	uxth	r2, r3
    a5a2:	687b      	ldr	r3, [r7, #4]
    a5a4:	869a      	strh	r2, [r3, #52]	; 0x34
}
    a5a6:	46c0      	nop			; (mov r8, r8)
    a5a8:	46bd      	mov	sp, r7
    a5aa:	b004      	add	sp, #16
    a5ac:	bd80      	pop	{r7, pc}
    a5ae:	46c0      	nop			; (mov r8, r8)

0000a5b0 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    a5b0:	b580      	push	{r7, lr}
    a5b2:	b084      	sub	sp, #16
    a5b4:	af00      	add	r7, sp, #0
    a5b6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a5b8:	687b      	ldr	r3, [r7, #4]
    a5ba:	681b      	ldr	r3, [r3, #0]
    a5bc:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    a5be:	4b08      	ldr	r3, [pc, #32]	; (a5e0 <_spi_write_dummy+0x30>)
    a5c0:	881b      	ldrh	r3, [r3, #0]
    a5c2:	001a      	movs	r2, r3
    a5c4:	68fb      	ldr	r3, [r7, #12]
    a5c6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    a5c8:	687b      	ldr	r3, [r7, #4]
    a5ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a5cc:	b29b      	uxth	r3, r3
    a5ce:	3b01      	subs	r3, #1
    a5d0:	b29a      	uxth	r2, r3
    a5d2:	687b      	ldr	r3, [r7, #4]
    a5d4:	865a      	strh	r2, [r3, #50]	; 0x32
}
    a5d6:	46c0      	nop			; (mov r8, r8)
    a5d8:	46bd      	mov	sp, r7
    a5da:	b004      	add	sp, #16
    a5dc:	bd80      	pop	{r7, pc}
    a5de:	46c0      	nop			; (mov r8, r8)
    a5e0:	2000108c 	.word	0x2000108c

0000a5e4 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    a5e4:	b580      	push	{r7, lr}
    a5e6:	b084      	sub	sp, #16
    a5e8:	af00      	add	r7, sp, #0
    a5ea:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a5ec:	687b      	ldr	r3, [r7, #4]
    a5ee:	681b      	ldr	r3, [r3, #0]
    a5f0:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    a5f2:	230a      	movs	r3, #10
    a5f4:	18fb      	adds	r3, r7, r3
    a5f6:	2200      	movs	r2, #0
    a5f8:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    a5fa:	68fb      	ldr	r3, [r7, #12]
    a5fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a5fe:	230a      	movs	r3, #10
    a600:	18fb      	adds	r3, r7, r3
    a602:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    a604:	687b      	ldr	r3, [r7, #4]
    a606:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a608:	b29b      	uxth	r3, r3
    a60a:	3b01      	subs	r3, #1
    a60c:	b29a      	uxth	r2, r3
    a60e:	687b      	ldr	r3, [r7, #4]
    a610:	865a      	strh	r2, [r3, #50]	; 0x32
}
    a612:	46c0      	nop			; (mov r8, r8)
    a614:	46bd      	mov	sp, r7
    a616:	b004      	add	sp, #16
    a618:	bd80      	pop	{r7, pc}
    a61a:	46c0      	nop			; (mov r8, r8)

0000a61c <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    a61c:	b580      	push	{r7, lr}
    a61e:	b084      	sub	sp, #16
    a620:	af00      	add	r7, sp, #0
    a622:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a624:	687b      	ldr	r3, [r7, #4]
    a626:	681b      	ldr	r3, [r3, #0]
    a628:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    a62a:	68fb      	ldr	r3, [r7, #12]
    a62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a62e:	b29a      	uxth	r2, r3
    a630:	230a      	movs	r3, #10
    a632:	18fb      	adds	r3, r7, r3
    a634:	05d2      	lsls	r2, r2, #23
    a636:	0dd2      	lsrs	r2, r2, #23
    a638:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    a63a:	687b      	ldr	r3, [r7, #4]
    a63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a63e:	220a      	movs	r2, #10
    a640:	18ba      	adds	r2, r7, r2
    a642:	8812      	ldrh	r2, [r2, #0]
    a644:	b2d2      	uxtb	r2, r2
    a646:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    a648:	687b      	ldr	r3, [r7, #4]
    a64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a64c:	1c5a      	adds	r2, r3, #1
    a64e:	687b      	ldr	r3, [r7, #4]
    a650:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    a652:	687b      	ldr	r3, [r7, #4]
    a654:	799b      	ldrb	r3, [r3, #6]
    a656:	2b01      	cmp	r3, #1
    a658:	d10d      	bne.n	a676 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    a65a:	687b      	ldr	r3, [r7, #4]
    a65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a65e:	220a      	movs	r2, #10
    a660:	18ba      	adds	r2, r7, r2
    a662:	8812      	ldrh	r2, [r2, #0]
    a664:	0a12      	lsrs	r2, r2, #8
    a666:	b292      	uxth	r2, r2
    a668:	b2d2      	uxtb	r2, r2
    a66a:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    a66c:	687b      	ldr	r3, [r7, #4]
    a66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a670:	1c5a      	adds	r2, r3, #1
    a672:	687b      	ldr	r3, [r7, #4]
    a674:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    a676:	687b      	ldr	r3, [r7, #4]
    a678:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    a67a:	b29b      	uxth	r3, r3
    a67c:	3b01      	subs	r3, #1
    a67e:	b29a      	uxth	r2, r3
    a680:	687b      	ldr	r3, [r7, #4]
    a682:	861a      	strh	r2, [r3, #48]	; 0x30
}
    a684:	46c0      	nop			; (mov r8, r8)
    a686:	46bd      	mov	sp, r7
    a688:	b004      	add	sp, #16
    a68a:	bd80      	pop	{r7, pc}

0000a68c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    a68c:	b580      	push	{r7, lr}
    a68e:	b086      	sub	sp, #24
    a690:	af00      	add	r7, sp, #0
    a692:	0002      	movs	r2, r0
    a694:	1dfb      	adds	r3, r7, #7
    a696:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    a698:	1dfb      	adds	r3, r7, #7
    a69a:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    a69c:	4bb9      	ldr	r3, [pc, #740]	; (a984 <_spi_interrupt_handler+0x2f8>)
    a69e:	0092      	lsls	r2, r2, #2
    a6a0:	58d3      	ldr	r3, [r2, r3]
    a6a2:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a6a4:	697b      	ldr	r3, [r7, #20]
    a6a6:	681b      	ldr	r3, [r3, #0]
    a6a8:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    a6aa:	697b      	ldr	r3, [r7, #20]
    a6ac:	2237      	movs	r2, #55	; 0x37
    a6ae:	5c9a      	ldrb	r2, [r3, r2]
    a6b0:	697b      	ldr	r3, [r7, #20]
    a6b2:	2136      	movs	r1, #54	; 0x36
    a6b4:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    a6b6:	230f      	movs	r3, #15
    a6b8:	18fb      	adds	r3, r7, r3
    a6ba:	400a      	ands	r2, r1
    a6bc:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    a6be:	693b      	ldr	r3, [r7, #16]
    a6c0:	7e1b      	ldrb	r3, [r3, #24]
    a6c2:	b2da      	uxtb	r2, r3
    a6c4:	230c      	movs	r3, #12
    a6c6:	18fb      	adds	r3, r7, r3
    a6c8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    a6ca:	693b      	ldr	r3, [r7, #16]
    a6cc:	7d9b      	ldrb	r3, [r3, #22]
    a6ce:	b2db      	uxtb	r3, r3
    a6d0:	b29a      	uxth	r2, r3
    a6d2:	230c      	movs	r3, #12
    a6d4:	18fb      	adds	r3, r7, r3
    a6d6:	210c      	movs	r1, #12
    a6d8:	1879      	adds	r1, r7, r1
    a6da:	8809      	ldrh	r1, [r1, #0]
    a6dc:	400a      	ands	r2, r1
    a6de:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    a6e0:	230c      	movs	r3, #12
    a6e2:	18fb      	adds	r3, r7, r3
    a6e4:	881b      	ldrh	r3, [r3, #0]
    a6e6:	2201      	movs	r2, #1
    a6e8:	4013      	ands	r3, r2
    a6ea:	d041      	beq.n	a770 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    a6ec:	697b      	ldr	r3, [r7, #20]
    a6ee:	795b      	ldrb	r3, [r3, #5]
    a6f0:	2b01      	cmp	r3, #1
    a6f2:	d110      	bne.n	a716 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    a6f4:	697b      	ldr	r3, [r7, #20]
    a6f6:	7a5b      	ldrb	r3, [r3, #9]
    a6f8:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    a6fa:	2b00      	cmp	r3, #0
    a6fc:	d10b      	bne.n	a716 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    a6fe:	697b      	ldr	r3, [r7, #20]
    a700:	0018      	movs	r0, r3
    a702:	4ba1      	ldr	r3, [pc, #644]	; (a988 <_spi_interrupt_handler+0x2fc>)
    a704:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    a706:	697b      	ldr	r3, [r7, #20]
    a708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a70a:	b29b      	uxth	r3, r3
    a70c:	2b00      	cmp	r3, #0
    a70e:	d102      	bne.n	a716 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    a710:	693b      	ldr	r3, [r7, #16]
    a712:	2201      	movs	r2, #1
    a714:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    a716:	697b      	ldr	r3, [r7, #20]
    a718:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    a71a:	2b01      	cmp	r3, #1
    a71c:	d104      	bne.n	a728 <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    a71e:	697b      	ldr	r3, [r7, #20]
    a720:	7a5b      	ldrb	r3, [r3, #9]
    a722:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    a724:	2b00      	cmp	r3, #0
    a726:	d108      	bne.n	a73a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    a728:	697b      	ldr	r3, [r7, #20]
    a72a:	795b      	ldrb	r3, [r3, #5]
    a72c:	2b00      	cmp	r3, #0
    a72e:	d11f      	bne.n	a770 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    a730:	697b      	ldr	r3, [r7, #20]
    a732:	7a5b      	ldrb	r3, [r3, #9]
    a734:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    a736:	2b00      	cmp	r3, #0
    a738:	d01a      	beq.n	a770 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    a73a:	697b      	ldr	r3, [r7, #20]
    a73c:	0018      	movs	r0, r3
    a73e:	4b93      	ldr	r3, [pc, #588]	; (a98c <_spi_interrupt_handler+0x300>)
    a740:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    a742:	697b      	ldr	r3, [r7, #20]
    a744:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    a746:	b29b      	uxth	r3, r3
    a748:	2b00      	cmp	r3, #0
    a74a:	d111      	bne.n	a770 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    a74c:	693b      	ldr	r3, [r7, #16]
    a74e:	2201      	movs	r2, #1
    a750:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    a752:	697b      	ldr	r3, [r7, #20]
    a754:	7a5b      	ldrb	r3, [r3, #9]
    a756:	b2db      	uxtb	r3, r3
    a758:	2b01      	cmp	r3, #1
    a75a:	d109      	bne.n	a770 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    a75c:	697b      	ldr	r3, [r7, #20]
    a75e:	79db      	ldrb	r3, [r3, #7]
    a760:	2201      	movs	r2, #1
    a762:	4053      	eors	r3, r2
    a764:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    a766:	2b00      	cmp	r3, #0
    a768:	d002      	beq.n	a770 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    a76a:	693b      	ldr	r3, [r7, #16]
    a76c:	2202      	movs	r2, #2
    a76e:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    a770:	230c      	movs	r3, #12
    a772:	18fb      	adds	r3, r7, r3
    a774:	881b      	ldrh	r3, [r3, #0]
    a776:	2204      	movs	r2, #4
    a778:	4013      	ands	r3, r2
    a77a:	d100      	bne.n	a77e <_spi_interrupt_handler+0xf2>
    a77c:	e07e      	b.n	a87c <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    a77e:	693b      	ldr	r3, [r7, #16]
    a780:	8b5b      	ldrh	r3, [r3, #26]
    a782:	b29b      	uxth	r3, r3
    a784:	001a      	movs	r2, r3
    a786:	2304      	movs	r3, #4
    a788:	4013      	ands	r3, r2
    a78a:	d022      	beq.n	a7d2 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    a78c:	697b      	ldr	r3, [r7, #20]
    a78e:	7a5b      	ldrb	r3, [r3, #9]
    a790:	b2db      	uxtb	r3, r3
    a792:	2b01      	cmp	r3, #1
    a794:	d014      	beq.n	a7c0 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    a796:	697b      	ldr	r3, [r7, #20]
    a798:	2238      	movs	r2, #56	; 0x38
    a79a:	211e      	movs	r1, #30
    a79c:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    a79e:	697b      	ldr	r3, [r7, #20]
    a7a0:	2203      	movs	r2, #3
    a7a2:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    a7a4:	693b      	ldr	r3, [r7, #16]
    a7a6:	2205      	movs	r2, #5
    a7a8:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    a7aa:	230f      	movs	r3, #15
    a7ac:	18fb      	adds	r3, r7, r3
    a7ae:	781b      	ldrb	r3, [r3, #0]
    a7b0:	2208      	movs	r2, #8
    a7b2:	4013      	ands	r3, r2
    a7b4:	d004      	beq.n	a7c0 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    a7b6:	697b      	ldr	r3, [r7, #20]
    a7b8:	699b      	ldr	r3, [r3, #24]
    a7ba:	697a      	ldr	r2, [r7, #20]
    a7bc:	0010      	movs	r0, r2
    a7be:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    a7c0:	693b      	ldr	r3, [r7, #16]
    a7c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a7c4:	230a      	movs	r3, #10
    a7c6:	18fb      	adds	r3, r7, r3
    a7c8:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    a7ca:	693b      	ldr	r3, [r7, #16]
    a7cc:	2204      	movs	r2, #4
    a7ce:	835a      	strh	r2, [r3, #26]
    a7d0:	e054      	b.n	a87c <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    a7d2:	697b      	ldr	r3, [r7, #20]
    a7d4:	7a5b      	ldrb	r3, [r3, #9]
    a7d6:	b2db      	uxtb	r3, r3
    a7d8:	2b01      	cmp	r3, #1
    a7da:	d11e      	bne.n	a81a <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    a7dc:	697b      	ldr	r3, [r7, #20]
    a7de:	0018      	movs	r0, r3
    a7e0:	4b6b      	ldr	r3, [pc, #428]	; (a990 <_spi_interrupt_handler+0x304>)
    a7e2:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    a7e4:	697b      	ldr	r3, [r7, #20]
    a7e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a7e8:	b29b      	uxth	r3, r3
    a7ea:	2b00      	cmp	r3, #0
    a7ec:	d146      	bne.n	a87c <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    a7ee:	693b      	ldr	r3, [r7, #16]
    a7f0:	2204      	movs	r2, #4
    a7f2:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    a7f4:	697b      	ldr	r3, [r7, #20]
    a7f6:	2238      	movs	r2, #56	; 0x38
    a7f8:	2100      	movs	r1, #0
    a7fa:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    a7fc:	697b      	ldr	r3, [r7, #20]
    a7fe:	2203      	movs	r2, #3
    a800:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    a802:	230f      	movs	r3, #15
    a804:	18fb      	adds	r3, r7, r3
    a806:	781b      	ldrb	r3, [r3, #0]
    a808:	2201      	movs	r2, #1
    a80a:	4013      	ands	r3, r2
    a80c:	d036      	beq.n	a87c <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    a80e:	697b      	ldr	r3, [r7, #20]
    a810:	68db      	ldr	r3, [r3, #12]
    a812:	697a      	ldr	r2, [r7, #20]
    a814:	0010      	movs	r0, r2
    a816:	4798      	blx	r3
    a818:	e030      	b.n	a87c <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    a81a:	697b      	ldr	r3, [r7, #20]
    a81c:	0018      	movs	r0, r3
    a81e:	4b5d      	ldr	r3, [pc, #372]	; (a994 <_spi_interrupt_handler+0x308>)
    a820:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    a822:	697b      	ldr	r3, [r7, #20]
    a824:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    a826:	b29b      	uxth	r3, r3
    a828:	2b00      	cmp	r3, #0
    a82a:	d127      	bne.n	a87c <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    a82c:	697b      	ldr	r3, [r7, #20]
    a82e:	2238      	movs	r2, #56	; 0x38
    a830:	2100      	movs	r1, #0
    a832:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    a834:	693b      	ldr	r3, [r7, #16]
    a836:	2204      	movs	r2, #4
    a838:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    a83a:	697b      	ldr	r3, [r7, #20]
    a83c:	7a5b      	ldrb	r3, [r3, #9]
    a83e:	b2db      	uxtb	r3, r3
    a840:	2b02      	cmp	r3, #2
    a842:	d10b      	bne.n	a85c <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    a844:	230f      	movs	r3, #15
    a846:	18fb      	adds	r3, r7, r3
    a848:	781b      	ldrb	r3, [r3, #0]
    a84a:	2204      	movs	r2, #4
    a84c:	4013      	ands	r3, r2
    a84e:	d015      	beq.n	a87c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    a850:	697b      	ldr	r3, [r7, #20]
    a852:	695b      	ldr	r3, [r3, #20]
    a854:	697a      	ldr	r2, [r7, #20]
    a856:	0010      	movs	r0, r2
    a858:	4798      	blx	r3
    a85a:	e00f      	b.n	a87c <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    a85c:	697b      	ldr	r3, [r7, #20]
    a85e:	7a5b      	ldrb	r3, [r3, #9]
    a860:	b2db      	uxtb	r3, r3
    a862:	2b00      	cmp	r3, #0
    a864:	d10a      	bne.n	a87c <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    a866:	230f      	movs	r3, #15
    a868:	18fb      	adds	r3, r7, r3
    a86a:	781b      	ldrb	r3, [r3, #0]
    a86c:	2202      	movs	r2, #2
    a86e:	4013      	ands	r3, r2
    a870:	d004      	beq.n	a87c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    a872:	697b      	ldr	r3, [r7, #20]
    a874:	691b      	ldr	r3, [r3, #16]
    a876:	697a      	ldr	r2, [r7, #20]
    a878:	0010      	movs	r0, r2
    a87a:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    a87c:	230c      	movs	r3, #12
    a87e:	18fb      	adds	r3, r7, r3
    a880:	881b      	ldrh	r3, [r3, #0]
    a882:	2202      	movs	r2, #2
    a884:	4013      	ands	r3, r2
    a886:	d046      	beq.n	a916 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    a888:	697b      	ldr	r3, [r7, #20]
    a88a:	795b      	ldrb	r3, [r3, #5]
    a88c:	2b00      	cmp	r3, #0
    a88e:	d11d      	bne.n	a8cc <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    a890:	693b      	ldr	r3, [r7, #16]
    a892:	2207      	movs	r2, #7
    a894:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    a896:	693b      	ldr	r3, [r7, #16]
    a898:	2202      	movs	r2, #2
    a89a:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    a89c:	697b      	ldr	r3, [r7, #20]
    a89e:	2203      	movs	r2, #3
    a8a0:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    a8a2:	697b      	ldr	r3, [r7, #20]
    a8a4:	2200      	movs	r2, #0
    a8a6:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    a8a8:	697b      	ldr	r3, [r7, #20]
    a8aa:	2200      	movs	r2, #0
    a8ac:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    a8ae:	697b      	ldr	r3, [r7, #20]
    a8b0:	2238      	movs	r2, #56	; 0x38
    a8b2:	2100      	movs	r1, #0
    a8b4:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    a8b6:	230f      	movs	r3, #15
    a8b8:	18fb      	adds	r3, r7, r3
    a8ba:	781b      	ldrb	r3, [r3, #0]
    a8bc:	2210      	movs	r2, #16
    a8be:	4013      	ands	r3, r2
    a8c0:	d004      	beq.n	a8cc <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    a8c2:	697b      	ldr	r3, [r7, #20]
    a8c4:	69db      	ldr	r3, [r3, #28]
    a8c6:	697a      	ldr	r2, [r7, #20]
    a8c8:	0010      	movs	r0, r2
    a8ca:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    a8cc:	697b      	ldr	r3, [r7, #20]
    a8ce:	795b      	ldrb	r3, [r3, #5]
    a8d0:	2b01      	cmp	r3, #1
    a8d2:	d120      	bne.n	a916 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    a8d4:	697b      	ldr	r3, [r7, #20]
    a8d6:	7a5b      	ldrb	r3, [r3, #9]
    a8d8:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    a8da:	2b01      	cmp	r3, #1
    a8dc:	d11b      	bne.n	a916 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    a8de:	697b      	ldr	r3, [r7, #20]
    a8e0:	79db      	ldrb	r3, [r3, #7]
    a8e2:	2201      	movs	r2, #1
    a8e4:	4053      	eors	r3, r2
    a8e6:	b2db      	uxtb	r3, r3
    a8e8:	2b00      	cmp	r3, #0
    a8ea:	d014      	beq.n	a916 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    a8ec:	693b      	ldr	r3, [r7, #16]
    a8ee:	2202      	movs	r2, #2
    a8f0:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    a8f2:	697b      	ldr	r3, [r7, #20]
    a8f4:	2203      	movs	r2, #3
    a8f6:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    a8f8:	697b      	ldr	r3, [r7, #20]
    a8fa:	2238      	movs	r2, #56	; 0x38
    a8fc:	2100      	movs	r1, #0
    a8fe:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    a900:	230f      	movs	r3, #15
    a902:	18fb      	adds	r3, r7, r3
    a904:	781b      	ldrb	r3, [r3, #0]
    a906:	2201      	movs	r2, #1
    a908:	4013      	ands	r3, r2
    a90a:	d004      	beq.n	a916 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    a90c:	697b      	ldr	r3, [r7, #20]
    a90e:	68db      	ldr	r3, [r3, #12]
    a910:	697a      	ldr	r2, [r7, #20]
    a912:	0010      	movs	r0, r2
    a914:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    a916:	230c      	movs	r3, #12
    a918:	18fb      	adds	r3, r7, r3
    a91a:	881b      	ldrh	r3, [r3, #0]
    a91c:	2208      	movs	r2, #8
    a91e:	4013      	ands	r3, r2
    a920:	d014      	beq.n	a94c <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    a922:	697b      	ldr	r3, [r7, #20]
    a924:	795b      	ldrb	r3, [r3, #5]
    a926:	2b00      	cmp	r3, #0
    a928:	d110      	bne.n	a94c <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    a92a:	693b      	ldr	r3, [r7, #16]
    a92c:	2208      	movs	r2, #8
    a92e:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    a930:	693b      	ldr	r3, [r7, #16]
    a932:	2208      	movs	r2, #8
    a934:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    a936:	230f      	movs	r3, #15
    a938:	18fb      	adds	r3, r7, r3
    a93a:	781b      	ldrb	r3, [r3, #0]
    a93c:	2220      	movs	r2, #32
    a93e:	4013      	ands	r3, r2
    a940:	d004      	beq.n	a94c <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    a942:	697b      	ldr	r3, [r7, #20]
    a944:	6a1b      	ldr	r3, [r3, #32]
    a946:	697a      	ldr	r2, [r7, #20]
    a948:	0010      	movs	r0, r2
    a94a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    a94c:	230c      	movs	r3, #12
    a94e:	18fb      	adds	r3, r7, r3
    a950:	881b      	ldrh	r3, [r3, #0]
    a952:	2280      	movs	r2, #128	; 0x80
    a954:	4013      	ands	r3, r2
    a956:	d010      	beq.n	a97a <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    a958:	693b      	ldr	r3, [r7, #16]
    a95a:	2280      	movs	r2, #128	; 0x80
    a95c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    a95e:	693b      	ldr	r3, [r7, #16]
    a960:	2280      	movs	r2, #128	; 0x80
    a962:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    a964:	230f      	movs	r3, #15
    a966:	18fb      	adds	r3, r7, r3
    a968:	781b      	ldrb	r3, [r3, #0]
    a96a:	2240      	movs	r2, #64	; 0x40
    a96c:	4013      	ands	r3, r2
    a96e:	d004      	beq.n	a97a <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    a970:	697b      	ldr	r3, [r7, #20]
    a972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a974:	697a      	ldr	r2, [r7, #20]
    a976:	0010      	movs	r0, r2
    a978:	4798      	blx	r3
		}
	}
#  endif
}
    a97a:	46c0      	nop			; (mov r8, r8)
    a97c:	46bd      	mov	sp, r7
    a97e:	b006      	add	sp, #24
    a980:	bd80      	pop	{r7, pc}
    a982:	46c0      	nop			; (mov r8, r8)
    a984:	20001090 	.word	0x20001090
    a988:	0000a5b1 	.word	0x0000a5b1
    a98c:	0000a535 	.word	0x0000a535
    a990:	0000a5e5 	.word	0x0000a5e5
    a994:	0000a61d 	.word	0x0000a61d

0000a998 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    a998:	b580      	push	{r7, lr}
    a99a:	b082      	sub	sp, #8
    a99c:	af00      	add	r7, sp, #0
    a99e:	0002      	movs	r2, r0
    a9a0:	1dfb      	adds	r3, r7, #7
    a9a2:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    a9a4:	46c0      	nop			; (mov r8, r8)
    a9a6:	46bd      	mov	sp, r7
    a9a8:	b002      	add	sp, #8
    a9aa:	bd80      	pop	{r7, pc}

0000a9ac <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    a9ac:	b580      	push	{r7, lr}
    a9ae:	b084      	sub	sp, #16
    a9b0:	af00      	add	r7, sp, #0
    a9b2:	0002      	movs	r2, r0
    a9b4:	6039      	str	r1, [r7, #0]
    a9b6:	1dfb      	adds	r3, r7, #7
    a9b8:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    a9ba:	4b13      	ldr	r3, [pc, #76]	; (aa08 <_sercom_set_handler+0x5c>)
    a9bc:	781b      	ldrb	r3, [r3, #0]
    a9be:	2201      	movs	r2, #1
    a9c0:	4053      	eors	r3, r2
    a9c2:	b2db      	uxtb	r3, r3
    a9c4:	2b00      	cmp	r3, #0
    a9c6:	d015      	beq.n	a9f4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a9c8:	2300      	movs	r3, #0
    a9ca:	60fb      	str	r3, [r7, #12]
    a9cc:	e00c      	b.n	a9e8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    a9ce:	4b0f      	ldr	r3, [pc, #60]	; (aa0c <_sercom_set_handler+0x60>)
    a9d0:	68fa      	ldr	r2, [r7, #12]
    a9d2:	0092      	lsls	r2, r2, #2
    a9d4:	490e      	ldr	r1, [pc, #56]	; (aa10 <_sercom_set_handler+0x64>)
    a9d6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    a9d8:	4b0e      	ldr	r3, [pc, #56]	; (aa14 <_sercom_set_handler+0x68>)
    a9da:	68fa      	ldr	r2, [r7, #12]
    a9dc:	0092      	lsls	r2, r2, #2
    a9de:	2100      	movs	r1, #0
    a9e0:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a9e2:	68fb      	ldr	r3, [r7, #12]
    a9e4:	3301      	adds	r3, #1
    a9e6:	60fb      	str	r3, [r7, #12]
    a9e8:	68fb      	ldr	r3, [r7, #12]
    a9ea:	2b05      	cmp	r3, #5
    a9ec:	d9ef      	bls.n	a9ce <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    a9ee:	4b06      	ldr	r3, [pc, #24]	; (aa08 <_sercom_set_handler+0x5c>)
    a9f0:	2201      	movs	r2, #1
    a9f2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    a9f4:	1dfb      	adds	r3, r7, #7
    a9f6:	781a      	ldrb	r2, [r3, #0]
    a9f8:	4b04      	ldr	r3, [pc, #16]	; (aa0c <_sercom_set_handler+0x60>)
    a9fa:	0092      	lsls	r2, r2, #2
    a9fc:	6839      	ldr	r1, [r7, #0]
    a9fe:	50d1      	str	r1, [r2, r3]
}
    aa00:	46c0      	nop			; (mov r8, r8)
    aa02:	46bd      	mov	sp, r7
    aa04:	b004      	add	sp, #16
    aa06:	bd80      	pop	{r7, pc}
    aa08:	20000d40 	.word	0x20000d40
    aa0c:	20000d44 	.word	0x20000d44
    aa10:	0000a999 	.word	0x0000a999
    aa14:	20001090 	.word	0x20001090

0000aa18 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    aa18:	b590      	push	{r4, r7, lr}
    aa1a:	b085      	sub	sp, #20
    aa1c:	af00      	add	r7, sp, #0
    aa1e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    aa20:	2308      	movs	r3, #8
    aa22:	18fa      	adds	r2, r7, r3
    aa24:	4b0c      	ldr	r3, [pc, #48]	; (aa58 <_sercom_get_interrupt_vector+0x40>)
    aa26:	0010      	movs	r0, r2
    aa28:	0019      	movs	r1, r3
    aa2a:	2306      	movs	r3, #6
    aa2c:	001a      	movs	r2, r3
    aa2e:	4b0b      	ldr	r3, [pc, #44]	; (aa5c <_sercom_get_interrupt_vector+0x44>)
    aa30:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    aa32:	230f      	movs	r3, #15
    aa34:	18fc      	adds	r4, r7, r3
    aa36:	687b      	ldr	r3, [r7, #4]
    aa38:	0018      	movs	r0, r3
    aa3a:	4b09      	ldr	r3, [pc, #36]	; (aa60 <_sercom_get_interrupt_vector+0x48>)
    aa3c:	4798      	blx	r3
    aa3e:	0003      	movs	r3, r0
    aa40:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    aa42:	230f      	movs	r3, #15
    aa44:	18fb      	adds	r3, r7, r3
    aa46:	781b      	ldrb	r3, [r3, #0]
    aa48:	2208      	movs	r2, #8
    aa4a:	18ba      	adds	r2, r7, r2
    aa4c:	5cd3      	ldrb	r3, [r2, r3]
    aa4e:	b25b      	sxtb	r3, r3
}
    aa50:	0018      	movs	r0, r3
    aa52:	46bd      	mov	sp, r7
    aa54:	b005      	add	sp, #20
    aa56:	bd90      	pop	{r4, r7, pc}
    aa58:	0000fae4 	.word	0x0000fae4
    aa5c:	0000e9ad 	.word	0x0000e9ad
    aa60:	000037cd 	.word	0x000037cd

0000aa64 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    aa64:	b580      	push	{r7, lr}
    aa66:	af00      	add	r7, sp, #0
    aa68:	4b03      	ldr	r3, [pc, #12]	; (aa78 <SERCOM0_Handler+0x14>)
    aa6a:	681b      	ldr	r3, [r3, #0]
    aa6c:	2000      	movs	r0, #0
    aa6e:	4798      	blx	r3
    aa70:	46c0      	nop			; (mov r8, r8)
    aa72:	46bd      	mov	sp, r7
    aa74:	bd80      	pop	{r7, pc}
    aa76:	46c0      	nop			; (mov r8, r8)
    aa78:	20000d44 	.word	0x20000d44

0000aa7c <SERCOM1_Handler>:
    aa7c:	b580      	push	{r7, lr}
    aa7e:	af00      	add	r7, sp, #0
    aa80:	4b03      	ldr	r3, [pc, #12]	; (aa90 <SERCOM1_Handler+0x14>)
    aa82:	685b      	ldr	r3, [r3, #4]
    aa84:	2001      	movs	r0, #1
    aa86:	4798      	blx	r3
    aa88:	46c0      	nop			; (mov r8, r8)
    aa8a:	46bd      	mov	sp, r7
    aa8c:	bd80      	pop	{r7, pc}
    aa8e:	46c0      	nop			; (mov r8, r8)
    aa90:	20000d44 	.word	0x20000d44

0000aa94 <SERCOM2_Handler>:
    aa94:	b580      	push	{r7, lr}
    aa96:	af00      	add	r7, sp, #0
    aa98:	4b03      	ldr	r3, [pc, #12]	; (aaa8 <SERCOM2_Handler+0x14>)
    aa9a:	689b      	ldr	r3, [r3, #8]
    aa9c:	2002      	movs	r0, #2
    aa9e:	4798      	blx	r3
    aaa0:	46c0      	nop			; (mov r8, r8)
    aaa2:	46bd      	mov	sp, r7
    aaa4:	bd80      	pop	{r7, pc}
    aaa6:	46c0      	nop			; (mov r8, r8)
    aaa8:	20000d44 	.word	0x20000d44

0000aaac <SERCOM3_Handler>:
    aaac:	b580      	push	{r7, lr}
    aaae:	af00      	add	r7, sp, #0
    aab0:	4b03      	ldr	r3, [pc, #12]	; (aac0 <SERCOM3_Handler+0x14>)
    aab2:	68db      	ldr	r3, [r3, #12]
    aab4:	2003      	movs	r0, #3
    aab6:	4798      	blx	r3
    aab8:	46c0      	nop			; (mov r8, r8)
    aaba:	46bd      	mov	sp, r7
    aabc:	bd80      	pop	{r7, pc}
    aabe:	46c0      	nop			; (mov r8, r8)
    aac0:	20000d44 	.word	0x20000d44

0000aac4 <SERCOM4_Handler>:
    aac4:	b580      	push	{r7, lr}
    aac6:	af00      	add	r7, sp, #0
    aac8:	4b03      	ldr	r3, [pc, #12]	; (aad8 <SERCOM4_Handler+0x14>)
    aaca:	691b      	ldr	r3, [r3, #16]
    aacc:	2004      	movs	r0, #4
    aace:	4798      	blx	r3
    aad0:	46c0      	nop			; (mov r8, r8)
    aad2:	46bd      	mov	sp, r7
    aad4:	bd80      	pop	{r7, pc}
    aad6:	46c0      	nop			; (mov r8, r8)
    aad8:	20000d44 	.word	0x20000d44

0000aadc <SERCOM5_Handler>:
    aadc:	b580      	push	{r7, lr}
    aade:	af00      	add	r7, sp, #0
    aae0:	4b03      	ldr	r3, [pc, #12]	; (aaf0 <SERCOM5_Handler+0x14>)
    aae2:	695b      	ldr	r3, [r3, #20]
    aae4:	2005      	movs	r0, #5
    aae6:	4798      	blx	r3
    aae8:	46c0      	nop			; (mov r8, r8)
    aaea:	46bd      	mov	sp, r7
    aaec:	bd80      	pop	{r7, pc}
    aaee:	46c0      	nop			; (mov r8, r8)
    aaf0:	20000d44 	.word	0x20000d44

0000aaf4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    aaf4:	b580      	push	{r7, lr}
    aaf6:	b084      	sub	sp, #16
    aaf8:	af00      	add	r7, sp, #0
    aafa:	0002      	movs	r2, r0
    aafc:	1dfb      	adds	r3, r7, #7
    aafe:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    ab00:	230f      	movs	r3, #15
    ab02:	18fb      	adds	r3, r7, r3
    ab04:	1dfa      	adds	r2, r7, #7
    ab06:	7812      	ldrb	r2, [r2, #0]
    ab08:	0952      	lsrs	r2, r2, #5
    ab0a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    ab0c:	230f      	movs	r3, #15
    ab0e:	18fb      	adds	r3, r7, r3
    ab10:	781b      	ldrb	r3, [r3, #0]
    ab12:	2b00      	cmp	r3, #0
    ab14:	d10c      	bne.n	ab30 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    ab16:	4b09      	ldr	r3, [pc, #36]	; (ab3c <_extint_get_eic_from_channel+0x48>)
    ab18:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    ab1a:	230f      	movs	r3, #15
    ab1c:	18fb      	adds	r3, r7, r3
    ab1e:	781b      	ldrb	r3, [r3, #0]
    ab20:	009b      	lsls	r3, r3, #2
    ab22:	2210      	movs	r2, #16
    ab24:	4694      	mov	ip, r2
    ab26:	44bc      	add	ip, r7
    ab28:	4463      	add	r3, ip
    ab2a:	3b08      	subs	r3, #8
    ab2c:	681b      	ldr	r3, [r3, #0]
    ab2e:	e000      	b.n	ab32 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    ab30:	2300      	movs	r3, #0
	}
}
    ab32:	0018      	movs	r0, r3
    ab34:	46bd      	mov	sp, r7
    ab36:	b004      	add	sp, #16
    ab38:	bd80      	pop	{r7, pc}
    ab3a:	46c0      	nop			; (mov r8, r8)
    ab3c:	40001800 	.word	0x40001800

0000ab40 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    ab40:	b580      	push	{r7, lr}
    ab42:	b084      	sub	sp, #16
    ab44:	af00      	add	r7, sp, #0
    ab46:	0002      	movs	r2, r0
    ab48:	1dfb      	adds	r3, r7, #7
    ab4a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    ab4c:	1dfb      	adds	r3, r7, #7
    ab4e:	781b      	ldrb	r3, [r3, #0]
    ab50:	0018      	movs	r0, r3
    ab52:	4b0b      	ldr	r3, [pc, #44]	; (ab80 <extint_chan_is_detected+0x40>)
    ab54:	4798      	blx	r3
    ab56:	0003      	movs	r3, r0
    ab58:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    ab5a:	1dfb      	adds	r3, r7, #7
    ab5c:	781b      	ldrb	r3, [r3, #0]
    ab5e:	221f      	movs	r2, #31
    ab60:	4013      	ands	r3, r2
    ab62:	2201      	movs	r2, #1
    ab64:	409a      	lsls	r2, r3
    ab66:	0013      	movs	r3, r2
    ab68:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    ab6a:	68fb      	ldr	r3, [r7, #12]
    ab6c:	691b      	ldr	r3, [r3, #16]
    ab6e:	68ba      	ldr	r2, [r7, #8]
    ab70:	4013      	ands	r3, r2
    ab72:	1e5a      	subs	r2, r3, #1
    ab74:	4193      	sbcs	r3, r2
    ab76:	b2db      	uxtb	r3, r3
}
    ab78:	0018      	movs	r0, r3
    ab7a:	46bd      	mov	sp, r7
    ab7c:	b004      	add	sp, #16
    ab7e:	bd80      	pop	{r7, pc}
    ab80:	0000aaf5 	.word	0x0000aaf5

0000ab84 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    ab84:	b580      	push	{r7, lr}
    ab86:	b084      	sub	sp, #16
    ab88:	af00      	add	r7, sp, #0
    ab8a:	0002      	movs	r2, r0
    ab8c:	1dfb      	adds	r3, r7, #7
    ab8e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    ab90:	1dfb      	adds	r3, r7, #7
    ab92:	781b      	ldrb	r3, [r3, #0]
    ab94:	0018      	movs	r0, r3
    ab96:	4b09      	ldr	r3, [pc, #36]	; (abbc <extint_chan_clear_detected+0x38>)
    ab98:	4798      	blx	r3
    ab9a:	0003      	movs	r3, r0
    ab9c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    ab9e:	1dfb      	adds	r3, r7, #7
    aba0:	781b      	ldrb	r3, [r3, #0]
    aba2:	221f      	movs	r2, #31
    aba4:	4013      	ands	r3, r2
    aba6:	2201      	movs	r2, #1
    aba8:	409a      	lsls	r2, r3
    abaa:	0013      	movs	r3, r2
    abac:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    abae:	68fb      	ldr	r3, [r7, #12]
    abb0:	68ba      	ldr	r2, [r7, #8]
    abb2:	611a      	str	r2, [r3, #16]
}
    abb4:	46c0      	nop			; (mov r8, r8)
    abb6:	46bd      	mov	sp, r7
    abb8:	b004      	add	sp, #16
    abba:	bd80      	pop	{r7, pc}
    abbc:	0000aaf5 	.word	0x0000aaf5

0000abc0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    abc0:	b580      	push	{r7, lr}
    abc2:	b082      	sub	sp, #8
    abc4:	af00      	add	r7, sp, #0
    abc6:	6078      	str	r0, [r7, #4]
    abc8:	0008      	movs	r0, r1
    abca:	0011      	movs	r1, r2
    abcc:	1cfb      	adds	r3, r7, #3
    abce:	1c02      	adds	r2, r0, #0
    abd0:	701a      	strb	r2, [r3, #0]
    abd2:	1cbb      	adds	r3, r7, #2
    abd4:	1c0a      	adds	r2, r1, #0
    abd6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    abd8:	1cbb      	adds	r3, r7, #2
    abda:	781b      	ldrb	r3, [r3, #0]
    abdc:	2b00      	cmp	r3, #0
    abde:	d001      	beq.n	abe4 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    abe0:	2317      	movs	r3, #23
    abe2:	e019      	b.n	ac18 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    abe4:	1cfb      	adds	r3, r7, #3
    abe6:	781a      	ldrb	r2, [r3, #0]
    abe8:	4b0d      	ldr	r3, [pc, #52]	; (ac20 <extint_register_callback+0x60>)
    abea:	0092      	lsls	r2, r2, #2
    abec:	58d3      	ldr	r3, [r2, r3]
    abee:	2b00      	cmp	r3, #0
    abf0:	d107      	bne.n	ac02 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    abf2:	1cfb      	adds	r3, r7, #3
    abf4:	781a      	ldrb	r2, [r3, #0]
    abf6:	4b0a      	ldr	r3, [pc, #40]	; (ac20 <extint_register_callback+0x60>)
    abf8:	0092      	lsls	r2, r2, #2
    abfa:	6879      	ldr	r1, [r7, #4]
    abfc:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    abfe:	2300      	movs	r3, #0
    ac00:	e00a      	b.n	ac18 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    ac02:	1cfb      	adds	r3, r7, #3
    ac04:	781a      	ldrb	r2, [r3, #0]
    ac06:	4b06      	ldr	r3, [pc, #24]	; (ac20 <extint_register_callback+0x60>)
    ac08:	0092      	lsls	r2, r2, #2
    ac0a:	58d2      	ldr	r2, [r2, r3]
    ac0c:	687b      	ldr	r3, [r7, #4]
    ac0e:	429a      	cmp	r2, r3
    ac10:	d101      	bne.n	ac16 <extint_register_callback+0x56>
		return STATUS_OK;
    ac12:	2300      	movs	r3, #0
    ac14:	e000      	b.n	ac18 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    ac16:	231d      	movs	r3, #29
}
    ac18:	0018      	movs	r0, r3
    ac1a:	46bd      	mov	sp, r7
    ac1c:	b002      	add	sp, #8
    ac1e:	bd80      	pop	{r7, pc}
    ac20:	20000f0c 	.word	0x20000f0c

0000ac24 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    ac24:	b580      	push	{r7, lr}
    ac26:	b084      	sub	sp, #16
    ac28:	af00      	add	r7, sp, #0
    ac2a:	0002      	movs	r2, r0
    ac2c:	1dfb      	adds	r3, r7, #7
    ac2e:	701a      	strb	r2, [r3, #0]
    ac30:	1dbb      	adds	r3, r7, #6
    ac32:	1c0a      	adds	r2, r1, #0
    ac34:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    ac36:	1dbb      	adds	r3, r7, #6
    ac38:	781b      	ldrb	r3, [r3, #0]
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	d10e      	bne.n	ac5c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    ac3e:	1dfb      	adds	r3, r7, #7
    ac40:	781b      	ldrb	r3, [r3, #0]
    ac42:	0018      	movs	r0, r3
    ac44:	4b08      	ldr	r3, [pc, #32]	; (ac68 <extint_chan_enable_callback+0x44>)
    ac46:	4798      	blx	r3
    ac48:	0003      	movs	r3, r0
    ac4a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    ac4c:	1dfb      	adds	r3, r7, #7
    ac4e:	781b      	ldrb	r3, [r3, #0]
    ac50:	2201      	movs	r2, #1
    ac52:	409a      	lsls	r2, r3
    ac54:	68fb      	ldr	r3, [r7, #12]
    ac56:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    ac58:	2300      	movs	r3, #0
    ac5a:	e000      	b.n	ac5e <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    ac5c:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    ac5e:	0018      	movs	r0, r3
    ac60:	46bd      	mov	sp, r7
    ac62:	b004      	add	sp, #16
    ac64:	bd80      	pop	{r7, pc}
    ac66:	46c0      	nop			; (mov r8, r8)
    ac68:	0000aaf5 	.word	0x0000aaf5

0000ac6c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    ac6c:	b580      	push	{r7, lr}
    ac6e:	b084      	sub	sp, #16
    ac70:	af00      	add	r7, sp, #0
    ac72:	0002      	movs	r2, r0
    ac74:	1dfb      	adds	r3, r7, #7
    ac76:	701a      	strb	r2, [r3, #0]
    ac78:	1dbb      	adds	r3, r7, #6
    ac7a:	1c0a      	adds	r2, r1, #0
    ac7c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    ac7e:	1dbb      	adds	r3, r7, #6
    ac80:	781b      	ldrb	r3, [r3, #0]
    ac82:	2b00      	cmp	r3, #0
    ac84:	d10e      	bne.n	aca4 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    ac86:	1dfb      	adds	r3, r7, #7
    ac88:	781b      	ldrb	r3, [r3, #0]
    ac8a:	0018      	movs	r0, r3
    ac8c:	4b08      	ldr	r3, [pc, #32]	; (acb0 <extint_chan_disable_callback+0x44>)
    ac8e:	4798      	blx	r3
    ac90:	0003      	movs	r3, r0
    ac92:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    ac94:	1dfb      	adds	r3, r7, #7
    ac96:	781b      	ldrb	r3, [r3, #0]
    ac98:	2201      	movs	r2, #1
    ac9a:	409a      	lsls	r2, r3
    ac9c:	68fb      	ldr	r3, [r7, #12]
    ac9e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    aca0:	2300      	movs	r3, #0
    aca2:	e000      	b.n	aca6 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    aca4:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    aca6:	0018      	movs	r0, r3
    aca8:	46bd      	mov	sp, r7
    acaa:	b004      	add	sp, #16
    acac:	bd80      	pop	{r7, pc}
    acae:	46c0      	nop			; (mov r8, r8)
    acb0:	0000aaf5 	.word	0x0000aaf5

0000acb4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    acb4:	b580      	push	{r7, lr}
    acb6:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    acb8:	4b15      	ldr	r3, [pc, #84]	; (ad10 <EIC_Handler+0x5c>)
    acba:	2200      	movs	r2, #0
    acbc:	701a      	strb	r2, [r3, #0]
    acbe:	e020      	b.n	ad02 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    acc0:	4b13      	ldr	r3, [pc, #76]	; (ad10 <EIC_Handler+0x5c>)
    acc2:	781b      	ldrb	r3, [r3, #0]
    acc4:	0018      	movs	r0, r3
    acc6:	4b13      	ldr	r3, [pc, #76]	; (ad14 <EIC_Handler+0x60>)
    acc8:	4798      	blx	r3
    acca:	1e03      	subs	r3, r0, #0
    accc:	d013      	beq.n	acf6 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    acce:	4b10      	ldr	r3, [pc, #64]	; (ad10 <EIC_Handler+0x5c>)
    acd0:	781b      	ldrb	r3, [r3, #0]
    acd2:	0018      	movs	r0, r3
    acd4:	4b10      	ldr	r3, [pc, #64]	; (ad18 <EIC_Handler+0x64>)
    acd6:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    acd8:	4b0d      	ldr	r3, [pc, #52]	; (ad10 <EIC_Handler+0x5c>)
    acda:	781b      	ldrb	r3, [r3, #0]
    acdc:	001a      	movs	r2, r3
    acde:	4b0f      	ldr	r3, [pc, #60]	; (ad1c <EIC_Handler+0x68>)
    ace0:	0092      	lsls	r2, r2, #2
    ace2:	58d3      	ldr	r3, [r2, r3]
    ace4:	2b00      	cmp	r3, #0
    ace6:	d006      	beq.n	acf6 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    ace8:	4b09      	ldr	r3, [pc, #36]	; (ad10 <EIC_Handler+0x5c>)
    acea:	781b      	ldrb	r3, [r3, #0]
    acec:	001a      	movs	r2, r3
    acee:	4b0b      	ldr	r3, [pc, #44]	; (ad1c <EIC_Handler+0x68>)
    acf0:	0092      	lsls	r2, r2, #2
    acf2:	58d3      	ldr	r3, [r2, r3]
    acf4:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    acf6:	4b06      	ldr	r3, [pc, #24]	; (ad10 <EIC_Handler+0x5c>)
    acf8:	781b      	ldrb	r3, [r3, #0]
    acfa:	3301      	adds	r3, #1
    acfc:	b2da      	uxtb	r2, r3
    acfe:	4b04      	ldr	r3, [pc, #16]	; (ad10 <EIC_Handler+0x5c>)
    ad00:	701a      	strb	r2, [r3, #0]
    ad02:	4b03      	ldr	r3, [pc, #12]	; (ad10 <EIC_Handler+0x5c>)
    ad04:	781b      	ldrb	r3, [r3, #0]
    ad06:	2b0f      	cmp	r3, #15
    ad08:	d9da      	bls.n	acc0 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    ad0a:	46c0      	nop			; (mov r8, r8)
    ad0c:	46bd      	mov	sp, r7
    ad0e:	bd80      	pop	{r7, pc}
    ad10:	200010a8 	.word	0x200010a8
    ad14:	0000ab41 	.word	0x0000ab41
    ad18:	0000ab85 	.word	0x0000ab85
    ad1c:	20000f0c 	.word	0x20000f0c

0000ad20 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    ad20:	b580      	push	{r7, lr}
    ad22:	b082      	sub	sp, #8
    ad24:	af00      	add	r7, sp, #0
    ad26:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    ad28:	687b      	ldr	r3, [r7, #4]
    ad2a:	2b00      	cmp	r3, #0
    ad2c:	d00c      	beq.n	ad48 <delay_cycles+0x28>
		SysTick->LOAD = n;
    ad2e:	4b08      	ldr	r3, [pc, #32]	; (ad50 <delay_cycles+0x30>)
    ad30:	687a      	ldr	r2, [r7, #4]
    ad32:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    ad34:	4b06      	ldr	r3, [pc, #24]	; (ad50 <delay_cycles+0x30>)
    ad36:	2200      	movs	r2, #0
    ad38:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    ad3a:	46c0      	nop			; (mov r8, r8)
    ad3c:	4b04      	ldr	r3, [pc, #16]	; (ad50 <delay_cycles+0x30>)
    ad3e:	681a      	ldr	r2, [r3, #0]
    ad40:	2380      	movs	r3, #128	; 0x80
    ad42:	025b      	lsls	r3, r3, #9
    ad44:	4013      	ands	r3, r2
    ad46:	d0f9      	beq.n	ad3c <delay_cycles+0x1c>
		};
	}
}
    ad48:	46c0      	nop			; (mov r8, r8)
    ad4a:	46bd      	mov	sp, r7
    ad4c:	b002      	add	sp, #8
    ad4e:	bd80      	pop	{r7, pc}
    ad50:	e000e010 	.word	0xe000e010

0000ad54 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    ad54:	b580      	push	{r7, lr}
    ad56:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    ad58:	2000      	movs	r0, #0
    ad5a:	4b0f      	ldr	r3, [pc, #60]	; (ad98 <delay_init+0x44>)
    ad5c:	4798      	blx	r3
    ad5e:	0002      	movs	r2, r0
    ad60:	4b0e      	ldr	r3, [pc, #56]	; (ad9c <delay_init+0x48>)
    ad62:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    ad64:	4b0d      	ldr	r3, [pc, #52]	; (ad9c <delay_init+0x48>)
    ad66:	6818      	ldr	r0, [r3, #0]
    ad68:	4b0d      	ldr	r3, [pc, #52]	; (ada0 <delay_init+0x4c>)
    ad6a:	22fa      	movs	r2, #250	; 0xfa
    ad6c:	0091      	lsls	r1, r2, #2
    ad6e:	4798      	blx	r3
    ad70:	0003      	movs	r3, r0
    ad72:	001a      	movs	r2, r3
    ad74:	4b09      	ldr	r3, [pc, #36]	; (ad9c <delay_init+0x48>)
    ad76:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    ad78:	4b08      	ldr	r3, [pc, #32]	; (ad9c <delay_init+0x48>)
    ad7a:	6818      	ldr	r0, [r3, #0]
    ad7c:	4b08      	ldr	r3, [pc, #32]	; (ada0 <delay_init+0x4c>)
    ad7e:	22fa      	movs	r2, #250	; 0xfa
    ad80:	0091      	lsls	r1, r2, #2
    ad82:	4798      	blx	r3
    ad84:	0003      	movs	r3, r0
    ad86:	001a      	movs	r2, r3
    ad88:	4b06      	ldr	r3, [pc, #24]	; (ada4 <delay_init+0x50>)
    ad8a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    ad8c:	4b06      	ldr	r3, [pc, #24]	; (ada8 <delay_init+0x54>)
    ad8e:	2205      	movs	r2, #5
    ad90:	601a      	str	r2, [r3, #0]
}
    ad92:	46c0      	nop			; (mov r8, r8)
    ad94:	46bd      	mov	sp, r7
    ad96:	bd80      	pop	{r7, pc}
    ad98:	0000ba59 	.word	0x0000ba59
    ad9c:	2000001c 	.word	0x2000001c
    ada0:	0000c161 	.word	0x0000c161
    ada4:	20000020 	.word	0x20000020
    ada8:	e000e010 	.word	0xe000e010

0000adac <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    adac:	b580      	push	{r7, lr}
    adae:	b082      	sub	sp, #8
    adb0:	af00      	add	r7, sp, #0
    adb2:	6078      	str	r0, [r7, #4]
	while (n--) {
    adb4:	e004      	b.n	adc0 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    adb6:	4b07      	ldr	r3, [pc, #28]	; (add4 <delay_cycles_us+0x28>)
    adb8:	681b      	ldr	r3, [r3, #0]
    adba:	0018      	movs	r0, r3
    adbc:	4b06      	ldr	r3, [pc, #24]	; (add8 <delay_cycles_us+0x2c>)
    adbe:	4798      	blx	r3
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
    adc0:	687b      	ldr	r3, [r7, #4]
    adc2:	1e5a      	subs	r2, r3, #1
    adc4:	607a      	str	r2, [r7, #4]
    adc6:	2b00      	cmp	r3, #0
    adc8:	d1f5      	bne.n	adb6 <delay_cycles_us+0xa>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
    adca:	46c0      	nop			; (mov r8, r8)
    adcc:	46bd      	mov	sp, r7
    adce:	b002      	add	sp, #8
    add0:	bd80      	pop	{r7, pc}
    add2:	46c0      	nop			; (mov r8, r8)
    add4:	20000020 	.word	0x20000020
    add8:	0000ad21 	.word	0x0000ad21

0000addc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    addc:	b580      	push	{r7, lr}
    adde:	b082      	sub	sp, #8
    ade0:	af00      	add	r7, sp, #0
    ade2:	6078      	str	r0, [r7, #4]
	while (n--) {
    ade4:	e004      	b.n	adf0 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    ade6:	4b07      	ldr	r3, [pc, #28]	; (ae04 <delay_cycles_ms+0x28>)
    ade8:	681b      	ldr	r3, [r3, #0]
    adea:	0018      	movs	r0, r3
    adec:	4b06      	ldr	r3, [pc, #24]	; (ae08 <delay_cycles_ms+0x2c>)
    adee:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    adf0:	687b      	ldr	r3, [r7, #4]
    adf2:	1e5a      	subs	r2, r3, #1
    adf4:	607a      	str	r2, [r7, #4]
    adf6:	2b00      	cmp	r3, #0
    adf8:	d1f5      	bne.n	ade6 <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    adfa:	46c0      	nop			; (mov r8, r8)
    adfc:	46bd      	mov	sp, r7
    adfe:	b002      	add	sp, #8
    ae00:	bd80      	pop	{r7, pc}
    ae02:	46c0      	nop			; (mov r8, r8)
    ae04:	2000001c 	.word	0x2000001c
    ae08:	0000ad21 	.word	0x0000ad21

0000ae0c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    ae0c:	b580      	push	{r7, lr}
    ae0e:	b082      	sub	sp, #8
    ae10:	af00      	add	r7, sp, #0
    ae12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    ae14:	687b      	ldr	r3, [r7, #4]
    ae16:	2280      	movs	r2, #128	; 0x80
    ae18:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    ae1a:	687b      	ldr	r3, [r7, #4]
    ae1c:	2200      	movs	r2, #0
    ae1e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    ae20:	687b      	ldr	r3, [r7, #4]
    ae22:	2201      	movs	r2, #1
    ae24:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    ae26:	687b      	ldr	r3, [r7, #4]
    ae28:	2200      	movs	r2, #0
    ae2a:	70da      	strb	r2, [r3, #3]
}
    ae2c:	46c0      	nop			; (mov r8, r8)
    ae2e:	46bd      	mov	sp, r7
    ae30:	b002      	add	sp, #8
    ae32:	bd80      	pop	{r7, pc}

0000ae34 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    ae34:	b580      	push	{r7, lr}
    ae36:	b084      	sub	sp, #16
    ae38:	af00      	add	r7, sp, #0
    ae3a:	0002      	movs	r2, r0
    ae3c:	6039      	str	r1, [r7, #0]
    ae3e:	1dfb      	adds	r3, r7, #7
    ae40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    ae42:	230c      	movs	r3, #12
    ae44:	18fb      	adds	r3, r7, r3
    ae46:	0018      	movs	r0, r3
    ae48:	4b10      	ldr	r3, [pc, #64]	; (ae8c <port_pin_set_config+0x58>)
    ae4a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    ae4c:	230c      	movs	r3, #12
    ae4e:	18fb      	adds	r3, r7, r3
    ae50:	2280      	movs	r2, #128	; 0x80
    ae52:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    ae54:	683b      	ldr	r3, [r7, #0]
    ae56:	781a      	ldrb	r2, [r3, #0]
    ae58:	230c      	movs	r3, #12
    ae5a:	18fb      	adds	r3, r7, r3
    ae5c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    ae5e:	683b      	ldr	r3, [r7, #0]
    ae60:	785a      	ldrb	r2, [r3, #1]
    ae62:	230c      	movs	r3, #12
    ae64:	18fb      	adds	r3, r7, r3
    ae66:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    ae68:	683b      	ldr	r3, [r7, #0]
    ae6a:	789a      	ldrb	r2, [r3, #2]
    ae6c:	230c      	movs	r3, #12
    ae6e:	18fb      	adds	r3, r7, r3
    ae70:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    ae72:	230c      	movs	r3, #12
    ae74:	18fa      	adds	r2, r7, r3
    ae76:	1dfb      	adds	r3, r7, #7
    ae78:	781b      	ldrb	r3, [r3, #0]
    ae7a:	0011      	movs	r1, r2
    ae7c:	0018      	movs	r0, r3
    ae7e:	4b04      	ldr	r3, [pc, #16]	; (ae90 <port_pin_set_config+0x5c>)
    ae80:	4798      	blx	r3
}
    ae82:	46c0      	nop			; (mov r8, r8)
    ae84:	46bd      	mov	sp, r7
    ae86:	b004      	add	sp, #16
    ae88:	bd80      	pop	{r7, pc}
    ae8a:	46c0      	nop			; (mov r8, r8)
    ae8c:	0000ae0d 	.word	0x0000ae0d
    ae90:	0000be1d 	.word	0x0000be1d

0000ae94 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    ae94:	b580      	push	{r7, lr}
    ae96:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    ae98:	46c0      	nop			; (mov r8, r8)
    ae9a:	46bd      	mov	sp, r7
    ae9c:	bd80      	pop	{r7, pc}
    ae9e:	46c0      	nop			; (mov r8, r8)

0000aea0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    aea0:	b580      	push	{r7, lr}
    aea2:	b082      	sub	sp, #8
    aea4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    aea6:	4b10      	ldr	r3, [pc, #64]	; (aee8 <cpu_irq_enter_critical+0x48>)
    aea8:	681b      	ldr	r3, [r3, #0]
    aeaa:	2b00      	cmp	r3, #0
    aeac:	d112      	bne.n	aed4 <cpu_irq_enter_critical+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    aeae:	f3ef 8310 	mrs	r3, PRIMASK
    aeb2:	607b      	str	r3, [r7, #4]
  return(result);
    aeb4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    aeb6:	2b00      	cmp	r3, #0
    aeb8:	d109      	bne.n	aece <cpu_irq_enter_critical+0x2e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    aeba:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    aebc:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    aec0:	4b0a      	ldr	r3, [pc, #40]	; (aeec <cpu_irq_enter_critical+0x4c>)
    aec2:	2200      	movs	r2, #0
    aec4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    aec6:	4b0a      	ldr	r3, [pc, #40]	; (aef0 <cpu_irq_enter_critical+0x50>)
    aec8:	2201      	movs	r2, #1
    aeca:	701a      	strb	r2, [r3, #0]
    aecc:	e002      	b.n	aed4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    aece:	4b08      	ldr	r3, [pc, #32]	; (aef0 <cpu_irq_enter_critical+0x50>)
    aed0:	2200      	movs	r2, #0
    aed2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    aed4:	4b04      	ldr	r3, [pc, #16]	; (aee8 <cpu_irq_enter_critical+0x48>)
    aed6:	681b      	ldr	r3, [r3, #0]
    aed8:	1c5a      	adds	r2, r3, #1
    aeda:	4b03      	ldr	r3, [pc, #12]	; (aee8 <cpu_irq_enter_critical+0x48>)
    aedc:	601a      	str	r2, [r3, #0]
}
    aede:	46c0      	nop			; (mov r8, r8)
    aee0:	46bd      	mov	sp, r7
    aee2:	b002      	add	sp, #8
    aee4:	bd80      	pop	{r7, pc}
    aee6:	46c0      	nop			; (mov r8, r8)
    aee8:	20000d5c 	.word	0x20000d5c
    aeec:	20000024 	.word	0x20000024
    aef0:	20000d60 	.word	0x20000d60

0000aef4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    aef4:	b580      	push	{r7, lr}
    aef6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    aef8:	4b0b      	ldr	r3, [pc, #44]	; (af28 <cpu_irq_leave_critical+0x34>)
    aefa:	681b      	ldr	r3, [r3, #0]
    aefc:	1e5a      	subs	r2, r3, #1
    aefe:	4b0a      	ldr	r3, [pc, #40]	; (af28 <cpu_irq_leave_critical+0x34>)
    af00:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    af02:	4b09      	ldr	r3, [pc, #36]	; (af28 <cpu_irq_leave_critical+0x34>)
    af04:	681b      	ldr	r3, [r3, #0]
    af06:	2b00      	cmp	r3, #0
    af08:	d10a      	bne.n	af20 <cpu_irq_leave_critical+0x2c>
    af0a:	4b08      	ldr	r3, [pc, #32]	; (af2c <cpu_irq_leave_critical+0x38>)
    af0c:	781b      	ldrb	r3, [r3, #0]
    af0e:	b2db      	uxtb	r3, r3
    af10:	2b00      	cmp	r3, #0
    af12:	d005      	beq.n	af20 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    af14:	4b06      	ldr	r3, [pc, #24]	; (af30 <cpu_irq_leave_critical+0x3c>)
    af16:	2201      	movs	r2, #1
    af18:	701a      	strb	r2, [r3, #0]
    af1a:	f3bf 8f5f 	dmb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    af1e:	b662      	cpsie	i
	}
}
    af20:	46c0      	nop			; (mov r8, r8)
    af22:	46bd      	mov	sp, r7
    af24:	bd80      	pop	{r7, pc}
    af26:	46c0      	nop			; (mov r8, r8)
    af28:	20000d5c 	.word	0x20000d5c
    af2c:	20000d60 	.word	0x20000d60
    af30:	20000024 	.word	0x20000024

0000af34 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    af34:	b580      	push	{r7, lr}
    af36:	b082      	sub	sp, #8
    af38:	af00      	add	r7, sp, #0
    af3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    af3c:	687b      	ldr	r3, [r7, #4]
    af3e:	2201      	movs	r2, #1
    af40:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    af42:	687b      	ldr	r3, [r7, #4]
    af44:	2200      	movs	r2, #0
    af46:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    af48:	687b      	ldr	r3, [r7, #4]
    af4a:	2206      	movs	r2, #6
    af4c:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    af4e:	687b      	ldr	r3, [r7, #4]
    af50:	2200      	movs	r2, #0
    af52:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    af54:	687b      	ldr	r3, [r7, #4]
    af56:	2200      	movs	r2, #0
    af58:	725a      	strb	r2, [r3, #9]
}
    af5a:	46c0      	nop			; (mov r8, r8)
    af5c:	46bd      	mov	sp, r7
    af5e:	b002      	add	sp, #8
    af60:	bd80      	pop	{r7, pc}
    af62:	46c0      	nop			; (mov r8, r8)

0000af64 <system_clock_source_xosc_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc_get_config_defaults(
		struct system_clock_source_xosc_config *const config)
{
    af64:	b580      	push	{r7, lr}
    af66:	b082      	sub	sp, #8
    af68:	af00      	add	r7, sp, #0
    af6a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    af6c:	687b      	ldr	r3, [r7, #4]
    af6e:	2200      	movs	r2, #0
    af70:	701a      	strb	r2, [r3, #0]
	config->startup_time      = SYSTEM_XOSC_STARTUP_16384;
    af72:	687b      	ldr	r3, [r7, #4]
    af74:	220e      	movs	r2, #14
    af76:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control = false;
    af78:	687b      	ldr	r3, [r7, #4]
    af7a:	2200      	movs	r2, #0
    af7c:	709a      	strb	r2, [r3, #2]
	config->frequency         = 12000000UL;
    af7e:	687b      	ldr	r3, [r7, #4]
    af80:	4a05      	ldr	r2, [pc, #20]	; (af98 <system_clock_source_xosc_get_config_defaults+0x34>)
    af82:	605a      	str	r2, [r3, #4]
	config->run_in_standby    = false;
    af84:	687b      	ldr	r3, [r7, #4]
    af86:	2200      	movs	r2, #0
    af88:	721a      	strb	r2, [r3, #8]
	config->on_demand         = false;
    af8a:	687b      	ldr	r3, [r7, #4]
    af8c:	2200      	movs	r2, #0
    af8e:	725a      	strb	r2, [r3, #9]
}
    af90:	46c0      	nop			; (mov r8, r8)
    af92:	46bd      	mov	sp, r7
    af94:	b002      	add	sp, #8
    af96:	bd80      	pop	{r7, pc}
    af98:	00b71b00 	.word	0x00b71b00

0000af9c <system_clock_source_osc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
    af9c:	b580      	push	{r7, lr}
    af9e:	b082      	sub	sp, #8
    afa0:	af00      	add	r7, sp, #0
    afa2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->enable_1khz_output  = true;
    afa4:	687b      	ldr	r3, [r7, #4]
    afa6:	2201      	movs	r2, #1
    afa8:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    afaa:	687b      	ldr	r3, [r7, #4]
    afac:	2201      	movs	r2, #1
    afae:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    afb0:	687b      	ldr	r3, [r7, #4]
    afb2:	2200      	movs	r2, #0
    afb4:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    afb6:	687b      	ldr	r3, [r7, #4]
    afb8:	2201      	movs	r2, #1
    afba:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    afbc:	687b      	ldr	r3, [r7, #4]
    afbe:	2207      	movs	r2, #7
    afc0:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    afc2:	687b      	ldr	r3, [r7, #4]
    afc4:	2200      	movs	r2, #0
    afc6:	715a      	strb	r2, [r3, #5]
}
    afc8:	46c0      	nop			; (mov r8, r8)
    afca:	46bd      	mov	sp, r7
    afcc:	b002      	add	sp, #8
    afce:	bd80      	pop	{r7, pc}

0000afd0 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    afd0:	b580      	push	{r7, lr}
    afd2:	b082      	sub	sp, #8
    afd4:	af00      	add	r7, sp, #0
    afd6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    afd8:	687b      	ldr	r3, [r7, #4]
    afda:	2203      	movs	r2, #3
    afdc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    afde:	687b      	ldr	r3, [r7, #4]
    afe0:	2200      	movs	r2, #0
    afe2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    afe4:	687b      	ldr	r3, [r7, #4]
    afe6:	2201      	movs	r2, #1
    afe8:	709a      	strb	r2, [r3, #2]
}
    afea:	46c0      	nop			; (mov r8, r8)
    afec:	46bd      	mov	sp, r7
    afee:	b002      	add	sp, #8
    aff0:	bd80      	pop	{r7, pc}
    aff2:	46c0      	nop			; (mov r8, r8)

0000aff4 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    aff4:	b580      	push	{r7, lr}
    aff6:	b082      	sub	sp, #8
    aff8:	af00      	add	r7, sp, #0
    affa:	0002      	movs	r2, r0
    affc:	1dfb      	adds	r3, r7, #7
    affe:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    b000:	4a03      	ldr	r2, [pc, #12]	; (b010 <system_cpu_clock_set_divider+0x1c>)
    b002:	1dfb      	adds	r3, r7, #7
    b004:	781b      	ldrb	r3, [r3, #0]
    b006:	7213      	strb	r3, [r2, #8]
}
    b008:	46c0      	nop			; (mov r8, r8)
    b00a:	46bd      	mov	sp, r7
    b00c:	b002      	add	sp, #8
    b00e:	bd80      	pop	{r7, pc}
    b010:	40000400 	.word	0x40000400

0000b014 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    b014:	b580      	push	{r7, lr}
    b016:	b082      	sub	sp, #8
    b018:	af00      	add	r7, sp, #0
    b01a:	0002      	movs	r2, r0
    b01c:	1dfb      	adds	r3, r7, #7
    b01e:	701a      	strb	r2, [r3, #0]
    b020:	1dbb      	adds	r3, r7, #6
    b022:	1c0a      	adds	r2, r1, #0
    b024:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    b026:	1dfb      	adds	r3, r7, #7
    b028:	781b      	ldrb	r3, [r3, #0]
    b02a:	2b01      	cmp	r3, #1
    b02c:	d008      	beq.n	b040 <system_apb_clock_set_divider+0x2c>
    b02e:	2b02      	cmp	r3, #2
    b030:	d00b      	beq.n	b04a <system_apb_clock_set_divider+0x36>
    b032:	2b00      	cmp	r3, #0
    b034:	d10e      	bne.n	b054 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    b036:	4a0b      	ldr	r2, [pc, #44]	; (b064 <system_apb_clock_set_divider+0x50>)
    b038:	1dbb      	adds	r3, r7, #6
    b03a:	781b      	ldrb	r3, [r3, #0]
    b03c:	7253      	strb	r3, [r2, #9]
			break;
    b03e:	e00b      	b.n	b058 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    b040:	4a08      	ldr	r2, [pc, #32]	; (b064 <system_apb_clock_set_divider+0x50>)
    b042:	1dbb      	adds	r3, r7, #6
    b044:	781b      	ldrb	r3, [r3, #0]
    b046:	7293      	strb	r3, [r2, #10]
			break;
    b048:	e006      	b.n	b058 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    b04a:	4a06      	ldr	r2, [pc, #24]	; (b064 <system_apb_clock_set_divider+0x50>)
    b04c:	1dbb      	adds	r3, r7, #6
    b04e:	781b      	ldrb	r3, [r3, #0]
    b050:	72d3      	strb	r3, [r2, #11]
			break;
    b052:	e001      	b.n	b058 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    b054:	2317      	movs	r3, #23
    b056:	e000      	b.n	b05a <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    b058:	2300      	movs	r3, #0
}
    b05a:	0018      	movs	r0, r3
    b05c:	46bd      	mov	sp, r7
    b05e:	b002      	add	sp, #8
    b060:	bd80      	pop	{r7, pc}
    b062:	46c0      	nop			; (mov r8, r8)
    b064:	40000400 	.word	0x40000400

0000b068 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    b068:	b580      	push	{r7, lr}
    b06a:	b082      	sub	sp, #8
    b06c:	af00      	add	r7, sp, #0
    b06e:	0002      	movs	r2, r0
    b070:	1dfb      	adds	r3, r7, #7
    b072:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    b074:	4a08      	ldr	r2, [pc, #32]	; (b098 <system_flash_set_waitstates+0x30>)
    b076:	1dfb      	adds	r3, r7, #7
    b078:	781b      	ldrb	r3, [r3, #0]
    b07a:	210f      	movs	r1, #15
    b07c:	400b      	ands	r3, r1
    b07e:	b2d9      	uxtb	r1, r3
    b080:	6853      	ldr	r3, [r2, #4]
    b082:	200f      	movs	r0, #15
    b084:	4001      	ands	r1, r0
    b086:	0049      	lsls	r1, r1, #1
    b088:	201e      	movs	r0, #30
    b08a:	4383      	bics	r3, r0
    b08c:	430b      	orrs	r3, r1
    b08e:	6053      	str	r3, [r2, #4]
}
    b090:	46c0      	nop			; (mov r8, r8)
    b092:	46bd      	mov	sp, r7
    b094:	b002      	add	sp, #8
    b096:	bd80      	pop	{r7, pc}
    b098:	41004000 	.word	0x41004000

0000b09c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    b09c:	b580      	push	{r7, lr}
    b09e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    b0a0:	46c0      	nop			; (mov r8, r8)
    b0a2:	4b04      	ldr	r3, [pc, #16]	; (b0b4 <_system_dfll_wait_for_sync+0x18>)
    b0a4:	68db      	ldr	r3, [r3, #12]
    b0a6:	2210      	movs	r2, #16
    b0a8:	4013      	ands	r3, r2
    b0aa:	d0fa      	beq.n	b0a2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    b0ac:	46c0      	nop			; (mov r8, r8)
    b0ae:	46bd      	mov	sp, r7
    b0b0:	bd80      	pop	{r7, pc}
    b0b2:	46c0      	nop			; (mov r8, r8)
    b0b4:	40000800 	.word	0x40000800

0000b0b8 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    b0b8:	b580      	push	{r7, lr}
    b0ba:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    b0bc:	4b0c      	ldr	r3, [pc, #48]	; (b0f0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b0be:	2202      	movs	r2, #2
    b0c0:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    b0c2:	4b0c      	ldr	r3, [pc, #48]	; (b0f4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    b0c4:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    b0c6:	4a0a      	ldr	r2, [pc, #40]	; (b0f0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b0c8:	4b0b      	ldr	r3, [pc, #44]	; (b0f8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    b0ca:	689b      	ldr	r3, [r3, #8]
    b0cc:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    b0ce:	4a08      	ldr	r2, [pc, #32]	; (b0f0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b0d0:	4b09      	ldr	r3, [pc, #36]	; (b0f8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    b0d2:	685b      	ldr	r3, [r3, #4]
    b0d4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    b0d6:	4b06      	ldr	r3, [pc, #24]	; (b0f0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b0d8:	2200      	movs	r2, #0
    b0da:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    b0dc:	4b05      	ldr	r3, [pc, #20]	; (b0f4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    b0de:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    b0e0:	4a03      	ldr	r2, [pc, #12]	; (b0f0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b0e2:	4b05      	ldr	r3, [pc, #20]	; (b0f8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    b0e4:	681b      	ldr	r3, [r3, #0]
    b0e6:	b29b      	uxth	r3, r3
    b0e8:	8493      	strh	r3, [r2, #36]	; 0x24
}
    b0ea:	46c0      	nop			; (mov r8, r8)
    b0ec:	46bd      	mov	sp, r7
    b0ee:	bd80      	pop	{r7, pc}
    b0f0:	40000800 	.word	0x40000800
    b0f4:	0000b09d 	.word	0x0000b09d
    b0f8:	20000d64 	.word	0x20000d64

0000b0fc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    b0fc:	b580      	push	{r7, lr}
    b0fe:	b082      	sub	sp, #8
    b100:	af00      	add	r7, sp, #0
    b102:	0002      	movs	r2, r0
    b104:	1dfb      	adds	r3, r7, #7
    b106:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    b108:	1dfb      	adds	r3, r7, #7
    b10a:	781b      	ldrb	r3, [r3, #0]
    b10c:	2b08      	cmp	r3, #8
    b10e:	d841      	bhi.n	b194 <system_clock_source_get_hz+0x98>
    b110:	009a      	lsls	r2, r3, #2
    b112:	4b23      	ldr	r3, [pc, #140]	; (b1a0 <system_clock_source_get_hz+0xa4>)
    b114:	18d3      	adds	r3, r2, r3
    b116:	681b      	ldr	r3, [r3, #0]
    b118:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    b11a:	4b22      	ldr	r3, [pc, #136]	; (b1a4 <system_clock_source_get_hz+0xa8>)
    b11c:	691b      	ldr	r3, [r3, #16]
    b11e:	e03a      	b.n	b196 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    b120:	4b21      	ldr	r3, [pc, #132]	; (b1a8 <system_clock_source_get_hz+0xac>)
    b122:	6a1b      	ldr	r3, [r3, #32]
    b124:	059b      	lsls	r3, r3, #22
    b126:	0f9b      	lsrs	r3, r3, #30
    b128:	b2db      	uxtb	r3, r3
    b12a:	001a      	movs	r2, r3
    b12c:	4b1f      	ldr	r3, [pc, #124]	; (b1ac <system_clock_source_get_hz+0xb0>)
    b12e:	40d3      	lsrs	r3, r2
    b130:	e031      	b.n	b196 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    b132:	2380      	movs	r3, #128	; 0x80
    b134:	021b      	lsls	r3, r3, #8
    b136:	e02e      	b.n	b196 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    b138:	2380      	movs	r3, #128	; 0x80
    b13a:	021b      	lsls	r3, r3, #8
    b13c:	e02b      	b.n	b196 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    b13e:	4b19      	ldr	r3, [pc, #100]	; (b1a4 <system_clock_source_get_hz+0xa8>)
    b140:	695b      	ldr	r3, [r3, #20]
    b142:	e028      	b.n	b196 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    b144:	4b17      	ldr	r3, [pc, #92]	; (b1a4 <system_clock_source_get_hz+0xa8>)
    b146:	681b      	ldr	r3, [r3, #0]
    b148:	2202      	movs	r2, #2
    b14a:	4013      	ands	r3, r2
    b14c:	d101      	bne.n	b152 <system_clock_source_get_hz+0x56>
			return 0;
    b14e:	2300      	movs	r3, #0
    b150:	e021      	b.n	b196 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    b152:	4b17      	ldr	r3, [pc, #92]	; (b1b0 <system_clock_source_get_hz+0xb4>)
    b154:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    b156:	4b13      	ldr	r3, [pc, #76]	; (b1a4 <system_clock_source_get_hz+0xa8>)
    b158:	681b      	ldr	r3, [r3, #0]
    b15a:	2224      	movs	r2, #36	; 0x24
    b15c:	4013      	ands	r3, r2
    b15e:	2b04      	cmp	r3, #4
    b160:	d109      	bne.n	b176 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    b162:	2000      	movs	r0, #0
    b164:	4b13      	ldr	r3, [pc, #76]	; (b1b4 <system_clock_source_get_hz+0xb8>)
    b166:	4798      	blx	r3
    b168:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    b16a:	4b0e      	ldr	r3, [pc, #56]	; (b1a4 <system_clock_source_get_hz+0xa8>)
    b16c:	689b      	ldr	r3, [r3, #8]
    b16e:	041b      	lsls	r3, r3, #16
    b170:	0c1b      	lsrs	r3, r3, #16

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    b172:	4353      	muls	r3, r2
    b174:	e00f      	b.n	b196 <system_clock_source_get_hz+0x9a>
					(_system_clock_inst.dfll.mul & 0xffff);
		default:
			return 48000000UL;
    b176:	4b10      	ldr	r3, [pc, #64]	; (b1b8 <system_clock_source_get_hz+0xbc>)
    b178:	e00d      	b.n	b196 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    b17a:	4a0b      	ldr	r2, [pc, #44]	; (b1a8 <system_clock_source_get_hz+0xac>)
    b17c:	2350      	movs	r3, #80	; 0x50
    b17e:	5cd3      	ldrb	r3, [r2, r3]
    b180:	b2db      	uxtb	r3, r3
    b182:	001a      	movs	r2, r3
    b184:	2304      	movs	r3, #4
    b186:	4013      	ands	r3, r2
    b188:	d101      	bne.n	b18e <system_clock_source_get_hz+0x92>
			return 0;
    b18a:	2300      	movs	r3, #0
    b18c:	e003      	b.n	b196 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    b18e:	4b05      	ldr	r3, [pc, #20]	; (b1a4 <system_clock_source_get_hz+0xa8>)
    b190:	68db      	ldr	r3, [r3, #12]
    b192:	e000      	b.n	b196 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    b194:	2300      	movs	r3, #0
	}
}
    b196:	0018      	movs	r0, r3
    b198:	46bd      	mov	sp, r7
    b19a:	b002      	add	sp, #8
    b19c:	bd80      	pop	{r7, pc}
    b19e:	46c0      	nop			; (mov r8, r8)
    b1a0:	0000faec 	.word	0x0000faec
    b1a4:	20000d64 	.word	0x20000d64
    b1a8:	40000800 	.word	0x40000800
    b1ac:	007a1200 	.word	0x007a1200
    b1b0:	0000b09d 	.word	0x0000b09d
    b1b4:	0000bc55 	.word	0x0000bc55
    b1b8:	02dc6c00 	.word	0x02dc6c00

0000b1bc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    b1bc:	b580      	push	{r7, lr}
    b1be:	b084      	sub	sp, #16
    b1c0:	af00      	add	r7, sp, #0
    b1c2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    b1c4:	4b1a      	ldr	r3, [pc, #104]	; (b230 <system_clock_source_osc8m_set_config+0x74>)
    b1c6:	6a1b      	ldr	r3, [r3, #32]
    b1c8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    b1ca:	687b      	ldr	r3, [r7, #4]
    b1cc:	781b      	ldrb	r3, [r3, #0]
    b1ce:	1c1a      	adds	r2, r3, #0
    b1d0:	2303      	movs	r3, #3
    b1d2:	4013      	ands	r3, r2
    b1d4:	b2da      	uxtb	r2, r3
    b1d6:	230d      	movs	r3, #13
    b1d8:	18fb      	adds	r3, r7, r3
    b1da:	2103      	movs	r1, #3
    b1dc:	400a      	ands	r2, r1
    b1de:	0010      	movs	r0, r2
    b1e0:	781a      	ldrb	r2, [r3, #0]
    b1e2:	2103      	movs	r1, #3
    b1e4:	438a      	bics	r2, r1
    b1e6:	1c11      	adds	r1, r2, #0
    b1e8:	1c02      	adds	r2, r0, #0
    b1ea:	430a      	orrs	r2, r1
    b1ec:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    b1ee:	687b      	ldr	r3, [r7, #4]
    b1f0:	789a      	ldrb	r2, [r3, #2]
    b1f2:	230c      	movs	r3, #12
    b1f4:	18fb      	adds	r3, r7, r3
    b1f6:	01d0      	lsls	r0, r2, #7
    b1f8:	781a      	ldrb	r2, [r3, #0]
    b1fa:	217f      	movs	r1, #127	; 0x7f
    b1fc:	400a      	ands	r2, r1
    b1fe:	1c11      	adds	r1, r2, #0
    b200:	1c02      	adds	r2, r0, #0
    b202:	430a      	orrs	r2, r1
    b204:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    b206:	687b      	ldr	r3, [r7, #4]
    b208:	785a      	ldrb	r2, [r3, #1]
    b20a:	230c      	movs	r3, #12
    b20c:	18fb      	adds	r3, r7, r3
    b20e:	2101      	movs	r1, #1
    b210:	400a      	ands	r2, r1
    b212:	0190      	lsls	r0, r2, #6
    b214:	781a      	ldrb	r2, [r3, #0]
    b216:	2140      	movs	r1, #64	; 0x40
    b218:	438a      	bics	r2, r1
    b21a:	1c11      	adds	r1, r2, #0
    b21c:	1c02      	adds	r2, r0, #0
    b21e:	430a      	orrs	r2, r1
    b220:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    b222:	4b03      	ldr	r3, [pc, #12]	; (b230 <system_clock_source_osc8m_set_config+0x74>)
    b224:	68fa      	ldr	r2, [r7, #12]
    b226:	621a      	str	r2, [r3, #32]
}
    b228:	46c0      	nop			; (mov r8, r8)
    b22a:	46bd      	mov	sp, r7
    b22c:	b004      	add	sp, #16
    b22e:	bd80      	pop	{r7, pc}
    b230:	40000800 	.word	0x40000800

0000b234 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    b234:	b580      	push	{r7, lr}
    b236:	b084      	sub	sp, #16
    b238:	af00      	add	r7, sp, #0
    b23a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    b23c:	4b2f      	ldr	r3, [pc, #188]	; (b2fc <system_clock_source_osc32k_set_config+0xc8>)
    b23e:	699b      	ldr	r3, [r3, #24]
    b240:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    b242:	687b      	ldr	r3, [r7, #4]
    b244:	785a      	ldrb	r2, [r3, #1]
    b246:	230c      	movs	r3, #12
    b248:	18fb      	adds	r3, r7, r3
    b24a:	2101      	movs	r1, #1
    b24c:	400a      	ands	r2, r1
    b24e:	00d0      	lsls	r0, r2, #3
    b250:	781a      	ldrb	r2, [r3, #0]
    b252:	2108      	movs	r1, #8
    b254:	438a      	bics	r2, r1
    b256:	1c11      	adds	r1, r2, #0
    b258:	1c02      	adds	r2, r0, #0
    b25a:	430a      	orrs	r2, r1
    b25c:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    b25e:	687b      	ldr	r3, [r7, #4]
    b260:	789a      	ldrb	r2, [r3, #2]
    b262:	230c      	movs	r3, #12
    b264:	18fb      	adds	r3, r7, r3
    b266:	2101      	movs	r1, #1
    b268:	400a      	ands	r2, r1
    b26a:	0090      	lsls	r0, r2, #2
    b26c:	781a      	ldrb	r2, [r3, #0]
    b26e:	2104      	movs	r1, #4
    b270:	438a      	bics	r2, r1
    b272:	1c11      	adds	r1, r2, #0
    b274:	1c02      	adds	r2, r0, #0
    b276:	430a      	orrs	r2, r1
    b278:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    b27a:	687b      	ldr	r3, [r7, #4]
    b27c:	781b      	ldrb	r3, [r3, #0]
    b27e:	1c1a      	adds	r2, r3, #0
    b280:	2307      	movs	r3, #7
    b282:	4013      	ands	r3, r2
    b284:	b2da      	uxtb	r2, r3
    b286:	230d      	movs	r3, #13
    b288:	18fb      	adds	r3, r7, r3
    b28a:	2107      	movs	r1, #7
    b28c:	400a      	ands	r2, r1
    b28e:	0010      	movs	r0, r2
    b290:	781a      	ldrb	r2, [r3, #0]
    b292:	2107      	movs	r1, #7
    b294:	438a      	bics	r2, r1
    b296:	1c11      	adds	r1, r2, #0
    b298:	1c02      	adds	r2, r0, #0
    b29a:	430a      	orrs	r2, r1
    b29c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    b29e:	687b      	ldr	r3, [r7, #4]
    b2a0:	791a      	ldrb	r2, [r3, #4]
    b2a2:	230c      	movs	r3, #12
    b2a4:	18fb      	adds	r3, r7, r3
    b2a6:	01d0      	lsls	r0, r2, #7
    b2a8:	781a      	ldrb	r2, [r3, #0]
    b2aa:	217f      	movs	r1, #127	; 0x7f
    b2ac:	400a      	ands	r2, r1
    b2ae:	1c11      	adds	r1, r2, #0
    b2b0:	1c02      	adds	r2, r0, #0
    b2b2:	430a      	orrs	r2, r1
    b2b4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    b2b6:	687b      	ldr	r3, [r7, #4]
    b2b8:	78da      	ldrb	r2, [r3, #3]
    b2ba:	230c      	movs	r3, #12
    b2bc:	18fb      	adds	r3, r7, r3
    b2be:	2101      	movs	r1, #1
    b2c0:	400a      	ands	r2, r1
    b2c2:	0190      	lsls	r0, r2, #6
    b2c4:	781a      	ldrb	r2, [r3, #0]
    b2c6:	2140      	movs	r1, #64	; 0x40
    b2c8:	438a      	bics	r2, r1
    b2ca:	1c11      	adds	r1, r2, #0
    b2cc:	1c02      	adds	r2, r0, #0
    b2ce:	430a      	orrs	r2, r1
    b2d0:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    b2d2:	687b      	ldr	r3, [r7, #4]
    b2d4:	795a      	ldrb	r2, [r3, #5]
    b2d6:	230d      	movs	r3, #13
    b2d8:	18fb      	adds	r3, r7, r3
    b2da:	2101      	movs	r1, #1
    b2dc:	400a      	ands	r2, r1
    b2de:	0110      	lsls	r0, r2, #4
    b2e0:	781a      	ldrb	r2, [r3, #0]
    b2e2:	2110      	movs	r1, #16
    b2e4:	438a      	bics	r2, r1
    b2e6:	1c11      	adds	r1, r2, #0
    b2e8:	1c02      	adds	r2, r0, #0
    b2ea:	430a      	orrs	r2, r1
    b2ec:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    b2ee:	4b03      	ldr	r3, [pc, #12]	; (b2fc <system_clock_source_osc32k_set_config+0xc8>)
    b2f0:	68fa      	ldr	r2, [r7, #12]
    b2f2:	619a      	str	r2, [r3, #24]
}
    b2f4:	46c0      	nop			; (mov r8, r8)
    b2f6:	46bd      	mov	sp, r7
    b2f8:	b004      	add	sp, #16
    b2fa:	bd80      	pop	{r7, pc}
    b2fc:	40000800 	.word	0x40000800

0000b300 <system_clock_source_xosc_set_config>:
 * \param[in] config  External oscillator configuration structure containing
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
    b300:	b580      	push	{r7, lr}
    b302:	b084      	sub	sp, #16
    b304:	af00      	add	r7, sp, #0
    b306:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC_Type temp = SYSCTRL->XOSC;
    b308:	4a50      	ldr	r2, [pc, #320]	; (b44c <system_clock_source_xosc_set_config+0x14c>)
    b30a:	230c      	movs	r3, #12
    b30c:	18fb      	adds	r3, r7, r3
    b30e:	8a12      	ldrh	r2, [r2, #16]
    b310:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    b312:	687b      	ldr	r3, [r7, #4]
    b314:	785b      	ldrb	r3, [r3, #1]
    b316:	1c1a      	adds	r2, r3, #0
    b318:	230f      	movs	r3, #15
    b31a:	4013      	ands	r3, r2
    b31c:	b2da      	uxtb	r2, r3
    b31e:	230c      	movs	r3, #12
    b320:	18fb      	adds	r3, r7, r3
    b322:	0110      	lsls	r0, r2, #4
    b324:	785a      	ldrb	r2, [r3, #1]
    b326:	210f      	movs	r1, #15
    b328:	400a      	ands	r2, r1
    b32a:	1c11      	adds	r1, r2, #0
    b32c:	1c02      	adds	r2, r0, #0
    b32e:	430a      	orrs	r2, r1
    b330:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    b332:	687b      	ldr	r3, [r7, #4]
    b334:	781b      	ldrb	r3, [r3, #0]
    b336:	2b00      	cmp	r3, #0
    b338:	d106      	bne.n	b348 <system_clock_source_xosc_set_config+0x48>
		temp.bit.XTALEN = 1;
    b33a:	230c      	movs	r3, #12
    b33c:	18fb      	adds	r3, r7, r3
    b33e:	781a      	ldrb	r2, [r3, #0]
    b340:	2104      	movs	r1, #4
    b342:	430a      	orrs	r2, r1
    b344:	701a      	strb	r2, [r3, #0]
    b346:	e005      	b.n	b354 <system_clock_source_xosc_set_config+0x54>
	} else {
		temp.bit.XTALEN = 0;
    b348:	230c      	movs	r3, #12
    b34a:	18fb      	adds	r3, r7, r3
    b34c:	781a      	ldrb	r2, [r3, #0]
    b34e:	2104      	movs	r1, #4
    b350:	438a      	bics	r2, r1
    b352:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AMPGC = config->auto_gain_control;
    b354:	687b      	ldr	r3, [r7, #4]
    b356:	789a      	ldrb	r2, [r3, #2]
    b358:	230c      	movs	r3, #12
    b35a:	18fb      	adds	r3, r7, r3
    b35c:	2101      	movs	r1, #1
    b35e:	400a      	ands	r2, r1
    b360:	00d0      	lsls	r0, r2, #3
    b362:	785a      	ldrb	r2, [r3, #1]
    b364:	2108      	movs	r1, #8
    b366:	438a      	bics	r2, r1
    b368:	1c11      	adds	r1, r2, #0
    b36a:	1c02      	adds	r2, r0, #0
    b36c:	430a      	orrs	r2, r1
    b36e:	705a      	strb	r2, [r3, #1]

	/* Set gain */
	if (config->frequency <= 2000000) {
    b370:	687b      	ldr	r3, [r7, #4]
    b372:	685b      	ldr	r3, [r3, #4]
    b374:	4a36      	ldr	r2, [pc, #216]	; (b450 <system_clock_source_xosc_set_config+0x150>)
    b376:	4293      	cmp	r3, r2
    b378:	d806      	bhi.n	b388 <system_clock_source_xosc_set_config+0x88>
		temp.bit.GAIN = 0;
    b37a:	230c      	movs	r3, #12
    b37c:	18fb      	adds	r3, r7, r3
    b37e:	785a      	ldrb	r2, [r3, #1]
    b380:	2107      	movs	r1, #7
    b382:	438a      	bics	r2, r1
    b384:	705a      	strb	r2, [r3, #1]
    b386:	e03a      	b.n	b3fe <system_clock_source_xosc_set_config+0xfe>
	} else if (config->frequency <= 4000000) {
    b388:	687b      	ldr	r3, [r7, #4]
    b38a:	685b      	ldr	r3, [r3, #4]
    b38c:	4a31      	ldr	r2, [pc, #196]	; (b454 <system_clock_source_xosc_set_config+0x154>)
    b38e:	4293      	cmp	r3, r2
    b390:	d809      	bhi.n	b3a6 <system_clock_source_xosc_set_config+0xa6>
		temp.bit.GAIN = 1;
    b392:	230c      	movs	r3, #12
    b394:	18fb      	adds	r3, r7, r3
    b396:	785a      	ldrb	r2, [r3, #1]
    b398:	2107      	movs	r1, #7
    b39a:	438a      	bics	r2, r1
    b39c:	1c11      	adds	r1, r2, #0
    b39e:	2201      	movs	r2, #1
    b3a0:	430a      	orrs	r2, r1
    b3a2:	705a      	strb	r2, [r3, #1]
    b3a4:	e02b      	b.n	b3fe <system_clock_source_xosc_set_config+0xfe>
	} else if (config->frequency <= 8000000) {
    b3a6:	687b      	ldr	r3, [r7, #4]
    b3a8:	685b      	ldr	r3, [r3, #4]
    b3aa:	4a2b      	ldr	r2, [pc, #172]	; (b458 <system_clock_source_xosc_set_config+0x158>)
    b3ac:	4293      	cmp	r3, r2
    b3ae:	d809      	bhi.n	b3c4 <system_clock_source_xosc_set_config+0xc4>
		temp.bit.GAIN = 2;
    b3b0:	230c      	movs	r3, #12
    b3b2:	18fb      	adds	r3, r7, r3
    b3b4:	785a      	ldrb	r2, [r3, #1]
    b3b6:	2107      	movs	r1, #7
    b3b8:	438a      	bics	r2, r1
    b3ba:	1c11      	adds	r1, r2, #0
    b3bc:	2202      	movs	r2, #2
    b3be:	430a      	orrs	r2, r1
    b3c0:	705a      	strb	r2, [r3, #1]
    b3c2:	e01c      	b.n	b3fe <system_clock_source_xosc_set_config+0xfe>
	} else if (config->frequency <= 16000000) {
    b3c4:	687b      	ldr	r3, [r7, #4]
    b3c6:	685b      	ldr	r3, [r3, #4]
    b3c8:	4a24      	ldr	r2, [pc, #144]	; (b45c <system_clock_source_xosc_set_config+0x15c>)
    b3ca:	4293      	cmp	r3, r2
    b3cc:	d809      	bhi.n	b3e2 <system_clock_source_xosc_set_config+0xe2>
		temp.bit.GAIN = 3;
    b3ce:	230c      	movs	r3, #12
    b3d0:	18fb      	adds	r3, r7, r3
    b3d2:	785a      	ldrb	r2, [r3, #1]
    b3d4:	2107      	movs	r1, #7
    b3d6:	438a      	bics	r2, r1
    b3d8:	1c11      	adds	r1, r2, #0
    b3da:	2203      	movs	r2, #3
    b3dc:	430a      	orrs	r2, r1
    b3de:	705a      	strb	r2, [r3, #1]
    b3e0:	e00d      	b.n	b3fe <system_clock_source_xosc_set_config+0xfe>
	} else if (config->frequency <= 32000000) {
    b3e2:	687b      	ldr	r3, [r7, #4]
    b3e4:	685b      	ldr	r3, [r3, #4]
    b3e6:	4a1e      	ldr	r2, [pc, #120]	; (b460 <system_clock_source_xosc_set_config+0x160>)
    b3e8:	4293      	cmp	r3, r2
    b3ea:	d808      	bhi.n	b3fe <system_clock_source_xosc_set_config+0xfe>
		temp.bit.GAIN = 4;
    b3ec:	230c      	movs	r3, #12
    b3ee:	18fb      	adds	r3, r7, r3
    b3f0:	785a      	ldrb	r2, [r3, #1]
    b3f2:	2107      	movs	r1, #7
    b3f4:	438a      	bics	r2, r1
    b3f6:	1c11      	adds	r1, r2, #0
    b3f8:	2204      	movs	r2, #4
    b3fa:	430a      	orrs	r2, r1
    b3fc:	705a      	strb	r2, [r3, #1]
	}

	temp.bit.ONDEMAND = config->on_demand;
    b3fe:	687b      	ldr	r3, [r7, #4]
    b400:	7a5a      	ldrb	r2, [r3, #9]
    b402:	230c      	movs	r3, #12
    b404:	18fb      	adds	r3, r7, r3
    b406:	01d0      	lsls	r0, r2, #7
    b408:	781a      	ldrb	r2, [r3, #0]
    b40a:	217f      	movs	r1, #127	; 0x7f
    b40c:	400a      	ands	r2, r1
    b40e:	1c11      	adds	r1, r2, #0
    b410:	1c02      	adds	r2, r0, #0
    b412:	430a      	orrs	r2, r1
    b414:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    b416:	687b      	ldr	r3, [r7, #4]
    b418:	7a1a      	ldrb	r2, [r3, #8]
    b41a:	230c      	movs	r3, #12
    b41c:	18fb      	adds	r3, r7, r3
    b41e:	2101      	movs	r1, #1
    b420:	400a      	ands	r2, r1
    b422:	0190      	lsls	r0, r2, #6
    b424:	781a      	ldrb	r2, [r3, #0]
    b426:	2140      	movs	r1, #64	; 0x40
    b428:	438a      	bics	r2, r1
    b42a:	1c11      	adds	r1, r2, #0
    b42c:	1c02      	adds	r2, r0, #0
    b42e:	430a      	orrs	r2, r1
    b430:	701a      	strb	r2, [r3, #0]

	/* Store XOSC frequency for internal use */
	_system_clock_inst.xosc.frequency = config->frequency;
    b432:	687b      	ldr	r3, [r7, #4]
    b434:	685a      	ldr	r2, [r3, #4]
    b436:	4b0b      	ldr	r3, [pc, #44]	; (b464 <system_clock_source_xosc_set_config+0x164>)
    b438:	611a      	str	r2, [r3, #16]

	SYSCTRL->XOSC = temp;
    b43a:	4a04      	ldr	r2, [pc, #16]	; (b44c <system_clock_source_xosc_set_config+0x14c>)
    b43c:	230c      	movs	r3, #12
    b43e:	18fb      	adds	r3, r7, r3
    b440:	881b      	ldrh	r3, [r3, #0]
    b442:	8213      	strh	r3, [r2, #16]
}
    b444:	46c0      	nop			; (mov r8, r8)
    b446:	46bd      	mov	sp, r7
    b448:	b004      	add	sp, #16
    b44a:	bd80      	pop	{r7, pc}
    b44c:	40000800 	.word	0x40000800
    b450:	001e8480 	.word	0x001e8480
    b454:	003d0900 	.word	0x003d0900
    b458:	007a1200 	.word	0x007a1200
    b45c:	00f42400 	.word	0x00f42400
    b460:	01e84800 	.word	0x01e84800
    b464:	20000d64 	.word	0x20000d64

0000b468 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    b468:	b580      	push	{r7, lr}
    b46a:	b082      	sub	sp, #8
    b46c:	af00      	add	r7, sp, #0
    b46e:	0002      	movs	r2, r0
    b470:	1dfb      	adds	r3, r7, #7
    b472:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    b474:	1dfb      	adds	r3, r7, #7
    b476:	781b      	ldrb	r3, [r3, #0]
    b478:	2b08      	cmp	r3, #8
    b47a:	d83b      	bhi.n	b4f4 <system_clock_source_enable+0x8c>
    b47c:	009a      	lsls	r2, r3, #2
    b47e:	4b21      	ldr	r3, [pc, #132]	; (b504 <system_clock_source_enable+0x9c>)
    b480:	18d3      	adds	r3, r2, r3
    b482:	681b      	ldr	r3, [r3, #0]
    b484:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    b486:	4b20      	ldr	r3, [pc, #128]	; (b508 <system_clock_source_enable+0xa0>)
    b488:	4a1f      	ldr	r2, [pc, #124]	; (b508 <system_clock_source_enable+0xa0>)
    b48a:	6a12      	ldr	r2, [r2, #32]
    b48c:	2102      	movs	r1, #2
    b48e:	430a      	orrs	r2, r1
    b490:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    b492:	2300      	movs	r3, #0
    b494:	e031      	b.n	b4fa <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    b496:	4b1c      	ldr	r3, [pc, #112]	; (b508 <system_clock_source_enable+0xa0>)
    b498:	4a1b      	ldr	r2, [pc, #108]	; (b508 <system_clock_source_enable+0xa0>)
    b49a:	6992      	ldr	r2, [r2, #24]
    b49c:	2102      	movs	r1, #2
    b49e:	430a      	orrs	r2, r1
    b4a0:	619a      	str	r2, [r3, #24]
		break;
    b4a2:	e029      	b.n	b4f8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    b4a4:	4a18      	ldr	r2, [pc, #96]	; (b508 <system_clock_source_enable+0xa0>)
    b4a6:	4b18      	ldr	r3, [pc, #96]	; (b508 <system_clock_source_enable+0xa0>)
    b4a8:	8a1b      	ldrh	r3, [r3, #16]
    b4aa:	b29b      	uxth	r3, r3
    b4ac:	2102      	movs	r1, #2
    b4ae:	430b      	orrs	r3, r1
    b4b0:	b29b      	uxth	r3, r3
    b4b2:	8213      	strh	r3, [r2, #16]
		break;
    b4b4:	e020      	b.n	b4f8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    b4b6:	4a14      	ldr	r2, [pc, #80]	; (b508 <system_clock_source_enable+0xa0>)
    b4b8:	4b13      	ldr	r3, [pc, #76]	; (b508 <system_clock_source_enable+0xa0>)
    b4ba:	8a9b      	ldrh	r3, [r3, #20]
    b4bc:	b29b      	uxth	r3, r3
    b4be:	2102      	movs	r1, #2
    b4c0:	430b      	orrs	r3, r1
    b4c2:	b29b      	uxth	r3, r3
    b4c4:	8293      	strh	r3, [r2, #20]
		break;
    b4c6:	e017      	b.n	b4f8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    b4c8:	4b10      	ldr	r3, [pc, #64]	; (b50c <system_clock_source_enable+0xa4>)
    b4ca:	681b      	ldr	r3, [r3, #0]
    b4cc:	2202      	movs	r2, #2
    b4ce:	431a      	orrs	r2, r3
    b4d0:	4b0e      	ldr	r3, [pc, #56]	; (b50c <system_clock_source_enable+0xa4>)
    b4d2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    b4d4:	4b0e      	ldr	r3, [pc, #56]	; (b510 <system_clock_source_enable+0xa8>)
    b4d6:	4798      	blx	r3
		break;
    b4d8:	e00e      	b.n	b4f8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    b4da:	4a0b      	ldr	r2, [pc, #44]	; (b508 <system_clock_source_enable+0xa0>)
    b4dc:	490a      	ldr	r1, [pc, #40]	; (b508 <system_clock_source_enable+0xa0>)
    b4de:	2344      	movs	r3, #68	; 0x44
    b4e0:	5ccb      	ldrb	r3, [r1, r3]
    b4e2:	b2db      	uxtb	r3, r3
    b4e4:	2102      	movs	r1, #2
    b4e6:	430b      	orrs	r3, r1
    b4e8:	b2d9      	uxtb	r1, r3
    b4ea:	2344      	movs	r3, #68	; 0x44
    b4ec:	54d1      	strb	r1, [r2, r3]
		break;
    b4ee:	e003      	b.n	b4f8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    b4f0:	2300      	movs	r3, #0
    b4f2:	e002      	b.n	b4fa <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    b4f4:	2317      	movs	r3, #23
    b4f6:	e000      	b.n	b4fa <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    b4f8:	2300      	movs	r3, #0
}
    b4fa:	0018      	movs	r0, r3
    b4fc:	46bd      	mov	sp, r7
    b4fe:	b002      	add	sp, #8
    b500:	bd80      	pop	{r7, pc}
    b502:	46c0      	nop			; (mov r8, r8)
    b504:	0000fb10 	.word	0x0000fb10
    b508:	40000800 	.word	0x40000800
    b50c:	20000d64 	.word	0x20000d64
    b510:	0000b0b9 	.word	0x0000b0b9

0000b514 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    b514:	b580      	push	{r7, lr}
    b516:	b084      	sub	sp, #16
    b518:	af00      	add	r7, sp, #0
    b51a:	0002      	movs	r2, r0
    b51c:	1dfb      	adds	r3, r7, #7
    b51e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    b520:	2300      	movs	r3, #0
    b522:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    b524:	1dfb      	adds	r3, r7, #7
    b526:	781b      	ldrb	r3, [r3, #0]
    b528:	2b08      	cmp	r3, #8
    b52a:	d821      	bhi.n	b570 <system_clock_source_is_ready+0x5c>
    b52c:	009a      	lsls	r2, r3, #2
    b52e:	4b18      	ldr	r3, [pc, #96]	; (b590 <system_clock_source_is_ready+0x7c>)
    b530:	18d3      	adds	r3, r2, r3
    b532:	681b      	ldr	r3, [r3, #0]
    b534:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    b536:	2308      	movs	r3, #8
    b538:	60fb      	str	r3, [r7, #12]
		break;
    b53a:	e01b      	b.n	b574 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    b53c:	2304      	movs	r3, #4
    b53e:	60fb      	str	r3, [r7, #12]
		break;
    b540:	e018      	b.n	b574 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    b542:	2301      	movs	r3, #1
    b544:	60fb      	str	r3, [r7, #12]
		break;
    b546:	e015      	b.n	b574 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    b548:	2302      	movs	r3, #2
    b54a:	60fb      	str	r3, [r7, #12]
		break;
    b54c:	e012      	b.n	b574 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    b54e:	2310      	movs	r3, #16
    b550:	60fb      	str	r3, [r7, #12]
		}
		break;
    b552:	e00f      	b.n	b574 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:

		return ((SYSCTRL->DPLLSTATUS.reg &
    b554:	4a0f      	ldr	r2, [pc, #60]	; (b594 <system_clock_source_is_ready+0x80>)
    b556:	2350      	movs	r3, #80	; 0x50
    b558:	5cd3      	ldrb	r3, [r2, r3]
    b55a:	b2db      	uxtb	r3, r3
    b55c:	001a      	movs	r2, r3
    b55e:	2303      	movs	r3, #3
    b560:	4013      	ands	r3, r2
    b562:	3b03      	subs	r3, #3
    b564:	425a      	negs	r2, r3
    b566:	4153      	adcs	r3, r2
    b568:	b2db      	uxtb	r3, r3
    b56a:	e00c      	b.n	b586 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    b56c:	2301      	movs	r3, #1
    b56e:	e00a      	b.n	b586 <system_clock_source_is_ready+0x72>

	default:
		return false;
    b570:	2300      	movs	r3, #0
    b572:	e008      	b.n	b586 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    b574:	4b07      	ldr	r3, [pc, #28]	; (b594 <system_clock_source_is_ready+0x80>)
    b576:	68db      	ldr	r3, [r3, #12]
    b578:	68fa      	ldr	r2, [r7, #12]
    b57a:	401a      	ands	r2, r3
    b57c:	68fb      	ldr	r3, [r7, #12]
    b57e:	1ad3      	subs	r3, r2, r3
    b580:	425a      	negs	r2, r3
    b582:	4153      	adcs	r3, r2
    b584:	b2db      	uxtb	r3, r3
}
    b586:	0018      	movs	r0, r3
    b588:	46bd      	mov	sp, r7
    b58a:	b004      	add	sp, #16
    b58c:	bd80      	pop	{r7, pc}
    b58e:	46c0      	nop			; (mov r8, r8)
    b590:	0000fb34 	.word	0x0000fb34
    b594:	40000800 	.word	0x40000800

0000b598 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    b598:	b580      	push	{r7, lr}
    b59a:	b082      	sub	sp, #8
    b59c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    b59e:	003b      	movs	r3, r7
    b5a0:	2203      	movs	r2, #3
    b5a2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    b5a4:	2300      	movs	r3, #0
    b5a6:	607b      	str	r3, [r7, #4]
    b5a8:	e009      	b.n	b5be <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    b5aa:	687b      	ldr	r3, [r7, #4]
    b5ac:	b2db      	uxtb	r3, r3
    b5ae:	003a      	movs	r2, r7
    b5b0:	0011      	movs	r1, r2
    b5b2:	0018      	movs	r0, r3
    b5b4:	4b05      	ldr	r3, [pc, #20]	; (b5cc <_switch_peripheral_gclk+0x34>)
    b5b6:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    b5b8:	687b      	ldr	r3, [r7, #4]
    b5ba:	3301      	adds	r3, #1
    b5bc:	607b      	str	r3, [r7, #4]
    b5be:	687b      	ldr	r3, [r7, #4]
    b5c0:	2b24      	cmp	r3, #36	; 0x24
    b5c2:	d9f2      	bls.n	b5aa <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    b5c4:	46c0      	nop			; (mov r8, r8)
    b5c6:	46bd      	mov	sp, r7
    b5c8:	b002      	add	sp, #8
    b5ca:	bd80      	pop	{r7, pc}
    b5cc:	0000bb31 	.word	0x0000bb31

0000b5d0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    b5d0:	b580      	push	{r7, lr}
    b5d2:	b0a4      	sub	sp, #144	; 0x90
    b5d4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    b5d6:	4b77      	ldr	r3, [pc, #476]	; (b7b4 <system_clock_init+0x1e4>)
    b5d8:	22c2      	movs	r2, #194	; 0xc2
    b5da:	00d2      	lsls	r2, r2, #3
    b5dc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    b5de:	2000      	movs	r0, #0
    b5e0:	4b75      	ldr	r3, [pc, #468]	; (b7b8 <system_clock_init+0x1e8>)
    b5e2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    b5e4:	4b75      	ldr	r3, [pc, #468]	; (b7bc <system_clock_init+0x1ec>)
    b5e6:	4798      	blx	r3

	/* XOSC */
#if CONF_CLOCK_XOSC_ENABLE == true
	struct system_clock_source_xosc_config xosc_conf;
	system_clock_source_xosc_get_config_defaults(&xosc_conf);
    b5e8:	2384      	movs	r3, #132	; 0x84
    b5ea:	18fb      	adds	r3, r7, r3
    b5ec:	0018      	movs	r0, r3
    b5ee:	4b74      	ldr	r3, [pc, #464]	; (b7c0 <system_clock_init+0x1f0>)
    b5f0:	4798      	blx	r3

	xosc_conf.external_clock    = CONF_CLOCK_XOSC_EXTERNAL_CRYSTAL;
    b5f2:	2384      	movs	r3, #132	; 0x84
    b5f4:	18fb      	adds	r3, r7, r3
    b5f6:	2200      	movs	r2, #0
    b5f8:	701a      	strb	r2, [r3, #0]
	xosc_conf.startup_time      = CONF_CLOCK_XOSC_STARTUP_TIME;
    b5fa:	2384      	movs	r3, #132	; 0x84
    b5fc:	18fb      	adds	r3, r7, r3
    b5fe:	220f      	movs	r2, #15
    b600:	705a      	strb	r2, [r3, #1]
	xosc_conf.frequency         = CONF_CLOCK_XOSC_EXTERNAL_FREQUENCY;
    b602:	2384      	movs	r3, #132	; 0x84
    b604:	18fb      	adds	r3, r7, r3
    b606:	4a6f      	ldr	r2, [pc, #444]	; (b7c4 <system_clock_init+0x1f4>)
    b608:	605a      	str	r2, [r3, #4]
	xosc_conf.run_in_standby    = CONF_CLOCK_XOSC_RUN_IN_STANDBY;
    b60a:	2384      	movs	r3, #132	; 0x84
    b60c:	18fb      	adds	r3, r7, r3
    b60e:	2200      	movs	r2, #0
    b610:	721a      	strb	r2, [r3, #8]

	system_clock_source_xosc_set_config(&xosc_conf);
    b612:	2384      	movs	r3, #132	; 0x84
    b614:	18fb      	adds	r3, r7, r3
    b616:	0018      	movs	r0, r3
    b618:	4b6b      	ldr	r3, [pc, #428]	; (b7c8 <system_clock_init+0x1f8>)
    b61a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC);
    b61c:	2000      	movs	r0, #0
    b61e:	4b6b      	ldr	r3, [pc, #428]	; (b7cc <system_clock_init+0x1fc>)
    b620:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC));
    b622:	46c0      	nop			; (mov r8, r8)
    b624:	2000      	movs	r0, #0
    b626:	4b6a      	ldr	r3, [pc, #424]	; (b7d0 <system_clock_init+0x200>)
    b628:	4798      	blx	r3
    b62a:	0003      	movs	r3, r0
    b62c:	001a      	movs	r2, r3
    b62e:	2301      	movs	r3, #1
    b630:	4053      	eors	r3, r2
    b632:	b2db      	uxtb	r3, r3
    b634:	2b00      	cmp	r3, #0
    b636:	d1f5      	bne.n	b624 <system_clock_init+0x54>
	if (CONF_CLOCK_XOSC_ON_DEMAND || CONF_CLOCK_XOSC_AUTO_GAIN_CONTROL) {
		SYSCTRL->XOSC.reg |=
    b638:	495e      	ldr	r1, [pc, #376]	; (b7b4 <system_clock_init+0x1e4>)
    b63a:	4b5e      	ldr	r3, [pc, #376]	; (b7b4 <system_clock_init+0x1e4>)
    b63c:	8a1b      	ldrh	r3, [r3, #16]
    b63e:	b29b      	uxth	r3, r3
    b640:	2288      	movs	r2, #136	; 0x88
    b642:	0112      	lsls	r2, r2, #4
    b644:	4313      	orrs	r3, r2
    b646:	b29b      	uxth	r3, r3
    b648:	820b      	strh	r3, [r1, #16]
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    b64a:	4a5a      	ldr	r2, [pc, #360]	; (b7b4 <system_clock_init+0x1e4>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    b64c:	4b61      	ldr	r3, [pc, #388]	; (b7d4 <system_clock_init+0x204>)
    b64e:	681b      	ldr	r3, [r3, #0]
    b650:	099b      	lsrs	r3, r3, #6
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    b652:	b2db      	uxtb	r3, r3
    b654:	1c19      	adds	r1, r3, #0
    b656:	237f      	movs	r3, #127	; 0x7f
    b658:	400b      	ands	r3, r1
    b65a:	b2d9      	uxtb	r1, r3
    b65c:	6993      	ldr	r3, [r2, #24]
    b65e:	207f      	movs	r0, #127	; 0x7f
    b660:	4001      	ands	r1, r0
    b662:	0409      	lsls	r1, r1, #16
    b664:	485c      	ldr	r0, [pc, #368]	; (b7d8 <system_clock_init+0x208>)
    b666:	4003      	ands	r3, r0
    b668:	430b      	orrs	r3, r1
    b66a:	6193      	str	r3, [r2, #24]
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    b66c:	237c      	movs	r3, #124	; 0x7c
    b66e:	18fb      	adds	r3, r7, r3
    b670:	0018      	movs	r0, r3
    b672:	4b5a      	ldr	r3, [pc, #360]	; (b7dc <system_clock_init+0x20c>)
    b674:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    b676:	237c      	movs	r3, #124	; 0x7c
    b678:	18fb      	adds	r3, r7, r3
    b67a:	2207      	movs	r2, #7
    b67c:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    b67e:	237c      	movs	r3, #124	; 0x7c
    b680:	18fb      	adds	r3, r7, r3
    b682:	2201      	movs	r2, #1
    b684:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    b686:	237c      	movs	r3, #124	; 0x7c
    b688:	18fb      	adds	r3, r7, r3
    b68a:	2201      	movs	r2, #1
    b68c:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    b68e:	237c      	movs	r3, #124	; 0x7c
    b690:	18fb      	adds	r3, r7, r3
    b692:	2201      	movs	r2, #1
    b694:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    b696:	237c      	movs	r3, #124	; 0x7c
    b698:	18fb      	adds	r3, r7, r3
    b69a:	2200      	movs	r2, #0
    b69c:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    b69e:	237c      	movs	r3, #124	; 0x7c
    b6a0:	18fb      	adds	r3, r7, r3
    b6a2:	0018      	movs	r0, r3
    b6a4:	4b4e      	ldr	r3, [pc, #312]	; (b7e0 <system_clock_init+0x210>)
    b6a6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    b6a8:	2004      	movs	r0, #4
    b6aa:	4b48      	ldr	r3, [pc, #288]	; (b7cc <system_clock_init+0x1fc>)
    b6ac:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    b6ae:	2378      	movs	r3, #120	; 0x78
    b6b0:	18fb      	adds	r3, r7, r3
    b6b2:	0018      	movs	r0, r3
    b6b4:	4b4b      	ldr	r3, [pc, #300]	; (b7e4 <system_clock_init+0x214>)
    b6b6:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    b6b8:	2378      	movs	r3, #120	; 0x78
    b6ba:	18fb      	adds	r3, r7, r3
    b6bc:	2200      	movs	r2, #0
    b6be:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    b6c0:	2378      	movs	r3, #120	; 0x78
    b6c2:	18fb      	adds	r3, r7, r3
    b6c4:	2201      	movs	r2, #1
    b6c6:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    b6c8:	2378      	movs	r3, #120	; 0x78
    b6ca:	18fb      	adds	r3, r7, r3
    b6cc:	2200      	movs	r2, #0
    b6ce:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    b6d0:	2378      	movs	r3, #120	; 0x78
    b6d2:	18fb      	adds	r3, r7, r3
    b6d4:	0018      	movs	r0, r3
    b6d6:	4b44      	ldr	r3, [pc, #272]	; (b7e8 <system_clock_init+0x218>)
    b6d8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    b6da:	2006      	movs	r0, #6
    b6dc:	4b3b      	ldr	r3, [pc, #236]	; (b7cc <system_clock_init+0x1fc>)
    b6de:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    b6e0:	4b42      	ldr	r3, [pc, #264]	; (b7ec <system_clock_init+0x21c>)
    b6e2:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    b6e4:	2360      	movs	r3, #96	; 0x60
    b6e6:	18fb      	adds	r3, r7, r3
    b6e8:	0018      	movs	r0, r3
    b6ea:	4b41      	ldr	r3, [pc, #260]	; (b7f0 <system_clock_init+0x220>)
    b6ec:	4798      	blx	r3
    b6ee:	2360      	movs	r3, #96	; 0x60
    b6f0:	18fb      	adds	r3, r7, r3
    b6f2:	2206      	movs	r2, #6
    b6f4:	701a      	strb	r2, [r3, #0]
    b6f6:	2360      	movs	r3, #96	; 0x60
    b6f8:	18fb      	adds	r3, r7, r3
    b6fa:	2201      	movs	r2, #1
    b6fc:	605a      	str	r2, [r3, #4]
    b6fe:	2360      	movs	r3, #96	; 0x60
    b700:	18fb      	adds	r3, r7, r3
    b702:	2200      	movs	r2, #0
    b704:	721a      	strb	r2, [r3, #8]
    b706:	2360      	movs	r3, #96	; 0x60
    b708:	18fb      	adds	r3, r7, r3
    b70a:	2200      	movs	r2, #0
    b70c:	725a      	strb	r2, [r3, #9]
    b70e:	2360      	movs	r3, #96	; 0x60
    b710:	18fb      	adds	r3, r7, r3
    b712:	0019      	movs	r1, r3
    b714:	2001      	movs	r0, #1
    b716:	4b37      	ldr	r3, [pc, #220]	; (b7f4 <system_clock_init+0x224>)
    b718:	4798      	blx	r3
    b71a:	2001      	movs	r0, #1
    b71c:	4b36      	ldr	r3, [pc, #216]	; (b7f8 <system_clock_init+0x228>)
    b71e:	4798      	blx	r3
    b720:	2354      	movs	r3, #84	; 0x54
    b722:	18fb      	adds	r3, r7, r3
    b724:	0018      	movs	r0, r3
    b726:	4b32      	ldr	r3, [pc, #200]	; (b7f0 <system_clock_init+0x220>)
    b728:	4798      	blx	r3
    b72a:	2354      	movs	r3, #84	; 0x54
    b72c:	18fb      	adds	r3, r7, r3
    b72e:	2204      	movs	r2, #4
    b730:	701a      	strb	r2, [r3, #0]
    b732:	2354      	movs	r3, #84	; 0x54
    b734:	18fb      	adds	r3, r7, r3
    b736:	2220      	movs	r2, #32
    b738:	605a      	str	r2, [r3, #4]
    b73a:	2354      	movs	r3, #84	; 0x54
    b73c:	18fb      	adds	r3, r7, r3
    b73e:	2200      	movs	r2, #0
    b740:	721a      	strb	r2, [r3, #8]
    b742:	2354      	movs	r3, #84	; 0x54
    b744:	18fb      	adds	r3, r7, r3
    b746:	2200      	movs	r2, #0
    b748:	725a      	strb	r2, [r3, #9]
    b74a:	2354      	movs	r3, #84	; 0x54
    b74c:	18fb      	adds	r3, r7, r3
    b74e:	0019      	movs	r1, r3
    b750:	2002      	movs	r0, #2
    b752:	4b28      	ldr	r3, [pc, #160]	; (b7f4 <system_clock_init+0x224>)
    b754:	4798      	blx	r3
    b756:	2002      	movs	r0, #2
    b758:	4b27      	ldr	r3, [pc, #156]	; (b7f8 <system_clock_init+0x228>)
    b75a:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    b75c:	2000      	movs	r0, #0
    b75e:	4b27      	ldr	r3, [pc, #156]	; (b7fc <system_clock_init+0x22c>)
    b760:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    b762:	2100      	movs	r1, #0
    b764:	2000      	movs	r0, #0
    b766:	4b26      	ldr	r3, [pc, #152]	; (b800 <system_clock_init+0x230>)
    b768:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    b76a:	2100      	movs	r1, #0
    b76c:	2001      	movs	r0, #1
    b76e:	4b24      	ldr	r3, [pc, #144]	; (b800 <system_clock_init+0x230>)
    b770:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    b772:	2100      	movs	r1, #0
    b774:	2002      	movs	r0, #2
    b776:	4b22      	ldr	r3, [pc, #136]	; (b800 <system_clock_init+0x230>)
    b778:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    b77a:	003b      	movs	r3, r7
    b77c:	0018      	movs	r0, r3
    b77e:	4b1c      	ldr	r3, [pc, #112]	; (b7f0 <system_clock_init+0x220>)
    b780:	4798      	blx	r3
    b782:	003b      	movs	r3, r7
    b784:	2206      	movs	r2, #6
    b786:	701a      	strb	r2, [r3, #0]
    b788:	003b      	movs	r3, r7
    b78a:	2201      	movs	r2, #1
    b78c:	605a      	str	r2, [r3, #4]
    b78e:	003b      	movs	r3, r7
    b790:	2200      	movs	r2, #0
    b792:	721a      	strb	r2, [r3, #8]
    b794:	003b      	movs	r3, r7
    b796:	2201      	movs	r2, #1
    b798:	725a      	strb	r2, [r3, #9]
    b79a:	003b      	movs	r3, r7
    b79c:	0019      	movs	r1, r3
    b79e:	2000      	movs	r0, #0
    b7a0:	4b14      	ldr	r3, [pc, #80]	; (b7f4 <system_clock_init+0x224>)
    b7a2:	4798      	blx	r3
    b7a4:	2000      	movs	r0, #0
    b7a6:	4b14      	ldr	r3, [pc, #80]	; (b7f8 <system_clock_init+0x228>)
    b7a8:	4798      	blx	r3
#endif
}
    b7aa:	46c0      	nop			; (mov r8, r8)
    b7ac:	46bd      	mov	sp, r7
    b7ae:	b024      	add	sp, #144	; 0x90
    b7b0:	bd80      	pop	{r7, pc}
    b7b2:	46c0      	nop			; (mov r8, r8)
    b7b4:	40000800 	.word	0x40000800
    b7b8:	0000b069 	.word	0x0000b069
    b7bc:	0000b599 	.word	0x0000b599
    b7c0:	0000af65 	.word	0x0000af65
    b7c4:	00b71b00 	.word	0x00b71b00
    b7c8:	0000b301 	.word	0x0000b301
    b7cc:	0000b469 	.word	0x0000b469
    b7d0:	0000b515 	.word	0x0000b515
    b7d4:	00806024 	.word	0x00806024
    b7d8:	ff80ffff 	.word	0xff80ffff
    b7dc:	0000af9d 	.word	0x0000af9d
    b7e0:	0000b235 	.word	0x0000b235
    b7e4:	0000afd1 	.word	0x0000afd1
    b7e8:	0000b1bd 	.word	0x0000b1bd
    b7ec:	0000b8a9 	.word	0x0000b8a9
    b7f0:	0000af35 	.word	0x0000af35
    b7f4:	0000b8d9 	.word	0x0000b8d9
    b7f8:	0000b9fd 	.word	0x0000b9fd
    b7fc:	0000aff5 	.word	0x0000aff5
    b800:	0000b015 	.word	0x0000b015

0000b804 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    b804:	b580      	push	{r7, lr}
    b806:	b082      	sub	sp, #8
    b808:	af00      	add	r7, sp, #0
    b80a:	0002      	movs	r2, r0
    b80c:	6039      	str	r1, [r7, #0]
    b80e:	1dfb      	adds	r3, r7, #7
    b810:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    b812:	1dfb      	adds	r3, r7, #7
    b814:	781b      	ldrb	r3, [r3, #0]
    b816:	2b01      	cmp	r3, #1
    b818:	d00a      	beq.n	b830 <system_apb_clock_set_mask+0x2c>
    b81a:	2b02      	cmp	r3, #2
    b81c:	d00f      	beq.n	b83e <system_apb_clock_set_mask+0x3a>
    b81e:	2b00      	cmp	r3, #0
    b820:	d114      	bne.n	b84c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    b822:	4b0e      	ldr	r3, [pc, #56]	; (b85c <system_apb_clock_set_mask+0x58>)
    b824:	4a0d      	ldr	r2, [pc, #52]	; (b85c <system_apb_clock_set_mask+0x58>)
    b826:	6991      	ldr	r1, [r2, #24]
    b828:	683a      	ldr	r2, [r7, #0]
    b82a:	430a      	orrs	r2, r1
    b82c:	619a      	str	r2, [r3, #24]
			break;
    b82e:	e00f      	b.n	b850 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    b830:	4b0a      	ldr	r3, [pc, #40]	; (b85c <system_apb_clock_set_mask+0x58>)
    b832:	4a0a      	ldr	r2, [pc, #40]	; (b85c <system_apb_clock_set_mask+0x58>)
    b834:	69d1      	ldr	r1, [r2, #28]
    b836:	683a      	ldr	r2, [r7, #0]
    b838:	430a      	orrs	r2, r1
    b83a:	61da      	str	r2, [r3, #28]
			break;
    b83c:	e008      	b.n	b850 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    b83e:	4b07      	ldr	r3, [pc, #28]	; (b85c <system_apb_clock_set_mask+0x58>)
    b840:	4a06      	ldr	r2, [pc, #24]	; (b85c <system_apb_clock_set_mask+0x58>)
    b842:	6a11      	ldr	r1, [r2, #32]
    b844:	683a      	ldr	r2, [r7, #0]
    b846:	430a      	orrs	r2, r1
    b848:	621a      	str	r2, [r3, #32]
			break;
    b84a:	e001      	b.n	b850 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    b84c:	2317      	movs	r3, #23
    b84e:	e000      	b.n	b852 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    b850:	2300      	movs	r3, #0
}
    b852:	0018      	movs	r0, r3
    b854:	46bd      	mov	sp, r7
    b856:	b002      	add	sp, #8
    b858:	bd80      	pop	{r7, pc}
    b85a:	46c0      	nop			; (mov r8, r8)
    b85c:	40000400 	.word	0x40000400

0000b860 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    b860:	b580      	push	{r7, lr}
    b862:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    b864:	4b02      	ldr	r3, [pc, #8]	; (b870 <system_interrupt_enter_critical_section+0x10>)
    b866:	4798      	blx	r3
}
    b868:	46c0      	nop			; (mov r8, r8)
    b86a:	46bd      	mov	sp, r7
    b86c:	bd80      	pop	{r7, pc}
    b86e:	46c0      	nop			; (mov r8, r8)
    b870:	0000aea1 	.word	0x0000aea1

0000b874 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    b874:	b580      	push	{r7, lr}
    b876:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    b878:	4b02      	ldr	r3, [pc, #8]	; (b884 <system_interrupt_leave_critical_section+0x10>)
    b87a:	4798      	blx	r3
}
    b87c:	46c0      	nop			; (mov r8, r8)
    b87e:	46bd      	mov	sp, r7
    b880:	bd80      	pop	{r7, pc}
    b882:	46c0      	nop			; (mov r8, r8)
    b884:	0000aef5 	.word	0x0000aef5

0000b888 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    b888:	b580      	push	{r7, lr}
    b88a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    b88c:	4b05      	ldr	r3, [pc, #20]	; (b8a4 <system_gclk_is_syncing+0x1c>)
    b88e:	785b      	ldrb	r3, [r3, #1]
    b890:	b2db      	uxtb	r3, r3
    b892:	b25b      	sxtb	r3, r3
    b894:	2b00      	cmp	r3, #0
    b896:	da01      	bge.n	b89c <system_gclk_is_syncing+0x14>
		return true;
    b898:	2301      	movs	r3, #1
    b89a:	e000      	b.n	b89e <system_gclk_is_syncing+0x16>
	}

	return false;
    b89c:	2300      	movs	r3, #0
}
    b89e:	0018      	movs	r0, r3
    b8a0:	46bd      	mov	sp, r7
    b8a2:	bd80      	pop	{r7, pc}
    b8a4:	40000c00 	.word	0x40000c00

0000b8a8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    b8a8:	b580      	push	{r7, lr}
    b8aa:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    b8ac:	2108      	movs	r1, #8
    b8ae:	2000      	movs	r0, #0
    b8b0:	4b07      	ldr	r3, [pc, #28]	; (b8d0 <system_gclk_init+0x28>)
    b8b2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    b8b4:	4b07      	ldr	r3, [pc, #28]	; (b8d4 <system_gclk_init+0x2c>)
    b8b6:	2201      	movs	r2, #1
    b8b8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    b8ba:	46c0      	nop			; (mov r8, r8)
    b8bc:	4b05      	ldr	r3, [pc, #20]	; (b8d4 <system_gclk_init+0x2c>)
    b8be:	781b      	ldrb	r3, [r3, #0]
    b8c0:	b2db      	uxtb	r3, r3
    b8c2:	001a      	movs	r2, r3
    b8c4:	2301      	movs	r3, #1
    b8c6:	4013      	ands	r3, r2
    b8c8:	d1f8      	bne.n	b8bc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    b8ca:	46c0      	nop			; (mov r8, r8)
    b8cc:	46bd      	mov	sp, r7
    b8ce:	bd80      	pop	{r7, pc}
    b8d0:	0000b805 	.word	0x0000b805
    b8d4:	40000c00 	.word	0x40000c00

0000b8d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    b8d8:	b580      	push	{r7, lr}
    b8da:	b086      	sub	sp, #24
    b8dc:	af00      	add	r7, sp, #0
    b8de:	0002      	movs	r2, r0
    b8e0:	6039      	str	r1, [r7, #0]
    b8e2:	1dfb      	adds	r3, r7, #7
    b8e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    b8e6:	1dfb      	adds	r3, r7, #7
    b8e8:	781b      	ldrb	r3, [r3, #0]
    b8ea:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    b8ec:	1dfb      	adds	r3, r7, #7
    b8ee:	781b      	ldrb	r3, [r3, #0]
    b8f0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    b8f2:	683b      	ldr	r3, [r7, #0]
    b8f4:	781b      	ldrb	r3, [r3, #0]
    b8f6:	021b      	lsls	r3, r3, #8
    b8f8:	001a      	movs	r2, r3
    b8fa:	697b      	ldr	r3, [r7, #20]
    b8fc:	4313      	orrs	r3, r2
    b8fe:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    b900:	683b      	ldr	r3, [r7, #0]
    b902:	785b      	ldrb	r3, [r3, #1]
    b904:	2b00      	cmp	r3, #0
    b906:	d004      	beq.n	b912 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    b908:	697b      	ldr	r3, [r7, #20]
    b90a:	2280      	movs	r2, #128	; 0x80
    b90c:	02d2      	lsls	r2, r2, #11
    b90e:	4313      	orrs	r3, r2
    b910:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    b912:	683b      	ldr	r3, [r7, #0]
    b914:	7a5b      	ldrb	r3, [r3, #9]
    b916:	2b00      	cmp	r3, #0
    b918:	d004      	beq.n	b924 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    b91a:	697b      	ldr	r3, [r7, #20]
    b91c:	2280      	movs	r2, #128	; 0x80
    b91e:	0312      	lsls	r2, r2, #12
    b920:	4313      	orrs	r3, r2
    b922:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    b924:	683b      	ldr	r3, [r7, #0]
    b926:	685b      	ldr	r3, [r3, #4]
    b928:	2b01      	cmp	r3, #1
    b92a:	d92c      	bls.n	b986 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    b92c:	683b      	ldr	r3, [r7, #0]
    b92e:	685a      	ldr	r2, [r3, #4]
    b930:	683b      	ldr	r3, [r7, #0]
    b932:	685b      	ldr	r3, [r3, #4]
    b934:	3b01      	subs	r3, #1
    b936:	4013      	ands	r3, r2
    b938:	d11a      	bne.n	b970 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    b93a:	2300      	movs	r3, #0
    b93c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    b93e:	2302      	movs	r3, #2
    b940:	60bb      	str	r3, [r7, #8]
    b942:	e005      	b.n	b950 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    b944:	68fb      	ldr	r3, [r7, #12]
    b946:	3301      	adds	r3, #1
    b948:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    b94a:	68bb      	ldr	r3, [r7, #8]
    b94c:	005b      	lsls	r3, r3, #1
    b94e:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    b950:	683b      	ldr	r3, [r7, #0]
    b952:	685a      	ldr	r2, [r3, #4]
    b954:	68bb      	ldr	r3, [r7, #8]
    b956:	429a      	cmp	r2, r3
    b958:	d8f4      	bhi.n	b944 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    b95a:	68fb      	ldr	r3, [r7, #12]
    b95c:	021b      	lsls	r3, r3, #8
    b95e:	693a      	ldr	r2, [r7, #16]
    b960:	4313      	orrs	r3, r2
    b962:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    b964:	697b      	ldr	r3, [r7, #20]
    b966:	2280      	movs	r2, #128	; 0x80
    b968:	0352      	lsls	r2, r2, #13
    b96a:	4313      	orrs	r3, r2
    b96c:	617b      	str	r3, [r7, #20]
    b96e:	e00a      	b.n	b986 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    b970:	683b      	ldr	r3, [r7, #0]
    b972:	685b      	ldr	r3, [r3, #4]
    b974:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    b976:	693a      	ldr	r2, [r7, #16]
    b978:	4313      	orrs	r3, r2
    b97a:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    b97c:	697b      	ldr	r3, [r7, #20]
    b97e:	2280      	movs	r2, #128	; 0x80
    b980:	0292      	lsls	r2, r2, #10
    b982:	4313      	orrs	r3, r2
    b984:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    b986:	683b      	ldr	r3, [r7, #0]
    b988:	7a1b      	ldrb	r3, [r3, #8]
    b98a:	2b00      	cmp	r3, #0
    b98c:	d004      	beq.n	b998 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    b98e:	697b      	ldr	r3, [r7, #20]
    b990:	2280      	movs	r2, #128	; 0x80
    b992:	0392      	lsls	r2, r2, #14
    b994:	4313      	orrs	r3, r2
    b996:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    b998:	46c0      	nop			; (mov r8, r8)
    b99a:	4b13      	ldr	r3, [pc, #76]	; (b9e8 <system_gclk_gen_set_config+0x110>)
    b99c:	4798      	blx	r3
    b99e:	1e03      	subs	r3, r0, #0
    b9a0:	d1fb      	bne.n	b99a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    b9a2:	4b12      	ldr	r3, [pc, #72]	; (b9ec <system_gclk_gen_set_config+0x114>)
    b9a4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    b9a6:	4a12      	ldr	r2, [pc, #72]	; (b9f0 <system_gclk_gen_set_config+0x118>)
    b9a8:	1dfb      	adds	r3, r7, #7
    b9aa:	781b      	ldrb	r3, [r3, #0]
    b9ac:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    b9ae:	46c0      	nop			; (mov r8, r8)
    b9b0:	4b0d      	ldr	r3, [pc, #52]	; (b9e8 <system_gclk_gen_set_config+0x110>)
    b9b2:	4798      	blx	r3
    b9b4:	1e03      	subs	r3, r0, #0
    b9b6:	d1fb      	bne.n	b9b0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    b9b8:	4b0e      	ldr	r3, [pc, #56]	; (b9f4 <system_gclk_gen_set_config+0x11c>)
    b9ba:	693a      	ldr	r2, [r7, #16]
    b9bc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    b9be:	46c0      	nop			; (mov r8, r8)
    b9c0:	4b09      	ldr	r3, [pc, #36]	; (b9e8 <system_gclk_gen_set_config+0x110>)
    b9c2:	4798      	blx	r3
    b9c4:	1e03      	subs	r3, r0, #0
    b9c6:	d1fb      	bne.n	b9c0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    b9c8:	4b0a      	ldr	r3, [pc, #40]	; (b9f4 <system_gclk_gen_set_config+0x11c>)
    b9ca:	4a0a      	ldr	r2, [pc, #40]	; (b9f4 <system_gclk_gen_set_config+0x11c>)
    b9cc:	6851      	ldr	r1, [r2, #4]
    b9ce:	2280      	movs	r2, #128	; 0x80
    b9d0:	0252      	lsls	r2, r2, #9
    b9d2:	4011      	ands	r1, r2
    b9d4:	697a      	ldr	r2, [r7, #20]
    b9d6:	430a      	orrs	r2, r1
    b9d8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    b9da:	4b07      	ldr	r3, [pc, #28]	; (b9f8 <system_gclk_gen_set_config+0x120>)
    b9dc:	4798      	blx	r3
}
    b9de:	46c0      	nop			; (mov r8, r8)
    b9e0:	46bd      	mov	sp, r7
    b9e2:	b006      	add	sp, #24
    b9e4:	bd80      	pop	{r7, pc}
    b9e6:	46c0      	nop			; (mov r8, r8)
    b9e8:	0000b889 	.word	0x0000b889
    b9ec:	0000b861 	.word	0x0000b861
    b9f0:	40000c08 	.word	0x40000c08
    b9f4:	40000c00 	.word	0x40000c00
    b9f8:	0000b875 	.word	0x0000b875

0000b9fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    b9fc:	b580      	push	{r7, lr}
    b9fe:	b082      	sub	sp, #8
    ba00:	af00      	add	r7, sp, #0
    ba02:	0002      	movs	r2, r0
    ba04:	1dfb      	adds	r3, r7, #7
    ba06:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    ba08:	46c0      	nop			; (mov r8, r8)
    ba0a:	4b0e      	ldr	r3, [pc, #56]	; (ba44 <system_gclk_gen_enable+0x48>)
    ba0c:	4798      	blx	r3
    ba0e:	1e03      	subs	r3, r0, #0
    ba10:	d1fb      	bne.n	ba0a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    ba12:	4b0d      	ldr	r3, [pc, #52]	; (ba48 <system_gclk_gen_enable+0x4c>)
    ba14:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ba16:	4a0d      	ldr	r2, [pc, #52]	; (ba4c <system_gclk_gen_enable+0x50>)
    ba18:	1dfb      	adds	r3, r7, #7
    ba1a:	781b      	ldrb	r3, [r3, #0]
    ba1c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    ba1e:	46c0      	nop			; (mov r8, r8)
    ba20:	4b08      	ldr	r3, [pc, #32]	; (ba44 <system_gclk_gen_enable+0x48>)
    ba22:	4798      	blx	r3
    ba24:	1e03      	subs	r3, r0, #0
    ba26:	d1fb      	bne.n	ba20 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    ba28:	4b09      	ldr	r3, [pc, #36]	; (ba50 <system_gclk_gen_enable+0x54>)
    ba2a:	4a09      	ldr	r2, [pc, #36]	; (ba50 <system_gclk_gen_enable+0x54>)
    ba2c:	6852      	ldr	r2, [r2, #4]
    ba2e:	2180      	movs	r1, #128	; 0x80
    ba30:	0249      	lsls	r1, r1, #9
    ba32:	430a      	orrs	r2, r1
    ba34:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    ba36:	4b07      	ldr	r3, [pc, #28]	; (ba54 <system_gclk_gen_enable+0x58>)
    ba38:	4798      	blx	r3
}
    ba3a:	46c0      	nop			; (mov r8, r8)
    ba3c:	46bd      	mov	sp, r7
    ba3e:	b002      	add	sp, #8
    ba40:	bd80      	pop	{r7, pc}
    ba42:	46c0      	nop			; (mov r8, r8)
    ba44:	0000b889 	.word	0x0000b889
    ba48:	0000b861 	.word	0x0000b861
    ba4c:	40000c04 	.word	0x40000c04
    ba50:	40000c00 	.word	0x40000c00
    ba54:	0000b875 	.word	0x0000b875

0000ba58 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    ba58:	b580      	push	{r7, lr}
    ba5a:	b086      	sub	sp, #24
    ba5c:	af00      	add	r7, sp, #0
    ba5e:	0002      	movs	r2, r0
    ba60:	1dfb      	adds	r3, r7, #7
    ba62:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    ba64:	46c0      	nop			; (mov r8, r8)
    ba66:	4b2a      	ldr	r3, [pc, #168]	; (bb10 <system_gclk_gen_get_hz+0xb8>)
    ba68:	4798      	blx	r3
    ba6a:	1e03      	subs	r3, r0, #0
    ba6c:	d1fb      	bne.n	ba66 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    ba6e:	4b29      	ldr	r3, [pc, #164]	; (bb14 <system_gclk_gen_get_hz+0xbc>)
    ba70:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ba72:	4a29      	ldr	r2, [pc, #164]	; (bb18 <system_gclk_gen_get_hz+0xc0>)
    ba74:	1dfb      	adds	r3, r7, #7
    ba76:	781b      	ldrb	r3, [r3, #0]
    ba78:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    ba7a:	46c0      	nop			; (mov r8, r8)
    ba7c:	4b24      	ldr	r3, [pc, #144]	; (bb10 <system_gclk_gen_get_hz+0xb8>)
    ba7e:	4798      	blx	r3
    ba80:	1e03      	subs	r3, r0, #0
    ba82:	d1fb      	bne.n	ba7c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    ba84:	4b25      	ldr	r3, [pc, #148]	; (bb1c <system_gclk_gen_get_hz+0xc4>)
    ba86:	685b      	ldr	r3, [r3, #4]
    ba88:	04db      	lsls	r3, r3, #19
    ba8a:	0edb      	lsrs	r3, r3, #27
    ba8c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    ba8e:	0018      	movs	r0, r3
    ba90:	4b23      	ldr	r3, [pc, #140]	; (bb20 <system_gclk_gen_get_hz+0xc8>)
    ba92:	4798      	blx	r3
    ba94:	0003      	movs	r3, r0
    ba96:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ba98:	4a1f      	ldr	r2, [pc, #124]	; (bb18 <system_gclk_gen_get_hz+0xc0>)
    ba9a:	1dfb      	adds	r3, r7, #7
    ba9c:	781b      	ldrb	r3, [r3, #0]
    ba9e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    baa0:	4b1e      	ldr	r3, [pc, #120]	; (bb1c <system_gclk_gen_get_hz+0xc4>)
    baa2:	685b      	ldr	r3, [r3, #4]
    baa4:	02db      	lsls	r3, r3, #11
    baa6:	0fdb      	lsrs	r3, r3, #31
    baa8:	b2da      	uxtb	r2, r3
    baaa:	2313      	movs	r3, #19
    baac:	18fb      	adds	r3, r7, r3
    baae:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    bab0:	4a1c      	ldr	r2, [pc, #112]	; (bb24 <system_gclk_gen_get_hz+0xcc>)
    bab2:	1dfb      	adds	r3, r7, #7
    bab4:	781b      	ldrb	r3, [r3, #0]
    bab6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    bab8:	46c0      	nop			; (mov r8, r8)
    baba:	4b15      	ldr	r3, [pc, #84]	; (bb10 <system_gclk_gen_get_hz+0xb8>)
    babc:	4798      	blx	r3
    babe:	1e03      	subs	r3, r0, #0
    bac0:	d1fb      	bne.n	baba <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    bac2:	4b16      	ldr	r3, [pc, #88]	; (bb1c <system_gclk_gen_get_hz+0xc4>)
    bac4:	689b      	ldr	r3, [r3, #8]
    bac6:	021b      	lsls	r3, r3, #8
    bac8:	0c1b      	lsrs	r3, r3, #16
    baca:	b29b      	uxth	r3, r3
    bacc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    bace:	4b16      	ldr	r3, [pc, #88]	; (bb28 <system_gclk_gen_get_hz+0xd0>)
    bad0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    bad2:	2313      	movs	r3, #19
    bad4:	18fb      	adds	r3, r7, r3
    bad6:	781b      	ldrb	r3, [r3, #0]
    bad8:	2b00      	cmp	r3, #0
    bada:	d109      	bne.n	baf0 <system_gclk_gen_get_hz+0x98>
    badc:	68fb      	ldr	r3, [r7, #12]
    bade:	2b01      	cmp	r3, #1
    bae0:	d906      	bls.n	baf0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    bae2:	4b12      	ldr	r3, [pc, #72]	; (bb2c <system_gclk_gen_get_hz+0xd4>)
    bae4:	68f9      	ldr	r1, [r7, #12]
    bae6:	6978      	ldr	r0, [r7, #20]
    bae8:	4798      	blx	r3
    baea:	0003      	movs	r3, r0
    baec:	617b      	str	r3, [r7, #20]
    baee:	e00a      	b.n	bb06 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    baf0:	2313      	movs	r3, #19
    baf2:	18fb      	adds	r3, r7, r3
    baf4:	781b      	ldrb	r3, [r3, #0]
    baf6:	2b00      	cmp	r3, #0
    baf8:	d005      	beq.n	bb06 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    bafa:	68fb      	ldr	r3, [r7, #12]
    bafc:	3301      	adds	r3, #1
    bafe:	697a      	ldr	r2, [r7, #20]
    bb00:	40da      	lsrs	r2, r3
    bb02:	0013      	movs	r3, r2
    bb04:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    bb06:	697b      	ldr	r3, [r7, #20]
}
    bb08:	0018      	movs	r0, r3
    bb0a:	46bd      	mov	sp, r7
    bb0c:	b006      	add	sp, #24
    bb0e:	bd80      	pop	{r7, pc}
    bb10:	0000b889 	.word	0x0000b889
    bb14:	0000b861 	.word	0x0000b861
    bb18:	40000c04 	.word	0x40000c04
    bb1c:	40000c00 	.word	0x40000c00
    bb20:	0000b0fd 	.word	0x0000b0fd
    bb24:	40000c08 	.word	0x40000c08
    bb28:	0000b875 	.word	0x0000b875
    bb2c:	0000c161 	.word	0x0000c161

0000bb30 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    bb30:	b580      	push	{r7, lr}
    bb32:	b084      	sub	sp, #16
    bb34:	af00      	add	r7, sp, #0
    bb36:	0002      	movs	r2, r0
    bb38:	6039      	str	r1, [r7, #0]
    bb3a:	1dfb      	adds	r3, r7, #7
    bb3c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    bb3e:	1dfb      	adds	r3, r7, #7
    bb40:	781b      	ldrb	r3, [r3, #0]
    bb42:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    bb44:	683b      	ldr	r3, [r7, #0]
    bb46:	781b      	ldrb	r3, [r3, #0]
    bb48:	021b      	lsls	r3, r3, #8
    bb4a:	001a      	movs	r2, r3
    bb4c:	68fb      	ldr	r3, [r7, #12]
    bb4e:	4313      	orrs	r3, r2
    bb50:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    bb52:	1dfb      	adds	r3, r7, #7
    bb54:	781b      	ldrb	r3, [r3, #0]
    bb56:	0018      	movs	r0, r3
    bb58:	4b04      	ldr	r3, [pc, #16]	; (bb6c <system_gclk_chan_set_config+0x3c>)
    bb5a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    bb5c:	4b04      	ldr	r3, [pc, #16]	; (bb70 <system_gclk_chan_set_config+0x40>)
    bb5e:	68fa      	ldr	r2, [r7, #12]
    bb60:	b292      	uxth	r2, r2
    bb62:	805a      	strh	r2, [r3, #2]
}
    bb64:	46c0      	nop			; (mov r8, r8)
    bb66:	46bd      	mov	sp, r7
    bb68:	b004      	add	sp, #16
    bb6a:	bd80      	pop	{r7, pc}
    bb6c:	0000bbbd 	.word	0x0000bbbd
    bb70:	40000c00 	.word	0x40000c00

0000bb74 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    bb74:	b580      	push	{r7, lr}
    bb76:	b082      	sub	sp, #8
    bb78:	af00      	add	r7, sp, #0
    bb7a:	0002      	movs	r2, r0
    bb7c:	1dfb      	adds	r3, r7, #7
    bb7e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    bb80:	4b0a      	ldr	r3, [pc, #40]	; (bbac <system_gclk_chan_enable+0x38>)
    bb82:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    bb84:	4a0a      	ldr	r2, [pc, #40]	; (bbb0 <system_gclk_chan_enable+0x3c>)
    bb86:	1dfb      	adds	r3, r7, #7
    bb88:	781b      	ldrb	r3, [r3, #0]
    bb8a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    bb8c:	4909      	ldr	r1, [pc, #36]	; (bbb4 <system_gclk_chan_enable+0x40>)
    bb8e:	4b09      	ldr	r3, [pc, #36]	; (bbb4 <system_gclk_chan_enable+0x40>)
    bb90:	885b      	ldrh	r3, [r3, #2]
    bb92:	b29b      	uxth	r3, r3
    bb94:	2280      	movs	r2, #128	; 0x80
    bb96:	01d2      	lsls	r2, r2, #7
    bb98:	4313      	orrs	r3, r2
    bb9a:	b29b      	uxth	r3, r3
    bb9c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    bb9e:	4b06      	ldr	r3, [pc, #24]	; (bbb8 <system_gclk_chan_enable+0x44>)
    bba0:	4798      	blx	r3
}
    bba2:	46c0      	nop			; (mov r8, r8)
    bba4:	46bd      	mov	sp, r7
    bba6:	b002      	add	sp, #8
    bba8:	bd80      	pop	{r7, pc}
    bbaa:	46c0      	nop			; (mov r8, r8)
    bbac:	0000b861 	.word	0x0000b861
    bbb0:	40000c02 	.word	0x40000c02
    bbb4:	40000c00 	.word	0x40000c00
    bbb8:	0000b875 	.word	0x0000b875

0000bbbc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    bbbc:	b580      	push	{r7, lr}
    bbbe:	b084      	sub	sp, #16
    bbc0:	af00      	add	r7, sp, #0
    bbc2:	0002      	movs	r2, r0
    bbc4:	1dfb      	adds	r3, r7, #7
    bbc6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    bbc8:	4b1c      	ldr	r3, [pc, #112]	; (bc3c <system_gclk_chan_disable+0x80>)
    bbca:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    bbcc:	4a1c      	ldr	r2, [pc, #112]	; (bc40 <system_gclk_chan_disable+0x84>)
    bbce:	1dfb      	adds	r3, r7, #7
    bbd0:	781b      	ldrb	r3, [r3, #0]
    bbd2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    bbd4:	4b1b      	ldr	r3, [pc, #108]	; (bc44 <system_gclk_chan_disable+0x88>)
    bbd6:	885b      	ldrh	r3, [r3, #2]
    bbd8:	051b      	lsls	r3, r3, #20
    bbda:	0f1b      	lsrs	r3, r3, #28
    bbdc:	b2db      	uxtb	r3, r3
    bbde:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    bbe0:	4a18      	ldr	r2, [pc, #96]	; (bc44 <system_gclk_chan_disable+0x88>)
    bbe2:	8853      	ldrh	r3, [r2, #2]
    bbe4:	4918      	ldr	r1, [pc, #96]	; (bc48 <system_gclk_chan_disable+0x8c>)
    bbe6:	400b      	ands	r3, r1
    bbe8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    bbea:	4a16      	ldr	r2, [pc, #88]	; (bc44 <system_gclk_chan_disable+0x88>)
    bbec:	4b15      	ldr	r3, [pc, #84]	; (bc44 <system_gclk_chan_disable+0x88>)
    bbee:	885b      	ldrh	r3, [r3, #2]
    bbf0:	b29b      	uxth	r3, r3
    bbf2:	4916      	ldr	r1, [pc, #88]	; (bc4c <system_gclk_chan_disable+0x90>)
    bbf4:	400b      	ands	r3, r1
    bbf6:	b29b      	uxth	r3, r3
    bbf8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    bbfa:	46c0      	nop			; (mov r8, r8)
    bbfc:	4b11      	ldr	r3, [pc, #68]	; (bc44 <system_gclk_chan_disable+0x88>)
    bbfe:	885b      	ldrh	r3, [r3, #2]
    bc00:	b29b      	uxth	r3, r3
    bc02:	001a      	movs	r2, r3
    bc04:	2380      	movs	r3, #128	; 0x80
    bc06:	01db      	lsls	r3, r3, #7
    bc08:	4013      	ands	r3, r2
    bc0a:	d1f7      	bne.n	bbfc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    bc0c:	4a0d      	ldr	r2, [pc, #52]	; (bc44 <system_gclk_chan_disable+0x88>)
    bc0e:	68fb      	ldr	r3, [r7, #12]
    bc10:	b2db      	uxtb	r3, r3
    bc12:	1c19      	adds	r1, r3, #0
    bc14:	230f      	movs	r3, #15
    bc16:	400b      	ands	r3, r1
    bc18:	b2d9      	uxtb	r1, r3
    bc1a:	8853      	ldrh	r3, [r2, #2]
    bc1c:	1c08      	adds	r0, r1, #0
    bc1e:	210f      	movs	r1, #15
    bc20:	4001      	ands	r1, r0
    bc22:	0208      	lsls	r0, r1, #8
    bc24:	4908      	ldr	r1, [pc, #32]	; (bc48 <system_gclk_chan_disable+0x8c>)
    bc26:	400b      	ands	r3, r1
    bc28:	1c19      	adds	r1, r3, #0
    bc2a:	1c03      	adds	r3, r0, #0
    bc2c:	430b      	orrs	r3, r1
    bc2e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    bc30:	4b07      	ldr	r3, [pc, #28]	; (bc50 <system_gclk_chan_disable+0x94>)
    bc32:	4798      	blx	r3
}
    bc34:	46c0      	nop			; (mov r8, r8)
    bc36:	46bd      	mov	sp, r7
    bc38:	b004      	add	sp, #16
    bc3a:	bd80      	pop	{r7, pc}
    bc3c:	0000b861 	.word	0x0000b861
    bc40:	40000c02 	.word	0x40000c02
    bc44:	40000c00 	.word	0x40000c00
    bc48:	fffff0ff 	.word	0xfffff0ff
    bc4c:	ffffbfff 	.word	0xffffbfff
    bc50:	0000b875 	.word	0x0000b875

0000bc54 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    bc54:	b580      	push	{r7, lr}
    bc56:	b084      	sub	sp, #16
    bc58:	af00      	add	r7, sp, #0
    bc5a:	0002      	movs	r2, r0
    bc5c:	1dfb      	adds	r3, r7, #7
    bc5e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    bc60:	4b0d      	ldr	r3, [pc, #52]	; (bc98 <system_gclk_chan_get_hz+0x44>)
    bc62:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    bc64:	4a0d      	ldr	r2, [pc, #52]	; (bc9c <system_gclk_chan_get_hz+0x48>)
    bc66:	1dfb      	adds	r3, r7, #7
    bc68:	781b      	ldrb	r3, [r3, #0]
    bc6a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    bc6c:	4b0c      	ldr	r3, [pc, #48]	; (bca0 <system_gclk_chan_get_hz+0x4c>)
    bc6e:	885b      	ldrh	r3, [r3, #2]
    bc70:	051b      	lsls	r3, r3, #20
    bc72:	0f1b      	lsrs	r3, r3, #28
    bc74:	b2da      	uxtb	r2, r3
    bc76:	230f      	movs	r3, #15
    bc78:	18fb      	adds	r3, r7, r3
    bc7a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    bc7c:	4b09      	ldr	r3, [pc, #36]	; (bca4 <system_gclk_chan_get_hz+0x50>)
    bc7e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    bc80:	230f      	movs	r3, #15
    bc82:	18fb      	adds	r3, r7, r3
    bc84:	781b      	ldrb	r3, [r3, #0]
    bc86:	0018      	movs	r0, r3
    bc88:	4b07      	ldr	r3, [pc, #28]	; (bca8 <system_gclk_chan_get_hz+0x54>)
    bc8a:	4798      	blx	r3
    bc8c:	0003      	movs	r3, r0
}
    bc8e:	0018      	movs	r0, r3
    bc90:	46bd      	mov	sp, r7
    bc92:	b004      	add	sp, #16
    bc94:	bd80      	pop	{r7, pc}
    bc96:	46c0      	nop			; (mov r8, r8)
    bc98:	0000b861 	.word	0x0000b861
    bc9c:	40000c02 	.word	0x40000c02
    bca0:	40000c00 	.word	0x40000c00
    bca4:	0000b875 	.word	0x0000b875
    bca8:	0000ba59 	.word	0x0000ba59

0000bcac <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    bcac:	b580      	push	{r7, lr}
    bcae:	b084      	sub	sp, #16
    bcb0:	af00      	add	r7, sp, #0
    bcb2:	0002      	movs	r2, r0
    bcb4:	1dfb      	adds	r3, r7, #7
    bcb6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    bcb8:	230f      	movs	r3, #15
    bcba:	18fb      	adds	r3, r7, r3
    bcbc:	1dfa      	adds	r2, r7, #7
    bcbe:	7812      	ldrb	r2, [r2, #0]
    bcc0:	09d2      	lsrs	r2, r2, #7
    bcc2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    bcc4:	230e      	movs	r3, #14
    bcc6:	18fb      	adds	r3, r7, r3
    bcc8:	1dfa      	adds	r2, r7, #7
    bcca:	7812      	ldrb	r2, [r2, #0]
    bccc:	0952      	lsrs	r2, r2, #5
    bcce:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    bcd0:	4b0d      	ldr	r3, [pc, #52]	; (bd08 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    bcd2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    bcd4:	230f      	movs	r3, #15
    bcd6:	18fb      	adds	r3, r7, r3
    bcd8:	781b      	ldrb	r3, [r3, #0]
    bcda:	2b00      	cmp	r3, #0
    bcdc:	d10f      	bne.n	bcfe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    bcde:	230f      	movs	r3, #15
    bce0:	18fb      	adds	r3, r7, r3
    bce2:	781b      	ldrb	r3, [r3, #0]
    bce4:	009b      	lsls	r3, r3, #2
    bce6:	2210      	movs	r2, #16
    bce8:	4694      	mov	ip, r2
    bcea:	44bc      	add	ip, r7
    bcec:	4463      	add	r3, ip
    bcee:	3b08      	subs	r3, #8
    bcf0:	681a      	ldr	r2, [r3, #0]
    bcf2:	230e      	movs	r3, #14
    bcf4:	18fb      	adds	r3, r7, r3
    bcf6:	781b      	ldrb	r3, [r3, #0]
    bcf8:	01db      	lsls	r3, r3, #7
    bcfa:	18d3      	adds	r3, r2, r3
    bcfc:	e000      	b.n	bd00 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    bcfe:	2300      	movs	r3, #0
	}
}
    bd00:	0018      	movs	r0, r3
    bd02:	46bd      	mov	sp, r7
    bd04:	b004      	add	sp, #16
    bd06:	bd80      	pop	{r7, pc}
    bd08:	41004400 	.word	0x41004400

0000bd0c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    bd0c:	b580      	push	{r7, lr}
    bd0e:	b088      	sub	sp, #32
    bd10:	af00      	add	r7, sp, #0
    bd12:	60f8      	str	r0, [r7, #12]
    bd14:	60b9      	str	r1, [r7, #8]
    bd16:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    bd18:	2300      	movs	r3, #0
    bd1a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    bd1c:	687b      	ldr	r3, [r7, #4]
    bd1e:	78db      	ldrb	r3, [r3, #3]
    bd20:	2201      	movs	r2, #1
    bd22:	4053      	eors	r3, r2
    bd24:	b2db      	uxtb	r3, r3
    bd26:	2b00      	cmp	r3, #0
    bd28:	d035      	beq.n	bd96 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    bd2a:	687b      	ldr	r3, [r7, #4]
    bd2c:	781b      	ldrb	r3, [r3, #0]
    bd2e:	2b80      	cmp	r3, #128	; 0x80
    bd30:	d00b      	beq.n	bd4a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    bd32:	69fb      	ldr	r3, [r7, #28]
    bd34:	2280      	movs	r2, #128	; 0x80
    bd36:	0252      	lsls	r2, r2, #9
    bd38:	4313      	orrs	r3, r2
    bd3a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    bd3c:	687b      	ldr	r3, [r7, #4]
    bd3e:	781b      	ldrb	r3, [r3, #0]
    bd40:	061b      	lsls	r3, r3, #24
    bd42:	001a      	movs	r2, r3
    bd44:	69fb      	ldr	r3, [r7, #28]
    bd46:	4313      	orrs	r3, r2
    bd48:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    bd4a:	687b      	ldr	r3, [r7, #4]
    bd4c:	785b      	ldrb	r3, [r3, #1]
    bd4e:	2b00      	cmp	r3, #0
    bd50:	d003      	beq.n	bd5a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    bd52:	687b      	ldr	r3, [r7, #4]
    bd54:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    bd56:	2b02      	cmp	r3, #2
    bd58:	d110      	bne.n	bd7c <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    bd5a:	69fb      	ldr	r3, [r7, #28]
    bd5c:	2280      	movs	r2, #128	; 0x80
    bd5e:	0292      	lsls	r2, r2, #10
    bd60:	4313      	orrs	r3, r2
    bd62:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    bd64:	687b      	ldr	r3, [r7, #4]
    bd66:	789b      	ldrb	r3, [r3, #2]
    bd68:	2b00      	cmp	r3, #0
    bd6a:	d004      	beq.n	bd76 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    bd6c:	69fb      	ldr	r3, [r7, #28]
    bd6e:	2280      	movs	r2, #128	; 0x80
    bd70:	02d2      	lsls	r2, r2, #11
    bd72:	4313      	orrs	r3, r2
    bd74:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    bd76:	68fb      	ldr	r3, [r7, #12]
    bd78:	68ba      	ldr	r2, [r7, #8]
    bd7a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    bd7c:	687b      	ldr	r3, [r7, #4]
    bd7e:	785b      	ldrb	r3, [r3, #1]
    bd80:	2b01      	cmp	r3, #1
    bd82:	d003      	beq.n	bd8c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    bd84:	687b      	ldr	r3, [r7, #4]
    bd86:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    bd88:	2b02      	cmp	r3, #2
    bd8a:	d107      	bne.n	bd9c <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    bd8c:	69fb      	ldr	r3, [r7, #28]
    bd8e:	4a22      	ldr	r2, [pc, #136]	; (be18 <_system_pinmux_config+0x10c>)
    bd90:	4013      	ands	r3, r2
    bd92:	61fb      	str	r3, [r7, #28]
    bd94:	e002      	b.n	bd9c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    bd96:	68fb      	ldr	r3, [r7, #12]
    bd98:	68ba      	ldr	r2, [r7, #8]
    bd9a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    bd9c:	68bb      	ldr	r3, [r7, #8]
    bd9e:	041b      	lsls	r3, r3, #16
    bda0:	0c1b      	lsrs	r3, r3, #16
    bda2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    bda4:	68bb      	ldr	r3, [r7, #8]
    bda6:	0c1b      	lsrs	r3, r3, #16
    bda8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    bdaa:	69ba      	ldr	r2, [r7, #24]
    bdac:	69fb      	ldr	r3, [r7, #28]
    bdae:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    bdb0:	22a0      	movs	r2, #160	; 0xa0
    bdb2:	05d2      	lsls	r2, r2, #23
    bdb4:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    bdb6:	68fb      	ldr	r3, [r7, #12]
    bdb8:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    bdba:	697a      	ldr	r2, [r7, #20]
    bdbc:	69fb      	ldr	r3, [r7, #28]
    bdbe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    bdc0:	22d0      	movs	r2, #208	; 0xd0
    bdc2:	0612      	lsls	r2, r2, #24
    bdc4:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    bdc6:	68fb      	ldr	r3, [r7, #12]
    bdc8:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    bdca:	687b      	ldr	r3, [r7, #4]
    bdcc:	78db      	ldrb	r3, [r3, #3]
    bdce:	2201      	movs	r2, #1
    bdd0:	4053      	eors	r3, r2
    bdd2:	b2db      	uxtb	r3, r3
    bdd4:	2b00      	cmp	r3, #0
    bdd6:	d01a      	beq.n	be0e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    bdd8:	69fa      	ldr	r2, [r7, #28]
    bdda:	2380      	movs	r3, #128	; 0x80
    bddc:	02db      	lsls	r3, r3, #11
    bdde:	4013      	ands	r3, r2
    bde0:	d00a      	beq.n	bdf8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    bde2:	687b      	ldr	r3, [r7, #4]
    bde4:	789b      	ldrb	r3, [r3, #2]
    bde6:	2b01      	cmp	r3, #1
    bde8:	d103      	bne.n	bdf2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    bdea:	68fb      	ldr	r3, [r7, #12]
    bdec:	68ba      	ldr	r2, [r7, #8]
    bdee:	619a      	str	r2, [r3, #24]
    bdf0:	e002      	b.n	bdf8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    bdf2:	68fb      	ldr	r3, [r7, #12]
    bdf4:	68ba      	ldr	r2, [r7, #8]
    bdf6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    bdf8:	687b      	ldr	r3, [r7, #4]
    bdfa:	785b      	ldrb	r3, [r3, #1]
    bdfc:	2b01      	cmp	r3, #1
    bdfe:	d003      	beq.n	be08 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    be00:	687b      	ldr	r3, [r7, #4]
    be02:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    be04:	2b02      	cmp	r3, #2
    be06:	d102      	bne.n	be0e <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    be08:	68fb      	ldr	r3, [r7, #12]
    be0a:	68ba      	ldr	r2, [r7, #8]
    be0c:	609a      	str	r2, [r3, #8]
		}
	}
}
    be0e:	46c0      	nop			; (mov r8, r8)
    be10:	46bd      	mov	sp, r7
    be12:	b008      	add	sp, #32
    be14:	bd80      	pop	{r7, pc}
    be16:	46c0      	nop			; (mov r8, r8)
    be18:	fffbffff 	.word	0xfffbffff

0000be1c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    be1c:	b580      	push	{r7, lr}
    be1e:	b084      	sub	sp, #16
    be20:	af00      	add	r7, sp, #0
    be22:	0002      	movs	r2, r0
    be24:	6039      	str	r1, [r7, #0]
    be26:	1dfb      	adds	r3, r7, #7
    be28:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    be2a:	1dfb      	adds	r3, r7, #7
    be2c:	781b      	ldrb	r3, [r3, #0]
    be2e:	0018      	movs	r0, r3
    be30:	4b0a      	ldr	r3, [pc, #40]	; (be5c <system_pinmux_pin_set_config+0x40>)
    be32:	4798      	blx	r3
    be34:	0003      	movs	r3, r0
    be36:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    be38:	1dfb      	adds	r3, r7, #7
    be3a:	781b      	ldrb	r3, [r3, #0]
    be3c:	221f      	movs	r2, #31
    be3e:	4013      	ands	r3, r2
    be40:	2201      	movs	r2, #1
    be42:	409a      	lsls	r2, r3
    be44:	0013      	movs	r3, r2
    be46:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    be48:	683a      	ldr	r2, [r7, #0]
    be4a:	68b9      	ldr	r1, [r7, #8]
    be4c:	68fb      	ldr	r3, [r7, #12]
    be4e:	0018      	movs	r0, r3
    be50:	4b03      	ldr	r3, [pc, #12]	; (be60 <system_pinmux_pin_set_config+0x44>)
    be52:	4798      	blx	r3
}
    be54:	46c0      	nop			; (mov r8, r8)
    be56:	46bd      	mov	sp, r7
    be58:	b004      	add	sp, #16
    be5a:	bd80      	pop	{r7, pc}
    be5c:	0000bcad 	.word	0x0000bcad
    be60:	0000bd0d 	.word	0x0000bd0d

0000be64 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    be64:	b580      	push	{r7, lr}
    be66:	af00      	add	r7, sp, #0
	return;
    be68:	46c0      	nop			; (mov r8, r8)
}
    be6a:	46bd      	mov	sp, r7
    be6c:	bd80      	pop	{r7, pc}
    be6e:	46c0      	nop			; (mov r8, r8)

0000be70 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    be70:	b580      	push	{r7, lr}
    be72:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    be74:	4b06      	ldr	r3, [pc, #24]	; (be90 <system_init+0x20>)
    be76:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    be78:	4b06      	ldr	r3, [pc, #24]	; (be94 <system_init+0x24>)
    be7a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    be7c:	4b06      	ldr	r3, [pc, #24]	; (be98 <system_init+0x28>)
    be7e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    be80:	4b06      	ldr	r3, [pc, #24]	; (be9c <system_init+0x2c>)
    be82:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    be84:	4b06      	ldr	r3, [pc, #24]	; (bea0 <system_init+0x30>)
    be86:	4798      	blx	r3
}
    be88:	46c0      	nop			; (mov r8, r8)
    be8a:	46bd      	mov	sp, r7
    be8c:	bd80      	pop	{r7, pc}
    be8e:	46c0      	nop			; (mov r8, r8)
    be90:	0000b5d1 	.word	0x0000b5d1
    be94:	0000ae95 	.word	0x0000ae95
    be98:	0000be65 	.word	0x0000be65
    be9c:	00003279 	.word	0x00003279
    bea0:	0000be65 	.word	0x0000be65

0000bea4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    bea4:	b580      	push	{r7, lr}
    bea6:	b082      	sub	sp, #8
    bea8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    beaa:	4b2f      	ldr	r3, [pc, #188]	; (bf68 <Reset_Handler+0xc4>)
    beac:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    beae:	4b2f      	ldr	r3, [pc, #188]	; (bf6c <Reset_Handler+0xc8>)
    beb0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    beb2:	687a      	ldr	r2, [r7, #4]
    beb4:	683b      	ldr	r3, [r7, #0]
    beb6:	429a      	cmp	r2, r3
    beb8:	d00c      	beq.n	bed4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    beba:	e007      	b.n	becc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    bebc:	683b      	ldr	r3, [r7, #0]
    bebe:	1d1a      	adds	r2, r3, #4
    bec0:	603a      	str	r2, [r7, #0]
    bec2:	687a      	ldr	r2, [r7, #4]
    bec4:	1d11      	adds	r1, r2, #4
    bec6:	6079      	str	r1, [r7, #4]
    bec8:	6812      	ldr	r2, [r2, #0]
    beca:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    becc:	683a      	ldr	r2, [r7, #0]
    bece:	4b28      	ldr	r3, [pc, #160]	; (bf70 <Reset_Handler+0xcc>)
    bed0:	429a      	cmp	r2, r3
    bed2:	d3f3      	bcc.n	bebc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    bed4:	4b27      	ldr	r3, [pc, #156]	; (bf74 <Reset_Handler+0xd0>)
    bed6:	603b      	str	r3, [r7, #0]
    bed8:	e004      	b.n	bee4 <Reset_Handler+0x40>
                *pDest++ = 0;
    beda:	683b      	ldr	r3, [r7, #0]
    bedc:	1d1a      	adds	r2, r3, #4
    bede:	603a      	str	r2, [r7, #0]
    bee0:	2200      	movs	r2, #0
    bee2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    bee4:	683a      	ldr	r2, [r7, #0]
    bee6:	4b24      	ldr	r3, [pc, #144]	; (bf78 <Reset_Handler+0xd4>)
    bee8:	429a      	cmp	r2, r3
    beea:	d3f6      	bcc.n	beda <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    beec:	4b23      	ldr	r3, [pc, #140]	; (bf7c <Reset_Handler+0xd8>)
    beee:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    bef0:	4b23      	ldr	r3, [pc, #140]	; (bf80 <Reset_Handler+0xdc>)
    bef2:	687a      	ldr	r2, [r7, #4]
    bef4:	21ff      	movs	r1, #255	; 0xff
    bef6:	438a      	bics	r2, r1
    bef8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    befa:	4a22      	ldr	r2, [pc, #136]	; (bf84 <Reset_Handler+0xe0>)
    befc:	2390      	movs	r3, #144	; 0x90
    befe:	005b      	lsls	r3, r3, #1
    bf00:	2102      	movs	r1, #2
    bf02:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    bf04:	4a20      	ldr	r2, [pc, #128]	; (bf88 <Reset_Handler+0xe4>)
    bf06:	78d3      	ldrb	r3, [r2, #3]
    bf08:	2103      	movs	r1, #3
    bf0a:	438b      	bics	r3, r1
    bf0c:	1c19      	adds	r1, r3, #0
    bf0e:	2302      	movs	r3, #2
    bf10:	430b      	orrs	r3, r1
    bf12:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    bf14:	4a1c      	ldr	r2, [pc, #112]	; (bf88 <Reset_Handler+0xe4>)
    bf16:	78d3      	ldrb	r3, [r2, #3]
    bf18:	210c      	movs	r1, #12
    bf1a:	438b      	bics	r3, r1
    bf1c:	1c19      	adds	r1, r3, #0
    bf1e:	2308      	movs	r3, #8
    bf20:	430b      	orrs	r3, r1
    bf22:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    bf24:	4a19      	ldr	r2, [pc, #100]	; (bf8c <Reset_Handler+0xe8>)
    bf26:	7b93      	ldrb	r3, [r2, #14]
    bf28:	2130      	movs	r1, #48	; 0x30
    bf2a:	438b      	bics	r3, r1
    bf2c:	1c19      	adds	r1, r3, #0
    bf2e:	2320      	movs	r3, #32
    bf30:	430b      	orrs	r3, r1
    bf32:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    bf34:	4a15      	ldr	r2, [pc, #84]	; (bf8c <Reset_Handler+0xe8>)
    bf36:	7b93      	ldrb	r3, [r2, #14]
    bf38:	210c      	movs	r1, #12
    bf3a:	438b      	bics	r3, r1
    bf3c:	1c19      	adds	r1, r3, #0
    bf3e:	2308      	movs	r3, #8
    bf40:	430b      	orrs	r3, r1
    bf42:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    bf44:	4a11      	ldr	r2, [pc, #68]	; (bf8c <Reset_Handler+0xe8>)
    bf46:	7b93      	ldrb	r3, [r2, #14]
    bf48:	2103      	movs	r1, #3
    bf4a:	438b      	bics	r3, r1
    bf4c:	1c19      	adds	r1, r3, #0
    bf4e:	2302      	movs	r3, #2
    bf50:	430b      	orrs	r3, r1
    bf52:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    bf54:	4a0e      	ldr	r2, [pc, #56]	; (bf90 <Reset_Handler+0xec>)
    bf56:	6853      	ldr	r3, [r2, #4]
    bf58:	2180      	movs	r1, #128	; 0x80
    bf5a:	430b      	orrs	r3, r1
    bf5c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    bf5e:	4b0d      	ldr	r3, [pc, #52]	; (bf94 <Reset_Handler+0xf0>)
    bf60:	4798      	blx	r3

        /* Branch to main function */
        main();
    bf62:	4b0d      	ldr	r3, [pc, #52]	; (bf98 <Reset_Handler+0xf4>)
    bf64:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    bf66:	e7fe      	b.n	bf66 <Reset_Handler+0xc2>
    bf68:	0000fd54 	.word	0x0000fd54
    bf6c:	20000000 	.word	0x20000000
    bf70:	2000008c 	.word	0x2000008c
    bf74:	2000008c 	.word	0x2000008c
    bf78:	200010b0 	.word	0x200010b0
    bf7c:	00000000 	.word	0x00000000
    bf80:	e000ed00 	.word	0xe000ed00
    bf84:	41007000 	.word	0x41007000
    bf88:	41005000 	.word	0x41005000
    bf8c:	41004800 	.word	0x41004800
    bf90:	41004000 	.word	0x41004000
    bf94:	0000e961 	.word	0x0000e961
    bf98:	0000c03d 	.word	0x0000c03d

0000bf9c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    bf9c:	b580      	push	{r7, lr}
    bf9e:	af00      	add	r7, sp, #0
        while (1) {
        }
    bfa0:	e7fe      	b.n	bfa0 <Dummy_Handler+0x4>
    bfa2:	46c0      	nop			; (mov r8, r8)

0000bfa4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    bfa4:	b580      	push	{r7, lr}
    bfa6:	b084      	sub	sp, #16
    bfa8:	af00      	add	r7, sp, #0
    bfaa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    bfac:	4b0a      	ldr	r3, [pc, #40]	; (bfd8 <_sbrk+0x34>)
    bfae:	681b      	ldr	r3, [r3, #0]
    bfb0:	2b00      	cmp	r3, #0
    bfb2:	d102      	bne.n	bfba <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    bfb4:	4b08      	ldr	r3, [pc, #32]	; (bfd8 <_sbrk+0x34>)
    bfb6:	4a09      	ldr	r2, [pc, #36]	; (bfdc <_sbrk+0x38>)
    bfb8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    bfba:	4b07      	ldr	r3, [pc, #28]	; (bfd8 <_sbrk+0x34>)
    bfbc:	681b      	ldr	r3, [r3, #0]
    bfbe:	60fb      	str	r3, [r7, #12]

	heap += incr;
    bfc0:	4b05      	ldr	r3, [pc, #20]	; (bfd8 <_sbrk+0x34>)
    bfc2:	681a      	ldr	r2, [r3, #0]
    bfc4:	687b      	ldr	r3, [r7, #4]
    bfc6:	18d2      	adds	r2, r2, r3
    bfc8:	4b03      	ldr	r3, [pc, #12]	; (bfd8 <_sbrk+0x34>)
    bfca:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    bfcc:	68fb      	ldr	r3, [r7, #12]
}
    bfce:	0018      	movs	r0, r3
    bfd0:	46bd      	mov	sp, r7
    bfd2:	b004      	add	sp, #16
    bfd4:	bd80      	pop	{r7, pc}
    bfd6:	46c0      	nop			; (mov r8, r8)
    bfd8:	20000d7c 	.word	0x20000d7c
    bfdc:	200020b0 	.word	0x200020b0

0000bfe0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    bfe0:	b580      	push	{r7, lr}
    bfe2:	b082      	sub	sp, #8
    bfe4:	af00      	add	r7, sp, #0
    bfe6:	6078      	str	r0, [r7, #4]
	return -1;
    bfe8:	2301      	movs	r3, #1
    bfea:	425b      	negs	r3, r3
}
    bfec:	0018      	movs	r0, r3
    bfee:	46bd      	mov	sp, r7
    bff0:	b002      	add	sp, #8
    bff2:	bd80      	pop	{r7, pc}

0000bff4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    bff4:	b580      	push	{r7, lr}
    bff6:	b082      	sub	sp, #8
    bff8:	af00      	add	r7, sp, #0
    bffa:	6078      	str	r0, [r7, #4]
    bffc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    bffe:	683b      	ldr	r3, [r7, #0]
    c000:	2280      	movs	r2, #128	; 0x80
    c002:	0192      	lsls	r2, r2, #6
    c004:	605a      	str	r2, [r3, #4]

	return 0;
    c006:	2300      	movs	r3, #0
}
    c008:	0018      	movs	r0, r3
    c00a:	46bd      	mov	sp, r7
    c00c:	b002      	add	sp, #8
    c00e:	bd80      	pop	{r7, pc}

0000c010 <_isatty>:

extern int _isatty(int file)
{
    c010:	b580      	push	{r7, lr}
    c012:	b082      	sub	sp, #8
    c014:	af00      	add	r7, sp, #0
    c016:	6078      	str	r0, [r7, #4]
	return 1;
    c018:	2301      	movs	r3, #1
}
    c01a:	0018      	movs	r0, r3
    c01c:	46bd      	mov	sp, r7
    c01e:	b002      	add	sp, #8
    c020:	bd80      	pop	{r7, pc}
    c022:	46c0      	nop			; (mov r8, r8)

0000c024 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    c024:	b580      	push	{r7, lr}
    c026:	b084      	sub	sp, #16
    c028:	af00      	add	r7, sp, #0
    c02a:	60f8      	str	r0, [r7, #12]
    c02c:	60b9      	str	r1, [r7, #8]
    c02e:	607a      	str	r2, [r7, #4]
	return 0;
    c030:	2300      	movs	r3, #0
}
    c032:	0018      	movs	r0, r3
    c034:	46bd      	mov	sp, r7
    c036:	b004      	add	sp, #16
    c038:	bd80      	pop	{r7, pc}
    c03a:	46c0      	nop			; (mov r8, r8)

0000c03c <main>:
extern void wsndemo_init(void);
extern void wsndemo_task(void);


int main (void)
{
    c03c:	b580      	push	{r7, lr}
    c03e:	af00      	add	r7, sp, #0
	/* Configure device and enable. */
	system_init();
    c040:	4b04      	ldr	r3, [pc, #16]	; (c054 <main+0x18>)
    c042:	4798      	blx	r3

	delay_init();	
    c044:	4b04      	ldr	r3, [pc, #16]	; (c058 <main+0x1c>)
    c046:	4798      	blx	r3
	
	//stdio_usb_init();
	wsndemo_init();
    c048:	4b04      	ldr	r3, [pc, #16]	; (c05c <main+0x20>)
    c04a:	4798      	blx	r3
	
	while (1)
	{
		wsndemo_task();
    c04c:	4b04      	ldr	r3, [pc, #16]	; (c060 <main+0x24>)
    c04e:	4798      	blx	r3
	}
    c050:	e7fc      	b.n	c04c <main+0x10>
    c052:	46c0      	nop			; (mov r8, r8)
    c054:	0000be71 	.word	0x0000be71
    c058:	0000ad55 	.word	0x0000ad55
    c05c:	00004a89 	.word	0x00004a89
    c060:	00004ac9 	.word	0x00004ac9

0000c064 <common_tc_delay>:
    c064:	b510      	push	{r4, lr}
    c066:	1c04      	adds	r4, r0, #0
    c068:	4b13      	ldr	r3, [pc, #76]	; (c0b8 <common_tc_delay+0x54>)
    c06a:	4798      	blx	r3
    c06c:	4b13      	ldr	r3, [pc, #76]	; (c0bc <common_tc_delay+0x58>)
    c06e:	781a      	ldrb	r2, [r3, #0]
    c070:	4362      	muls	r2, r4
    c072:	1881      	adds	r1, r0, r2
    c074:	4b12      	ldr	r3, [pc, #72]	; (c0c0 <common_tc_delay+0x5c>)
    c076:	6059      	str	r1, [r3, #4]
    c078:	6859      	ldr	r1, [r3, #4]
    c07a:	0c09      	lsrs	r1, r1, #16
    c07c:	6059      	str	r1, [r3, #4]
    c07e:	685b      	ldr	r3, [r3, #4]
    c080:	2b00      	cmp	r3, #0
    c082:	d007      	beq.n	c094 <common_tc_delay+0x30>
    c084:	4b0e      	ldr	r3, [pc, #56]	; (c0c0 <common_tc_delay+0x5c>)
    c086:	6859      	ldr	r1, [r3, #4]
    c088:	3201      	adds	r2, #1
    c08a:	1880      	adds	r0, r0, r2
    c08c:	8118      	strh	r0, [r3, #8]
    c08e:	4b0d      	ldr	r3, [pc, #52]	; (c0c4 <common_tc_delay+0x60>)
    c090:	4798      	blx	r3
    c092:	e004      	b.n	c09e <common_tc_delay+0x3a>
    c094:	1882      	adds	r2, r0, r2
    c096:	4b0a      	ldr	r3, [pc, #40]	; (c0c0 <common_tc_delay+0x5c>)
    c098:	811a      	strh	r2, [r3, #8]
    c09a:	4b0b      	ldr	r3, [pc, #44]	; (c0c8 <common_tc_delay+0x64>)
    c09c:	4798      	blx	r3
    c09e:	4b08      	ldr	r3, [pc, #32]	; (c0c0 <common_tc_delay+0x5c>)
    c0a0:	891b      	ldrh	r3, [r3, #8]
    c0a2:	2b63      	cmp	r3, #99	; 0x63
    c0a4:	d802      	bhi.n	c0ac <common_tc_delay+0x48>
    c0a6:	3364      	adds	r3, #100	; 0x64
    c0a8:	4a05      	ldr	r2, [pc, #20]	; (c0c0 <common_tc_delay+0x5c>)
    c0aa:	8113      	strh	r3, [r2, #8]
    c0ac:	4b04      	ldr	r3, [pc, #16]	; (c0c0 <common_tc_delay+0x5c>)
    c0ae:	8918      	ldrh	r0, [r3, #8]
    c0b0:	4b06      	ldr	r3, [pc, #24]	; (c0cc <common_tc_delay+0x68>)
    c0b2:	4798      	blx	r3
    c0b4:	bd10      	pop	{r4, pc}
    c0b6:	46c0      	nop			; (mov r8, r8)
    c0b8:	00006271 	.word	0x00006271
    c0bc:	200010a9 	.word	0x200010a9
    c0c0:	20000d80 	.word	0x20000d80
    c0c4:	00006291 	.word	0x00006291
    c0c8:	000062ad 	.word	0x000062ad
    c0cc:	000062d9 	.word	0x000062d9

0000c0d0 <common_tc_init>:
    c0d0:	b508      	push	{r3, lr}
    c0d2:	2200      	movs	r2, #0
    c0d4:	4b03      	ldr	r3, [pc, #12]	; (c0e4 <common_tc_init+0x14>)
    c0d6:	701a      	strb	r2, [r3, #0]
    c0d8:	4b03      	ldr	r3, [pc, #12]	; (c0e8 <common_tc_init+0x18>)
    c0da:	4798      	blx	r3
    c0dc:	4b03      	ldr	r3, [pc, #12]	; (c0ec <common_tc_init+0x1c>)
    c0de:	7018      	strb	r0, [r3, #0]
    c0e0:	bd08      	pop	{r3, pc}
    c0e2:	46c0      	nop			; (mov r8, r8)
    c0e4:	20000d80 	.word	0x20000d80
    c0e8:	00006335 	.word	0x00006335
    c0ec:	200010a9 	.word	0x200010a9

0000c0f0 <tmr_ovf_callback>:
    c0f0:	b508      	push	{r3, lr}
    c0f2:	4b0e      	ldr	r3, [pc, #56]	; (c12c <tmr_ovf_callback+0x3c>)
    c0f4:	685b      	ldr	r3, [r3, #4]
    c0f6:	2b00      	cmp	r3, #0
    c0f8:	d007      	beq.n	c10a <tmr_ovf_callback+0x1a>
    c0fa:	4a0c      	ldr	r2, [pc, #48]	; (c12c <tmr_ovf_callback+0x3c>)
    c0fc:	6853      	ldr	r3, [r2, #4]
    c0fe:	3b01      	subs	r3, #1
    c100:	6053      	str	r3, [r2, #4]
    c102:	2b00      	cmp	r3, #0
    c104:	d101      	bne.n	c10a <tmr_ovf_callback+0x1a>
    c106:	4b0a      	ldr	r3, [pc, #40]	; (c130 <tmr_ovf_callback+0x40>)
    c108:	4798      	blx	r3
    c10a:	4a08      	ldr	r2, [pc, #32]	; (c12c <tmr_ovf_callback+0x3c>)
    c10c:	7813      	ldrb	r3, [r2, #0]
    c10e:	3301      	adds	r3, #1
    c110:	b2db      	uxtb	r3, r3
    c112:	7013      	strb	r3, [r2, #0]
    c114:	4a07      	ldr	r2, [pc, #28]	; (c134 <tmr_ovf_callback+0x44>)
    c116:	7812      	ldrb	r2, [r2, #0]
    c118:	429a      	cmp	r2, r3
    c11a:	d806      	bhi.n	c12a <tmr_ovf_callback+0x3a>
    c11c:	4b03      	ldr	r3, [pc, #12]	; (c12c <tmr_ovf_callback+0x3c>)
    c11e:	2200      	movs	r2, #0
    c120:	701a      	strb	r2, [r3, #0]
    c122:	68db      	ldr	r3, [r3, #12]
    c124:	2b00      	cmp	r3, #0
    c126:	d000      	beq.n	c12a <tmr_ovf_callback+0x3a>
    c128:	4798      	blx	r3
    c12a:	bd08      	pop	{r3, pc}
    c12c:	20000d80 	.word	0x20000d80
    c130:	000062ad 	.word	0x000062ad
    c134:	200010a9 	.word	0x200010a9

0000c138 <tmr_cca_callback>:
    c138:	b508      	push	{r3, lr}
    c13a:	4b04      	ldr	r3, [pc, #16]	; (c14c <tmr_cca_callback+0x14>)
    c13c:	4798      	blx	r3
    c13e:	4b04      	ldr	r3, [pc, #16]	; (c150 <tmr_cca_callback+0x18>)
    c140:	691b      	ldr	r3, [r3, #16]
    c142:	2b00      	cmp	r3, #0
    c144:	d000      	beq.n	c148 <tmr_cca_callback+0x10>
    c146:	4798      	blx	r3
    c148:	bd08      	pop	{r3, pc}
    c14a:	46c0      	nop			; (mov r8, r8)
    c14c:	00006291 	.word	0x00006291
    c150:	20000d80 	.word	0x20000d80

0000c154 <set_common_tc_expiry_callback>:
    c154:	4b01      	ldr	r3, [pc, #4]	; (c15c <set_common_tc_expiry_callback+0x8>)
    c156:	6118      	str	r0, [r3, #16]
    c158:	4770      	bx	lr
    c15a:	46c0      	nop			; (mov r8, r8)
    c15c:	20000d80 	.word	0x20000d80

0000c160 <__aeabi_uidiv>:
    c160:	2200      	movs	r2, #0
    c162:	0843      	lsrs	r3, r0, #1
    c164:	428b      	cmp	r3, r1
    c166:	d374      	bcc.n	c252 <__aeabi_uidiv+0xf2>
    c168:	0903      	lsrs	r3, r0, #4
    c16a:	428b      	cmp	r3, r1
    c16c:	d35f      	bcc.n	c22e <__aeabi_uidiv+0xce>
    c16e:	0a03      	lsrs	r3, r0, #8
    c170:	428b      	cmp	r3, r1
    c172:	d344      	bcc.n	c1fe <__aeabi_uidiv+0x9e>
    c174:	0b03      	lsrs	r3, r0, #12
    c176:	428b      	cmp	r3, r1
    c178:	d328      	bcc.n	c1cc <__aeabi_uidiv+0x6c>
    c17a:	0c03      	lsrs	r3, r0, #16
    c17c:	428b      	cmp	r3, r1
    c17e:	d30d      	bcc.n	c19c <__aeabi_uidiv+0x3c>
    c180:	22ff      	movs	r2, #255	; 0xff
    c182:	0209      	lsls	r1, r1, #8
    c184:	ba12      	rev	r2, r2
    c186:	0c03      	lsrs	r3, r0, #16
    c188:	428b      	cmp	r3, r1
    c18a:	d302      	bcc.n	c192 <__aeabi_uidiv+0x32>
    c18c:	1212      	asrs	r2, r2, #8
    c18e:	0209      	lsls	r1, r1, #8
    c190:	d065      	beq.n	c25e <__aeabi_uidiv+0xfe>
    c192:	0b03      	lsrs	r3, r0, #12
    c194:	428b      	cmp	r3, r1
    c196:	d319      	bcc.n	c1cc <__aeabi_uidiv+0x6c>
    c198:	e000      	b.n	c19c <__aeabi_uidiv+0x3c>
    c19a:	0a09      	lsrs	r1, r1, #8
    c19c:	0bc3      	lsrs	r3, r0, #15
    c19e:	428b      	cmp	r3, r1
    c1a0:	d301      	bcc.n	c1a6 <__aeabi_uidiv+0x46>
    c1a2:	03cb      	lsls	r3, r1, #15
    c1a4:	1ac0      	subs	r0, r0, r3
    c1a6:	4152      	adcs	r2, r2
    c1a8:	0b83      	lsrs	r3, r0, #14
    c1aa:	428b      	cmp	r3, r1
    c1ac:	d301      	bcc.n	c1b2 <__aeabi_uidiv+0x52>
    c1ae:	038b      	lsls	r3, r1, #14
    c1b0:	1ac0      	subs	r0, r0, r3
    c1b2:	4152      	adcs	r2, r2
    c1b4:	0b43      	lsrs	r3, r0, #13
    c1b6:	428b      	cmp	r3, r1
    c1b8:	d301      	bcc.n	c1be <__aeabi_uidiv+0x5e>
    c1ba:	034b      	lsls	r3, r1, #13
    c1bc:	1ac0      	subs	r0, r0, r3
    c1be:	4152      	adcs	r2, r2
    c1c0:	0b03      	lsrs	r3, r0, #12
    c1c2:	428b      	cmp	r3, r1
    c1c4:	d301      	bcc.n	c1ca <__aeabi_uidiv+0x6a>
    c1c6:	030b      	lsls	r3, r1, #12
    c1c8:	1ac0      	subs	r0, r0, r3
    c1ca:	4152      	adcs	r2, r2
    c1cc:	0ac3      	lsrs	r3, r0, #11
    c1ce:	428b      	cmp	r3, r1
    c1d0:	d301      	bcc.n	c1d6 <__aeabi_uidiv+0x76>
    c1d2:	02cb      	lsls	r3, r1, #11
    c1d4:	1ac0      	subs	r0, r0, r3
    c1d6:	4152      	adcs	r2, r2
    c1d8:	0a83      	lsrs	r3, r0, #10
    c1da:	428b      	cmp	r3, r1
    c1dc:	d301      	bcc.n	c1e2 <__aeabi_uidiv+0x82>
    c1de:	028b      	lsls	r3, r1, #10
    c1e0:	1ac0      	subs	r0, r0, r3
    c1e2:	4152      	adcs	r2, r2
    c1e4:	0a43      	lsrs	r3, r0, #9
    c1e6:	428b      	cmp	r3, r1
    c1e8:	d301      	bcc.n	c1ee <__aeabi_uidiv+0x8e>
    c1ea:	024b      	lsls	r3, r1, #9
    c1ec:	1ac0      	subs	r0, r0, r3
    c1ee:	4152      	adcs	r2, r2
    c1f0:	0a03      	lsrs	r3, r0, #8
    c1f2:	428b      	cmp	r3, r1
    c1f4:	d301      	bcc.n	c1fa <__aeabi_uidiv+0x9a>
    c1f6:	020b      	lsls	r3, r1, #8
    c1f8:	1ac0      	subs	r0, r0, r3
    c1fa:	4152      	adcs	r2, r2
    c1fc:	d2cd      	bcs.n	c19a <__aeabi_uidiv+0x3a>
    c1fe:	09c3      	lsrs	r3, r0, #7
    c200:	428b      	cmp	r3, r1
    c202:	d301      	bcc.n	c208 <__aeabi_uidiv+0xa8>
    c204:	01cb      	lsls	r3, r1, #7
    c206:	1ac0      	subs	r0, r0, r3
    c208:	4152      	adcs	r2, r2
    c20a:	0983      	lsrs	r3, r0, #6
    c20c:	428b      	cmp	r3, r1
    c20e:	d301      	bcc.n	c214 <__aeabi_uidiv+0xb4>
    c210:	018b      	lsls	r3, r1, #6
    c212:	1ac0      	subs	r0, r0, r3
    c214:	4152      	adcs	r2, r2
    c216:	0943      	lsrs	r3, r0, #5
    c218:	428b      	cmp	r3, r1
    c21a:	d301      	bcc.n	c220 <__aeabi_uidiv+0xc0>
    c21c:	014b      	lsls	r3, r1, #5
    c21e:	1ac0      	subs	r0, r0, r3
    c220:	4152      	adcs	r2, r2
    c222:	0903      	lsrs	r3, r0, #4
    c224:	428b      	cmp	r3, r1
    c226:	d301      	bcc.n	c22c <__aeabi_uidiv+0xcc>
    c228:	010b      	lsls	r3, r1, #4
    c22a:	1ac0      	subs	r0, r0, r3
    c22c:	4152      	adcs	r2, r2
    c22e:	08c3      	lsrs	r3, r0, #3
    c230:	428b      	cmp	r3, r1
    c232:	d301      	bcc.n	c238 <__aeabi_uidiv+0xd8>
    c234:	00cb      	lsls	r3, r1, #3
    c236:	1ac0      	subs	r0, r0, r3
    c238:	4152      	adcs	r2, r2
    c23a:	0883      	lsrs	r3, r0, #2
    c23c:	428b      	cmp	r3, r1
    c23e:	d301      	bcc.n	c244 <__aeabi_uidiv+0xe4>
    c240:	008b      	lsls	r3, r1, #2
    c242:	1ac0      	subs	r0, r0, r3
    c244:	4152      	adcs	r2, r2
    c246:	0843      	lsrs	r3, r0, #1
    c248:	428b      	cmp	r3, r1
    c24a:	d301      	bcc.n	c250 <__aeabi_uidiv+0xf0>
    c24c:	004b      	lsls	r3, r1, #1
    c24e:	1ac0      	subs	r0, r0, r3
    c250:	4152      	adcs	r2, r2
    c252:	1a41      	subs	r1, r0, r1
    c254:	d200      	bcs.n	c258 <__aeabi_uidiv+0xf8>
    c256:	4601      	mov	r1, r0
    c258:	4152      	adcs	r2, r2
    c25a:	4610      	mov	r0, r2
    c25c:	4770      	bx	lr
    c25e:	e7ff      	b.n	c260 <__aeabi_uidiv+0x100>
    c260:	b501      	push	{r0, lr}
    c262:	2000      	movs	r0, #0
    c264:	f000 f806 	bl	c274 <__aeabi_idiv0>
    c268:	bd02      	pop	{r1, pc}
    c26a:	46c0      	nop			; (mov r8, r8)

0000c26c <__aeabi_uidivmod>:
    c26c:	2900      	cmp	r1, #0
    c26e:	d0f7      	beq.n	c260 <__aeabi_uidiv+0x100>
    c270:	e776      	b.n	c160 <__aeabi_uidiv>
    c272:	4770      	bx	lr

0000c274 <__aeabi_idiv0>:
    c274:	4770      	bx	lr
    c276:	46c0      	nop			; (mov r8, r8)

0000c278 <__aeabi_cfrcmple>:
    c278:	4684      	mov	ip, r0
    c27a:	1c08      	adds	r0, r1, #0
    c27c:	4661      	mov	r1, ip
    c27e:	e7ff      	b.n	c280 <__aeabi_cfcmpeq>

0000c280 <__aeabi_cfcmpeq>:
    c280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c282:	f000 fbb1 	bl	c9e8 <__lesf2>
    c286:	2800      	cmp	r0, #0
    c288:	d401      	bmi.n	c28e <__aeabi_cfcmpeq+0xe>
    c28a:	2100      	movs	r1, #0
    c28c:	42c8      	cmn	r0, r1
    c28e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000c290 <__aeabi_fcmpeq>:
    c290:	b510      	push	{r4, lr}
    c292:	f000 fb3d 	bl	c910 <__eqsf2>
    c296:	4240      	negs	r0, r0
    c298:	3001      	adds	r0, #1
    c29a:	bd10      	pop	{r4, pc}

0000c29c <__aeabi_fcmplt>:
    c29c:	b510      	push	{r4, lr}
    c29e:	f000 fba3 	bl	c9e8 <__lesf2>
    c2a2:	2800      	cmp	r0, #0
    c2a4:	db01      	blt.n	c2aa <__aeabi_fcmplt+0xe>
    c2a6:	2000      	movs	r0, #0
    c2a8:	bd10      	pop	{r4, pc}
    c2aa:	2001      	movs	r0, #1
    c2ac:	bd10      	pop	{r4, pc}
    c2ae:	46c0      	nop			; (mov r8, r8)

0000c2b0 <__aeabi_fcmple>:
    c2b0:	b510      	push	{r4, lr}
    c2b2:	f000 fb99 	bl	c9e8 <__lesf2>
    c2b6:	2800      	cmp	r0, #0
    c2b8:	dd01      	ble.n	c2be <__aeabi_fcmple+0xe>
    c2ba:	2000      	movs	r0, #0
    c2bc:	bd10      	pop	{r4, pc}
    c2be:	2001      	movs	r0, #1
    c2c0:	bd10      	pop	{r4, pc}
    c2c2:	46c0      	nop			; (mov r8, r8)

0000c2c4 <__aeabi_fcmpgt>:
    c2c4:	b510      	push	{r4, lr}
    c2c6:	f000 fb4b 	bl	c960 <__gesf2>
    c2ca:	2800      	cmp	r0, #0
    c2cc:	dc01      	bgt.n	c2d2 <__aeabi_fcmpgt+0xe>
    c2ce:	2000      	movs	r0, #0
    c2d0:	bd10      	pop	{r4, pc}
    c2d2:	2001      	movs	r0, #1
    c2d4:	bd10      	pop	{r4, pc}
    c2d6:	46c0      	nop			; (mov r8, r8)

0000c2d8 <__aeabi_fcmpge>:
    c2d8:	b510      	push	{r4, lr}
    c2da:	f000 fb41 	bl	c960 <__gesf2>
    c2de:	2800      	cmp	r0, #0
    c2e0:	da01      	bge.n	c2e6 <__aeabi_fcmpge+0xe>
    c2e2:	2000      	movs	r0, #0
    c2e4:	bd10      	pop	{r4, pc}
    c2e6:	2001      	movs	r0, #1
    c2e8:	bd10      	pop	{r4, pc}
    c2ea:	46c0      	nop			; (mov r8, r8)

0000c2ec <__clzsi2>:
    c2ec:	211c      	movs	r1, #28
    c2ee:	2301      	movs	r3, #1
    c2f0:	041b      	lsls	r3, r3, #16
    c2f2:	4298      	cmp	r0, r3
    c2f4:	d301      	bcc.n	c2fa <__clzsi2+0xe>
    c2f6:	0c00      	lsrs	r0, r0, #16
    c2f8:	3910      	subs	r1, #16
    c2fa:	0a1b      	lsrs	r3, r3, #8
    c2fc:	4298      	cmp	r0, r3
    c2fe:	d301      	bcc.n	c304 <__clzsi2+0x18>
    c300:	0a00      	lsrs	r0, r0, #8
    c302:	3908      	subs	r1, #8
    c304:	091b      	lsrs	r3, r3, #4
    c306:	4298      	cmp	r0, r3
    c308:	d301      	bcc.n	c30e <__clzsi2+0x22>
    c30a:	0900      	lsrs	r0, r0, #4
    c30c:	3904      	subs	r1, #4
    c30e:	a202      	add	r2, pc, #8	; (adr r2, c318 <__clzsi2+0x2c>)
    c310:	5c10      	ldrb	r0, [r2, r0]
    c312:	1840      	adds	r0, r0, r1
    c314:	4770      	bx	lr
    c316:	46c0      	nop			; (mov r8, r8)
    c318:	02020304 	.word	0x02020304
    c31c:	01010101 	.word	0x01010101
	...

0000c328 <__ctzsi2>:
    c328:	4241      	negs	r1, r0
    c32a:	4008      	ands	r0, r1
    c32c:	211c      	movs	r1, #28
    c32e:	2301      	movs	r3, #1
    c330:	041b      	lsls	r3, r3, #16
    c332:	4298      	cmp	r0, r3
    c334:	d301      	bcc.n	c33a <__ctzsi2+0x12>
    c336:	0c00      	lsrs	r0, r0, #16
    c338:	3910      	subs	r1, #16
    c33a:	0a1b      	lsrs	r3, r3, #8
    c33c:	4298      	cmp	r0, r3
    c33e:	d301      	bcc.n	c344 <__ctzsi2+0x1c>
    c340:	0a00      	lsrs	r0, r0, #8
    c342:	3908      	subs	r1, #8
    c344:	091b      	lsrs	r3, r3, #4
    c346:	4298      	cmp	r0, r3
    c348:	d301      	bcc.n	c34e <__ctzsi2+0x26>
    c34a:	0900      	lsrs	r0, r0, #4
    c34c:	3904      	subs	r1, #4
    c34e:	a202      	add	r2, pc, #8	; (adr r2, c358 <__ctzsi2+0x30>)
    c350:	5c10      	ldrb	r0, [r2, r0]
    c352:	1a40      	subs	r0, r0, r1
    c354:	4770      	bx	lr
    c356:	46c0      	nop			; (mov r8, r8)
    c358:	1d1d1c1b 	.word	0x1d1d1c1b
    c35c:	1e1e1e1e 	.word	0x1e1e1e1e
    c360:	1f1f1f1f 	.word	0x1f1f1f1f
    c364:	1f1f1f1f 	.word	0x1f1f1f1f

0000c368 <__aeabi_lmul>:
    c368:	b5f0      	push	{r4, r5, r6, r7, lr}
    c36a:	464f      	mov	r7, r9
    c36c:	4646      	mov	r6, r8
    c36e:	b4c0      	push	{r6, r7}
    c370:	0416      	lsls	r6, r2, #16
    c372:	0c36      	lsrs	r6, r6, #16
    c374:	4699      	mov	r9, r3
    c376:	0033      	movs	r3, r6
    c378:	0405      	lsls	r5, r0, #16
    c37a:	0c2c      	lsrs	r4, r5, #16
    c37c:	0c07      	lsrs	r7, r0, #16
    c37e:	0c15      	lsrs	r5, r2, #16
    c380:	4363      	muls	r3, r4
    c382:	437e      	muls	r6, r7
    c384:	436f      	muls	r7, r5
    c386:	4365      	muls	r5, r4
    c388:	0c1c      	lsrs	r4, r3, #16
    c38a:	19ad      	adds	r5, r5, r6
    c38c:	1964      	adds	r4, r4, r5
    c38e:	469c      	mov	ip, r3
    c390:	42a6      	cmp	r6, r4
    c392:	d903      	bls.n	c39c <__aeabi_lmul+0x34>
    c394:	2380      	movs	r3, #128	; 0x80
    c396:	025b      	lsls	r3, r3, #9
    c398:	4698      	mov	r8, r3
    c39a:	4447      	add	r7, r8
    c39c:	4663      	mov	r3, ip
    c39e:	0c25      	lsrs	r5, r4, #16
    c3a0:	19ef      	adds	r7, r5, r7
    c3a2:	041d      	lsls	r5, r3, #16
    c3a4:	464b      	mov	r3, r9
    c3a6:	434a      	muls	r2, r1
    c3a8:	4343      	muls	r3, r0
    c3aa:	0c2d      	lsrs	r5, r5, #16
    c3ac:	0424      	lsls	r4, r4, #16
    c3ae:	1964      	adds	r4, r4, r5
    c3b0:	1899      	adds	r1, r3, r2
    c3b2:	19c9      	adds	r1, r1, r7
    c3b4:	0020      	movs	r0, r4
    c3b6:	bc0c      	pop	{r2, r3}
    c3b8:	4690      	mov	r8, r2
    c3ba:	4699      	mov	r9, r3
    c3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3be:	46c0      	nop			; (mov r8, r8)

0000c3c0 <__aeabi_f2uiz>:
    c3c0:	219e      	movs	r1, #158	; 0x9e
    c3c2:	b510      	push	{r4, lr}
    c3c4:	05c9      	lsls	r1, r1, #23
    c3c6:	1c04      	adds	r4, r0, #0
    c3c8:	f7ff ff86 	bl	c2d8 <__aeabi_fcmpge>
    c3cc:	2800      	cmp	r0, #0
    c3ce:	d103      	bne.n	c3d8 <__aeabi_f2uiz+0x18>
    c3d0:	1c20      	adds	r0, r4, #0
    c3d2:	f000 fde7 	bl	cfa4 <__aeabi_f2iz>
    c3d6:	bd10      	pop	{r4, pc}
    c3d8:	219e      	movs	r1, #158	; 0x9e
    c3da:	1c20      	adds	r0, r4, #0
    c3dc:	05c9      	lsls	r1, r1, #23
    c3de:	f000 fc5b 	bl	cc98 <__aeabi_fsub>
    c3e2:	f000 fddf 	bl	cfa4 <__aeabi_f2iz>
    c3e6:	2380      	movs	r3, #128	; 0x80
    c3e8:	061b      	lsls	r3, r3, #24
    c3ea:	469c      	mov	ip, r3
    c3ec:	4460      	add	r0, ip
    c3ee:	e7f2      	b.n	c3d6 <__aeabi_f2uiz+0x16>

0000c3f0 <__aeabi_fadd>:
    c3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3f2:	024a      	lsls	r2, r1, #9
    c3f4:	0243      	lsls	r3, r0, #9
    c3f6:	0044      	lsls	r4, r0, #1
    c3f8:	004e      	lsls	r6, r1, #1
    c3fa:	0fc5      	lsrs	r5, r0, #31
    c3fc:	0e24      	lsrs	r4, r4, #24
    c3fe:	0028      	movs	r0, r5
    c400:	099b      	lsrs	r3, r3, #6
    c402:	0e36      	lsrs	r6, r6, #24
    c404:	0fc9      	lsrs	r1, r1, #31
    c406:	0992      	lsrs	r2, r2, #6
    c408:	428d      	cmp	r5, r1
    c40a:	d059      	beq.n	c4c0 <__aeabi_fadd+0xd0>
    c40c:	1ba0      	subs	r0, r4, r6
    c40e:	2800      	cmp	r0, #0
    c410:	dc00      	bgt.n	c414 <__aeabi_fadd+0x24>
    c412:	e08d      	b.n	c530 <__aeabi_fadd+0x140>
    c414:	2e00      	cmp	r6, #0
    c416:	d11a      	bne.n	c44e <__aeabi_fadd+0x5e>
    c418:	2a00      	cmp	r2, #0
    c41a:	d000      	beq.n	c41e <__aeabi_fadd+0x2e>
    c41c:	e079      	b.n	c512 <__aeabi_fadd+0x122>
    c41e:	075a      	lsls	r2, r3, #29
    c420:	d004      	beq.n	c42c <__aeabi_fadd+0x3c>
    c422:	220f      	movs	r2, #15
    c424:	401a      	ands	r2, r3
    c426:	2a04      	cmp	r2, #4
    c428:	d000      	beq.n	c42c <__aeabi_fadd+0x3c>
    c42a:	3304      	adds	r3, #4
    c42c:	015a      	lsls	r2, r3, #5
    c42e:	d538      	bpl.n	c4a2 <__aeabi_fadd+0xb2>
    c430:	3401      	adds	r4, #1
    c432:	2cff      	cmp	r4, #255	; 0xff
    c434:	d100      	bne.n	c438 <__aeabi_fadd+0x48>
    c436:	e089      	b.n	c54c <__aeabi_fadd+0x15c>
    c438:	0028      	movs	r0, r5
    c43a:	019b      	lsls	r3, r3, #6
    c43c:	0a5b      	lsrs	r3, r3, #9
    c43e:	b2e4      	uxtb	r4, r4
    c440:	025b      	lsls	r3, r3, #9
    c442:	05e4      	lsls	r4, r4, #23
    c444:	0a5b      	lsrs	r3, r3, #9
    c446:	4323      	orrs	r3, r4
    c448:	07c0      	lsls	r0, r0, #31
    c44a:	4318      	orrs	r0, r3
    c44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c44e:	2cff      	cmp	r4, #255	; 0xff
    c450:	d0e5      	beq.n	c41e <__aeabi_fadd+0x2e>
    c452:	2180      	movs	r1, #128	; 0x80
    c454:	04c9      	lsls	r1, r1, #19
    c456:	430a      	orrs	r2, r1
    c458:	281b      	cmp	r0, #27
    c45a:	dd00      	ble.n	c45e <__aeabi_fadd+0x6e>
    c45c:	e089      	b.n	c572 <__aeabi_fadd+0x182>
    c45e:	0016      	movs	r6, r2
    c460:	2120      	movs	r1, #32
    c462:	40c6      	lsrs	r6, r0
    c464:	1a08      	subs	r0, r1, r0
    c466:	4082      	lsls	r2, r0
    c468:	1e51      	subs	r1, r2, #1
    c46a:	418a      	sbcs	r2, r1
    c46c:	4332      	orrs	r2, r6
    c46e:	1a9b      	subs	r3, r3, r2
    c470:	015a      	lsls	r2, r3, #5
    c472:	d514      	bpl.n	c49e <__aeabi_fadd+0xae>
    c474:	019b      	lsls	r3, r3, #6
    c476:	099e      	lsrs	r6, r3, #6
    c478:	0030      	movs	r0, r6
    c47a:	f7ff ff37 	bl	c2ec <__clzsi2>
    c47e:	3805      	subs	r0, #5
    c480:	4086      	lsls	r6, r0
    c482:	4284      	cmp	r4, r0
    c484:	dc65      	bgt.n	c552 <__aeabi_fadd+0x162>
    c486:	1b04      	subs	r4, r0, r4
    c488:	0033      	movs	r3, r6
    c48a:	2020      	movs	r0, #32
    c48c:	3401      	adds	r4, #1
    c48e:	40e3      	lsrs	r3, r4
    c490:	1b04      	subs	r4, r0, r4
    c492:	40a6      	lsls	r6, r4
    c494:	1e72      	subs	r2, r6, #1
    c496:	4196      	sbcs	r6, r2
    c498:	2400      	movs	r4, #0
    c49a:	4333      	orrs	r3, r6
    c49c:	e7bf      	b.n	c41e <__aeabi_fadd+0x2e>
    c49e:	075a      	lsls	r2, r3, #29
    c4a0:	d1bf      	bne.n	c422 <__aeabi_fadd+0x32>
    c4a2:	08df      	lsrs	r7, r3, #3
    c4a4:	0028      	movs	r0, r5
    c4a6:	2cff      	cmp	r4, #255	; 0xff
    c4a8:	d12f      	bne.n	c50a <__aeabi_fadd+0x11a>
    c4aa:	2f00      	cmp	r7, #0
    c4ac:	d100      	bne.n	c4b0 <__aeabi_fadd+0xc0>
    c4ae:	e087      	b.n	c5c0 <__aeabi_fadd+0x1d0>
    c4b0:	2280      	movs	r2, #128	; 0x80
    c4b2:	03d2      	lsls	r2, r2, #15
    c4b4:	0013      	movs	r3, r2
    c4b6:	433b      	orrs	r3, r7
    c4b8:	025b      	lsls	r3, r3, #9
    c4ba:	0a5b      	lsrs	r3, r3, #9
    c4bc:	24ff      	movs	r4, #255	; 0xff
    c4be:	e7bf      	b.n	c440 <__aeabi_fadd+0x50>
    c4c0:	1ba1      	subs	r1, r4, r6
    c4c2:	2900      	cmp	r1, #0
    c4c4:	dd49      	ble.n	c55a <__aeabi_fadd+0x16a>
    c4c6:	2e00      	cmp	r6, #0
    c4c8:	d029      	beq.n	c51e <__aeabi_fadd+0x12e>
    c4ca:	2cff      	cmp	r4, #255	; 0xff
    c4cc:	d0a7      	beq.n	c41e <__aeabi_fadd+0x2e>
    c4ce:	2680      	movs	r6, #128	; 0x80
    c4d0:	04f6      	lsls	r6, r6, #19
    c4d2:	4332      	orrs	r2, r6
    c4d4:	291b      	cmp	r1, #27
    c4d6:	dd00      	ble.n	c4da <__aeabi_fadd+0xea>
    c4d8:	e08d      	b.n	c5f6 <__aeabi_fadd+0x206>
    c4da:	0017      	movs	r7, r2
    c4dc:	2620      	movs	r6, #32
    c4de:	40cf      	lsrs	r7, r1
    c4e0:	1a71      	subs	r1, r6, r1
    c4e2:	408a      	lsls	r2, r1
    c4e4:	1e51      	subs	r1, r2, #1
    c4e6:	418a      	sbcs	r2, r1
    c4e8:	433a      	orrs	r2, r7
    c4ea:	189b      	adds	r3, r3, r2
    c4ec:	015a      	lsls	r2, r3, #5
    c4ee:	d5d6      	bpl.n	c49e <__aeabi_fadd+0xae>
    c4f0:	3401      	adds	r4, #1
    c4f2:	2cff      	cmp	r4, #255	; 0xff
    c4f4:	d064      	beq.n	c5c0 <__aeabi_fadd+0x1d0>
    c4f6:	2201      	movs	r2, #1
    c4f8:	4976      	ldr	r1, [pc, #472]	; (c6d4 <__aeabi_fadd+0x2e4>)
    c4fa:	401a      	ands	r2, r3
    c4fc:	085b      	lsrs	r3, r3, #1
    c4fe:	400b      	ands	r3, r1
    c500:	4313      	orrs	r3, r2
    c502:	e78c      	b.n	c41e <__aeabi_fadd+0x2e>
    c504:	1e03      	subs	r3, r0, #0
    c506:	d1ca      	bne.n	c49e <__aeabi_fadd+0xae>
    c508:	2000      	movs	r0, #0
    c50a:	027b      	lsls	r3, r7, #9
    c50c:	0a5b      	lsrs	r3, r3, #9
    c50e:	b2e4      	uxtb	r4, r4
    c510:	e796      	b.n	c440 <__aeabi_fadd+0x50>
    c512:	3801      	subs	r0, #1
    c514:	2800      	cmp	r0, #0
    c516:	d0aa      	beq.n	c46e <__aeabi_fadd+0x7e>
    c518:	2cff      	cmp	r4, #255	; 0xff
    c51a:	d19d      	bne.n	c458 <__aeabi_fadd+0x68>
    c51c:	e77f      	b.n	c41e <__aeabi_fadd+0x2e>
    c51e:	2a00      	cmp	r2, #0
    c520:	d100      	bne.n	c524 <__aeabi_fadd+0x134>
    c522:	e77c      	b.n	c41e <__aeabi_fadd+0x2e>
    c524:	3901      	subs	r1, #1
    c526:	2900      	cmp	r1, #0
    c528:	d0df      	beq.n	c4ea <__aeabi_fadd+0xfa>
    c52a:	2cff      	cmp	r4, #255	; 0xff
    c52c:	d1d2      	bne.n	c4d4 <__aeabi_fadd+0xe4>
    c52e:	e776      	b.n	c41e <__aeabi_fadd+0x2e>
    c530:	2800      	cmp	r0, #0
    c532:	d120      	bne.n	c576 <__aeabi_fadd+0x186>
    c534:	1c60      	adds	r0, r4, #1
    c536:	b2c0      	uxtb	r0, r0
    c538:	2801      	cmp	r0, #1
    c53a:	dd53      	ble.n	c5e4 <__aeabi_fadd+0x1f4>
    c53c:	2780      	movs	r7, #128	; 0x80
    c53e:	1a9e      	subs	r6, r3, r2
    c540:	04ff      	lsls	r7, r7, #19
    c542:	4037      	ands	r7, r6
    c544:	d02f      	beq.n	c5a6 <__aeabi_fadd+0x1b6>
    c546:	1ad6      	subs	r6, r2, r3
    c548:	000d      	movs	r5, r1
    c54a:	e795      	b.n	c478 <__aeabi_fadd+0x88>
    c54c:	0028      	movs	r0, r5
    c54e:	2300      	movs	r3, #0
    c550:	e776      	b.n	c440 <__aeabi_fadd+0x50>
    c552:	4b61      	ldr	r3, [pc, #388]	; (c6d8 <__aeabi_fadd+0x2e8>)
    c554:	1a24      	subs	r4, r4, r0
    c556:	4033      	ands	r3, r6
    c558:	e761      	b.n	c41e <__aeabi_fadd+0x2e>
    c55a:	2900      	cmp	r1, #0
    c55c:	d14d      	bne.n	c5fa <__aeabi_fadd+0x20a>
    c55e:	1c61      	adds	r1, r4, #1
    c560:	b2ce      	uxtb	r6, r1
    c562:	2e01      	cmp	r6, #1
    c564:	dd2f      	ble.n	c5c6 <__aeabi_fadd+0x1d6>
    c566:	29ff      	cmp	r1, #255	; 0xff
    c568:	d02a      	beq.n	c5c0 <__aeabi_fadd+0x1d0>
    c56a:	189b      	adds	r3, r3, r2
    c56c:	085b      	lsrs	r3, r3, #1
    c56e:	000c      	movs	r4, r1
    c570:	e755      	b.n	c41e <__aeabi_fadd+0x2e>
    c572:	2201      	movs	r2, #1
    c574:	e77b      	b.n	c46e <__aeabi_fadd+0x7e>
    c576:	2c00      	cmp	r4, #0
    c578:	d11b      	bne.n	c5b2 <__aeabi_fadd+0x1c2>
    c57a:	2b00      	cmp	r3, #0
    c57c:	d05b      	beq.n	c636 <__aeabi_fadd+0x246>
    c57e:	43c0      	mvns	r0, r0
    c580:	2800      	cmp	r0, #0
    c582:	d00c      	beq.n	c59e <__aeabi_fadd+0x1ae>
    c584:	2eff      	cmp	r6, #255	; 0xff
    c586:	d07e      	beq.n	c686 <__aeabi_fadd+0x296>
    c588:	281b      	cmp	r0, #27
    c58a:	dd00      	ble.n	c58e <__aeabi_fadd+0x19e>
    c58c:	e092      	b.n	c6b4 <__aeabi_fadd+0x2c4>
    c58e:	001d      	movs	r5, r3
    c590:	2420      	movs	r4, #32
    c592:	40c5      	lsrs	r5, r0
    c594:	1a20      	subs	r0, r4, r0
    c596:	4083      	lsls	r3, r0
    c598:	1e58      	subs	r0, r3, #1
    c59a:	4183      	sbcs	r3, r0
    c59c:	432b      	orrs	r3, r5
    c59e:	1ad3      	subs	r3, r2, r3
    c5a0:	0034      	movs	r4, r6
    c5a2:	000d      	movs	r5, r1
    c5a4:	e764      	b.n	c470 <__aeabi_fadd+0x80>
    c5a6:	2e00      	cmp	r6, #0
    c5a8:	d000      	beq.n	c5ac <__aeabi_fadd+0x1bc>
    c5aa:	e765      	b.n	c478 <__aeabi_fadd+0x88>
    c5ac:	2000      	movs	r0, #0
    c5ae:	2400      	movs	r4, #0
    c5b0:	e7ab      	b.n	c50a <__aeabi_fadd+0x11a>
    c5b2:	2eff      	cmp	r6, #255	; 0xff
    c5b4:	d067      	beq.n	c686 <__aeabi_fadd+0x296>
    c5b6:	2480      	movs	r4, #128	; 0x80
    c5b8:	04e4      	lsls	r4, r4, #19
    c5ba:	4240      	negs	r0, r0
    c5bc:	4323      	orrs	r3, r4
    c5be:	e7e3      	b.n	c588 <__aeabi_fadd+0x198>
    c5c0:	24ff      	movs	r4, #255	; 0xff
    c5c2:	2300      	movs	r3, #0
    c5c4:	e73c      	b.n	c440 <__aeabi_fadd+0x50>
    c5c6:	2c00      	cmp	r4, #0
    c5c8:	d161      	bne.n	c68e <__aeabi_fadd+0x29e>
    c5ca:	2b00      	cmp	r3, #0
    c5cc:	d07e      	beq.n	c6cc <__aeabi_fadd+0x2dc>
    c5ce:	2a00      	cmp	r2, #0
    c5d0:	d100      	bne.n	c5d4 <__aeabi_fadd+0x1e4>
    c5d2:	e724      	b.n	c41e <__aeabi_fadd+0x2e>
    c5d4:	189b      	adds	r3, r3, r2
    c5d6:	015a      	lsls	r2, r3, #5
    c5d8:	d400      	bmi.n	c5dc <__aeabi_fadd+0x1ec>
    c5da:	e760      	b.n	c49e <__aeabi_fadd+0xae>
    c5dc:	4a3e      	ldr	r2, [pc, #248]	; (c6d8 <__aeabi_fadd+0x2e8>)
    c5de:	000c      	movs	r4, r1
    c5e0:	4013      	ands	r3, r2
    c5e2:	e71c      	b.n	c41e <__aeabi_fadd+0x2e>
    c5e4:	2c00      	cmp	r4, #0
    c5e6:	d11e      	bne.n	c626 <__aeabi_fadd+0x236>
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	d12f      	bne.n	c64c <__aeabi_fadd+0x25c>
    c5ec:	2a00      	cmp	r2, #0
    c5ee:	d066      	beq.n	c6be <__aeabi_fadd+0x2ce>
    c5f0:	0013      	movs	r3, r2
    c5f2:	000d      	movs	r5, r1
    c5f4:	e713      	b.n	c41e <__aeabi_fadd+0x2e>
    c5f6:	2201      	movs	r2, #1
    c5f8:	e777      	b.n	c4ea <__aeabi_fadd+0xfa>
    c5fa:	2c00      	cmp	r4, #0
    c5fc:	d11f      	bne.n	c63e <__aeabi_fadd+0x24e>
    c5fe:	2b00      	cmp	r3, #0
    c600:	d05a      	beq.n	c6b8 <__aeabi_fadd+0x2c8>
    c602:	43c9      	mvns	r1, r1
    c604:	2900      	cmp	r1, #0
    c606:	d00b      	beq.n	c620 <__aeabi_fadd+0x230>
    c608:	2eff      	cmp	r6, #255	; 0xff
    c60a:	d050      	beq.n	c6ae <__aeabi_fadd+0x2be>
    c60c:	291b      	cmp	r1, #27
    c60e:	dc5f      	bgt.n	c6d0 <__aeabi_fadd+0x2e0>
    c610:	001f      	movs	r7, r3
    c612:	2420      	movs	r4, #32
    c614:	40cf      	lsrs	r7, r1
    c616:	1a61      	subs	r1, r4, r1
    c618:	408b      	lsls	r3, r1
    c61a:	1e59      	subs	r1, r3, #1
    c61c:	418b      	sbcs	r3, r1
    c61e:	433b      	orrs	r3, r7
    c620:	189b      	adds	r3, r3, r2
    c622:	0034      	movs	r4, r6
    c624:	e762      	b.n	c4ec <__aeabi_fadd+0xfc>
    c626:	2b00      	cmp	r3, #0
    c628:	d11c      	bne.n	c664 <__aeabi_fadd+0x274>
    c62a:	2a00      	cmp	r2, #0
    c62c:	d04a      	beq.n	c6c4 <__aeabi_fadd+0x2d4>
    c62e:	0013      	movs	r3, r2
    c630:	000d      	movs	r5, r1
    c632:	24ff      	movs	r4, #255	; 0xff
    c634:	e6f3      	b.n	c41e <__aeabi_fadd+0x2e>
    c636:	0013      	movs	r3, r2
    c638:	0034      	movs	r4, r6
    c63a:	000d      	movs	r5, r1
    c63c:	e6ef      	b.n	c41e <__aeabi_fadd+0x2e>
    c63e:	2eff      	cmp	r6, #255	; 0xff
    c640:	d035      	beq.n	c6ae <__aeabi_fadd+0x2be>
    c642:	2480      	movs	r4, #128	; 0x80
    c644:	04e4      	lsls	r4, r4, #19
    c646:	4249      	negs	r1, r1
    c648:	4323      	orrs	r3, r4
    c64a:	e7df      	b.n	c60c <__aeabi_fadd+0x21c>
    c64c:	2a00      	cmp	r2, #0
    c64e:	d100      	bne.n	c652 <__aeabi_fadd+0x262>
    c650:	e6e5      	b.n	c41e <__aeabi_fadd+0x2e>
    c652:	2780      	movs	r7, #128	; 0x80
    c654:	1a98      	subs	r0, r3, r2
    c656:	04ff      	lsls	r7, r7, #19
    c658:	4007      	ands	r7, r0
    c65a:	d100      	bne.n	c65e <__aeabi_fadd+0x26e>
    c65c:	e752      	b.n	c504 <__aeabi_fadd+0x114>
    c65e:	1ad3      	subs	r3, r2, r3
    c660:	000d      	movs	r5, r1
    c662:	e6dc      	b.n	c41e <__aeabi_fadd+0x2e>
    c664:	24ff      	movs	r4, #255	; 0xff
    c666:	2a00      	cmp	r2, #0
    c668:	d100      	bne.n	c66c <__aeabi_fadd+0x27c>
    c66a:	e6d8      	b.n	c41e <__aeabi_fadd+0x2e>
    c66c:	2080      	movs	r0, #128	; 0x80
    c66e:	08db      	lsrs	r3, r3, #3
    c670:	03c0      	lsls	r0, r0, #15
    c672:	4203      	tst	r3, r0
    c674:	d004      	beq.n	c680 <__aeabi_fadd+0x290>
    c676:	08d2      	lsrs	r2, r2, #3
    c678:	4202      	tst	r2, r0
    c67a:	d101      	bne.n	c680 <__aeabi_fadd+0x290>
    c67c:	0013      	movs	r3, r2
    c67e:	000d      	movs	r5, r1
    c680:	00db      	lsls	r3, r3, #3
    c682:	24ff      	movs	r4, #255	; 0xff
    c684:	e6cb      	b.n	c41e <__aeabi_fadd+0x2e>
    c686:	0013      	movs	r3, r2
    c688:	24ff      	movs	r4, #255	; 0xff
    c68a:	000d      	movs	r5, r1
    c68c:	e6c7      	b.n	c41e <__aeabi_fadd+0x2e>
    c68e:	2b00      	cmp	r3, #0
    c690:	d00d      	beq.n	c6ae <__aeabi_fadd+0x2be>
    c692:	24ff      	movs	r4, #255	; 0xff
    c694:	2a00      	cmp	r2, #0
    c696:	d100      	bne.n	c69a <__aeabi_fadd+0x2aa>
    c698:	e6c1      	b.n	c41e <__aeabi_fadd+0x2e>
    c69a:	2180      	movs	r1, #128	; 0x80
    c69c:	08db      	lsrs	r3, r3, #3
    c69e:	03c9      	lsls	r1, r1, #15
    c6a0:	420b      	tst	r3, r1
    c6a2:	d0ed      	beq.n	c680 <__aeabi_fadd+0x290>
    c6a4:	08d2      	lsrs	r2, r2, #3
    c6a6:	420a      	tst	r2, r1
    c6a8:	d1ea      	bne.n	c680 <__aeabi_fadd+0x290>
    c6aa:	0013      	movs	r3, r2
    c6ac:	e7e8      	b.n	c680 <__aeabi_fadd+0x290>
    c6ae:	0013      	movs	r3, r2
    c6b0:	24ff      	movs	r4, #255	; 0xff
    c6b2:	e6b4      	b.n	c41e <__aeabi_fadd+0x2e>
    c6b4:	2301      	movs	r3, #1
    c6b6:	e772      	b.n	c59e <__aeabi_fadd+0x1ae>
    c6b8:	0013      	movs	r3, r2
    c6ba:	0034      	movs	r4, r6
    c6bc:	e6af      	b.n	c41e <__aeabi_fadd+0x2e>
    c6be:	2700      	movs	r7, #0
    c6c0:	2000      	movs	r0, #0
    c6c2:	e722      	b.n	c50a <__aeabi_fadd+0x11a>
    c6c4:	2780      	movs	r7, #128	; 0x80
    c6c6:	2000      	movs	r0, #0
    c6c8:	03ff      	lsls	r7, r7, #15
    c6ca:	e6f1      	b.n	c4b0 <__aeabi_fadd+0xc0>
    c6cc:	0013      	movs	r3, r2
    c6ce:	e6a6      	b.n	c41e <__aeabi_fadd+0x2e>
    c6d0:	2301      	movs	r3, #1
    c6d2:	e7a5      	b.n	c620 <__aeabi_fadd+0x230>
    c6d4:	7dffffff 	.word	0x7dffffff
    c6d8:	fbffffff 	.word	0xfbffffff

0000c6dc <__aeabi_fdiv>:
    c6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6de:	4656      	mov	r6, sl
    c6e0:	4644      	mov	r4, r8
    c6e2:	465f      	mov	r7, fp
    c6e4:	464d      	mov	r5, r9
    c6e6:	b4f0      	push	{r4, r5, r6, r7}
    c6e8:	0244      	lsls	r4, r0, #9
    c6ea:	0046      	lsls	r6, r0, #1
    c6ec:	0fc7      	lsrs	r7, r0, #31
    c6ee:	b083      	sub	sp, #12
    c6f0:	4688      	mov	r8, r1
    c6f2:	0a65      	lsrs	r5, r4, #9
    c6f4:	0e36      	lsrs	r6, r6, #24
    c6f6:	46ba      	mov	sl, r7
    c6f8:	d03d      	beq.n	c776 <__aeabi_fdiv+0x9a>
    c6fa:	2eff      	cmp	r6, #255	; 0xff
    c6fc:	d022      	beq.n	c744 <__aeabi_fdiv+0x68>
    c6fe:	2300      	movs	r3, #0
    c700:	00ec      	lsls	r4, r5, #3
    c702:	2580      	movs	r5, #128	; 0x80
    c704:	4699      	mov	r9, r3
    c706:	469b      	mov	fp, r3
    c708:	04ed      	lsls	r5, r5, #19
    c70a:	4325      	orrs	r5, r4
    c70c:	3e7f      	subs	r6, #127	; 0x7f
    c70e:	4643      	mov	r3, r8
    c710:	025c      	lsls	r4, r3, #9
    c712:	0058      	lsls	r0, r3, #1
    c714:	0fdb      	lsrs	r3, r3, #31
    c716:	0a64      	lsrs	r4, r4, #9
    c718:	0e00      	lsrs	r0, r0, #24
    c71a:	4698      	mov	r8, r3
    c71c:	d036      	beq.n	c78c <__aeabi_fdiv+0xb0>
    c71e:	28ff      	cmp	r0, #255	; 0xff
    c720:	d030      	beq.n	c784 <__aeabi_fdiv+0xa8>
    c722:	2380      	movs	r3, #128	; 0x80
    c724:	2100      	movs	r1, #0
    c726:	00e4      	lsls	r4, r4, #3
    c728:	04db      	lsls	r3, r3, #19
    c72a:	431c      	orrs	r4, r3
    c72c:	387f      	subs	r0, #127	; 0x7f
    c72e:	1a30      	subs	r0, r6, r0
    c730:	9001      	str	r0, [sp, #4]
    c732:	4648      	mov	r0, r9
    c734:	4642      	mov	r2, r8
    c736:	4308      	orrs	r0, r1
    c738:	4e72      	ldr	r6, [pc, #456]	; (c904 <__aeabi_fdiv+0x228>)
    c73a:	0080      	lsls	r0, r0, #2
    c73c:	5830      	ldr	r0, [r6, r0]
    c73e:	407a      	eors	r2, r7
    c740:	0013      	movs	r3, r2
    c742:	4687      	mov	pc, r0
    c744:	2d00      	cmp	r5, #0
    c746:	d144      	bne.n	c7d2 <__aeabi_fdiv+0xf6>
    c748:	2308      	movs	r3, #8
    c74a:	4699      	mov	r9, r3
    c74c:	3b06      	subs	r3, #6
    c74e:	469b      	mov	fp, r3
    c750:	e7dd      	b.n	c70e <__aeabi_fdiv+0x32>
    c752:	2201      	movs	r2, #1
    c754:	20ff      	movs	r0, #255	; 0xff
    c756:	2400      	movs	r4, #0
    c758:	401a      	ands	r2, r3
    c75a:	0264      	lsls	r4, r4, #9
    c75c:	05c3      	lsls	r3, r0, #23
    c75e:	0a64      	lsrs	r4, r4, #9
    c760:	07d2      	lsls	r2, r2, #31
    c762:	431c      	orrs	r4, r3
    c764:	4314      	orrs	r4, r2
    c766:	0020      	movs	r0, r4
    c768:	b003      	add	sp, #12
    c76a:	bc3c      	pop	{r2, r3, r4, r5}
    c76c:	4690      	mov	r8, r2
    c76e:	4699      	mov	r9, r3
    c770:	46a2      	mov	sl, r4
    c772:	46ab      	mov	fp, r5
    c774:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c776:	2d00      	cmp	r5, #0
    c778:	d120      	bne.n	c7bc <__aeabi_fdiv+0xe0>
    c77a:	2304      	movs	r3, #4
    c77c:	4699      	mov	r9, r3
    c77e:	3b03      	subs	r3, #3
    c780:	469b      	mov	fp, r3
    c782:	e7c4      	b.n	c70e <__aeabi_fdiv+0x32>
    c784:	2c00      	cmp	r4, #0
    c786:	d117      	bne.n	c7b8 <__aeabi_fdiv+0xdc>
    c788:	2102      	movs	r1, #2
    c78a:	e002      	b.n	c792 <__aeabi_fdiv+0xb6>
    c78c:	2c00      	cmp	r4, #0
    c78e:	d10a      	bne.n	c7a6 <__aeabi_fdiv+0xca>
    c790:	2101      	movs	r1, #1
    c792:	1a32      	subs	r2, r6, r0
    c794:	9201      	str	r2, [sp, #4]
    c796:	464a      	mov	r2, r9
    c798:	4643      	mov	r3, r8
    c79a:	430a      	orrs	r2, r1
    c79c:	485a      	ldr	r0, [pc, #360]	; (c908 <__aeabi_fdiv+0x22c>)
    c79e:	0092      	lsls	r2, r2, #2
    c7a0:	5882      	ldr	r2, [r0, r2]
    c7a2:	407b      	eors	r3, r7
    c7a4:	4697      	mov	pc, r2
    c7a6:	0020      	movs	r0, r4
    c7a8:	f7ff fda0 	bl	c2ec <__clzsi2>
    c7ac:	1f43      	subs	r3, r0, #5
    c7ae:	3076      	adds	r0, #118	; 0x76
    c7b0:	409c      	lsls	r4, r3
    c7b2:	4240      	negs	r0, r0
    c7b4:	2100      	movs	r1, #0
    c7b6:	e7ba      	b.n	c72e <__aeabi_fdiv+0x52>
    c7b8:	2103      	movs	r1, #3
    c7ba:	e7b8      	b.n	c72e <__aeabi_fdiv+0x52>
    c7bc:	0028      	movs	r0, r5
    c7be:	f7ff fd95 	bl	c2ec <__clzsi2>
    c7c2:	1f43      	subs	r3, r0, #5
    c7c4:	409d      	lsls	r5, r3
    c7c6:	2300      	movs	r3, #0
    c7c8:	3076      	adds	r0, #118	; 0x76
    c7ca:	4246      	negs	r6, r0
    c7cc:	4699      	mov	r9, r3
    c7ce:	469b      	mov	fp, r3
    c7d0:	e79d      	b.n	c70e <__aeabi_fdiv+0x32>
    c7d2:	230c      	movs	r3, #12
    c7d4:	4699      	mov	r9, r3
    c7d6:	3b09      	subs	r3, #9
    c7d8:	469b      	mov	fp, r3
    c7da:	e798      	b.n	c70e <__aeabi_fdiv+0x32>
    c7dc:	2480      	movs	r4, #128	; 0x80
    c7de:	2200      	movs	r2, #0
    c7e0:	03e4      	lsls	r4, r4, #15
    c7e2:	20ff      	movs	r0, #255	; 0xff
    c7e4:	e7b9      	b.n	c75a <__aeabi_fdiv+0x7e>
    c7e6:	2400      	movs	r4, #0
    c7e8:	46c2      	mov	sl, r8
    c7ea:	468b      	mov	fp, r1
    c7ec:	465a      	mov	r2, fp
    c7ee:	4653      	mov	r3, sl
    c7f0:	2a02      	cmp	r2, #2
    c7f2:	d0ae      	beq.n	c752 <__aeabi_fdiv+0x76>
    c7f4:	2a03      	cmp	r2, #3
    c7f6:	d07d      	beq.n	c8f4 <__aeabi_fdiv+0x218>
    c7f8:	2a01      	cmp	r2, #1
    c7fa:	d131      	bne.n	c860 <__aeabi_fdiv+0x184>
    c7fc:	2201      	movs	r2, #1
    c7fe:	2000      	movs	r0, #0
    c800:	401a      	ands	r2, r3
    c802:	2400      	movs	r4, #0
    c804:	e7a9      	b.n	c75a <__aeabi_fdiv+0x7e>
    c806:	2201      	movs	r2, #1
    c808:	1a10      	subs	r0, r2, r0
    c80a:	281b      	cmp	r0, #27
    c80c:	dd56      	ble.n	c8bc <__aeabi_fdiv+0x1e0>
    c80e:	401a      	ands	r2, r3
    c810:	2000      	movs	r0, #0
    c812:	2400      	movs	r4, #0
    c814:	e7a1      	b.n	c75a <__aeabi_fdiv+0x7e>
    c816:	2380      	movs	r3, #128	; 0x80
    c818:	03db      	lsls	r3, r3, #15
    c81a:	421d      	tst	r5, r3
    c81c:	d14b      	bne.n	c8b6 <__aeabi_fdiv+0x1da>
    c81e:	2380      	movs	r3, #128	; 0x80
    c820:	03db      	lsls	r3, r3, #15
    c822:	432b      	orrs	r3, r5
    c824:	025c      	lsls	r4, r3, #9
    c826:	0a64      	lsrs	r4, r4, #9
    c828:	003a      	movs	r2, r7
    c82a:	20ff      	movs	r0, #255	; 0xff
    c82c:	e795      	b.n	c75a <__aeabi_fdiv+0x7e>
    c82e:	016d      	lsls	r5, r5, #5
    c830:	0160      	lsls	r0, r4, #5
    c832:	4285      	cmp	r5, r0
    c834:	d230      	bcs.n	c898 <__aeabi_fdiv+0x1bc>
    c836:	9a01      	ldr	r2, [sp, #4]
    c838:	2400      	movs	r4, #0
    c83a:	3a01      	subs	r2, #1
    c83c:	9201      	str	r2, [sp, #4]
    c83e:	221b      	movs	r2, #27
    c840:	2701      	movs	r7, #1
    c842:	0029      	movs	r1, r5
    c844:	0064      	lsls	r4, r4, #1
    c846:	006d      	lsls	r5, r5, #1
    c848:	2900      	cmp	r1, #0
    c84a:	db01      	blt.n	c850 <__aeabi_fdiv+0x174>
    c84c:	42a8      	cmp	r0, r5
    c84e:	d801      	bhi.n	c854 <__aeabi_fdiv+0x178>
    c850:	1a2d      	subs	r5, r5, r0
    c852:	433c      	orrs	r4, r7
    c854:	3a01      	subs	r2, #1
    c856:	2a00      	cmp	r2, #0
    c858:	d1f3      	bne.n	c842 <__aeabi_fdiv+0x166>
    c85a:	1e6a      	subs	r2, r5, #1
    c85c:	4195      	sbcs	r5, r2
    c85e:	432c      	orrs	r4, r5
    c860:	9801      	ldr	r0, [sp, #4]
    c862:	307f      	adds	r0, #127	; 0x7f
    c864:	2800      	cmp	r0, #0
    c866:	ddce      	ble.n	c806 <__aeabi_fdiv+0x12a>
    c868:	0762      	lsls	r2, r4, #29
    c86a:	d004      	beq.n	c876 <__aeabi_fdiv+0x19a>
    c86c:	220f      	movs	r2, #15
    c86e:	4022      	ands	r2, r4
    c870:	2a04      	cmp	r2, #4
    c872:	d000      	beq.n	c876 <__aeabi_fdiv+0x19a>
    c874:	3404      	adds	r4, #4
    c876:	0122      	lsls	r2, r4, #4
    c878:	d503      	bpl.n	c882 <__aeabi_fdiv+0x1a6>
    c87a:	4a24      	ldr	r2, [pc, #144]	; (c90c <__aeabi_fdiv+0x230>)
    c87c:	9801      	ldr	r0, [sp, #4]
    c87e:	4014      	ands	r4, r2
    c880:	3080      	adds	r0, #128	; 0x80
    c882:	28fe      	cmp	r0, #254	; 0xfe
    c884:	dd00      	ble.n	c888 <__aeabi_fdiv+0x1ac>
    c886:	e764      	b.n	c752 <__aeabi_fdiv+0x76>
    c888:	2201      	movs	r2, #1
    c88a:	01a4      	lsls	r4, r4, #6
    c88c:	0a64      	lsrs	r4, r4, #9
    c88e:	b2c0      	uxtb	r0, r0
    c890:	401a      	ands	r2, r3
    c892:	e762      	b.n	c75a <__aeabi_fdiv+0x7e>
    c894:	002c      	movs	r4, r5
    c896:	e7a9      	b.n	c7ec <__aeabi_fdiv+0x110>
    c898:	1a2d      	subs	r5, r5, r0
    c89a:	221a      	movs	r2, #26
    c89c:	2401      	movs	r4, #1
    c89e:	e7cf      	b.n	c840 <__aeabi_fdiv+0x164>
    c8a0:	026b      	lsls	r3, r5, #9
    c8a2:	d5bc      	bpl.n	c81e <__aeabi_fdiv+0x142>
    c8a4:	2400      	movs	r4, #0
    c8a6:	2380      	movs	r3, #128	; 0x80
    c8a8:	03db      	lsls	r3, r3, #15
    c8aa:	431c      	orrs	r4, r3
    c8ac:	0264      	lsls	r4, r4, #9
    c8ae:	0a64      	lsrs	r4, r4, #9
    c8b0:	4642      	mov	r2, r8
    c8b2:	20ff      	movs	r0, #255	; 0xff
    c8b4:	e751      	b.n	c75a <__aeabi_fdiv+0x7e>
    c8b6:	421c      	tst	r4, r3
    c8b8:	d1b3      	bne.n	c822 <__aeabi_fdiv+0x146>
    c8ba:	e7f4      	b.n	c8a6 <__aeabi_fdiv+0x1ca>
    c8bc:	0021      	movs	r1, r4
    c8be:	2220      	movs	r2, #32
    c8c0:	40c1      	lsrs	r1, r0
    c8c2:	1a10      	subs	r0, r2, r0
    c8c4:	4084      	lsls	r4, r0
    c8c6:	1e62      	subs	r2, r4, #1
    c8c8:	4194      	sbcs	r4, r2
    c8ca:	430c      	orrs	r4, r1
    c8cc:	0762      	lsls	r2, r4, #29
    c8ce:	d004      	beq.n	c8da <__aeabi_fdiv+0x1fe>
    c8d0:	220f      	movs	r2, #15
    c8d2:	4022      	ands	r2, r4
    c8d4:	2a04      	cmp	r2, #4
    c8d6:	d000      	beq.n	c8da <__aeabi_fdiv+0x1fe>
    c8d8:	3404      	adds	r4, #4
    c8da:	0162      	lsls	r2, r4, #5
    c8dc:	d504      	bpl.n	c8e8 <__aeabi_fdiv+0x20c>
    c8de:	2201      	movs	r2, #1
    c8e0:	2001      	movs	r0, #1
    c8e2:	401a      	ands	r2, r3
    c8e4:	2400      	movs	r4, #0
    c8e6:	e738      	b.n	c75a <__aeabi_fdiv+0x7e>
    c8e8:	2201      	movs	r2, #1
    c8ea:	01a4      	lsls	r4, r4, #6
    c8ec:	0a64      	lsrs	r4, r4, #9
    c8ee:	401a      	ands	r2, r3
    c8f0:	2000      	movs	r0, #0
    c8f2:	e732      	b.n	c75a <__aeabi_fdiv+0x7e>
    c8f4:	2380      	movs	r3, #128	; 0x80
    c8f6:	03db      	lsls	r3, r3, #15
    c8f8:	431c      	orrs	r4, r3
    c8fa:	0264      	lsls	r4, r4, #9
    c8fc:	0a64      	lsrs	r4, r4, #9
    c8fe:	4652      	mov	r2, sl
    c900:	20ff      	movs	r0, #255	; 0xff
    c902:	e72a      	b.n	c75a <__aeabi_fdiv+0x7e>
    c904:	0000fb58 	.word	0x0000fb58
    c908:	0000fb98 	.word	0x0000fb98
    c90c:	f7ffffff 	.word	0xf7ffffff

0000c910 <__eqsf2>:
    c910:	0243      	lsls	r3, r0, #9
    c912:	b570      	push	{r4, r5, r6, lr}
    c914:	0042      	lsls	r2, r0, #1
    c916:	004c      	lsls	r4, r1, #1
    c918:	0a5d      	lsrs	r5, r3, #9
    c91a:	0fc3      	lsrs	r3, r0, #31
    c91c:	0248      	lsls	r0, r1, #9
    c91e:	0e12      	lsrs	r2, r2, #24
    c920:	0a46      	lsrs	r6, r0, #9
    c922:	0e24      	lsrs	r4, r4, #24
    c924:	0fc9      	lsrs	r1, r1, #31
    c926:	2aff      	cmp	r2, #255	; 0xff
    c928:	d00f      	beq.n	c94a <__eqsf2+0x3a>
    c92a:	2cff      	cmp	r4, #255	; 0xff
    c92c:	d011      	beq.n	c952 <__eqsf2+0x42>
    c92e:	2001      	movs	r0, #1
    c930:	42a2      	cmp	r2, r4
    c932:	d000      	beq.n	c936 <__eqsf2+0x26>
    c934:	bd70      	pop	{r4, r5, r6, pc}
    c936:	42b5      	cmp	r5, r6
    c938:	d1fc      	bne.n	c934 <__eqsf2+0x24>
    c93a:	428b      	cmp	r3, r1
    c93c:	d00d      	beq.n	c95a <__eqsf2+0x4a>
    c93e:	2a00      	cmp	r2, #0
    c940:	d1f8      	bne.n	c934 <__eqsf2+0x24>
    c942:	0028      	movs	r0, r5
    c944:	1e43      	subs	r3, r0, #1
    c946:	4198      	sbcs	r0, r3
    c948:	e7f4      	b.n	c934 <__eqsf2+0x24>
    c94a:	2001      	movs	r0, #1
    c94c:	2d00      	cmp	r5, #0
    c94e:	d1f1      	bne.n	c934 <__eqsf2+0x24>
    c950:	e7eb      	b.n	c92a <__eqsf2+0x1a>
    c952:	2001      	movs	r0, #1
    c954:	2e00      	cmp	r6, #0
    c956:	d1ed      	bne.n	c934 <__eqsf2+0x24>
    c958:	e7e9      	b.n	c92e <__eqsf2+0x1e>
    c95a:	2000      	movs	r0, #0
    c95c:	e7ea      	b.n	c934 <__eqsf2+0x24>
    c95e:	46c0      	nop			; (mov r8, r8)

0000c960 <__gesf2>:
    c960:	0243      	lsls	r3, r0, #9
    c962:	b5f0      	push	{r4, r5, r6, r7, lr}
    c964:	0042      	lsls	r2, r0, #1
    c966:	0a5d      	lsrs	r5, r3, #9
    c968:	0fc3      	lsrs	r3, r0, #31
    c96a:	0248      	lsls	r0, r1, #9
    c96c:	0a44      	lsrs	r4, r0, #9
    c96e:	0048      	lsls	r0, r1, #1
    c970:	0e12      	lsrs	r2, r2, #24
    c972:	0e00      	lsrs	r0, r0, #24
    c974:	0fc9      	lsrs	r1, r1, #31
    c976:	2aff      	cmp	r2, #255	; 0xff
    c978:	d01f      	beq.n	c9ba <__gesf2+0x5a>
    c97a:	28ff      	cmp	r0, #255	; 0xff
    c97c:	d022      	beq.n	c9c4 <__gesf2+0x64>
    c97e:	2a00      	cmp	r2, #0
    c980:	d109      	bne.n	c996 <__gesf2+0x36>
    c982:	426e      	negs	r6, r5
    c984:	416e      	adcs	r6, r5
    c986:	2800      	cmp	r0, #0
    c988:	d10f      	bne.n	c9aa <__gesf2+0x4a>
    c98a:	2c00      	cmp	r4, #0
    c98c:	d10d      	bne.n	c9aa <__gesf2+0x4a>
    c98e:	2000      	movs	r0, #0
    c990:	2d00      	cmp	r5, #0
    c992:	d009      	beq.n	c9a8 <__gesf2+0x48>
    c994:	e005      	b.n	c9a2 <__gesf2+0x42>
    c996:	2800      	cmp	r0, #0
    c998:	d101      	bne.n	c99e <__gesf2+0x3e>
    c99a:	2c00      	cmp	r4, #0
    c99c:	d001      	beq.n	c9a2 <__gesf2+0x42>
    c99e:	428b      	cmp	r3, r1
    c9a0:	d013      	beq.n	c9ca <__gesf2+0x6a>
    c9a2:	4258      	negs	r0, r3
    c9a4:	2301      	movs	r3, #1
    c9a6:	4318      	orrs	r0, r3
    c9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c9aa:	2e00      	cmp	r6, #0
    c9ac:	d0f7      	beq.n	c99e <__gesf2+0x3e>
    c9ae:	4248      	negs	r0, r1
    c9b0:	4141      	adcs	r1, r0
    c9b2:	2001      	movs	r0, #1
    c9b4:	4249      	negs	r1, r1
    c9b6:	4308      	orrs	r0, r1
    c9b8:	e7f6      	b.n	c9a8 <__gesf2+0x48>
    c9ba:	2d00      	cmp	r5, #0
    c9bc:	d0dd      	beq.n	c97a <__gesf2+0x1a>
    c9be:	2002      	movs	r0, #2
    c9c0:	4240      	negs	r0, r0
    c9c2:	e7f1      	b.n	c9a8 <__gesf2+0x48>
    c9c4:	2c00      	cmp	r4, #0
    c9c6:	d0da      	beq.n	c97e <__gesf2+0x1e>
    c9c8:	e7f9      	b.n	c9be <__gesf2+0x5e>
    c9ca:	4282      	cmp	r2, r0
    c9cc:	dce9      	bgt.n	c9a2 <__gesf2+0x42>
    c9ce:	db04      	blt.n	c9da <__gesf2+0x7a>
    c9d0:	42a5      	cmp	r5, r4
    c9d2:	d8e6      	bhi.n	c9a2 <__gesf2+0x42>
    c9d4:	2000      	movs	r0, #0
    c9d6:	42a5      	cmp	r5, r4
    c9d8:	d2e6      	bcs.n	c9a8 <__gesf2+0x48>
    c9da:	4258      	negs	r0, r3
    c9dc:	4143      	adcs	r3, r0
    c9de:	2001      	movs	r0, #1
    c9e0:	425b      	negs	r3, r3
    c9e2:	4318      	orrs	r0, r3
    c9e4:	e7e0      	b.n	c9a8 <__gesf2+0x48>
    c9e6:	46c0      	nop			; (mov r8, r8)

0000c9e8 <__lesf2>:
    c9e8:	0243      	lsls	r3, r0, #9
    c9ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9ec:	0042      	lsls	r2, r0, #1
    c9ee:	004c      	lsls	r4, r1, #1
    c9f0:	0a5e      	lsrs	r6, r3, #9
    c9f2:	0fc3      	lsrs	r3, r0, #31
    c9f4:	0248      	lsls	r0, r1, #9
    c9f6:	0e12      	lsrs	r2, r2, #24
    c9f8:	0a45      	lsrs	r5, r0, #9
    c9fa:	0e24      	lsrs	r4, r4, #24
    c9fc:	0fc9      	lsrs	r1, r1, #31
    c9fe:	2aff      	cmp	r2, #255	; 0xff
    ca00:	d017      	beq.n	ca32 <__lesf2+0x4a>
    ca02:	2cff      	cmp	r4, #255	; 0xff
    ca04:	d019      	beq.n	ca3a <__lesf2+0x52>
    ca06:	2a00      	cmp	r2, #0
    ca08:	d10b      	bne.n	ca22 <__lesf2+0x3a>
    ca0a:	4270      	negs	r0, r6
    ca0c:	4170      	adcs	r0, r6
    ca0e:	2c00      	cmp	r4, #0
    ca10:	d017      	beq.n	ca42 <__lesf2+0x5a>
    ca12:	2800      	cmp	r0, #0
    ca14:	d007      	beq.n	ca26 <__lesf2+0x3e>
    ca16:	4248      	negs	r0, r1
    ca18:	4141      	adcs	r1, r0
    ca1a:	2001      	movs	r0, #1
    ca1c:	4249      	negs	r1, r1
    ca1e:	4308      	orrs	r0, r1
    ca20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca22:	2c00      	cmp	r4, #0
    ca24:	d013      	beq.n	ca4e <__lesf2+0x66>
    ca26:	428b      	cmp	r3, r1
    ca28:	d014      	beq.n	ca54 <__lesf2+0x6c>
    ca2a:	4258      	negs	r0, r3
    ca2c:	2301      	movs	r3, #1
    ca2e:	4318      	orrs	r0, r3
    ca30:	e7f6      	b.n	ca20 <__lesf2+0x38>
    ca32:	2002      	movs	r0, #2
    ca34:	2e00      	cmp	r6, #0
    ca36:	d1f3      	bne.n	ca20 <__lesf2+0x38>
    ca38:	e7e3      	b.n	ca02 <__lesf2+0x1a>
    ca3a:	2002      	movs	r0, #2
    ca3c:	2d00      	cmp	r5, #0
    ca3e:	d1ef      	bne.n	ca20 <__lesf2+0x38>
    ca40:	e7e1      	b.n	ca06 <__lesf2+0x1e>
    ca42:	2d00      	cmp	r5, #0
    ca44:	d1e5      	bne.n	ca12 <__lesf2+0x2a>
    ca46:	2000      	movs	r0, #0
    ca48:	2e00      	cmp	r6, #0
    ca4a:	d0e9      	beq.n	ca20 <__lesf2+0x38>
    ca4c:	e7ed      	b.n	ca2a <__lesf2+0x42>
    ca4e:	2d00      	cmp	r5, #0
    ca50:	d1e9      	bne.n	ca26 <__lesf2+0x3e>
    ca52:	e7ea      	b.n	ca2a <__lesf2+0x42>
    ca54:	42a2      	cmp	r2, r4
    ca56:	dce8      	bgt.n	ca2a <__lesf2+0x42>
    ca58:	db04      	blt.n	ca64 <__lesf2+0x7c>
    ca5a:	42ae      	cmp	r6, r5
    ca5c:	d8e5      	bhi.n	ca2a <__lesf2+0x42>
    ca5e:	2000      	movs	r0, #0
    ca60:	42ae      	cmp	r6, r5
    ca62:	d2dd      	bcs.n	ca20 <__lesf2+0x38>
    ca64:	4258      	negs	r0, r3
    ca66:	4143      	adcs	r3, r0
    ca68:	2001      	movs	r0, #1
    ca6a:	425b      	negs	r3, r3
    ca6c:	4318      	orrs	r0, r3
    ca6e:	e7d7      	b.n	ca20 <__lesf2+0x38>

0000ca70 <__aeabi_fmul>:
    ca70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca72:	4657      	mov	r7, sl
    ca74:	464e      	mov	r6, r9
    ca76:	4645      	mov	r5, r8
    ca78:	0043      	lsls	r3, r0, #1
    ca7a:	b4e0      	push	{r5, r6, r7}
    ca7c:	0246      	lsls	r6, r0, #9
    ca7e:	4688      	mov	r8, r1
    ca80:	0a76      	lsrs	r6, r6, #9
    ca82:	0e1f      	lsrs	r7, r3, #24
    ca84:	0fc4      	lsrs	r4, r0, #31
    ca86:	2f00      	cmp	r7, #0
    ca88:	d047      	beq.n	cb1a <__aeabi_fmul+0xaa>
    ca8a:	2fff      	cmp	r7, #255	; 0xff
    ca8c:	d025      	beq.n	cada <__aeabi_fmul+0x6a>
    ca8e:	2300      	movs	r3, #0
    ca90:	2580      	movs	r5, #128	; 0x80
    ca92:	469a      	mov	sl, r3
    ca94:	4699      	mov	r9, r3
    ca96:	00f6      	lsls	r6, r6, #3
    ca98:	04ed      	lsls	r5, r5, #19
    ca9a:	432e      	orrs	r6, r5
    ca9c:	3f7f      	subs	r7, #127	; 0x7f
    ca9e:	4643      	mov	r3, r8
    caa0:	4642      	mov	r2, r8
    caa2:	025d      	lsls	r5, r3, #9
    caa4:	0fd2      	lsrs	r2, r2, #31
    caa6:	005b      	lsls	r3, r3, #1
    caa8:	0a6d      	lsrs	r5, r5, #9
    caaa:	0e1b      	lsrs	r3, r3, #24
    caac:	4690      	mov	r8, r2
    caae:	d040      	beq.n	cb32 <__aeabi_fmul+0xc2>
    cab0:	2bff      	cmp	r3, #255	; 0xff
    cab2:	d039      	beq.n	cb28 <__aeabi_fmul+0xb8>
    cab4:	2280      	movs	r2, #128	; 0x80
    cab6:	2000      	movs	r0, #0
    cab8:	00ed      	lsls	r5, r5, #3
    caba:	04d2      	lsls	r2, r2, #19
    cabc:	4315      	orrs	r5, r2
    cabe:	3b7f      	subs	r3, #127	; 0x7f
    cac0:	18fb      	adds	r3, r7, r3
    cac2:	4642      	mov	r2, r8
    cac4:	4657      	mov	r7, sl
    cac6:	1c59      	adds	r1, r3, #1
    cac8:	4062      	eors	r2, r4
    caca:	468c      	mov	ip, r1
    cacc:	4307      	orrs	r7, r0
    cace:	2f0f      	cmp	r7, #15
    cad0:	d85c      	bhi.n	cb8c <__aeabi_fmul+0x11c>
    cad2:	496f      	ldr	r1, [pc, #444]	; (cc90 <__aeabi_fmul+0x220>)
    cad4:	00bf      	lsls	r7, r7, #2
    cad6:	59c9      	ldr	r1, [r1, r7]
    cad8:	468f      	mov	pc, r1
    cada:	2e00      	cmp	r6, #0
    cadc:	d145      	bne.n	cb6a <__aeabi_fmul+0xfa>
    cade:	2308      	movs	r3, #8
    cae0:	469a      	mov	sl, r3
    cae2:	3b06      	subs	r3, #6
    cae4:	4699      	mov	r9, r3
    cae6:	e7da      	b.n	ca9e <__aeabi_fmul+0x2e>
    cae8:	4642      	mov	r2, r8
    caea:	2802      	cmp	r0, #2
    caec:	d02d      	beq.n	cb4a <__aeabi_fmul+0xda>
    caee:	2803      	cmp	r0, #3
    caf0:	d100      	bne.n	caf4 <__aeabi_fmul+0x84>
    caf2:	e0c3      	b.n	cc7c <__aeabi_fmul+0x20c>
    caf4:	2801      	cmp	r0, #1
    caf6:	d000      	beq.n	cafa <__aeabi_fmul+0x8a>
    caf8:	e0a2      	b.n	cc40 <__aeabi_fmul+0x1d0>
    cafa:	2500      	movs	r5, #0
    cafc:	2600      	movs	r6, #0
    cafe:	4002      	ands	r2, r0
    cb00:	b2d4      	uxtb	r4, r2
    cb02:	0276      	lsls	r6, r6, #9
    cb04:	05ed      	lsls	r5, r5, #23
    cb06:	0a76      	lsrs	r6, r6, #9
    cb08:	432e      	orrs	r6, r5
    cb0a:	07e4      	lsls	r4, r4, #31
    cb0c:	4326      	orrs	r6, r4
    cb0e:	0030      	movs	r0, r6
    cb10:	bc1c      	pop	{r2, r3, r4}
    cb12:	4690      	mov	r8, r2
    cb14:	4699      	mov	r9, r3
    cb16:	46a2      	mov	sl, r4
    cb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb1a:	2e00      	cmp	r6, #0
    cb1c:	d11a      	bne.n	cb54 <__aeabi_fmul+0xe4>
    cb1e:	2304      	movs	r3, #4
    cb20:	469a      	mov	sl, r3
    cb22:	3b03      	subs	r3, #3
    cb24:	4699      	mov	r9, r3
    cb26:	e7ba      	b.n	ca9e <__aeabi_fmul+0x2e>
    cb28:	002a      	movs	r2, r5
    cb2a:	1e51      	subs	r1, r2, #1
    cb2c:	418a      	sbcs	r2, r1
    cb2e:	1c90      	adds	r0, r2, #2
    cb30:	e7c6      	b.n	cac0 <__aeabi_fmul+0x50>
    cb32:	2001      	movs	r0, #1
    cb34:	2d00      	cmp	r5, #0
    cb36:	d0c3      	beq.n	cac0 <__aeabi_fmul+0x50>
    cb38:	0028      	movs	r0, r5
    cb3a:	f7ff fbd7 	bl	c2ec <__clzsi2>
    cb3e:	1f43      	subs	r3, r0, #5
    cb40:	3076      	adds	r0, #118	; 0x76
    cb42:	409d      	lsls	r5, r3
    cb44:	4243      	negs	r3, r0
    cb46:	2000      	movs	r0, #0
    cb48:	e7ba      	b.n	cac0 <__aeabi_fmul+0x50>
    cb4a:	2401      	movs	r4, #1
    cb4c:	25ff      	movs	r5, #255	; 0xff
    cb4e:	4014      	ands	r4, r2
    cb50:	2600      	movs	r6, #0
    cb52:	e7d6      	b.n	cb02 <__aeabi_fmul+0x92>
    cb54:	0030      	movs	r0, r6
    cb56:	f7ff fbc9 	bl	c2ec <__clzsi2>
    cb5a:	1f43      	subs	r3, r0, #5
    cb5c:	409e      	lsls	r6, r3
    cb5e:	2300      	movs	r3, #0
    cb60:	3076      	adds	r0, #118	; 0x76
    cb62:	4247      	negs	r7, r0
    cb64:	469a      	mov	sl, r3
    cb66:	4699      	mov	r9, r3
    cb68:	e799      	b.n	ca9e <__aeabi_fmul+0x2e>
    cb6a:	230c      	movs	r3, #12
    cb6c:	469a      	mov	sl, r3
    cb6e:	3b09      	subs	r3, #9
    cb70:	4699      	mov	r9, r3
    cb72:	e794      	b.n	ca9e <__aeabi_fmul+0x2e>
    cb74:	2680      	movs	r6, #128	; 0x80
    cb76:	2400      	movs	r4, #0
    cb78:	03f6      	lsls	r6, r6, #15
    cb7a:	25ff      	movs	r5, #255	; 0xff
    cb7c:	e7c1      	b.n	cb02 <__aeabi_fmul+0x92>
    cb7e:	0035      	movs	r5, r6
    cb80:	4648      	mov	r0, r9
    cb82:	e7b2      	b.n	caea <__aeabi_fmul+0x7a>
    cb84:	0035      	movs	r5, r6
    cb86:	0022      	movs	r2, r4
    cb88:	4648      	mov	r0, r9
    cb8a:	e7ae      	b.n	caea <__aeabi_fmul+0x7a>
    cb8c:	0429      	lsls	r1, r5, #16
    cb8e:	0c09      	lsrs	r1, r1, #16
    cb90:	0008      	movs	r0, r1
    cb92:	0c37      	lsrs	r7, r6, #16
    cb94:	0436      	lsls	r6, r6, #16
    cb96:	0c36      	lsrs	r6, r6, #16
    cb98:	0c2c      	lsrs	r4, r5, #16
    cb9a:	4379      	muls	r1, r7
    cb9c:	4370      	muls	r0, r6
    cb9e:	4367      	muls	r7, r4
    cba0:	4374      	muls	r4, r6
    cba2:	0c06      	lsrs	r6, r0, #16
    cba4:	1864      	adds	r4, r4, r1
    cba6:	1936      	adds	r6, r6, r4
    cba8:	42b1      	cmp	r1, r6
    cbaa:	d903      	bls.n	cbb4 <__aeabi_fmul+0x144>
    cbac:	2180      	movs	r1, #128	; 0x80
    cbae:	0249      	lsls	r1, r1, #9
    cbb0:	4688      	mov	r8, r1
    cbb2:	4447      	add	r7, r8
    cbb4:	0400      	lsls	r0, r0, #16
    cbb6:	0c00      	lsrs	r0, r0, #16
    cbb8:	0431      	lsls	r1, r6, #16
    cbba:	1809      	adds	r1, r1, r0
    cbbc:	018d      	lsls	r5, r1, #6
    cbbe:	1e68      	subs	r0, r5, #1
    cbc0:	4185      	sbcs	r5, r0
    cbc2:	0e89      	lsrs	r1, r1, #26
    cbc4:	4329      	orrs	r1, r5
    cbc6:	0c35      	lsrs	r5, r6, #16
    cbc8:	19ed      	adds	r5, r5, r7
    cbca:	01ad      	lsls	r5, r5, #6
    cbcc:	430d      	orrs	r5, r1
    cbce:	0129      	lsls	r1, r5, #4
    cbd0:	d504      	bpl.n	cbdc <__aeabi_fmul+0x16c>
    cbd2:	2301      	movs	r3, #1
    cbd4:	0869      	lsrs	r1, r5, #1
    cbd6:	401d      	ands	r5, r3
    cbd8:	4663      	mov	r3, ip
    cbda:	430d      	orrs	r5, r1
    cbdc:	0019      	movs	r1, r3
    cbde:	317f      	adds	r1, #127	; 0x7f
    cbe0:	2900      	cmp	r1, #0
    cbe2:	dd25      	ble.n	cc30 <__aeabi_fmul+0x1c0>
    cbe4:	0768      	lsls	r0, r5, #29
    cbe6:	d004      	beq.n	cbf2 <__aeabi_fmul+0x182>
    cbe8:	200f      	movs	r0, #15
    cbea:	4028      	ands	r0, r5
    cbec:	2804      	cmp	r0, #4
    cbee:	d000      	beq.n	cbf2 <__aeabi_fmul+0x182>
    cbf0:	3504      	adds	r5, #4
    cbf2:	0128      	lsls	r0, r5, #4
    cbf4:	d503      	bpl.n	cbfe <__aeabi_fmul+0x18e>
    cbf6:	4927      	ldr	r1, [pc, #156]	; (cc94 <__aeabi_fmul+0x224>)
    cbf8:	3380      	adds	r3, #128	; 0x80
    cbfa:	400d      	ands	r5, r1
    cbfc:	0019      	movs	r1, r3
    cbfe:	29fe      	cmp	r1, #254	; 0xfe
    cc00:	dca3      	bgt.n	cb4a <__aeabi_fmul+0xda>
    cc02:	2401      	movs	r4, #1
    cc04:	01ad      	lsls	r5, r5, #6
    cc06:	0a6e      	lsrs	r6, r5, #9
    cc08:	4014      	ands	r4, r2
    cc0a:	b2cd      	uxtb	r5, r1
    cc0c:	e779      	b.n	cb02 <__aeabi_fmul+0x92>
    cc0e:	2080      	movs	r0, #128	; 0x80
    cc10:	03c0      	lsls	r0, r0, #15
    cc12:	4206      	tst	r6, r0
    cc14:	d007      	beq.n	cc26 <__aeabi_fmul+0x1b6>
    cc16:	4205      	tst	r5, r0
    cc18:	d105      	bne.n	cc26 <__aeabi_fmul+0x1b6>
    cc1a:	4328      	orrs	r0, r5
    cc1c:	0246      	lsls	r6, r0, #9
    cc1e:	0a76      	lsrs	r6, r6, #9
    cc20:	4644      	mov	r4, r8
    cc22:	25ff      	movs	r5, #255	; 0xff
    cc24:	e76d      	b.n	cb02 <__aeabi_fmul+0x92>
    cc26:	4306      	orrs	r6, r0
    cc28:	0276      	lsls	r6, r6, #9
    cc2a:	0a76      	lsrs	r6, r6, #9
    cc2c:	25ff      	movs	r5, #255	; 0xff
    cc2e:	e768      	b.n	cb02 <__aeabi_fmul+0x92>
    cc30:	2401      	movs	r4, #1
    cc32:	1a61      	subs	r1, r4, r1
    cc34:	291b      	cmp	r1, #27
    cc36:	dd05      	ble.n	cc44 <__aeabi_fmul+0x1d4>
    cc38:	4014      	ands	r4, r2
    cc3a:	2500      	movs	r5, #0
    cc3c:	2600      	movs	r6, #0
    cc3e:	e760      	b.n	cb02 <__aeabi_fmul+0x92>
    cc40:	4663      	mov	r3, ip
    cc42:	e7cb      	b.n	cbdc <__aeabi_fmul+0x16c>
    cc44:	002e      	movs	r6, r5
    cc46:	2320      	movs	r3, #32
    cc48:	40ce      	lsrs	r6, r1
    cc4a:	1a59      	subs	r1, r3, r1
    cc4c:	408d      	lsls	r5, r1
    cc4e:	1e6b      	subs	r3, r5, #1
    cc50:	419d      	sbcs	r5, r3
    cc52:	432e      	orrs	r6, r5
    cc54:	0773      	lsls	r3, r6, #29
    cc56:	d004      	beq.n	cc62 <__aeabi_fmul+0x1f2>
    cc58:	230f      	movs	r3, #15
    cc5a:	4033      	ands	r3, r6
    cc5c:	2b04      	cmp	r3, #4
    cc5e:	d000      	beq.n	cc62 <__aeabi_fmul+0x1f2>
    cc60:	3604      	adds	r6, #4
    cc62:	0173      	lsls	r3, r6, #5
    cc64:	d504      	bpl.n	cc70 <__aeabi_fmul+0x200>
    cc66:	2401      	movs	r4, #1
    cc68:	2501      	movs	r5, #1
    cc6a:	4014      	ands	r4, r2
    cc6c:	2600      	movs	r6, #0
    cc6e:	e748      	b.n	cb02 <__aeabi_fmul+0x92>
    cc70:	2401      	movs	r4, #1
    cc72:	01b6      	lsls	r6, r6, #6
    cc74:	0a76      	lsrs	r6, r6, #9
    cc76:	4014      	ands	r4, r2
    cc78:	2500      	movs	r5, #0
    cc7a:	e742      	b.n	cb02 <__aeabi_fmul+0x92>
    cc7c:	2680      	movs	r6, #128	; 0x80
    cc7e:	2401      	movs	r4, #1
    cc80:	03f6      	lsls	r6, r6, #15
    cc82:	432e      	orrs	r6, r5
    cc84:	0276      	lsls	r6, r6, #9
    cc86:	0a76      	lsrs	r6, r6, #9
    cc88:	4014      	ands	r4, r2
    cc8a:	25ff      	movs	r5, #255	; 0xff
    cc8c:	e739      	b.n	cb02 <__aeabi_fmul+0x92>
    cc8e:	46c0      	nop			; (mov r8, r8)
    cc90:	0000fbd8 	.word	0x0000fbd8
    cc94:	f7ffffff 	.word	0xf7ffffff

0000cc98 <__aeabi_fsub>:
    cc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc9a:	024a      	lsls	r2, r1, #9
    cc9c:	004e      	lsls	r6, r1, #1
    cc9e:	0243      	lsls	r3, r0, #9
    cca0:	0044      	lsls	r4, r0, #1
    cca2:	0e24      	lsrs	r4, r4, #24
    cca4:	0fc5      	lsrs	r5, r0, #31
    cca6:	099b      	lsrs	r3, r3, #6
    cca8:	0e36      	lsrs	r6, r6, #24
    ccaa:	0fc9      	lsrs	r1, r1, #31
    ccac:	0992      	lsrs	r2, r2, #6
    ccae:	2eff      	cmp	r6, #255	; 0xff
    ccb0:	d100      	bne.n	ccb4 <__aeabi_fsub+0x1c>
    ccb2:	e083      	b.n	cdbc <__aeabi_fsub+0x124>
    ccb4:	2001      	movs	r0, #1
    ccb6:	4041      	eors	r1, r0
    ccb8:	1ba0      	subs	r0, r4, r6
    ccba:	42a9      	cmp	r1, r5
    ccbc:	d05c      	beq.n	cd78 <__aeabi_fsub+0xe0>
    ccbe:	2800      	cmp	r0, #0
    ccc0:	dc00      	bgt.n	ccc4 <__aeabi_fsub+0x2c>
    ccc2:	e095      	b.n	cdf0 <__aeabi_fsub+0x158>
    ccc4:	2e00      	cmp	r6, #0
    ccc6:	d11c      	bne.n	cd02 <__aeabi_fsub+0x6a>
    ccc8:	2a00      	cmp	r2, #0
    ccca:	d000      	beq.n	ccce <__aeabi_fsub+0x36>
    cccc:	e081      	b.n	cdd2 <__aeabi_fsub+0x13a>
    ccce:	075a      	lsls	r2, r3, #29
    ccd0:	d004      	beq.n	ccdc <__aeabi_fsub+0x44>
    ccd2:	220f      	movs	r2, #15
    ccd4:	401a      	ands	r2, r3
    ccd6:	2a04      	cmp	r2, #4
    ccd8:	d000      	beq.n	ccdc <__aeabi_fsub+0x44>
    ccda:	3304      	adds	r3, #4
    ccdc:	015a      	lsls	r2, r3, #5
    ccde:	d53b      	bpl.n	cd58 <__aeabi_fsub+0xc0>
    cce0:	3401      	adds	r4, #1
    cce2:	2cff      	cmp	r4, #255	; 0xff
    cce4:	d100      	bne.n	cce8 <__aeabi_fsub+0x50>
    cce6:	e091      	b.n	ce0c <__aeabi_fsub+0x174>
    cce8:	2001      	movs	r0, #1
    ccea:	019b      	lsls	r3, r3, #6
    ccec:	0a5b      	lsrs	r3, r3, #9
    ccee:	b2e4      	uxtb	r4, r4
    ccf0:	4005      	ands	r5, r0
    ccf2:	025b      	lsls	r3, r3, #9
    ccf4:	05e4      	lsls	r4, r4, #23
    ccf6:	0a5b      	lsrs	r3, r3, #9
    ccf8:	07ed      	lsls	r5, r5, #31
    ccfa:	4323      	orrs	r3, r4
    ccfc:	432b      	orrs	r3, r5
    ccfe:	0018      	movs	r0, r3
    cd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd02:	2cff      	cmp	r4, #255	; 0xff
    cd04:	d0e3      	beq.n	ccce <__aeabi_fsub+0x36>
    cd06:	2180      	movs	r1, #128	; 0x80
    cd08:	04c9      	lsls	r1, r1, #19
    cd0a:	430a      	orrs	r2, r1
    cd0c:	281b      	cmp	r0, #27
    cd0e:	dd00      	ble.n	cd12 <__aeabi_fsub+0x7a>
    cd10:	e090      	b.n	ce34 <__aeabi_fsub+0x19c>
    cd12:	0016      	movs	r6, r2
    cd14:	2120      	movs	r1, #32
    cd16:	40c6      	lsrs	r6, r0
    cd18:	1a08      	subs	r0, r1, r0
    cd1a:	4082      	lsls	r2, r0
    cd1c:	1e51      	subs	r1, r2, #1
    cd1e:	418a      	sbcs	r2, r1
    cd20:	4332      	orrs	r2, r6
    cd22:	1a9b      	subs	r3, r3, r2
    cd24:	015a      	lsls	r2, r3, #5
    cd26:	d515      	bpl.n	cd54 <__aeabi_fsub+0xbc>
    cd28:	019b      	lsls	r3, r3, #6
    cd2a:	099e      	lsrs	r6, r3, #6
    cd2c:	0030      	movs	r0, r6
    cd2e:	f7ff fadd 	bl	c2ec <__clzsi2>
    cd32:	3805      	subs	r0, #5
    cd34:	4086      	lsls	r6, r0
    cd36:	4284      	cmp	r4, r0
    cd38:	dc6c      	bgt.n	ce14 <__aeabi_fsub+0x17c>
    cd3a:	1b04      	subs	r4, r0, r4
    cd3c:	0033      	movs	r3, r6
    cd3e:	2020      	movs	r0, #32
    cd40:	3401      	adds	r4, #1
    cd42:	40e3      	lsrs	r3, r4
    cd44:	1b04      	subs	r4, r0, r4
    cd46:	40a6      	lsls	r6, r4
    cd48:	1e72      	subs	r2, r6, #1
    cd4a:	4196      	sbcs	r6, r2
    cd4c:	2400      	movs	r4, #0
    cd4e:	4333      	orrs	r3, r6
    cd50:	e7bd      	b.n	ccce <__aeabi_fsub+0x36>
    cd52:	000d      	movs	r5, r1
    cd54:	075a      	lsls	r2, r3, #29
    cd56:	d1bc      	bne.n	ccd2 <__aeabi_fsub+0x3a>
    cd58:	08df      	lsrs	r7, r3, #3
    cd5a:	2301      	movs	r3, #1
    cd5c:	401d      	ands	r5, r3
    cd5e:	2cff      	cmp	r4, #255	; 0xff
    cd60:	d133      	bne.n	cdca <__aeabi_fsub+0x132>
    cd62:	2f00      	cmp	r7, #0
    cd64:	d100      	bne.n	cd68 <__aeabi_fsub+0xd0>
    cd66:	e090      	b.n	ce8a <__aeabi_fsub+0x1f2>
    cd68:	2280      	movs	r2, #128	; 0x80
    cd6a:	03d2      	lsls	r2, r2, #15
    cd6c:	0013      	movs	r3, r2
    cd6e:	433b      	orrs	r3, r7
    cd70:	025b      	lsls	r3, r3, #9
    cd72:	0a5b      	lsrs	r3, r3, #9
    cd74:	24ff      	movs	r4, #255	; 0xff
    cd76:	e7bc      	b.n	ccf2 <__aeabi_fsub+0x5a>
    cd78:	2800      	cmp	r0, #0
    cd7a:	dd4f      	ble.n	ce1c <__aeabi_fsub+0x184>
    cd7c:	2e00      	cmp	r6, #0
    cd7e:	d02e      	beq.n	cdde <__aeabi_fsub+0x146>
    cd80:	2cff      	cmp	r4, #255	; 0xff
    cd82:	d0a4      	beq.n	ccce <__aeabi_fsub+0x36>
    cd84:	2580      	movs	r5, #128	; 0x80
    cd86:	04ed      	lsls	r5, r5, #19
    cd88:	432a      	orrs	r2, r5
    cd8a:	281b      	cmp	r0, #27
    cd8c:	dd00      	ble.n	cd90 <__aeabi_fsub+0xf8>
    cd8e:	e097      	b.n	cec0 <__aeabi_fsub+0x228>
    cd90:	0016      	movs	r6, r2
    cd92:	2520      	movs	r5, #32
    cd94:	40c6      	lsrs	r6, r0
    cd96:	1a28      	subs	r0, r5, r0
    cd98:	4082      	lsls	r2, r0
    cd9a:	1e50      	subs	r0, r2, #1
    cd9c:	4182      	sbcs	r2, r0
    cd9e:	4332      	orrs	r2, r6
    cda0:	189b      	adds	r3, r3, r2
    cda2:	015a      	lsls	r2, r3, #5
    cda4:	d5d5      	bpl.n	cd52 <__aeabi_fsub+0xba>
    cda6:	3401      	adds	r4, #1
    cda8:	2cff      	cmp	r4, #255	; 0xff
    cdaa:	d06d      	beq.n	ce88 <__aeabi_fsub+0x1f0>
    cdac:	2201      	movs	r2, #1
    cdae:	487b      	ldr	r0, [pc, #492]	; (cf9c <__aeabi_fsub+0x304>)
    cdb0:	401a      	ands	r2, r3
    cdb2:	085b      	lsrs	r3, r3, #1
    cdb4:	4003      	ands	r3, r0
    cdb6:	4313      	orrs	r3, r2
    cdb8:	000d      	movs	r5, r1
    cdba:	e788      	b.n	ccce <__aeabi_fsub+0x36>
    cdbc:	2a00      	cmp	r2, #0
    cdbe:	d000      	beq.n	cdc2 <__aeabi_fsub+0x12a>
    cdc0:	e77a      	b.n	ccb8 <__aeabi_fsub+0x20>
    cdc2:	e777      	b.n	ccb4 <__aeabi_fsub+0x1c>
    cdc4:	1e03      	subs	r3, r0, #0
    cdc6:	d1c5      	bne.n	cd54 <__aeabi_fsub+0xbc>
    cdc8:	2500      	movs	r5, #0
    cdca:	027b      	lsls	r3, r7, #9
    cdcc:	0a5b      	lsrs	r3, r3, #9
    cdce:	b2e4      	uxtb	r4, r4
    cdd0:	e78f      	b.n	ccf2 <__aeabi_fsub+0x5a>
    cdd2:	3801      	subs	r0, #1
    cdd4:	2800      	cmp	r0, #0
    cdd6:	d0a4      	beq.n	cd22 <__aeabi_fsub+0x8a>
    cdd8:	2cff      	cmp	r4, #255	; 0xff
    cdda:	d197      	bne.n	cd0c <__aeabi_fsub+0x74>
    cddc:	e777      	b.n	ccce <__aeabi_fsub+0x36>
    cdde:	2a00      	cmp	r2, #0
    cde0:	d100      	bne.n	cde4 <__aeabi_fsub+0x14c>
    cde2:	e774      	b.n	ccce <__aeabi_fsub+0x36>
    cde4:	3801      	subs	r0, #1
    cde6:	2800      	cmp	r0, #0
    cde8:	d0da      	beq.n	cda0 <__aeabi_fsub+0x108>
    cdea:	2cff      	cmp	r4, #255	; 0xff
    cdec:	d1cd      	bne.n	cd8a <__aeabi_fsub+0xf2>
    cdee:	e76e      	b.n	ccce <__aeabi_fsub+0x36>
    cdf0:	2800      	cmp	r0, #0
    cdf2:	d121      	bne.n	ce38 <__aeabi_fsub+0x1a0>
    cdf4:	1c60      	adds	r0, r4, #1
    cdf6:	b2c0      	uxtb	r0, r0
    cdf8:	2801      	cmp	r0, #1
    cdfa:	dd58      	ble.n	ceae <__aeabi_fsub+0x216>
    cdfc:	2780      	movs	r7, #128	; 0x80
    cdfe:	1a9e      	subs	r6, r3, r2
    ce00:	04ff      	lsls	r7, r7, #19
    ce02:	4037      	ands	r7, r6
    ce04:	d02f      	beq.n	ce66 <__aeabi_fsub+0x1ce>
    ce06:	1ad6      	subs	r6, r2, r3
    ce08:	000d      	movs	r5, r1
    ce0a:	e78f      	b.n	cd2c <__aeabi_fsub+0x94>
    ce0c:	2301      	movs	r3, #1
    ce0e:	401d      	ands	r5, r3
    ce10:	2300      	movs	r3, #0
    ce12:	e76e      	b.n	ccf2 <__aeabi_fsub+0x5a>
    ce14:	4b62      	ldr	r3, [pc, #392]	; (cfa0 <__aeabi_fsub+0x308>)
    ce16:	1a24      	subs	r4, r4, r0
    ce18:	4033      	ands	r3, r6
    ce1a:	e758      	b.n	ccce <__aeabi_fsub+0x36>
    ce1c:	2800      	cmp	r0, #0
    ce1e:	d151      	bne.n	cec4 <__aeabi_fsub+0x22c>
    ce20:	1c60      	adds	r0, r4, #1
    ce22:	b2c6      	uxtb	r6, r0
    ce24:	2e01      	cmp	r6, #1
    ce26:	dd33      	ble.n	ce90 <__aeabi_fsub+0x1f8>
    ce28:	28ff      	cmp	r0, #255	; 0xff
    ce2a:	d02d      	beq.n	ce88 <__aeabi_fsub+0x1f0>
    ce2c:	189b      	adds	r3, r3, r2
    ce2e:	085b      	lsrs	r3, r3, #1
    ce30:	0004      	movs	r4, r0
    ce32:	e74c      	b.n	ccce <__aeabi_fsub+0x36>
    ce34:	2201      	movs	r2, #1
    ce36:	e774      	b.n	cd22 <__aeabi_fsub+0x8a>
    ce38:	2c00      	cmp	r4, #0
    ce3a:	d01a      	beq.n	ce72 <__aeabi_fsub+0x1da>
    ce3c:	2eff      	cmp	r6, #255	; 0xff
    ce3e:	d01f      	beq.n	ce80 <__aeabi_fsub+0x1e8>
    ce40:	2480      	movs	r4, #128	; 0x80
    ce42:	04e4      	lsls	r4, r4, #19
    ce44:	4240      	negs	r0, r0
    ce46:	4323      	orrs	r3, r4
    ce48:	281b      	cmp	r0, #27
    ce4a:	dd00      	ble.n	ce4e <__aeabi_fsub+0x1b6>
    ce4c:	e096      	b.n	cf7c <__aeabi_fsub+0x2e4>
    ce4e:	001d      	movs	r5, r3
    ce50:	2420      	movs	r4, #32
    ce52:	40c5      	lsrs	r5, r0
    ce54:	1a20      	subs	r0, r4, r0
    ce56:	4083      	lsls	r3, r0
    ce58:	1e58      	subs	r0, r3, #1
    ce5a:	4183      	sbcs	r3, r0
    ce5c:	432b      	orrs	r3, r5
    ce5e:	1ad3      	subs	r3, r2, r3
    ce60:	0034      	movs	r4, r6
    ce62:	000d      	movs	r5, r1
    ce64:	e75e      	b.n	cd24 <__aeabi_fsub+0x8c>
    ce66:	2e00      	cmp	r6, #0
    ce68:	d000      	beq.n	ce6c <__aeabi_fsub+0x1d4>
    ce6a:	e75f      	b.n	cd2c <__aeabi_fsub+0x94>
    ce6c:	2500      	movs	r5, #0
    ce6e:	2400      	movs	r4, #0
    ce70:	e7ab      	b.n	cdca <__aeabi_fsub+0x132>
    ce72:	2b00      	cmp	r3, #0
    ce74:	d044      	beq.n	cf00 <__aeabi_fsub+0x268>
    ce76:	43c0      	mvns	r0, r0
    ce78:	2800      	cmp	r0, #0
    ce7a:	d0f0      	beq.n	ce5e <__aeabi_fsub+0x1c6>
    ce7c:	2eff      	cmp	r6, #255	; 0xff
    ce7e:	d1e3      	bne.n	ce48 <__aeabi_fsub+0x1b0>
    ce80:	0013      	movs	r3, r2
    ce82:	24ff      	movs	r4, #255	; 0xff
    ce84:	000d      	movs	r5, r1
    ce86:	e722      	b.n	ccce <__aeabi_fsub+0x36>
    ce88:	000d      	movs	r5, r1
    ce8a:	24ff      	movs	r4, #255	; 0xff
    ce8c:	2300      	movs	r3, #0
    ce8e:	e730      	b.n	ccf2 <__aeabi_fsub+0x5a>
    ce90:	2c00      	cmp	r4, #0
    ce92:	d15d      	bne.n	cf50 <__aeabi_fsub+0x2b8>
    ce94:	2b00      	cmp	r3, #0
    ce96:	d07d      	beq.n	cf94 <__aeabi_fsub+0x2fc>
    ce98:	2a00      	cmp	r2, #0
    ce9a:	d100      	bne.n	ce9e <__aeabi_fsub+0x206>
    ce9c:	e717      	b.n	ccce <__aeabi_fsub+0x36>
    ce9e:	189b      	adds	r3, r3, r2
    cea0:	015a      	lsls	r2, r3, #5
    cea2:	d400      	bmi.n	cea6 <__aeabi_fsub+0x20e>
    cea4:	e756      	b.n	cd54 <__aeabi_fsub+0xbc>
    cea6:	4a3e      	ldr	r2, [pc, #248]	; (cfa0 <__aeabi_fsub+0x308>)
    cea8:	0004      	movs	r4, r0
    ceaa:	4013      	ands	r3, r2
    ceac:	e70f      	b.n	ccce <__aeabi_fsub+0x36>
    ceae:	2c00      	cmp	r4, #0
    ceb0:	d11e      	bne.n	cef0 <__aeabi_fsub+0x258>
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	d12f      	bne.n	cf16 <__aeabi_fsub+0x27e>
    ceb6:	2a00      	cmp	r2, #0
    ceb8:	d065      	beq.n	cf86 <__aeabi_fsub+0x2ee>
    ceba:	0013      	movs	r3, r2
    cebc:	000d      	movs	r5, r1
    cebe:	e706      	b.n	ccce <__aeabi_fsub+0x36>
    cec0:	2201      	movs	r2, #1
    cec2:	e76d      	b.n	cda0 <__aeabi_fsub+0x108>
    cec4:	2c00      	cmp	r4, #0
    cec6:	d11f      	bne.n	cf08 <__aeabi_fsub+0x270>
    cec8:	2b00      	cmp	r3, #0
    ceca:	d059      	beq.n	cf80 <__aeabi_fsub+0x2e8>
    cecc:	43c0      	mvns	r0, r0
    cece:	2800      	cmp	r0, #0
    ced0:	d00b      	beq.n	ceea <__aeabi_fsub+0x252>
    ced2:	2eff      	cmp	r6, #255	; 0xff
    ced4:	d04f      	beq.n	cf76 <__aeabi_fsub+0x2de>
    ced6:	281b      	cmp	r0, #27
    ced8:	dc5e      	bgt.n	cf98 <__aeabi_fsub+0x300>
    ceda:	001d      	movs	r5, r3
    cedc:	2420      	movs	r4, #32
    cede:	40c5      	lsrs	r5, r0
    cee0:	1a20      	subs	r0, r4, r0
    cee2:	4083      	lsls	r3, r0
    cee4:	1e58      	subs	r0, r3, #1
    cee6:	4183      	sbcs	r3, r0
    cee8:	432b      	orrs	r3, r5
    ceea:	189b      	adds	r3, r3, r2
    ceec:	0034      	movs	r4, r6
    ceee:	e758      	b.n	cda2 <__aeabi_fsub+0x10a>
    cef0:	2b00      	cmp	r3, #0
    cef2:	d11c      	bne.n	cf2e <__aeabi_fsub+0x296>
    cef4:	2a00      	cmp	r2, #0
    cef6:	d049      	beq.n	cf8c <__aeabi_fsub+0x2f4>
    cef8:	0013      	movs	r3, r2
    cefa:	000d      	movs	r5, r1
    cefc:	24ff      	movs	r4, #255	; 0xff
    cefe:	e6e6      	b.n	ccce <__aeabi_fsub+0x36>
    cf00:	0013      	movs	r3, r2
    cf02:	0034      	movs	r4, r6
    cf04:	000d      	movs	r5, r1
    cf06:	e6e2      	b.n	ccce <__aeabi_fsub+0x36>
    cf08:	2eff      	cmp	r6, #255	; 0xff
    cf0a:	d034      	beq.n	cf76 <__aeabi_fsub+0x2de>
    cf0c:	2480      	movs	r4, #128	; 0x80
    cf0e:	04e4      	lsls	r4, r4, #19
    cf10:	4240      	negs	r0, r0
    cf12:	4323      	orrs	r3, r4
    cf14:	e7df      	b.n	ced6 <__aeabi_fsub+0x23e>
    cf16:	2a00      	cmp	r2, #0
    cf18:	d100      	bne.n	cf1c <__aeabi_fsub+0x284>
    cf1a:	e6d8      	b.n	ccce <__aeabi_fsub+0x36>
    cf1c:	2780      	movs	r7, #128	; 0x80
    cf1e:	1a98      	subs	r0, r3, r2
    cf20:	04ff      	lsls	r7, r7, #19
    cf22:	4007      	ands	r7, r0
    cf24:	d100      	bne.n	cf28 <__aeabi_fsub+0x290>
    cf26:	e74d      	b.n	cdc4 <__aeabi_fsub+0x12c>
    cf28:	1ad3      	subs	r3, r2, r3
    cf2a:	000d      	movs	r5, r1
    cf2c:	e6cf      	b.n	ccce <__aeabi_fsub+0x36>
    cf2e:	24ff      	movs	r4, #255	; 0xff
    cf30:	2a00      	cmp	r2, #0
    cf32:	d100      	bne.n	cf36 <__aeabi_fsub+0x29e>
    cf34:	e6cb      	b.n	ccce <__aeabi_fsub+0x36>
    cf36:	2080      	movs	r0, #128	; 0x80
    cf38:	08db      	lsrs	r3, r3, #3
    cf3a:	03c0      	lsls	r0, r0, #15
    cf3c:	4203      	tst	r3, r0
    cf3e:	d004      	beq.n	cf4a <__aeabi_fsub+0x2b2>
    cf40:	08d2      	lsrs	r2, r2, #3
    cf42:	4202      	tst	r2, r0
    cf44:	d101      	bne.n	cf4a <__aeabi_fsub+0x2b2>
    cf46:	0013      	movs	r3, r2
    cf48:	000d      	movs	r5, r1
    cf4a:	00db      	lsls	r3, r3, #3
    cf4c:	24ff      	movs	r4, #255	; 0xff
    cf4e:	e6be      	b.n	ccce <__aeabi_fsub+0x36>
    cf50:	2b00      	cmp	r3, #0
    cf52:	d010      	beq.n	cf76 <__aeabi_fsub+0x2de>
    cf54:	24ff      	movs	r4, #255	; 0xff
    cf56:	2a00      	cmp	r2, #0
    cf58:	d100      	bne.n	cf5c <__aeabi_fsub+0x2c4>
    cf5a:	e6b8      	b.n	ccce <__aeabi_fsub+0x36>
    cf5c:	2080      	movs	r0, #128	; 0x80
    cf5e:	08db      	lsrs	r3, r3, #3
    cf60:	03c0      	lsls	r0, r0, #15
    cf62:	4203      	tst	r3, r0
    cf64:	d003      	beq.n	cf6e <__aeabi_fsub+0x2d6>
    cf66:	08d2      	lsrs	r2, r2, #3
    cf68:	4202      	tst	r2, r0
    cf6a:	d100      	bne.n	cf6e <__aeabi_fsub+0x2d6>
    cf6c:	0013      	movs	r3, r2
    cf6e:	00db      	lsls	r3, r3, #3
    cf70:	000d      	movs	r5, r1
    cf72:	24ff      	movs	r4, #255	; 0xff
    cf74:	e6ab      	b.n	ccce <__aeabi_fsub+0x36>
    cf76:	0013      	movs	r3, r2
    cf78:	24ff      	movs	r4, #255	; 0xff
    cf7a:	e6a8      	b.n	ccce <__aeabi_fsub+0x36>
    cf7c:	2301      	movs	r3, #1
    cf7e:	e76e      	b.n	ce5e <__aeabi_fsub+0x1c6>
    cf80:	0013      	movs	r3, r2
    cf82:	0034      	movs	r4, r6
    cf84:	e6a3      	b.n	ccce <__aeabi_fsub+0x36>
    cf86:	2700      	movs	r7, #0
    cf88:	2500      	movs	r5, #0
    cf8a:	e71e      	b.n	cdca <__aeabi_fsub+0x132>
    cf8c:	2780      	movs	r7, #128	; 0x80
    cf8e:	2500      	movs	r5, #0
    cf90:	03ff      	lsls	r7, r7, #15
    cf92:	e6e9      	b.n	cd68 <__aeabi_fsub+0xd0>
    cf94:	0013      	movs	r3, r2
    cf96:	e69a      	b.n	ccce <__aeabi_fsub+0x36>
    cf98:	2301      	movs	r3, #1
    cf9a:	e7a6      	b.n	ceea <__aeabi_fsub+0x252>
    cf9c:	7dffffff 	.word	0x7dffffff
    cfa0:	fbffffff 	.word	0xfbffffff

0000cfa4 <__aeabi_f2iz>:
    cfa4:	0243      	lsls	r3, r0, #9
    cfa6:	0a59      	lsrs	r1, r3, #9
    cfa8:	0043      	lsls	r3, r0, #1
    cfaa:	0fc2      	lsrs	r2, r0, #31
    cfac:	0e1b      	lsrs	r3, r3, #24
    cfae:	2000      	movs	r0, #0
    cfb0:	2b7e      	cmp	r3, #126	; 0x7e
    cfb2:	dd0e      	ble.n	cfd2 <__aeabi_f2iz+0x2e>
    cfb4:	2b9d      	cmp	r3, #157	; 0x9d
    cfb6:	dc0d      	bgt.n	cfd4 <__aeabi_f2iz+0x30>
    cfb8:	2080      	movs	r0, #128	; 0x80
    cfba:	0400      	lsls	r0, r0, #16
    cfbc:	4301      	orrs	r1, r0
    cfbe:	2b95      	cmp	r3, #149	; 0x95
    cfc0:	dc0b      	bgt.n	cfda <__aeabi_f2iz+0x36>
    cfc2:	2096      	movs	r0, #150	; 0x96
    cfc4:	1ac3      	subs	r3, r0, r3
    cfc6:	40d9      	lsrs	r1, r3
    cfc8:	000b      	movs	r3, r1
    cfca:	4258      	negs	r0, r3
    cfcc:	2a00      	cmp	r2, #0
    cfce:	d100      	bne.n	cfd2 <__aeabi_f2iz+0x2e>
    cfd0:	0018      	movs	r0, r3
    cfd2:	4770      	bx	lr
    cfd4:	4b03      	ldr	r3, [pc, #12]	; (cfe4 <__aeabi_f2iz+0x40>)
    cfd6:	18d0      	adds	r0, r2, r3
    cfd8:	e7fb      	b.n	cfd2 <__aeabi_f2iz+0x2e>
    cfda:	3b96      	subs	r3, #150	; 0x96
    cfdc:	4099      	lsls	r1, r3
    cfde:	000b      	movs	r3, r1
    cfe0:	e7f3      	b.n	cfca <__aeabi_f2iz+0x26>
    cfe2:	46c0      	nop			; (mov r8, r8)
    cfe4:	7fffffff 	.word	0x7fffffff

0000cfe8 <__aeabi_ui2f>:
    cfe8:	b570      	push	{r4, r5, r6, lr}
    cfea:	1e04      	subs	r4, r0, #0
    cfec:	d028      	beq.n	d040 <__aeabi_ui2f+0x58>
    cfee:	f7ff f97d 	bl	c2ec <__clzsi2>
    cff2:	239e      	movs	r3, #158	; 0x9e
    cff4:	1a1b      	subs	r3, r3, r0
    cff6:	2b96      	cmp	r3, #150	; 0x96
    cff8:	dc0a      	bgt.n	d010 <__aeabi_ui2f+0x28>
    cffa:	2296      	movs	r2, #150	; 0x96
    cffc:	1ad2      	subs	r2, r2, r3
    cffe:	4094      	lsls	r4, r2
    d000:	0262      	lsls	r2, r4, #9
    d002:	0a52      	lsrs	r2, r2, #9
    d004:	b2d8      	uxtb	r0, r3
    d006:	0252      	lsls	r2, r2, #9
    d008:	0a52      	lsrs	r2, r2, #9
    d00a:	05c0      	lsls	r0, r0, #23
    d00c:	4310      	orrs	r0, r2
    d00e:	bd70      	pop	{r4, r5, r6, pc}
    d010:	2b99      	cmp	r3, #153	; 0x99
    d012:	dc18      	bgt.n	d046 <__aeabi_ui2f+0x5e>
    d014:	2299      	movs	r2, #153	; 0x99
    d016:	1ad2      	subs	r2, r2, r3
    d018:	4094      	lsls	r4, r2
    d01a:	4a11      	ldr	r2, [pc, #68]	; (d060 <__aeabi_ui2f+0x78>)
    d01c:	4022      	ands	r2, r4
    d01e:	0761      	lsls	r1, r4, #29
    d020:	d004      	beq.n	d02c <__aeabi_ui2f+0x44>
    d022:	210f      	movs	r1, #15
    d024:	400c      	ands	r4, r1
    d026:	2c04      	cmp	r4, #4
    d028:	d000      	beq.n	d02c <__aeabi_ui2f+0x44>
    d02a:	3204      	adds	r2, #4
    d02c:	0151      	lsls	r1, r2, #5
    d02e:	d503      	bpl.n	d038 <__aeabi_ui2f+0x50>
    d030:	4b0b      	ldr	r3, [pc, #44]	; (d060 <__aeabi_ui2f+0x78>)
    d032:	401a      	ands	r2, r3
    d034:	239f      	movs	r3, #159	; 0x9f
    d036:	1a1b      	subs	r3, r3, r0
    d038:	0192      	lsls	r2, r2, #6
    d03a:	0a52      	lsrs	r2, r2, #9
    d03c:	b2d8      	uxtb	r0, r3
    d03e:	e7e2      	b.n	d006 <__aeabi_ui2f+0x1e>
    d040:	2000      	movs	r0, #0
    d042:	2200      	movs	r2, #0
    d044:	e7df      	b.n	d006 <__aeabi_ui2f+0x1e>
    d046:	2205      	movs	r2, #5
    d048:	0025      	movs	r5, r4
    d04a:	1a12      	subs	r2, r2, r0
    d04c:	21b9      	movs	r1, #185	; 0xb9
    d04e:	40d5      	lsrs	r5, r2
    d050:	0022      	movs	r2, r4
    d052:	1ac9      	subs	r1, r1, r3
    d054:	408a      	lsls	r2, r1
    d056:	1e54      	subs	r4, r2, #1
    d058:	41a2      	sbcs	r2, r4
    d05a:	002c      	movs	r4, r5
    d05c:	4314      	orrs	r4, r2
    d05e:	e7dc      	b.n	d01a <__aeabi_ui2f+0x32>
    d060:	fbffffff 	.word	0xfbffffff

0000d064 <__aeabi_dadd>:
    d064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d066:	4656      	mov	r6, sl
    d068:	465f      	mov	r7, fp
    d06a:	464d      	mov	r5, r9
    d06c:	4644      	mov	r4, r8
    d06e:	b4f0      	push	{r4, r5, r6, r7}
    d070:	000f      	movs	r7, r1
    d072:	0ffd      	lsrs	r5, r7, #31
    d074:	46aa      	mov	sl, r5
    d076:	0309      	lsls	r1, r1, #12
    d078:	007c      	lsls	r4, r7, #1
    d07a:	002e      	movs	r6, r5
    d07c:	005f      	lsls	r7, r3, #1
    d07e:	0f45      	lsrs	r5, r0, #29
    d080:	0a49      	lsrs	r1, r1, #9
    d082:	0d7f      	lsrs	r7, r7, #21
    d084:	4329      	orrs	r1, r5
    d086:	00c5      	lsls	r5, r0, #3
    d088:	0318      	lsls	r0, r3, #12
    d08a:	46bc      	mov	ip, r7
    d08c:	0a40      	lsrs	r0, r0, #9
    d08e:	0f57      	lsrs	r7, r2, #29
    d090:	0d64      	lsrs	r4, r4, #21
    d092:	0fdb      	lsrs	r3, r3, #31
    d094:	4338      	orrs	r0, r7
    d096:	00d2      	lsls	r2, r2, #3
    d098:	459a      	cmp	sl, r3
    d09a:	d100      	bne.n	d09e <__aeabi_dadd+0x3a>
    d09c:	e0aa      	b.n	d1f4 <__aeabi_dadd+0x190>
    d09e:	4666      	mov	r6, ip
    d0a0:	1ba6      	subs	r6, r4, r6
    d0a2:	2e00      	cmp	r6, #0
    d0a4:	dc00      	bgt.n	d0a8 <__aeabi_dadd+0x44>
    d0a6:	e0ff      	b.n	d2a8 <__aeabi_dadd+0x244>
    d0a8:	4663      	mov	r3, ip
    d0aa:	2b00      	cmp	r3, #0
    d0ac:	d139      	bne.n	d122 <__aeabi_dadd+0xbe>
    d0ae:	0003      	movs	r3, r0
    d0b0:	4313      	orrs	r3, r2
    d0b2:	d000      	beq.n	d0b6 <__aeabi_dadd+0x52>
    d0b4:	e0d9      	b.n	d26a <__aeabi_dadd+0x206>
    d0b6:	076b      	lsls	r3, r5, #29
    d0b8:	d009      	beq.n	d0ce <__aeabi_dadd+0x6a>
    d0ba:	230f      	movs	r3, #15
    d0bc:	402b      	ands	r3, r5
    d0be:	2b04      	cmp	r3, #4
    d0c0:	d005      	beq.n	d0ce <__aeabi_dadd+0x6a>
    d0c2:	1d2b      	adds	r3, r5, #4
    d0c4:	42ab      	cmp	r3, r5
    d0c6:	41ad      	sbcs	r5, r5
    d0c8:	426d      	negs	r5, r5
    d0ca:	1949      	adds	r1, r1, r5
    d0cc:	001d      	movs	r5, r3
    d0ce:	020b      	lsls	r3, r1, #8
    d0d0:	d400      	bmi.n	d0d4 <__aeabi_dadd+0x70>
    d0d2:	e082      	b.n	d1da <__aeabi_dadd+0x176>
    d0d4:	4bca      	ldr	r3, [pc, #808]	; (d400 <__aeabi_dadd+0x39c>)
    d0d6:	3401      	adds	r4, #1
    d0d8:	429c      	cmp	r4, r3
    d0da:	d100      	bne.n	d0de <__aeabi_dadd+0x7a>
    d0dc:	e0fe      	b.n	d2dc <__aeabi_dadd+0x278>
    d0de:	000a      	movs	r2, r1
    d0e0:	4656      	mov	r6, sl
    d0e2:	4bc8      	ldr	r3, [pc, #800]	; (d404 <__aeabi_dadd+0x3a0>)
    d0e4:	08ed      	lsrs	r5, r5, #3
    d0e6:	401a      	ands	r2, r3
    d0e8:	0750      	lsls	r0, r2, #29
    d0ea:	0564      	lsls	r4, r4, #21
    d0ec:	0252      	lsls	r2, r2, #9
    d0ee:	4305      	orrs	r5, r0
    d0f0:	0b12      	lsrs	r2, r2, #12
    d0f2:	0d64      	lsrs	r4, r4, #21
    d0f4:	2100      	movs	r1, #0
    d0f6:	0312      	lsls	r2, r2, #12
    d0f8:	0d0b      	lsrs	r3, r1, #20
    d0fa:	051b      	lsls	r3, r3, #20
    d0fc:	0564      	lsls	r4, r4, #21
    d0fe:	0b12      	lsrs	r2, r2, #12
    d100:	431a      	orrs	r2, r3
    d102:	0863      	lsrs	r3, r4, #1
    d104:	4cc0      	ldr	r4, [pc, #768]	; (d408 <__aeabi_dadd+0x3a4>)
    d106:	07f6      	lsls	r6, r6, #31
    d108:	4014      	ands	r4, r2
    d10a:	431c      	orrs	r4, r3
    d10c:	0064      	lsls	r4, r4, #1
    d10e:	0864      	lsrs	r4, r4, #1
    d110:	4334      	orrs	r4, r6
    d112:	0028      	movs	r0, r5
    d114:	0021      	movs	r1, r4
    d116:	bc3c      	pop	{r2, r3, r4, r5}
    d118:	4690      	mov	r8, r2
    d11a:	4699      	mov	r9, r3
    d11c:	46a2      	mov	sl, r4
    d11e:	46ab      	mov	fp, r5
    d120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d122:	4bb7      	ldr	r3, [pc, #732]	; (d400 <__aeabi_dadd+0x39c>)
    d124:	429c      	cmp	r4, r3
    d126:	d0c6      	beq.n	d0b6 <__aeabi_dadd+0x52>
    d128:	2380      	movs	r3, #128	; 0x80
    d12a:	041b      	lsls	r3, r3, #16
    d12c:	4318      	orrs	r0, r3
    d12e:	2e38      	cmp	r6, #56	; 0x38
    d130:	dd00      	ble.n	d134 <__aeabi_dadd+0xd0>
    d132:	e0eb      	b.n	d30c <__aeabi_dadd+0x2a8>
    d134:	2e1f      	cmp	r6, #31
    d136:	dd00      	ble.n	d13a <__aeabi_dadd+0xd6>
    d138:	e11e      	b.n	d378 <__aeabi_dadd+0x314>
    d13a:	2320      	movs	r3, #32
    d13c:	1b9b      	subs	r3, r3, r6
    d13e:	469c      	mov	ip, r3
    d140:	0003      	movs	r3, r0
    d142:	4667      	mov	r7, ip
    d144:	40bb      	lsls	r3, r7
    d146:	4698      	mov	r8, r3
    d148:	0013      	movs	r3, r2
    d14a:	4647      	mov	r7, r8
    d14c:	40f3      	lsrs	r3, r6
    d14e:	433b      	orrs	r3, r7
    d150:	4667      	mov	r7, ip
    d152:	40ba      	lsls	r2, r7
    d154:	1e57      	subs	r7, r2, #1
    d156:	41ba      	sbcs	r2, r7
    d158:	4313      	orrs	r3, r2
    d15a:	0002      	movs	r2, r0
    d15c:	40f2      	lsrs	r2, r6
    d15e:	1aeb      	subs	r3, r5, r3
    d160:	429d      	cmp	r5, r3
    d162:	41b6      	sbcs	r6, r6
    d164:	001d      	movs	r5, r3
    d166:	1a8a      	subs	r2, r1, r2
    d168:	4276      	negs	r6, r6
    d16a:	1b91      	subs	r1, r2, r6
    d16c:	020b      	lsls	r3, r1, #8
    d16e:	d531      	bpl.n	d1d4 <__aeabi_dadd+0x170>
    d170:	024a      	lsls	r2, r1, #9
    d172:	0a56      	lsrs	r6, r2, #9
    d174:	2e00      	cmp	r6, #0
    d176:	d100      	bne.n	d17a <__aeabi_dadd+0x116>
    d178:	e0b4      	b.n	d2e4 <__aeabi_dadd+0x280>
    d17a:	0030      	movs	r0, r6
    d17c:	f7ff f8b6 	bl	c2ec <__clzsi2>
    d180:	0003      	movs	r3, r0
    d182:	3b08      	subs	r3, #8
    d184:	2b1f      	cmp	r3, #31
    d186:	dd00      	ble.n	d18a <__aeabi_dadd+0x126>
    d188:	e0b5      	b.n	d2f6 <__aeabi_dadd+0x292>
    d18a:	2220      	movs	r2, #32
    d18c:	0029      	movs	r1, r5
    d18e:	1ad2      	subs	r2, r2, r3
    d190:	40d1      	lsrs	r1, r2
    d192:	409e      	lsls	r6, r3
    d194:	000a      	movs	r2, r1
    d196:	409d      	lsls	r5, r3
    d198:	4332      	orrs	r2, r6
    d19a:	429c      	cmp	r4, r3
    d19c:	dd00      	ble.n	d1a0 <__aeabi_dadd+0x13c>
    d19e:	e0b1      	b.n	d304 <__aeabi_dadd+0x2a0>
    d1a0:	1b1c      	subs	r4, r3, r4
    d1a2:	1c63      	adds	r3, r4, #1
    d1a4:	2b1f      	cmp	r3, #31
    d1a6:	dd00      	ble.n	d1aa <__aeabi_dadd+0x146>
    d1a8:	e0d5      	b.n	d356 <__aeabi_dadd+0x2f2>
    d1aa:	2120      	movs	r1, #32
    d1ac:	0014      	movs	r4, r2
    d1ae:	0028      	movs	r0, r5
    d1b0:	1ac9      	subs	r1, r1, r3
    d1b2:	408c      	lsls	r4, r1
    d1b4:	40d8      	lsrs	r0, r3
    d1b6:	408d      	lsls	r5, r1
    d1b8:	4304      	orrs	r4, r0
    d1ba:	40da      	lsrs	r2, r3
    d1bc:	1e68      	subs	r0, r5, #1
    d1be:	4185      	sbcs	r5, r0
    d1c0:	0011      	movs	r1, r2
    d1c2:	4325      	orrs	r5, r4
    d1c4:	2400      	movs	r4, #0
    d1c6:	e776      	b.n	d0b6 <__aeabi_dadd+0x52>
    d1c8:	4641      	mov	r1, r8
    d1ca:	4331      	orrs	r1, r6
    d1cc:	d100      	bne.n	d1d0 <__aeabi_dadd+0x16c>
    d1ce:	e234      	b.n	d63a <__aeabi_dadd+0x5d6>
    d1d0:	0031      	movs	r1, r6
    d1d2:	4645      	mov	r5, r8
    d1d4:	076b      	lsls	r3, r5, #29
    d1d6:	d000      	beq.n	d1da <__aeabi_dadd+0x176>
    d1d8:	e76f      	b.n	d0ba <__aeabi_dadd+0x56>
    d1da:	4656      	mov	r6, sl
    d1dc:	0748      	lsls	r0, r1, #29
    d1de:	08ed      	lsrs	r5, r5, #3
    d1e0:	08c9      	lsrs	r1, r1, #3
    d1e2:	4305      	orrs	r5, r0
    d1e4:	4b86      	ldr	r3, [pc, #536]	; (d400 <__aeabi_dadd+0x39c>)
    d1e6:	429c      	cmp	r4, r3
    d1e8:	d035      	beq.n	d256 <__aeabi_dadd+0x1f2>
    d1ea:	030a      	lsls	r2, r1, #12
    d1ec:	0564      	lsls	r4, r4, #21
    d1ee:	0b12      	lsrs	r2, r2, #12
    d1f0:	0d64      	lsrs	r4, r4, #21
    d1f2:	e77f      	b.n	d0f4 <__aeabi_dadd+0x90>
    d1f4:	4663      	mov	r3, ip
    d1f6:	1ae3      	subs	r3, r4, r3
    d1f8:	469b      	mov	fp, r3
    d1fa:	2b00      	cmp	r3, #0
    d1fc:	dc00      	bgt.n	d200 <__aeabi_dadd+0x19c>
    d1fe:	e08b      	b.n	d318 <__aeabi_dadd+0x2b4>
    d200:	4667      	mov	r7, ip
    d202:	2f00      	cmp	r7, #0
    d204:	d03c      	beq.n	d280 <__aeabi_dadd+0x21c>
    d206:	4f7e      	ldr	r7, [pc, #504]	; (d400 <__aeabi_dadd+0x39c>)
    d208:	42bc      	cmp	r4, r7
    d20a:	d100      	bne.n	d20e <__aeabi_dadd+0x1aa>
    d20c:	e753      	b.n	d0b6 <__aeabi_dadd+0x52>
    d20e:	2780      	movs	r7, #128	; 0x80
    d210:	043f      	lsls	r7, r7, #16
    d212:	4338      	orrs	r0, r7
    d214:	465b      	mov	r3, fp
    d216:	2b38      	cmp	r3, #56	; 0x38
    d218:	dc00      	bgt.n	d21c <__aeabi_dadd+0x1b8>
    d21a:	e0f7      	b.n	d40c <__aeabi_dadd+0x3a8>
    d21c:	4302      	orrs	r2, r0
    d21e:	1e50      	subs	r0, r2, #1
    d220:	4182      	sbcs	r2, r0
    d222:	2000      	movs	r0, #0
    d224:	b2d2      	uxtb	r2, r2
    d226:	1953      	adds	r3, r2, r5
    d228:	1842      	adds	r2, r0, r1
    d22a:	42ab      	cmp	r3, r5
    d22c:	4189      	sbcs	r1, r1
    d22e:	001d      	movs	r5, r3
    d230:	4249      	negs	r1, r1
    d232:	1889      	adds	r1, r1, r2
    d234:	020b      	lsls	r3, r1, #8
    d236:	d5cd      	bpl.n	d1d4 <__aeabi_dadd+0x170>
    d238:	4b71      	ldr	r3, [pc, #452]	; (d400 <__aeabi_dadd+0x39c>)
    d23a:	3401      	adds	r4, #1
    d23c:	429c      	cmp	r4, r3
    d23e:	d100      	bne.n	d242 <__aeabi_dadd+0x1de>
    d240:	e13d      	b.n	d4be <__aeabi_dadd+0x45a>
    d242:	2001      	movs	r0, #1
    d244:	4a6f      	ldr	r2, [pc, #444]	; (d404 <__aeabi_dadd+0x3a0>)
    d246:	086b      	lsrs	r3, r5, #1
    d248:	400a      	ands	r2, r1
    d24a:	4028      	ands	r0, r5
    d24c:	4318      	orrs	r0, r3
    d24e:	07d5      	lsls	r5, r2, #31
    d250:	4305      	orrs	r5, r0
    d252:	0851      	lsrs	r1, r2, #1
    d254:	e72f      	b.n	d0b6 <__aeabi_dadd+0x52>
    d256:	002b      	movs	r3, r5
    d258:	430b      	orrs	r3, r1
    d25a:	d100      	bne.n	d25e <__aeabi_dadd+0x1fa>
    d25c:	e1cb      	b.n	d5f6 <__aeabi_dadd+0x592>
    d25e:	2380      	movs	r3, #128	; 0x80
    d260:	031b      	lsls	r3, r3, #12
    d262:	430b      	orrs	r3, r1
    d264:	031a      	lsls	r2, r3, #12
    d266:	0b12      	lsrs	r2, r2, #12
    d268:	e744      	b.n	d0f4 <__aeabi_dadd+0x90>
    d26a:	3e01      	subs	r6, #1
    d26c:	2e00      	cmp	r6, #0
    d26e:	d16d      	bne.n	d34c <__aeabi_dadd+0x2e8>
    d270:	1aae      	subs	r6, r5, r2
    d272:	42b5      	cmp	r5, r6
    d274:	419b      	sbcs	r3, r3
    d276:	1a09      	subs	r1, r1, r0
    d278:	425b      	negs	r3, r3
    d27a:	1ac9      	subs	r1, r1, r3
    d27c:	0035      	movs	r5, r6
    d27e:	e775      	b.n	d16c <__aeabi_dadd+0x108>
    d280:	0007      	movs	r7, r0
    d282:	4317      	orrs	r7, r2
    d284:	d100      	bne.n	d288 <__aeabi_dadd+0x224>
    d286:	e716      	b.n	d0b6 <__aeabi_dadd+0x52>
    d288:	2301      	movs	r3, #1
    d28a:	425b      	negs	r3, r3
    d28c:	469c      	mov	ip, r3
    d28e:	44e3      	add	fp, ip
    d290:	465b      	mov	r3, fp
    d292:	2b00      	cmp	r3, #0
    d294:	d000      	beq.n	d298 <__aeabi_dadd+0x234>
    d296:	e0e0      	b.n	d45a <__aeabi_dadd+0x3f6>
    d298:	18aa      	adds	r2, r5, r2
    d29a:	42aa      	cmp	r2, r5
    d29c:	419b      	sbcs	r3, r3
    d29e:	1809      	adds	r1, r1, r0
    d2a0:	425b      	negs	r3, r3
    d2a2:	1859      	adds	r1, r3, r1
    d2a4:	0015      	movs	r5, r2
    d2a6:	e7c5      	b.n	d234 <__aeabi_dadd+0x1d0>
    d2a8:	2e00      	cmp	r6, #0
    d2aa:	d175      	bne.n	d398 <__aeabi_dadd+0x334>
    d2ac:	1c66      	adds	r6, r4, #1
    d2ae:	0576      	lsls	r6, r6, #21
    d2b0:	0d76      	lsrs	r6, r6, #21
    d2b2:	2e01      	cmp	r6, #1
    d2b4:	dc00      	bgt.n	d2b8 <__aeabi_dadd+0x254>
    d2b6:	e0f3      	b.n	d4a0 <__aeabi_dadd+0x43c>
    d2b8:	1aae      	subs	r6, r5, r2
    d2ba:	46b0      	mov	r8, r6
    d2bc:	4545      	cmp	r5, r8
    d2be:	41bf      	sbcs	r7, r7
    d2c0:	1a0e      	subs	r6, r1, r0
    d2c2:	427f      	negs	r7, r7
    d2c4:	1bf6      	subs	r6, r6, r7
    d2c6:	0237      	lsls	r7, r6, #8
    d2c8:	d400      	bmi.n	d2cc <__aeabi_dadd+0x268>
    d2ca:	e08f      	b.n	d3ec <__aeabi_dadd+0x388>
    d2cc:	1b55      	subs	r5, r2, r5
    d2ce:	42aa      	cmp	r2, r5
    d2d0:	41b6      	sbcs	r6, r6
    d2d2:	1a41      	subs	r1, r0, r1
    d2d4:	4276      	negs	r6, r6
    d2d6:	1b8e      	subs	r6, r1, r6
    d2d8:	469a      	mov	sl, r3
    d2da:	e74b      	b.n	d174 <__aeabi_dadd+0x110>
    d2dc:	4656      	mov	r6, sl
    d2de:	2200      	movs	r2, #0
    d2e0:	2500      	movs	r5, #0
    d2e2:	e707      	b.n	d0f4 <__aeabi_dadd+0x90>
    d2e4:	0028      	movs	r0, r5
    d2e6:	f7ff f801 	bl	c2ec <__clzsi2>
    d2ea:	3020      	adds	r0, #32
    d2ec:	0003      	movs	r3, r0
    d2ee:	3b08      	subs	r3, #8
    d2f0:	2b1f      	cmp	r3, #31
    d2f2:	dc00      	bgt.n	d2f6 <__aeabi_dadd+0x292>
    d2f4:	e749      	b.n	d18a <__aeabi_dadd+0x126>
    d2f6:	002a      	movs	r2, r5
    d2f8:	3828      	subs	r0, #40	; 0x28
    d2fa:	4082      	lsls	r2, r0
    d2fc:	2500      	movs	r5, #0
    d2fe:	429c      	cmp	r4, r3
    d300:	dc00      	bgt.n	d304 <__aeabi_dadd+0x2a0>
    d302:	e74d      	b.n	d1a0 <__aeabi_dadd+0x13c>
    d304:	493f      	ldr	r1, [pc, #252]	; (d404 <__aeabi_dadd+0x3a0>)
    d306:	1ae4      	subs	r4, r4, r3
    d308:	4011      	ands	r1, r2
    d30a:	e6d4      	b.n	d0b6 <__aeabi_dadd+0x52>
    d30c:	4302      	orrs	r2, r0
    d30e:	1e50      	subs	r0, r2, #1
    d310:	4182      	sbcs	r2, r0
    d312:	b2d3      	uxtb	r3, r2
    d314:	2200      	movs	r2, #0
    d316:	e722      	b.n	d15e <__aeabi_dadd+0xfa>
    d318:	2b00      	cmp	r3, #0
    d31a:	d000      	beq.n	d31e <__aeabi_dadd+0x2ba>
    d31c:	e0f3      	b.n	d506 <__aeabi_dadd+0x4a2>
    d31e:	1c63      	adds	r3, r4, #1
    d320:	469c      	mov	ip, r3
    d322:	055b      	lsls	r3, r3, #21
    d324:	0d5b      	lsrs	r3, r3, #21
    d326:	2b01      	cmp	r3, #1
    d328:	dc00      	bgt.n	d32c <__aeabi_dadd+0x2c8>
    d32a:	e09f      	b.n	d46c <__aeabi_dadd+0x408>
    d32c:	4b34      	ldr	r3, [pc, #208]	; (d400 <__aeabi_dadd+0x39c>)
    d32e:	459c      	cmp	ip, r3
    d330:	d100      	bne.n	d334 <__aeabi_dadd+0x2d0>
    d332:	e0c3      	b.n	d4bc <__aeabi_dadd+0x458>
    d334:	18aa      	adds	r2, r5, r2
    d336:	1809      	adds	r1, r1, r0
    d338:	42aa      	cmp	r2, r5
    d33a:	4180      	sbcs	r0, r0
    d33c:	4240      	negs	r0, r0
    d33e:	1841      	adds	r1, r0, r1
    d340:	07cd      	lsls	r5, r1, #31
    d342:	0852      	lsrs	r2, r2, #1
    d344:	4315      	orrs	r5, r2
    d346:	0849      	lsrs	r1, r1, #1
    d348:	4664      	mov	r4, ip
    d34a:	e6b4      	b.n	d0b6 <__aeabi_dadd+0x52>
    d34c:	4b2c      	ldr	r3, [pc, #176]	; (d400 <__aeabi_dadd+0x39c>)
    d34e:	429c      	cmp	r4, r3
    d350:	d000      	beq.n	d354 <__aeabi_dadd+0x2f0>
    d352:	e6ec      	b.n	d12e <__aeabi_dadd+0xca>
    d354:	e6af      	b.n	d0b6 <__aeabi_dadd+0x52>
    d356:	0011      	movs	r1, r2
    d358:	3c1f      	subs	r4, #31
    d35a:	40e1      	lsrs	r1, r4
    d35c:	000c      	movs	r4, r1
    d35e:	2b20      	cmp	r3, #32
    d360:	d100      	bne.n	d364 <__aeabi_dadd+0x300>
    d362:	e07f      	b.n	d464 <__aeabi_dadd+0x400>
    d364:	2140      	movs	r1, #64	; 0x40
    d366:	1acb      	subs	r3, r1, r3
    d368:	409a      	lsls	r2, r3
    d36a:	4315      	orrs	r5, r2
    d36c:	1e6a      	subs	r2, r5, #1
    d36e:	4195      	sbcs	r5, r2
    d370:	2100      	movs	r1, #0
    d372:	4325      	orrs	r5, r4
    d374:	2400      	movs	r4, #0
    d376:	e72d      	b.n	d1d4 <__aeabi_dadd+0x170>
    d378:	0033      	movs	r3, r6
    d37a:	0007      	movs	r7, r0
    d37c:	3b20      	subs	r3, #32
    d37e:	40df      	lsrs	r7, r3
    d380:	003b      	movs	r3, r7
    d382:	2e20      	cmp	r6, #32
    d384:	d070      	beq.n	d468 <__aeabi_dadd+0x404>
    d386:	2740      	movs	r7, #64	; 0x40
    d388:	1bbe      	subs	r6, r7, r6
    d38a:	40b0      	lsls	r0, r6
    d38c:	4302      	orrs	r2, r0
    d38e:	1e50      	subs	r0, r2, #1
    d390:	4182      	sbcs	r2, r0
    d392:	4313      	orrs	r3, r2
    d394:	2200      	movs	r2, #0
    d396:	e6e2      	b.n	d15e <__aeabi_dadd+0xfa>
    d398:	2c00      	cmp	r4, #0
    d39a:	d04f      	beq.n	d43c <__aeabi_dadd+0x3d8>
    d39c:	4c18      	ldr	r4, [pc, #96]	; (d400 <__aeabi_dadd+0x39c>)
    d39e:	45a4      	cmp	ip, r4
    d3a0:	d100      	bne.n	d3a4 <__aeabi_dadd+0x340>
    d3a2:	e0ab      	b.n	d4fc <__aeabi_dadd+0x498>
    d3a4:	2480      	movs	r4, #128	; 0x80
    d3a6:	0424      	lsls	r4, r4, #16
    d3a8:	4276      	negs	r6, r6
    d3aa:	4321      	orrs	r1, r4
    d3ac:	2e38      	cmp	r6, #56	; 0x38
    d3ae:	dd00      	ble.n	d3b2 <__aeabi_dadd+0x34e>
    d3b0:	e0df      	b.n	d572 <__aeabi_dadd+0x50e>
    d3b2:	2e1f      	cmp	r6, #31
    d3b4:	dd00      	ble.n	d3b8 <__aeabi_dadd+0x354>
    d3b6:	e143      	b.n	d640 <__aeabi_dadd+0x5dc>
    d3b8:	2720      	movs	r7, #32
    d3ba:	1bbc      	subs	r4, r7, r6
    d3bc:	46a1      	mov	r9, r4
    d3be:	000c      	movs	r4, r1
    d3c0:	464f      	mov	r7, r9
    d3c2:	40bc      	lsls	r4, r7
    d3c4:	46a0      	mov	r8, r4
    d3c6:	002c      	movs	r4, r5
    d3c8:	4647      	mov	r7, r8
    d3ca:	40f4      	lsrs	r4, r6
    d3cc:	433c      	orrs	r4, r7
    d3ce:	464f      	mov	r7, r9
    d3d0:	40bd      	lsls	r5, r7
    d3d2:	1e6f      	subs	r7, r5, #1
    d3d4:	41bd      	sbcs	r5, r7
    d3d6:	40f1      	lsrs	r1, r6
    d3d8:	432c      	orrs	r4, r5
    d3da:	1b15      	subs	r5, r2, r4
    d3dc:	42aa      	cmp	r2, r5
    d3de:	4192      	sbcs	r2, r2
    d3e0:	1a41      	subs	r1, r0, r1
    d3e2:	4252      	negs	r2, r2
    d3e4:	1a89      	subs	r1, r1, r2
    d3e6:	4664      	mov	r4, ip
    d3e8:	469a      	mov	sl, r3
    d3ea:	e6bf      	b.n	d16c <__aeabi_dadd+0x108>
    d3ec:	4641      	mov	r1, r8
    d3ee:	4645      	mov	r5, r8
    d3f0:	4331      	orrs	r1, r6
    d3f2:	d000      	beq.n	d3f6 <__aeabi_dadd+0x392>
    d3f4:	e6be      	b.n	d174 <__aeabi_dadd+0x110>
    d3f6:	2600      	movs	r6, #0
    d3f8:	2400      	movs	r4, #0
    d3fa:	2500      	movs	r5, #0
    d3fc:	e6f2      	b.n	d1e4 <__aeabi_dadd+0x180>
    d3fe:	46c0      	nop			; (mov r8, r8)
    d400:	000007ff 	.word	0x000007ff
    d404:	ff7fffff 	.word	0xff7fffff
    d408:	800fffff 	.word	0x800fffff
    d40c:	2b1f      	cmp	r3, #31
    d40e:	dc59      	bgt.n	d4c4 <__aeabi_dadd+0x460>
    d410:	2720      	movs	r7, #32
    d412:	1aff      	subs	r7, r7, r3
    d414:	46bc      	mov	ip, r7
    d416:	0007      	movs	r7, r0
    d418:	4663      	mov	r3, ip
    d41a:	409f      	lsls	r7, r3
    d41c:	465b      	mov	r3, fp
    d41e:	46b9      	mov	r9, r7
    d420:	0017      	movs	r7, r2
    d422:	40df      	lsrs	r7, r3
    d424:	46b8      	mov	r8, r7
    d426:	464f      	mov	r7, r9
    d428:	4643      	mov	r3, r8
    d42a:	431f      	orrs	r7, r3
    d42c:	4663      	mov	r3, ip
    d42e:	409a      	lsls	r2, r3
    d430:	1e53      	subs	r3, r2, #1
    d432:	419a      	sbcs	r2, r3
    d434:	465b      	mov	r3, fp
    d436:	433a      	orrs	r2, r7
    d438:	40d8      	lsrs	r0, r3
    d43a:	e6f4      	b.n	d226 <__aeabi_dadd+0x1c2>
    d43c:	000c      	movs	r4, r1
    d43e:	432c      	orrs	r4, r5
    d440:	d05c      	beq.n	d4fc <__aeabi_dadd+0x498>
    d442:	43f6      	mvns	r6, r6
    d444:	2e00      	cmp	r6, #0
    d446:	d155      	bne.n	d4f4 <__aeabi_dadd+0x490>
    d448:	1b55      	subs	r5, r2, r5
    d44a:	42aa      	cmp	r2, r5
    d44c:	41a4      	sbcs	r4, r4
    d44e:	1a41      	subs	r1, r0, r1
    d450:	4264      	negs	r4, r4
    d452:	1b09      	subs	r1, r1, r4
    d454:	469a      	mov	sl, r3
    d456:	4664      	mov	r4, ip
    d458:	e688      	b.n	d16c <__aeabi_dadd+0x108>
    d45a:	4f96      	ldr	r7, [pc, #600]	; (d6b4 <__aeabi_dadd+0x650>)
    d45c:	42bc      	cmp	r4, r7
    d45e:	d000      	beq.n	d462 <__aeabi_dadd+0x3fe>
    d460:	e6d8      	b.n	d214 <__aeabi_dadd+0x1b0>
    d462:	e628      	b.n	d0b6 <__aeabi_dadd+0x52>
    d464:	2200      	movs	r2, #0
    d466:	e780      	b.n	d36a <__aeabi_dadd+0x306>
    d468:	2000      	movs	r0, #0
    d46a:	e78f      	b.n	d38c <__aeabi_dadd+0x328>
    d46c:	000b      	movs	r3, r1
    d46e:	432b      	orrs	r3, r5
    d470:	2c00      	cmp	r4, #0
    d472:	d000      	beq.n	d476 <__aeabi_dadd+0x412>
    d474:	e0c2      	b.n	d5fc <__aeabi_dadd+0x598>
    d476:	2b00      	cmp	r3, #0
    d478:	d100      	bne.n	d47c <__aeabi_dadd+0x418>
    d47a:	e101      	b.n	d680 <__aeabi_dadd+0x61c>
    d47c:	0003      	movs	r3, r0
    d47e:	4313      	orrs	r3, r2
    d480:	d100      	bne.n	d484 <__aeabi_dadd+0x420>
    d482:	e618      	b.n	d0b6 <__aeabi_dadd+0x52>
    d484:	18ab      	adds	r3, r5, r2
    d486:	42ab      	cmp	r3, r5
    d488:	41b6      	sbcs	r6, r6
    d48a:	1809      	adds	r1, r1, r0
    d48c:	4276      	negs	r6, r6
    d48e:	1871      	adds	r1, r6, r1
    d490:	020a      	lsls	r2, r1, #8
    d492:	d400      	bmi.n	d496 <__aeabi_dadd+0x432>
    d494:	e109      	b.n	d6aa <__aeabi_dadd+0x646>
    d496:	4a88      	ldr	r2, [pc, #544]	; (d6b8 <__aeabi_dadd+0x654>)
    d498:	001d      	movs	r5, r3
    d49a:	4011      	ands	r1, r2
    d49c:	4664      	mov	r4, ip
    d49e:	e60a      	b.n	d0b6 <__aeabi_dadd+0x52>
    d4a0:	2c00      	cmp	r4, #0
    d4a2:	d15b      	bne.n	d55c <__aeabi_dadd+0x4f8>
    d4a4:	000e      	movs	r6, r1
    d4a6:	432e      	orrs	r6, r5
    d4a8:	d000      	beq.n	d4ac <__aeabi_dadd+0x448>
    d4aa:	e08a      	b.n	d5c2 <__aeabi_dadd+0x55e>
    d4ac:	0001      	movs	r1, r0
    d4ae:	4311      	orrs	r1, r2
    d4b0:	d100      	bne.n	d4b4 <__aeabi_dadd+0x450>
    d4b2:	e0c2      	b.n	d63a <__aeabi_dadd+0x5d6>
    d4b4:	0001      	movs	r1, r0
    d4b6:	0015      	movs	r5, r2
    d4b8:	469a      	mov	sl, r3
    d4ba:	e5fc      	b.n	d0b6 <__aeabi_dadd+0x52>
    d4bc:	4664      	mov	r4, ip
    d4be:	2100      	movs	r1, #0
    d4c0:	2500      	movs	r5, #0
    d4c2:	e68f      	b.n	d1e4 <__aeabi_dadd+0x180>
    d4c4:	2320      	movs	r3, #32
    d4c6:	425b      	negs	r3, r3
    d4c8:	469c      	mov	ip, r3
    d4ca:	44dc      	add	ip, fp
    d4cc:	4663      	mov	r3, ip
    d4ce:	0007      	movs	r7, r0
    d4d0:	40df      	lsrs	r7, r3
    d4d2:	465b      	mov	r3, fp
    d4d4:	46bc      	mov	ip, r7
    d4d6:	2b20      	cmp	r3, #32
    d4d8:	d100      	bne.n	d4dc <__aeabi_dadd+0x478>
    d4da:	e0ac      	b.n	d636 <__aeabi_dadd+0x5d2>
    d4dc:	2340      	movs	r3, #64	; 0x40
    d4de:	465f      	mov	r7, fp
    d4e0:	1bdb      	subs	r3, r3, r7
    d4e2:	4098      	lsls	r0, r3
    d4e4:	4302      	orrs	r2, r0
    d4e6:	1e50      	subs	r0, r2, #1
    d4e8:	4182      	sbcs	r2, r0
    d4ea:	4663      	mov	r3, ip
    d4ec:	4313      	orrs	r3, r2
    d4ee:	001a      	movs	r2, r3
    d4f0:	2000      	movs	r0, #0
    d4f2:	e698      	b.n	d226 <__aeabi_dadd+0x1c2>
    d4f4:	4c6f      	ldr	r4, [pc, #444]	; (d6b4 <__aeabi_dadd+0x650>)
    d4f6:	45a4      	cmp	ip, r4
    d4f8:	d000      	beq.n	d4fc <__aeabi_dadd+0x498>
    d4fa:	e757      	b.n	d3ac <__aeabi_dadd+0x348>
    d4fc:	0001      	movs	r1, r0
    d4fe:	0015      	movs	r5, r2
    d500:	4664      	mov	r4, ip
    d502:	469a      	mov	sl, r3
    d504:	e5d7      	b.n	d0b6 <__aeabi_dadd+0x52>
    d506:	2c00      	cmp	r4, #0
    d508:	d139      	bne.n	d57e <__aeabi_dadd+0x51a>
    d50a:	000c      	movs	r4, r1
    d50c:	432c      	orrs	r4, r5
    d50e:	d06e      	beq.n	d5ee <__aeabi_dadd+0x58a>
    d510:	43db      	mvns	r3, r3
    d512:	2b00      	cmp	r3, #0
    d514:	d01a      	beq.n	d54c <__aeabi_dadd+0x4e8>
    d516:	4c67      	ldr	r4, [pc, #412]	; (d6b4 <__aeabi_dadd+0x650>)
    d518:	45a4      	cmp	ip, r4
    d51a:	d068      	beq.n	d5ee <__aeabi_dadd+0x58a>
    d51c:	2b38      	cmp	r3, #56	; 0x38
    d51e:	dd00      	ble.n	d522 <__aeabi_dadd+0x4be>
    d520:	e0a4      	b.n	d66c <__aeabi_dadd+0x608>
    d522:	2b1f      	cmp	r3, #31
    d524:	dd00      	ble.n	d528 <__aeabi_dadd+0x4c4>
    d526:	e0ae      	b.n	d686 <__aeabi_dadd+0x622>
    d528:	2420      	movs	r4, #32
    d52a:	000f      	movs	r7, r1
    d52c:	1ae4      	subs	r4, r4, r3
    d52e:	40a7      	lsls	r7, r4
    d530:	46b9      	mov	r9, r7
    d532:	002f      	movs	r7, r5
    d534:	40df      	lsrs	r7, r3
    d536:	46b8      	mov	r8, r7
    d538:	46a3      	mov	fp, r4
    d53a:	464f      	mov	r7, r9
    d53c:	4644      	mov	r4, r8
    d53e:	4327      	orrs	r7, r4
    d540:	465c      	mov	r4, fp
    d542:	40a5      	lsls	r5, r4
    d544:	1e6c      	subs	r4, r5, #1
    d546:	41a5      	sbcs	r5, r4
    d548:	40d9      	lsrs	r1, r3
    d54a:	433d      	orrs	r5, r7
    d54c:	18ad      	adds	r5, r5, r2
    d54e:	4295      	cmp	r5, r2
    d550:	419b      	sbcs	r3, r3
    d552:	1809      	adds	r1, r1, r0
    d554:	425b      	negs	r3, r3
    d556:	1859      	adds	r1, r3, r1
    d558:	4664      	mov	r4, ip
    d55a:	e66b      	b.n	d234 <__aeabi_dadd+0x1d0>
    d55c:	000c      	movs	r4, r1
    d55e:	432c      	orrs	r4, r5
    d560:	d115      	bne.n	d58e <__aeabi_dadd+0x52a>
    d562:	0001      	movs	r1, r0
    d564:	4311      	orrs	r1, r2
    d566:	d07b      	beq.n	d660 <__aeabi_dadd+0x5fc>
    d568:	0001      	movs	r1, r0
    d56a:	0015      	movs	r5, r2
    d56c:	469a      	mov	sl, r3
    d56e:	4c51      	ldr	r4, [pc, #324]	; (d6b4 <__aeabi_dadd+0x650>)
    d570:	e5a1      	b.n	d0b6 <__aeabi_dadd+0x52>
    d572:	430d      	orrs	r5, r1
    d574:	1e69      	subs	r1, r5, #1
    d576:	418d      	sbcs	r5, r1
    d578:	2100      	movs	r1, #0
    d57a:	b2ec      	uxtb	r4, r5
    d57c:	e72d      	b.n	d3da <__aeabi_dadd+0x376>
    d57e:	4c4d      	ldr	r4, [pc, #308]	; (d6b4 <__aeabi_dadd+0x650>)
    d580:	45a4      	cmp	ip, r4
    d582:	d034      	beq.n	d5ee <__aeabi_dadd+0x58a>
    d584:	2480      	movs	r4, #128	; 0x80
    d586:	0424      	lsls	r4, r4, #16
    d588:	425b      	negs	r3, r3
    d58a:	4321      	orrs	r1, r4
    d58c:	e7c6      	b.n	d51c <__aeabi_dadd+0x4b8>
    d58e:	0004      	movs	r4, r0
    d590:	4314      	orrs	r4, r2
    d592:	d04e      	beq.n	d632 <__aeabi_dadd+0x5ce>
    d594:	08ed      	lsrs	r5, r5, #3
    d596:	074c      	lsls	r4, r1, #29
    d598:	432c      	orrs	r4, r5
    d59a:	2580      	movs	r5, #128	; 0x80
    d59c:	08c9      	lsrs	r1, r1, #3
    d59e:	032d      	lsls	r5, r5, #12
    d5a0:	4229      	tst	r1, r5
    d5a2:	d008      	beq.n	d5b6 <__aeabi_dadd+0x552>
    d5a4:	08c6      	lsrs	r6, r0, #3
    d5a6:	422e      	tst	r6, r5
    d5a8:	d105      	bne.n	d5b6 <__aeabi_dadd+0x552>
    d5aa:	08d2      	lsrs	r2, r2, #3
    d5ac:	0741      	lsls	r1, r0, #29
    d5ae:	4311      	orrs	r1, r2
    d5b0:	000c      	movs	r4, r1
    d5b2:	469a      	mov	sl, r3
    d5b4:	0031      	movs	r1, r6
    d5b6:	0f62      	lsrs	r2, r4, #29
    d5b8:	00c9      	lsls	r1, r1, #3
    d5ba:	00e5      	lsls	r5, r4, #3
    d5bc:	4311      	orrs	r1, r2
    d5be:	4c3d      	ldr	r4, [pc, #244]	; (d6b4 <__aeabi_dadd+0x650>)
    d5c0:	e579      	b.n	d0b6 <__aeabi_dadd+0x52>
    d5c2:	0006      	movs	r6, r0
    d5c4:	4316      	orrs	r6, r2
    d5c6:	d100      	bne.n	d5ca <__aeabi_dadd+0x566>
    d5c8:	e575      	b.n	d0b6 <__aeabi_dadd+0x52>
    d5ca:	1aae      	subs	r6, r5, r2
    d5cc:	46b0      	mov	r8, r6
    d5ce:	4545      	cmp	r5, r8
    d5d0:	41bf      	sbcs	r7, r7
    d5d2:	1a0e      	subs	r6, r1, r0
    d5d4:	427f      	negs	r7, r7
    d5d6:	1bf6      	subs	r6, r6, r7
    d5d8:	0237      	lsls	r7, r6, #8
    d5da:	d400      	bmi.n	d5de <__aeabi_dadd+0x57a>
    d5dc:	e5f4      	b.n	d1c8 <__aeabi_dadd+0x164>
    d5de:	1b55      	subs	r5, r2, r5
    d5e0:	42aa      	cmp	r2, r5
    d5e2:	41b6      	sbcs	r6, r6
    d5e4:	1a41      	subs	r1, r0, r1
    d5e6:	4276      	negs	r6, r6
    d5e8:	1b89      	subs	r1, r1, r6
    d5ea:	469a      	mov	sl, r3
    d5ec:	e563      	b.n	d0b6 <__aeabi_dadd+0x52>
    d5ee:	0001      	movs	r1, r0
    d5f0:	0015      	movs	r5, r2
    d5f2:	4664      	mov	r4, ip
    d5f4:	e55f      	b.n	d0b6 <__aeabi_dadd+0x52>
    d5f6:	2200      	movs	r2, #0
    d5f8:	2500      	movs	r5, #0
    d5fa:	e57b      	b.n	d0f4 <__aeabi_dadd+0x90>
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	d03b      	beq.n	d678 <__aeabi_dadd+0x614>
    d600:	0003      	movs	r3, r0
    d602:	4313      	orrs	r3, r2
    d604:	d015      	beq.n	d632 <__aeabi_dadd+0x5ce>
    d606:	08ed      	lsrs	r5, r5, #3
    d608:	074b      	lsls	r3, r1, #29
    d60a:	432b      	orrs	r3, r5
    d60c:	2580      	movs	r5, #128	; 0x80
    d60e:	08c9      	lsrs	r1, r1, #3
    d610:	032d      	lsls	r5, r5, #12
    d612:	4229      	tst	r1, r5
    d614:	d007      	beq.n	d626 <__aeabi_dadd+0x5c2>
    d616:	08c4      	lsrs	r4, r0, #3
    d618:	422c      	tst	r4, r5
    d61a:	d104      	bne.n	d626 <__aeabi_dadd+0x5c2>
    d61c:	0741      	lsls	r1, r0, #29
    d61e:	000b      	movs	r3, r1
    d620:	0021      	movs	r1, r4
    d622:	08d2      	lsrs	r2, r2, #3
    d624:	4313      	orrs	r3, r2
    d626:	00c9      	lsls	r1, r1, #3
    d628:	0f5a      	lsrs	r2, r3, #29
    d62a:	4311      	orrs	r1, r2
    d62c:	00dd      	lsls	r5, r3, #3
    d62e:	4c21      	ldr	r4, [pc, #132]	; (d6b4 <__aeabi_dadd+0x650>)
    d630:	e541      	b.n	d0b6 <__aeabi_dadd+0x52>
    d632:	4c20      	ldr	r4, [pc, #128]	; (d6b4 <__aeabi_dadd+0x650>)
    d634:	e53f      	b.n	d0b6 <__aeabi_dadd+0x52>
    d636:	2000      	movs	r0, #0
    d638:	e754      	b.n	d4e4 <__aeabi_dadd+0x480>
    d63a:	2600      	movs	r6, #0
    d63c:	2500      	movs	r5, #0
    d63e:	e5d1      	b.n	d1e4 <__aeabi_dadd+0x180>
    d640:	0034      	movs	r4, r6
    d642:	000f      	movs	r7, r1
    d644:	3c20      	subs	r4, #32
    d646:	40e7      	lsrs	r7, r4
    d648:	003c      	movs	r4, r7
    d64a:	2e20      	cmp	r6, #32
    d64c:	d02b      	beq.n	d6a6 <__aeabi_dadd+0x642>
    d64e:	2740      	movs	r7, #64	; 0x40
    d650:	1bbe      	subs	r6, r7, r6
    d652:	40b1      	lsls	r1, r6
    d654:	430d      	orrs	r5, r1
    d656:	1e69      	subs	r1, r5, #1
    d658:	418d      	sbcs	r5, r1
    d65a:	2100      	movs	r1, #0
    d65c:	432c      	orrs	r4, r5
    d65e:	e6bc      	b.n	d3da <__aeabi_dadd+0x376>
    d660:	2180      	movs	r1, #128	; 0x80
    d662:	2600      	movs	r6, #0
    d664:	0309      	lsls	r1, r1, #12
    d666:	4c13      	ldr	r4, [pc, #76]	; (d6b4 <__aeabi_dadd+0x650>)
    d668:	2500      	movs	r5, #0
    d66a:	e5bb      	b.n	d1e4 <__aeabi_dadd+0x180>
    d66c:	430d      	orrs	r5, r1
    d66e:	1e69      	subs	r1, r5, #1
    d670:	418d      	sbcs	r5, r1
    d672:	2100      	movs	r1, #0
    d674:	b2ed      	uxtb	r5, r5
    d676:	e769      	b.n	d54c <__aeabi_dadd+0x4e8>
    d678:	0001      	movs	r1, r0
    d67a:	0015      	movs	r5, r2
    d67c:	4c0d      	ldr	r4, [pc, #52]	; (d6b4 <__aeabi_dadd+0x650>)
    d67e:	e51a      	b.n	d0b6 <__aeabi_dadd+0x52>
    d680:	0001      	movs	r1, r0
    d682:	0015      	movs	r5, r2
    d684:	e517      	b.n	d0b6 <__aeabi_dadd+0x52>
    d686:	001c      	movs	r4, r3
    d688:	000f      	movs	r7, r1
    d68a:	3c20      	subs	r4, #32
    d68c:	40e7      	lsrs	r7, r4
    d68e:	003c      	movs	r4, r7
    d690:	2b20      	cmp	r3, #32
    d692:	d00c      	beq.n	d6ae <__aeabi_dadd+0x64a>
    d694:	2740      	movs	r7, #64	; 0x40
    d696:	1afb      	subs	r3, r7, r3
    d698:	4099      	lsls	r1, r3
    d69a:	430d      	orrs	r5, r1
    d69c:	1e69      	subs	r1, r5, #1
    d69e:	418d      	sbcs	r5, r1
    d6a0:	2100      	movs	r1, #0
    d6a2:	4325      	orrs	r5, r4
    d6a4:	e752      	b.n	d54c <__aeabi_dadd+0x4e8>
    d6a6:	2100      	movs	r1, #0
    d6a8:	e7d4      	b.n	d654 <__aeabi_dadd+0x5f0>
    d6aa:	001d      	movs	r5, r3
    d6ac:	e592      	b.n	d1d4 <__aeabi_dadd+0x170>
    d6ae:	2100      	movs	r1, #0
    d6b0:	e7f3      	b.n	d69a <__aeabi_dadd+0x636>
    d6b2:	46c0      	nop			; (mov r8, r8)
    d6b4:	000007ff 	.word	0x000007ff
    d6b8:	ff7fffff 	.word	0xff7fffff

0000d6bc <__aeabi_ddiv>:
    d6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6be:	4656      	mov	r6, sl
    d6c0:	464d      	mov	r5, r9
    d6c2:	4644      	mov	r4, r8
    d6c4:	465f      	mov	r7, fp
    d6c6:	b4f0      	push	{r4, r5, r6, r7}
    d6c8:	001d      	movs	r5, r3
    d6ca:	030e      	lsls	r6, r1, #12
    d6cc:	004c      	lsls	r4, r1, #1
    d6ce:	0fcb      	lsrs	r3, r1, #31
    d6d0:	b087      	sub	sp, #28
    d6d2:	0007      	movs	r7, r0
    d6d4:	4692      	mov	sl, r2
    d6d6:	4681      	mov	r9, r0
    d6d8:	0b36      	lsrs	r6, r6, #12
    d6da:	0d64      	lsrs	r4, r4, #21
    d6dc:	4698      	mov	r8, r3
    d6de:	d06a      	beq.n	d7b6 <__aeabi_ddiv+0xfa>
    d6e0:	4b6d      	ldr	r3, [pc, #436]	; (d898 <__aeabi_ddiv+0x1dc>)
    d6e2:	429c      	cmp	r4, r3
    d6e4:	d035      	beq.n	d752 <__aeabi_ddiv+0x96>
    d6e6:	2280      	movs	r2, #128	; 0x80
    d6e8:	0f43      	lsrs	r3, r0, #29
    d6ea:	0412      	lsls	r2, r2, #16
    d6ec:	4313      	orrs	r3, r2
    d6ee:	00f6      	lsls	r6, r6, #3
    d6f0:	431e      	orrs	r6, r3
    d6f2:	00c3      	lsls	r3, r0, #3
    d6f4:	4699      	mov	r9, r3
    d6f6:	4b69      	ldr	r3, [pc, #420]	; (d89c <__aeabi_ddiv+0x1e0>)
    d6f8:	2700      	movs	r7, #0
    d6fa:	469c      	mov	ip, r3
    d6fc:	2300      	movs	r3, #0
    d6fe:	4464      	add	r4, ip
    d700:	9302      	str	r3, [sp, #8]
    d702:	032b      	lsls	r3, r5, #12
    d704:	0068      	lsls	r0, r5, #1
    d706:	0b1b      	lsrs	r3, r3, #12
    d708:	0fed      	lsrs	r5, r5, #31
    d70a:	4651      	mov	r1, sl
    d70c:	469b      	mov	fp, r3
    d70e:	0d40      	lsrs	r0, r0, #21
    d710:	9500      	str	r5, [sp, #0]
    d712:	d100      	bne.n	d716 <__aeabi_ddiv+0x5a>
    d714:	e078      	b.n	d808 <__aeabi_ddiv+0x14c>
    d716:	4b60      	ldr	r3, [pc, #384]	; (d898 <__aeabi_ddiv+0x1dc>)
    d718:	4298      	cmp	r0, r3
    d71a:	d06c      	beq.n	d7f6 <__aeabi_ddiv+0x13a>
    d71c:	465b      	mov	r3, fp
    d71e:	00da      	lsls	r2, r3, #3
    d720:	0f4b      	lsrs	r3, r1, #29
    d722:	2180      	movs	r1, #128	; 0x80
    d724:	0409      	lsls	r1, r1, #16
    d726:	430b      	orrs	r3, r1
    d728:	4313      	orrs	r3, r2
    d72a:	469b      	mov	fp, r3
    d72c:	4653      	mov	r3, sl
    d72e:	00d9      	lsls	r1, r3, #3
    d730:	4b5a      	ldr	r3, [pc, #360]	; (d89c <__aeabi_ddiv+0x1e0>)
    d732:	469c      	mov	ip, r3
    d734:	2300      	movs	r3, #0
    d736:	4460      	add	r0, ip
    d738:	4642      	mov	r2, r8
    d73a:	1a20      	subs	r0, r4, r0
    d73c:	406a      	eors	r2, r5
    d73e:	4692      	mov	sl, r2
    d740:	9001      	str	r0, [sp, #4]
    d742:	431f      	orrs	r7, r3
    d744:	2f0f      	cmp	r7, #15
    d746:	d900      	bls.n	d74a <__aeabi_ddiv+0x8e>
    d748:	e0b0      	b.n	d8ac <__aeabi_ddiv+0x1f0>
    d74a:	4855      	ldr	r0, [pc, #340]	; (d8a0 <__aeabi_ddiv+0x1e4>)
    d74c:	00bf      	lsls	r7, r7, #2
    d74e:	59c0      	ldr	r0, [r0, r7]
    d750:	4687      	mov	pc, r0
    d752:	4337      	orrs	r7, r6
    d754:	d000      	beq.n	d758 <__aeabi_ddiv+0x9c>
    d756:	e088      	b.n	d86a <__aeabi_ddiv+0x1ae>
    d758:	2300      	movs	r3, #0
    d75a:	4699      	mov	r9, r3
    d75c:	3302      	adds	r3, #2
    d75e:	2708      	movs	r7, #8
    d760:	2600      	movs	r6, #0
    d762:	9302      	str	r3, [sp, #8]
    d764:	e7cd      	b.n	d702 <__aeabi_ddiv+0x46>
    d766:	4643      	mov	r3, r8
    d768:	46b3      	mov	fp, r6
    d76a:	4649      	mov	r1, r9
    d76c:	9300      	str	r3, [sp, #0]
    d76e:	9b02      	ldr	r3, [sp, #8]
    d770:	9a00      	ldr	r2, [sp, #0]
    d772:	4692      	mov	sl, r2
    d774:	2b02      	cmp	r3, #2
    d776:	d000      	beq.n	d77a <__aeabi_ddiv+0xbe>
    d778:	e1bf      	b.n	dafa <__aeabi_ddiv+0x43e>
    d77a:	2100      	movs	r1, #0
    d77c:	4653      	mov	r3, sl
    d77e:	2201      	movs	r2, #1
    d780:	2600      	movs	r6, #0
    d782:	4689      	mov	r9, r1
    d784:	401a      	ands	r2, r3
    d786:	4b44      	ldr	r3, [pc, #272]	; (d898 <__aeabi_ddiv+0x1dc>)
    d788:	2100      	movs	r1, #0
    d78a:	0336      	lsls	r6, r6, #12
    d78c:	0d0c      	lsrs	r4, r1, #20
    d78e:	0524      	lsls	r4, r4, #20
    d790:	0b36      	lsrs	r6, r6, #12
    d792:	4326      	orrs	r6, r4
    d794:	4c43      	ldr	r4, [pc, #268]	; (d8a4 <__aeabi_ddiv+0x1e8>)
    d796:	051b      	lsls	r3, r3, #20
    d798:	4026      	ands	r6, r4
    d79a:	431e      	orrs	r6, r3
    d79c:	0076      	lsls	r6, r6, #1
    d79e:	07d2      	lsls	r2, r2, #31
    d7a0:	0876      	lsrs	r6, r6, #1
    d7a2:	4316      	orrs	r6, r2
    d7a4:	4648      	mov	r0, r9
    d7a6:	0031      	movs	r1, r6
    d7a8:	b007      	add	sp, #28
    d7aa:	bc3c      	pop	{r2, r3, r4, r5}
    d7ac:	4690      	mov	r8, r2
    d7ae:	4699      	mov	r9, r3
    d7b0:	46a2      	mov	sl, r4
    d7b2:	46ab      	mov	fp, r5
    d7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d7b6:	0033      	movs	r3, r6
    d7b8:	4303      	orrs	r3, r0
    d7ba:	d04f      	beq.n	d85c <__aeabi_ddiv+0x1a0>
    d7bc:	2e00      	cmp	r6, #0
    d7be:	d100      	bne.n	d7c2 <__aeabi_ddiv+0x106>
    d7c0:	e1bc      	b.n	db3c <__aeabi_ddiv+0x480>
    d7c2:	0030      	movs	r0, r6
    d7c4:	f7fe fd92 	bl	c2ec <__clzsi2>
    d7c8:	0003      	movs	r3, r0
    d7ca:	3b0b      	subs	r3, #11
    d7cc:	2b1c      	cmp	r3, #28
    d7ce:	dd00      	ble.n	d7d2 <__aeabi_ddiv+0x116>
    d7d0:	e1ad      	b.n	db2e <__aeabi_ddiv+0x472>
    d7d2:	221d      	movs	r2, #29
    d7d4:	0001      	movs	r1, r0
    d7d6:	1ad3      	subs	r3, r2, r3
    d7d8:	3908      	subs	r1, #8
    d7da:	003a      	movs	r2, r7
    d7dc:	408f      	lsls	r7, r1
    d7de:	408e      	lsls	r6, r1
    d7e0:	40da      	lsrs	r2, r3
    d7e2:	46b9      	mov	r9, r7
    d7e4:	4316      	orrs	r6, r2
    d7e6:	4b30      	ldr	r3, [pc, #192]	; (d8a8 <__aeabi_ddiv+0x1ec>)
    d7e8:	2700      	movs	r7, #0
    d7ea:	469c      	mov	ip, r3
    d7ec:	2300      	movs	r3, #0
    d7ee:	4460      	add	r0, ip
    d7f0:	4244      	negs	r4, r0
    d7f2:	9302      	str	r3, [sp, #8]
    d7f4:	e785      	b.n	d702 <__aeabi_ddiv+0x46>
    d7f6:	4653      	mov	r3, sl
    d7f8:	465a      	mov	r2, fp
    d7fa:	4313      	orrs	r3, r2
    d7fc:	d12c      	bne.n	d858 <__aeabi_ddiv+0x19c>
    d7fe:	2300      	movs	r3, #0
    d800:	2100      	movs	r1, #0
    d802:	469b      	mov	fp, r3
    d804:	3302      	adds	r3, #2
    d806:	e797      	b.n	d738 <__aeabi_ddiv+0x7c>
    d808:	430b      	orrs	r3, r1
    d80a:	d020      	beq.n	d84e <__aeabi_ddiv+0x192>
    d80c:	465b      	mov	r3, fp
    d80e:	2b00      	cmp	r3, #0
    d810:	d100      	bne.n	d814 <__aeabi_ddiv+0x158>
    d812:	e19e      	b.n	db52 <__aeabi_ddiv+0x496>
    d814:	4658      	mov	r0, fp
    d816:	f7fe fd69 	bl	c2ec <__clzsi2>
    d81a:	0003      	movs	r3, r0
    d81c:	3b0b      	subs	r3, #11
    d81e:	2b1c      	cmp	r3, #28
    d820:	dd00      	ble.n	d824 <__aeabi_ddiv+0x168>
    d822:	e18f      	b.n	db44 <__aeabi_ddiv+0x488>
    d824:	0002      	movs	r2, r0
    d826:	4659      	mov	r1, fp
    d828:	3a08      	subs	r2, #8
    d82a:	4091      	lsls	r1, r2
    d82c:	468b      	mov	fp, r1
    d82e:	211d      	movs	r1, #29
    d830:	1acb      	subs	r3, r1, r3
    d832:	4651      	mov	r1, sl
    d834:	40d9      	lsrs	r1, r3
    d836:	000b      	movs	r3, r1
    d838:	4659      	mov	r1, fp
    d83a:	430b      	orrs	r3, r1
    d83c:	4651      	mov	r1, sl
    d83e:	469b      	mov	fp, r3
    d840:	4091      	lsls	r1, r2
    d842:	4b19      	ldr	r3, [pc, #100]	; (d8a8 <__aeabi_ddiv+0x1ec>)
    d844:	469c      	mov	ip, r3
    d846:	4460      	add	r0, ip
    d848:	4240      	negs	r0, r0
    d84a:	2300      	movs	r3, #0
    d84c:	e774      	b.n	d738 <__aeabi_ddiv+0x7c>
    d84e:	2300      	movs	r3, #0
    d850:	2100      	movs	r1, #0
    d852:	469b      	mov	fp, r3
    d854:	3301      	adds	r3, #1
    d856:	e76f      	b.n	d738 <__aeabi_ddiv+0x7c>
    d858:	2303      	movs	r3, #3
    d85a:	e76d      	b.n	d738 <__aeabi_ddiv+0x7c>
    d85c:	2300      	movs	r3, #0
    d85e:	4699      	mov	r9, r3
    d860:	3301      	adds	r3, #1
    d862:	2704      	movs	r7, #4
    d864:	2600      	movs	r6, #0
    d866:	9302      	str	r3, [sp, #8]
    d868:	e74b      	b.n	d702 <__aeabi_ddiv+0x46>
    d86a:	2303      	movs	r3, #3
    d86c:	270c      	movs	r7, #12
    d86e:	9302      	str	r3, [sp, #8]
    d870:	e747      	b.n	d702 <__aeabi_ddiv+0x46>
    d872:	2201      	movs	r2, #1
    d874:	1ad5      	subs	r5, r2, r3
    d876:	2d38      	cmp	r5, #56	; 0x38
    d878:	dc00      	bgt.n	d87c <__aeabi_ddiv+0x1c0>
    d87a:	e1b0      	b.n	dbde <__aeabi_ddiv+0x522>
    d87c:	4653      	mov	r3, sl
    d87e:	401a      	ands	r2, r3
    d880:	2100      	movs	r1, #0
    d882:	2300      	movs	r3, #0
    d884:	2600      	movs	r6, #0
    d886:	4689      	mov	r9, r1
    d888:	e77e      	b.n	d788 <__aeabi_ddiv+0xcc>
    d88a:	2300      	movs	r3, #0
    d88c:	2680      	movs	r6, #128	; 0x80
    d88e:	4699      	mov	r9, r3
    d890:	2200      	movs	r2, #0
    d892:	0336      	lsls	r6, r6, #12
    d894:	4b00      	ldr	r3, [pc, #0]	; (d898 <__aeabi_ddiv+0x1dc>)
    d896:	e777      	b.n	d788 <__aeabi_ddiv+0xcc>
    d898:	000007ff 	.word	0x000007ff
    d89c:	fffffc01 	.word	0xfffffc01
    d8a0:	0000fc18 	.word	0x0000fc18
    d8a4:	800fffff 	.word	0x800fffff
    d8a8:	000003f3 	.word	0x000003f3
    d8ac:	455e      	cmp	r6, fp
    d8ae:	d900      	bls.n	d8b2 <__aeabi_ddiv+0x1f6>
    d8b0:	e172      	b.n	db98 <__aeabi_ddiv+0x4dc>
    d8b2:	d100      	bne.n	d8b6 <__aeabi_ddiv+0x1fa>
    d8b4:	e16d      	b.n	db92 <__aeabi_ddiv+0x4d6>
    d8b6:	9b01      	ldr	r3, [sp, #4]
    d8b8:	464d      	mov	r5, r9
    d8ba:	3b01      	subs	r3, #1
    d8bc:	9301      	str	r3, [sp, #4]
    d8be:	2300      	movs	r3, #0
    d8c0:	0034      	movs	r4, r6
    d8c2:	9302      	str	r3, [sp, #8]
    d8c4:	465b      	mov	r3, fp
    d8c6:	021e      	lsls	r6, r3, #8
    d8c8:	0e0b      	lsrs	r3, r1, #24
    d8ca:	431e      	orrs	r6, r3
    d8cc:	020b      	lsls	r3, r1, #8
    d8ce:	9303      	str	r3, [sp, #12]
    d8d0:	0c33      	lsrs	r3, r6, #16
    d8d2:	4699      	mov	r9, r3
    d8d4:	0433      	lsls	r3, r6, #16
    d8d6:	0c1b      	lsrs	r3, r3, #16
    d8d8:	4649      	mov	r1, r9
    d8da:	0020      	movs	r0, r4
    d8dc:	9300      	str	r3, [sp, #0]
    d8de:	f7fe fc3f 	bl	c160 <__aeabi_uidiv>
    d8e2:	9b00      	ldr	r3, [sp, #0]
    d8e4:	0037      	movs	r7, r6
    d8e6:	4343      	muls	r3, r0
    d8e8:	0006      	movs	r6, r0
    d8ea:	4649      	mov	r1, r9
    d8ec:	0020      	movs	r0, r4
    d8ee:	4698      	mov	r8, r3
    d8f0:	f7fe fcbc 	bl	c26c <__aeabi_uidivmod>
    d8f4:	0c2c      	lsrs	r4, r5, #16
    d8f6:	0409      	lsls	r1, r1, #16
    d8f8:	430c      	orrs	r4, r1
    d8fa:	45a0      	cmp	r8, r4
    d8fc:	d909      	bls.n	d912 <__aeabi_ddiv+0x256>
    d8fe:	19e4      	adds	r4, r4, r7
    d900:	1e73      	subs	r3, r6, #1
    d902:	42a7      	cmp	r7, r4
    d904:	d900      	bls.n	d908 <__aeabi_ddiv+0x24c>
    d906:	e15c      	b.n	dbc2 <__aeabi_ddiv+0x506>
    d908:	45a0      	cmp	r8, r4
    d90a:	d800      	bhi.n	d90e <__aeabi_ddiv+0x252>
    d90c:	e159      	b.n	dbc2 <__aeabi_ddiv+0x506>
    d90e:	3e02      	subs	r6, #2
    d910:	19e4      	adds	r4, r4, r7
    d912:	4643      	mov	r3, r8
    d914:	1ae4      	subs	r4, r4, r3
    d916:	4649      	mov	r1, r9
    d918:	0020      	movs	r0, r4
    d91a:	f7fe fc21 	bl	c160 <__aeabi_uidiv>
    d91e:	0003      	movs	r3, r0
    d920:	9a00      	ldr	r2, [sp, #0]
    d922:	4680      	mov	r8, r0
    d924:	4353      	muls	r3, r2
    d926:	4649      	mov	r1, r9
    d928:	0020      	movs	r0, r4
    d92a:	469b      	mov	fp, r3
    d92c:	f7fe fc9e 	bl	c26c <__aeabi_uidivmod>
    d930:	042a      	lsls	r2, r5, #16
    d932:	0409      	lsls	r1, r1, #16
    d934:	0c12      	lsrs	r2, r2, #16
    d936:	430a      	orrs	r2, r1
    d938:	4593      	cmp	fp, r2
    d93a:	d90d      	bls.n	d958 <__aeabi_ddiv+0x29c>
    d93c:	4643      	mov	r3, r8
    d93e:	19d2      	adds	r2, r2, r7
    d940:	3b01      	subs	r3, #1
    d942:	4297      	cmp	r7, r2
    d944:	d900      	bls.n	d948 <__aeabi_ddiv+0x28c>
    d946:	e13a      	b.n	dbbe <__aeabi_ddiv+0x502>
    d948:	4593      	cmp	fp, r2
    d94a:	d800      	bhi.n	d94e <__aeabi_ddiv+0x292>
    d94c:	e137      	b.n	dbbe <__aeabi_ddiv+0x502>
    d94e:	2302      	movs	r3, #2
    d950:	425b      	negs	r3, r3
    d952:	469c      	mov	ip, r3
    d954:	19d2      	adds	r2, r2, r7
    d956:	44e0      	add	r8, ip
    d958:	465b      	mov	r3, fp
    d95a:	1ad2      	subs	r2, r2, r3
    d95c:	4643      	mov	r3, r8
    d95e:	0436      	lsls	r6, r6, #16
    d960:	4333      	orrs	r3, r6
    d962:	469b      	mov	fp, r3
    d964:	9903      	ldr	r1, [sp, #12]
    d966:	0c18      	lsrs	r0, r3, #16
    d968:	0c0b      	lsrs	r3, r1, #16
    d96a:	001d      	movs	r5, r3
    d96c:	9305      	str	r3, [sp, #20]
    d96e:	0409      	lsls	r1, r1, #16
    d970:	465b      	mov	r3, fp
    d972:	0c09      	lsrs	r1, r1, #16
    d974:	000c      	movs	r4, r1
    d976:	041b      	lsls	r3, r3, #16
    d978:	0c1b      	lsrs	r3, r3, #16
    d97a:	4344      	muls	r4, r0
    d97c:	9104      	str	r1, [sp, #16]
    d97e:	4359      	muls	r1, r3
    d980:	436b      	muls	r3, r5
    d982:	4368      	muls	r0, r5
    d984:	191b      	adds	r3, r3, r4
    d986:	0c0d      	lsrs	r5, r1, #16
    d988:	18eb      	adds	r3, r5, r3
    d98a:	429c      	cmp	r4, r3
    d98c:	d903      	bls.n	d996 <__aeabi_ddiv+0x2da>
    d98e:	2480      	movs	r4, #128	; 0x80
    d990:	0264      	lsls	r4, r4, #9
    d992:	46a4      	mov	ip, r4
    d994:	4460      	add	r0, ip
    d996:	0c1c      	lsrs	r4, r3, #16
    d998:	0409      	lsls	r1, r1, #16
    d99a:	041b      	lsls	r3, r3, #16
    d99c:	0c09      	lsrs	r1, r1, #16
    d99e:	1820      	adds	r0, r4, r0
    d9a0:	185d      	adds	r5, r3, r1
    d9a2:	4282      	cmp	r2, r0
    d9a4:	d200      	bcs.n	d9a8 <__aeabi_ddiv+0x2ec>
    d9a6:	e0de      	b.n	db66 <__aeabi_ddiv+0x4aa>
    d9a8:	d100      	bne.n	d9ac <__aeabi_ddiv+0x2f0>
    d9aa:	e0d7      	b.n	db5c <__aeabi_ddiv+0x4a0>
    d9ac:	1a16      	subs	r6, r2, r0
    d9ae:	9b02      	ldr	r3, [sp, #8]
    d9b0:	469c      	mov	ip, r3
    d9b2:	1b5d      	subs	r5, r3, r5
    d9b4:	45ac      	cmp	ip, r5
    d9b6:	419b      	sbcs	r3, r3
    d9b8:	425b      	negs	r3, r3
    d9ba:	1af6      	subs	r6, r6, r3
    d9bc:	42b7      	cmp	r7, r6
    d9be:	d100      	bne.n	d9c2 <__aeabi_ddiv+0x306>
    d9c0:	e106      	b.n	dbd0 <__aeabi_ddiv+0x514>
    d9c2:	4649      	mov	r1, r9
    d9c4:	0030      	movs	r0, r6
    d9c6:	f7fe fbcb 	bl	c160 <__aeabi_uidiv>
    d9ca:	9b00      	ldr	r3, [sp, #0]
    d9cc:	0004      	movs	r4, r0
    d9ce:	4343      	muls	r3, r0
    d9d0:	4649      	mov	r1, r9
    d9d2:	0030      	movs	r0, r6
    d9d4:	4698      	mov	r8, r3
    d9d6:	f7fe fc49 	bl	c26c <__aeabi_uidivmod>
    d9da:	0c2e      	lsrs	r6, r5, #16
    d9dc:	0409      	lsls	r1, r1, #16
    d9de:	430e      	orrs	r6, r1
    d9e0:	45b0      	cmp	r8, r6
    d9e2:	d909      	bls.n	d9f8 <__aeabi_ddiv+0x33c>
    d9e4:	19f6      	adds	r6, r6, r7
    d9e6:	1e63      	subs	r3, r4, #1
    d9e8:	42b7      	cmp	r7, r6
    d9ea:	d900      	bls.n	d9ee <__aeabi_ddiv+0x332>
    d9ec:	e0f3      	b.n	dbd6 <__aeabi_ddiv+0x51a>
    d9ee:	45b0      	cmp	r8, r6
    d9f0:	d800      	bhi.n	d9f4 <__aeabi_ddiv+0x338>
    d9f2:	e0f0      	b.n	dbd6 <__aeabi_ddiv+0x51a>
    d9f4:	3c02      	subs	r4, #2
    d9f6:	19f6      	adds	r6, r6, r7
    d9f8:	4643      	mov	r3, r8
    d9fa:	1af3      	subs	r3, r6, r3
    d9fc:	4649      	mov	r1, r9
    d9fe:	0018      	movs	r0, r3
    da00:	9302      	str	r3, [sp, #8]
    da02:	f7fe fbad 	bl	c160 <__aeabi_uidiv>
    da06:	9b00      	ldr	r3, [sp, #0]
    da08:	0006      	movs	r6, r0
    da0a:	4343      	muls	r3, r0
    da0c:	4649      	mov	r1, r9
    da0e:	9802      	ldr	r0, [sp, #8]
    da10:	4698      	mov	r8, r3
    da12:	f7fe fc2b 	bl	c26c <__aeabi_uidivmod>
    da16:	042d      	lsls	r5, r5, #16
    da18:	0409      	lsls	r1, r1, #16
    da1a:	0c2d      	lsrs	r5, r5, #16
    da1c:	430d      	orrs	r5, r1
    da1e:	45a8      	cmp	r8, r5
    da20:	d909      	bls.n	da36 <__aeabi_ddiv+0x37a>
    da22:	19ed      	adds	r5, r5, r7
    da24:	1e73      	subs	r3, r6, #1
    da26:	42af      	cmp	r7, r5
    da28:	d900      	bls.n	da2c <__aeabi_ddiv+0x370>
    da2a:	e0d6      	b.n	dbda <__aeabi_ddiv+0x51e>
    da2c:	45a8      	cmp	r8, r5
    da2e:	d800      	bhi.n	da32 <__aeabi_ddiv+0x376>
    da30:	e0d3      	b.n	dbda <__aeabi_ddiv+0x51e>
    da32:	3e02      	subs	r6, #2
    da34:	19ed      	adds	r5, r5, r7
    da36:	0424      	lsls	r4, r4, #16
    da38:	0021      	movs	r1, r4
    da3a:	4643      	mov	r3, r8
    da3c:	4331      	orrs	r1, r6
    da3e:	9e04      	ldr	r6, [sp, #16]
    da40:	9a05      	ldr	r2, [sp, #20]
    da42:	0030      	movs	r0, r6
    da44:	1aed      	subs	r5, r5, r3
    da46:	040b      	lsls	r3, r1, #16
    da48:	0c0c      	lsrs	r4, r1, #16
    da4a:	0c1b      	lsrs	r3, r3, #16
    da4c:	4358      	muls	r0, r3
    da4e:	4366      	muls	r6, r4
    da50:	4353      	muls	r3, r2
    da52:	4354      	muls	r4, r2
    da54:	199a      	adds	r2, r3, r6
    da56:	0c03      	lsrs	r3, r0, #16
    da58:	189b      	adds	r3, r3, r2
    da5a:	429e      	cmp	r6, r3
    da5c:	d903      	bls.n	da66 <__aeabi_ddiv+0x3aa>
    da5e:	2280      	movs	r2, #128	; 0x80
    da60:	0252      	lsls	r2, r2, #9
    da62:	4694      	mov	ip, r2
    da64:	4464      	add	r4, ip
    da66:	0c1a      	lsrs	r2, r3, #16
    da68:	0400      	lsls	r0, r0, #16
    da6a:	041b      	lsls	r3, r3, #16
    da6c:	0c00      	lsrs	r0, r0, #16
    da6e:	1914      	adds	r4, r2, r4
    da70:	181b      	adds	r3, r3, r0
    da72:	42a5      	cmp	r5, r4
    da74:	d350      	bcc.n	db18 <__aeabi_ddiv+0x45c>
    da76:	d04d      	beq.n	db14 <__aeabi_ddiv+0x458>
    da78:	2301      	movs	r3, #1
    da7a:	4319      	orrs	r1, r3
    da7c:	4a96      	ldr	r2, [pc, #600]	; (dcd8 <__aeabi_ddiv+0x61c>)
    da7e:	9b01      	ldr	r3, [sp, #4]
    da80:	4694      	mov	ip, r2
    da82:	4463      	add	r3, ip
    da84:	2b00      	cmp	r3, #0
    da86:	dc00      	bgt.n	da8a <__aeabi_ddiv+0x3ce>
    da88:	e6f3      	b.n	d872 <__aeabi_ddiv+0x1b6>
    da8a:	074a      	lsls	r2, r1, #29
    da8c:	d009      	beq.n	daa2 <__aeabi_ddiv+0x3e6>
    da8e:	220f      	movs	r2, #15
    da90:	400a      	ands	r2, r1
    da92:	2a04      	cmp	r2, #4
    da94:	d005      	beq.n	daa2 <__aeabi_ddiv+0x3e6>
    da96:	1d0a      	adds	r2, r1, #4
    da98:	428a      	cmp	r2, r1
    da9a:	4189      	sbcs	r1, r1
    da9c:	4249      	negs	r1, r1
    da9e:	448b      	add	fp, r1
    daa0:	0011      	movs	r1, r2
    daa2:	465a      	mov	r2, fp
    daa4:	01d2      	lsls	r2, r2, #7
    daa6:	d508      	bpl.n	daba <__aeabi_ddiv+0x3fe>
    daa8:	465a      	mov	r2, fp
    daaa:	4b8c      	ldr	r3, [pc, #560]	; (dcdc <__aeabi_ddiv+0x620>)
    daac:	401a      	ands	r2, r3
    daae:	4693      	mov	fp, r2
    dab0:	2280      	movs	r2, #128	; 0x80
    dab2:	00d2      	lsls	r2, r2, #3
    dab4:	4694      	mov	ip, r2
    dab6:	9b01      	ldr	r3, [sp, #4]
    dab8:	4463      	add	r3, ip
    daba:	4a89      	ldr	r2, [pc, #548]	; (dce0 <__aeabi_ddiv+0x624>)
    dabc:	4293      	cmp	r3, r2
    dabe:	dd00      	ble.n	dac2 <__aeabi_ddiv+0x406>
    dac0:	e65b      	b.n	d77a <__aeabi_ddiv+0xbe>
    dac2:	465a      	mov	r2, fp
    dac4:	08c9      	lsrs	r1, r1, #3
    dac6:	0750      	lsls	r0, r2, #29
    dac8:	4308      	orrs	r0, r1
    daca:	0256      	lsls	r6, r2, #9
    dacc:	4651      	mov	r1, sl
    dace:	2201      	movs	r2, #1
    dad0:	055b      	lsls	r3, r3, #21
    dad2:	4681      	mov	r9, r0
    dad4:	0b36      	lsrs	r6, r6, #12
    dad6:	0d5b      	lsrs	r3, r3, #21
    dad8:	400a      	ands	r2, r1
    dada:	e655      	b.n	d788 <__aeabi_ddiv+0xcc>
    dadc:	2380      	movs	r3, #128	; 0x80
    dade:	031b      	lsls	r3, r3, #12
    dae0:	421e      	tst	r6, r3
    dae2:	d011      	beq.n	db08 <__aeabi_ddiv+0x44c>
    dae4:	465a      	mov	r2, fp
    dae6:	421a      	tst	r2, r3
    dae8:	d10e      	bne.n	db08 <__aeabi_ddiv+0x44c>
    daea:	465e      	mov	r6, fp
    daec:	431e      	orrs	r6, r3
    daee:	0336      	lsls	r6, r6, #12
    daf0:	0b36      	lsrs	r6, r6, #12
    daf2:	002a      	movs	r2, r5
    daf4:	4689      	mov	r9, r1
    daf6:	4b7b      	ldr	r3, [pc, #492]	; (dce4 <__aeabi_ddiv+0x628>)
    daf8:	e646      	b.n	d788 <__aeabi_ddiv+0xcc>
    dafa:	2b03      	cmp	r3, #3
    dafc:	d100      	bne.n	db00 <__aeabi_ddiv+0x444>
    dafe:	e0e1      	b.n	dcc4 <__aeabi_ddiv+0x608>
    db00:	2b01      	cmp	r3, #1
    db02:	d1bb      	bne.n	da7c <__aeabi_ddiv+0x3c0>
    db04:	401a      	ands	r2, r3
    db06:	e6bb      	b.n	d880 <__aeabi_ddiv+0x1c4>
    db08:	431e      	orrs	r6, r3
    db0a:	0336      	lsls	r6, r6, #12
    db0c:	0b36      	lsrs	r6, r6, #12
    db0e:	4642      	mov	r2, r8
    db10:	4b74      	ldr	r3, [pc, #464]	; (dce4 <__aeabi_ddiv+0x628>)
    db12:	e639      	b.n	d788 <__aeabi_ddiv+0xcc>
    db14:	2b00      	cmp	r3, #0
    db16:	d0b1      	beq.n	da7c <__aeabi_ddiv+0x3c0>
    db18:	197d      	adds	r5, r7, r5
    db1a:	1e4a      	subs	r2, r1, #1
    db1c:	42af      	cmp	r7, r5
    db1e:	d952      	bls.n	dbc6 <__aeabi_ddiv+0x50a>
    db20:	0011      	movs	r1, r2
    db22:	42a5      	cmp	r5, r4
    db24:	d1a8      	bne.n	da78 <__aeabi_ddiv+0x3bc>
    db26:	9a03      	ldr	r2, [sp, #12]
    db28:	429a      	cmp	r2, r3
    db2a:	d1a5      	bne.n	da78 <__aeabi_ddiv+0x3bc>
    db2c:	e7a6      	b.n	da7c <__aeabi_ddiv+0x3c0>
    db2e:	0003      	movs	r3, r0
    db30:	003e      	movs	r6, r7
    db32:	3b28      	subs	r3, #40	; 0x28
    db34:	409e      	lsls	r6, r3
    db36:	2300      	movs	r3, #0
    db38:	4699      	mov	r9, r3
    db3a:	e654      	b.n	d7e6 <__aeabi_ddiv+0x12a>
    db3c:	f7fe fbd6 	bl	c2ec <__clzsi2>
    db40:	3020      	adds	r0, #32
    db42:	e641      	b.n	d7c8 <__aeabi_ddiv+0x10c>
    db44:	0003      	movs	r3, r0
    db46:	4652      	mov	r2, sl
    db48:	3b28      	subs	r3, #40	; 0x28
    db4a:	409a      	lsls	r2, r3
    db4c:	2100      	movs	r1, #0
    db4e:	4693      	mov	fp, r2
    db50:	e677      	b.n	d842 <__aeabi_ddiv+0x186>
    db52:	4650      	mov	r0, sl
    db54:	f7fe fbca 	bl	c2ec <__clzsi2>
    db58:	3020      	adds	r0, #32
    db5a:	e65e      	b.n	d81a <__aeabi_ddiv+0x15e>
    db5c:	9b02      	ldr	r3, [sp, #8]
    db5e:	2600      	movs	r6, #0
    db60:	42ab      	cmp	r3, r5
    db62:	d300      	bcc.n	db66 <__aeabi_ddiv+0x4aa>
    db64:	e723      	b.n	d9ae <__aeabi_ddiv+0x2f2>
    db66:	9e03      	ldr	r6, [sp, #12]
    db68:	9902      	ldr	r1, [sp, #8]
    db6a:	46b4      	mov	ip, r6
    db6c:	4461      	add	r1, ip
    db6e:	4688      	mov	r8, r1
    db70:	45b0      	cmp	r8, r6
    db72:	41b6      	sbcs	r6, r6
    db74:	465b      	mov	r3, fp
    db76:	4276      	negs	r6, r6
    db78:	19f6      	adds	r6, r6, r7
    db7a:	18b2      	adds	r2, r6, r2
    db7c:	3b01      	subs	r3, #1
    db7e:	9102      	str	r1, [sp, #8]
    db80:	4297      	cmp	r7, r2
    db82:	d213      	bcs.n	dbac <__aeabi_ddiv+0x4f0>
    db84:	4290      	cmp	r0, r2
    db86:	d84f      	bhi.n	dc28 <__aeabi_ddiv+0x56c>
    db88:	d100      	bne.n	db8c <__aeabi_ddiv+0x4d0>
    db8a:	e08e      	b.n	dcaa <__aeabi_ddiv+0x5ee>
    db8c:	1a16      	subs	r6, r2, r0
    db8e:	469b      	mov	fp, r3
    db90:	e70d      	b.n	d9ae <__aeabi_ddiv+0x2f2>
    db92:	4589      	cmp	r9, r1
    db94:	d200      	bcs.n	db98 <__aeabi_ddiv+0x4dc>
    db96:	e68e      	b.n	d8b6 <__aeabi_ddiv+0x1fa>
    db98:	0874      	lsrs	r4, r6, #1
    db9a:	464b      	mov	r3, r9
    db9c:	07f6      	lsls	r6, r6, #31
    db9e:	0035      	movs	r5, r6
    dba0:	085b      	lsrs	r3, r3, #1
    dba2:	431d      	orrs	r5, r3
    dba4:	464b      	mov	r3, r9
    dba6:	07db      	lsls	r3, r3, #31
    dba8:	9302      	str	r3, [sp, #8]
    dbaa:	e68b      	b.n	d8c4 <__aeabi_ddiv+0x208>
    dbac:	4297      	cmp	r7, r2
    dbae:	d1ed      	bne.n	db8c <__aeabi_ddiv+0x4d0>
    dbb0:	9903      	ldr	r1, [sp, #12]
    dbb2:	9c02      	ldr	r4, [sp, #8]
    dbb4:	42a1      	cmp	r1, r4
    dbb6:	d9e5      	bls.n	db84 <__aeabi_ddiv+0x4c8>
    dbb8:	1a3e      	subs	r6, r7, r0
    dbba:	469b      	mov	fp, r3
    dbbc:	e6f7      	b.n	d9ae <__aeabi_ddiv+0x2f2>
    dbbe:	4698      	mov	r8, r3
    dbc0:	e6ca      	b.n	d958 <__aeabi_ddiv+0x29c>
    dbc2:	001e      	movs	r6, r3
    dbc4:	e6a5      	b.n	d912 <__aeabi_ddiv+0x256>
    dbc6:	42ac      	cmp	r4, r5
    dbc8:	d83e      	bhi.n	dc48 <__aeabi_ddiv+0x58c>
    dbca:	d074      	beq.n	dcb6 <__aeabi_ddiv+0x5fa>
    dbcc:	0011      	movs	r1, r2
    dbce:	e753      	b.n	da78 <__aeabi_ddiv+0x3bc>
    dbd0:	2101      	movs	r1, #1
    dbd2:	4249      	negs	r1, r1
    dbd4:	e752      	b.n	da7c <__aeabi_ddiv+0x3c0>
    dbd6:	001c      	movs	r4, r3
    dbd8:	e70e      	b.n	d9f8 <__aeabi_ddiv+0x33c>
    dbda:	001e      	movs	r6, r3
    dbdc:	e72b      	b.n	da36 <__aeabi_ddiv+0x37a>
    dbde:	2d1f      	cmp	r5, #31
    dbe0:	dc3c      	bgt.n	dc5c <__aeabi_ddiv+0x5a0>
    dbe2:	2320      	movs	r3, #32
    dbe4:	000a      	movs	r2, r1
    dbe6:	4658      	mov	r0, fp
    dbe8:	1b5b      	subs	r3, r3, r5
    dbea:	4098      	lsls	r0, r3
    dbec:	40ea      	lsrs	r2, r5
    dbee:	4099      	lsls	r1, r3
    dbf0:	4302      	orrs	r2, r0
    dbf2:	1e48      	subs	r0, r1, #1
    dbf4:	4181      	sbcs	r1, r0
    dbf6:	465e      	mov	r6, fp
    dbf8:	4311      	orrs	r1, r2
    dbfa:	40ee      	lsrs	r6, r5
    dbfc:	074b      	lsls	r3, r1, #29
    dbfe:	d009      	beq.n	dc14 <__aeabi_ddiv+0x558>
    dc00:	230f      	movs	r3, #15
    dc02:	400b      	ands	r3, r1
    dc04:	2b04      	cmp	r3, #4
    dc06:	d005      	beq.n	dc14 <__aeabi_ddiv+0x558>
    dc08:	000b      	movs	r3, r1
    dc0a:	1d19      	adds	r1, r3, #4
    dc0c:	4299      	cmp	r1, r3
    dc0e:	419b      	sbcs	r3, r3
    dc10:	425b      	negs	r3, r3
    dc12:	18f6      	adds	r6, r6, r3
    dc14:	0233      	lsls	r3, r6, #8
    dc16:	d53c      	bpl.n	dc92 <__aeabi_ddiv+0x5d6>
    dc18:	4653      	mov	r3, sl
    dc1a:	2201      	movs	r2, #1
    dc1c:	2100      	movs	r1, #0
    dc1e:	401a      	ands	r2, r3
    dc20:	2600      	movs	r6, #0
    dc22:	2301      	movs	r3, #1
    dc24:	4689      	mov	r9, r1
    dc26:	e5af      	b.n	d788 <__aeabi_ddiv+0xcc>
    dc28:	2302      	movs	r3, #2
    dc2a:	425b      	negs	r3, r3
    dc2c:	469c      	mov	ip, r3
    dc2e:	9c03      	ldr	r4, [sp, #12]
    dc30:	44e3      	add	fp, ip
    dc32:	46a4      	mov	ip, r4
    dc34:	9b02      	ldr	r3, [sp, #8]
    dc36:	4463      	add	r3, ip
    dc38:	4698      	mov	r8, r3
    dc3a:	45a0      	cmp	r8, r4
    dc3c:	41b6      	sbcs	r6, r6
    dc3e:	4276      	negs	r6, r6
    dc40:	19f6      	adds	r6, r6, r7
    dc42:	9302      	str	r3, [sp, #8]
    dc44:	18b2      	adds	r2, r6, r2
    dc46:	e6b1      	b.n	d9ac <__aeabi_ddiv+0x2f0>
    dc48:	9803      	ldr	r0, [sp, #12]
    dc4a:	1e8a      	subs	r2, r1, #2
    dc4c:	0041      	lsls	r1, r0, #1
    dc4e:	4281      	cmp	r1, r0
    dc50:	41b6      	sbcs	r6, r6
    dc52:	4276      	negs	r6, r6
    dc54:	19f6      	adds	r6, r6, r7
    dc56:	19ad      	adds	r5, r5, r6
    dc58:	9103      	str	r1, [sp, #12]
    dc5a:	e761      	b.n	db20 <__aeabi_ddiv+0x464>
    dc5c:	221f      	movs	r2, #31
    dc5e:	4252      	negs	r2, r2
    dc60:	1ad3      	subs	r3, r2, r3
    dc62:	465a      	mov	r2, fp
    dc64:	40da      	lsrs	r2, r3
    dc66:	0013      	movs	r3, r2
    dc68:	2d20      	cmp	r5, #32
    dc6a:	d029      	beq.n	dcc0 <__aeabi_ddiv+0x604>
    dc6c:	2240      	movs	r2, #64	; 0x40
    dc6e:	4658      	mov	r0, fp
    dc70:	1b55      	subs	r5, r2, r5
    dc72:	40a8      	lsls	r0, r5
    dc74:	4301      	orrs	r1, r0
    dc76:	1e48      	subs	r0, r1, #1
    dc78:	4181      	sbcs	r1, r0
    dc7a:	2007      	movs	r0, #7
    dc7c:	430b      	orrs	r3, r1
    dc7e:	4018      	ands	r0, r3
    dc80:	2600      	movs	r6, #0
    dc82:	2800      	cmp	r0, #0
    dc84:	d009      	beq.n	dc9a <__aeabi_ddiv+0x5de>
    dc86:	220f      	movs	r2, #15
    dc88:	2600      	movs	r6, #0
    dc8a:	401a      	ands	r2, r3
    dc8c:	0019      	movs	r1, r3
    dc8e:	2a04      	cmp	r2, #4
    dc90:	d1bb      	bne.n	dc0a <__aeabi_ddiv+0x54e>
    dc92:	000b      	movs	r3, r1
    dc94:	0770      	lsls	r0, r6, #29
    dc96:	0276      	lsls	r6, r6, #9
    dc98:	0b36      	lsrs	r6, r6, #12
    dc9a:	08db      	lsrs	r3, r3, #3
    dc9c:	4303      	orrs	r3, r0
    dc9e:	4699      	mov	r9, r3
    dca0:	2201      	movs	r2, #1
    dca2:	4653      	mov	r3, sl
    dca4:	401a      	ands	r2, r3
    dca6:	2300      	movs	r3, #0
    dca8:	e56e      	b.n	d788 <__aeabi_ddiv+0xcc>
    dcaa:	9902      	ldr	r1, [sp, #8]
    dcac:	428d      	cmp	r5, r1
    dcae:	d8bb      	bhi.n	dc28 <__aeabi_ddiv+0x56c>
    dcb0:	469b      	mov	fp, r3
    dcb2:	2600      	movs	r6, #0
    dcb4:	e67b      	b.n	d9ae <__aeabi_ddiv+0x2f2>
    dcb6:	9803      	ldr	r0, [sp, #12]
    dcb8:	4298      	cmp	r0, r3
    dcba:	d3c5      	bcc.n	dc48 <__aeabi_ddiv+0x58c>
    dcbc:	0011      	movs	r1, r2
    dcbe:	e732      	b.n	db26 <__aeabi_ddiv+0x46a>
    dcc0:	2000      	movs	r0, #0
    dcc2:	e7d7      	b.n	dc74 <__aeabi_ddiv+0x5b8>
    dcc4:	2680      	movs	r6, #128	; 0x80
    dcc6:	465b      	mov	r3, fp
    dcc8:	0336      	lsls	r6, r6, #12
    dcca:	431e      	orrs	r6, r3
    dccc:	0336      	lsls	r6, r6, #12
    dcce:	0b36      	lsrs	r6, r6, #12
    dcd0:	9a00      	ldr	r2, [sp, #0]
    dcd2:	4689      	mov	r9, r1
    dcd4:	4b03      	ldr	r3, [pc, #12]	; (dce4 <__aeabi_ddiv+0x628>)
    dcd6:	e557      	b.n	d788 <__aeabi_ddiv+0xcc>
    dcd8:	000003ff 	.word	0x000003ff
    dcdc:	feffffff 	.word	0xfeffffff
    dce0:	000007fe 	.word	0x000007fe
    dce4:	000007ff 	.word	0x000007ff

0000dce8 <__aeabi_dmul>:
    dce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcea:	465f      	mov	r7, fp
    dcec:	4656      	mov	r6, sl
    dcee:	464d      	mov	r5, r9
    dcf0:	4644      	mov	r4, r8
    dcf2:	b4f0      	push	{r4, r5, r6, r7}
    dcf4:	030d      	lsls	r5, r1, #12
    dcf6:	4699      	mov	r9, r3
    dcf8:	004e      	lsls	r6, r1, #1
    dcfa:	0b2b      	lsrs	r3, r5, #12
    dcfc:	b087      	sub	sp, #28
    dcfe:	0007      	movs	r7, r0
    dd00:	4692      	mov	sl, r2
    dd02:	4680      	mov	r8, r0
    dd04:	469b      	mov	fp, r3
    dd06:	0d76      	lsrs	r6, r6, #21
    dd08:	0fcc      	lsrs	r4, r1, #31
    dd0a:	2e00      	cmp	r6, #0
    dd0c:	d069      	beq.n	dde2 <__aeabi_dmul+0xfa>
    dd0e:	4b6d      	ldr	r3, [pc, #436]	; (dec4 <__aeabi_dmul+0x1dc>)
    dd10:	429e      	cmp	r6, r3
    dd12:	d035      	beq.n	dd80 <__aeabi_dmul+0x98>
    dd14:	465b      	mov	r3, fp
    dd16:	2280      	movs	r2, #128	; 0x80
    dd18:	00dd      	lsls	r5, r3, #3
    dd1a:	0412      	lsls	r2, r2, #16
    dd1c:	0f43      	lsrs	r3, r0, #29
    dd1e:	4313      	orrs	r3, r2
    dd20:	432b      	orrs	r3, r5
    dd22:	469b      	mov	fp, r3
    dd24:	00c3      	lsls	r3, r0, #3
    dd26:	4698      	mov	r8, r3
    dd28:	4b67      	ldr	r3, [pc, #412]	; (dec8 <__aeabi_dmul+0x1e0>)
    dd2a:	2700      	movs	r7, #0
    dd2c:	469c      	mov	ip, r3
    dd2e:	2300      	movs	r3, #0
    dd30:	4466      	add	r6, ip
    dd32:	9301      	str	r3, [sp, #4]
    dd34:	464a      	mov	r2, r9
    dd36:	0315      	lsls	r5, r2, #12
    dd38:	0050      	lsls	r0, r2, #1
    dd3a:	0fd2      	lsrs	r2, r2, #31
    dd3c:	4653      	mov	r3, sl
    dd3e:	0b2d      	lsrs	r5, r5, #12
    dd40:	0d40      	lsrs	r0, r0, #21
    dd42:	4691      	mov	r9, r2
    dd44:	d100      	bne.n	dd48 <__aeabi_dmul+0x60>
    dd46:	e076      	b.n	de36 <__aeabi_dmul+0x14e>
    dd48:	4a5e      	ldr	r2, [pc, #376]	; (dec4 <__aeabi_dmul+0x1dc>)
    dd4a:	4290      	cmp	r0, r2
    dd4c:	d06c      	beq.n	de28 <__aeabi_dmul+0x140>
    dd4e:	2280      	movs	r2, #128	; 0x80
    dd50:	0f5b      	lsrs	r3, r3, #29
    dd52:	0412      	lsls	r2, r2, #16
    dd54:	4313      	orrs	r3, r2
    dd56:	4a5c      	ldr	r2, [pc, #368]	; (dec8 <__aeabi_dmul+0x1e0>)
    dd58:	00ed      	lsls	r5, r5, #3
    dd5a:	4694      	mov	ip, r2
    dd5c:	431d      	orrs	r5, r3
    dd5e:	4653      	mov	r3, sl
    dd60:	2200      	movs	r2, #0
    dd62:	00db      	lsls	r3, r3, #3
    dd64:	4460      	add	r0, ip
    dd66:	4649      	mov	r1, r9
    dd68:	1836      	adds	r6, r6, r0
    dd6a:	1c70      	adds	r0, r6, #1
    dd6c:	4061      	eors	r1, r4
    dd6e:	9002      	str	r0, [sp, #8]
    dd70:	4317      	orrs	r7, r2
    dd72:	2f0f      	cmp	r7, #15
    dd74:	d900      	bls.n	dd78 <__aeabi_dmul+0x90>
    dd76:	e0af      	b.n	ded8 <__aeabi_dmul+0x1f0>
    dd78:	4854      	ldr	r0, [pc, #336]	; (decc <__aeabi_dmul+0x1e4>)
    dd7a:	00bf      	lsls	r7, r7, #2
    dd7c:	59c7      	ldr	r7, [r0, r7]
    dd7e:	46bf      	mov	pc, r7
    dd80:	465b      	mov	r3, fp
    dd82:	431f      	orrs	r7, r3
    dd84:	d000      	beq.n	dd88 <__aeabi_dmul+0xa0>
    dd86:	e088      	b.n	de9a <__aeabi_dmul+0x1b2>
    dd88:	2300      	movs	r3, #0
    dd8a:	469b      	mov	fp, r3
    dd8c:	4698      	mov	r8, r3
    dd8e:	3302      	adds	r3, #2
    dd90:	2708      	movs	r7, #8
    dd92:	9301      	str	r3, [sp, #4]
    dd94:	e7ce      	b.n	dd34 <__aeabi_dmul+0x4c>
    dd96:	4649      	mov	r1, r9
    dd98:	2a02      	cmp	r2, #2
    dd9a:	d06a      	beq.n	de72 <__aeabi_dmul+0x18a>
    dd9c:	2a03      	cmp	r2, #3
    dd9e:	d100      	bne.n	dda2 <__aeabi_dmul+0xba>
    dda0:	e209      	b.n	e1b6 <__aeabi_dmul+0x4ce>
    dda2:	2a01      	cmp	r2, #1
    dda4:	d000      	beq.n	dda8 <__aeabi_dmul+0xc0>
    dda6:	e1bb      	b.n	e120 <__aeabi_dmul+0x438>
    dda8:	4011      	ands	r1, r2
    ddaa:	2200      	movs	r2, #0
    ddac:	2300      	movs	r3, #0
    ddae:	2500      	movs	r5, #0
    ddb0:	4690      	mov	r8, r2
    ddb2:	b2cc      	uxtb	r4, r1
    ddb4:	2100      	movs	r1, #0
    ddb6:	032d      	lsls	r5, r5, #12
    ddb8:	0d0a      	lsrs	r2, r1, #20
    ddba:	0512      	lsls	r2, r2, #20
    ddbc:	0b2d      	lsrs	r5, r5, #12
    ddbe:	4315      	orrs	r5, r2
    ddc0:	4a43      	ldr	r2, [pc, #268]	; (ded0 <__aeabi_dmul+0x1e8>)
    ddc2:	051b      	lsls	r3, r3, #20
    ddc4:	4015      	ands	r5, r2
    ddc6:	431d      	orrs	r5, r3
    ddc8:	006d      	lsls	r5, r5, #1
    ddca:	07e4      	lsls	r4, r4, #31
    ddcc:	086d      	lsrs	r5, r5, #1
    ddce:	4325      	orrs	r5, r4
    ddd0:	4640      	mov	r0, r8
    ddd2:	0029      	movs	r1, r5
    ddd4:	b007      	add	sp, #28
    ddd6:	bc3c      	pop	{r2, r3, r4, r5}
    ddd8:	4690      	mov	r8, r2
    ddda:	4699      	mov	r9, r3
    dddc:	46a2      	mov	sl, r4
    ddde:	46ab      	mov	fp, r5
    dde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dde2:	4303      	orrs	r3, r0
    dde4:	d052      	beq.n	de8c <__aeabi_dmul+0x1a4>
    dde6:	465b      	mov	r3, fp
    dde8:	2b00      	cmp	r3, #0
    ddea:	d100      	bne.n	ddee <__aeabi_dmul+0x106>
    ddec:	e18a      	b.n	e104 <__aeabi_dmul+0x41c>
    ddee:	4658      	mov	r0, fp
    ddf0:	f7fe fa7c 	bl	c2ec <__clzsi2>
    ddf4:	0003      	movs	r3, r0
    ddf6:	3b0b      	subs	r3, #11
    ddf8:	2b1c      	cmp	r3, #28
    ddfa:	dd00      	ble.n	ddfe <__aeabi_dmul+0x116>
    ddfc:	e17b      	b.n	e0f6 <__aeabi_dmul+0x40e>
    ddfe:	221d      	movs	r2, #29
    de00:	1ad3      	subs	r3, r2, r3
    de02:	003a      	movs	r2, r7
    de04:	0001      	movs	r1, r0
    de06:	465d      	mov	r5, fp
    de08:	40da      	lsrs	r2, r3
    de0a:	3908      	subs	r1, #8
    de0c:	408d      	lsls	r5, r1
    de0e:	0013      	movs	r3, r2
    de10:	408f      	lsls	r7, r1
    de12:	432b      	orrs	r3, r5
    de14:	469b      	mov	fp, r3
    de16:	46b8      	mov	r8, r7
    de18:	4b2e      	ldr	r3, [pc, #184]	; (ded4 <__aeabi_dmul+0x1ec>)
    de1a:	2700      	movs	r7, #0
    de1c:	469c      	mov	ip, r3
    de1e:	2300      	movs	r3, #0
    de20:	4460      	add	r0, ip
    de22:	4246      	negs	r6, r0
    de24:	9301      	str	r3, [sp, #4]
    de26:	e785      	b.n	dd34 <__aeabi_dmul+0x4c>
    de28:	4652      	mov	r2, sl
    de2a:	432a      	orrs	r2, r5
    de2c:	d12c      	bne.n	de88 <__aeabi_dmul+0x1a0>
    de2e:	2500      	movs	r5, #0
    de30:	2300      	movs	r3, #0
    de32:	2202      	movs	r2, #2
    de34:	e797      	b.n	dd66 <__aeabi_dmul+0x7e>
    de36:	4652      	mov	r2, sl
    de38:	432a      	orrs	r2, r5
    de3a:	d021      	beq.n	de80 <__aeabi_dmul+0x198>
    de3c:	2d00      	cmp	r5, #0
    de3e:	d100      	bne.n	de42 <__aeabi_dmul+0x15a>
    de40:	e154      	b.n	e0ec <__aeabi_dmul+0x404>
    de42:	0028      	movs	r0, r5
    de44:	f7fe fa52 	bl	c2ec <__clzsi2>
    de48:	0003      	movs	r3, r0
    de4a:	3b0b      	subs	r3, #11
    de4c:	2b1c      	cmp	r3, #28
    de4e:	dd00      	ble.n	de52 <__aeabi_dmul+0x16a>
    de50:	e146      	b.n	e0e0 <__aeabi_dmul+0x3f8>
    de52:	211d      	movs	r1, #29
    de54:	1acb      	subs	r3, r1, r3
    de56:	4651      	mov	r1, sl
    de58:	0002      	movs	r2, r0
    de5a:	40d9      	lsrs	r1, r3
    de5c:	4653      	mov	r3, sl
    de5e:	3a08      	subs	r2, #8
    de60:	4095      	lsls	r5, r2
    de62:	4093      	lsls	r3, r2
    de64:	430d      	orrs	r5, r1
    de66:	4a1b      	ldr	r2, [pc, #108]	; (ded4 <__aeabi_dmul+0x1ec>)
    de68:	4694      	mov	ip, r2
    de6a:	4460      	add	r0, ip
    de6c:	4240      	negs	r0, r0
    de6e:	2200      	movs	r2, #0
    de70:	e779      	b.n	dd66 <__aeabi_dmul+0x7e>
    de72:	2401      	movs	r4, #1
    de74:	2200      	movs	r2, #0
    de76:	400c      	ands	r4, r1
    de78:	4b12      	ldr	r3, [pc, #72]	; (dec4 <__aeabi_dmul+0x1dc>)
    de7a:	2500      	movs	r5, #0
    de7c:	4690      	mov	r8, r2
    de7e:	e799      	b.n	ddb4 <__aeabi_dmul+0xcc>
    de80:	2500      	movs	r5, #0
    de82:	2300      	movs	r3, #0
    de84:	2201      	movs	r2, #1
    de86:	e76e      	b.n	dd66 <__aeabi_dmul+0x7e>
    de88:	2203      	movs	r2, #3
    de8a:	e76c      	b.n	dd66 <__aeabi_dmul+0x7e>
    de8c:	2300      	movs	r3, #0
    de8e:	469b      	mov	fp, r3
    de90:	4698      	mov	r8, r3
    de92:	3301      	adds	r3, #1
    de94:	2704      	movs	r7, #4
    de96:	9301      	str	r3, [sp, #4]
    de98:	e74c      	b.n	dd34 <__aeabi_dmul+0x4c>
    de9a:	2303      	movs	r3, #3
    de9c:	270c      	movs	r7, #12
    de9e:	9301      	str	r3, [sp, #4]
    dea0:	e748      	b.n	dd34 <__aeabi_dmul+0x4c>
    dea2:	2300      	movs	r3, #0
    dea4:	2580      	movs	r5, #128	; 0x80
    dea6:	4698      	mov	r8, r3
    dea8:	2400      	movs	r4, #0
    deaa:	032d      	lsls	r5, r5, #12
    deac:	4b05      	ldr	r3, [pc, #20]	; (dec4 <__aeabi_dmul+0x1dc>)
    deae:	e781      	b.n	ddb4 <__aeabi_dmul+0xcc>
    deb0:	465d      	mov	r5, fp
    deb2:	4643      	mov	r3, r8
    deb4:	9a01      	ldr	r2, [sp, #4]
    deb6:	e76f      	b.n	dd98 <__aeabi_dmul+0xb0>
    deb8:	465d      	mov	r5, fp
    deba:	4643      	mov	r3, r8
    debc:	0021      	movs	r1, r4
    debe:	9a01      	ldr	r2, [sp, #4]
    dec0:	e76a      	b.n	dd98 <__aeabi_dmul+0xb0>
    dec2:	46c0      	nop			; (mov r8, r8)
    dec4:	000007ff 	.word	0x000007ff
    dec8:	fffffc01 	.word	0xfffffc01
    decc:	0000fc58 	.word	0x0000fc58
    ded0:	800fffff 	.word	0x800fffff
    ded4:	000003f3 	.word	0x000003f3
    ded8:	4642      	mov	r2, r8
    deda:	0c12      	lsrs	r2, r2, #16
    dedc:	4691      	mov	r9, r2
    dede:	0c1a      	lsrs	r2, r3, #16
    dee0:	4694      	mov	ip, r2
    dee2:	4642      	mov	r2, r8
    dee4:	0417      	lsls	r7, r2, #16
    dee6:	464a      	mov	r2, r9
    dee8:	041b      	lsls	r3, r3, #16
    deea:	0c1b      	lsrs	r3, r3, #16
    deec:	435a      	muls	r2, r3
    deee:	4660      	mov	r0, ip
    def0:	4690      	mov	r8, r2
    def2:	464a      	mov	r2, r9
    def4:	4342      	muls	r2, r0
    def6:	0010      	movs	r0, r2
    def8:	9203      	str	r2, [sp, #12]
    defa:	4662      	mov	r2, ip
    defc:	001c      	movs	r4, r3
    defe:	0c3f      	lsrs	r7, r7, #16
    df00:	437a      	muls	r2, r7
    df02:	437c      	muls	r4, r7
    df04:	4442      	add	r2, r8
    df06:	9201      	str	r2, [sp, #4]
    df08:	0c22      	lsrs	r2, r4, #16
    df0a:	4692      	mov	sl, r2
    df0c:	9a01      	ldr	r2, [sp, #4]
    df0e:	4452      	add	r2, sl
    df10:	4590      	cmp	r8, r2
    df12:	d906      	bls.n	df22 <__aeabi_dmul+0x23a>
    df14:	4682      	mov	sl, r0
    df16:	2080      	movs	r0, #128	; 0x80
    df18:	0240      	lsls	r0, r0, #9
    df1a:	4680      	mov	r8, r0
    df1c:	44c2      	add	sl, r8
    df1e:	4650      	mov	r0, sl
    df20:	9003      	str	r0, [sp, #12]
    df22:	0c10      	lsrs	r0, r2, #16
    df24:	9004      	str	r0, [sp, #16]
    df26:	4648      	mov	r0, r9
    df28:	0424      	lsls	r4, r4, #16
    df2a:	0c24      	lsrs	r4, r4, #16
    df2c:	0412      	lsls	r2, r2, #16
    df2e:	1912      	adds	r2, r2, r4
    df30:	9205      	str	r2, [sp, #20]
    df32:	0c2a      	lsrs	r2, r5, #16
    df34:	042d      	lsls	r5, r5, #16
    df36:	0c2d      	lsrs	r5, r5, #16
    df38:	4368      	muls	r0, r5
    df3a:	002c      	movs	r4, r5
    df3c:	4682      	mov	sl, r0
    df3e:	4648      	mov	r0, r9
    df40:	437c      	muls	r4, r7
    df42:	4350      	muls	r0, r2
    df44:	4681      	mov	r9, r0
    df46:	0c20      	lsrs	r0, r4, #16
    df48:	4680      	mov	r8, r0
    df4a:	4357      	muls	r7, r2
    df4c:	4457      	add	r7, sl
    df4e:	4447      	add	r7, r8
    df50:	45ba      	cmp	sl, r7
    df52:	d903      	bls.n	df5c <__aeabi_dmul+0x274>
    df54:	2080      	movs	r0, #128	; 0x80
    df56:	0240      	lsls	r0, r0, #9
    df58:	4680      	mov	r8, r0
    df5a:	44c1      	add	r9, r8
    df5c:	0c38      	lsrs	r0, r7, #16
    df5e:	043f      	lsls	r7, r7, #16
    df60:	46b8      	mov	r8, r7
    df62:	4448      	add	r0, r9
    df64:	0424      	lsls	r4, r4, #16
    df66:	0c24      	lsrs	r4, r4, #16
    df68:	9001      	str	r0, [sp, #4]
    df6a:	9804      	ldr	r0, [sp, #16]
    df6c:	44a0      	add	r8, r4
    df6e:	4440      	add	r0, r8
    df70:	9004      	str	r0, [sp, #16]
    df72:	4658      	mov	r0, fp
    df74:	0c00      	lsrs	r0, r0, #16
    df76:	4681      	mov	r9, r0
    df78:	4658      	mov	r0, fp
    df7a:	0404      	lsls	r4, r0, #16
    df7c:	0c20      	lsrs	r0, r4, #16
    df7e:	4682      	mov	sl, r0
    df80:	0007      	movs	r7, r0
    df82:	4648      	mov	r0, r9
    df84:	435f      	muls	r7, r3
    df86:	464c      	mov	r4, r9
    df88:	4343      	muls	r3, r0
    df8a:	4660      	mov	r0, ip
    df8c:	4360      	muls	r0, r4
    df8e:	4664      	mov	r4, ip
    df90:	4683      	mov	fp, r0
    df92:	4650      	mov	r0, sl
    df94:	4344      	muls	r4, r0
    df96:	0c38      	lsrs	r0, r7, #16
    df98:	4684      	mov	ip, r0
    df9a:	18e4      	adds	r4, r4, r3
    df9c:	4464      	add	r4, ip
    df9e:	42a3      	cmp	r3, r4
    dfa0:	d903      	bls.n	dfaa <__aeabi_dmul+0x2c2>
    dfa2:	2380      	movs	r3, #128	; 0x80
    dfa4:	025b      	lsls	r3, r3, #9
    dfa6:	469c      	mov	ip, r3
    dfa8:	44e3      	add	fp, ip
    dfaa:	4648      	mov	r0, r9
    dfac:	043f      	lsls	r7, r7, #16
    dfae:	0c23      	lsrs	r3, r4, #16
    dfb0:	0c3f      	lsrs	r7, r7, #16
    dfb2:	0424      	lsls	r4, r4, #16
    dfb4:	19e4      	adds	r4, r4, r7
    dfb6:	4657      	mov	r7, sl
    dfb8:	4368      	muls	r0, r5
    dfba:	436f      	muls	r7, r5
    dfbc:	4684      	mov	ip, r0
    dfbe:	464d      	mov	r5, r9
    dfc0:	4650      	mov	r0, sl
    dfc2:	4355      	muls	r5, r2
    dfc4:	4342      	muls	r2, r0
    dfc6:	0c38      	lsrs	r0, r7, #16
    dfc8:	4681      	mov	r9, r0
    dfca:	4462      	add	r2, ip
    dfcc:	444a      	add	r2, r9
    dfce:	445b      	add	r3, fp
    dfd0:	4594      	cmp	ip, r2
    dfd2:	d903      	bls.n	dfdc <__aeabi_dmul+0x2f4>
    dfd4:	2080      	movs	r0, #128	; 0x80
    dfd6:	0240      	lsls	r0, r0, #9
    dfd8:	4684      	mov	ip, r0
    dfda:	4465      	add	r5, ip
    dfdc:	9803      	ldr	r0, [sp, #12]
    dfde:	043f      	lsls	r7, r7, #16
    dfe0:	4683      	mov	fp, r0
    dfe2:	9804      	ldr	r0, [sp, #16]
    dfe4:	0c3f      	lsrs	r7, r7, #16
    dfe6:	4684      	mov	ip, r0
    dfe8:	44e3      	add	fp, ip
    dfea:	45c3      	cmp	fp, r8
    dfec:	4180      	sbcs	r0, r0
    dfee:	4240      	negs	r0, r0
    dff0:	4682      	mov	sl, r0
    dff2:	0410      	lsls	r0, r2, #16
    dff4:	4684      	mov	ip, r0
    dff6:	9801      	ldr	r0, [sp, #4]
    dff8:	4467      	add	r7, ip
    dffa:	4684      	mov	ip, r0
    dffc:	4467      	add	r7, ip
    dffe:	44a3      	add	fp, r4
    e000:	46bc      	mov	ip, r7
    e002:	45a3      	cmp	fp, r4
    e004:	41a4      	sbcs	r4, r4
    e006:	4699      	mov	r9, r3
    e008:	44d4      	add	ip, sl
    e00a:	4264      	negs	r4, r4
    e00c:	4287      	cmp	r7, r0
    e00e:	41bf      	sbcs	r7, r7
    e010:	45d4      	cmp	ip, sl
    e012:	4180      	sbcs	r0, r0
    e014:	44e1      	add	r9, ip
    e016:	46a0      	mov	r8, r4
    e018:	4599      	cmp	r9, r3
    e01a:	419b      	sbcs	r3, r3
    e01c:	427f      	negs	r7, r7
    e01e:	4240      	negs	r0, r0
    e020:	44c8      	add	r8, r9
    e022:	4307      	orrs	r7, r0
    e024:	0c12      	lsrs	r2, r2, #16
    e026:	18ba      	adds	r2, r7, r2
    e028:	45a0      	cmp	r8, r4
    e02a:	41a4      	sbcs	r4, r4
    e02c:	425f      	negs	r7, r3
    e02e:	003b      	movs	r3, r7
    e030:	4264      	negs	r4, r4
    e032:	4323      	orrs	r3, r4
    e034:	18d7      	adds	r7, r2, r3
    e036:	4643      	mov	r3, r8
    e038:	197d      	adds	r5, r7, r5
    e03a:	0ddb      	lsrs	r3, r3, #23
    e03c:	026d      	lsls	r5, r5, #9
    e03e:	431d      	orrs	r5, r3
    e040:	465b      	mov	r3, fp
    e042:	025a      	lsls	r2, r3, #9
    e044:	9b05      	ldr	r3, [sp, #20]
    e046:	431a      	orrs	r2, r3
    e048:	1e53      	subs	r3, r2, #1
    e04a:	419a      	sbcs	r2, r3
    e04c:	465b      	mov	r3, fp
    e04e:	0ddb      	lsrs	r3, r3, #23
    e050:	431a      	orrs	r2, r3
    e052:	4643      	mov	r3, r8
    e054:	025b      	lsls	r3, r3, #9
    e056:	4313      	orrs	r3, r2
    e058:	01ea      	lsls	r2, r5, #7
    e05a:	d507      	bpl.n	e06c <__aeabi_dmul+0x384>
    e05c:	2201      	movs	r2, #1
    e05e:	085c      	lsrs	r4, r3, #1
    e060:	4013      	ands	r3, r2
    e062:	4323      	orrs	r3, r4
    e064:	07ea      	lsls	r2, r5, #31
    e066:	9e02      	ldr	r6, [sp, #8]
    e068:	4313      	orrs	r3, r2
    e06a:	086d      	lsrs	r5, r5, #1
    e06c:	4a57      	ldr	r2, [pc, #348]	; (e1cc <__aeabi_dmul+0x4e4>)
    e06e:	18b2      	adds	r2, r6, r2
    e070:	2a00      	cmp	r2, #0
    e072:	dd4b      	ble.n	e10c <__aeabi_dmul+0x424>
    e074:	0758      	lsls	r0, r3, #29
    e076:	d009      	beq.n	e08c <__aeabi_dmul+0x3a4>
    e078:	200f      	movs	r0, #15
    e07a:	4018      	ands	r0, r3
    e07c:	2804      	cmp	r0, #4
    e07e:	d005      	beq.n	e08c <__aeabi_dmul+0x3a4>
    e080:	1d18      	adds	r0, r3, #4
    e082:	4298      	cmp	r0, r3
    e084:	419b      	sbcs	r3, r3
    e086:	425b      	negs	r3, r3
    e088:	18ed      	adds	r5, r5, r3
    e08a:	0003      	movs	r3, r0
    e08c:	01e8      	lsls	r0, r5, #7
    e08e:	d504      	bpl.n	e09a <__aeabi_dmul+0x3b2>
    e090:	4a4f      	ldr	r2, [pc, #316]	; (e1d0 <__aeabi_dmul+0x4e8>)
    e092:	4015      	ands	r5, r2
    e094:	2280      	movs	r2, #128	; 0x80
    e096:	00d2      	lsls	r2, r2, #3
    e098:	18b2      	adds	r2, r6, r2
    e09a:	484e      	ldr	r0, [pc, #312]	; (e1d4 <__aeabi_dmul+0x4ec>)
    e09c:	4282      	cmp	r2, r0
    e09e:	dd00      	ble.n	e0a2 <__aeabi_dmul+0x3ba>
    e0a0:	e6e7      	b.n	de72 <__aeabi_dmul+0x18a>
    e0a2:	2401      	movs	r4, #1
    e0a4:	08db      	lsrs	r3, r3, #3
    e0a6:	0768      	lsls	r0, r5, #29
    e0a8:	4318      	orrs	r0, r3
    e0aa:	026d      	lsls	r5, r5, #9
    e0ac:	0553      	lsls	r3, r2, #21
    e0ae:	4680      	mov	r8, r0
    e0b0:	0b2d      	lsrs	r5, r5, #12
    e0b2:	0d5b      	lsrs	r3, r3, #21
    e0b4:	400c      	ands	r4, r1
    e0b6:	e67d      	b.n	ddb4 <__aeabi_dmul+0xcc>
    e0b8:	2280      	movs	r2, #128	; 0x80
    e0ba:	4659      	mov	r1, fp
    e0bc:	0312      	lsls	r2, r2, #12
    e0be:	4211      	tst	r1, r2
    e0c0:	d008      	beq.n	e0d4 <__aeabi_dmul+0x3ec>
    e0c2:	4215      	tst	r5, r2
    e0c4:	d106      	bne.n	e0d4 <__aeabi_dmul+0x3ec>
    e0c6:	4315      	orrs	r5, r2
    e0c8:	032d      	lsls	r5, r5, #12
    e0ca:	4698      	mov	r8, r3
    e0cc:	0b2d      	lsrs	r5, r5, #12
    e0ce:	464c      	mov	r4, r9
    e0d0:	4b41      	ldr	r3, [pc, #260]	; (e1d8 <__aeabi_dmul+0x4f0>)
    e0d2:	e66f      	b.n	ddb4 <__aeabi_dmul+0xcc>
    e0d4:	465d      	mov	r5, fp
    e0d6:	4315      	orrs	r5, r2
    e0d8:	032d      	lsls	r5, r5, #12
    e0da:	0b2d      	lsrs	r5, r5, #12
    e0dc:	4b3e      	ldr	r3, [pc, #248]	; (e1d8 <__aeabi_dmul+0x4f0>)
    e0de:	e669      	b.n	ddb4 <__aeabi_dmul+0xcc>
    e0e0:	0003      	movs	r3, r0
    e0e2:	4655      	mov	r5, sl
    e0e4:	3b28      	subs	r3, #40	; 0x28
    e0e6:	409d      	lsls	r5, r3
    e0e8:	2300      	movs	r3, #0
    e0ea:	e6bc      	b.n	de66 <__aeabi_dmul+0x17e>
    e0ec:	4650      	mov	r0, sl
    e0ee:	f7fe f8fd 	bl	c2ec <__clzsi2>
    e0f2:	3020      	adds	r0, #32
    e0f4:	e6a8      	b.n	de48 <__aeabi_dmul+0x160>
    e0f6:	0003      	movs	r3, r0
    e0f8:	3b28      	subs	r3, #40	; 0x28
    e0fa:	409f      	lsls	r7, r3
    e0fc:	2300      	movs	r3, #0
    e0fe:	46bb      	mov	fp, r7
    e100:	4698      	mov	r8, r3
    e102:	e689      	b.n	de18 <__aeabi_dmul+0x130>
    e104:	f7fe f8f2 	bl	c2ec <__clzsi2>
    e108:	3020      	adds	r0, #32
    e10a:	e673      	b.n	ddf4 <__aeabi_dmul+0x10c>
    e10c:	2401      	movs	r4, #1
    e10e:	1aa6      	subs	r6, r4, r2
    e110:	2e38      	cmp	r6, #56	; 0x38
    e112:	dd07      	ble.n	e124 <__aeabi_dmul+0x43c>
    e114:	2200      	movs	r2, #0
    e116:	400c      	ands	r4, r1
    e118:	2300      	movs	r3, #0
    e11a:	2500      	movs	r5, #0
    e11c:	4690      	mov	r8, r2
    e11e:	e649      	b.n	ddb4 <__aeabi_dmul+0xcc>
    e120:	9e02      	ldr	r6, [sp, #8]
    e122:	e7a3      	b.n	e06c <__aeabi_dmul+0x384>
    e124:	2e1f      	cmp	r6, #31
    e126:	dc20      	bgt.n	e16a <__aeabi_dmul+0x482>
    e128:	2220      	movs	r2, #32
    e12a:	002c      	movs	r4, r5
    e12c:	0018      	movs	r0, r3
    e12e:	1b92      	subs	r2, r2, r6
    e130:	40f0      	lsrs	r0, r6
    e132:	4094      	lsls	r4, r2
    e134:	4093      	lsls	r3, r2
    e136:	4304      	orrs	r4, r0
    e138:	1e58      	subs	r0, r3, #1
    e13a:	4183      	sbcs	r3, r0
    e13c:	431c      	orrs	r4, r3
    e13e:	40f5      	lsrs	r5, r6
    e140:	0763      	lsls	r3, r4, #29
    e142:	d009      	beq.n	e158 <__aeabi_dmul+0x470>
    e144:	230f      	movs	r3, #15
    e146:	4023      	ands	r3, r4
    e148:	2b04      	cmp	r3, #4
    e14a:	d005      	beq.n	e158 <__aeabi_dmul+0x470>
    e14c:	0023      	movs	r3, r4
    e14e:	1d1c      	adds	r4, r3, #4
    e150:	429c      	cmp	r4, r3
    e152:	4192      	sbcs	r2, r2
    e154:	4252      	negs	r2, r2
    e156:	18ad      	adds	r5, r5, r2
    e158:	022b      	lsls	r3, r5, #8
    e15a:	d51f      	bpl.n	e19c <__aeabi_dmul+0x4b4>
    e15c:	2401      	movs	r4, #1
    e15e:	2200      	movs	r2, #0
    e160:	400c      	ands	r4, r1
    e162:	2301      	movs	r3, #1
    e164:	2500      	movs	r5, #0
    e166:	4690      	mov	r8, r2
    e168:	e624      	b.n	ddb4 <__aeabi_dmul+0xcc>
    e16a:	201f      	movs	r0, #31
    e16c:	002c      	movs	r4, r5
    e16e:	4240      	negs	r0, r0
    e170:	1a82      	subs	r2, r0, r2
    e172:	40d4      	lsrs	r4, r2
    e174:	2e20      	cmp	r6, #32
    e176:	d01c      	beq.n	e1b2 <__aeabi_dmul+0x4ca>
    e178:	2240      	movs	r2, #64	; 0x40
    e17a:	1b96      	subs	r6, r2, r6
    e17c:	40b5      	lsls	r5, r6
    e17e:	432b      	orrs	r3, r5
    e180:	1e58      	subs	r0, r3, #1
    e182:	4183      	sbcs	r3, r0
    e184:	2007      	movs	r0, #7
    e186:	4323      	orrs	r3, r4
    e188:	4018      	ands	r0, r3
    e18a:	2500      	movs	r5, #0
    e18c:	2800      	cmp	r0, #0
    e18e:	d009      	beq.n	e1a4 <__aeabi_dmul+0x4bc>
    e190:	220f      	movs	r2, #15
    e192:	2500      	movs	r5, #0
    e194:	401a      	ands	r2, r3
    e196:	001c      	movs	r4, r3
    e198:	2a04      	cmp	r2, #4
    e19a:	d1d8      	bne.n	e14e <__aeabi_dmul+0x466>
    e19c:	0023      	movs	r3, r4
    e19e:	0768      	lsls	r0, r5, #29
    e1a0:	026d      	lsls	r5, r5, #9
    e1a2:	0b2d      	lsrs	r5, r5, #12
    e1a4:	2401      	movs	r4, #1
    e1a6:	08db      	lsrs	r3, r3, #3
    e1a8:	4303      	orrs	r3, r0
    e1aa:	4698      	mov	r8, r3
    e1ac:	400c      	ands	r4, r1
    e1ae:	2300      	movs	r3, #0
    e1b0:	e600      	b.n	ddb4 <__aeabi_dmul+0xcc>
    e1b2:	2500      	movs	r5, #0
    e1b4:	e7e3      	b.n	e17e <__aeabi_dmul+0x496>
    e1b6:	2280      	movs	r2, #128	; 0x80
    e1b8:	2401      	movs	r4, #1
    e1ba:	0312      	lsls	r2, r2, #12
    e1bc:	4315      	orrs	r5, r2
    e1be:	032d      	lsls	r5, r5, #12
    e1c0:	4698      	mov	r8, r3
    e1c2:	0b2d      	lsrs	r5, r5, #12
    e1c4:	400c      	ands	r4, r1
    e1c6:	4b04      	ldr	r3, [pc, #16]	; (e1d8 <__aeabi_dmul+0x4f0>)
    e1c8:	e5f4      	b.n	ddb4 <__aeabi_dmul+0xcc>
    e1ca:	46c0      	nop			; (mov r8, r8)
    e1cc:	000003ff 	.word	0x000003ff
    e1d0:	feffffff 	.word	0xfeffffff
    e1d4:	000007fe 	.word	0x000007fe
    e1d8:	000007ff 	.word	0x000007ff

0000e1dc <__aeabi_dsub>:
    e1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1de:	4657      	mov	r7, sl
    e1e0:	464e      	mov	r6, r9
    e1e2:	4645      	mov	r5, r8
    e1e4:	b4e0      	push	{r5, r6, r7}
    e1e6:	000e      	movs	r6, r1
    e1e8:	0011      	movs	r1, r2
    e1ea:	0ff2      	lsrs	r2, r6, #31
    e1ec:	4692      	mov	sl, r2
    e1ee:	00c5      	lsls	r5, r0, #3
    e1f0:	0f42      	lsrs	r2, r0, #29
    e1f2:	0318      	lsls	r0, r3, #12
    e1f4:	0337      	lsls	r7, r6, #12
    e1f6:	0074      	lsls	r4, r6, #1
    e1f8:	0a40      	lsrs	r0, r0, #9
    e1fa:	0f4e      	lsrs	r6, r1, #29
    e1fc:	0a7f      	lsrs	r7, r7, #9
    e1fe:	4330      	orrs	r0, r6
    e200:	4ecf      	ldr	r6, [pc, #828]	; (e540 <__aeabi_dsub+0x364>)
    e202:	4317      	orrs	r7, r2
    e204:	005a      	lsls	r2, r3, #1
    e206:	0d64      	lsrs	r4, r4, #21
    e208:	0d52      	lsrs	r2, r2, #21
    e20a:	0fdb      	lsrs	r3, r3, #31
    e20c:	00c9      	lsls	r1, r1, #3
    e20e:	42b2      	cmp	r2, r6
    e210:	d100      	bne.n	e214 <__aeabi_dsub+0x38>
    e212:	e0e5      	b.n	e3e0 <__aeabi_dsub+0x204>
    e214:	2601      	movs	r6, #1
    e216:	4073      	eors	r3, r6
    e218:	1aa6      	subs	r6, r4, r2
    e21a:	46b4      	mov	ip, r6
    e21c:	4553      	cmp	r3, sl
    e21e:	d100      	bne.n	e222 <__aeabi_dsub+0x46>
    e220:	e0af      	b.n	e382 <__aeabi_dsub+0x1a6>
    e222:	2e00      	cmp	r6, #0
    e224:	dc00      	bgt.n	e228 <__aeabi_dsub+0x4c>
    e226:	e10d      	b.n	e444 <__aeabi_dsub+0x268>
    e228:	2a00      	cmp	r2, #0
    e22a:	d13a      	bne.n	e2a2 <__aeabi_dsub+0xc6>
    e22c:	0003      	movs	r3, r0
    e22e:	430b      	orrs	r3, r1
    e230:	d000      	beq.n	e234 <__aeabi_dsub+0x58>
    e232:	e0e4      	b.n	e3fe <__aeabi_dsub+0x222>
    e234:	076b      	lsls	r3, r5, #29
    e236:	d009      	beq.n	e24c <__aeabi_dsub+0x70>
    e238:	230f      	movs	r3, #15
    e23a:	402b      	ands	r3, r5
    e23c:	2b04      	cmp	r3, #4
    e23e:	d005      	beq.n	e24c <__aeabi_dsub+0x70>
    e240:	1d2b      	adds	r3, r5, #4
    e242:	42ab      	cmp	r3, r5
    e244:	41ad      	sbcs	r5, r5
    e246:	426d      	negs	r5, r5
    e248:	197f      	adds	r7, r7, r5
    e24a:	001d      	movs	r5, r3
    e24c:	023b      	lsls	r3, r7, #8
    e24e:	d400      	bmi.n	e252 <__aeabi_dsub+0x76>
    e250:	e088      	b.n	e364 <__aeabi_dsub+0x188>
    e252:	4bbb      	ldr	r3, [pc, #748]	; (e540 <__aeabi_dsub+0x364>)
    e254:	3401      	adds	r4, #1
    e256:	429c      	cmp	r4, r3
    e258:	d100      	bne.n	e25c <__aeabi_dsub+0x80>
    e25a:	e110      	b.n	e47e <__aeabi_dsub+0x2a2>
    e25c:	003a      	movs	r2, r7
    e25e:	4bb9      	ldr	r3, [pc, #740]	; (e544 <__aeabi_dsub+0x368>)
    e260:	4651      	mov	r1, sl
    e262:	401a      	ands	r2, r3
    e264:	2301      	movs	r3, #1
    e266:	0750      	lsls	r0, r2, #29
    e268:	08ed      	lsrs	r5, r5, #3
    e26a:	0252      	lsls	r2, r2, #9
    e26c:	0564      	lsls	r4, r4, #21
    e26e:	4305      	orrs	r5, r0
    e270:	0b12      	lsrs	r2, r2, #12
    e272:	0d64      	lsrs	r4, r4, #21
    e274:	400b      	ands	r3, r1
    e276:	2100      	movs	r1, #0
    e278:	0028      	movs	r0, r5
    e27a:	0312      	lsls	r2, r2, #12
    e27c:	0d0d      	lsrs	r5, r1, #20
    e27e:	0b12      	lsrs	r2, r2, #12
    e280:	0564      	lsls	r4, r4, #21
    e282:	052d      	lsls	r5, r5, #20
    e284:	4315      	orrs	r5, r2
    e286:	0862      	lsrs	r2, r4, #1
    e288:	4caf      	ldr	r4, [pc, #700]	; (e548 <__aeabi_dsub+0x36c>)
    e28a:	07db      	lsls	r3, r3, #31
    e28c:	402c      	ands	r4, r5
    e28e:	4314      	orrs	r4, r2
    e290:	0064      	lsls	r4, r4, #1
    e292:	0864      	lsrs	r4, r4, #1
    e294:	431c      	orrs	r4, r3
    e296:	0021      	movs	r1, r4
    e298:	bc1c      	pop	{r2, r3, r4}
    e29a:	4690      	mov	r8, r2
    e29c:	4699      	mov	r9, r3
    e29e:	46a2      	mov	sl, r4
    e2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2a2:	4ba7      	ldr	r3, [pc, #668]	; (e540 <__aeabi_dsub+0x364>)
    e2a4:	429c      	cmp	r4, r3
    e2a6:	d0c5      	beq.n	e234 <__aeabi_dsub+0x58>
    e2a8:	2380      	movs	r3, #128	; 0x80
    e2aa:	041b      	lsls	r3, r3, #16
    e2ac:	4318      	orrs	r0, r3
    e2ae:	4663      	mov	r3, ip
    e2b0:	2b38      	cmp	r3, #56	; 0x38
    e2b2:	dd00      	ble.n	e2b6 <__aeabi_dsub+0xda>
    e2b4:	e0fd      	b.n	e4b2 <__aeabi_dsub+0x2d6>
    e2b6:	2b1f      	cmp	r3, #31
    e2b8:	dd00      	ble.n	e2bc <__aeabi_dsub+0xe0>
    e2ba:	e130      	b.n	e51e <__aeabi_dsub+0x342>
    e2bc:	4662      	mov	r2, ip
    e2be:	2320      	movs	r3, #32
    e2c0:	1a9b      	subs	r3, r3, r2
    e2c2:	0002      	movs	r2, r0
    e2c4:	409a      	lsls	r2, r3
    e2c6:	4666      	mov	r6, ip
    e2c8:	4690      	mov	r8, r2
    e2ca:	000a      	movs	r2, r1
    e2cc:	4099      	lsls	r1, r3
    e2ce:	40f2      	lsrs	r2, r6
    e2d0:	4646      	mov	r6, r8
    e2d2:	1e4b      	subs	r3, r1, #1
    e2d4:	4199      	sbcs	r1, r3
    e2d6:	4332      	orrs	r2, r6
    e2d8:	4311      	orrs	r1, r2
    e2da:	4663      	mov	r3, ip
    e2dc:	0002      	movs	r2, r0
    e2de:	40da      	lsrs	r2, r3
    e2e0:	1a69      	subs	r1, r5, r1
    e2e2:	428d      	cmp	r5, r1
    e2e4:	419b      	sbcs	r3, r3
    e2e6:	000d      	movs	r5, r1
    e2e8:	1aba      	subs	r2, r7, r2
    e2ea:	425b      	negs	r3, r3
    e2ec:	1ad7      	subs	r7, r2, r3
    e2ee:	023b      	lsls	r3, r7, #8
    e2f0:	d535      	bpl.n	e35e <__aeabi_dsub+0x182>
    e2f2:	027a      	lsls	r2, r7, #9
    e2f4:	0a53      	lsrs	r3, r2, #9
    e2f6:	4698      	mov	r8, r3
    e2f8:	4643      	mov	r3, r8
    e2fa:	2b00      	cmp	r3, #0
    e2fc:	d100      	bne.n	e300 <__aeabi_dsub+0x124>
    e2fe:	e0c4      	b.n	e48a <__aeabi_dsub+0x2ae>
    e300:	4640      	mov	r0, r8
    e302:	f7fd fff3 	bl	c2ec <__clzsi2>
    e306:	0003      	movs	r3, r0
    e308:	3b08      	subs	r3, #8
    e30a:	2b1f      	cmp	r3, #31
    e30c:	dd00      	ble.n	e310 <__aeabi_dsub+0x134>
    e30e:	e0c5      	b.n	e49c <__aeabi_dsub+0x2c0>
    e310:	2220      	movs	r2, #32
    e312:	0029      	movs	r1, r5
    e314:	1ad2      	subs	r2, r2, r3
    e316:	4647      	mov	r7, r8
    e318:	40d1      	lsrs	r1, r2
    e31a:	409f      	lsls	r7, r3
    e31c:	000a      	movs	r2, r1
    e31e:	409d      	lsls	r5, r3
    e320:	433a      	orrs	r2, r7
    e322:	429c      	cmp	r4, r3
    e324:	dd00      	ble.n	e328 <__aeabi_dsub+0x14c>
    e326:	e0c0      	b.n	e4aa <__aeabi_dsub+0x2ce>
    e328:	1b1c      	subs	r4, r3, r4
    e32a:	1c63      	adds	r3, r4, #1
    e32c:	2b1f      	cmp	r3, #31
    e32e:	dd00      	ble.n	e332 <__aeabi_dsub+0x156>
    e330:	e0e4      	b.n	e4fc <__aeabi_dsub+0x320>
    e332:	2120      	movs	r1, #32
    e334:	0014      	movs	r4, r2
    e336:	0028      	movs	r0, r5
    e338:	1ac9      	subs	r1, r1, r3
    e33a:	40d8      	lsrs	r0, r3
    e33c:	408c      	lsls	r4, r1
    e33e:	408d      	lsls	r5, r1
    e340:	4304      	orrs	r4, r0
    e342:	40da      	lsrs	r2, r3
    e344:	1e68      	subs	r0, r5, #1
    e346:	4185      	sbcs	r5, r0
    e348:	0017      	movs	r7, r2
    e34a:	4325      	orrs	r5, r4
    e34c:	2400      	movs	r4, #0
    e34e:	e771      	b.n	e234 <__aeabi_dsub+0x58>
    e350:	4642      	mov	r2, r8
    e352:	4663      	mov	r3, ip
    e354:	431a      	orrs	r2, r3
    e356:	d100      	bne.n	e35a <__aeabi_dsub+0x17e>
    e358:	e24c      	b.n	e7f4 <__aeabi_dsub+0x618>
    e35a:	4667      	mov	r7, ip
    e35c:	4645      	mov	r5, r8
    e35e:	076b      	lsls	r3, r5, #29
    e360:	d000      	beq.n	e364 <__aeabi_dsub+0x188>
    e362:	e769      	b.n	e238 <__aeabi_dsub+0x5c>
    e364:	2301      	movs	r3, #1
    e366:	4651      	mov	r1, sl
    e368:	0778      	lsls	r0, r7, #29
    e36a:	08ed      	lsrs	r5, r5, #3
    e36c:	08fa      	lsrs	r2, r7, #3
    e36e:	400b      	ands	r3, r1
    e370:	4305      	orrs	r5, r0
    e372:	4973      	ldr	r1, [pc, #460]	; (e540 <__aeabi_dsub+0x364>)
    e374:	428c      	cmp	r4, r1
    e376:	d038      	beq.n	e3ea <__aeabi_dsub+0x20e>
    e378:	0312      	lsls	r2, r2, #12
    e37a:	0564      	lsls	r4, r4, #21
    e37c:	0b12      	lsrs	r2, r2, #12
    e37e:	0d64      	lsrs	r4, r4, #21
    e380:	e779      	b.n	e276 <__aeabi_dsub+0x9a>
    e382:	2e00      	cmp	r6, #0
    e384:	dc00      	bgt.n	e388 <__aeabi_dsub+0x1ac>
    e386:	e09a      	b.n	e4be <__aeabi_dsub+0x2e2>
    e388:	2a00      	cmp	r2, #0
    e38a:	d047      	beq.n	e41c <__aeabi_dsub+0x240>
    e38c:	4a6c      	ldr	r2, [pc, #432]	; (e540 <__aeabi_dsub+0x364>)
    e38e:	4294      	cmp	r4, r2
    e390:	d100      	bne.n	e394 <__aeabi_dsub+0x1b8>
    e392:	e74f      	b.n	e234 <__aeabi_dsub+0x58>
    e394:	2280      	movs	r2, #128	; 0x80
    e396:	0412      	lsls	r2, r2, #16
    e398:	4310      	orrs	r0, r2
    e39a:	4662      	mov	r2, ip
    e39c:	2a38      	cmp	r2, #56	; 0x38
    e39e:	dc00      	bgt.n	e3a2 <__aeabi_dsub+0x1c6>
    e3a0:	e108      	b.n	e5b4 <__aeabi_dsub+0x3d8>
    e3a2:	4301      	orrs	r1, r0
    e3a4:	1e48      	subs	r0, r1, #1
    e3a6:	4181      	sbcs	r1, r0
    e3a8:	2200      	movs	r2, #0
    e3aa:	b2c9      	uxtb	r1, r1
    e3ac:	1949      	adds	r1, r1, r5
    e3ae:	19d2      	adds	r2, r2, r7
    e3b0:	42a9      	cmp	r1, r5
    e3b2:	41bf      	sbcs	r7, r7
    e3b4:	000d      	movs	r5, r1
    e3b6:	427f      	negs	r7, r7
    e3b8:	18bf      	adds	r7, r7, r2
    e3ba:	023a      	lsls	r2, r7, #8
    e3bc:	d400      	bmi.n	e3c0 <__aeabi_dsub+0x1e4>
    e3be:	e142      	b.n	e646 <__aeabi_dsub+0x46a>
    e3c0:	4a5f      	ldr	r2, [pc, #380]	; (e540 <__aeabi_dsub+0x364>)
    e3c2:	3401      	adds	r4, #1
    e3c4:	4294      	cmp	r4, r2
    e3c6:	d100      	bne.n	e3ca <__aeabi_dsub+0x1ee>
    e3c8:	e14e      	b.n	e668 <__aeabi_dsub+0x48c>
    e3ca:	2001      	movs	r0, #1
    e3cc:	4a5d      	ldr	r2, [pc, #372]	; (e544 <__aeabi_dsub+0x368>)
    e3ce:	0869      	lsrs	r1, r5, #1
    e3d0:	403a      	ands	r2, r7
    e3d2:	4028      	ands	r0, r5
    e3d4:	4308      	orrs	r0, r1
    e3d6:	07d5      	lsls	r5, r2, #31
    e3d8:	4305      	orrs	r5, r0
    e3da:	0857      	lsrs	r7, r2, #1
    e3dc:	469a      	mov	sl, r3
    e3de:	e729      	b.n	e234 <__aeabi_dsub+0x58>
    e3e0:	0006      	movs	r6, r0
    e3e2:	430e      	orrs	r6, r1
    e3e4:	d000      	beq.n	e3e8 <__aeabi_dsub+0x20c>
    e3e6:	e717      	b.n	e218 <__aeabi_dsub+0x3c>
    e3e8:	e714      	b.n	e214 <__aeabi_dsub+0x38>
    e3ea:	0029      	movs	r1, r5
    e3ec:	4311      	orrs	r1, r2
    e3ee:	d100      	bne.n	e3f2 <__aeabi_dsub+0x216>
    e3f0:	e1f9      	b.n	e7e6 <__aeabi_dsub+0x60a>
    e3f2:	2180      	movs	r1, #128	; 0x80
    e3f4:	0309      	lsls	r1, r1, #12
    e3f6:	430a      	orrs	r2, r1
    e3f8:	0312      	lsls	r2, r2, #12
    e3fa:	0b12      	lsrs	r2, r2, #12
    e3fc:	e73b      	b.n	e276 <__aeabi_dsub+0x9a>
    e3fe:	2301      	movs	r3, #1
    e400:	425b      	negs	r3, r3
    e402:	4698      	mov	r8, r3
    e404:	44c4      	add	ip, r8
    e406:	4663      	mov	r3, ip
    e408:	2b00      	cmp	r3, #0
    e40a:	d172      	bne.n	e4f2 <__aeabi_dsub+0x316>
    e40c:	1a69      	subs	r1, r5, r1
    e40e:	428d      	cmp	r5, r1
    e410:	419b      	sbcs	r3, r3
    e412:	1a3f      	subs	r7, r7, r0
    e414:	425b      	negs	r3, r3
    e416:	1aff      	subs	r7, r7, r3
    e418:	000d      	movs	r5, r1
    e41a:	e768      	b.n	e2ee <__aeabi_dsub+0x112>
    e41c:	0002      	movs	r2, r0
    e41e:	430a      	orrs	r2, r1
    e420:	d100      	bne.n	e424 <__aeabi_dsub+0x248>
    e422:	e707      	b.n	e234 <__aeabi_dsub+0x58>
    e424:	2201      	movs	r2, #1
    e426:	4252      	negs	r2, r2
    e428:	4690      	mov	r8, r2
    e42a:	44c4      	add	ip, r8
    e42c:	4662      	mov	r2, ip
    e42e:	2a00      	cmp	r2, #0
    e430:	d000      	beq.n	e434 <__aeabi_dsub+0x258>
    e432:	e0e6      	b.n	e602 <__aeabi_dsub+0x426>
    e434:	1869      	adds	r1, r5, r1
    e436:	42a9      	cmp	r1, r5
    e438:	41b6      	sbcs	r6, r6
    e43a:	183f      	adds	r7, r7, r0
    e43c:	4276      	negs	r6, r6
    e43e:	19f7      	adds	r7, r6, r7
    e440:	000d      	movs	r5, r1
    e442:	e7ba      	b.n	e3ba <__aeabi_dsub+0x1de>
    e444:	2e00      	cmp	r6, #0
    e446:	d000      	beq.n	e44a <__aeabi_dsub+0x26e>
    e448:	e080      	b.n	e54c <__aeabi_dsub+0x370>
    e44a:	1c62      	adds	r2, r4, #1
    e44c:	0552      	lsls	r2, r2, #21
    e44e:	0d52      	lsrs	r2, r2, #21
    e450:	2a01      	cmp	r2, #1
    e452:	dc00      	bgt.n	e456 <__aeabi_dsub+0x27a>
    e454:	e0f9      	b.n	e64a <__aeabi_dsub+0x46e>
    e456:	1a6a      	subs	r2, r5, r1
    e458:	4691      	mov	r9, r2
    e45a:	454d      	cmp	r5, r9
    e45c:	41b6      	sbcs	r6, r6
    e45e:	1a3a      	subs	r2, r7, r0
    e460:	4276      	negs	r6, r6
    e462:	1b92      	subs	r2, r2, r6
    e464:	4690      	mov	r8, r2
    e466:	0212      	lsls	r2, r2, #8
    e468:	d400      	bmi.n	e46c <__aeabi_dsub+0x290>
    e46a:	e099      	b.n	e5a0 <__aeabi_dsub+0x3c4>
    e46c:	1b4d      	subs	r5, r1, r5
    e46e:	42a9      	cmp	r1, r5
    e470:	4189      	sbcs	r1, r1
    e472:	1bc7      	subs	r7, r0, r7
    e474:	4249      	negs	r1, r1
    e476:	1a7a      	subs	r2, r7, r1
    e478:	4690      	mov	r8, r2
    e47a:	469a      	mov	sl, r3
    e47c:	e73c      	b.n	e2f8 <__aeabi_dsub+0x11c>
    e47e:	4652      	mov	r2, sl
    e480:	2301      	movs	r3, #1
    e482:	2500      	movs	r5, #0
    e484:	4013      	ands	r3, r2
    e486:	2200      	movs	r2, #0
    e488:	e6f5      	b.n	e276 <__aeabi_dsub+0x9a>
    e48a:	0028      	movs	r0, r5
    e48c:	f7fd ff2e 	bl	c2ec <__clzsi2>
    e490:	3020      	adds	r0, #32
    e492:	0003      	movs	r3, r0
    e494:	3b08      	subs	r3, #8
    e496:	2b1f      	cmp	r3, #31
    e498:	dc00      	bgt.n	e49c <__aeabi_dsub+0x2c0>
    e49a:	e739      	b.n	e310 <__aeabi_dsub+0x134>
    e49c:	002a      	movs	r2, r5
    e49e:	3828      	subs	r0, #40	; 0x28
    e4a0:	4082      	lsls	r2, r0
    e4a2:	2500      	movs	r5, #0
    e4a4:	429c      	cmp	r4, r3
    e4a6:	dc00      	bgt.n	e4aa <__aeabi_dsub+0x2ce>
    e4a8:	e73e      	b.n	e328 <__aeabi_dsub+0x14c>
    e4aa:	4f26      	ldr	r7, [pc, #152]	; (e544 <__aeabi_dsub+0x368>)
    e4ac:	1ae4      	subs	r4, r4, r3
    e4ae:	4017      	ands	r7, r2
    e4b0:	e6c0      	b.n	e234 <__aeabi_dsub+0x58>
    e4b2:	4301      	orrs	r1, r0
    e4b4:	1e48      	subs	r0, r1, #1
    e4b6:	4181      	sbcs	r1, r0
    e4b8:	2200      	movs	r2, #0
    e4ba:	b2c9      	uxtb	r1, r1
    e4bc:	e710      	b.n	e2e0 <__aeabi_dsub+0x104>
    e4be:	2e00      	cmp	r6, #0
    e4c0:	d000      	beq.n	e4c4 <__aeabi_dsub+0x2e8>
    e4c2:	e0f1      	b.n	e6a8 <__aeabi_dsub+0x4cc>
    e4c4:	1c62      	adds	r2, r4, #1
    e4c6:	4694      	mov	ip, r2
    e4c8:	0552      	lsls	r2, r2, #21
    e4ca:	0d52      	lsrs	r2, r2, #21
    e4cc:	2a01      	cmp	r2, #1
    e4ce:	dc00      	bgt.n	e4d2 <__aeabi_dsub+0x2f6>
    e4d0:	e0a0      	b.n	e614 <__aeabi_dsub+0x438>
    e4d2:	4a1b      	ldr	r2, [pc, #108]	; (e540 <__aeabi_dsub+0x364>)
    e4d4:	4594      	cmp	ip, r2
    e4d6:	d100      	bne.n	e4da <__aeabi_dsub+0x2fe>
    e4d8:	e0c5      	b.n	e666 <__aeabi_dsub+0x48a>
    e4da:	1869      	adds	r1, r5, r1
    e4dc:	42a9      	cmp	r1, r5
    e4de:	4192      	sbcs	r2, r2
    e4e0:	183f      	adds	r7, r7, r0
    e4e2:	4252      	negs	r2, r2
    e4e4:	19d2      	adds	r2, r2, r7
    e4e6:	0849      	lsrs	r1, r1, #1
    e4e8:	07d5      	lsls	r5, r2, #31
    e4ea:	430d      	orrs	r5, r1
    e4ec:	0857      	lsrs	r7, r2, #1
    e4ee:	4664      	mov	r4, ip
    e4f0:	e6a0      	b.n	e234 <__aeabi_dsub+0x58>
    e4f2:	4b13      	ldr	r3, [pc, #76]	; (e540 <__aeabi_dsub+0x364>)
    e4f4:	429c      	cmp	r4, r3
    e4f6:	d000      	beq.n	e4fa <__aeabi_dsub+0x31e>
    e4f8:	e6d9      	b.n	e2ae <__aeabi_dsub+0xd2>
    e4fa:	e69b      	b.n	e234 <__aeabi_dsub+0x58>
    e4fc:	0011      	movs	r1, r2
    e4fe:	3c1f      	subs	r4, #31
    e500:	40e1      	lsrs	r1, r4
    e502:	000c      	movs	r4, r1
    e504:	2b20      	cmp	r3, #32
    e506:	d100      	bne.n	e50a <__aeabi_dsub+0x32e>
    e508:	e080      	b.n	e60c <__aeabi_dsub+0x430>
    e50a:	2140      	movs	r1, #64	; 0x40
    e50c:	1acb      	subs	r3, r1, r3
    e50e:	409a      	lsls	r2, r3
    e510:	4315      	orrs	r5, r2
    e512:	1e6a      	subs	r2, r5, #1
    e514:	4195      	sbcs	r5, r2
    e516:	2700      	movs	r7, #0
    e518:	4325      	orrs	r5, r4
    e51a:	2400      	movs	r4, #0
    e51c:	e71f      	b.n	e35e <__aeabi_dsub+0x182>
    e51e:	4663      	mov	r3, ip
    e520:	0002      	movs	r2, r0
    e522:	3b20      	subs	r3, #32
    e524:	40da      	lsrs	r2, r3
    e526:	4663      	mov	r3, ip
    e528:	2b20      	cmp	r3, #32
    e52a:	d071      	beq.n	e610 <__aeabi_dsub+0x434>
    e52c:	2340      	movs	r3, #64	; 0x40
    e52e:	4666      	mov	r6, ip
    e530:	1b9b      	subs	r3, r3, r6
    e532:	4098      	lsls	r0, r3
    e534:	4301      	orrs	r1, r0
    e536:	1e48      	subs	r0, r1, #1
    e538:	4181      	sbcs	r1, r0
    e53a:	4311      	orrs	r1, r2
    e53c:	2200      	movs	r2, #0
    e53e:	e6cf      	b.n	e2e0 <__aeabi_dsub+0x104>
    e540:	000007ff 	.word	0x000007ff
    e544:	ff7fffff 	.word	0xff7fffff
    e548:	800fffff 	.word	0x800fffff
    e54c:	2c00      	cmp	r4, #0
    e54e:	d048      	beq.n	e5e2 <__aeabi_dsub+0x406>
    e550:	4cca      	ldr	r4, [pc, #808]	; (e87c <__aeabi_dsub+0x6a0>)
    e552:	42a2      	cmp	r2, r4
    e554:	d100      	bne.n	e558 <__aeabi_dsub+0x37c>
    e556:	e0a2      	b.n	e69e <__aeabi_dsub+0x4c2>
    e558:	4274      	negs	r4, r6
    e55a:	46a1      	mov	r9, r4
    e55c:	2480      	movs	r4, #128	; 0x80
    e55e:	0424      	lsls	r4, r4, #16
    e560:	4327      	orrs	r7, r4
    e562:	464c      	mov	r4, r9
    e564:	2c38      	cmp	r4, #56	; 0x38
    e566:	dd00      	ble.n	e56a <__aeabi_dsub+0x38e>
    e568:	e0db      	b.n	e722 <__aeabi_dsub+0x546>
    e56a:	2c1f      	cmp	r4, #31
    e56c:	dd00      	ble.n	e570 <__aeabi_dsub+0x394>
    e56e:	e144      	b.n	e7fa <__aeabi_dsub+0x61e>
    e570:	464e      	mov	r6, r9
    e572:	2420      	movs	r4, #32
    e574:	1ba4      	subs	r4, r4, r6
    e576:	003e      	movs	r6, r7
    e578:	40a6      	lsls	r6, r4
    e57a:	46a2      	mov	sl, r4
    e57c:	46b0      	mov	r8, r6
    e57e:	464c      	mov	r4, r9
    e580:	002e      	movs	r6, r5
    e582:	40e6      	lsrs	r6, r4
    e584:	46b4      	mov	ip, r6
    e586:	4646      	mov	r6, r8
    e588:	4664      	mov	r4, ip
    e58a:	4326      	orrs	r6, r4
    e58c:	4654      	mov	r4, sl
    e58e:	40a5      	lsls	r5, r4
    e590:	1e6c      	subs	r4, r5, #1
    e592:	41a5      	sbcs	r5, r4
    e594:	0034      	movs	r4, r6
    e596:	432c      	orrs	r4, r5
    e598:	464d      	mov	r5, r9
    e59a:	40ef      	lsrs	r7, r5
    e59c:	1b0d      	subs	r5, r1, r4
    e59e:	e028      	b.n	e5f2 <__aeabi_dsub+0x416>
    e5a0:	464a      	mov	r2, r9
    e5a2:	4643      	mov	r3, r8
    e5a4:	464d      	mov	r5, r9
    e5a6:	431a      	orrs	r2, r3
    e5a8:	d000      	beq.n	e5ac <__aeabi_dsub+0x3d0>
    e5aa:	e6a5      	b.n	e2f8 <__aeabi_dsub+0x11c>
    e5ac:	2300      	movs	r3, #0
    e5ae:	2400      	movs	r4, #0
    e5b0:	2500      	movs	r5, #0
    e5b2:	e6de      	b.n	e372 <__aeabi_dsub+0x196>
    e5b4:	2a1f      	cmp	r2, #31
    e5b6:	dc5a      	bgt.n	e66e <__aeabi_dsub+0x492>
    e5b8:	4666      	mov	r6, ip
    e5ba:	2220      	movs	r2, #32
    e5bc:	1b92      	subs	r2, r2, r6
    e5be:	0006      	movs	r6, r0
    e5c0:	4096      	lsls	r6, r2
    e5c2:	4691      	mov	r9, r2
    e5c4:	46b0      	mov	r8, r6
    e5c6:	4662      	mov	r2, ip
    e5c8:	000e      	movs	r6, r1
    e5ca:	40d6      	lsrs	r6, r2
    e5cc:	4642      	mov	r2, r8
    e5ce:	4316      	orrs	r6, r2
    e5d0:	464a      	mov	r2, r9
    e5d2:	4091      	lsls	r1, r2
    e5d4:	1e4a      	subs	r2, r1, #1
    e5d6:	4191      	sbcs	r1, r2
    e5d8:	0002      	movs	r2, r0
    e5da:	4660      	mov	r0, ip
    e5dc:	4331      	orrs	r1, r6
    e5de:	40c2      	lsrs	r2, r0
    e5e0:	e6e4      	b.n	e3ac <__aeabi_dsub+0x1d0>
    e5e2:	003c      	movs	r4, r7
    e5e4:	432c      	orrs	r4, r5
    e5e6:	d05a      	beq.n	e69e <__aeabi_dsub+0x4c2>
    e5e8:	43f4      	mvns	r4, r6
    e5ea:	46a1      	mov	r9, r4
    e5ec:	2c00      	cmp	r4, #0
    e5ee:	d152      	bne.n	e696 <__aeabi_dsub+0x4ba>
    e5f0:	1b4d      	subs	r5, r1, r5
    e5f2:	42a9      	cmp	r1, r5
    e5f4:	4189      	sbcs	r1, r1
    e5f6:	1bc7      	subs	r7, r0, r7
    e5f8:	4249      	negs	r1, r1
    e5fa:	1a7f      	subs	r7, r7, r1
    e5fc:	0014      	movs	r4, r2
    e5fe:	469a      	mov	sl, r3
    e600:	e675      	b.n	e2ee <__aeabi_dsub+0x112>
    e602:	4a9e      	ldr	r2, [pc, #632]	; (e87c <__aeabi_dsub+0x6a0>)
    e604:	4294      	cmp	r4, r2
    e606:	d000      	beq.n	e60a <__aeabi_dsub+0x42e>
    e608:	e6c7      	b.n	e39a <__aeabi_dsub+0x1be>
    e60a:	e613      	b.n	e234 <__aeabi_dsub+0x58>
    e60c:	2200      	movs	r2, #0
    e60e:	e77f      	b.n	e510 <__aeabi_dsub+0x334>
    e610:	2000      	movs	r0, #0
    e612:	e78f      	b.n	e534 <__aeabi_dsub+0x358>
    e614:	2c00      	cmp	r4, #0
    e616:	d000      	beq.n	e61a <__aeabi_dsub+0x43e>
    e618:	e0c8      	b.n	e7ac <__aeabi_dsub+0x5d0>
    e61a:	003b      	movs	r3, r7
    e61c:	432b      	orrs	r3, r5
    e61e:	d100      	bne.n	e622 <__aeabi_dsub+0x446>
    e620:	e10f      	b.n	e842 <__aeabi_dsub+0x666>
    e622:	0003      	movs	r3, r0
    e624:	430b      	orrs	r3, r1
    e626:	d100      	bne.n	e62a <__aeabi_dsub+0x44e>
    e628:	e604      	b.n	e234 <__aeabi_dsub+0x58>
    e62a:	1869      	adds	r1, r5, r1
    e62c:	42a9      	cmp	r1, r5
    e62e:	419b      	sbcs	r3, r3
    e630:	183f      	adds	r7, r7, r0
    e632:	425b      	negs	r3, r3
    e634:	19df      	adds	r7, r3, r7
    e636:	023b      	lsls	r3, r7, #8
    e638:	d400      	bmi.n	e63c <__aeabi_dsub+0x460>
    e63a:	e11a      	b.n	e872 <__aeabi_dsub+0x696>
    e63c:	4b90      	ldr	r3, [pc, #576]	; (e880 <__aeabi_dsub+0x6a4>)
    e63e:	000d      	movs	r5, r1
    e640:	401f      	ands	r7, r3
    e642:	4664      	mov	r4, ip
    e644:	e5f6      	b.n	e234 <__aeabi_dsub+0x58>
    e646:	469a      	mov	sl, r3
    e648:	e689      	b.n	e35e <__aeabi_dsub+0x182>
    e64a:	003a      	movs	r2, r7
    e64c:	432a      	orrs	r2, r5
    e64e:	2c00      	cmp	r4, #0
    e650:	d15c      	bne.n	e70c <__aeabi_dsub+0x530>
    e652:	2a00      	cmp	r2, #0
    e654:	d175      	bne.n	e742 <__aeabi_dsub+0x566>
    e656:	0002      	movs	r2, r0
    e658:	430a      	orrs	r2, r1
    e65a:	d100      	bne.n	e65e <__aeabi_dsub+0x482>
    e65c:	e0ca      	b.n	e7f4 <__aeabi_dsub+0x618>
    e65e:	0007      	movs	r7, r0
    e660:	000d      	movs	r5, r1
    e662:	469a      	mov	sl, r3
    e664:	e5e6      	b.n	e234 <__aeabi_dsub+0x58>
    e666:	4664      	mov	r4, ip
    e668:	2200      	movs	r2, #0
    e66a:	2500      	movs	r5, #0
    e66c:	e681      	b.n	e372 <__aeabi_dsub+0x196>
    e66e:	4662      	mov	r2, ip
    e670:	0006      	movs	r6, r0
    e672:	3a20      	subs	r2, #32
    e674:	40d6      	lsrs	r6, r2
    e676:	4662      	mov	r2, ip
    e678:	46b0      	mov	r8, r6
    e67a:	2a20      	cmp	r2, #32
    e67c:	d100      	bne.n	e680 <__aeabi_dsub+0x4a4>
    e67e:	e0b7      	b.n	e7f0 <__aeabi_dsub+0x614>
    e680:	2240      	movs	r2, #64	; 0x40
    e682:	4666      	mov	r6, ip
    e684:	1b92      	subs	r2, r2, r6
    e686:	4090      	lsls	r0, r2
    e688:	4301      	orrs	r1, r0
    e68a:	4642      	mov	r2, r8
    e68c:	1e48      	subs	r0, r1, #1
    e68e:	4181      	sbcs	r1, r0
    e690:	4311      	orrs	r1, r2
    e692:	2200      	movs	r2, #0
    e694:	e68a      	b.n	e3ac <__aeabi_dsub+0x1d0>
    e696:	4c79      	ldr	r4, [pc, #484]	; (e87c <__aeabi_dsub+0x6a0>)
    e698:	42a2      	cmp	r2, r4
    e69a:	d000      	beq.n	e69e <__aeabi_dsub+0x4c2>
    e69c:	e761      	b.n	e562 <__aeabi_dsub+0x386>
    e69e:	0007      	movs	r7, r0
    e6a0:	000d      	movs	r5, r1
    e6a2:	0014      	movs	r4, r2
    e6a4:	469a      	mov	sl, r3
    e6a6:	e5c5      	b.n	e234 <__aeabi_dsub+0x58>
    e6a8:	2c00      	cmp	r4, #0
    e6aa:	d141      	bne.n	e730 <__aeabi_dsub+0x554>
    e6ac:	003c      	movs	r4, r7
    e6ae:	432c      	orrs	r4, r5
    e6b0:	d078      	beq.n	e7a4 <__aeabi_dsub+0x5c8>
    e6b2:	43f4      	mvns	r4, r6
    e6b4:	46a1      	mov	r9, r4
    e6b6:	2c00      	cmp	r4, #0
    e6b8:	d020      	beq.n	e6fc <__aeabi_dsub+0x520>
    e6ba:	4c70      	ldr	r4, [pc, #448]	; (e87c <__aeabi_dsub+0x6a0>)
    e6bc:	42a2      	cmp	r2, r4
    e6be:	d071      	beq.n	e7a4 <__aeabi_dsub+0x5c8>
    e6c0:	464c      	mov	r4, r9
    e6c2:	2c38      	cmp	r4, #56	; 0x38
    e6c4:	dd00      	ble.n	e6c8 <__aeabi_dsub+0x4ec>
    e6c6:	e0b2      	b.n	e82e <__aeabi_dsub+0x652>
    e6c8:	2c1f      	cmp	r4, #31
    e6ca:	dd00      	ble.n	e6ce <__aeabi_dsub+0x4f2>
    e6cc:	e0bc      	b.n	e848 <__aeabi_dsub+0x66c>
    e6ce:	2620      	movs	r6, #32
    e6d0:	1b34      	subs	r4, r6, r4
    e6d2:	46a2      	mov	sl, r4
    e6d4:	003c      	movs	r4, r7
    e6d6:	4656      	mov	r6, sl
    e6d8:	40b4      	lsls	r4, r6
    e6da:	464e      	mov	r6, r9
    e6dc:	46a0      	mov	r8, r4
    e6de:	002c      	movs	r4, r5
    e6e0:	40f4      	lsrs	r4, r6
    e6e2:	46a4      	mov	ip, r4
    e6e4:	4644      	mov	r4, r8
    e6e6:	4666      	mov	r6, ip
    e6e8:	4334      	orrs	r4, r6
    e6ea:	46a4      	mov	ip, r4
    e6ec:	4654      	mov	r4, sl
    e6ee:	40a5      	lsls	r5, r4
    e6f0:	4664      	mov	r4, ip
    e6f2:	1e6e      	subs	r6, r5, #1
    e6f4:	41b5      	sbcs	r5, r6
    e6f6:	4325      	orrs	r5, r4
    e6f8:	464c      	mov	r4, r9
    e6fa:	40e7      	lsrs	r7, r4
    e6fc:	186d      	adds	r5, r5, r1
    e6fe:	428d      	cmp	r5, r1
    e700:	4189      	sbcs	r1, r1
    e702:	183f      	adds	r7, r7, r0
    e704:	4249      	negs	r1, r1
    e706:	19cf      	adds	r7, r1, r7
    e708:	0014      	movs	r4, r2
    e70a:	e656      	b.n	e3ba <__aeabi_dsub+0x1de>
    e70c:	2a00      	cmp	r2, #0
    e70e:	d12f      	bne.n	e770 <__aeabi_dsub+0x594>
    e710:	0002      	movs	r2, r0
    e712:	430a      	orrs	r2, r1
    e714:	d100      	bne.n	e718 <__aeabi_dsub+0x53c>
    e716:	e084      	b.n	e822 <__aeabi_dsub+0x646>
    e718:	0007      	movs	r7, r0
    e71a:	000d      	movs	r5, r1
    e71c:	469a      	mov	sl, r3
    e71e:	4c57      	ldr	r4, [pc, #348]	; (e87c <__aeabi_dsub+0x6a0>)
    e720:	e588      	b.n	e234 <__aeabi_dsub+0x58>
    e722:	433d      	orrs	r5, r7
    e724:	1e6f      	subs	r7, r5, #1
    e726:	41bd      	sbcs	r5, r7
    e728:	b2ec      	uxtb	r4, r5
    e72a:	2700      	movs	r7, #0
    e72c:	1b0d      	subs	r5, r1, r4
    e72e:	e760      	b.n	e5f2 <__aeabi_dsub+0x416>
    e730:	4c52      	ldr	r4, [pc, #328]	; (e87c <__aeabi_dsub+0x6a0>)
    e732:	42a2      	cmp	r2, r4
    e734:	d036      	beq.n	e7a4 <__aeabi_dsub+0x5c8>
    e736:	4274      	negs	r4, r6
    e738:	2680      	movs	r6, #128	; 0x80
    e73a:	0436      	lsls	r6, r6, #16
    e73c:	46a1      	mov	r9, r4
    e73e:	4337      	orrs	r7, r6
    e740:	e7be      	b.n	e6c0 <__aeabi_dsub+0x4e4>
    e742:	0002      	movs	r2, r0
    e744:	430a      	orrs	r2, r1
    e746:	d100      	bne.n	e74a <__aeabi_dsub+0x56e>
    e748:	e574      	b.n	e234 <__aeabi_dsub+0x58>
    e74a:	1a6a      	subs	r2, r5, r1
    e74c:	4690      	mov	r8, r2
    e74e:	4545      	cmp	r5, r8
    e750:	41b6      	sbcs	r6, r6
    e752:	1a3a      	subs	r2, r7, r0
    e754:	4276      	negs	r6, r6
    e756:	1b92      	subs	r2, r2, r6
    e758:	4694      	mov	ip, r2
    e75a:	0212      	lsls	r2, r2, #8
    e75c:	d400      	bmi.n	e760 <__aeabi_dsub+0x584>
    e75e:	e5f7      	b.n	e350 <__aeabi_dsub+0x174>
    e760:	1b4d      	subs	r5, r1, r5
    e762:	42a9      	cmp	r1, r5
    e764:	4189      	sbcs	r1, r1
    e766:	1bc7      	subs	r7, r0, r7
    e768:	4249      	negs	r1, r1
    e76a:	1a7f      	subs	r7, r7, r1
    e76c:	469a      	mov	sl, r3
    e76e:	e561      	b.n	e234 <__aeabi_dsub+0x58>
    e770:	0002      	movs	r2, r0
    e772:	430a      	orrs	r2, r1
    e774:	d03a      	beq.n	e7ec <__aeabi_dsub+0x610>
    e776:	08ed      	lsrs	r5, r5, #3
    e778:	077c      	lsls	r4, r7, #29
    e77a:	432c      	orrs	r4, r5
    e77c:	2580      	movs	r5, #128	; 0x80
    e77e:	08fa      	lsrs	r2, r7, #3
    e780:	032d      	lsls	r5, r5, #12
    e782:	422a      	tst	r2, r5
    e784:	d008      	beq.n	e798 <__aeabi_dsub+0x5bc>
    e786:	08c7      	lsrs	r7, r0, #3
    e788:	422f      	tst	r7, r5
    e78a:	d105      	bne.n	e798 <__aeabi_dsub+0x5bc>
    e78c:	0745      	lsls	r5, r0, #29
    e78e:	002c      	movs	r4, r5
    e790:	003a      	movs	r2, r7
    e792:	469a      	mov	sl, r3
    e794:	08c9      	lsrs	r1, r1, #3
    e796:	430c      	orrs	r4, r1
    e798:	0f67      	lsrs	r7, r4, #29
    e79a:	00d2      	lsls	r2, r2, #3
    e79c:	00e5      	lsls	r5, r4, #3
    e79e:	4317      	orrs	r7, r2
    e7a0:	4c36      	ldr	r4, [pc, #216]	; (e87c <__aeabi_dsub+0x6a0>)
    e7a2:	e547      	b.n	e234 <__aeabi_dsub+0x58>
    e7a4:	0007      	movs	r7, r0
    e7a6:	000d      	movs	r5, r1
    e7a8:	0014      	movs	r4, r2
    e7aa:	e543      	b.n	e234 <__aeabi_dsub+0x58>
    e7ac:	003a      	movs	r2, r7
    e7ae:	432a      	orrs	r2, r5
    e7b0:	d043      	beq.n	e83a <__aeabi_dsub+0x65e>
    e7b2:	0002      	movs	r2, r0
    e7b4:	430a      	orrs	r2, r1
    e7b6:	d019      	beq.n	e7ec <__aeabi_dsub+0x610>
    e7b8:	08ed      	lsrs	r5, r5, #3
    e7ba:	077c      	lsls	r4, r7, #29
    e7bc:	432c      	orrs	r4, r5
    e7be:	2580      	movs	r5, #128	; 0x80
    e7c0:	08fa      	lsrs	r2, r7, #3
    e7c2:	032d      	lsls	r5, r5, #12
    e7c4:	422a      	tst	r2, r5
    e7c6:	d007      	beq.n	e7d8 <__aeabi_dsub+0x5fc>
    e7c8:	08c6      	lsrs	r6, r0, #3
    e7ca:	422e      	tst	r6, r5
    e7cc:	d104      	bne.n	e7d8 <__aeabi_dsub+0x5fc>
    e7ce:	0747      	lsls	r7, r0, #29
    e7d0:	003c      	movs	r4, r7
    e7d2:	0032      	movs	r2, r6
    e7d4:	08c9      	lsrs	r1, r1, #3
    e7d6:	430c      	orrs	r4, r1
    e7d8:	00d7      	lsls	r7, r2, #3
    e7da:	0f62      	lsrs	r2, r4, #29
    e7dc:	00e5      	lsls	r5, r4, #3
    e7de:	4317      	orrs	r7, r2
    e7e0:	469a      	mov	sl, r3
    e7e2:	4c26      	ldr	r4, [pc, #152]	; (e87c <__aeabi_dsub+0x6a0>)
    e7e4:	e526      	b.n	e234 <__aeabi_dsub+0x58>
    e7e6:	2200      	movs	r2, #0
    e7e8:	2500      	movs	r5, #0
    e7ea:	e544      	b.n	e276 <__aeabi_dsub+0x9a>
    e7ec:	4c23      	ldr	r4, [pc, #140]	; (e87c <__aeabi_dsub+0x6a0>)
    e7ee:	e521      	b.n	e234 <__aeabi_dsub+0x58>
    e7f0:	2000      	movs	r0, #0
    e7f2:	e749      	b.n	e688 <__aeabi_dsub+0x4ac>
    e7f4:	2300      	movs	r3, #0
    e7f6:	2500      	movs	r5, #0
    e7f8:	e5bb      	b.n	e372 <__aeabi_dsub+0x196>
    e7fa:	464c      	mov	r4, r9
    e7fc:	003e      	movs	r6, r7
    e7fe:	3c20      	subs	r4, #32
    e800:	40e6      	lsrs	r6, r4
    e802:	464c      	mov	r4, r9
    e804:	46b4      	mov	ip, r6
    e806:	2c20      	cmp	r4, #32
    e808:	d031      	beq.n	e86e <__aeabi_dsub+0x692>
    e80a:	2440      	movs	r4, #64	; 0x40
    e80c:	464e      	mov	r6, r9
    e80e:	1ba6      	subs	r6, r4, r6
    e810:	40b7      	lsls	r7, r6
    e812:	433d      	orrs	r5, r7
    e814:	1e6c      	subs	r4, r5, #1
    e816:	41a5      	sbcs	r5, r4
    e818:	4664      	mov	r4, ip
    e81a:	432c      	orrs	r4, r5
    e81c:	2700      	movs	r7, #0
    e81e:	1b0d      	subs	r5, r1, r4
    e820:	e6e7      	b.n	e5f2 <__aeabi_dsub+0x416>
    e822:	2280      	movs	r2, #128	; 0x80
    e824:	2300      	movs	r3, #0
    e826:	0312      	lsls	r2, r2, #12
    e828:	4c14      	ldr	r4, [pc, #80]	; (e87c <__aeabi_dsub+0x6a0>)
    e82a:	2500      	movs	r5, #0
    e82c:	e5a1      	b.n	e372 <__aeabi_dsub+0x196>
    e82e:	433d      	orrs	r5, r7
    e830:	1e6f      	subs	r7, r5, #1
    e832:	41bd      	sbcs	r5, r7
    e834:	2700      	movs	r7, #0
    e836:	b2ed      	uxtb	r5, r5
    e838:	e760      	b.n	e6fc <__aeabi_dsub+0x520>
    e83a:	0007      	movs	r7, r0
    e83c:	000d      	movs	r5, r1
    e83e:	4c0f      	ldr	r4, [pc, #60]	; (e87c <__aeabi_dsub+0x6a0>)
    e840:	e4f8      	b.n	e234 <__aeabi_dsub+0x58>
    e842:	0007      	movs	r7, r0
    e844:	000d      	movs	r5, r1
    e846:	e4f5      	b.n	e234 <__aeabi_dsub+0x58>
    e848:	464e      	mov	r6, r9
    e84a:	003c      	movs	r4, r7
    e84c:	3e20      	subs	r6, #32
    e84e:	40f4      	lsrs	r4, r6
    e850:	46a0      	mov	r8, r4
    e852:	464c      	mov	r4, r9
    e854:	2c20      	cmp	r4, #32
    e856:	d00e      	beq.n	e876 <__aeabi_dsub+0x69a>
    e858:	2440      	movs	r4, #64	; 0x40
    e85a:	464e      	mov	r6, r9
    e85c:	1ba4      	subs	r4, r4, r6
    e85e:	40a7      	lsls	r7, r4
    e860:	433d      	orrs	r5, r7
    e862:	1e6f      	subs	r7, r5, #1
    e864:	41bd      	sbcs	r5, r7
    e866:	4644      	mov	r4, r8
    e868:	2700      	movs	r7, #0
    e86a:	4325      	orrs	r5, r4
    e86c:	e746      	b.n	e6fc <__aeabi_dsub+0x520>
    e86e:	2700      	movs	r7, #0
    e870:	e7cf      	b.n	e812 <__aeabi_dsub+0x636>
    e872:	000d      	movs	r5, r1
    e874:	e573      	b.n	e35e <__aeabi_dsub+0x182>
    e876:	2700      	movs	r7, #0
    e878:	e7f2      	b.n	e860 <__aeabi_dsub+0x684>
    e87a:	46c0      	nop			; (mov r8, r8)
    e87c:	000007ff 	.word	0x000007ff
    e880:	ff7fffff 	.word	0xff7fffff

0000e884 <__aeabi_d2iz>:
    e884:	030b      	lsls	r3, r1, #12
    e886:	b530      	push	{r4, r5, lr}
    e888:	4d13      	ldr	r5, [pc, #76]	; (e8d8 <__aeabi_d2iz+0x54>)
    e88a:	0b1a      	lsrs	r2, r3, #12
    e88c:	004b      	lsls	r3, r1, #1
    e88e:	0d5b      	lsrs	r3, r3, #21
    e890:	0fc9      	lsrs	r1, r1, #31
    e892:	2400      	movs	r4, #0
    e894:	42ab      	cmp	r3, r5
    e896:	dd11      	ble.n	e8bc <__aeabi_d2iz+0x38>
    e898:	4c10      	ldr	r4, [pc, #64]	; (e8dc <__aeabi_d2iz+0x58>)
    e89a:	42a3      	cmp	r3, r4
    e89c:	dc10      	bgt.n	e8c0 <__aeabi_d2iz+0x3c>
    e89e:	2480      	movs	r4, #128	; 0x80
    e8a0:	0364      	lsls	r4, r4, #13
    e8a2:	4322      	orrs	r2, r4
    e8a4:	4c0e      	ldr	r4, [pc, #56]	; (e8e0 <__aeabi_d2iz+0x5c>)
    e8a6:	1ae4      	subs	r4, r4, r3
    e8a8:	2c1f      	cmp	r4, #31
    e8aa:	dd0c      	ble.n	e8c6 <__aeabi_d2iz+0x42>
    e8ac:	480d      	ldr	r0, [pc, #52]	; (e8e4 <__aeabi_d2iz+0x60>)
    e8ae:	1ac3      	subs	r3, r0, r3
    e8b0:	40da      	lsrs	r2, r3
    e8b2:	0013      	movs	r3, r2
    e8b4:	425c      	negs	r4, r3
    e8b6:	2900      	cmp	r1, #0
    e8b8:	d100      	bne.n	e8bc <__aeabi_d2iz+0x38>
    e8ba:	001c      	movs	r4, r3
    e8bc:	0020      	movs	r0, r4
    e8be:	bd30      	pop	{r4, r5, pc}
    e8c0:	4b09      	ldr	r3, [pc, #36]	; (e8e8 <__aeabi_d2iz+0x64>)
    e8c2:	18cc      	adds	r4, r1, r3
    e8c4:	e7fa      	b.n	e8bc <__aeabi_d2iz+0x38>
    e8c6:	40e0      	lsrs	r0, r4
    e8c8:	4c08      	ldr	r4, [pc, #32]	; (e8ec <__aeabi_d2iz+0x68>)
    e8ca:	46a4      	mov	ip, r4
    e8cc:	4463      	add	r3, ip
    e8ce:	409a      	lsls	r2, r3
    e8d0:	0013      	movs	r3, r2
    e8d2:	4303      	orrs	r3, r0
    e8d4:	e7ee      	b.n	e8b4 <__aeabi_d2iz+0x30>
    e8d6:	46c0      	nop			; (mov r8, r8)
    e8d8:	000003fe 	.word	0x000003fe
    e8dc:	0000041d 	.word	0x0000041d
    e8e0:	00000433 	.word	0x00000433
    e8e4:	00000413 	.word	0x00000413
    e8e8:	7fffffff 	.word	0x7fffffff
    e8ec:	fffffbed 	.word	0xfffffbed

0000e8f0 <__aeabi_ui2d>:
    e8f0:	b570      	push	{r4, r5, r6, lr}
    e8f2:	1e05      	subs	r5, r0, #0
    e8f4:	d028      	beq.n	e948 <__aeabi_ui2d+0x58>
    e8f6:	f7fd fcf9 	bl	c2ec <__clzsi2>
    e8fa:	4b15      	ldr	r3, [pc, #84]	; (e950 <__aeabi_ui2d+0x60>)
    e8fc:	4a15      	ldr	r2, [pc, #84]	; (e954 <__aeabi_ui2d+0x64>)
    e8fe:	1a1b      	subs	r3, r3, r0
    e900:	1ad2      	subs	r2, r2, r3
    e902:	2a1f      	cmp	r2, #31
    e904:	dd16      	ble.n	e934 <__aeabi_ui2d+0x44>
    e906:	002c      	movs	r4, r5
    e908:	4a13      	ldr	r2, [pc, #76]	; (e958 <__aeabi_ui2d+0x68>)
    e90a:	2500      	movs	r5, #0
    e90c:	1ad2      	subs	r2, r2, r3
    e90e:	4094      	lsls	r4, r2
    e910:	055a      	lsls	r2, r3, #21
    e912:	0324      	lsls	r4, r4, #12
    e914:	0b24      	lsrs	r4, r4, #12
    e916:	0d52      	lsrs	r2, r2, #21
    e918:	2100      	movs	r1, #0
    e91a:	0324      	lsls	r4, r4, #12
    e91c:	0d0b      	lsrs	r3, r1, #20
    e91e:	0b24      	lsrs	r4, r4, #12
    e920:	051b      	lsls	r3, r3, #20
    e922:	4323      	orrs	r3, r4
    e924:	4c0d      	ldr	r4, [pc, #52]	; (e95c <__aeabi_ui2d+0x6c>)
    e926:	0512      	lsls	r2, r2, #20
    e928:	4023      	ands	r3, r4
    e92a:	4313      	orrs	r3, r2
    e92c:	005b      	lsls	r3, r3, #1
    e92e:	0028      	movs	r0, r5
    e930:	0859      	lsrs	r1, r3, #1
    e932:	bd70      	pop	{r4, r5, r6, pc}
    e934:	210b      	movs	r1, #11
    e936:	002c      	movs	r4, r5
    e938:	1a08      	subs	r0, r1, r0
    e93a:	40c4      	lsrs	r4, r0
    e93c:	4095      	lsls	r5, r2
    e93e:	0324      	lsls	r4, r4, #12
    e940:	055a      	lsls	r2, r3, #21
    e942:	0b24      	lsrs	r4, r4, #12
    e944:	0d52      	lsrs	r2, r2, #21
    e946:	e7e7      	b.n	e918 <__aeabi_ui2d+0x28>
    e948:	2200      	movs	r2, #0
    e94a:	2400      	movs	r4, #0
    e94c:	e7e4      	b.n	e918 <__aeabi_ui2d+0x28>
    e94e:	46c0      	nop			; (mov r8, r8)
    e950:	0000041e 	.word	0x0000041e
    e954:	00000433 	.word	0x00000433
    e958:	00000413 	.word	0x00000413
    e95c:	800fffff 	.word	0x800fffff

0000e960 <__libc_init_array>:
    e960:	4b0e      	ldr	r3, [pc, #56]	; (e99c <__libc_init_array+0x3c>)
    e962:	b570      	push	{r4, r5, r6, lr}
    e964:	2500      	movs	r5, #0
    e966:	001e      	movs	r6, r3
    e968:	4c0d      	ldr	r4, [pc, #52]	; (e9a0 <__libc_init_array+0x40>)
    e96a:	1ae4      	subs	r4, r4, r3
    e96c:	10a4      	asrs	r4, r4, #2
    e96e:	42a5      	cmp	r5, r4
    e970:	d004      	beq.n	e97c <__libc_init_array+0x1c>
    e972:	00ab      	lsls	r3, r5, #2
    e974:	58f3      	ldr	r3, [r6, r3]
    e976:	4798      	blx	r3
    e978:	3501      	adds	r5, #1
    e97a:	e7f8      	b.n	e96e <__libc_init_array+0xe>
    e97c:	f001 f9da 	bl	fd34 <_init>
    e980:	4b08      	ldr	r3, [pc, #32]	; (e9a4 <__libc_init_array+0x44>)
    e982:	2500      	movs	r5, #0
    e984:	001e      	movs	r6, r3
    e986:	4c08      	ldr	r4, [pc, #32]	; (e9a8 <__libc_init_array+0x48>)
    e988:	1ae4      	subs	r4, r4, r3
    e98a:	10a4      	asrs	r4, r4, #2
    e98c:	42a5      	cmp	r5, r4
    e98e:	d004      	beq.n	e99a <__libc_init_array+0x3a>
    e990:	00ab      	lsls	r3, r5, #2
    e992:	58f3      	ldr	r3, [r6, r3]
    e994:	4798      	blx	r3
    e996:	3501      	adds	r5, #1
    e998:	e7f8      	b.n	e98c <__libc_init_array+0x2c>
    e99a:	bd70      	pop	{r4, r5, r6, pc}
    e99c:	0000fd40 	.word	0x0000fd40
    e9a0:	0000fd40 	.word	0x0000fd40
    e9a4:	0000fd40 	.word	0x0000fd40
    e9a8:	0000fd44 	.word	0x0000fd44

0000e9ac <memcpy>:
    e9ac:	2300      	movs	r3, #0
    e9ae:	b510      	push	{r4, lr}
    e9b0:	429a      	cmp	r2, r3
    e9b2:	d003      	beq.n	e9bc <memcpy+0x10>
    e9b4:	5ccc      	ldrb	r4, [r1, r3]
    e9b6:	54c4      	strb	r4, [r0, r3]
    e9b8:	3301      	adds	r3, #1
    e9ba:	e7f9      	b.n	e9b0 <memcpy+0x4>
    e9bc:	bd10      	pop	{r4, pc}

0000e9be <memset>:
    e9be:	0003      	movs	r3, r0
    e9c0:	1882      	adds	r2, r0, r2
    e9c2:	4293      	cmp	r3, r2
    e9c4:	d002      	beq.n	e9cc <memset+0xe>
    e9c6:	7019      	strb	r1, [r3, #0]
    e9c8:	3301      	adds	r3, #1
    e9ca:	e7fa      	b.n	e9c2 <memset+0x4>
    e9cc:	4770      	bx	lr
	...

0000e9d0 <iprintf>:
    e9d0:	b40f      	push	{r0, r1, r2, r3}
    e9d2:	4b0b      	ldr	r3, [pc, #44]	; (ea00 <iprintf+0x30>)
    e9d4:	b513      	push	{r0, r1, r4, lr}
    e9d6:	681c      	ldr	r4, [r3, #0]
    e9d8:	2c00      	cmp	r4, #0
    e9da:	d005      	beq.n	e9e8 <iprintf+0x18>
    e9dc:	69a3      	ldr	r3, [r4, #24]
    e9de:	2b00      	cmp	r3, #0
    e9e0:	d102      	bne.n	e9e8 <iprintf+0x18>
    e9e2:	0020      	movs	r0, r4
    e9e4:	f000 f96c 	bl	ecc0 <__sinit>
    e9e8:	ab05      	add	r3, sp, #20
    e9ea:	9a04      	ldr	r2, [sp, #16]
    e9ec:	68a1      	ldr	r1, [r4, #8]
    e9ee:	0020      	movs	r0, r4
    e9f0:	9301      	str	r3, [sp, #4]
    e9f2:	f000 fb2b 	bl	f04c <_vfiprintf_r>
    e9f6:	bc16      	pop	{r1, r2, r4}
    e9f8:	bc08      	pop	{r3}
    e9fa:	b004      	add	sp, #16
    e9fc:	4718      	bx	r3
    e9fe:	46c0      	nop			; (mov r8, r8)
    ea00:	20000088 	.word	0x20000088

0000ea04 <srand>:
    ea04:	4b10      	ldr	r3, [pc, #64]	; (ea48 <srand+0x44>)
    ea06:	b570      	push	{r4, r5, r6, lr}
    ea08:	681c      	ldr	r4, [r3, #0]
    ea0a:	0005      	movs	r5, r0
    ea0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ea0e:	2b00      	cmp	r3, #0
    ea10:	d115      	bne.n	ea3e <srand+0x3a>
    ea12:	2018      	movs	r0, #24
    ea14:	f000 fa4c 	bl	eeb0 <malloc>
    ea18:	4b0c      	ldr	r3, [pc, #48]	; (ea4c <srand+0x48>)
    ea1a:	63a0      	str	r0, [r4, #56]	; 0x38
    ea1c:	8003      	strh	r3, [r0, #0]
    ea1e:	4b0c      	ldr	r3, [pc, #48]	; (ea50 <srand+0x4c>)
    ea20:	2201      	movs	r2, #1
    ea22:	8043      	strh	r3, [r0, #2]
    ea24:	4b0b      	ldr	r3, [pc, #44]	; (ea54 <srand+0x50>)
    ea26:	8083      	strh	r3, [r0, #4]
    ea28:	4b0b      	ldr	r3, [pc, #44]	; (ea58 <srand+0x54>)
    ea2a:	80c3      	strh	r3, [r0, #6]
    ea2c:	4b0b      	ldr	r3, [pc, #44]	; (ea5c <srand+0x58>)
    ea2e:	8103      	strh	r3, [r0, #8]
    ea30:	2305      	movs	r3, #5
    ea32:	8143      	strh	r3, [r0, #10]
    ea34:	3306      	adds	r3, #6
    ea36:	8183      	strh	r3, [r0, #12]
    ea38:	2300      	movs	r3, #0
    ea3a:	6102      	str	r2, [r0, #16]
    ea3c:	6143      	str	r3, [r0, #20]
    ea3e:	2200      	movs	r2, #0
    ea40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ea42:	611d      	str	r5, [r3, #16]
    ea44:	615a      	str	r2, [r3, #20]
    ea46:	bd70      	pop	{r4, r5, r6, pc}
    ea48:	20000088 	.word	0x20000088
    ea4c:	0000330e 	.word	0x0000330e
    ea50:	ffffabcd 	.word	0xffffabcd
    ea54:	00001234 	.word	0x00001234
    ea58:	ffffe66d 	.word	0xffffe66d
    ea5c:	ffffdeec 	.word	0xffffdeec

0000ea60 <rand>:
    ea60:	4b15      	ldr	r3, [pc, #84]	; (eab8 <rand+0x58>)
    ea62:	b510      	push	{r4, lr}
    ea64:	681c      	ldr	r4, [r3, #0]
    ea66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ea68:	2b00      	cmp	r3, #0
    ea6a:	d115      	bne.n	ea98 <rand+0x38>
    ea6c:	2018      	movs	r0, #24
    ea6e:	f000 fa1f 	bl	eeb0 <malloc>
    ea72:	4b12      	ldr	r3, [pc, #72]	; (eabc <rand+0x5c>)
    ea74:	63a0      	str	r0, [r4, #56]	; 0x38
    ea76:	8003      	strh	r3, [r0, #0]
    ea78:	4b11      	ldr	r3, [pc, #68]	; (eac0 <rand+0x60>)
    ea7a:	2201      	movs	r2, #1
    ea7c:	8043      	strh	r3, [r0, #2]
    ea7e:	4b11      	ldr	r3, [pc, #68]	; (eac4 <rand+0x64>)
    ea80:	8083      	strh	r3, [r0, #4]
    ea82:	4b11      	ldr	r3, [pc, #68]	; (eac8 <rand+0x68>)
    ea84:	80c3      	strh	r3, [r0, #6]
    ea86:	4b11      	ldr	r3, [pc, #68]	; (eacc <rand+0x6c>)
    ea88:	8103      	strh	r3, [r0, #8]
    ea8a:	2305      	movs	r3, #5
    ea8c:	8143      	strh	r3, [r0, #10]
    ea8e:	3306      	adds	r3, #6
    ea90:	8183      	strh	r3, [r0, #12]
    ea92:	2300      	movs	r3, #0
    ea94:	6102      	str	r2, [r0, #16]
    ea96:	6143      	str	r3, [r0, #20]
    ea98:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    ea9a:	4a0d      	ldr	r2, [pc, #52]	; (ead0 <rand+0x70>)
    ea9c:	6920      	ldr	r0, [r4, #16]
    ea9e:	6961      	ldr	r1, [r4, #20]
    eaa0:	4b0c      	ldr	r3, [pc, #48]	; (ead4 <rand+0x74>)
    eaa2:	f7fd fc61 	bl	c368 <__aeabi_lmul>
    eaa6:	2201      	movs	r2, #1
    eaa8:	2300      	movs	r3, #0
    eaaa:	1880      	adds	r0, r0, r2
    eaac:	4159      	adcs	r1, r3
    eaae:	6120      	str	r0, [r4, #16]
    eab0:	6161      	str	r1, [r4, #20]
    eab2:	0048      	lsls	r0, r1, #1
    eab4:	0840      	lsrs	r0, r0, #1
    eab6:	bd10      	pop	{r4, pc}
    eab8:	20000088 	.word	0x20000088
    eabc:	0000330e 	.word	0x0000330e
    eac0:	ffffabcd 	.word	0xffffabcd
    eac4:	00001234 	.word	0x00001234
    eac8:	ffffe66d 	.word	0xffffe66d
    eacc:	ffffdeec 	.word	0xffffdeec
    ead0:	4c957f2d 	.word	0x4c957f2d
    ead4:	5851f42d 	.word	0x5851f42d

0000ead8 <__sflush_r>:
    ead8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    eada:	898a      	ldrh	r2, [r1, #12]
    eadc:	0005      	movs	r5, r0
    eade:	000c      	movs	r4, r1
    eae0:	0713      	lsls	r3, r2, #28
    eae2:	d45a      	bmi.n	eb9a <__sflush_r+0xc2>
    eae4:	684b      	ldr	r3, [r1, #4]
    eae6:	2b00      	cmp	r3, #0
    eae8:	dc02      	bgt.n	eaf0 <__sflush_r+0x18>
    eaea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    eaec:	2b00      	cmp	r3, #0
    eaee:	dd19      	ble.n	eb24 <__sflush_r+0x4c>
    eaf0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    eaf2:	2f00      	cmp	r7, #0
    eaf4:	d016      	beq.n	eb24 <__sflush_r+0x4c>
    eaf6:	2300      	movs	r3, #0
    eaf8:	682e      	ldr	r6, [r5, #0]
    eafa:	602b      	str	r3, [r5, #0]
    eafc:	2380      	movs	r3, #128	; 0x80
    eafe:	015b      	lsls	r3, r3, #5
    eb00:	401a      	ands	r2, r3
    eb02:	d001      	beq.n	eb08 <__sflush_r+0x30>
    eb04:	6d60      	ldr	r0, [r4, #84]	; 0x54
    eb06:	e014      	b.n	eb32 <__sflush_r+0x5a>
    eb08:	2301      	movs	r3, #1
    eb0a:	6a21      	ldr	r1, [r4, #32]
    eb0c:	0028      	movs	r0, r5
    eb0e:	47b8      	blx	r7
    eb10:	1c43      	adds	r3, r0, #1
    eb12:	d10e      	bne.n	eb32 <__sflush_r+0x5a>
    eb14:	682b      	ldr	r3, [r5, #0]
    eb16:	2b00      	cmp	r3, #0
    eb18:	d00b      	beq.n	eb32 <__sflush_r+0x5a>
    eb1a:	2b1d      	cmp	r3, #29
    eb1c:	d001      	beq.n	eb22 <__sflush_r+0x4a>
    eb1e:	2b16      	cmp	r3, #22
    eb20:	d102      	bne.n	eb28 <__sflush_r+0x50>
    eb22:	602e      	str	r6, [r5, #0]
    eb24:	2000      	movs	r0, #0
    eb26:	e05a      	b.n	ebde <__sflush_r+0x106>
    eb28:	2240      	movs	r2, #64	; 0x40
    eb2a:	89a3      	ldrh	r3, [r4, #12]
    eb2c:	4313      	orrs	r3, r2
    eb2e:	81a3      	strh	r3, [r4, #12]
    eb30:	e055      	b.n	ebde <__sflush_r+0x106>
    eb32:	89a3      	ldrh	r3, [r4, #12]
    eb34:	075b      	lsls	r3, r3, #29
    eb36:	d506      	bpl.n	eb46 <__sflush_r+0x6e>
    eb38:	6863      	ldr	r3, [r4, #4]
    eb3a:	1ac0      	subs	r0, r0, r3
    eb3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    eb3e:	2b00      	cmp	r3, #0
    eb40:	d001      	beq.n	eb46 <__sflush_r+0x6e>
    eb42:	6c23      	ldr	r3, [r4, #64]	; 0x40
    eb44:	1ac0      	subs	r0, r0, r3
    eb46:	2300      	movs	r3, #0
    eb48:	0002      	movs	r2, r0
    eb4a:	6a21      	ldr	r1, [r4, #32]
    eb4c:	0028      	movs	r0, r5
    eb4e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    eb50:	47b8      	blx	r7
    eb52:	89a3      	ldrh	r3, [r4, #12]
    eb54:	1c42      	adds	r2, r0, #1
    eb56:	d106      	bne.n	eb66 <__sflush_r+0x8e>
    eb58:	6829      	ldr	r1, [r5, #0]
    eb5a:	291d      	cmp	r1, #29
    eb5c:	d83a      	bhi.n	ebd4 <__sflush_r+0xfc>
    eb5e:	4a20      	ldr	r2, [pc, #128]	; (ebe0 <__sflush_r+0x108>)
    eb60:	40ca      	lsrs	r2, r1
    eb62:	07d2      	lsls	r2, r2, #31
    eb64:	d536      	bpl.n	ebd4 <__sflush_r+0xfc>
    eb66:	2200      	movs	r2, #0
    eb68:	6062      	str	r2, [r4, #4]
    eb6a:	6922      	ldr	r2, [r4, #16]
    eb6c:	6022      	str	r2, [r4, #0]
    eb6e:	04db      	lsls	r3, r3, #19
    eb70:	d505      	bpl.n	eb7e <__sflush_r+0xa6>
    eb72:	1c43      	adds	r3, r0, #1
    eb74:	d102      	bne.n	eb7c <__sflush_r+0xa4>
    eb76:	682b      	ldr	r3, [r5, #0]
    eb78:	2b00      	cmp	r3, #0
    eb7a:	d100      	bne.n	eb7e <__sflush_r+0xa6>
    eb7c:	6560      	str	r0, [r4, #84]	; 0x54
    eb7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    eb80:	602e      	str	r6, [r5, #0]
    eb82:	2900      	cmp	r1, #0
    eb84:	d0ce      	beq.n	eb24 <__sflush_r+0x4c>
    eb86:	0023      	movs	r3, r4
    eb88:	3344      	adds	r3, #68	; 0x44
    eb8a:	4299      	cmp	r1, r3
    eb8c:	d002      	beq.n	eb94 <__sflush_r+0xbc>
    eb8e:	0028      	movs	r0, r5
    eb90:	f000 f998 	bl	eec4 <_free_r>
    eb94:	2000      	movs	r0, #0
    eb96:	6360      	str	r0, [r4, #52]	; 0x34
    eb98:	e021      	b.n	ebde <__sflush_r+0x106>
    eb9a:	690f      	ldr	r7, [r1, #16]
    eb9c:	2f00      	cmp	r7, #0
    eb9e:	d0c1      	beq.n	eb24 <__sflush_r+0x4c>
    eba0:	680b      	ldr	r3, [r1, #0]
    eba2:	600f      	str	r7, [r1, #0]
    eba4:	1bdb      	subs	r3, r3, r7
    eba6:	9301      	str	r3, [sp, #4]
    eba8:	2300      	movs	r3, #0
    ebaa:	0792      	lsls	r2, r2, #30
    ebac:	d100      	bne.n	ebb0 <__sflush_r+0xd8>
    ebae:	694b      	ldr	r3, [r1, #20]
    ebb0:	60a3      	str	r3, [r4, #8]
    ebb2:	e003      	b.n	ebbc <__sflush_r+0xe4>
    ebb4:	9b01      	ldr	r3, [sp, #4]
    ebb6:	183f      	adds	r7, r7, r0
    ebb8:	1a1b      	subs	r3, r3, r0
    ebba:	9301      	str	r3, [sp, #4]
    ebbc:	9b01      	ldr	r3, [sp, #4]
    ebbe:	2b00      	cmp	r3, #0
    ebc0:	ddb0      	ble.n	eb24 <__sflush_r+0x4c>
    ebc2:	9b01      	ldr	r3, [sp, #4]
    ebc4:	003a      	movs	r2, r7
    ebc6:	6a21      	ldr	r1, [r4, #32]
    ebc8:	0028      	movs	r0, r5
    ebca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    ebcc:	47b0      	blx	r6
    ebce:	2800      	cmp	r0, #0
    ebd0:	dcf0      	bgt.n	ebb4 <__sflush_r+0xdc>
    ebd2:	89a3      	ldrh	r3, [r4, #12]
    ebd4:	2240      	movs	r2, #64	; 0x40
    ebd6:	2001      	movs	r0, #1
    ebd8:	4313      	orrs	r3, r2
    ebda:	81a3      	strh	r3, [r4, #12]
    ebdc:	4240      	negs	r0, r0
    ebde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ebe0:	20400001 	.word	0x20400001

0000ebe4 <_fflush_r>:
    ebe4:	690b      	ldr	r3, [r1, #16]
    ebe6:	b570      	push	{r4, r5, r6, lr}
    ebe8:	0005      	movs	r5, r0
    ebea:	000c      	movs	r4, r1
    ebec:	2b00      	cmp	r3, #0
    ebee:	d101      	bne.n	ebf4 <_fflush_r+0x10>
    ebf0:	2000      	movs	r0, #0
    ebf2:	e01c      	b.n	ec2e <_fflush_r+0x4a>
    ebf4:	2800      	cmp	r0, #0
    ebf6:	d004      	beq.n	ec02 <_fflush_r+0x1e>
    ebf8:	6983      	ldr	r3, [r0, #24]
    ebfa:	2b00      	cmp	r3, #0
    ebfc:	d101      	bne.n	ec02 <_fflush_r+0x1e>
    ebfe:	f000 f85f 	bl	ecc0 <__sinit>
    ec02:	4b0b      	ldr	r3, [pc, #44]	; (ec30 <_fflush_r+0x4c>)
    ec04:	429c      	cmp	r4, r3
    ec06:	d101      	bne.n	ec0c <_fflush_r+0x28>
    ec08:	686c      	ldr	r4, [r5, #4]
    ec0a:	e008      	b.n	ec1e <_fflush_r+0x3a>
    ec0c:	4b09      	ldr	r3, [pc, #36]	; (ec34 <_fflush_r+0x50>)
    ec0e:	429c      	cmp	r4, r3
    ec10:	d101      	bne.n	ec16 <_fflush_r+0x32>
    ec12:	68ac      	ldr	r4, [r5, #8]
    ec14:	e003      	b.n	ec1e <_fflush_r+0x3a>
    ec16:	4b08      	ldr	r3, [pc, #32]	; (ec38 <_fflush_r+0x54>)
    ec18:	429c      	cmp	r4, r3
    ec1a:	d100      	bne.n	ec1e <_fflush_r+0x3a>
    ec1c:	68ec      	ldr	r4, [r5, #12]
    ec1e:	220c      	movs	r2, #12
    ec20:	5ea3      	ldrsh	r3, [r4, r2]
    ec22:	2b00      	cmp	r3, #0
    ec24:	d0e4      	beq.n	ebf0 <_fflush_r+0xc>
    ec26:	0021      	movs	r1, r4
    ec28:	0028      	movs	r0, r5
    ec2a:	f7ff ff55 	bl	ead8 <__sflush_r>
    ec2e:	bd70      	pop	{r4, r5, r6, pc}
    ec30:	0000fca0 	.word	0x0000fca0
    ec34:	0000fcc0 	.word	0x0000fcc0
    ec38:	0000fce0 	.word	0x0000fce0

0000ec3c <_cleanup_r>:
    ec3c:	b510      	push	{r4, lr}
    ec3e:	4902      	ldr	r1, [pc, #8]	; (ec48 <_cleanup_r+0xc>)
    ec40:	f000 f8b0 	bl	eda4 <_fwalk_reent>
    ec44:	bd10      	pop	{r4, pc}
    ec46:	46c0      	nop			; (mov r8, r8)
    ec48:	0000ebe5 	.word	0x0000ebe5

0000ec4c <std.isra.0>:
    ec4c:	2300      	movs	r3, #0
    ec4e:	b510      	push	{r4, lr}
    ec50:	0004      	movs	r4, r0
    ec52:	6003      	str	r3, [r0, #0]
    ec54:	6043      	str	r3, [r0, #4]
    ec56:	6083      	str	r3, [r0, #8]
    ec58:	8181      	strh	r1, [r0, #12]
    ec5a:	6643      	str	r3, [r0, #100]	; 0x64
    ec5c:	81c2      	strh	r2, [r0, #14]
    ec5e:	6103      	str	r3, [r0, #16]
    ec60:	6143      	str	r3, [r0, #20]
    ec62:	6183      	str	r3, [r0, #24]
    ec64:	0019      	movs	r1, r3
    ec66:	2208      	movs	r2, #8
    ec68:	305c      	adds	r0, #92	; 0x5c
    ec6a:	f7ff fea8 	bl	e9be <memset>
    ec6e:	4b05      	ldr	r3, [pc, #20]	; (ec84 <std.isra.0+0x38>)
    ec70:	6224      	str	r4, [r4, #32]
    ec72:	6263      	str	r3, [r4, #36]	; 0x24
    ec74:	4b04      	ldr	r3, [pc, #16]	; (ec88 <std.isra.0+0x3c>)
    ec76:	62a3      	str	r3, [r4, #40]	; 0x28
    ec78:	4b04      	ldr	r3, [pc, #16]	; (ec8c <std.isra.0+0x40>)
    ec7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    ec7c:	4b04      	ldr	r3, [pc, #16]	; (ec90 <std.isra.0+0x44>)
    ec7e:	6323      	str	r3, [r4, #48]	; 0x30
    ec80:	bd10      	pop	{r4, pc}
    ec82:	46c0      	nop			; (mov r8, r8)
    ec84:	0000f5c9 	.word	0x0000f5c9
    ec88:	0000f5f1 	.word	0x0000f5f1
    ec8c:	0000f629 	.word	0x0000f629
    ec90:	0000f655 	.word	0x0000f655

0000ec94 <__sfmoreglue>:
    ec94:	b570      	push	{r4, r5, r6, lr}
    ec96:	2568      	movs	r5, #104	; 0x68
    ec98:	1e4b      	subs	r3, r1, #1
    ec9a:	435d      	muls	r5, r3
    ec9c:	000e      	movs	r6, r1
    ec9e:	0029      	movs	r1, r5
    eca0:	3174      	adds	r1, #116	; 0x74
    eca2:	f000 f955 	bl	ef50 <_malloc_r>
    eca6:	1e04      	subs	r4, r0, #0
    eca8:	d008      	beq.n	ecbc <__sfmoreglue+0x28>
    ecaa:	2100      	movs	r1, #0
    ecac:	002a      	movs	r2, r5
    ecae:	6001      	str	r1, [r0, #0]
    ecb0:	6046      	str	r6, [r0, #4]
    ecb2:	300c      	adds	r0, #12
    ecb4:	60a0      	str	r0, [r4, #8]
    ecb6:	3268      	adds	r2, #104	; 0x68
    ecb8:	f7ff fe81 	bl	e9be <memset>
    ecbc:	0020      	movs	r0, r4
    ecbe:	bd70      	pop	{r4, r5, r6, pc}

0000ecc0 <__sinit>:
    ecc0:	6983      	ldr	r3, [r0, #24]
    ecc2:	b513      	push	{r0, r1, r4, lr}
    ecc4:	0004      	movs	r4, r0
    ecc6:	2b00      	cmp	r3, #0
    ecc8:	d128      	bne.n	ed1c <__sinit+0x5c>
    ecca:	6483      	str	r3, [r0, #72]	; 0x48
    eccc:	64c3      	str	r3, [r0, #76]	; 0x4c
    ecce:	6503      	str	r3, [r0, #80]	; 0x50
    ecd0:	4b13      	ldr	r3, [pc, #76]	; (ed20 <__sinit+0x60>)
    ecd2:	4a14      	ldr	r2, [pc, #80]	; (ed24 <__sinit+0x64>)
    ecd4:	681b      	ldr	r3, [r3, #0]
    ecd6:	6282      	str	r2, [r0, #40]	; 0x28
    ecd8:	9301      	str	r3, [sp, #4]
    ecda:	4298      	cmp	r0, r3
    ecdc:	d101      	bne.n	ece2 <__sinit+0x22>
    ecde:	2301      	movs	r3, #1
    ece0:	6183      	str	r3, [r0, #24]
    ece2:	0020      	movs	r0, r4
    ece4:	f000 f820 	bl	ed28 <__sfp>
    ece8:	6060      	str	r0, [r4, #4]
    ecea:	0020      	movs	r0, r4
    ecec:	f000 f81c 	bl	ed28 <__sfp>
    ecf0:	60a0      	str	r0, [r4, #8]
    ecf2:	0020      	movs	r0, r4
    ecf4:	f000 f818 	bl	ed28 <__sfp>
    ecf8:	2200      	movs	r2, #0
    ecfa:	60e0      	str	r0, [r4, #12]
    ecfc:	2104      	movs	r1, #4
    ecfe:	6860      	ldr	r0, [r4, #4]
    ed00:	f7ff ffa4 	bl	ec4c <std.isra.0>
    ed04:	2201      	movs	r2, #1
    ed06:	2109      	movs	r1, #9
    ed08:	68a0      	ldr	r0, [r4, #8]
    ed0a:	f7ff ff9f 	bl	ec4c <std.isra.0>
    ed0e:	2202      	movs	r2, #2
    ed10:	2112      	movs	r1, #18
    ed12:	68e0      	ldr	r0, [r4, #12]
    ed14:	f7ff ff9a 	bl	ec4c <std.isra.0>
    ed18:	2301      	movs	r3, #1
    ed1a:	61a3      	str	r3, [r4, #24]
    ed1c:	bd13      	pop	{r0, r1, r4, pc}
    ed1e:	46c0      	nop			; (mov r8, r8)
    ed20:	0000fc9c 	.word	0x0000fc9c
    ed24:	0000ec3d 	.word	0x0000ec3d

0000ed28 <__sfp>:
    ed28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed2a:	4b1d      	ldr	r3, [pc, #116]	; (eda0 <__sfp+0x78>)
    ed2c:	0006      	movs	r6, r0
    ed2e:	681d      	ldr	r5, [r3, #0]
    ed30:	69ab      	ldr	r3, [r5, #24]
    ed32:	2b00      	cmp	r3, #0
    ed34:	d102      	bne.n	ed3c <__sfp+0x14>
    ed36:	0028      	movs	r0, r5
    ed38:	f7ff ffc2 	bl	ecc0 <__sinit>
    ed3c:	3548      	adds	r5, #72	; 0x48
    ed3e:	68ac      	ldr	r4, [r5, #8]
    ed40:	686b      	ldr	r3, [r5, #4]
    ed42:	3b01      	subs	r3, #1
    ed44:	d405      	bmi.n	ed52 <__sfp+0x2a>
    ed46:	220c      	movs	r2, #12
    ed48:	5ea7      	ldrsh	r7, [r4, r2]
    ed4a:	2f00      	cmp	r7, #0
    ed4c:	d010      	beq.n	ed70 <__sfp+0x48>
    ed4e:	3468      	adds	r4, #104	; 0x68
    ed50:	e7f7      	b.n	ed42 <__sfp+0x1a>
    ed52:	682b      	ldr	r3, [r5, #0]
    ed54:	2b00      	cmp	r3, #0
    ed56:	d001      	beq.n	ed5c <__sfp+0x34>
    ed58:	682d      	ldr	r5, [r5, #0]
    ed5a:	e7f0      	b.n	ed3e <__sfp+0x16>
    ed5c:	2104      	movs	r1, #4
    ed5e:	0030      	movs	r0, r6
    ed60:	f7ff ff98 	bl	ec94 <__sfmoreglue>
    ed64:	6028      	str	r0, [r5, #0]
    ed66:	2800      	cmp	r0, #0
    ed68:	d1f6      	bne.n	ed58 <__sfp+0x30>
    ed6a:	230c      	movs	r3, #12
    ed6c:	6033      	str	r3, [r6, #0]
    ed6e:	e016      	b.n	ed9e <__sfp+0x76>
    ed70:	2301      	movs	r3, #1
    ed72:	0020      	movs	r0, r4
    ed74:	425b      	negs	r3, r3
    ed76:	81e3      	strh	r3, [r4, #14]
    ed78:	3302      	adds	r3, #2
    ed7a:	81a3      	strh	r3, [r4, #12]
    ed7c:	6667      	str	r7, [r4, #100]	; 0x64
    ed7e:	6027      	str	r7, [r4, #0]
    ed80:	60a7      	str	r7, [r4, #8]
    ed82:	6067      	str	r7, [r4, #4]
    ed84:	6127      	str	r7, [r4, #16]
    ed86:	6167      	str	r7, [r4, #20]
    ed88:	61a7      	str	r7, [r4, #24]
    ed8a:	305c      	adds	r0, #92	; 0x5c
    ed8c:	2208      	movs	r2, #8
    ed8e:	0039      	movs	r1, r7
    ed90:	f7ff fe15 	bl	e9be <memset>
    ed94:	0020      	movs	r0, r4
    ed96:	6367      	str	r7, [r4, #52]	; 0x34
    ed98:	63a7      	str	r7, [r4, #56]	; 0x38
    ed9a:	64a7      	str	r7, [r4, #72]	; 0x48
    ed9c:	64e7      	str	r7, [r4, #76]	; 0x4c
    ed9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eda0:	0000fc9c 	.word	0x0000fc9c

0000eda4 <_fwalk_reent>:
    eda4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    eda6:	0004      	movs	r4, r0
    eda8:	0007      	movs	r7, r0
    edaa:	2600      	movs	r6, #0
    edac:	9101      	str	r1, [sp, #4]
    edae:	3448      	adds	r4, #72	; 0x48
    edb0:	2c00      	cmp	r4, #0
    edb2:	d016      	beq.n	ede2 <_fwalk_reent+0x3e>
    edb4:	6863      	ldr	r3, [r4, #4]
    edb6:	68a5      	ldr	r5, [r4, #8]
    edb8:	9300      	str	r3, [sp, #0]
    edba:	9b00      	ldr	r3, [sp, #0]
    edbc:	3b01      	subs	r3, #1
    edbe:	9300      	str	r3, [sp, #0]
    edc0:	d40d      	bmi.n	edde <_fwalk_reent+0x3a>
    edc2:	89ab      	ldrh	r3, [r5, #12]
    edc4:	2b01      	cmp	r3, #1
    edc6:	d908      	bls.n	edda <_fwalk_reent+0x36>
    edc8:	220e      	movs	r2, #14
    edca:	5eab      	ldrsh	r3, [r5, r2]
    edcc:	3301      	adds	r3, #1
    edce:	d004      	beq.n	edda <_fwalk_reent+0x36>
    edd0:	0029      	movs	r1, r5
    edd2:	0038      	movs	r0, r7
    edd4:	9b01      	ldr	r3, [sp, #4]
    edd6:	4798      	blx	r3
    edd8:	4306      	orrs	r6, r0
    edda:	3568      	adds	r5, #104	; 0x68
    eddc:	e7ed      	b.n	edba <_fwalk_reent+0x16>
    edde:	6824      	ldr	r4, [r4, #0]
    ede0:	e7e6      	b.n	edb0 <_fwalk_reent+0xc>
    ede2:	0030      	movs	r0, r6
    ede4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000ede8 <__swhatbuf_r>:
    ede8:	b570      	push	{r4, r5, r6, lr}
    edea:	000e      	movs	r6, r1
    edec:	001d      	movs	r5, r3
    edee:	230e      	movs	r3, #14
    edf0:	5ec9      	ldrsh	r1, [r1, r3]
    edf2:	b090      	sub	sp, #64	; 0x40
    edf4:	0014      	movs	r4, r2
    edf6:	2900      	cmp	r1, #0
    edf8:	da06      	bge.n	ee08 <__swhatbuf_r+0x20>
    edfa:	2300      	movs	r3, #0
    edfc:	602b      	str	r3, [r5, #0]
    edfe:	89b3      	ldrh	r3, [r6, #12]
    ee00:	061b      	lsls	r3, r3, #24
    ee02:	d50f      	bpl.n	ee24 <__swhatbuf_r+0x3c>
    ee04:	2340      	movs	r3, #64	; 0x40
    ee06:	e00f      	b.n	ee28 <__swhatbuf_r+0x40>
    ee08:	aa01      	add	r2, sp, #4
    ee0a:	f000 fd1d 	bl	f848 <_fstat_r>
    ee0e:	2800      	cmp	r0, #0
    ee10:	dbf3      	blt.n	edfa <__swhatbuf_r+0x12>
    ee12:	23f0      	movs	r3, #240	; 0xf0
    ee14:	9a02      	ldr	r2, [sp, #8]
    ee16:	021b      	lsls	r3, r3, #8
    ee18:	4013      	ands	r3, r2
    ee1a:	4a05      	ldr	r2, [pc, #20]	; (ee30 <__swhatbuf_r+0x48>)
    ee1c:	189b      	adds	r3, r3, r2
    ee1e:	425a      	negs	r2, r3
    ee20:	4153      	adcs	r3, r2
    ee22:	602b      	str	r3, [r5, #0]
    ee24:	2380      	movs	r3, #128	; 0x80
    ee26:	00db      	lsls	r3, r3, #3
    ee28:	2000      	movs	r0, #0
    ee2a:	6023      	str	r3, [r4, #0]
    ee2c:	b010      	add	sp, #64	; 0x40
    ee2e:	bd70      	pop	{r4, r5, r6, pc}
    ee30:	ffffe000 	.word	0xffffe000

0000ee34 <__smakebuf_r>:
    ee34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ee36:	2602      	movs	r6, #2
    ee38:	898b      	ldrh	r3, [r1, #12]
    ee3a:	0005      	movs	r5, r0
    ee3c:	000c      	movs	r4, r1
    ee3e:	4233      	tst	r3, r6
    ee40:	d110      	bne.n	ee64 <__smakebuf_r+0x30>
    ee42:	ab01      	add	r3, sp, #4
    ee44:	466a      	mov	r2, sp
    ee46:	f7ff ffcf 	bl	ede8 <__swhatbuf_r>
    ee4a:	9900      	ldr	r1, [sp, #0]
    ee4c:	0007      	movs	r7, r0
    ee4e:	0028      	movs	r0, r5
    ee50:	f000 f87e 	bl	ef50 <_malloc_r>
    ee54:	2800      	cmp	r0, #0
    ee56:	d10c      	bne.n	ee72 <__smakebuf_r+0x3e>
    ee58:	220c      	movs	r2, #12
    ee5a:	5ea3      	ldrsh	r3, [r4, r2]
    ee5c:	059a      	lsls	r2, r3, #22
    ee5e:	d423      	bmi.n	eea8 <__smakebuf_r+0x74>
    ee60:	4333      	orrs	r3, r6
    ee62:	81a3      	strh	r3, [r4, #12]
    ee64:	0023      	movs	r3, r4
    ee66:	3347      	adds	r3, #71	; 0x47
    ee68:	6023      	str	r3, [r4, #0]
    ee6a:	6123      	str	r3, [r4, #16]
    ee6c:	2301      	movs	r3, #1
    ee6e:	6163      	str	r3, [r4, #20]
    ee70:	e01a      	b.n	eea8 <__smakebuf_r+0x74>
    ee72:	2280      	movs	r2, #128	; 0x80
    ee74:	4b0d      	ldr	r3, [pc, #52]	; (eeac <__smakebuf_r+0x78>)
    ee76:	62ab      	str	r3, [r5, #40]	; 0x28
    ee78:	89a3      	ldrh	r3, [r4, #12]
    ee7a:	6020      	str	r0, [r4, #0]
    ee7c:	4313      	orrs	r3, r2
    ee7e:	81a3      	strh	r3, [r4, #12]
    ee80:	9b00      	ldr	r3, [sp, #0]
    ee82:	6120      	str	r0, [r4, #16]
    ee84:	6163      	str	r3, [r4, #20]
    ee86:	9b01      	ldr	r3, [sp, #4]
    ee88:	2b00      	cmp	r3, #0
    ee8a:	d00a      	beq.n	eea2 <__smakebuf_r+0x6e>
    ee8c:	230e      	movs	r3, #14
    ee8e:	5ee1      	ldrsh	r1, [r4, r3]
    ee90:	0028      	movs	r0, r5
    ee92:	f000 fceb 	bl	f86c <_isatty_r>
    ee96:	2800      	cmp	r0, #0
    ee98:	d003      	beq.n	eea2 <__smakebuf_r+0x6e>
    ee9a:	2201      	movs	r2, #1
    ee9c:	89a3      	ldrh	r3, [r4, #12]
    ee9e:	4313      	orrs	r3, r2
    eea0:	81a3      	strh	r3, [r4, #12]
    eea2:	89a3      	ldrh	r3, [r4, #12]
    eea4:	431f      	orrs	r7, r3
    eea6:	81a7      	strh	r7, [r4, #12]
    eea8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    eeaa:	46c0      	nop			; (mov r8, r8)
    eeac:	0000ec3d 	.word	0x0000ec3d

0000eeb0 <malloc>:
    eeb0:	b510      	push	{r4, lr}
    eeb2:	4b03      	ldr	r3, [pc, #12]	; (eec0 <malloc+0x10>)
    eeb4:	0001      	movs	r1, r0
    eeb6:	6818      	ldr	r0, [r3, #0]
    eeb8:	f000 f84a 	bl	ef50 <_malloc_r>
    eebc:	bd10      	pop	{r4, pc}
    eebe:	46c0      	nop			; (mov r8, r8)
    eec0:	20000088 	.word	0x20000088

0000eec4 <_free_r>:
    eec4:	b530      	push	{r4, r5, lr}
    eec6:	2900      	cmp	r1, #0
    eec8:	d03e      	beq.n	ef48 <_free_r+0x84>
    eeca:	3904      	subs	r1, #4
    eecc:	680b      	ldr	r3, [r1, #0]
    eece:	2b00      	cmp	r3, #0
    eed0:	da00      	bge.n	eed4 <_free_r+0x10>
    eed2:	18c9      	adds	r1, r1, r3
    eed4:	4a1d      	ldr	r2, [pc, #116]	; (ef4c <_free_r+0x88>)
    eed6:	6813      	ldr	r3, [r2, #0]
    eed8:	0014      	movs	r4, r2
    eeda:	2b00      	cmp	r3, #0
    eedc:	d102      	bne.n	eee4 <_free_r+0x20>
    eede:	604b      	str	r3, [r1, #4]
    eee0:	6011      	str	r1, [r2, #0]
    eee2:	e031      	b.n	ef48 <_free_r+0x84>
    eee4:	428b      	cmp	r3, r1
    eee6:	d90d      	bls.n	ef04 <_free_r+0x40>
    eee8:	680a      	ldr	r2, [r1, #0]
    eeea:	1888      	adds	r0, r1, r2
    eeec:	4283      	cmp	r3, r0
    eeee:	d103      	bne.n	eef8 <_free_r+0x34>
    eef0:	6818      	ldr	r0, [r3, #0]
    eef2:	685b      	ldr	r3, [r3, #4]
    eef4:	1882      	adds	r2, r0, r2
    eef6:	600a      	str	r2, [r1, #0]
    eef8:	604b      	str	r3, [r1, #4]
    eefa:	6021      	str	r1, [r4, #0]
    eefc:	e024      	b.n	ef48 <_free_r+0x84>
    eefe:	428a      	cmp	r2, r1
    ef00:	d803      	bhi.n	ef0a <_free_r+0x46>
    ef02:	0013      	movs	r3, r2
    ef04:	685a      	ldr	r2, [r3, #4]
    ef06:	2a00      	cmp	r2, #0
    ef08:	d1f9      	bne.n	eefe <_free_r+0x3a>
    ef0a:	681d      	ldr	r5, [r3, #0]
    ef0c:	195c      	adds	r4, r3, r5
    ef0e:	428c      	cmp	r4, r1
    ef10:	d10b      	bne.n	ef2a <_free_r+0x66>
    ef12:	6809      	ldr	r1, [r1, #0]
    ef14:	1869      	adds	r1, r5, r1
    ef16:	1858      	adds	r0, r3, r1
    ef18:	6019      	str	r1, [r3, #0]
    ef1a:	4282      	cmp	r2, r0
    ef1c:	d114      	bne.n	ef48 <_free_r+0x84>
    ef1e:	6810      	ldr	r0, [r2, #0]
    ef20:	6852      	ldr	r2, [r2, #4]
    ef22:	1841      	adds	r1, r0, r1
    ef24:	6019      	str	r1, [r3, #0]
    ef26:	605a      	str	r2, [r3, #4]
    ef28:	e00e      	b.n	ef48 <_free_r+0x84>
    ef2a:	428c      	cmp	r4, r1
    ef2c:	d902      	bls.n	ef34 <_free_r+0x70>
    ef2e:	230c      	movs	r3, #12
    ef30:	6003      	str	r3, [r0, #0]
    ef32:	e009      	b.n	ef48 <_free_r+0x84>
    ef34:	6808      	ldr	r0, [r1, #0]
    ef36:	180c      	adds	r4, r1, r0
    ef38:	42a2      	cmp	r2, r4
    ef3a:	d103      	bne.n	ef44 <_free_r+0x80>
    ef3c:	6814      	ldr	r4, [r2, #0]
    ef3e:	6852      	ldr	r2, [r2, #4]
    ef40:	1820      	adds	r0, r4, r0
    ef42:	6008      	str	r0, [r1, #0]
    ef44:	604a      	str	r2, [r1, #4]
    ef46:	6059      	str	r1, [r3, #4]
    ef48:	bd30      	pop	{r4, r5, pc}
    ef4a:	46c0      	nop			; (mov r8, r8)
    ef4c:	20000d98 	.word	0x20000d98

0000ef50 <_malloc_r>:
    ef50:	2303      	movs	r3, #3
    ef52:	b570      	push	{r4, r5, r6, lr}
    ef54:	1ccd      	adds	r5, r1, #3
    ef56:	439d      	bics	r5, r3
    ef58:	3508      	adds	r5, #8
    ef5a:	0006      	movs	r6, r0
    ef5c:	2d0c      	cmp	r5, #12
    ef5e:	d201      	bcs.n	ef64 <_malloc_r+0x14>
    ef60:	250c      	movs	r5, #12
    ef62:	e005      	b.n	ef70 <_malloc_r+0x20>
    ef64:	2d00      	cmp	r5, #0
    ef66:	da03      	bge.n	ef70 <_malloc_r+0x20>
    ef68:	230c      	movs	r3, #12
    ef6a:	2000      	movs	r0, #0
    ef6c:	6033      	str	r3, [r6, #0]
    ef6e:	e040      	b.n	eff2 <_malloc_r+0xa2>
    ef70:	42a9      	cmp	r1, r5
    ef72:	d8f9      	bhi.n	ef68 <_malloc_r+0x18>
    ef74:	4b1f      	ldr	r3, [pc, #124]	; (eff4 <_malloc_r+0xa4>)
    ef76:	681c      	ldr	r4, [r3, #0]
    ef78:	001a      	movs	r2, r3
    ef7a:	0021      	movs	r1, r4
    ef7c:	2900      	cmp	r1, #0
    ef7e:	d013      	beq.n	efa8 <_malloc_r+0x58>
    ef80:	680b      	ldr	r3, [r1, #0]
    ef82:	1b5b      	subs	r3, r3, r5
    ef84:	d40d      	bmi.n	efa2 <_malloc_r+0x52>
    ef86:	2b0b      	cmp	r3, #11
    ef88:	d902      	bls.n	ef90 <_malloc_r+0x40>
    ef8a:	600b      	str	r3, [r1, #0]
    ef8c:	18cc      	adds	r4, r1, r3
    ef8e:	e01e      	b.n	efce <_malloc_r+0x7e>
    ef90:	428c      	cmp	r4, r1
    ef92:	d102      	bne.n	ef9a <_malloc_r+0x4a>
    ef94:	6863      	ldr	r3, [r4, #4]
    ef96:	6013      	str	r3, [r2, #0]
    ef98:	e01a      	b.n	efd0 <_malloc_r+0x80>
    ef9a:	684b      	ldr	r3, [r1, #4]
    ef9c:	6063      	str	r3, [r4, #4]
    ef9e:	000c      	movs	r4, r1
    efa0:	e016      	b.n	efd0 <_malloc_r+0x80>
    efa2:	000c      	movs	r4, r1
    efa4:	6849      	ldr	r1, [r1, #4]
    efa6:	e7e9      	b.n	ef7c <_malloc_r+0x2c>
    efa8:	4c13      	ldr	r4, [pc, #76]	; (eff8 <_malloc_r+0xa8>)
    efaa:	6823      	ldr	r3, [r4, #0]
    efac:	2b00      	cmp	r3, #0
    efae:	d103      	bne.n	efb8 <_malloc_r+0x68>
    efb0:	0030      	movs	r0, r6
    efb2:	f000 faf7 	bl	f5a4 <_sbrk_r>
    efb6:	6020      	str	r0, [r4, #0]
    efb8:	0029      	movs	r1, r5
    efba:	0030      	movs	r0, r6
    efbc:	f000 faf2 	bl	f5a4 <_sbrk_r>
    efc0:	1c43      	adds	r3, r0, #1
    efc2:	d0d1      	beq.n	ef68 <_malloc_r+0x18>
    efc4:	2303      	movs	r3, #3
    efc6:	1cc4      	adds	r4, r0, #3
    efc8:	439c      	bics	r4, r3
    efca:	42a0      	cmp	r0, r4
    efcc:	d10a      	bne.n	efe4 <_malloc_r+0x94>
    efce:	6025      	str	r5, [r4, #0]
    efd0:	0020      	movs	r0, r4
    efd2:	2207      	movs	r2, #7
    efd4:	300b      	adds	r0, #11
    efd6:	1d23      	adds	r3, r4, #4
    efd8:	4390      	bics	r0, r2
    efda:	1ac3      	subs	r3, r0, r3
    efdc:	d009      	beq.n	eff2 <_malloc_r+0xa2>
    efde:	425a      	negs	r2, r3
    efe0:	50e2      	str	r2, [r4, r3]
    efe2:	e006      	b.n	eff2 <_malloc_r+0xa2>
    efe4:	1a21      	subs	r1, r4, r0
    efe6:	0030      	movs	r0, r6
    efe8:	f000 fadc 	bl	f5a4 <_sbrk_r>
    efec:	1c43      	adds	r3, r0, #1
    efee:	d1ee      	bne.n	efce <_malloc_r+0x7e>
    eff0:	e7ba      	b.n	ef68 <_malloc_r+0x18>
    eff2:	bd70      	pop	{r4, r5, r6, pc}
    eff4:	20000d98 	.word	0x20000d98
    eff8:	20000d94 	.word	0x20000d94

0000effc <__sfputc_r>:
    effc:	6893      	ldr	r3, [r2, #8]
    effe:	b510      	push	{r4, lr}
    f000:	3b01      	subs	r3, #1
    f002:	6093      	str	r3, [r2, #8]
    f004:	2b00      	cmp	r3, #0
    f006:	da05      	bge.n	f014 <__sfputc_r+0x18>
    f008:	6994      	ldr	r4, [r2, #24]
    f00a:	42a3      	cmp	r3, r4
    f00c:	db08      	blt.n	f020 <__sfputc_r+0x24>
    f00e:	b2cb      	uxtb	r3, r1
    f010:	2b0a      	cmp	r3, #10
    f012:	d005      	beq.n	f020 <__sfputc_r+0x24>
    f014:	6813      	ldr	r3, [r2, #0]
    f016:	1c58      	adds	r0, r3, #1
    f018:	6010      	str	r0, [r2, #0]
    f01a:	7019      	strb	r1, [r3, #0]
    f01c:	b2c8      	uxtb	r0, r1
    f01e:	e001      	b.n	f024 <__sfputc_r+0x28>
    f020:	f000 fb1e 	bl	f660 <__swbuf_r>
    f024:	bd10      	pop	{r4, pc}

0000f026 <__sfputs_r>:
    f026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f028:	0006      	movs	r6, r0
    f02a:	000f      	movs	r7, r1
    f02c:	0014      	movs	r4, r2
    f02e:	18d5      	adds	r5, r2, r3
    f030:	42ac      	cmp	r4, r5
    f032:	d008      	beq.n	f046 <__sfputs_r+0x20>
    f034:	7821      	ldrb	r1, [r4, #0]
    f036:	003a      	movs	r2, r7
    f038:	0030      	movs	r0, r6
    f03a:	f7ff ffdf 	bl	effc <__sfputc_r>
    f03e:	3401      	adds	r4, #1
    f040:	1c43      	adds	r3, r0, #1
    f042:	d1f5      	bne.n	f030 <__sfputs_r+0xa>
    f044:	e000      	b.n	f048 <__sfputs_r+0x22>
    f046:	2000      	movs	r0, #0
    f048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000f04c <_vfiprintf_r>:
    f04c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f04e:	b09f      	sub	sp, #124	; 0x7c
    f050:	0006      	movs	r6, r0
    f052:	000f      	movs	r7, r1
    f054:	9202      	str	r2, [sp, #8]
    f056:	9305      	str	r3, [sp, #20]
    f058:	2800      	cmp	r0, #0
    f05a:	d004      	beq.n	f066 <_vfiprintf_r+0x1a>
    f05c:	6983      	ldr	r3, [r0, #24]
    f05e:	2b00      	cmp	r3, #0
    f060:	d101      	bne.n	f066 <_vfiprintf_r+0x1a>
    f062:	f7ff fe2d 	bl	ecc0 <__sinit>
    f066:	4b7f      	ldr	r3, [pc, #508]	; (f264 <_vfiprintf_r+0x218>)
    f068:	429f      	cmp	r7, r3
    f06a:	d101      	bne.n	f070 <_vfiprintf_r+0x24>
    f06c:	6877      	ldr	r7, [r6, #4]
    f06e:	e008      	b.n	f082 <_vfiprintf_r+0x36>
    f070:	4b7d      	ldr	r3, [pc, #500]	; (f268 <_vfiprintf_r+0x21c>)
    f072:	429f      	cmp	r7, r3
    f074:	d101      	bne.n	f07a <_vfiprintf_r+0x2e>
    f076:	68b7      	ldr	r7, [r6, #8]
    f078:	e003      	b.n	f082 <_vfiprintf_r+0x36>
    f07a:	4b7c      	ldr	r3, [pc, #496]	; (f26c <_vfiprintf_r+0x220>)
    f07c:	429f      	cmp	r7, r3
    f07e:	d100      	bne.n	f082 <_vfiprintf_r+0x36>
    f080:	68f7      	ldr	r7, [r6, #12]
    f082:	89bb      	ldrh	r3, [r7, #12]
    f084:	071b      	lsls	r3, r3, #28
    f086:	d50a      	bpl.n	f09e <_vfiprintf_r+0x52>
    f088:	693b      	ldr	r3, [r7, #16]
    f08a:	2b00      	cmp	r3, #0
    f08c:	d007      	beq.n	f09e <_vfiprintf_r+0x52>
    f08e:	2300      	movs	r3, #0
    f090:	ad06      	add	r5, sp, #24
    f092:	616b      	str	r3, [r5, #20]
    f094:	3320      	adds	r3, #32
    f096:	766b      	strb	r3, [r5, #25]
    f098:	3310      	adds	r3, #16
    f09a:	76ab      	strb	r3, [r5, #26]
    f09c:	e03d      	b.n	f11a <_vfiprintf_r+0xce>
    f09e:	0039      	movs	r1, r7
    f0a0:	0030      	movs	r0, r6
    f0a2:	f000 fb49 	bl	f738 <__swsetup_r>
    f0a6:	2800      	cmp	r0, #0
    f0a8:	d0f1      	beq.n	f08e <_vfiprintf_r+0x42>
    f0aa:	2001      	movs	r0, #1
    f0ac:	4240      	negs	r0, r0
    f0ae:	e0d6      	b.n	f25e <_vfiprintf_r+0x212>
    f0b0:	9a05      	ldr	r2, [sp, #20]
    f0b2:	1d11      	adds	r1, r2, #4
    f0b4:	6812      	ldr	r2, [r2, #0]
    f0b6:	9105      	str	r1, [sp, #20]
    f0b8:	2a00      	cmp	r2, #0
    f0ba:	da00      	bge.n	f0be <_vfiprintf_r+0x72>
    f0bc:	e07f      	b.n	f1be <_vfiprintf_r+0x172>
    f0be:	9209      	str	r2, [sp, #36]	; 0x24
    f0c0:	3401      	adds	r4, #1
    f0c2:	7823      	ldrb	r3, [r4, #0]
    f0c4:	2b2e      	cmp	r3, #46	; 0x2e
    f0c6:	d100      	bne.n	f0ca <_vfiprintf_r+0x7e>
    f0c8:	e08d      	b.n	f1e6 <_vfiprintf_r+0x19a>
    f0ca:	7821      	ldrb	r1, [r4, #0]
    f0cc:	2203      	movs	r2, #3
    f0ce:	4868      	ldr	r0, [pc, #416]	; (f270 <_vfiprintf_r+0x224>)
    f0d0:	f000 fbf2 	bl	f8b8 <memchr>
    f0d4:	2800      	cmp	r0, #0
    f0d6:	d007      	beq.n	f0e8 <_vfiprintf_r+0x9c>
    f0d8:	4b65      	ldr	r3, [pc, #404]	; (f270 <_vfiprintf_r+0x224>)
    f0da:	682a      	ldr	r2, [r5, #0]
    f0dc:	1ac0      	subs	r0, r0, r3
    f0de:	2340      	movs	r3, #64	; 0x40
    f0e0:	4083      	lsls	r3, r0
    f0e2:	4313      	orrs	r3, r2
    f0e4:	602b      	str	r3, [r5, #0]
    f0e6:	3401      	adds	r4, #1
    f0e8:	7821      	ldrb	r1, [r4, #0]
    f0ea:	1c63      	adds	r3, r4, #1
    f0ec:	2206      	movs	r2, #6
    f0ee:	4861      	ldr	r0, [pc, #388]	; (f274 <_vfiprintf_r+0x228>)
    f0f0:	9302      	str	r3, [sp, #8]
    f0f2:	7629      	strb	r1, [r5, #24]
    f0f4:	f000 fbe0 	bl	f8b8 <memchr>
    f0f8:	2800      	cmp	r0, #0
    f0fa:	d100      	bne.n	f0fe <_vfiprintf_r+0xb2>
    f0fc:	e09d      	b.n	f23a <_vfiprintf_r+0x1ee>
    f0fe:	4b5e      	ldr	r3, [pc, #376]	; (f278 <_vfiprintf_r+0x22c>)
    f100:	2b00      	cmp	r3, #0
    f102:	d000      	beq.n	f106 <_vfiprintf_r+0xba>
    f104:	e090      	b.n	f228 <_vfiprintf_r+0x1dc>
    f106:	2207      	movs	r2, #7
    f108:	9b05      	ldr	r3, [sp, #20]
    f10a:	3307      	adds	r3, #7
    f10c:	4393      	bics	r3, r2
    f10e:	3308      	adds	r3, #8
    f110:	9305      	str	r3, [sp, #20]
    f112:	696b      	ldr	r3, [r5, #20]
    f114:	9a03      	ldr	r2, [sp, #12]
    f116:	189b      	adds	r3, r3, r2
    f118:	616b      	str	r3, [r5, #20]
    f11a:	9c02      	ldr	r4, [sp, #8]
    f11c:	7823      	ldrb	r3, [r4, #0]
    f11e:	2b00      	cmp	r3, #0
    f120:	d104      	bne.n	f12c <_vfiprintf_r+0xe0>
    f122:	9b02      	ldr	r3, [sp, #8]
    f124:	1ae3      	subs	r3, r4, r3
    f126:	9304      	str	r3, [sp, #16]
    f128:	d012      	beq.n	f150 <_vfiprintf_r+0x104>
    f12a:	e003      	b.n	f134 <_vfiprintf_r+0xe8>
    f12c:	2b25      	cmp	r3, #37	; 0x25
    f12e:	d0f8      	beq.n	f122 <_vfiprintf_r+0xd6>
    f130:	3401      	adds	r4, #1
    f132:	e7f3      	b.n	f11c <_vfiprintf_r+0xd0>
    f134:	9b04      	ldr	r3, [sp, #16]
    f136:	9a02      	ldr	r2, [sp, #8]
    f138:	0039      	movs	r1, r7
    f13a:	0030      	movs	r0, r6
    f13c:	f7ff ff73 	bl	f026 <__sfputs_r>
    f140:	1c43      	adds	r3, r0, #1
    f142:	d100      	bne.n	f146 <_vfiprintf_r+0xfa>
    f144:	e086      	b.n	f254 <_vfiprintf_r+0x208>
    f146:	696a      	ldr	r2, [r5, #20]
    f148:	9b04      	ldr	r3, [sp, #16]
    f14a:	4694      	mov	ip, r2
    f14c:	4463      	add	r3, ip
    f14e:	616b      	str	r3, [r5, #20]
    f150:	7823      	ldrb	r3, [r4, #0]
    f152:	2b00      	cmp	r3, #0
    f154:	d07e      	beq.n	f254 <_vfiprintf_r+0x208>
    f156:	2201      	movs	r2, #1
    f158:	2300      	movs	r3, #0
    f15a:	4252      	negs	r2, r2
    f15c:	606a      	str	r2, [r5, #4]
    f15e:	a902      	add	r1, sp, #8
    f160:	3254      	adds	r2, #84	; 0x54
    f162:	1852      	adds	r2, r2, r1
    f164:	3401      	adds	r4, #1
    f166:	602b      	str	r3, [r5, #0]
    f168:	60eb      	str	r3, [r5, #12]
    f16a:	60ab      	str	r3, [r5, #8]
    f16c:	7013      	strb	r3, [r2, #0]
    f16e:	65ab      	str	r3, [r5, #88]	; 0x58
    f170:	7821      	ldrb	r1, [r4, #0]
    f172:	2205      	movs	r2, #5
    f174:	4841      	ldr	r0, [pc, #260]	; (f27c <_vfiprintf_r+0x230>)
    f176:	f000 fb9f 	bl	f8b8 <memchr>
    f17a:	2800      	cmp	r0, #0
    f17c:	d008      	beq.n	f190 <_vfiprintf_r+0x144>
    f17e:	4b3f      	ldr	r3, [pc, #252]	; (f27c <_vfiprintf_r+0x230>)
    f180:	682a      	ldr	r2, [r5, #0]
    f182:	1ac0      	subs	r0, r0, r3
    f184:	2301      	movs	r3, #1
    f186:	4083      	lsls	r3, r0
    f188:	4313      	orrs	r3, r2
    f18a:	602b      	str	r3, [r5, #0]
    f18c:	3401      	adds	r4, #1
    f18e:	e7ef      	b.n	f170 <_vfiprintf_r+0x124>
    f190:	682b      	ldr	r3, [r5, #0]
    f192:	06da      	lsls	r2, r3, #27
    f194:	d504      	bpl.n	f1a0 <_vfiprintf_r+0x154>
    f196:	2253      	movs	r2, #83	; 0x53
    f198:	2120      	movs	r1, #32
    f19a:	a802      	add	r0, sp, #8
    f19c:	1812      	adds	r2, r2, r0
    f19e:	7011      	strb	r1, [r2, #0]
    f1a0:	071a      	lsls	r2, r3, #28
    f1a2:	d504      	bpl.n	f1ae <_vfiprintf_r+0x162>
    f1a4:	2253      	movs	r2, #83	; 0x53
    f1a6:	212b      	movs	r1, #43	; 0x2b
    f1a8:	a802      	add	r0, sp, #8
    f1aa:	1812      	adds	r2, r2, r0
    f1ac:	7011      	strb	r1, [r2, #0]
    f1ae:	7822      	ldrb	r2, [r4, #0]
    f1b0:	2a2a      	cmp	r2, #42	; 0x2a
    f1b2:	d100      	bne.n	f1b6 <_vfiprintf_r+0x16a>
    f1b4:	e77c      	b.n	f0b0 <_vfiprintf_r+0x64>
    f1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f1b8:	2000      	movs	r0, #0
    f1ba:	210a      	movs	r1, #10
    f1bc:	e005      	b.n	f1ca <_vfiprintf_r+0x17e>
    f1be:	4252      	negs	r2, r2
    f1c0:	60ea      	str	r2, [r5, #12]
    f1c2:	2202      	movs	r2, #2
    f1c4:	4313      	orrs	r3, r2
    f1c6:	602b      	str	r3, [r5, #0]
    f1c8:	e77a      	b.n	f0c0 <_vfiprintf_r+0x74>
    f1ca:	7822      	ldrb	r2, [r4, #0]
    f1cc:	3a30      	subs	r2, #48	; 0x30
    f1ce:	2a09      	cmp	r2, #9
    f1d0:	d804      	bhi.n	f1dc <_vfiprintf_r+0x190>
    f1d2:	434b      	muls	r3, r1
    f1d4:	3401      	adds	r4, #1
    f1d6:	189b      	adds	r3, r3, r2
    f1d8:	2001      	movs	r0, #1
    f1da:	e7f6      	b.n	f1ca <_vfiprintf_r+0x17e>
    f1dc:	2800      	cmp	r0, #0
    f1de:	d100      	bne.n	f1e2 <_vfiprintf_r+0x196>
    f1e0:	e76f      	b.n	f0c2 <_vfiprintf_r+0x76>
    f1e2:	9309      	str	r3, [sp, #36]	; 0x24
    f1e4:	e76d      	b.n	f0c2 <_vfiprintf_r+0x76>
    f1e6:	7863      	ldrb	r3, [r4, #1]
    f1e8:	2b2a      	cmp	r3, #42	; 0x2a
    f1ea:	d10a      	bne.n	f202 <_vfiprintf_r+0x1b6>
    f1ec:	9b05      	ldr	r3, [sp, #20]
    f1ee:	3402      	adds	r4, #2
    f1f0:	1d1a      	adds	r2, r3, #4
    f1f2:	681b      	ldr	r3, [r3, #0]
    f1f4:	9205      	str	r2, [sp, #20]
    f1f6:	2b00      	cmp	r3, #0
    f1f8:	da01      	bge.n	f1fe <_vfiprintf_r+0x1b2>
    f1fa:	2301      	movs	r3, #1
    f1fc:	425b      	negs	r3, r3
    f1fe:	9307      	str	r3, [sp, #28]
    f200:	e763      	b.n	f0ca <_vfiprintf_r+0x7e>
    f202:	2300      	movs	r3, #0
    f204:	200a      	movs	r0, #10
    f206:	001a      	movs	r2, r3
    f208:	3401      	adds	r4, #1
    f20a:	606b      	str	r3, [r5, #4]
    f20c:	7821      	ldrb	r1, [r4, #0]
    f20e:	3930      	subs	r1, #48	; 0x30
    f210:	2909      	cmp	r1, #9
    f212:	d804      	bhi.n	f21e <_vfiprintf_r+0x1d2>
    f214:	4342      	muls	r2, r0
    f216:	3401      	adds	r4, #1
    f218:	1852      	adds	r2, r2, r1
    f21a:	2301      	movs	r3, #1
    f21c:	e7f6      	b.n	f20c <_vfiprintf_r+0x1c0>
    f21e:	2b00      	cmp	r3, #0
    f220:	d100      	bne.n	f224 <_vfiprintf_r+0x1d8>
    f222:	e752      	b.n	f0ca <_vfiprintf_r+0x7e>
    f224:	9207      	str	r2, [sp, #28]
    f226:	e750      	b.n	f0ca <_vfiprintf_r+0x7e>
    f228:	ab05      	add	r3, sp, #20
    f22a:	9300      	str	r3, [sp, #0]
    f22c:	003a      	movs	r2, r7
    f22e:	4b14      	ldr	r3, [pc, #80]	; (f280 <_vfiprintf_r+0x234>)
    f230:	0029      	movs	r1, r5
    f232:	0030      	movs	r0, r6
    f234:	e000      	b.n	f238 <_vfiprintf_r+0x1ec>
    f236:	bf00      	nop
    f238:	e007      	b.n	f24a <_vfiprintf_r+0x1fe>
    f23a:	ab05      	add	r3, sp, #20
    f23c:	9300      	str	r3, [sp, #0]
    f23e:	003a      	movs	r2, r7
    f240:	4b0f      	ldr	r3, [pc, #60]	; (f280 <_vfiprintf_r+0x234>)
    f242:	0029      	movs	r1, r5
    f244:	0030      	movs	r0, r6
    f246:	f000 f88b 	bl	f360 <_printf_i>
    f24a:	9003      	str	r0, [sp, #12]
    f24c:	9b03      	ldr	r3, [sp, #12]
    f24e:	3301      	adds	r3, #1
    f250:	d000      	beq.n	f254 <_vfiprintf_r+0x208>
    f252:	e75e      	b.n	f112 <_vfiprintf_r+0xc6>
    f254:	89bb      	ldrh	r3, [r7, #12]
    f256:	065b      	lsls	r3, r3, #25
    f258:	d500      	bpl.n	f25c <_vfiprintf_r+0x210>
    f25a:	e726      	b.n	f0aa <_vfiprintf_r+0x5e>
    f25c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f25e:	b01f      	add	sp, #124	; 0x7c
    f260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f262:	46c0      	nop			; (mov r8, r8)
    f264:	0000fca0 	.word	0x0000fca0
    f268:	0000fcc0 	.word	0x0000fcc0
    f26c:	0000fce0 	.word	0x0000fce0
    f270:	0000fd06 	.word	0x0000fd06
    f274:	0000fd0a 	.word	0x0000fd0a
    f278:	00000000 	.word	0x00000000
    f27c:	0000fd00 	.word	0x0000fd00
    f280:	0000f027 	.word	0x0000f027

0000f284 <_printf_common>:
    f284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f286:	0017      	movs	r7, r2
    f288:	9301      	str	r3, [sp, #4]
    f28a:	688a      	ldr	r2, [r1, #8]
    f28c:	690b      	ldr	r3, [r1, #16]
    f28e:	9000      	str	r0, [sp, #0]
    f290:	000c      	movs	r4, r1
    f292:	4293      	cmp	r3, r2
    f294:	da00      	bge.n	f298 <_printf_common+0x14>
    f296:	0013      	movs	r3, r2
    f298:	0022      	movs	r2, r4
    f29a:	603b      	str	r3, [r7, #0]
    f29c:	3243      	adds	r2, #67	; 0x43
    f29e:	7812      	ldrb	r2, [r2, #0]
    f2a0:	2a00      	cmp	r2, #0
    f2a2:	d001      	beq.n	f2a8 <_printf_common+0x24>
    f2a4:	3301      	adds	r3, #1
    f2a6:	603b      	str	r3, [r7, #0]
    f2a8:	6823      	ldr	r3, [r4, #0]
    f2aa:	069b      	lsls	r3, r3, #26
    f2ac:	d502      	bpl.n	f2b4 <_printf_common+0x30>
    f2ae:	683b      	ldr	r3, [r7, #0]
    f2b0:	3302      	adds	r3, #2
    f2b2:	603b      	str	r3, [r7, #0]
    f2b4:	2506      	movs	r5, #6
    f2b6:	6823      	ldr	r3, [r4, #0]
    f2b8:	401d      	ands	r5, r3
    f2ba:	d01e      	beq.n	f2fa <_printf_common+0x76>
    f2bc:	0023      	movs	r3, r4
    f2be:	3343      	adds	r3, #67	; 0x43
    f2c0:	781b      	ldrb	r3, [r3, #0]
    f2c2:	1e5a      	subs	r2, r3, #1
    f2c4:	4193      	sbcs	r3, r2
    f2c6:	6822      	ldr	r2, [r4, #0]
    f2c8:	0692      	lsls	r2, r2, #26
    f2ca:	d51c      	bpl.n	f306 <_printf_common+0x82>
    f2cc:	2030      	movs	r0, #48	; 0x30
    f2ce:	18e1      	adds	r1, r4, r3
    f2d0:	3143      	adds	r1, #67	; 0x43
    f2d2:	7008      	strb	r0, [r1, #0]
    f2d4:	0021      	movs	r1, r4
    f2d6:	1c5a      	adds	r2, r3, #1
    f2d8:	3145      	adds	r1, #69	; 0x45
    f2da:	7809      	ldrb	r1, [r1, #0]
    f2dc:	18a2      	adds	r2, r4, r2
    f2de:	3243      	adds	r2, #67	; 0x43
    f2e0:	3302      	adds	r3, #2
    f2e2:	7011      	strb	r1, [r2, #0]
    f2e4:	e00f      	b.n	f306 <_printf_common+0x82>
    f2e6:	0022      	movs	r2, r4
    f2e8:	2301      	movs	r3, #1
    f2ea:	3219      	adds	r2, #25
    f2ec:	9901      	ldr	r1, [sp, #4]
    f2ee:	9800      	ldr	r0, [sp, #0]
    f2f0:	9e08      	ldr	r6, [sp, #32]
    f2f2:	47b0      	blx	r6
    f2f4:	1c43      	adds	r3, r0, #1
    f2f6:	d00e      	beq.n	f316 <_printf_common+0x92>
    f2f8:	3501      	adds	r5, #1
    f2fa:	68e3      	ldr	r3, [r4, #12]
    f2fc:	683a      	ldr	r2, [r7, #0]
    f2fe:	1a9b      	subs	r3, r3, r2
    f300:	429d      	cmp	r5, r3
    f302:	dbf0      	blt.n	f2e6 <_printf_common+0x62>
    f304:	e7da      	b.n	f2bc <_printf_common+0x38>
    f306:	0022      	movs	r2, r4
    f308:	9901      	ldr	r1, [sp, #4]
    f30a:	3243      	adds	r2, #67	; 0x43
    f30c:	9800      	ldr	r0, [sp, #0]
    f30e:	9d08      	ldr	r5, [sp, #32]
    f310:	47a8      	blx	r5
    f312:	1c43      	adds	r3, r0, #1
    f314:	d102      	bne.n	f31c <_printf_common+0x98>
    f316:	2001      	movs	r0, #1
    f318:	4240      	negs	r0, r0
    f31a:	e020      	b.n	f35e <_printf_common+0xda>
    f31c:	2306      	movs	r3, #6
    f31e:	6820      	ldr	r0, [r4, #0]
    f320:	68e1      	ldr	r1, [r4, #12]
    f322:	683a      	ldr	r2, [r7, #0]
    f324:	4003      	ands	r3, r0
    f326:	2500      	movs	r5, #0
    f328:	2b04      	cmp	r3, #4
    f32a:	d103      	bne.n	f334 <_printf_common+0xb0>
    f32c:	1a8d      	subs	r5, r1, r2
    f32e:	43eb      	mvns	r3, r5
    f330:	17db      	asrs	r3, r3, #31
    f332:	401d      	ands	r5, r3
    f334:	68a3      	ldr	r3, [r4, #8]
    f336:	6922      	ldr	r2, [r4, #16]
    f338:	4293      	cmp	r3, r2
    f33a:	dd01      	ble.n	f340 <_printf_common+0xbc>
    f33c:	1a9b      	subs	r3, r3, r2
    f33e:	18ed      	adds	r5, r5, r3
    f340:	2700      	movs	r7, #0
    f342:	42bd      	cmp	r5, r7
    f344:	d00a      	beq.n	f35c <_printf_common+0xd8>
    f346:	0022      	movs	r2, r4
    f348:	2301      	movs	r3, #1
    f34a:	321a      	adds	r2, #26
    f34c:	9901      	ldr	r1, [sp, #4]
    f34e:	9800      	ldr	r0, [sp, #0]
    f350:	9e08      	ldr	r6, [sp, #32]
    f352:	47b0      	blx	r6
    f354:	1c43      	adds	r3, r0, #1
    f356:	d0de      	beq.n	f316 <_printf_common+0x92>
    f358:	3701      	adds	r7, #1
    f35a:	e7f2      	b.n	f342 <_printf_common+0xbe>
    f35c:	2000      	movs	r0, #0
    f35e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f360 <_printf_i>:
    f360:	b5f0      	push	{r4, r5, r6, r7, lr}
    f362:	b08b      	sub	sp, #44	; 0x2c
    f364:	9206      	str	r2, [sp, #24]
    f366:	000a      	movs	r2, r1
    f368:	3243      	adds	r2, #67	; 0x43
    f36a:	9307      	str	r3, [sp, #28]
    f36c:	9005      	str	r0, [sp, #20]
    f36e:	9204      	str	r2, [sp, #16]
    f370:	7e0a      	ldrb	r2, [r1, #24]
    f372:	000c      	movs	r4, r1
    f374:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f376:	2a6e      	cmp	r2, #110	; 0x6e
    f378:	d100      	bne.n	f37c <_printf_i+0x1c>
    f37a:	e0ab      	b.n	f4d4 <_printf_i+0x174>
    f37c:	d811      	bhi.n	f3a2 <_printf_i+0x42>
    f37e:	2a63      	cmp	r2, #99	; 0x63
    f380:	d022      	beq.n	f3c8 <_printf_i+0x68>
    f382:	d809      	bhi.n	f398 <_printf_i+0x38>
    f384:	2a00      	cmp	r2, #0
    f386:	d100      	bne.n	f38a <_printf_i+0x2a>
    f388:	e0b5      	b.n	f4f6 <_printf_i+0x196>
    f38a:	2a58      	cmp	r2, #88	; 0x58
    f38c:	d000      	beq.n	f390 <_printf_i+0x30>
    f38e:	e0c5      	b.n	f51c <_printf_i+0x1bc>
    f390:	3145      	adds	r1, #69	; 0x45
    f392:	700a      	strb	r2, [r1, #0]
    f394:	4a81      	ldr	r2, [pc, #516]	; (f59c <_printf_i+0x23c>)
    f396:	e04f      	b.n	f438 <_printf_i+0xd8>
    f398:	2a64      	cmp	r2, #100	; 0x64
    f39a:	d01d      	beq.n	f3d8 <_printf_i+0x78>
    f39c:	2a69      	cmp	r2, #105	; 0x69
    f39e:	d01b      	beq.n	f3d8 <_printf_i+0x78>
    f3a0:	e0bc      	b.n	f51c <_printf_i+0x1bc>
    f3a2:	2a73      	cmp	r2, #115	; 0x73
    f3a4:	d100      	bne.n	f3a8 <_printf_i+0x48>
    f3a6:	e0aa      	b.n	f4fe <_printf_i+0x19e>
    f3a8:	d809      	bhi.n	f3be <_printf_i+0x5e>
    f3aa:	2a6f      	cmp	r2, #111	; 0x6f
    f3ac:	d029      	beq.n	f402 <_printf_i+0xa2>
    f3ae:	2a70      	cmp	r2, #112	; 0x70
    f3b0:	d000      	beq.n	f3b4 <_printf_i+0x54>
    f3b2:	e0b3      	b.n	f51c <_printf_i+0x1bc>
    f3b4:	2220      	movs	r2, #32
    f3b6:	6809      	ldr	r1, [r1, #0]
    f3b8:	430a      	orrs	r2, r1
    f3ba:	6022      	str	r2, [r4, #0]
    f3bc:	e037      	b.n	f42e <_printf_i+0xce>
    f3be:	2a75      	cmp	r2, #117	; 0x75
    f3c0:	d01f      	beq.n	f402 <_printf_i+0xa2>
    f3c2:	2a78      	cmp	r2, #120	; 0x78
    f3c4:	d033      	beq.n	f42e <_printf_i+0xce>
    f3c6:	e0a9      	b.n	f51c <_printf_i+0x1bc>
    f3c8:	000e      	movs	r6, r1
    f3ca:	681a      	ldr	r2, [r3, #0]
    f3cc:	3642      	adds	r6, #66	; 0x42
    f3ce:	1d11      	adds	r1, r2, #4
    f3d0:	6019      	str	r1, [r3, #0]
    f3d2:	6813      	ldr	r3, [r2, #0]
    f3d4:	7033      	strb	r3, [r6, #0]
    f3d6:	e0a4      	b.n	f522 <_printf_i+0x1c2>
    f3d8:	6821      	ldr	r1, [r4, #0]
    f3da:	681a      	ldr	r2, [r3, #0]
    f3dc:	0608      	lsls	r0, r1, #24
    f3de:	d406      	bmi.n	f3ee <_printf_i+0x8e>
    f3e0:	0649      	lsls	r1, r1, #25
    f3e2:	d504      	bpl.n	f3ee <_printf_i+0x8e>
    f3e4:	1d11      	adds	r1, r2, #4
    f3e6:	6019      	str	r1, [r3, #0]
    f3e8:	2300      	movs	r3, #0
    f3ea:	5ed5      	ldrsh	r5, [r2, r3]
    f3ec:	e002      	b.n	f3f4 <_printf_i+0x94>
    f3ee:	1d11      	adds	r1, r2, #4
    f3f0:	6019      	str	r1, [r3, #0]
    f3f2:	6815      	ldr	r5, [r2, #0]
    f3f4:	2d00      	cmp	r5, #0
    f3f6:	da3b      	bge.n	f470 <_printf_i+0x110>
    f3f8:	232d      	movs	r3, #45	; 0x2d
    f3fa:	9a04      	ldr	r2, [sp, #16]
    f3fc:	426d      	negs	r5, r5
    f3fe:	7013      	strb	r3, [r2, #0]
    f400:	e036      	b.n	f470 <_printf_i+0x110>
    f402:	6821      	ldr	r1, [r4, #0]
    f404:	681a      	ldr	r2, [r3, #0]
    f406:	0608      	lsls	r0, r1, #24
    f408:	d406      	bmi.n	f418 <_printf_i+0xb8>
    f40a:	0649      	lsls	r1, r1, #25
    f40c:	d504      	bpl.n	f418 <_printf_i+0xb8>
    f40e:	6815      	ldr	r5, [r2, #0]
    f410:	1d11      	adds	r1, r2, #4
    f412:	6019      	str	r1, [r3, #0]
    f414:	b2ad      	uxth	r5, r5
    f416:	e002      	b.n	f41e <_printf_i+0xbe>
    f418:	1d11      	adds	r1, r2, #4
    f41a:	6019      	str	r1, [r3, #0]
    f41c:	6815      	ldr	r5, [r2, #0]
    f41e:	4b5f      	ldr	r3, [pc, #380]	; (f59c <_printf_i+0x23c>)
    f420:	7e22      	ldrb	r2, [r4, #24]
    f422:	9303      	str	r3, [sp, #12]
    f424:	2708      	movs	r7, #8
    f426:	2a6f      	cmp	r2, #111	; 0x6f
    f428:	d01d      	beq.n	f466 <_printf_i+0x106>
    f42a:	270a      	movs	r7, #10
    f42c:	e01b      	b.n	f466 <_printf_i+0x106>
    f42e:	0022      	movs	r2, r4
    f430:	2178      	movs	r1, #120	; 0x78
    f432:	3245      	adds	r2, #69	; 0x45
    f434:	7011      	strb	r1, [r2, #0]
    f436:	4a5a      	ldr	r2, [pc, #360]	; (f5a0 <_printf_i+0x240>)
    f438:	6819      	ldr	r1, [r3, #0]
    f43a:	9203      	str	r2, [sp, #12]
    f43c:	1d08      	adds	r0, r1, #4
    f43e:	6822      	ldr	r2, [r4, #0]
    f440:	6018      	str	r0, [r3, #0]
    f442:	680d      	ldr	r5, [r1, #0]
    f444:	0610      	lsls	r0, r2, #24
    f446:	d402      	bmi.n	f44e <_printf_i+0xee>
    f448:	0650      	lsls	r0, r2, #25
    f44a:	d500      	bpl.n	f44e <_printf_i+0xee>
    f44c:	b2ad      	uxth	r5, r5
    f44e:	07d3      	lsls	r3, r2, #31
    f450:	d502      	bpl.n	f458 <_printf_i+0xf8>
    f452:	2320      	movs	r3, #32
    f454:	431a      	orrs	r2, r3
    f456:	6022      	str	r2, [r4, #0]
    f458:	2710      	movs	r7, #16
    f45a:	2d00      	cmp	r5, #0
    f45c:	d103      	bne.n	f466 <_printf_i+0x106>
    f45e:	2320      	movs	r3, #32
    f460:	6822      	ldr	r2, [r4, #0]
    f462:	439a      	bics	r2, r3
    f464:	6022      	str	r2, [r4, #0]
    f466:	0023      	movs	r3, r4
    f468:	2200      	movs	r2, #0
    f46a:	3343      	adds	r3, #67	; 0x43
    f46c:	701a      	strb	r2, [r3, #0]
    f46e:	e002      	b.n	f476 <_printf_i+0x116>
    f470:	270a      	movs	r7, #10
    f472:	4b4a      	ldr	r3, [pc, #296]	; (f59c <_printf_i+0x23c>)
    f474:	9303      	str	r3, [sp, #12]
    f476:	6863      	ldr	r3, [r4, #4]
    f478:	60a3      	str	r3, [r4, #8]
    f47a:	2b00      	cmp	r3, #0
    f47c:	db09      	blt.n	f492 <_printf_i+0x132>
    f47e:	2204      	movs	r2, #4
    f480:	6821      	ldr	r1, [r4, #0]
    f482:	4391      	bics	r1, r2
    f484:	6021      	str	r1, [r4, #0]
    f486:	2d00      	cmp	r5, #0
    f488:	d105      	bne.n	f496 <_printf_i+0x136>
    f48a:	9e04      	ldr	r6, [sp, #16]
    f48c:	2b00      	cmp	r3, #0
    f48e:	d011      	beq.n	f4b4 <_printf_i+0x154>
    f490:	e07b      	b.n	f58a <_printf_i+0x22a>
    f492:	2d00      	cmp	r5, #0
    f494:	d079      	beq.n	f58a <_printf_i+0x22a>
    f496:	9e04      	ldr	r6, [sp, #16]
    f498:	0028      	movs	r0, r5
    f49a:	0039      	movs	r1, r7
    f49c:	f7fc fee6 	bl	c26c <__aeabi_uidivmod>
    f4a0:	9b03      	ldr	r3, [sp, #12]
    f4a2:	3e01      	subs	r6, #1
    f4a4:	5c5b      	ldrb	r3, [r3, r1]
    f4a6:	0028      	movs	r0, r5
    f4a8:	7033      	strb	r3, [r6, #0]
    f4aa:	0039      	movs	r1, r7
    f4ac:	f7fc fe58 	bl	c160 <__aeabi_uidiv>
    f4b0:	1e05      	subs	r5, r0, #0
    f4b2:	d1f1      	bne.n	f498 <_printf_i+0x138>
    f4b4:	2f08      	cmp	r7, #8
    f4b6:	d109      	bne.n	f4cc <_printf_i+0x16c>
    f4b8:	6823      	ldr	r3, [r4, #0]
    f4ba:	07db      	lsls	r3, r3, #31
    f4bc:	d506      	bpl.n	f4cc <_printf_i+0x16c>
    f4be:	6863      	ldr	r3, [r4, #4]
    f4c0:	6922      	ldr	r2, [r4, #16]
    f4c2:	4293      	cmp	r3, r2
    f4c4:	dc02      	bgt.n	f4cc <_printf_i+0x16c>
    f4c6:	2330      	movs	r3, #48	; 0x30
    f4c8:	3e01      	subs	r6, #1
    f4ca:	7033      	strb	r3, [r6, #0]
    f4cc:	9b04      	ldr	r3, [sp, #16]
    f4ce:	1b9b      	subs	r3, r3, r6
    f4d0:	6123      	str	r3, [r4, #16]
    f4d2:	e02b      	b.n	f52c <_printf_i+0x1cc>
    f4d4:	6809      	ldr	r1, [r1, #0]
    f4d6:	681a      	ldr	r2, [r3, #0]
    f4d8:	0608      	lsls	r0, r1, #24
    f4da:	d407      	bmi.n	f4ec <_printf_i+0x18c>
    f4dc:	0649      	lsls	r1, r1, #25
    f4de:	d505      	bpl.n	f4ec <_printf_i+0x18c>
    f4e0:	1d11      	adds	r1, r2, #4
    f4e2:	6019      	str	r1, [r3, #0]
    f4e4:	6813      	ldr	r3, [r2, #0]
    f4e6:	8aa2      	ldrh	r2, [r4, #20]
    f4e8:	801a      	strh	r2, [r3, #0]
    f4ea:	e004      	b.n	f4f6 <_printf_i+0x196>
    f4ec:	1d11      	adds	r1, r2, #4
    f4ee:	6019      	str	r1, [r3, #0]
    f4f0:	6813      	ldr	r3, [r2, #0]
    f4f2:	6962      	ldr	r2, [r4, #20]
    f4f4:	601a      	str	r2, [r3, #0]
    f4f6:	2300      	movs	r3, #0
    f4f8:	9e04      	ldr	r6, [sp, #16]
    f4fa:	6123      	str	r3, [r4, #16]
    f4fc:	e016      	b.n	f52c <_printf_i+0x1cc>
    f4fe:	681a      	ldr	r2, [r3, #0]
    f500:	1d11      	adds	r1, r2, #4
    f502:	6019      	str	r1, [r3, #0]
    f504:	6816      	ldr	r6, [r2, #0]
    f506:	2100      	movs	r1, #0
    f508:	6862      	ldr	r2, [r4, #4]
    f50a:	0030      	movs	r0, r6
    f50c:	f000 f9d4 	bl	f8b8 <memchr>
    f510:	2800      	cmp	r0, #0
    f512:	d001      	beq.n	f518 <_printf_i+0x1b8>
    f514:	1b80      	subs	r0, r0, r6
    f516:	6060      	str	r0, [r4, #4]
    f518:	6863      	ldr	r3, [r4, #4]
    f51a:	e003      	b.n	f524 <_printf_i+0x1c4>
    f51c:	0026      	movs	r6, r4
    f51e:	3642      	adds	r6, #66	; 0x42
    f520:	7032      	strb	r2, [r6, #0]
    f522:	2301      	movs	r3, #1
    f524:	6123      	str	r3, [r4, #16]
    f526:	2300      	movs	r3, #0
    f528:	9a04      	ldr	r2, [sp, #16]
    f52a:	7013      	strb	r3, [r2, #0]
    f52c:	9b07      	ldr	r3, [sp, #28]
    f52e:	aa09      	add	r2, sp, #36	; 0x24
    f530:	9300      	str	r3, [sp, #0]
    f532:	0021      	movs	r1, r4
    f534:	9b06      	ldr	r3, [sp, #24]
    f536:	9805      	ldr	r0, [sp, #20]
    f538:	f7ff fea4 	bl	f284 <_printf_common>
    f53c:	1c43      	adds	r3, r0, #1
    f53e:	d102      	bne.n	f546 <_printf_i+0x1e6>
    f540:	2001      	movs	r0, #1
    f542:	4240      	negs	r0, r0
    f544:	e027      	b.n	f596 <_printf_i+0x236>
    f546:	6923      	ldr	r3, [r4, #16]
    f548:	0032      	movs	r2, r6
    f54a:	9906      	ldr	r1, [sp, #24]
    f54c:	9805      	ldr	r0, [sp, #20]
    f54e:	9d07      	ldr	r5, [sp, #28]
    f550:	47a8      	blx	r5
    f552:	1c43      	adds	r3, r0, #1
    f554:	d0f4      	beq.n	f540 <_printf_i+0x1e0>
    f556:	6823      	ldr	r3, [r4, #0]
    f558:	2500      	movs	r5, #0
    f55a:	079b      	lsls	r3, r3, #30
    f55c:	d40f      	bmi.n	f57e <_printf_i+0x21e>
    f55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f560:	68e0      	ldr	r0, [r4, #12]
    f562:	4298      	cmp	r0, r3
    f564:	da17      	bge.n	f596 <_printf_i+0x236>
    f566:	0018      	movs	r0, r3
    f568:	e015      	b.n	f596 <_printf_i+0x236>
    f56a:	0022      	movs	r2, r4
    f56c:	2301      	movs	r3, #1
    f56e:	3219      	adds	r2, #25
    f570:	9906      	ldr	r1, [sp, #24]
    f572:	9805      	ldr	r0, [sp, #20]
    f574:	9e07      	ldr	r6, [sp, #28]
    f576:	47b0      	blx	r6
    f578:	1c43      	adds	r3, r0, #1
    f57a:	d0e1      	beq.n	f540 <_printf_i+0x1e0>
    f57c:	3501      	adds	r5, #1
    f57e:	68e3      	ldr	r3, [r4, #12]
    f580:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f582:	1a9b      	subs	r3, r3, r2
    f584:	429d      	cmp	r5, r3
    f586:	dbf0      	blt.n	f56a <_printf_i+0x20a>
    f588:	e7e9      	b.n	f55e <_printf_i+0x1fe>
    f58a:	0026      	movs	r6, r4
    f58c:	9b03      	ldr	r3, [sp, #12]
    f58e:	3642      	adds	r6, #66	; 0x42
    f590:	781b      	ldrb	r3, [r3, #0]
    f592:	7033      	strb	r3, [r6, #0]
    f594:	e78e      	b.n	f4b4 <_printf_i+0x154>
    f596:	b00b      	add	sp, #44	; 0x2c
    f598:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f59a:	46c0      	nop			; (mov r8, r8)
    f59c:	0000fd11 	.word	0x0000fd11
    f5a0:	0000fd22 	.word	0x0000fd22

0000f5a4 <_sbrk_r>:
    f5a4:	2300      	movs	r3, #0
    f5a6:	b570      	push	{r4, r5, r6, lr}
    f5a8:	4c06      	ldr	r4, [pc, #24]	; (f5c4 <_sbrk_r+0x20>)
    f5aa:	0005      	movs	r5, r0
    f5ac:	0008      	movs	r0, r1
    f5ae:	6023      	str	r3, [r4, #0]
    f5b0:	f7fc fcf8 	bl	bfa4 <_sbrk>
    f5b4:	1c43      	adds	r3, r0, #1
    f5b6:	d103      	bne.n	f5c0 <_sbrk_r+0x1c>
    f5b8:	6823      	ldr	r3, [r4, #0]
    f5ba:	2b00      	cmp	r3, #0
    f5bc:	d000      	beq.n	f5c0 <_sbrk_r+0x1c>
    f5be:	602b      	str	r3, [r5, #0]
    f5c0:	bd70      	pop	{r4, r5, r6, pc}
    f5c2:	46c0      	nop			; (mov r8, r8)
    f5c4:	200010ac 	.word	0x200010ac

0000f5c8 <__sread>:
    f5c8:	b570      	push	{r4, r5, r6, lr}
    f5ca:	000c      	movs	r4, r1
    f5cc:	250e      	movs	r5, #14
    f5ce:	5f49      	ldrsh	r1, [r1, r5]
    f5d0:	f000 f97e 	bl	f8d0 <_read_r>
    f5d4:	2800      	cmp	r0, #0
    f5d6:	db03      	blt.n	f5e0 <__sread+0x18>
    f5d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    f5da:	181b      	adds	r3, r3, r0
    f5dc:	6563      	str	r3, [r4, #84]	; 0x54
    f5de:	e003      	b.n	f5e8 <__sread+0x20>
    f5e0:	89a2      	ldrh	r2, [r4, #12]
    f5e2:	4b02      	ldr	r3, [pc, #8]	; (f5ec <__sread+0x24>)
    f5e4:	4013      	ands	r3, r2
    f5e6:	81a3      	strh	r3, [r4, #12]
    f5e8:	bd70      	pop	{r4, r5, r6, pc}
    f5ea:	46c0      	nop			; (mov r8, r8)
    f5ec:	ffffefff 	.word	0xffffefff

0000f5f0 <__swrite>:
    f5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5f2:	001f      	movs	r7, r3
    f5f4:	898b      	ldrh	r3, [r1, #12]
    f5f6:	0005      	movs	r5, r0
    f5f8:	000c      	movs	r4, r1
    f5fa:	0016      	movs	r6, r2
    f5fc:	05db      	lsls	r3, r3, #23
    f5fe:	d505      	bpl.n	f60c <__swrite+0x1c>
    f600:	230e      	movs	r3, #14
    f602:	5ec9      	ldrsh	r1, [r1, r3]
    f604:	2200      	movs	r2, #0
    f606:	2302      	movs	r3, #2
    f608:	f000 f942 	bl	f890 <_lseek_r>
    f60c:	89a2      	ldrh	r2, [r4, #12]
    f60e:	4b05      	ldr	r3, [pc, #20]	; (f624 <__swrite+0x34>)
    f610:	0028      	movs	r0, r5
    f612:	4013      	ands	r3, r2
    f614:	81a3      	strh	r3, [r4, #12]
    f616:	0032      	movs	r2, r6
    f618:	230e      	movs	r3, #14
    f61a:	5ee1      	ldrsh	r1, [r4, r3]
    f61c:	003b      	movs	r3, r7
    f61e:	f000 f877 	bl	f710 <_write_r>
    f622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f624:	ffffefff 	.word	0xffffefff

0000f628 <__sseek>:
    f628:	b570      	push	{r4, r5, r6, lr}
    f62a:	000c      	movs	r4, r1
    f62c:	250e      	movs	r5, #14
    f62e:	5f49      	ldrsh	r1, [r1, r5]
    f630:	f000 f92e 	bl	f890 <_lseek_r>
    f634:	89a3      	ldrh	r3, [r4, #12]
    f636:	1c42      	adds	r2, r0, #1
    f638:	d103      	bne.n	f642 <__sseek+0x1a>
    f63a:	4a05      	ldr	r2, [pc, #20]	; (f650 <__sseek+0x28>)
    f63c:	4013      	ands	r3, r2
    f63e:	81a3      	strh	r3, [r4, #12]
    f640:	e004      	b.n	f64c <__sseek+0x24>
    f642:	2280      	movs	r2, #128	; 0x80
    f644:	0152      	lsls	r2, r2, #5
    f646:	4313      	orrs	r3, r2
    f648:	81a3      	strh	r3, [r4, #12]
    f64a:	6560      	str	r0, [r4, #84]	; 0x54
    f64c:	bd70      	pop	{r4, r5, r6, pc}
    f64e:	46c0      	nop			; (mov r8, r8)
    f650:	ffffefff 	.word	0xffffefff

0000f654 <__sclose>:
    f654:	b510      	push	{r4, lr}
    f656:	230e      	movs	r3, #14
    f658:	5ec9      	ldrsh	r1, [r1, r3]
    f65a:	f000 f8e3 	bl	f824 <_close_r>
    f65e:	bd10      	pop	{r4, pc}

0000f660 <__swbuf_r>:
    f660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f662:	0005      	movs	r5, r0
    f664:	000f      	movs	r7, r1
    f666:	0014      	movs	r4, r2
    f668:	2800      	cmp	r0, #0
    f66a:	d004      	beq.n	f676 <__swbuf_r+0x16>
    f66c:	6983      	ldr	r3, [r0, #24]
    f66e:	2b00      	cmp	r3, #0
    f670:	d101      	bne.n	f676 <__swbuf_r+0x16>
    f672:	f7ff fb25 	bl	ecc0 <__sinit>
    f676:	4b23      	ldr	r3, [pc, #140]	; (f704 <__swbuf_r+0xa4>)
    f678:	429c      	cmp	r4, r3
    f67a:	d101      	bne.n	f680 <__swbuf_r+0x20>
    f67c:	686c      	ldr	r4, [r5, #4]
    f67e:	e008      	b.n	f692 <__swbuf_r+0x32>
    f680:	4b21      	ldr	r3, [pc, #132]	; (f708 <__swbuf_r+0xa8>)
    f682:	429c      	cmp	r4, r3
    f684:	d101      	bne.n	f68a <__swbuf_r+0x2a>
    f686:	68ac      	ldr	r4, [r5, #8]
    f688:	e003      	b.n	f692 <__swbuf_r+0x32>
    f68a:	4b20      	ldr	r3, [pc, #128]	; (f70c <__swbuf_r+0xac>)
    f68c:	429c      	cmp	r4, r3
    f68e:	d100      	bne.n	f692 <__swbuf_r+0x32>
    f690:	68ec      	ldr	r4, [r5, #12]
    f692:	69a3      	ldr	r3, [r4, #24]
    f694:	60a3      	str	r3, [r4, #8]
    f696:	89a3      	ldrh	r3, [r4, #12]
    f698:	071b      	lsls	r3, r3, #28
    f69a:	d50a      	bpl.n	f6b2 <__swbuf_r+0x52>
    f69c:	6923      	ldr	r3, [r4, #16]
    f69e:	2b00      	cmp	r3, #0
    f6a0:	d007      	beq.n	f6b2 <__swbuf_r+0x52>
    f6a2:	6823      	ldr	r3, [r4, #0]
    f6a4:	6922      	ldr	r2, [r4, #16]
    f6a6:	b2fe      	uxtb	r6, r7
    f6a8:	1a98      	subs	r0, r3, r2
    f6aa:	6963      	ldr	r3, [r4, #20]
    f6ac:	4298      	cmp	r0, r3
    f6ae:	db0f      	blt.n	f6d0 <__swbuf_r+0x70>
    f6b0:	e008      	b.n	f6c4 <__swbuf_r+0x64>
    f6b2:	0021      	movs	r1, r4
    f6b4:	0028      	movs	r0, r5
    f6b6:	f000 f83f 	bl	f738 <__swsetup_r>
    f6ba:	2800      	cmp	r0, #0
    f6bc:	d0f1      	beq.n	f6a2 <__swbuf_r+0x42>
    f6be:	2001      	movs	r0, #1
    f6c0:	4240      	negs	r0, r0
    f6c2:	e01d      	b.n	f700 <__swbuf_r+0xa0>
    f6c4:	0021      	movs	r1, r4
    f6c6:	0028      	movs	r0, r5
    f6c8:	f7ff fa8c 	bl	ebe4 <_fflush_r>
    f6cc:	2800      	cmp	r0, #0
    f6ce:	d1f6      	bne.n	f6be <__swbuf_r+0x5e>
    f6d0:	68a3      	ldr	r3, [r4, #8]
    f6d2:	3001      	adds	r0, #1
    f6d4:	3b01      	subs	r3, #1
    f6d6:	60a3      	str	r3, [r4, #8]
    f6d8:	6823      	ldr	r3, [r4, #0]
    f6da:	1c5a      	adds	r2, r3, #1
    f6dc:	6022      	str	r2, [r4, #0]
    f6de:	701f      	strb	r7, [r3, #0]
    f6e0:	6963      	ldr	r3, [r4, #20]
    f6e2:	4298      	cmp	r0, r3
    f6e4:	d005      	beq.n	f6f2 <__swbuf_r+0x92>
    f6e6:	89a3      	ldrh	r3, [r4, #12]
    f6e8:	0030      	movs	r0, r6
    f6ea:	07db      	lsls	r3, r3, #31
    f6ec:	d508      	bpl.n	f700 <__swbuf_r+0xa0>
    f6ee:	2e0a      	cmp	r6, #10
    f6f0:	d106      	bne.n	f700 <__swbuf_r+0xa0>
    f6f2:	0021      	movs	r1, r4
    f6f4:	0028      	movs	r0, r5
    f6f6:	f7ff fa75 	bl	ebe4 <_fflush_r>
    f6fa:	2800      	cmp	r0, #0
    f6fc:	d1df      	bne.n	f6be <__swbuf_r+0x5e>
    f6fe:	0030      	movs	r0, r6
    f700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f702:	46c0      	nop			; (mov r8, r8)
    f704:	0000fca0 	.word	0x0000fca0
    f708:	0000fcc0 	.word	0x0000fcc0
    f70c:	0000fce0 	.word	0x0000fce0

0000f710 <_write_r>:
    f710:	b570      	push	{r4, r5, r6, lr}
    f712:	0005      	movs	r5, r0
    f714:	0008      	movs	r0, r1
    f716:	0011      	movs	r1, r2
    f718:	2200      	movs	r2, #0
    f71a:	4c06      	ldr	r4, [pc, #24]	; (f734 <_write_r+0x24>)
    f71c:	6022      	str	r2, [r4, #0]
    f71e:	001a      	movs	r2, r3
    f720:	f7f2 fffe 	bl	2720 <_write>
    f724:	1c43      	adds	r3, r0, #1
    f726:	d103      	bne.n	f730 <_write_r+0x20>
    f728:	6823      	ldr	r3, [r4, #0]
    f72a:	2b00      	cmp	r3, #0
    f72c:	d000      	beq.n	f730 <_write_r+0x20>
    f72e:	602b      	str	r3, [r5, #0]
    f730:	bd70      	pop	{r4, r5, r6, pc}
    f732:	46c0      	nop			; (mov r8, r8)
    f734:	200010ac 	.word	0x200010ac

0000f738 <__swsetup_r>:
    f738:	4b36      	ldr	r3, [pc, #216]	; (f814 <__swsetup_r+0xdc>)
    f73a:	b570      	push	{r4, r5, r6, lr}
    f73c:	681d      	ldr	r5, [r3, #0]
    f73e:	0006      	movs	r6, r0
    f740:	000c      	movs	r4, r1
    f742:	2d00      	cmp	r5, #0
    f744:	d005      	beq.n	f752 <__swsetup_r+0x1a>
    f746:	69ab      	ldr	r3, [r5, #24]
    f748:	2b00      	cmp	r3, #0
    f74a:	d102      	bne.n	f752 <__swsetup_r+0x1a>
    f74c:	0028      	movs	r0, r5
    f74e:	f7ff fab7 	bl	ecc0 <__sinit>
    f752:	4b31      	ldr	r3, [pc, #196]	; (f818 <__swsetup_r+0xe0>)
    f754:	429c      	cmp	r4, r3
    f756:	d101      	bne.n	f75c <__swsetup_r+0x24>
    f758:	686c      	ldr	r4, [r5, #4]
    f75a:	e008      	b.n	f76e <__swsetup_r+0x36>
    f75c:	4b2f      	ldr	r3, [pc, #188]	; (f81c <__swsetup_r+0xe4>)
    f75e:	429c      	cmp	r4, r3
    f760:	d101      	bne.n	f766 <__swsetup_r+0x2e>
    f762:	68ac      	ldr	r4, [r5, #8]
    f764:	e003      	b.n	f76e <__swsetup_r+0x36>
    f766:	4b2e      	ldr	r3, [pc, #184]	; (f820 <__swsetup_r+0xe8>)
    f768:	429c      	cmp	r4, r3
    f76a:	d100      	bne.n	f76e <__swsetup_r+0x36>
    f76c:	68ec      	ldr	r4, [r5, #12]
    f76e:	220c      	movs	r2, #12
    f770:	5ea3      	ldrsh	r3, [r4, r2]
    f772:	b29a      	uxth	r2, r3
    f774:	0711      	lsls	r1, r2, #28
    f776:	d423      	bmi.n	f7c0 <__swsetup_r+0x88>
    f778:	06d1      	lsls	r1, r2, #27
    f77a:	d407      	bmi.n	f78c <__swsetup_r+0x54>
    f77c:	2209      	movs	r2, #9
    f77e:	2001      	movs	r0, #1
    f780:	6032      	str	r2, [r6, #0]
    f782:	3237      	adds	r2, #55	; 0x37
    f784:	4313      	orrs	r3, r2
    f786:	81a3      	strh	r3, [r4, #12]
    f788:	4240      	negs	r0, r0
    f78a:	e042      	b.n	f812 <__swsetup_r+0xda>
    f78c:	0753      	lsls	r3, r2, #29
    f78e:	d513      	bpl.n	f7b8 <__swsetup_r+0x80>
    f790:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f792:	2900      	cmp	r1, #0
    f794:	d008      	beq.n	f7a8 <__swsetup_r+0x70>
    f796:	0023      	movs	r3, r4
    f798:	3344      	adds	r3, #68	; 0x44
    f79a:	4299      	cmp	r1, r3
    f79c:	d002      	beq.n	f7a4 <__swsetup_r+0x6c>
    f79e:	0030      	movs	r0, r6
    f7a0:	f7ff fb90 	bl	eec4 <_free_r>
    f7a4:	2300      	movs	r3, #0
    f7a6:	6363      	str	r3, [r4, #52]	; 0x34
    f7a8:	2224      	movs	r2, #36	; 0x24
    f7aa:	89a3      	ldrh	r3, [r4, #12]
    f7ac:	4393      	bics	r3, r2
    f7ae:	81a3      	strh	r3, [r4, #12]
    f7b0:	2300      	movs	r3, #0
    f7b2:	6063      	str	r3, [r4, #4]
    f7b4:	6923      	ldr	r3, [r4, #16]
    f7b6:	6023      	str	r3, [r4, #0]
    f7b8:	2208      	movs	r2, #8
    f7ba:	89a3      	ldrh	r3, [r4, #12]
    f7bc:	4313      	orrs	r3, r2
    f7be:	81a3      	strh	r3, [r4, #12]
    f7c0:	6923      	ldr	r3, [r4, #16]
    f7c2:	2b00      	cmp	r3, #0
    f7c4:	d10b      	bne.n	f7de <__swsetup_r+0xa6>
    f7c6:	23a0      	movs	r3, #160	; 0xa0
    f7c8:	89a2      	ldrh	r2, [r4, #12]
    f7ca:	009b      	lsls	r3, r3, #2
    f7cc:	4013      	ands	r3, r2
    f7ce:	2280      	movs	r2, #128	; 0x80
    f7d0:	0092      	lsls	r2, r2, #2
    f7d2:	4293      	cmp	r3, r2
    f7d4:	d003      	beq.n	f7de <__swsetup_r+0xa6>
    f7d6:	0021      	movs	r1, r4
    f7d8:	0030      	movs	r0, r6
    f7da:	f7ff fb2b 	bl	ee34 <__smakebuf_r>
    f7de:	2301      	movs	r3, #1
    f7e0:	89a2      	ldrh	r2, [r4, #12]
    f7e2:	4013      	ands	r3, r2
    f7e4:	d005      	beq.n	f7f2 <__swsetup_r+0xba>
    f7e6:	2300      	movs	r3, #0
    f7e8:	60a3      	str	r3, [r4, #8]
    f7ea:	6963      	ldr	r3, [r4, #20]
    f7ec:	425b      	negs	r3, r3
    f7ee:	61a3      	str	r3, [r4, #24]
    f7f0:	e003      	b.n	f7fa <__swsetup_r+0xc2>
    f7f2:	0792      	lsls	r2, r2, #30
    f7f4:	d400      	bmi.n	f7f8 <__swsetup_r+0xc0>
    f7f6:	6963      	ldr	r3, [r4, #20]
    f7f8:	60a3      	str	r3, [r4, #8]
    f7fa:	2000      	movs	r0, #0
    f7fc:	6923      	ldr	r3, [r4, #16]
    f7fe:	4283      	cmp	r3, r0
    f800:	d107      	bne.n	f812 <__swsetup_r+0xda>
    f802:	220c      	movs	r2, #12
    f804:	5ea3      	ldrsh	r3, [r4, r2]
    f806:	061a      	lsls	r2, r3, #24
    f808:	d503      	bpl.n	f812 <__swsetup_r+0xda>
    f80a:	2240      	movs	r2, #64	; 0x40
    f80c:	4313      	orrs	r3, r2
    f80e:	81a3      	strh	r3, [r4, #12]
    f810:	3801      	subs	r0, #1
    f812:	bd70      	pop	{r4, r5, r6, pc}
    f814:	20000088 	.word	0x20000088
    f818:	0000fca0 	.word	0x0000fca0
    f81c:	0000fcc0 	.word	0x0000fcc0
    f820:	0000fce0 	.word	0x0000fce0

0000f824 <_close_r>:
    f824:	2300      	movs	r3, #0
    f826:	b570      	push	{r4, r5, r6, lr}
    f828:	4c06      	ldr	r4, [pc, #24]	; (f844 <_close_r+0x20>)
    f82a:	0005      	movs	r5, r0
    f82c:	0008      	movs	r0, r1
    f82e:	6023      	str	r3, [r4, #0]
    f830:	f7fc fbd6 	bl	bfe0 <_close>
    f834:	1c43      	adds	r3, r0, #1
    f836:	d103      	bne.n	f840 <_close_r+0x1c>
    f838:	6823      	ldr	r3, [r4, #0]
    f83a:	2b00      	cmp	r3, #0
    f83c:	d000      	beq.n	f840 <_close_r+0x1c>
    f83e:	602b      	str	r3, [r5, #0]
    f840:	bd70      	pop	{r4, r5, r6, pc}
    f842:	46c0      	nop			; (mov r8, r8)
    f844:	200010ac 	.word	0x200010ac

0000f848 <_fstat_r>:
    f848:	2300      	movs	r3, #0
    f84a:	b570      	push	{r4, r5, r6, lr}
    f84c:	4c06      	ldr	r4, [pc, #24]	; (f868 <_fstat_r+0x20>)
    f84e:	0005      	movs	r5, r0
    f850:	0008      	movs	r0, r1
    f852:	0011      	movs	r1, r2
    f854:	6023      	str	r3, [r4, #0]
    f856:	f7fc fbcd 	bl	bff4 <_fstat>
    f85a:	1c43      	adds	r3, r0, #1
    f85c:	d103      	bne.n	f866 <_fstat_r+0x1e>
    f85e:	6823      	ldr	r3, [r4, #0]
    f860:	2b00      	cmp	r3, #0
    f862:	d000      	beq.n	f866 <_fstat_r+0x1e>
    f864:	602b      	str	r3, [r5, #0]
    f866:	bd70      	pop	{r4, r5, r6, pc}
    f868:	200010ac 	.word	0x200010ac

0000f86c <_isatty_r>:
    f86c:	2300      	movs	r3, #0
    f86e:	b570      	push	{r4, r5, r6, lr}
    f870:	4c06      	ldr	r4, [pc, #24]	; (f88c <_isatty_r+0x20>)
    f872:	0005      	movs	r5, r0
    f874:	0008      	movs	r0, r1
    f876:	6023      	str	r3, [r4, #0]
    f878:	f7fc fbca 	bl	c010 <_isatty>
    f87c:	1c43      	adds	r3, r0, #1
    f87e:	d103      	bne.n	f888 <_isatty_r+0x1c>
    f880:	6823      	ldr	r3, [r4, #0]
    f882:	2b00      	cmp	r3, #0
    f884:	d000      	beq.n	f888 <_isatty_r+0x1c>
    f886:	602b      	str	r3, [r5, #0]
    f888:	bd70      	pop	{r4, r5, r6, pc}
    f88a:	46c0      	nop			; (mov r8, r8)
    f88c:	200010ac 	.word	0x200010ac

0000f890 <_lseek_r>:
    f890:	b570      	push	{r4, r5, r6, lr}
    f892:	0005      	movs	r5, r0
    f894:	0008      	movs	r0, r1
    f896:	0011      	movs	r1, r2
    f898:	2200      	movs	r2, #0
    f89a:	4c06      	ldr	r4, [pc, #24]	; (f8b4 <_lseek_r+0x24>)
    f89c:	6022      	str	r2, [r4, #0]
    f89e:	001a      	movs	r2, r3
    f8a0:	f7fc fbc0 	bl	c024 <_lseek>
    f8a4:	1c43      	adds	r3, r0, #1
    f8a6:	d103      	bne.n	f8b0 <_lseek_r+0x20>
    f8a8:	6823      	ldr	r3, [r4, #0]
    f8aa:	2b00      	cmp	r3, #0
    f8ac:	d000      	beq.n	f8b0 <_lseek_r+0x20>
    f8ae:	602b      	str	r3, [r5, #0]
    f8b0:	bd70      	pop	{r4, r5, r6, pc}
    f8b2:	46c0      	nop			; (mov r8, r8)
    f8b4:	200010ac 	.word	0x200010ac

0000f8b8 <memchr>:
    f8b8:	b2c9      	uxtb	r1, r1
    f8ba:	1882      	adds	r2, r0, r2
    f8bc:	4290      	cmp	r0, r2
    f8be:	d004      	beq.n	f8ca <memchr+0x12>
    f8c0:	7803      	ldrb	r3, [r0, #0]
    f8c2:	428b      	cmp	r3, r1
    f8c4:	d002      	beq.n	f8cc <memchr+0x14>
    f8c6:	3001      	adds	r0, #1
    f8c8:	e7f8      	b.n	f8bc <memchr+0x4>
    f8ca:	2000      	movs	r0, #0
    f8cc:	4770      	bx	lr
	...

0000f8d0 <_read_r>:
    f8d0:	b570      	push	{r4, r5, r6, lr}
    f8d2:	0005      	movs	r5, r0
    f8d4:	0008      	movs	r0, r1
    f8d6:	0011      	movs	r1, r2
    f8d8:	2200      	movs	r2, #0
    f8da:	4c06      	ldr	r4, [pc, #24]	; (f8f4 <_read_r+0x24>)
    f8dc:	6022      	str	r2, [r4, #0]
    f8de:	001a      	movs	r2, r3
    f8e0:	f7f2 fef4 	bl	26cc <_read>
    f8e4:	1c43      	adds	r3, r0, #1
    f8e6:	d103      	bne.n	f8f0 <_read_r+0x20>
    f8e8:	6823      	ldr	r3, [r4, #0]
    f8ea:	2b00      	cmp	r3, #0
    f8ec:	d000      	beq.n	f8f0 <_read_r+0x20>
    f8ee:	602b      	str	r3, [r5, #0]
    f8f0:	bd70      	pop	{r4, r5, r6, pc}
    f8f2:	46c0      	nop			; (mov r8, r8)
    f8f4:	200010ac 	.word	0x200010ac
    f8f8:	0000ffff 	.word	0x0000ffff
    f8fc:	0000ffff 	.word	0x0000ffff
    f900:	0000ffff 	.word	0x0000ffff
    f904:	0000ffff 	.word	0x0000ffff
    f908:	0000ffff 	.word	0x0000ffff
    f90c:	0000ffff 	.word	0x0000ffff
    f910:	00000006 	.word	0x00000006
    f914:	00000007 	.word	0x00000007
    f918:	0000ffff 	.word	0x0000ffff
    f91c:	0000ffff 	.word	0x0000ffff
    f920:	0000ffff 	.word	0x0000ffff
    f924:	0000ffff 	.word	0x0000ffff
    f928:	0000ffff 	.word	0x0000ffff
    f92c:	0000ffff 	.word	0x0000ffff
    f930:	0000ffff 	.word	0x0000ffff
    f934:	0000ffff 	.word	0x0000ffff
    f938:	00000008 	.word	0x00000008
    f93c:	00000009 	.word	0x00000009
    f940:	0000ffff 	.word	0x0000ffff
    f944:	0000ffff 	.word	0x0000ffff
    f948:	000004da 	.word	0x000004da
    f94c:	000004e0 	.word	0x000004e0
    f950:	000004e0 	.word	0x000004e0
    f954:	000004e0 	.word	0x000004e0
    f958:	000004e0 	.word	0x000004e0
    f95c:	000004e0 	.word	0x000004e0
    f960:	000004e0 	.word	0x000004e0
    f964:	000004e0 	.word	0x000004e0
    f968:	000004e0 	.word	0x000004e0
    f96c:	000004e0 	.word	0x000004e0
    f970:	000004e0 	.word	0x000004e0
    f974:	000004e0 	.word	0x000004e0
    f978:	000004e0 	.word	0x000004e0
    f97c:	000004e0 	.word	0x000004e0
    f980:	000004e0 	.word	0x000004e0
    f984:	000004e0 	.word	0x000004e0
    f988:	000004b8 	.word	0x000004b8
    f98c:	000004e0 	.word	0x000004e0
    f990:	000004e0 	.word	0x000004e0
    f994:	000004e0 	.word	0x000004e0
    f998:	000004e0 	.word	0x000004e0
    f99c:	000004e0 	.word	0x000004e0
    f9a0:	000004e0 	.word	0x000004e0
    f9a4:	000004e0 	.word	0x000004e0
    f9a8:	000004e0 	.word	0x000004e0
    f9ac:	000004e0 	.word	0x000004e0
    f9b0:	000004e0 	.word	0x000004e0
    f9b4:	000004e0 	.word	0x000004e0
    f9b8:	000004e0 	.word	0x000004e0
    f9bc:	000004e0 	.word	0x000004e0
    f9c0:	000004e0 	.word	0x000004e0
    f9c4:	000004e0 	.word	0x000004e0
    f9c8:	000004d4 	.word	0x000004d4
    f9cc:	000004e0 	.word	0x000004e0
    f9d0:	000004e0 	.word	0x000004e0
    f9d4:	000004e0 	.word	0x000004e0
    f9d8:	000004e0 	.word	0x000004e0
    f9dc:	000004e0 	.word	0x000004e0
    f9e0:	000004e0 	.word	0x000004e0
    f9e4:	000004e0 	.word	0x000004e0
    f9e8:	000004e0 	.word	0x000004e0
    f9ec:	000004e0 	.word	0x000004e0
    f9f0:	000004e0 	.word	0x000004e0
    f9f4:	000004e0 	.word	0x000004e0
    f9f8:	000004e0 	.word	0x000004e0
    f9fc:	000004e0 	.word	0x000004e0
    fa00:	000004e0 	.word	0x000004e0
    fa04:	000004e0 	.word	0x000004e0
    fa08:	000004ce 	.word	0x000004ce
    fa0c:	00000476 	.word	0x00000476
    fa10:	0000048c 	.word	0x0000048c
    fa14:	000004a2 	.word	0x000004a2
    fa18:	0000045c 	.word	0x0000045c

0000fa1c <_usb_device_irq_bits>:
    fa1c:	00080004 00800070 01000001 00000200     ....p...........
    fa2c:	20433249 64616552 69614620 0000006c     I2C Read Fail...
    fa3c:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    fa4c:	42001800 42001c00 42002c00 42003000     ...B...B.,.B.0.B
    fa5c:	42003400 001c1c1b 10000800 00002000     .4.B......... ..
    fa6c:	20646e45 69766544 00006563 74736554     End Device..Test
    fa7c:	75636553 79746972 3079654b 00000000     SecurityKey0....
    fa8c:	00004a0e 00004a14 00004a5a 00004a1a     .J...J..ZJ...J..
    fa9c:	00004a5a 00004a5a 00004a22 00004a40     ZJ..ZJ.."J..@J..
    faac:	00004a4e 00008f58 00008f62 00008f6e     NJ..X...b...n...
    fabc:	00008f78 00008f82 00009abe 00009be8     x...............
    facc:	00009aca 00009af6 00009bea 00009b28     ............(...
    fadc:	00009bea 00009b90 0c0b0a09 00000e0d     ................
    faec:	0000b11a 0000b194 0000b194 0000b138     ............8...
    fafc:	0000b132 0000b13e 0000b120 0000b144     2...>... ...D...
    fb0c:	0000b17a 0000b4a4 0000b4f4 0000b4f4     z...............
    fb1c:	0000b4f0 0000b496 0000b4b6 0000b486     ................
    fb2c:	0000b4c8 0000b4da 0000b542 0000b570     ........B...p...
    fb3c:	0000b570 0000b56c 0000b53c 0000b548     p...l...<...H...
    fb4c:	0000b536 0000b54e 0000b554 0000c82e     6...N...T.......
    fb5c:	0000c752 0000c810 0000c7e8 0000c810     R...............
    fb6c:	0000c7dc 0000c810 0000c7e8 0000c752     ............R...
    fb7c:	0000c752 0000c7dc 0000c7e8 0000c894     R...............
    fb8c:	0000c894 0000c894 0000c816 0000c752     ............R...
    fb9c:	0000c752 0000c7fc 0000c7e6 0000c7fc     R...............
    fbac:	0000c7dc 0000c7fc 0000c7e6 0000c752     ............R...
    fbbc:	0000c752 0000c7dc 0000c7e6 0000c894     R...............
    fbcc:	0000c894 0000c894 0000c8a0 0000cb8c     ................
    fbdc:	0000caea 0000caea 0000cae8 0000cb7e     ............~...
    fbec:	0000cb7e 0000cb74 0000cae8 0000cb7e     ~...t.......~...
    fbfc:	0000cb74 0000cb7e 0000cae8 0000cb84     t...~...........
    fc0c:	0000cb84 0000cb84 0000cc0e 0000d8ac     ................
    fc1c:	0000d77a 0000d880 0000d770 0000d880     z.......p.......
    fc2c:	0000d88a 0000d880 0000d770 0000d77a     ........p...z...
    fc3c:	0000d77a 0000d88a 0000d770 0000d766     z.......p...f...
    fc4c:	0000d766 0000d766 0000dadc 0000ded8     f...f...........
    fc5c:	0000dd98 0000dd98 0000dd96 0000deb0     ................
    fc6c:	0000deb0 0000dea2 0000dd96 0000deb0     ................
    fc7c:	0000dea2 0000deb0 0000dd96 0000deb8     ................
    fc8c:	0000deb8 0000deb8 0000e0b8 00000043     ............C...

0000fc9c <_global_impure_ptr>:
    fc9c:	20000028                                (.. 

0000fca0 <__sf_fake_stdin>:
	...

0000fcc0 <__sf_fake_stdout>:
	...

0000fce0 <__sf_fake_stderr>:
	...
    fd00:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    fd10:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    fd20:	31300046 35343332 39383736 64636261     F.0123456789abcd
    fd30:	00006665                                ef..

0000fd34 <_init>:
    fd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd36:	46c0      	nop			; (mov r8, r8)
    fd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
    fd3a:	bc08      	pop	{r3}
    fd3c:	469e      	mov	lr, r3
    fd3e:	4770      	bx	lr

0000fd40 <__init_array_start>:
    fd40:	000000dd 	.word	0x000000dd

0000fd44 <_fini>:
    fd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd46:	46c0      	nop			; (mov r8, r8)
    fd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    fd4a:	bc08      	pop	{r3}
    fd4c:	469e      	mov	lr, r3
    fd4e:	4770      	bx	lr

0000fd50 <__fini_array_start>:
    fd50:	000000b5 	.word	0x000000b5
